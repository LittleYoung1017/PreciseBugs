diff --git a/gn/sksl_tests.gni b/gn/sksl_tests.gni
index 1d21f2c0db..bf9e17561d 100644
--- a/gn/sksl_tests.gni
+++ b/gn/sksl_tests.gni
@@ -457,6 +457,7 @@ sksl_inliner_tests = [
   "/sksl/inliner/InlinerHonorsGLSLOutParamSemantics.sksl",
   "/sksl/inliner/InlinerManglesNames.sksl",
   "/sksl/inliner/NoInline.sksl",
+  "/sksl/inliner/Ossfuzz37994.sksl",
   "/sksl/inliner/ShortCircuitEvaluationsCannotInlineRightHandSide.sksl",
   "/sksl/inliner/StaticSwitch.sksl",
   "/sksl/inliner/StructsCanBeInlinedSafely.sksl",
diff --git a/resources/sksl/inliner/Ossfuzz37994.sksl b/resources/sksl/inliner/Ossfuzz37994.sksl
new file mode 100644
index 0000000000..2b36a33d64
--- /dev/null
+++ b/resources/sksl/inliner/Ossfuzz37994.sksl
@@ -0,0 +1,3 @@
+half4 colorGreen;
+float2 vector(float2 x,float2 y) { x=normalize(y); return x; }
+half4 main(float2 xy) { vector(float2(2),float2(4)); return colorGreen; }
diff --git a/src/sksl/SkSLCompiler.cpp b/src/sksl/SkSLCompiler.cpp
index 5ab501f44b..0fc1b9abf6 100644
--- a/src/sksl/SkSLCompiler.cpp
+++ b/src/sksl/SkSLCompiler.cpp
@@ -503,7 +503,7 @@ bool Compiler::optimize(LoadedModule& module) {
 
     while (this->errorCount() == 0) {
         // Perform inline-candidate analysis and inline any functions deemed suitable.
-        if (!fInliner.analyze(module.fElements, module.fSymbols, usage.get())) {
+        if (!this->runInliner(module.fElements, module.fSymbols, usage.get())) {
             break;
         }
     }
@@ -789,7 +789,7 @@ bool Compiler::optimize(Program& program) {
     if (this->errorCount() == 0) {
         // Run the inliner only once; it is expensive! Multiple passes can occasionally shake out
         // more wins, but it's diminishing returns.
-        fInliner.analyze(program.ownedElements(), program.fSymbols, usage);
+        this->runInliner(program.ownedElements(), program.fSymbols, usage);
 
         while (this->removeDeadFunctions(program, usage)) {
             // Removing dead functions may cause more functions to become unreferenced. Try again.
@@ -806,6 +806,26 @@ bool Compiler::optimize(Program& program) {
     return this->errorCount() == 0;
 }
 
+bool Compiler::runInliner(const std::vector<std::unique_ptr<ProgramElement>>& elements,
+                          std::shared_ptr<SymbolTable> symbols,
+                          ProgramUsage* usage) {
+    // The program's SymbolTable was taken out of the IRGenerator when the program was bundled, but
+    // the inliner relies (indirectly) on having a valid SymbolTable in the IRGenerator.
+    // In particular, inlining can turn a non-optimizable expression like `normalize(myVec)` into
+    // `normalize(vec2(7))`, which is now optimizable. The optimizer can use DSL to simplify this
+    // expression--e.g., in the case of normalize, using DSL's Length(). The DSL relies on
+    // irGenerator.convertIdentifier() to look up `length`. convertIdentifier() needs a valid symbol
+    // table to find the declaration of `length`. To allow this chain of events to succeed, we
+    // re-insert the program's symbol table back into the IRGenerator temporarily.
+    SkASSERT(!fIRGenerator->fSymbolTable);
+    fIRGenerator->fSymbolTable = symbols;
+
+    bool result = fInliner.analyze(elements, symbols, usage);
+
+    fIRGenerator->fSymbolTable = nullptr;
+    return result;
+}
+
 bool Compiler::finalize(Program& program) {
     // Do a pass looking for @if/@switch statements that didn't optimize away, or dangling
     // FunctionReference or TypeReference expressions. Report these as errors.
diff --git a/src/sksl/SkSLCompiler.h b/src/sksl/SkSLCompiler.h
index 107926ba0e..25667dda6c 100644
--- a/src/sksl/SkSLCompiler.h
+++ b/src/sksl/SkSLCompiler.h
@@ -244,6 +244,11 @@ private:
     /** Eliminates unreachable statements from a Program. */
     void removeUnreachableCode(Program& program, ProgramUsage* usage);
 
+    /** Flattens out function calls when it is safe to do so. */
+    bool runInliner(const std::vector<std::unique_ptr<ProgramElement>>& elements,
+                    std::shared_ptr<SymbolTable> symbols,
+                    ProgramUsage* usage);
+
     Position position(int offset);
 
     CompilerErrorReporter fErrorReporter;
diff --git a/tests/sksl/inliner/Ossfuzz37994.glsl b/tests/sksl/inliner/Ossfuzz37994.glsl
new file mode 100644
index 0000000000..57eaa4e133
--- /dev/null
+++ b/tests/sksl/inliner/Ossfuzz37994.glsl
@@ -0,0 +1,9 @@
+
+out vec4 sk_FragColor;
+vec4 colorGreen;
+vec4 main() {
+    vec2 _0_x = vec2(2.0);
+    _0_x = vec2(0.70710676908493042, 0.70710676908493042);
+    _0_x;
+    return colorGreen;
+}
