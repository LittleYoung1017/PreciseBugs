skia-20230718-4c8e0b34b7	4c8e0b34b7	f416df6698	Tue Jul 18 17:46:20 2023 +0000	Fix data going empty for fuzz	commit 4c8e0b34b7551d42dd2d63c6e6e2976f3ad46a4cAuthor: Herb Derby <herb@google.com>Date:   Tue Jul 18 10:26:37 2023 -0600    Fix data going empty for fuzz        The span named data, reached size 0, then front() was called.    This caused the newly added bounds checking call to trigger.        Add code to exit the fuzzer loop when data has no bytes, and    add a guard so that memcpy and front() are not called when there    are no bytes.        Bug: oss-fuzz:60689    Change-Id: I94f14cd194c66bec13e8dc10ca87aa20bdc38575    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/725717    Commit-Queue: Herb Derby <herb@google.com>    Reviewed-by: John Stiles <johnstiles@google.com>	60689	fuzz/oss_fuzz/FuzzSkMeshSpecification.cpp	16;153
skia-20230705-89cdbce594	89cdbce594	09fa46808e	Wed Jul 5 20:36:41 2023 +0000	Fix crash when adding mips to serialized image that fails to decode	commit 89cdbce5947fe62454cab92c352ef2320c5f2df5Author: Brian Osman <brianosman@google.com>Date:   Wed Jul 5 15:49:36 2023 -0400    Fix crash when adding mips to serialized image that fails to decode        Bug: oss-fuzz:57750    Change-Id: Ic31fbfea7dbd885a9937304f0f511006f425df57    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/720060    Commit-Queue: Herb Derby <herb@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Auto-Submit: Brian Osman <brianosman@google.com>    Reviewed-by: Herb Derby <herb@google.com>	57750	src/core/SkReadBuffer.cpp	383
skia-20230624-18a947ed22	18a947ed22	1826cbacd4	Sat Jun 24 16:12:51 2023 +0000	Fix assertion discovered by fuzzer.	commit 18a947ed2253910e1b8f13344f3340632beca94cAuthor: John Stiles <johnstiles@google.com>Date:   Sat Jun 24 11:07:11 2023 -0400    Fix assertion discovered by fuzzer.        SkRP inlines functions at the call site; that will cause all of its    variables to be redeclared. Previously, this could cause an    assertion because we would try to map an slot range to an immutable    variable more than once. This is harmless, so the simplest fix is to    just remove the assertion.        (It isn't safe to check that the slot range is the same as the    previous range, either--our search for matching immutable data    might come up with different-but-equally-valid matching ranges at    different points in execution, since it's hash-table based.)        Bug: oss-fuzz:60077    Change-Id: I5a5f01f53921ba34297e405c7ff1353569edc42b    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/716216    Commit-Queue: Brian Osman <brianosman@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>	60077	gn/sksl_tests.gni;resources/sksl/BUILD.bazel;src/sksl/codegen/SkSLRasterPipelineCodeGenerator.cpp	754;930;0;1187;0;0;0;0;0
skia-20230619-9c2148cd1c	9c2148cd1c	41689ff01f	Mon Jun 19 15:55:33 2023 +0000	Fix fuzzer-discovered error with inlined arrays.	commit 9c2148cd1c82d267c8d22af013843a9dec4f33bfAuthor: John Stiles <johnstiles@google.com>Date:   Mon Jun 19 09:48:34 2023 -0400    Fix fuzzer-discovered error with inlined arrays.        When inlining a function that mutates its passed-in parameters, we    need to make a scratch copy of that parameter. This is potentially    expensive for structs and arrays, and in ES2 it may require an    element-by-element copy since arrays are not first-class values.    However, ES2 _does_ allow passing entire arrays and structs into a    function (somewhat surprisingly, given its other limitations on    array types). The inliner no longer attempts to inline any function    that mutates a passed-in struct or array parameter.        Bug: oss-fuzz:59891    Change-Id: I2b852a70dc51c464351155d274dc8d5173edaf5e    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/713216    Commit-Queue: John Stiles <johnstiles@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	59891	gn/sksl_tests.gni;resources/sksl/BUILD.bazel;src/sksl/SkSLInliner.cpp;tests/SkSLTest.cpp;tests/sksl/shared/Ossfuzz37466.asm.frag;tests/sksl/shared/Ossfuzz37466.glsl;tests/sksl/shared/Ossfuzz37466.hlsl;tests/sksl/shared/Ossfuzz37466.metal	884;544;0;0;602;570;0;0;4;1;1;6
skia-20230619-41689ff01f	41689ff01f	455d7306b9	Mon Jun 19 15:07:46 2023 +0000	Fix fuzzer-discovered error with void variables.	commit 41689ff01f9763bec5fa07a56bc20c8565db619bAuthor: John Stiles <johnstiles@google.com>Date:   Mon Jun 19 10:23:38 2023 -0400    Fix fuzzer-discovered error with void variables.        The fuzzer created some void-typed variables and then triggered the    switch variable-hoisting code. The binary-expression code asserts    that assignments are valid ("We should have detected non-assignable    assignment expressions in Convert") and this expectation is    generally true. However, it was not true for void-typed and    invalid-typed variables; in these cases we would emit an error,    but emit the var-decl IR even though it was known to be invalid.        We no longer emit these invalid declarations into the IR.        Bug: oss-fuzz:59906    Change-Id: I7e9e11db108d8ae6f5ed9b8e555254943925ace2    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/713637    Reviewed-by: Brian Osman <brianosman@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Commit-Queue: John Stiles <johnstiles@google.com>	59906	resources/sksl/errors/Ossfuzz47935.sksl;resources/sksl/errors/VoidVariable.rts;src/sksl/ir/SkSLInterfaceBlock.cpp;src/sksl/ir/SkSLVarDeclarations.cpp;src/sksl/ir/SkSLVarDeclarations.h;tests/sksl/errors/Ossfuzz47935.glsl;tests/sksl/errors/VoidVariable.glsl;tests/sksl/intrinsics/Sample.skrp;tests/sksl/intrinsics/SampleGrad.skrp;tests/sksl/intrinsics/SampleLod.skrp;tests/sksl/realistic/GaussianBlur.skrp;tests/sksl/shared/ComplexDelete.skrp;tests/sksl/shared/FunctionParametersOfTextureAndSamplerType.skrp;tests/sksl/shared/RectangleTexture.skrp;tests/sksl/shared/Texture2D.skrp;tests/sksl/shared/TextureSharpen.skrp	2;3;70;83;137;211;221;335;426;60;119;3;6;9;18;6;9;18;18;348;12;21;15;9;21;9;21
skia-20230521-2d4ea9542e	2d4ea9542e	5b2005e47b	Sun May 21 13:19:31 2023 +0000	Fix fuzzer-discovered issue with empty buffers.	commit 2d4ea9542e8315fbeb6ec13e9fee981094d37894Author: John Stiles <johnstiles@google.com>Date:   Sat May 20 10:05:16 2023 -0400    Fix fuzzer-discovered issue with empty buffers.        The fuzzer discovered a tiny flaw here--we were computing a    negative amount for `illegalRangeEnd`, but storing it in an    unsigned variable.        Bug: oss-fuzz:59025    Change-Id: Ibcecf93a5342fc55d7f77d1a48d309daf447eebe    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/700997    Reviewed-by: Brian Osman <brianosman@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>	59025	gn/sksl_tests.gni;resources/sksl/BUILD.bazel;src/sksl/ir/SkSLVarDeclarations.cpp	81;242;0;8;23;257;0
skia-20230503-f76e3d67dd	f76e3d67dd	8ab7fbb04c	Wed May 3 14:10:46 2023 +0000	Fix fuzzer-discovered error with repeated assignment.	commit f76e3d67dd048af0f9fa5912fbd26af054eca2c6Author: John Stiles <johnstiles@google.com>Date:   Wed May 3 09:06:17 2023 -0400    Fix fuzzer-discovered error with repeated assignment.        The fuzzer discovered a subtle bug with our recent optimization,    which fused variable declarations with their initialization.    Specifically, the statement pair `int x = 0; x = x = 1;` is valid    (though questionable) SkSL. However, `int x = x = 1;` is not. We    now properly detect this case and leave it as-is.        Bug: oss-fuzz:58567    Change-Id: I5b0b6e96b39956d98b7c04ddb8ce23c8201601bd    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/690817    Auto-Submit: John Stiles <johnstiles@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	58567	resources/sksl/shared/Assignment.sksl;src/sksl/SkSLAnalysis.cpp;src/sksl/SkSLAnalysis.h;src/sksl/ir/SkSLFunctionDefinition.cpp;tests/sksl/shared/Assignment.asm.frag;tests/sksl/shared/Assignment.glsl;tests/sksl/shared/Assignment.hlsl;tests/sksl/shared/Assignment.metal;tests/sksl/shared/Assignment.skrp	41;51;381;86;177;29;59;177;239;45;55;64;79;119;129;75;105
skia-20230501-68251b0c21	68251b0c21	1a6a1e9055	Mon May 1 13:40:53 2023 +0000	Fix fuzzer-discovered error with unnecessary swizzles.	commit 68251b0c21fe631afcef1276ca68bd07b79d2652Author: John Stiles <johnstiles@google.com>Date:   Sat Apr 29 23:06:35 2023 -0400    Fix fuzzer-discovered error with unnecessary swizzles.        Applying a meaningless swizzle to an SkRP expression-statement    could cause the SkRP stack to become unbalanced. This would cause    the RP builder to assert while assembling the finished program.        Bug: oss-fuzz:z58483    Change-Id: I5e999ec989ba402dced38ad3f437dbfef3bfa14b    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/687258    Reviewed-by: Michael Ludwig <michaelludwig@google.com>    Commit-Queue: Michael Ludwig <michaelludwig@google.com>    Commit-Queue: John Stiles <johnstiles@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>	58483	gn/sksl_tests.gni;resources/sksl/BUILD.bazel;src/sksl/codegen/SkSLRasterPipelineBuilder.cpp	629;941;0;334;0;0;0;0;0
skia-20230417-5bd4bdc0d8	5bd4bdc0d8	1715307546	Mon Apr 17 22:59:06 2023 +0000	Fix assertion when compiling oversized interface blocks.	commit 5bd4bdc0d8e2f9de7e75cdb74e3bb77a9a3e62eeAuthor: John Stiles <johnstiles@google.com>Date:   Mon Apr 17 18:25:49 2023 -0400    Fix assertion when compiling oversized interface blocks.        The fuzzer test case creates an interface block which is large, then    makes an array which pushes past the size limit and returns the    Poison type. Previously, we would just continue processing and run    into an assertion because the Poison type isn't a struct anymore;    `Type::fields()` immediately aborts. Now, we double-check that we    have a Variable with an interface block type while converting it.        Bug: oss-fuzz:58114    Change-Id: I13634339ba82f9039fa176cdf9c4bedf6961d1de    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/673123    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Commit-Queue: John Stiles <johnstiles@google.com>	58114	gn/sksl_tests.gni;resources/sksl/BUILD.bazel;src/sksl/ir/SkSLInterfaceBlock.cpp	201;373;0;53;0
skia-20230416-03c8e52919	03c8e52919	cc3404330d	Sun Apr 16 14:03:52 2023 +0000	Fix assertion with unsized arrays in an arrayed interface block.	commit 03c8e529196d901b7b1e6a7c0094d55fb8edeb1dAuthor: John Stiles <johnstiles@google.com>Date:   Sat Apr 15 17:22:02 2023 -0400    Fix assertion with unsized arrays in an arrayed interface block.        Bug: oss-fuzz:58037    Change-Id: Iaa472cb48b16da5c25ec04c2207caa33938cc27a    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/672157    Commit-Queue: Brian Osman <brianosman@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	58037	gn/sksl_tests.gni;resources/sksl/BUILD.bazel;src/sksl/ir/SkSLType.cpp	186;358;0;1194;0
skia-20230322-ffaba7d934	ffaba7d934	f8d33fb7bc	Wed Mar 22 17:16:41 2023 +0000	Fix potential integer overflow in SkRegion::setPath()	commit ffaba7d934078d94a262e6d6c7c33636aa818a1cAuthor: Jim Van Verth <jvanverth@google.com>Date:   Wed Mar 22 09:44:40 2023 -0400    Fix potential integer overflow in SkRegion::setPath()        For large integers some intermediate calculations can overflow, but the    end results will still be in integer range. Using int64_t for the    intermediate values should handle this situation.        Bug: oss-fuzz:56907    Change-Id: I86906b769d35d772ce77b3a57576b4fc0e4c5390    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/659718    Reviewed-by: James Godfrey-Kittle <jamesgk@google.com>    Auto-Submit: Jim Van Verth <jvanverth@google.com>    Commit-Queue: Jim Van Verth <jvanverth@google.com>	56907	src/core/SkRegion_path.cpp	347
skia-20230306-7e1756b42f	7e1756b42f	d43c142480	Mon Mar 6 15:27:17 2023 +0000	Fix divide by zero in GrQuad::point().	commit 7e1756b42f945c66056e57829936fabc920b08a0Author: Jim Van Verth <jvanverth@google.com>Date:   Tue Feb 28 11:53:28 2023 -0500    Fix divide by zero in GrQuad::point().        In ClipStack's shape_contains_rect() we check to see if a transformed    Rect intersects the W=0 plane, but then we outset it, which may push    the Rect through the W=0 plane. In the test case it intersects the plane    exactly, which is not caught by the check. Doing the check after the    outset should address this.        Bug: oss-fuzz:53990    Change-Id: I5db56ee2ae8681772bce7ba258a709a4fdc9e911    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/650277    Reviewed-by: Michael Ludwig <michaelludwig@google.com>    Commit-Queue: Michael Ludwig <michaelludwig@google.com>	53990	src/gpu/ganesh/ClipStack.cpp	143
skia-20230225-26d0fec03f	26d0fec03f	9b91a4116d	Sat Feb 25 17:24:10 2023 +0000	Fix SkRP crash when dividing an int by zero.	commit 26d0fec03f784e1956c71f180a1a42c59baaa0b1Author: John Stiles <johnstiles@google.com>Date:   Sat Feb 25 11:49:13 2023 -0500    Fix SkRP crash when dividing an int by zero.        This adds two instructions to each of the div-int ops:        d244: 12 9a a0 4e   cmeq.4s v18, v16, #0        d248: 10 1e b2 4e   orr.16b v16, v16, v18        This is one of our least efficient ops anyway, so the cost of a guard    is negligible. (`div_int` is 23 instructions. `div_4_ints` is 83.)        This will convert zeros to ~0 (-1). This means div_int against zero    will negate the number, and div_uint against zero will clear it.    Since the behavior is explicitly not defined, this is OK.        Bug: skia:14015, oss-fuzz:56346    Change-Id: I4bf44e2334433f8b0be1193b4408fd51333bdd65    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/648743    Commit-Queue: Brian Osman <brianosman@google.com>    Commit-Queue: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>	56346	gn/sksl_tests.gni;resources/sksl/BUILD.bazel;src/opts/SkRasterPipeline_opts.h;tests/SkSLTest.cpp	814;648;0;3646;596;0;0;0;0
skia-20230215-4526b46e46	4526b46e46	726628eaab	Wed Feb 15 20:40:44 2023 +0000	Fix up DDL fuzzer	commit 4526b46e4694f568109d880ae58331d7f9882068Author: Robert Phillips <robertphillips@google.com>Date:   Tue Feb 14 14:22:12 2023 -0500    Fix up DDL fuzzer        I'm not sure this fuzzer has ever worked. This CL:        Adds an 'fDrawn' field so we can correctly assert the expected state    Correctly set the kDone state (was being reset to kInitial)    Adds an explicit flush step to actually execute the collected DDLs        Bug: oss-fuzz:38709    Change-Id: I859dd9ac346bc36206eeb288aa178defd8989493    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/643459    Reviewed-by: Michael Ludwig <michaelludwig@google.com>    Commit-Queue: Robert Phillips <robertphillips@google.com>	38709	fuzz/FuzzDDLThreading.cpp	53;60;188;245;264
skia-20230209-2c71931272	2c71931272	59c9ef67fa	Thu Feb 9 23:19:22 2023 +0000	Fix divide by zero in cubic solver when B was nan	commit 2c71931272c098585cbb0ce2edc41d4d41056fedAuthor: Kevin Lubick <kjlubick@google.com>Date:   Thu Feb 9 13:56:51 2023 -0500    Fix divide by zero in cubic solver when B was nan        Change-Id: Iac938e40d2c1378d7e86fab502ec26f43a447497    Bug: oss-fuzz:55829    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/641137    Reviewed-by: Michael Ludwig <michaelludwig@google.com>    Commit-Queue: Kevin Lubick <kjlubick@google.com>	55829	src/base/SkCubics.cpp;tests/CubicRootsTest.cpp	59;269
skia-20230206-f6d3639a13	f6d3639a13	47dac4b056	Mon Feb 6 20:31:54 2023 +0000	Fix overflow in CreateIntegralTable	commit f6d3639a139637cde61824e939ee8013a411f2efAuthor: Jim Van Verth <jvanverth@google.com>Date:   Mon Feb 6 13:32:04 2023 -0500    Fix overflow in CreateIntegralTable        Bug: oss-fuzz:55675    Change-Id: I0da6c709ad0a42e0f95dfa0f5733dd88876feb0d    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/639076    Reviewed-by: Robert Phillips <robertphillips@google.com>    Commit-Queue: Jim Van Verth <jvanverth@google.com>	55675	src/core/SkGpuBlurUtils.cpp	908
skia-20230130-edccc2ca4b	edccc2ca4b	613c1f5a61	Mon Jan 30 17:37:46 2023 +0000	Fix UBSAN report in SkM44::Perspective.	commit edccc2ca4b6043c0b4128f67cd6ce3f96158ea07Author: Jim Van Verth <jvanverth@google.com>Date:   Mon Jan 30 10:42:31 2023 -0500    Fix UBSAN report in SkM44::Perspective.        Passing in a zero angle is meaningless in this case, just as much as    near == far, so handle it in the same way.        Bug: oss-fuzz:26951    Change-Id: I4f5e3227f78dfe5a98222138fc3f8096fd1bb789    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/635499    Commit-Queue: Jim Van Verth <jvanverth@google.com>    Reviewed-by: Michael Ludwig <michaelludwig@google.com>    Reviewed-by: Florin Malita <fmalita@google.com>	26951	src/core/SkM44.cpp	343
skia-20221114-81f91ffe6a	81f91ffe6a	5637211d2d	Mon Nov 14 22:28:11 2022 +0000	[skif] Fix origin negation	commit 81f91ffe6a4176623c0c066f8401086697b927a2Author: Michael Ludwig <michaelludwig@google.com>Date:   Mon Nov 14 10:05:44 2022 -0500    [skif] Fix origin negation        Bug: oss-fuzz:53342    Change-Id: Ib07e0e1af5df185b044afb62584ab10eabc862b5    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/604876    Reviewed-by: Robert Phillips <robertphillips@google.com>    Commit-Queue: Michael Ludwig <michaelludwig@google.com>    Auto-Submit: Michael Ludwig <michaelludwig@google.com>	53342	src/core/SkImageFilterTypes.cpp	384
skia-20221028-e3ec13bb8e	e3ec13bb8e	f0308ebc37	Fri Oct 28 14:22:02 2022 +0000	[fuzz] Fix COLRv1 fuzz harness	commit e3ec13bb8e1705c39eca33390b8403fe483b7d7bAuthor: Kevin Lubick <kjlubick@google.com>Date:   Fri Oct 28 10:05:22 2022 -0400    [fuzz] Fix COLRv1 fuzz harness        Now, one can reproduce a COLRv1 fuzz result like:    out/ASAN/fuzz -b ~/Downloads/clusterfuzz-testcase-colrv1-533334477798765        We do not want to use the portable fontmgr because it does    not actually deserialize fonts.        Change-Id: Id1f19ed0fa08ff5ab0bab7c5b02985265268a35d    Bug: oss-fuzz:52328    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/597441    Commit-Queue: Kevin Lubick <kjlubick@google.com>    Reviewed-by: Ben Wagner <bungeman@google.com>		fuzz/FuzzMain.cpp;fuzz/oss_fuzz/FuzzCOLRv1.cpp	303;11;28
skia-20221025-a56cf5ec33	a56cf5ec33	4387b3b59a	Tue Oct 25 17:45:47 2022 +0000	Fix fuzzer-discovered error with overloading main().	commit a56cf5ec3301f2573622e8cb192e66da640c68ebAuthor: John Stiles <johnstiles@google.com>Date:   Tue Oct 25 12:43:03 2022 -0400    Fix fuzzer-discovered error with overloading main().        The backends aren't equipped to deal with code containing conflicting    signatures for `main`. We now reject any code that attempts to supply    more than one signature for main (whether via prototype or a full    definition). We do still allow prototyping `main` as long as it's the    same signature as the eventual function defintion; the existing test    FunctionPrototype.sksl does this already.        Change-Id: Ib58562453914e5c35ef590b28159fa3dc66c7f14    Bug: oss-fuzz:52714    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/595436    Reviewed-by: Arman Uguray <armansito@google.com>    Commit-Queue: John Stiles <johnstiles@google.com>	52714	resources/sksl/errors/OverloadedMain.sksl;src/sksl/ir/SkSLFunctionDeclaration.cpp;tests/sksl/errors/OverloadedMain.glsl	2;431;1
skia-20221024-48c869d7d7	48c869d7d7	cf38ea7fc9	Mon Oct 24 21:28:22 2022 +0000	Fix fuzzer-discovered error with sk_FragColor.	commit 48c869d7d7d38f840f795f4eb26021641a8ae3afAuthor: John Stiles <johnstiles@google.com>Date:   Mon Oct 24 16:48:52 2022 -0400    Fix fuzzer-discovered error with sk_FragColor.        This built-in variable scanner would look for `sk_FragColor` or    `sk_Clockwise` in the symbol table and attempt to add them to your    program. However, if the user code had defined a symbol with this    name, there was nothing stopping the code from finding that user-    declared symbol instead. Now we explicitly only look in the built-in    symbol tables.        Change-Id: I970e58c96cd9cacdf48318d3ebb88560bbaa60fc    Bug: oss-fuzz:52603    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/595116    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>    Commit-Queue: John Stiles <johnstiles@google.com>	52603	gn/sksl_tests.gni;src/sksl/ir/SkSLSymbolTable.cpp;src/sksl/ir/SkSLSymbolTable.h;src/sksl/transform/SkSLFindAndDeclareBuiltinVariables.cpp;tests/SkSLTest.cpp	763;0;25;77;5;17;37;69;128;437;0;0
skia-20221018-efc5196a5c	efc5196a5c	c2c73a05ca	Tue Oct 18 20:07:39 2022 +0000	Fix fuzzer-discovered error with interface blocks.	commit efc5196a5c0ecac01fc83ad0dbf77bfa541262f6Author: John Stiles <johnstiles@google.com>Date:   Tue Oct 18 12:16:40 2022 -0400    Fix fuzzer-discovered error with interface blocks.        The fuzzer discovered that interface blocks can redefine a built-in    variable like `sk_Clockwise`. When this happens, we would look up    `sk_Clockwise` and expect to find a Variable, but it's actually a    Field, so we would assert.        Now, we will check that the symbol is a Variable and stop processing    it if it's not one. This doesn't fix the root issue--InterfaceBlocks    should not be allowed to pave over built-ins at all. I've filed a    separate bug (skia:13823) to track this issue.        Change-Id: I5b1d16d08d5005f543e15a8b0de1f10dc1c4a950    Bug: oss-fuzz:52509, skia:13823    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/592741    Reviewed-by: Brian Osman <brianosman@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Commit-Queue: John Stiles <johnstiles@google.com>	52509	src/sksl/transform/SkSLFindAndDeclareBuiltinVariables.cpp	52
skia-20221017-a9b41610f0	a9b41610f0	afe7c90a82	Mon Oct 17 12:26:16 2022 +0000	Fix fuzzer-discovered error with sk_RTAdjust.	commit a9b41610f0d9110cbf1d5492b5aa4e8cfd984345Author: John Stiles <johnstiles@google.com>Date:   Sun Oct 16 10:19:50 2022 -0400    Fix fuzzer-discovered error with sk_RTAdjust.        At http://review.skia.org/591260, I replaced an impossible-looking    error condition if-check with an assertion. The fuzzer helpfully    generated a test case for me which demonstrates how this error could    occur after all. This CL restores the original if-check as-is, and    adds the test case that exercises it.        (I think there's likely a deeper error here as well--we should have    rejected the global variable because its name overlaps with the    interface block variable that also exists at global scope.)        Change-Id: Ibbe216639c81fe45f321185d3bef2d6cd4e6ae73    Bug: oss-fuzz:52426    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/592096    Reviewed-by: Brian Osman <brianosman@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>	52426	gn/sksl_tests.gni;src/sksl/ir/SkSLVarDeclarations.cpp	72;0;374;0
skia-20221004-23e0f5538a	23e0f5538a	62799ef809	Tue Oct 4 14:04:24 2022 +0000	Fix fuzzer-discovered error with inlining unscoped variables.	commit 23e0f5538a82518ccc81ebd4b2c911a22539b0beAuthor: John Stiles <johnstiles@google.com>Date:   Mon Oct 3 20:46:34 2022 -0400    Fix fuzzer-discovered error with inlining unscoped variables.        SkSL forbids unscoped variable declarations as child statements of    loops or if statements, e.g. `if (true) int x = 123;`. The fuzzer    discovered that it could synthesize this construct via the inliner,    leading to an assertion.        The inliner already had a mechanism for adding braces when inlining    a call into an unscoped child statement like this, but it assumed    that a single statement would be safe to use without adding a scope.    Now, it will brace single statements as well.        Change-Id: Iac2d64ebbab92d8ca91311a09d7fac33c861427c    Bug: oss-fuzz:51960    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/587097    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Arman Uguray <armansito@google.com>    Commit-Queue: John Stiles <johnstiles@google.com>	51960	gn/sksl_tests.gni;src/sksl/SkSLInliner.cpp;tests/SkSLTest.cpp	649;0;246;382;0;0
skia-20220927-652b26b1ab	652b26b1ab	fe6c586f1c	Tue Sep 27 18:58:29 2022 +0000	Fix SkTDArray::operator=	commit 652b26b1ab54dcb78f04c4b11c1f82b638031f1fAuthor: Herb Derby <herb@google.com>Date:   Tue Sep 27 12:01:36 2022 -0400    Fix SkTDArray::operator=        operator= did not work properly when the count of the src is 0. It    calls assign to do the bulk of the work, but assign assumed that    fCount and fReserve were 0.        Properly set fCount and fReserve in assign, and allocate the correct    amount of memory to copy the elements into.        This did not affect the constructors that use assign because the    assumption of fCount and fReserve being zero is true.        Bug: oss-fuzz:51868    Bug: oss-fuzz:51871    Bug: oss-fuzz:51873    Bug: oss-fuzz:51874    Bug: oss-fuzz:51875    Bug: oss-fuzz:51876    Bug: oss-fuzz:51877    Bug: oss-fuzz:51880    Change-Id: Iae472a4b3b6a08cd9e9c800e941773d4f36ce9f9    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/585149    Reviewed-by: Brian Osman <brianosman@google.com>    Reviewed-by: John Stiles <johnstiles@google.com>    Commit-Queue: Herb Derby <herb@google.com>	51868	src/core/SkTDArray.cpp	45
skia-20220923-ce98326ffd	ce98326ffd	49c72b1197	Fri Sep 23 15:09:34 2022 +0000	Fix for fuzzer-discovered error with dead-local elimination.	commit ce98326ffda6c663033613e72f49416a46b1fadfAuthor: John Stiles <johnstiles@google.com>Date:   Fri Sep 23 10:26:46 2022 -0400    Fix for fuzzer-discovered error with dead-local elimination.        Eliminating a dead-variable assignment would turn an expression like    `a = (b = 123)` into `b = 123`. The fuzzer discovered that, after    removing the dead `a =` assignment from the code, we neglected to    recurse into the remaining subexpression. So if the input code was    `a = a = 123;` we would optimize it into `a = 123;` but wouldn't    keep going and eliminate the assignment entirely.        This was invalid because `a` is marked as dead and its declaration has    been eliminated; it can't be allowed to remain anywhere in the    finished program.        We now recurse into the remaining subexpression and optimize it    properly.        Change-Id: I3a609133fd9752d94098218250a90477f80e02d3    Bug: oss-fuzz:51729, oss-fuzz:51741    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/583964    Reviewed-by: Brian Osman <brianosman@google.com>    Commit-Queue: John Stiles <johnstiles@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>	51729	resources/sksl/shared/UnusedVariables.sksl;src/sksl/transform/SkSLEliminateDeadLocalVariables.cpp;tests/sksl/shared/UnusedVariables.asm.frag;tests/sksl/shared/UnusedVariables.glsl;tests/sksl/shared/UnusedVariables.metal	7;28;57;90;16;74;86;6;14
skia-20220922-b9019a730d	b9019a730d	2c0683e681	Thu Sep 22 14:13:25 2022 +0000	Fix rounding for values near 1/2 and > 2^24	commit b9019a730de4349d82c49289f35846369dd80bc0Author: Michael Ludwig <michaelludwig@google.com>Date:   Wed Sep 21 17:01:44 2022 -0400    Fix rounding for values near 1/2 and > 2^24        Bug: chromium:1366345, oss-fuzz:51634, oss-fuzz:51629    Change-Id: I721d3512b28b8963ec6224cabf28bc647b6ad956    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/583583    Commit-Queue: Michael Ludwig <michaelludwig@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	51634	include/core/SkScalar.h;include/private/SkFloatingPoint.h;tests/ScalarTest.cpp	22;62;78;57;130;15
skia-20220906-56e966740c	56e966740c	ef41b0c2e7	Tue Sep 6 15:19:24 2022 +0000	Fix fuzzer-discovered error with unsized arrays in structs.	commit 56e966740c8b78dbbad5934e459a1c723f288dd9Author: John Stiles <johnstiles@google.com>Date:   Tue Sep 6 10:36:03 2022 -0400    Fix fuzzer-discovered error with unsized arrays in structs.        We had a defensive check against unsized arrays, but the fuzzer    managed to get around that by hiding the unsized array in a struct.        Change-Id: I9a790de78c94994210a0dbc90cdc21ec9fbddd11    Bug: oss-fuzz:50922    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/577201    Reviewed-by: Brian Osman <brianosman@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Commit-Queue: John Stiles <johnstiles@google.com>	50922	gn/sksl_tests.gni;src/sksl/ir/SkSLFunctionDefinition.cpp;src/sksl/ir/SkSLType.cpp;src/sksl/ir/SkSLType.h	168;0;117;1012;518;0
skia-20220901-2efb6e3e1f	2efb6e3e1f	1bd73811ef	Thu Sep 1 21:18:25 2022 +0000	Fix fuzzer-discovered error with intrinsic range checks.	commit 2efb6e3e1f920309a19a8f7725b84d4bce665bc0Author: John Stiles <johnstiles@google.com>Date:   Wed Aug 31 15:05:25 2022 -0400    Fix fuzzer-discovered error with intrinsic range checks.        Intrinsic folding previously checked for out-of-range values by    comparing against [-FLT_MAX, +FLT_MAX]. Now, we check against    [returnType.minimumValue(), returnType.maximumValue()]. For floats,    this gives the same behavior as before. For integer types, this sets    a much tighter bound.        Change-Id: I54a874a71cc1b2e13eaae9f3e03de493d3e9028c    Bug: oss-fuzz:50798    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/575674    Auto-Submit: John Stiles <johnstiles@google.com>    Commit-Queue: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	50798	gn/sksl_tests.gni;src/sksl/ir/SkSLFunctionCall.cpp	167;0;39;114;138;232;259;0
skia-20220801-08ba24a351	08ba24a351	ec70381bcd	Mon Aug 1 23:10:55 2022 +0000	Fix fuzzer-discovered assertion with texture2d parameters.	commit 08ba24a351cfeb2d515e72dcb268d7a37d49b4c2Author: John Stiles <johnstiles@google.com>Date:   Mon Aug 1 18:09:34 2022 -0400    Fix fuzzer-discovered assertion with texture2d parameters.        The Metal code generator would assert if you try to `writeType` on a    texture type, because we don't know the access type to pass (read,    write or both). Places in the code which can support textures need to    call `writeTextureType` instead.        Function parameters weren't considered here, so they tripped the    assert. We now have `writeParameterType` which can be used. For now,    we don't have a good way of setting access type on texture params,    so you will get the default access type (sampleable, no read/write).    In the future we can add `readonly` and `writeonly` modifiers to    pass access information, like GLSL.        Change-Id: I2f6e059e233b28a0ff831f04f2dea6c7ee99f7dd    Bug: skia:13609, oss-fuzz:49691    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/563746    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Arman Uguray <armansito@google.com>    Commit-Queue: Arman Uguray <armansito@google.com>	49691	gn/sksl_tests.gni;src/sksl/codegen/SkSLMetalCodeGenerator.cpp;src/sksl/codegen/SkSLMetalCodeGenerator.h	295;0;154;187;305;2107;135;143;0
skia-20220801-165567958e	165567958e	652611ce81	Mon Aug 1 15:08:20 2022 +0000	Fix fuzzer-discovered error with matrix-vector folding.	commit 165567958e9c101ec1f7208a487cb0f8bb5138edAuthor: John Stiles <johnstiles@google.com>Date:   Mon Aug 1 10:31:00 2022 -0400    Fix fuzzer-discovered error with matrix-vector folding.        Previously, `cast_expression` assumed that its input would be castable    to the destination type. Now, it is defensive and returns null if its    input isn't convertible. Call sites for `cast_expression` and    `negate_expression` now explicitly check for null returns and fall    through cleanly.        Added several additional unit tests to verify this behavior. (I expect    these tests will expose a bug on at least one or two GPUs.)        Change-Id: I73bf599ffb46a365f37207f6c5403a30e94a4b76    Bug: oss-fuzz:49574    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/564056    Commit-Queue: Brian Osman <brianosman@google.com>    Commit-Queue: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>	49574	resources/sksl/folding/MatrixVectorNoOpFolding.sksl;src/sksl/SkSLConstantFolder.cpp;tests/sksl/folding/MatrixVectorNoOpFolding.glsl	4;285;452;473;6
skia-20220728-bc4db46403	bc4db46403	67ba80f37a	Thu Jul 28 15:24:52 2022 +0000	Fix for fuzzer-discovered error with overloaded functions.	commit bc4db4640390b1d2cacb8457c7db58a682a1e248Author: John Stiles <johnstiles@google.com>Date:   Thu Jul 28 10:44:15 2022 -0400    Fix for fuzzer-discovered error with overloaded functions.        The SkSL parser detected types via two functions: IsType and    IsBuiltinType. These were designed around SymbolTable::lookup, and    would do a full symbol lookup just to return a true/false result.    In practice, doing a symbol table lookup on an overloaded function    name was pretty expensive--it can create new UnresolvedFunction    nodes.        For `IsType` this behavior was just inefficient. For `IsBuiltinType`    it was worse--it would create new Program-owned nodes in the built-in    modules. (This behavior changed subtly at http://review.skia.org/562306    --previously, we would go through the entire lookup, then just give up    at the end when we realized we were in a builtin symbol table.)        SymbolTable now has dedicated `isType` and `isBuiltinType` methods    instead that will never modify the tables. As an unexpected perk,    this actually eliminates a few UnresolvedFunction nodes from our    dehydrated data.        Change-Id: Ice80d55e21d199639e34e4d4f4c583ff9d7ac3e1    Bug: oss-fuzz:49558    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/562956    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>    Commit-Queue: John Stiles <johnstiles@google.com>	49558	gn/sksl_tests.gni;include/sksl/DSLSymbols.h;src/sksl/SkSLDSLParser.cpp;src/sksl/dsl/DSLSymbols.cpp;src/sksl/generated/sksl_gpu.dehydrated.sksl;src/sksl/ir/SkSLSymbolTable.cpp;src/sksl/ir/SkSLSymbolTable.h	163;49;0;226;239;409;647;1005;7;24;45;148;183;1603;1636;1664;1675;1703;1719;1776;1812;1983;2043;2074;2184;2214;2234;2322;2377;2458;2494;2580;2590;2618;2653;2694;2819;2912;2978;36;84;124;171;0
skia-20220726-44174fb825	44174fb825	d857b43e38	Tue Jul 26 16:01:17 2022 +0000	Fix no-op arithmetic simplification for mat-op-scal expressions.	commit 44174fb825deadf8ee58d6890a3aec40febc3ab0Author: John Stiles <johnstiles@google.com>Date:   Tue Jul 26 11:22:29 2022 -0400    Fix no-op arithmetic simplification for mat-op-scal expressions.        The original CL didn't consider matrix-op-scalar expressions and missed    several issues.        First, cast_expression did not know how to convert a scalar into a    diagonal matrix. This happens when doing `scalar * float4x4(1.0)`.        Also, scalar ops other than multiplication apply to a matrix as a    splat, so things like `scalar + float4x4(0.0)` don't generate a    diagonal matrix--they generate a splat matrix. There's no gadget    in GLSL or SkSL which splats a scalar across a matrix more efficiently    than the expression we started with, so we no longer attempt to rewrite    these at all.        Added additional tests and split into separate files.        Change-Id: If1b67795c04abf0fb2af22d03940e26e97f8d1e7    Bug: oss-fuzz:49365    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/561757    Auto-Submit: John Stiles <johnstiles@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	49365	gn/sksl_tests.gni;infra/bots/gen_tasks_logic/dm_flags.go;infra/bots/tasks.json;resources/sksl/folding/MatrixNoOpFolding.sksl;src/sksl/SkSLConstantFolder.cpp;tests/SkSLTest.cpp;tests/sksl/folding/MatrixNoOpFolding.glsl	598;1106;47030;47134;47236;47338;47440;48485;48587;48686;49518;50856;50960;51064;52306;52923;53339;53547;53869;54077;54288;54392;54494;54591;54693;54796;54899;55195;55292;55486;55583;55777;55874;55971;56068;56165;56262;56456;56553;56650;56747;59269;59463;60821;60918;61015;61209;61306;61403;62179;62276;62470;62567;96;0;0;277;427;435;465;227;394;29;65;0;0
skia-20220712-f54445e937	f54445e937	768043eb0d	Tue Jul 12 11:04:12 2022 +0000	[gardener] Update docs for triaging oss-fuzz bugs	commit f54445e937b01c3f56303ec002cc3d3c8442653dAuthor: Kevin Lubick <kjlubick@google.com>Date:   Mon Jul 11 09:50:25 2022 -0400    [gardener] Update docs for triaging oss-fuzz bugs        Change-Id: I8b5a01795f6f13e3e72d3e9eca6a1c65abeadc74    No-Try: true    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/557396    Commit-Queue: Heather Miller <hcm@google.com>    Auto-Submit: Kevin Lubick <kjlubick@google.com>    Reviewed-by: Heather Miller <hcm@google.com>		site/docs/dev/gardening/_index.md	67
skia-20220706-ad62d59450	ad62d59450	32871e6901	Wed Jul 6 18:38:46 2022 +0000	SkVertices: Fix out-of-memory errors in deserialization	commit ad62d594502a846f144485812223f392f7513c48Author: Brian Osman <brianosman@google.com>Date:   Wed Jul 6 13:13:47 2022 -0400    SkVertices: Fix out-of-memory errors in deserialization        It was easy to construct a buffer that indicated enormous amounts of    memory had to be allocated. An easy guard is to bail out if the buffer    can't possibly fill those buffers.        Simplify the code a bit: Four years ago (well past the earliest    supported SKP version), we stopped writing out triangle fan data (by    converting to tri-lists at construction time). Remove the    deserialization support, which makes the code easier to follow.        Bug: oss-fuzz:48228    Bug: oss-fuzz:48231    Change-Id: I941da595a250f940316a48cb54caeaec47768973    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/556021    Reviewed-by: Robert Phillips <robertphillips@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>	48228	src/core/SkVertices.cpp	279;304
skia-20220706-48b27317b4	48b27317b4	bc15c6a548	Wed Jul 6 14:24:59 2022 +0000	Fix fuzzer-discovered error with range checks.	commit 48b27317b475d5c16a5f90d4d1f384a42daa0ecbAuthor: John Stiles <johnstiles@google.com>Date:   Wed Jul 6 09:38:41 2022 -0400    Fix fuzzer-discovered error with range checks.        The fuzzer managed to create a NaN using a carefully-crafted mix of    intrinsics and constant folding. (`cosh(421)` is a very large double,    which becomes +Inf when cast to float, which is then multiplied by 0;    zero times infinity is NaN.)        Our code which checked to see if a value is in range of an int did not    consider NaNs and their always-false behavior, so it incorrectly    decided that NaN was in range. This CL reverses the check so that a NaN    will not pass, but all other values will behave the same.        Followup CLs should probably also tighten up the folding/optimizer    behavior so that NaNs/Infs are not created at all.        Change-Id: Idd2b0447ebe115e00bdba63ca7ff655f6c902fc6    Bug: oss-fuzz:48592    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/555009    Commit-Queue: John Stiles <johnstiles@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>	48592	gn/sksl_tests.gni;src/sksl/ir/SkSLType.cpp	159;0;968;0
skia-20220630-26afe80a62	26afe80a62	02fd3fc63d	Thu Jun 30 14:48:48 2022 +0000	Fix assertion failure with \'uniform texture2D\'	commit 26afe80a628fa01463d93097f8b106649de297cbAuthor: Ethan Nicholas <ethannicholas@google.com>Date:   Wed Jun 29 15:03:50 2022 -0400    Fix assertion failure with 'uniform texture2D'        Bug: oss-fuzz:48371    Change-Id: Ia92a652022985ea738791f3e2e57d360a04b05bd    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/554517    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>    Reviewed-by: John Stiles <johnstiles@google.com>	48371	gn/sksl_tests.gni;src/sksl/codegen/SkSLMetalCodeGenerator.cpp	307;0;2553;0
skia-20220610-8481c5fca7	8481c5fca7	62f460742b	Fri Jun 10 13:59:26 2022 +0000	Fix fuzzer-discovered error with positions when casting arrays.	commit 8481c5fca7baf2c7b762ce97c4b6519b16b7c7a8Author: John Stiles <johnstiles@google.com>Date:   Fri Jun 10 09:20:38 2022 -0400    Fix fuzzer-discovered error with positions when casting arrays.        We were returning Expressions from ConstructorArrayCast which didn't    match the passed-in Position. We now make sure to set the position of    the returned expression properly.        Change-Id: I2099d006e7dff2c94a9590c7159c4b0947c91257    Bug: oss-fuzz:47935    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/548483    Commit-Queue: John Stiles <johnstiles@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>	47935	gn/sksl_tests.gni;src/sksl/ir/SkSLConstructorArrayCast.cpp	156;0;19;28;53;62;0
skia-20220608-661353407f	661353407f	220f6e4ab1	Wed Jun 8 20:07:22 2022 +0000	Fix leak in SubRunInitializer	commit 661353407f7487940f9e55864cbbdabe0b5ab690Author: Herb Derby <herb@google.com>Date:   Wed Jun 8 15:23:18 2022 -0400    Fix leak in SubRunInitializer        Bug: oss-fuzz:47844    Change-Id: I5b44801bb11433bfa1bfb88f374f750051dc7eec    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/548397    Reviewed-by: John Stiles <johnstiles@google.com>    Commit-Queue: Herb Derby <herb@google.com>	47844	src/text/gpu/SubRunAllocator.h	171
skia-20220418-b966ea2177	b966ea2177	ef87a96443	Mon Apr 18 12:10:05 2022 +0000	Fix update-fuzzer script to allow non-UTF8 data.	commit b966ea217759c544e81ed4d78c884f666e4b6229Author: John Stiles <johnstiles@google.com>Date:   Sat Apr 16 12:24:23 2022 -0400    Fix update-fuzzer script to allow non-UTF8 data.        Some of our oss-fuzz tests contain garbage data which isn't in any    encoding. This throws an error unless the files are opened in binary    mode.        Change-Id: I5caf307f3c79fba5b177496fd8ced8381205b97e    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/530679    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Kevin Lubick <kjlubick@google.com>    Commit-Queue: Kevin Lubick <kjlubick@google.com>		resources/sksl/update_fuzzer.py	1;36
skia-20220405-b47a67ab75	b47a67ab75	2fff9bf2bf	Tue Apr 5 17:10:23 2022 +0000	Fixed SkSL positioning error with double negation	commit b47a67ab75e6b98714fd728caeb93c1609433ca6Author: Ethan Nicholas <ethannicholas@google.com>Date:   Tue Apr 5 09:50:27 2022 -0400    Fixed SkSL positioning error with double negation        We were not propagating the position into a double-negated expression,    leading to an assertion failure in PrefixExpression.        Change-Id: I1970ff1a06d9631582626c68e151f12f6b3ef278    Bug: oss-fuzz:46381    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/527507    Reviewed-by: Brian Osman <brianosman@google.com>    Reviewed-by: John Stiles <johnstiles@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>	46381	gn/sksl_tests.gni;src/sksl/ir/SkSLExpression.h;src/sksl/ir/SkSLPrefixExpression.cpp;tests/SkSLTest.cpp	410;0;206;44;455;0;0;0
skia-20220307-c8cb357b53	c8cb357b53	8e6f4d08ce	Mon Mar 7 13:42:17 2022 +0000	Fix leak in SkReadBuffer::readFlattenable.	commit c8cb357b532fcf9132eece344547ff7392f4d0b2Author: John Stiles <johnstiles@google.com>Date:   Mon Mar 7 07:59:27 2022 -0500    Fix leak in SkReadBuffer::readFlattenable.        If an object did not have the expected type, we would return null, but    leak the undesired object.        Change-Id: I4f799e6583f8d35e852319106b5b07a5a2e4d354    Bug: oss-fuzz:45240, oss-fuzz:45256, oss-fuzz:45265, oss-fuzz:45270    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/516797    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>	45240	src/core/SkReadBuffer.cpp	464
skia-20220304-cf67cbeb2f	cf67cbeb2f	0817ce7c5b	Fri Mar 4 21:37:18 2022 +0000	Fix int underflow in SkReadBuffer	commit cf67cbeb2fb15777ef6557e869fafa1890de3919Author: Kevin Lubick <kjlubick@google.com>Date:   Fri Mar 4 15:57:11 2022 -0500    Fix int underflow in SkReadBuffer        We don't want to use any negative index in fFactoryArray.        Change-Id: Ib87b3c0a28fb61653dbffc700a96001421930060    Bug: oss-fuzz:42237    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/516376    Commit-Queue: Kevin Lubick <kjlubick@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	42237	src/core/SkReadBuffer.cpp	401
skia-20220218-d49161e835	d49161e835	418fdebf1c	Fri Feb 18 02:10:41 2022 +0000	More PolyUtils fixes.	commit d49161e835e2deaba495b1780c23f19e245a14d7Author: Jim Van Verth <jvanverth@google.com>Date:   Thu Feb 17 17:16:09 2022 -0500    More PolyUtils fixes.        First, the convex check still had a bug when determining if we've    wrapped around more than once. If the delta between two coordinates was    0, then that doesn't trigger a sign change (as expected), but it    will get copied as the next value to check against. Instead we should    be checking against the previous non-zero value.        Second, the ActiveEdgeList for isSimple had a bug where two very large    segments were ending up with equal p0 and v values due to floating    point error. Added a check for this and we'll treat those edges as    effectively coincident.        Bug: oss-fuzz:44753    Change-Id: I84bccdf629e6173d14c040b0e6f6c997f4b48001    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/510416    Auto-Submit: Jim Van Verth <jvanverth@google.com>    Reviewed-by: Michael Ludwig <michaelludwig@google.com>    Commit-Queue: Michael Ludwig <michaelludwig@google.com>	44753	src/utils/SkPolyUtils.cpp	193;209;221;729
skia-20220211-683ae40560	683ae40560	a9ac0ce55d	Fri Feb 11 14:25:34 2022 +0000	Fix for fuzzer-discovered error with deeply-nested expressions.	commit 683ae405607af21c62fe1b42252413f11ba42783Author: John Stiles <johnstiles@google.com>Date:   Fri Feb 11 08:36:33 2022 -0500    Fix for fuzzer-discovered error with deeply-nested expressions.        The fuzzer constructs a long, valid nonsense expression    (x+x+x-x+x-x, etc.) which exceeds parse depth. At that point, the token    stream points to a `+` token. The parser attempts to consume a new    statement but stops in `unaryExpression`; this fails again, due to the    max parse-depth, but doesn't consume a token. The parser continues    trying to parse the statement, but stopping in `unaryExpression`, making    no forward progress in an infinite loop.        I've made a couple of changes as a result.    - Exceeding the max parse depth now sets `fEncounteredFatalError`.    - Encountering a fatal error causes block() to immediately halt. This      actually undoes a few of the arbitrary changes from      http://review.skia.org/506463 but not in a bad way.    - `unaryExpression()` now consumes a token before checking parse-depth.    - `structDeclaration()` had a similar issue where it could potentially      fail without consuming any tokens; this is fixed as well.    - Some unnecessarily-nested logic in ternaryExpression() was flattened      while I tried to ensure that it always consumes a token.        Change-Id: I52c2161965ffbcef1185761ca6897ec1cba5df89    Bug: oss-fuzz:44551    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/507436    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Ethan Nicholas <ethannicholas@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>	44551	gn/sksl_tests.gni;resources/sksl/errors/OpenArray.sksl;resources/sksl/errors/PrototypeInFuncBody.sksl;src/sksl/SkSLDSLParser.cpp;tests/sksl/errors/ForInitStmt.glsl;tests/sksl/errors/OpenArray.glsl;tests/sksl/errors/Ossfuzz40660.glsl;tests/sksl/errors/PrototypeInFuncBody.glsl;tests/sksl/errors/SwitchDuplicateDefault.glsl	127;6;0;4;56;601;615;1269;1357;1562;1621;1;3;6;0;1;1
skia-20220131-343258fa0c	343258fa0c	e267a5bb7a	Mon Jan 31 16:21:45 2022 +0000	Fix fuzzer-discovered error with sk_SecondaryFragColor in SPIR-V.	commit 343258fa0ca9113cb36a7f84afd74697058e90b3Author: John Stiles <johnstiles@google.com>Date:   Fri Jan 28 17:15:44 2022 -0500    Fix fuzzer-discovered error with sk_SecondaryFragColor in SPIR-V.        sk_SecondaryFragColor corresponds to an ES2-only concept    (gl_SecondaryFragColorEXT) and does not have any SPIR-V equivalent.        Two fixes were needed:    - sk_SecondaryFragColor shouldn't be in SPIR-V code at all. Report it as      an error when it appears.    - We don't stop compilation when this error is reported, so we need to      fix up the assertion that the fuzzer initially discovered.      Specifically, the fuzzer found that the `sk_SecondaryFragColor`      variable never got a SPIR-V ID assigned to it in fVariableMap, so the      compiler would assert when assembling an expression containing that      variable. Now, we make sure to populate fVariableMap with an (unused)      ID in `writeGlobalVar` to avoid this crash.        Change-Id: Ib86919dfc9a325b2b82a7f4b2054b747dad7c32f    Bug: oss-fuzz:44096    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/501976    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Ethan Nicholas <ethannicholas@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>	44096	gn/sksl_tests.gni;src/sksl/codegen/SkSLSPIRVCodeGenerator.cpp	128;279;0;3083;3095;0;0
skia-20220125-cc473cd92f	cc473cd92f	385a90aa9d	Tue Jan 25 16:25:09 2022 +0000	Fix fuzzer-discovered error with swizzles.	commit cc473cd92fc0dbc4a144c5c9f9af497207747e2aAuthor: John Stiles <johnstiles@google.com>Date:   Tue Jan 25 10:48:01 2022 -0500    Fix fuzzer-discovered error with swizzles.        Some paths through swizzle optimization would replace a swizzles with a    constructor--e.g. `float3(1, 2, 3).y` would be replaced with `float(2)`.    (Constructor::Convert was responsible for replacing this trivial    constructor with the literal `2.0`.)        The optimization code asserted that this replacement would succeed, but    the fuzzer managed to construct a counterexample where the constructor    rejected the value. Specifically, by nesting casts between int3 and    float3, it found a case where Constructor::Convert returned null because    the literal value was out of range for `int` types.        This assertion didn't really add value so removing it was harmless.    Constructor::Convert already reports an error when it fails, and null    returns are handled properly throughout.        Change-Id: I575d441ed90d6b696f6399941c3f6d84698794bc    Bug: oss-fuzz:44045    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/499382    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>    Commit-Queue: John Stiles <johnstiles@google.com>	44045	gn/sksl_tests.gni;src/sksl/ir/SkSLSwizzle.cpp	127;0;225;0
skia-20220125-3f900d174b	3f900d174b	83c85affad	Tue Jan 25 14:52:22 2022 +0000	Fix issues with SkIsConvexPolygon and SkIsSimplePolygon	commit 3f900d174b9107ad6b148c4237dd99ee11f2d608Author: Jim Van Verth <jvanverth@google.com>Date:   Mon Jan 24 15:01:29 2022 -0500    Fix issues with SkIsConvexPolygon and SkIsSimplePolygon        The check in SkIsConvexPolygon that determines if a polygon winds around    multiple times turned out to not be correct in all cases. This has been    changed to a much simpler one -- if the sign of the edge vectors change    more than twice, then we know that we've wrapped around more than one    time.        In SkIsSimplePolygon, if both points adjacent to a vertex are on the    right side, we attempt to add both those edges to the active edge list.    However, if they are the same point, then we'll be adding the same edge    twice, which makes the strict ordering of the edge list invalid. Instead    we check for this case earlier on and reject the polygon.        Bug: oss-fuzz:44004    Change-Id: I6ffe11d73fabd6ae2f75cb027db887bcb8c03cb1    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/498916    Reviewed-by: Michael Ludwig <michaelludwig@google.com>    Commit-Queue: Jim Van Verth <jvanverth@google.com>	44004	src/utils/SkPolyUtils.cpp;tests/PolyUtilsTest.cpp	185;210;1090;252
skia-20211213-e4bccab4ac	e4bccab4ac	5d6e51dbec	Mon Dec 13 19:10:34 2021 +0000	Fix divide-by-zero in AAConvexTessellator.	commit e4bccab4ac7ceb76cd99b9c92c2b1729c7e60aafAuthor: Jim Van Verth <jvanverth@google.com>Date:   Mon Dec 13 11:22:36 2021 -0500    Fix divide-by-zero in AAConvexTessellator.        Bug: oss-fuzz:32385    Change-Id: I048e5a55430c0c968b858b0ac25d077a35332e02    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/483519    Reviewed-by: Robert Phillips <robertphillips@google.com>    Commit-Queue: Jim Van Verth <jvanverth@google.com>	32385	src/gpu/geometry/GrAAConvexTessellator.cpp	48;355
skia-20211124-61c2b7f73d	61c2b7f73d	2044a348d5	Wed Nov 24 20:46:13 2021 +0000	Fix style parsing with better style.	commit 61c2b7f73db8b38a9a687189497a237468bee4dbAuthor: Ben Wagner <bungeman@google.com>Date:   Wed Aug 26 13:50:10 2020 -0400    Fix style parsing with better style.        SkFontStyle needs to be updated to take scalar weight and width, and    separate slant and italic into separate scalar values. Since there are    currently issues with serialization of SkFontStyle, start with the    serialization and deserialization before moving these changes up into    SkFontStyle and its users itself.        Bug: oss-fuzz:24962,skia:6844    Change-Id: Ic121d95fe1309ee04dbd6b1fe72d9b1d01b52258    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/313476    Reviewed-by: Herb Derby <herb@google.com>    Commit-Queue: Ben Wagner <bungeman@google.com>	249626844	src/core/SkFontDescriptor.cpp;tests/TypefaceTest.cpp	12;48;78;100;121;133;141
skia-20211117-85f4226bd3	85f4226bd3	51f568a852	Wed Nov 17 15:44:21 2021 +0000	Fix fuzzer-discovered error with child calls.	commit 85f4226bd372524f268b985e26709b02c7005a25Author: John Stiles <johnstiles@google.com>Date:   Wed Nov 17 10:01:57 2021 -0500    Fix fuzzer-discovered error with child calls.        The `eval` methods take a shader/blender/colorFilter, and we assumed    when assembling the ChildCall expression that the child expression would    be a VariableReference because opaque objects don't participate in    normal expressions. However, comma-expressions were allowed to contain    opaque types. GLSL doesn't allow opaque types in comma-expressions:        http://screen/8YW59tYDUbBh9eW        Now we disallow them as well.        Change-Id: Iaf88ef7bddb5cc8f1f1e23b515174dfc291e00c7    Bug: oss-fuzz:41072    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/472446    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>    Commit-Queue: John Stiles <johnstiles@google.com>	41072	resources/sksl/runtime_errors/IllegalShaderSampling.rts;src/sksl/SkSLOperators.cpp;tests/sksl/errors/AssignmentTypeMismatch.glsl;tests/sksl/runtime_errors/IllegalShaderSampling.skvm	1;6;289;3;1
skia-20211103-390edeb88d	390edeb88d	9535da4e3a	Wed Nov 3 14:57:48 2021 +0000	Fix fuzzer-discovered error with no-op arithmetic.	commit 390edeb88daf4e9bf6331fabe3099639ee4ab005Author: John Stiles <johnstiles@google.com>Date:   Wed Nov 3 10:15:18 2021 -0400    Fix fuzzer-discovered error with no-op arithmetic.        The fuzzer triggered this error in a strange way that involves parsing a    TK_INVALID token. The fuzzer's original input used \xFF bytes in the    shader text to do this. I replaced these with the ` character since it    behaved the same, but allows our test inputs to remain basic ASCII.        The root problem is that `cast_expression`, part of no-op arithmetic    simplification, can now fail because expressions like `int(4000000000)`    no longer get past Constructor::Convert. Previously we had assumed    `cast_expression` could never return null; now we check its result for    null before using it.        Change-Id: I7335395bab0daf1f788b0c7c154904b2372ae13f    Bug: oss-fuzz:40660    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/467316    Commit-Queue: John Stiles <johnstiles@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	40660	gn/sksl_tests.gni;src/sksl/SkSLConstantFolder.cpp	114;0;134;272;286;0
skia-20211101-81c86e8608	81c86e8608	ec98e205cd	Mon Nov 1 15:26:14 2021 +0000	Fix fuzzer-discovered assertion with nonsense array sizes.	commit 81c86e8608c252c17af2ee63be70dd1576a5ed3dAuthor: John Stiles <johnstiles@google.com>Date:   Mon Nov 1 10:50:05 2021 -0400    Fix fuzzer-discovered assertion with nonsense array sizes.        Change-Id: I7512491f55c10118f0ab058500f6ce9b5b8545cd    Bug: oss-fuzz:40557    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/466296    Commit-Queue: John Stiles <johnstiles@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>    Reviewed-by: Ethan Nicholas <ethannicholas@google.com>	40557	resources/sksl/errors/ArrayOfInvalidSize.sksl;src/sksl/ir/SkSLConstructor.cpp;tests/sksl/errors/ArrayOfInvalidSize.glsl	1;55;9
skia-20211028-4363cdb5ea	4363cdb5ea	8837686752	Thu Oct 28 16:44:09 2021 +0000	Fix for fuzzer-discovered error with bitwise-not.	commit 4363cdb5ea36df8b524b607cde07fc1e5f3071fbAuthor: John Stiles <johnstiles@google.com>Date:   Thu Oct 28 11:57:16 2021 -0400    Fix for fuzzer-discovered error with bitwise-not.        A recent CL (http://review.skia.org/464121) made it an error to coerce a    literal value to a type that cannot hold the value. The fuzzer found a    case where we assumed type-coercion of a literal would always succeed,    and failed to null-check the result. We now null-check the result.        Change-Id: Id97c6016e56c20ef724028f71bbf4688dde3c064    Bug: oss-fuzz:40428    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/464919    Commit-Queue: Brian Osman <brianosman@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>	40428	gn/sksl_tests.gni;src/sksl/ir/SkSLPrefixExpression.cpp	112;0;216;0
skia-20211028-f2d016f12e	f2d016f12e	533cfc8c9c	Thu Oct 28 16:14:42 2021 +0000	Fix for fuzzer-discovered error with negation.	commit f2d016f12e224d4a85cd690577cc9a8411731f2aAuthor: John Stiles <johnstiles@google.com>Date:   Thu Oct 28 11:27:36 2021 -0400    Fix for fuzzer-discovered error with negation.        Yesterday's negation-related changes (http://review.skia.org/464123)    exposed a flaw that the fuzzer was able to exploit. We were previously    able to assume that `simplify_negation` would always return a non-null    expression; in some cases, that is no longer true.        Change-Id: Ia585232b0e35fafe0c642384a59ef94ce743ffd5    Bug: oss-fuzz:40427    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/464916    Commit-Queue: John Stiles <johnstiles@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	40427	gn/sksl_tests.gni;src/sksl/ir/SkSLPrefixExpression.cpp	111;0;66;75;0
skia-20211004-923d83bf18	923d83bf18	816d9179b3	Mon Oct 4 13:41:56 2021 +0000	Fix incorrect assertion discovered by fuzzer.	commit 923d83bf18758a59daee4108525d33a7a6fe2526Author: John Stiles <johnstiles@google.com>Date:   Sat Oct 2 10:41:10 2021 -0400    Fix incorrect assertion discovered by fuzzer.        `optimize_comparison` asserted that its inputs were numbers. However,    it's also valid to compare boolean inputs. Fortunately, other than the    over-zealous assertion, the actual logic worked fine.        Change-Id: I8a9db000274b4993a4c303efa223a1ed72461a87    Bug: oss-fuzz:39513    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/455296    Auto-Submit: John Stiles <johnstiles@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	39513	resources/sksl/intrinsics/Equal.sksl;src/sksl/ir/SkSLFunctionCall.cpp;tests/sksl/intrinsics/Equal.asm.frag;tests/sksl/intrinsics/Equal.glsl;tests/sksl/intrinsics/Equal.metal	5;174;15;30;60;76;9;19
skia-20210924-b05bbd03f9	b05bbd03f9	fcc0ef1ee4	Fri Sep 24 20:15:31 2021 +0000	Fix for fuzzer-discovered error with invalid var-initializers.	commit b05bbd03f98e5b5857df21dcad04dd8bbe3b2b72Author: John Stiles <johnstiles@google.com>Date:   Fri Sep 24 15:11:16 2021 -0400    Fix for fuzzer-discovered error with invalid var-initializers.        If a VarDeclaration line contained multiple variables, and the first    variable had an illegal initializer-expression, the Declare() would    return a Nop. AddVarDeclaration did not expect to see a Nop and would    assert once we tried to process the second var-declaration. Now, we    allow adding var declarations to a Nop.        Bulked up some tests to cover local and global variables (since those    are parsed in separate functions) and to check both the first    initializer as well as follow-on initializers (since those are parsed in    separate parts of the var-decl handler).        Change-Id: I66341191698175b490a659715cb8edaafe2f75ae    Bug: oss-fuzz:39032    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/452696    Commit-Queue: John Stiles <johnstiles@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	39032	resources/sksl/errors/UndefinedSymbol.sksl;resources/sksl/errors/UsingInvalidValue.sksl;src/sksl/SkSLDSLParser.cpp;src/sksl/dsl/priv/DSLWriter.cpp;tests/sksl/errors/Ossfuzz38865.glsl;tests/sksl/errors/Ossfuzz38944.glsl;tests/sksl/errors/UndefinedSymbol.glsl;tests/sksl/errors/UsingInvalidValue.glsl	1 +1;1;430;448;466;484;138;1;1;1;1
skia-20210921-2816dcfc67	2816dcfc67	ed2babaf94	Tue Sep 21 14:12:47 2021 +0000	Fixed fuzzer-discovered bug with interface blocks	commit 2816dcfc6775e75c7aba5978e835a147dda4ac1cAuthor: Ethan Nicholas <ethannicholas@google.com>Date:   Tue Sep 21 09:18:47 2021 -0400    Fixed fuzzer-discovered bug with interface blocks        While I was in this code, I realized that the setVariable method of    InterfaceBlock was unused and there was therefore no reason to be    storing a pointer instead of a reference.        Bug: oss-fuzz:39000    Change-Id: If7505ba87f4060370cfd32ca2e30c76648965101    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/450446    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>    Commit-Queue: John Stiles <johnstiles@google.com>    Reviewed-by: John Stiles <johnstiles@google.com>	39000	gn/sksl_tests.gni;src/sksl/SkSLIRGenerator.cpp;src/sksl/SkSLRehydrator.cpp;src/sksl/codegen/SkSLSPIRVCodeGenerator.cpp;src/sksl/dsl/DSLCore.cpp;src/sksl/ir/SkSLInterfaceBlock.h	109;0;794;285;3052;3459;3528;230;31;42;66;91;0
skia-20210920-f62934b85a	f62934b85a	3d9c73c100	Mon Sep 20 17:57:14 2021 +0000	Fixed DSLParser error uncovered by ossfuzz	commit f62934b85a49a6a2b6ecb4812f3ba938a4d1715dAuthor: Ethan Nicholas <ethannicholas@google.com>Date:   Mon Sep 20 10:18:58 2021 -0400    Fixed DSLParser error uncovered by ossfuzz        Missed one more case of Optional<Wrapper<Expression>>. This should be    the last one.        Bug: oss-fuzz:38944    Change-Id: Ic7f790cd99e2a3ee1c3874cc767a4702265d1723    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/450476    Reviewed-by: John Stiles <johnstiles@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>	38944	gn/sksl_tests.gni;src/sksl/SkSLDSLParser.cpp	108;0;1666;0
skia-20210920-c973d26854	c973d26854	64be3c5867	Mon Sep 20 13:48:41 2021 +0000	Fixed DSLParser assertion error uncovered by fuzzer	commit c973d26854734a3498a0f7e014e9fba423a2ca96Author: Ethan Nicholas <ethannicholas@google.com>Date:   Fri Sep 17 16:10:29 2021 -0400    Fixed DSLParser assertion error uncovered by fuzzer        Bug: oss-fuzz:38108    Change-Id: I0e055d837923f00b982bc395dbf29b6ff59a3b21    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/448896    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>    Reviewed-by: John Stiles <johnstiles@google.com>	38108	gn/sksl_tests.gni;include/sksl/DSLSymbols.h;resources/sksl/errors/DuplicateSymbol.sksl;src/sksl/SkSLCompiler.cpp;src/sksl/SkSLDSLParser.cpp;src/sksl/dsl/DSLSymbols.cpp;tests/sksl/errors/DuplicateSymbol.glsl	104;57;2;0;884;957;450;486;35;2;0
skia-20210917-d0665d9a04	d0665d9a04	56cab7f9cb	Fri Sep 17 14:19:14 2021 +0000	Fix fuzzer-discovered null deref with empty interface blocks.	commit d0665d9a04c4d3e63f08e2600fa246764f4465c2Author: John Stiles <johnstiles@google.com>Date:   Fri Sep 17 09:14:28 2021 -0400    Fix fuzzer-discovered null deref with empty interface blocks.        Change-Id: I95bfa33f674bce0098cc6d4469c8c85ee8b051f5    Fixes: oss-fuzz:38875    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/449817    Reviewed-by: Ethan Nicholas <ethannicholas@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>	38875	resources/sksl/errors/InterfaceBlockWithNoMembers.sksl;src/sksl/SkSLDSLParser.cpp;tests/sksl/errors/InterfaceBlockWithNoMembers.glsl	1 +1;879;894;1
skia-20210915-fd1332f5a7	fd1332f5a7	78b84cc76a	Wed Sep 15 15:00:23 2021 +0000	Reland "Fixed DSL assertion error on source files containing nulls"	commit fd1332f5a747bdd1de56ab5bfa3372b921f02159Author: Ethan Nicholas <ethannicholas@google.com>Date:   Fri Sep 10 13:57:48 2021 -0400    Reland "Fixed DSL assertion error on source files containing nulls"        This is a reland of db38ad7b142e44aa4718d7c71d47f680d247cff0        Original change's description:    > Fixed DSL assertion error on source files containing nulls    >    > The assertion was there to make sure we weren't running off the end of    > the source, but naturally fails in the presence of legitimate embedded    > nulls.    >    > Change-Id: I3b80499e9b182c9ea046c479f35d7a965d548401    > Bug: oss-fuzz:38107    > Reviewed-on: https://skia-review.googlesource.com/c/skia/+/447182    > Commit-Queue: Ethan Nicholas <ethannicholas@google.com>    > Reviewed-by: John Stiles <johnstiles@google.com>    > Reviewed-by: Brian Osman <brianosman@google.com>        Bug: oss-fuzz:38107    Change-Id: Idb1a6b7c64d2bb954edadae828d6de808158fd3f    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/448660    Reviewed-by: Ethan Nicholas <ethannicholas@google.com>    Reviewed-by: John Stiles <johnstiles@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>	38107	gn/sksl_tests.gni;include/sksl/SkSLErrorReporter.h	101;53;0
skia-20210915-78b84cc76a	78b84cc76a	857c7f9dc5	Wed Sep 15 14:29:45 2021 +0000	Fix size calculation of blockless for-loops.	commit 78b84cc76a6693869f48d2b4182cac791ec78a86Author: John Stiles <johnstiles@google.com>Date:   Wed Sep 15 09:44:54 2021 -0400    Fix size calculation of blockless for-loops.        Change-Id: Id6e1d1be276af01ce05777682dde8b58d803aedc    Bug: oss-fuzz:37837    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/449097    Commit-Queue: John Stiles <johnstiles@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	37837	src/sksl/SkSLAnalysis.cpp;tests/sksl/runtime_errors/ProgramTooLarge_BlocklessLoops.skvm	702;1
skia-20210914-76172f9ed8	76172f9ed8	2bc96d6771	Tue Sep 14 13:37:18 2021 +0000	[infra] Roll Swiftshader to fix fuzz bug	commit 76172f9ed8e7d7dfe510d2ed53372c4c36a88852Author: Kevin Lubick <kjlubick@google.com>Date:   Tue Sep 14 08:58:04 2021 -0400    [infra] Roll Swiftshader to fix fuzz bug        Change-Id: If1616d5204d5474be51d1890437542c3ab69bb23    Bug: oss-fuzz:38346    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/448577    Commit-Queue: Kevin Lubick <kjlubick@google.com>    Commit-Queue: John Stiles <johnstiles@google.com>    Auto-Submit: Kevin Lubick <kjlubick@google.com>    Reviewed-by: John Stiles <johnstiles@google.com>	38346	DEPS	39
skia-20210913-dc652564a7	dc652564a7	fe678d9b1c	Mon Sep 13 13:34:48 2021 +0000	Fix for-statement assertion detected by the fuzzer.	commit dc652564a7639f0c4269bd2d94e29e15fac4c810Author: John Stiles <johnstiles@google.com>Date:   Mon Sep 13 08:55:40 2021 -0400    Fix for-statement assertion detected by the fuzzer.        The fuzzer found that the `DetectVarDeclarationWithoutScope` check was    placed too late in the function, and could be skipped over by for-loops    containing multiple variables. This was caught in ForStatement::Make,    which mirrors the Convert postconditions with matching assertions.        Change-Id: I6e9d97c7c9ca969aba65e601bbcd9fe676105838    Bug: oss-fuzz:38560    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/448116    Commit-Queue: John Stiles <johnstiles@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	38560	gn/sksl_tests.gni;src/sksl/ir/SkSLForStatement.cpp	102;0;117;132;0
skia-20210911-47d824415e	47d824415e	2e4dc863da	Sat Sep 11 18:13:13 2021 +0000	Revert "Fixed DSL assertion error on source files containing nulls"	commit 47d824415e72218a573c821c55207f8561382e71Author: Michael Ludwig <michaelludwig@google.com>Date:   Sat Sep 11 18:12:28 2021 +0000    Revert "Fixed DSL assertion error on source files containing nulls"        This reverts commit db38ad7b142e44aa4718d7c71d47f680d247cff0.        Reason for revert: breaking g3 roll since it thinks the test case is "binary" not flagged as binary        Original change's description:    > Fixed DSL assertion error on source files containing nulls    >    > The assertion was there to make sure we weren't running off the end of    > the source, but naturally fails in the presence of legitimate embedded    > nulls.    >    > Change-Id: I3b80499e9b182c9ea046c479f35d7a965d548401    > Bug: oss-fuzz:38107    > Reviewed-on: https://skia-review.googlesource.com/c/skia/+/447182    > Commit-Queue: Ethan Nicholas <ethannicholas@google.com>    > Reviewed-by: John Stiles <johnstiles@google.com>    > Reviewed-by: Brian Osman <brianosman@google.com>        Bug: oss-fuzz:38107    Change-Id: I650d12d728b5d932bda79e81205b873d8b44771f    No-Presubmit: true    No-Tree-Checks: true    No-Try: true    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/447936    Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>    Commit-Queue: Michael Ludwig <michaelludwig@google.com>	38107	gn/sksl_tests.gni;include/sksl/SkSLErrorReporter.h;tests/sksl/errors/Ossfuzz38107.glsl	101;53;1
skia-20210910-db38ad7b14	db38ad7b14	81f03a4f4c	Fri Sep 10 18:44:22 2021 +0000	Fixed DSL assertion error on source files containing nulls	commit db38ad7b142e44aa4718d7c71d47f680d247cff0Author: Ethan Nicholas <ethannicholas@google.com>Date:   Fri Sep 10 13:57:48 2021 -0400    Fixed DSL assertion error on source files containing nulls        The assertion was there to make sure we weren't running off the end of    the source, but naturally fails in the presence of legitimate embedded    nulls.        Change-Id: I3b80499e9b182c9ea046c479f35d7a965d548401    Bug: oss-fuzz:38107    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/447182    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>    Reviewed-by: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	38107	gn/sksl_tests.gni;include/sksl/SkSLErrorReporter.h	101;53;0
skia-20210910-c9d65f0b8a	c9d65f0b8a	c7ffd5e680	Fri Sep 10 17:35:52 2021 +0000	Fixed duplicate function definition error discovered by fuzzer	commit c9d65f0b8ab645b3ab9961a15f0704af22ac2f00Author: Ethan Nicholas <ethannicholas@google.com>Date:   Fri Sep 10 11:57:46 2021 -0400    Fixed duplicate function definition error discovered by fuzzer        Bug: oss-fuzz:38140    Change-Id: I76a1b3ef8289b3089192d043d173677c00741a54    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/445836    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>    Reviewed-by: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	38140	gn/sksl_tests.gni;include/sksl/DSLFunction.h;src/sksl/SkSLDSLParser.cpp;src/sksl/dsl/DSLFunction.cpp	101;66;0;360;71;89;0
skia-20210910-bf4a7d5235	bf4a7d5235	588dcc093d	Fri Sep 10 14:29:22 2021 +0000	Fixed DSLParser crash with invalid swizzle	commit bf4a7d523599c87761a5c650279ee3299401b348Author: Ethan Nicholas <ethannicholas@google.com>Date:   Thu Sep 9 09:32:13 2021 -0400    Fixed DSLParser crash with invalid swizzle        In response to a non-identifier token after a dot, DSLParser would    attempt to swizzle a zero-length field and fail an assertion.        The same basic code path exists in the old compiler, but the resulting    parse error causes the process to abort before it attempts to process    the zero-length swizzle.        Bug: oss-fuzz:38106    Change-Id: Ifd997ce1d564b5f6ef0a9a785d8d9e254785e600    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/446185    Reviewed-by: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>	38106	gn/sksl_tests.gni;src/sksl/SkSLDSLParser.cpp	100;0;1625;0
skia-20210907-a2c76c77c4	a2c76c77c4	ff6c5bf5ed	Tue Sep 7 20:18:00 2021 +0000	Fixed illegal interface block reporting	commit a2c76c77c4965c6666593e43ba201586684a4b04Author: Ethan Nicholas <ethannicholas@google.com>Date:   Tue Sep 7 15:21:13 2021 -0400    Fixed illegal interface block reporting        DSL was improperly allowing interface blocks in runtime shaders, which    caused PipelineStageGenerator to get upset.        Bug: oss-fuzz:38131    Change-Id: I593e68f2cab3db9151d606e65e2826ffa9c494e2    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/446324    Commit-Queue: Ravi Mistry <rmistry@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>    Reviewed-by: John Stiles <johnstiles@google.com>	38131	gn/sksl_tests.gni;src/sksl/SkSLDSLParser.cpp;src/sksl/SkSLIRGenerator.cpp;src/sksl/dsl/DSLCore.cpp	569;0;874;96;365;767;410;0
skia-20210907-3ff77f4862	3ff77f4862	826468ff56	Tue Sep 7 13:29:37 2021 +0000	Fix inliner bug discovered by fuzzer.	commit 3ff77f48629cb5a8e1680e8315f6446105711ac5Author: John Stiles <johnstiles@google.com>Date:   Mon Sep 6 22:17:58 2021 -0400    Fix inliner bug discovered by fuzzer.        Intrinsic-call optimization can be triggered during inlining. In this    case, inlining turned `normalize(x)` into `normalize(constant-value)`.        DSL is used to implement optimizations for a handful of intrinsic calls,    including `normalize`, which internally relies on `length`.        The DSL expects that it can use the IRGenerator to handle function    calls. This was not working because we were finished with the initial    compilation pass, and the IRGenerator's symbol table is removed when    finish() was called.        We now temporarily give a symbol table back to the IRGenerator while    the inliner runs. We remove it again as soon as inlining is complete.        Change-Id: I6da98788d93749ffeb008c1f4c3f72b436e8ceeb    Bug: oss-fuzz:37994    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/445956    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>    Commit-Queue: John Stiles <johnstiles@google.com>	37994	gn/sksl_tests.gni;src/sksl/SkSLCompiler.cpp;src/sksl/SkSLCompiler.h	457;0;503;789;806;244;0
skia-20210831-5cec187b36	5cec187b36	0c8a5988fe	Tue Aug 31 19:55:45 2021 +0000	Fix array timeout discovered by the fuzzer.	commit 5cec187b365d1bf7bc5b8e07afdfad611c67e59aAuthor: John Stiles <johnstiles@google.com>Date:   Tue Aug 31 14:58:08 2021 -0400    Fix array timeout discovered by the fuzzer.        The fuzzer discovered that, when we attempt to verify that an array    doesn't contain any literal values that are out-of-range for its base    type, we pay a linear-time cost based on the size of the array. This    happens even when the array value isn't known at compile time; we still    iterate over its slot count and diligently discover that every single    constant-subexpression slot in the expression is "null".        We now have a helper function on Expression,    `allowsConstantSubexpressions`, which only returns true for expression    kinds that can contain constant subexpressions. We use this helper to    skip over this linear-per-subexpression check when the expression    cannot possibly contain a constant subexpression. In particular,    `AnyConstructor::compareConstant` and `Type::checkForOutOfRangeLiteral`    will now early-out for expressions that can't possibly contain a    constant subexpression.        Change-Id: Ia34e422afa67b478a8616acb0a0e9cd211b29698    Bug: oss-fuzz:37900    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/444136    Commit-Queue: John Stiles <johnstiles@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Ethan Nicholas <ethannicholas@google.com>	37900	gn/sksl_tests.gni;src/sksl/ir/SkSLBoolLiteral.h;src/sksl/ir/SkSLConstructor.cpp;src/sksl/ir/SkSLConstructor.h;src/sksl/ir/SkSLConstructorDiagonalMatrix.h;src/sksl/ir/SkSLConstructorMatrixResize.h;src/sksl/ir/SkSLConstructorSplat.h;src/sksl/ir/SkSLExpression.h;src/sksl/ir/SkSLFloatLiteral.h;src/sksl/ir/SkSLIntLiteral.h;src/sksl/ir/SkSLType.cpp	351;0;69;185;68;40;42;38;158;165;75;77;755;0;0;0
skia-20210830-f89a8122a4	f89a8122a4	75bab9249d	Mon Aug 30 20:40:17 2021 +0000	Fix flaws in minus-prefix optimization.	commit f89a8122a47e9e59bec0f25e1172f9c4f3702047Author: John Stiles <johnstiles@google.com>Date:   Mon Aug 30 15:47:00 2021 -0400    Fix flaws in minus-prefix optimization.        We had a logic bug when attempting to optimize the following code:        const vecN x = vecN(a, b, c);        -x;        The goal was to replace `-x` with `vecN(-a, -b, -c)` but we accidentally    tried to cast the `x` VariableReference to a Constructor. We    unfortunately didn't cover this in any of our test cases, but the fuzzer    managed to synthesize it by mixing and matching elements from its new    corpus.        This affected several different constructor types: splat, diagonal-    matrix, compound and array.        Change-Id: I10dd2460ab26ba3e820b0cff5db091368fb7e648    Bug: oss-fuzz:37764, oss-fuzz:37861    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/443407    Commit-Queue: John Stiles <johnstiles@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Ethan Nicholas <ethannicholas@google.com>	37764	gn/sksl_tests.gni;resources/sksl/shared/NegatedVectorLiteral.sksl;src/sksl/ir/SkSLPrefixExpression.cpp;tests/SkSLTest.cpp;tests/sksl/shared/NegatedVectorLiteral.asm.frag;tests/sksl/shared/NegatedVectorLiteral.glsl;tests/sksl/shared/NegatedVectorLiteral.metal	332;1;0;19;50;267;1;1;1;0;0;0
skia-20210827-7bd3f1cc78	7bd3f1cc78	c7774a779f	Fri Aug 27 21:38:19 2021 +0000	Fix fuzzer-discovered assertion with global variables.	commit 7bd3f1cc7822ca8a545ecc0e56dddb5390ab1821Author: John Stiles <johnstiles@google.com>Date:   Fri Aug 27 16:12:10 2021 -0400    Fix fuzzer-discovered assertion with global variables.        Our analysis pass for checking if an expression is a constant-expression    would assert if the expression contained a TypeReference or a    FunctionReference. This could happen if you passed in an expression that    had not yet been type-coerced. This check seemed overly strict, so the    assertion has been removed (although such an expression will be reported    as 'not a constant expression').        This bit us in global-variable declaration, where we checked if a    global variable's initial-value expression was constant before coercing    it to the variable's type. This has also been reordered so the type-    coercion happens first. (Either order is now valid, but the type-    coercion related errors tend to be more detailed.)        Change-Id: I5104cf817767d65fd84421243d9530734ba624a9    Bug: oss-fuzz:37710    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/442693    Commit-Queue: John Stiles <johnstiles@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Ethan Nicholas <ethannicholas@google.com>	37710	resources/sksl/errors/AssignmentTypeMismatch.sksl;resources/sksl/errors/IntrinsicInGlobalVariable.sksl;src/sksl/SkSLAnalysis.cpp;src/sksl/ir/SkSLVarDeclarations.cpp;tests/sksl/errors/AssignmentTypeMismatch.glsl;tests/sksl/errors/OpaqueTypeAssignment.glsl	3;1;1163;37;54;67;5;1
skia-20210827-842ee5bd8d	842ee5bd8d	c82eab82f1	Fri Aug 27 17:05:21 2021 +0000	Fix assertion when calling a built-in function at global scope.	commit 842ee5bd8d6f3aece0cfba4bc623263b9da756c1Author: John Stiles <johnstiles@google.com>Date:   Fri Aug 27 12:37:27 2021 -0400    Fix assertion when calling a built-in function at global scope.        The fuzzer invented a much more elaborate example, but I was able to    winnow it down to a simple otherwise-normal test case. This also fixes    a latent DSL bug; DSL functions were not updating the list of referenced    intrinsics, so the compiler might emit finished programs that called    built-in functions that didn't exist in the code.        Change-Id: I095bb566b9db9f87cbe9460732c300b7973eb112    Bug: oss-fuzz:37659    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/442325    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>    Commit-Queue: John Stiles <johnstiles@google.com>	37659	gn/sksl_tests.gni;src/sksl/SkSLIRGenerator.cpp;src/sksl/SkSLIRGenerator.h;src/sksl/SkSLRehydrator.cpp;src/sksl/codegen/SkSLSPIRVCodeGenerator.cpp;src/sksl/dsl/DSLFunction.cpp;src/sksl/ir/SkSLFunctionDefinition.h	64;0;640;759;776;850;868;879;954;1287;230;260;279;3542;89;16;23;0
skia-20210827-537c8a7ad5	537c8a7ad5	bb8cf5804c	Fri Aug 27 16:27:15 2021 +0000	Fix assertion when returning intermediate types.	commit 537c8a7ad56db045632966af55fe98a701bd6409Author: John Stiles <johnstiles@google.com>Date:   Fri Aug 27 11:07:09 2021 -0400    Fix assertion when returning intermediate types.        The fuzzer managed to trigger an assertion by returning an invalid type    from a void function. We were neglecting to clear out the expression    when reporting it as invalid, leaving it for `checkValid` to find later.        Change-Id: Icc152c867a3316fe994967e192601fb4d10da98f    Bug: oss-fuzz:37704    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/442678    Commit-Queue: John Stiles <johnstiles@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Ethan Nicholas <ethannicholas@google.com>	37704	resources/sksl/errors/ReturnFromVoid.sksl;src/sksl/SkSLIRGenerator.cpp;tests/sksl/errors/ReturnFromVoid.glsl	1 +1;801;1
skia-20210827-bb8cf5804c	bb8cf5804c	43a157cf27	Fri Aug 27 14:01:21 2021 +0000	Fix invalid variable ref-kind discovered by fuzzer.	commit bb8cf5804c83b99aebbba102dc792fcaa89f9d2fAuthor: John Stiles <johnstiles@google.com>Date:   Thu Aug 26 23:34:59 2021 -0400    Fix invalid variable ref-kind discovered by fuzzer.        No-op arithmetic simplification will convert expressions like `x += 0`    to `x`. When making this simplification, we will also downgrade the ref-    kind of `x` from "write" to "read" since the new expression is no longer    an assignment.        The fuzzer discovered that the ref-kind downgrade was too aggressive,    and would also traverse into nested subexpressions and downgrade them    as well. That is, for `x[y=z] += 0` would convert both `x` and `y`    into "read" references, which is incorrect; `y` is still being written    to.        The fuzzer managed to turn this mistake into an assertion by leveraging    a separate optimization. It added a leading, side-effect-less comma    expression for us to detect as worthless and eliminate. In doing so, we    clone the expression with the busted ref-kind, triggering an assertion.        Change-Id: I42fc31f6932f679ae875e2b49db2ad2f4e89e2cb    Bug: oss-fuzz:37677    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/442536    Auto-Submit: John Stiles <johnstiles@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	37677	gn/sksl_tests.gni;src/sksl/SkSLAnalysis.cpp;src/sksl/SkSLAnalysis.h;src/sksl/SkSLConstantFolder.cpp;src/sksl/SkSLIRGenerator.cpp;src/sksl/SkSLInliner.cpp;src/sksl/ir/SkSLBinaryExpression.cpp;src/sksl/ir/SkSLFunctionCall.cpp;src/sksl/ir/SkSLPostfixExpression.cpp;src/sksl/ir/SkSLPrefixExpression.cpp	355;0;288;808;91;293;302;1420;162;88;864;22;157;0;0;0
skia-20210825-43ac7e6315	43ac7e6315	b61014d310	Wed Aug 25 17:52:50 2021 +0000	Fix parsing error with SPIR-V negating a uint.	commit 43ac7e631561c0f530442743d14eafbf37241248Author: John Stiles <johnstiles@google.com>Date:   Wed Aug 25 12:43:22 2021 -0400    Fix parsing error with SPIR-V negating a uint.        Our SPIR-V code generator did not implement support for negating a uint.    However, this is something that GLSL allows (as does the rest of SkSL).    I checked glslang and it uses OpSNegate here. The SPIR-V docs indicate    that OpSNegate allows any type of integer, and the validator lets it    pass, so we now use OpSNegate here as well.        http://screen/33mkq92uxAT5Xu8    http://screen/4YBTh3gCWz8eZx7    http://screen/388HtXyytcN5vLZ        Change-Id: I8c142018fd5e162dcd051abe1bc5d69a6e034794    Bug: oss-fuzz:37627    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/441880    Reviewed-by: Brian Osman <brianosman@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Commit-Queue: John Stiles <johnstiles@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>	37627	gn/sksl_tests.gni;src/sksl/codegen/SkSLSPIRVCodeGenerator.cpp	187;0;2796;0
skia-20210825-31c87103c6	31c87103c6	2d3f5e8f25	Wed Aug 25 17:27:12 2021 +0000	Fix parsing error with structs containing arrays.	commit 31c87103c6d367ca49e1c7a26566c62a16ba26fbAuthor: John Stiles <johnstiles@google.com>Date:   Wed Aug 25 12:01:21 2021 -0400    Fix parsing error with structs containing arrays.        Previously, a struct containing a vardecl with multiple declarations    would interpret arrays incorrectly. An array would be applied to ALL    variables in the decl after its initial appearance. That is,    `int w, x[10], y, z;` would be interpreted as    `int w, x[10], y[10], z[10];`.        This is now fixed and our test case runs as expected.        Change-Id: I5b4a617c58cdfb83face651effd42770a1f68638    Bug: oss-fuzz:37622    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/441879    Commit-Queue: John Stiles <johnstiles@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	37622	src/sksl/SkSLParser.cpp;tests/SkSLTest.cpp;tests/sksl/shared/StructArrayFollowedByScalar.asm.frag;tests/sksl/shared/StructArrayFollowedByScalar.glsl;tests/sksl/shared/StructArrayFollowedByScalar.metal	473;485;284;1;1;1
skia-20210824-d77dda5bd5	d77dda5bd5	f248b35d75	Tue Aug 24 14:44:43 2021 +0000	Fix inliner bug discovered by fuzzer.	commit d77dda5bd55b3e2b5fb21de30e50050469764c7eAuthor: John Stiles <johnstiles@google.com>Date:   Tue Aug 24 09:59:34 2021 -0400    Fix inliner bug discovered by fuzzer.        The inliner contained a type error when attempting to inline a function    that takes an array as input. The scratch copy of the array was created    as `float[123] var;` instead of `float var[123];`. This led to an    assertion in VarDeclaration::Make.        Change-Id: I5128fe71462bb59a015a7b4e59c1a74800828b16    Bug: oss-fuzz:37466    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/441576    Commit-Queue: John Stiles <johnstiles@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Ethan Nicholas <ethannicholas@google.com>	37466	gn/sksl_tests.gni;src/sksl/SkSLInliner.cpp	351;0;608;0;0;0
skia-20210823-3f37322d71	3f37322d71	7cba20f80c	Mon Aug 23 19:28:29 2021 +0000	Fix const function-parameter assertion discovered by fuzzer.	commit 3f37322d71b4c4772719045c29fb023bd5ca4e62Author: John Stiles <johnstiles@google.com>Date:   Mon Aug 23 13:52:17 2021 -0400    Fix const function-parameter assertion discovered by fuzzer.        During constant-folding, we baked in an assertion stating that any    const-typed variable reference ought to have an initial value, because    you can't declare a const variable without assigning a value. However,    function parameters are an exception to this rule! They are variable    references and are allowed to be const, but will not have an initial    value. (In this case, `const` just means you can't alter the value.)        In this case, all we needed to do was remove the assertion; we already    treated this case defensively and with the appropriate care.        Change-Id: I61242c6d08c59886c6992898f195771e6334f2b4    Bug: oss-fuzz:37465    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/441239    Commit-Queue: John Stiles <johnstiles@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	37465	gn/sksl_tests.gni;resources/sksl/shared/Functions.sksl;src/sksl/SkSLConstantFolder.cpp;tests/sksl/shared/Functions.glsl;tests/sksl/shared/Functions.metal	98;0;2;213;0;2;16
skia-20210823-d361690358	d361690358	e127304700	Mon Aug 23 17:33:42 2021 +0000	Fix diagonal-matrix assertion discovered by fuzzer.	commit d3616903588068b441b952af7f227f28b56978c4Author: John Stiles <johnstiles@google.com>Date:   Mon Aug 23 12:40:32 2021 -0400    Fix diagonal-matrix assertion discovered by fuzzer.        This was another place where we needed to use    `getConstantSubexpression` to rebuild vectors/matrices; it is a more    robust approach than trying handle each ctor type individually. The    fuzzer found an edge case with double-casting matrices to vectors that    fell through the cracks with the original approach.        In adding additional tests, I also found a case that the constant-folder    seems to ignore, `bool4(x,x,x,x) == bool4(x)`. This does fold for ints    and floats, so this ought to be fixable in a followup, but it's not a    big deal either way; this is very unlikely to occer in real code.        Change-Id: I4d577c87ef7049306685ca95250ecdf93b1dbc06    Bug: oss-fuzz:37464    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/441238    Commit-Queue: John Stiles <johnstiles@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	37464	resources/sksl/shared/MatrixToVectorCast.sksl;resources/sksl/shared/VectorToMatrixCast.sksl;src/sksl/ir/SkSLConstructorCompoundCast.cpp;src/sksl/ir/SkSLConstructorDiagonalMatrix.cpp;tests/sksl/shared/MatrixToVectorCast.asm.frag;tests/sksl/shared/MatrixToVectorCast.glsl;tests/sksl/shared/MatrixToVectorCast.metal	10;9;20;30;17;65;119;208;9;23
skia-20210823-8f633ef2b5	8f633ef2b5	e312532442	Mon Aug 23 14:23:46 2021 +0000	Fix assertion discovered by fuzzer.	commit 8f633ef2b5f72872d89445fc3ce3981f0e49756dAuthor: John Stiles <johnstiles@google.com>Date:   Sat Aug 21 17:13:11 2021 -0400    Fix assertion discovered by fuzzer.        We now stop processing a var-declaration if its array-size expression is    invalid. Previously, we'd pass a null array-size expression into    convertVar, which would assert (but would fail cleanly afterwards).        Change-Id: I976f3326e32afbc7045a86d73c0dcb28f418a6f4    Bug: oss-fuzz:37457    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/441079    Auto-Submit: John Stiles <johnstiles@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	37457	gn/sksl_tests.gni;src/sksl/SkSLIRGenerator.cpp	96;0;411;0
skia-20210806-699736b063	699736b063	e3ae968f5f	Fri Aug 6 13:00:22 2021 +0000	Fix crash in PipelineStageCodeGenerator with recursive calls.	commit 699736b063c4074ee727eb155d03c01ae9dfb32aAuthor: John Stiles <johnstiles@google.com>Date:   Thu Aug 5 16:35:27 2021 -0400    Fix crash in PipelineStageCodeGenerator with recursive calls.        We assumed that any time a function call was emitted, we could look up    the mangled function name in our function-name map and it would exist.    This was not true for self-recursive calls, as the function name is    only added to the map after the function is emitted.        We now use the `functionName()` accessor to retrieve the function name,    which will synthesize a mangled name and add it to the map if it is    missing.        (It looks like recursive calls will not actually work properly, though,    because `writeFunctionPrototype` doesn't emit any code, and the SkVM    compiler can't handle recursion at all.)        Change-Id: I021f5009709d9eed8306eb71cb7f42cbc4c29ae9    Bug: oss-fuzz:36655    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/437117    Auto-Submit: John Stiles <johnstiles@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>    Reviewed-by: Ethan Nicholas <ethannicholas@google.com>	36655	src/sksl/codegen/SkSLPipelineStageCodeGenerator.cpp	212;316;325
skia-20210805-4cb0c37c96	4cb0c37c96	9ae6ea0711	Thu Aug 5 21:59:26 2021 +0000	Fix undefined behavior in recursion detection.	commit 4cb0c37c96d4879f91df79af3d6025e7dae55e92Author: John Stiles <johnstiles@google.com>Date:   Thu Aug 5 15:54:34 2021 -0400    Fix undefined behavior in recursion detection.        We were performing lookups in fCallGraph using `operator[]` while    looping through fCallGraph via range-based for. `operator[]` will add    entries to the map if the key is not found. This happens if built-in    functions are called, such as `sin`, `cos`, `tan`, etc; this mutates    the call graph mid-loop, which causes unpredictable behavior. In    practice, this can occasionally cause a rehash, which reorders the hash    map and causes items to be skipped over or checked twice.        This flaw meant that over many repeated runs, recursion was occasionally    not detected, and compiling a program with recursion would succeed a    small percentage of the time. The PipelineStageCodeGenerator asserts and    then crashes when presented with such a program.        The fCallGraph is now held as a const pointer, which makes it    impossible to mutate, and lookups are done via .find() which are    non-mutating. Compiling the fuzzer-generated program 10,000 times now    succeeds.        Change-Id: I6915fcfa4a0b1e9f86e5eb4ffd053bc718aed9fb    Bug: oss-fuzz:36655    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/437096    Commit-Queue: John Stiles <johnstiles@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Ethan Nicholas <ethannicholas@google.com>	36655	src/sksl/SkSLAnalysis.cpp	684
skia-20210805-9ae6ea0711	9ae6ea0711	9dcbdbdb5e	Thu Aug 5 21:59:23 2021 +0000	Fix fuzzer-discovered error with swizzling matrices.	commit 9ae6ea0711b3b2bff4f7ab306625c32a82fbde99Author: John Stiles <johnstiles@google.com>Date:   Thu Aug 5 11:49:05 2021 -0400    Fix fuzzer-discovered error with swizzling matrices.        The optimization logic for swizzling a constructor assumed that every    argument to the constructor was a scalar or vector. When it was written,    this assumption was true. However, we recently added support for casting    mat2x2 to float4 which violates the assumption.        We now check every argument and do not attempt to optimize if a    non-scalar, non-vector arg is found.        Change-Id: Ia2b297bd62dfdf4af56712164fbc80c29c9611eb    Bug: oss-fuzz:36852    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/437017    Auto-Submit: John Stiles <johnstiles@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>    Reviewed-by: Ethan Nicholas <ethannicholas@google.com>	36852	gn/sksl_tests.gni;src/sksl/ir/SkSLSwizzle.cpp;tests/SkSLTest.cpp	344;0;68;344;259;0;0;0
skia-20210805-ded41aafb2	ded41aafb2	1c512239ff	Thu Aug 5 21:44:16 2021 +0000	Fix fuzzer-discovered error with SPIR-V interface arrays.	commit ded41aafb2e476aa46ddce025dd48e7a30d23ab7Author: John Stiles <johnstiles@google.com>Date:   Thu Aug 5 12:19:35 2021 -0400    Fix fuzzer-discovered error with SPIR-V interface arrays.        OSSFuzz discovered a minor variation of oss-fuzz:36770 which tickled a    different bug in SPIR-V RTFlip handling; we did not properly handle the    case where the InterfaceBlock is an array. SPIR-V does not support this    at all, but the IRGenerator allows it, and we don't detect it an an    error until later in the compilation process.        Change-Id: I80bd67a13dad878717dc122462132a2ed675532d    Bug: oss-fuzz:36850    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/437018    Auto-Submit: John Stiles <johnstiles@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>    Reviewed-by: Ethan Nicholas <ethannicholas@google.com>	36770	gn/sksl_tests.gni;src/sksl/codegen/SkSLSPIRVCodeGenerator.cpp	182;0;3036;0
skia-20210802-d7437eec2e	d7437eec2e	4916c318fd	Mon Aug 2 17:13:50 2021 +0000	Fix for fuzzer-discovered error in SPIR-V with RTFlip.	commit d7437eec2e9718eda8c8f5cb94ddcef1005c0bfbAuthor: John Stiles <johnstiles@google.com>Date:   Mon Aug 2 11:56:16 2021 -0400    Fix for fuzzer-discovered error in SPIR-V with RTFlip.        SPIR-V code generation synthesizes some extra variables that don't    actually exist in the Program. Checking the ProgramUsage of these    variables would fail; ProgramUsage::get doesn't know about these    variables, so it asserts (and would consider them as dead even if it    didn't assert). We now track our SPIR-V bonus variables in a separate    set, and always report them as live.        Change-Id: If2f681470654025abf7ca4b3ec8126de2eb01297    Bug: oss-fuzz:36770    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/435625    Commit-Queue: John Stiles <johnstiles@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	36770	gn/sksl_tests.gni;src/sksl/codegen/SkSLSPIRVCodeGenerator.cpp;src/sksl/codegen/SkSLSPIRVCodeGenerator.h	340;0;2079;2117;3064;3109;3133;3628;3674;3713;11;443;503;0;0;0
skia-20210729-d340042cd6	d340042cd6	58920bbdca	Thu Jul 29 15:07:51 2021 +0000	Fix assertion when swizzling literals.	commit d340042cd68cc84d8f3790c27d02f6d08e9abb55Author: John Stiles <johnstiles@google.com>Date:   Thu Jul 29 10:14:31 2021 -0400    Fix assertion when swizzling literals.        The fuzzer generated the expression `(6).xx`, which triggered a    type-checking assertion. This swizzle was otherwise harmless.        Change-Id: Icb12f93fe3f6d88265d67e689ceb85cf1085c9e8    Bug: oss-fuzz:36655    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/434464    Commit-Queue: John Stiles <johnstiles@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	36655	src/sksl/ir/SkSLConstructorSplat.cpp;src/sksl/ir/SkSLSwizzle.cpp	14;382
skia-20210716-67b1b2a105	67b1b2a105	3339e570a1	Fri Jul 16 19:38:42 2021 +0000	Fix fuzzer-discovered undefined behavior with NaN.	commit 67b1b2a1054540a30f4459a2a1b5dfc2ba0829aaAuthor: John Stiles <johnstiles@google.com>Date:   Thu Jul 15 22:28:51 2021 -0400    Fix fuzzer-discovered undefined behavior with NaN.        The fuzzer passed in a point with a Y coordinate of NaN; this eventually    caused an integer overflow while attempting to calculate    `SK_MaxS32FitsInFloat << 2`. We now detect the NaN and return false.        Change-Id: I79e51190006bce5e2c42935e1075261a3e16aa6d    Bug: oss-fuzz:36198    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/429099    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Mike Reed <reed@google.com>    Commit-Queue: John Stiles <johnstiles@google.com>	36198	src/utils/SkDashPath.cpp	248
skia-20210610-9c19b9f1ff	9c19b9f1ff	668496b11c	Thu Jun 10 14:32:10 2021 +0000	Fix for fuzzer-discovered out-of-bounds array access.	commit 9c19b9f1ff23842c4e035b9ab8c5076b64aace39Author: John Stiles <johnstiles@google.com>Date:   Thu Jun 10 09:43:35 2021 -0400    Fix for fuzzer-discovered out-of-bounds array access.        Change-Id: I4280b5710dd8749ba766ba74d7a8886bc4e024bb    Bug: oss-fuzz:35124    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/417200    Reviewed-by: Brian Osman <brianosman@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Commit-Queue: John Stiles <johnstiles@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>	35124	resources/sksl/runtime_errors/InvalidBlendMain.rtb;resources/sksl/runtime_errors/InvalidColorFilterMain.rtcf;resources/sksl/runtime_errors/InvalidShaderMain.rts;src/sksl/ir/SkSLFunctionDeclaration.cpp;tests/sksl/runtime_errors/InvalidBlendMain.skvm;tests/sksl/runtime_errors/InvalidColorFilterMain.skvm;tests/sksl/runtime_errors/InvalidShaderMain.skvm	1;1;1;69;98;4;3;2
skia-20210419-8e2a84be3d	8e2a84be3d	db2326b46a	Mon Apr 19 15:55:04 2021 +0000	Fix for fuzzer-discovered error in SPIR-V compilation.	commit 8e2a84be3dee097847866b77cbfbbb094fd5d612Author: John Stiles <johnstiles@google.com>Date:   Mon Apr 19 09:35:38 2021 -0400    Fix for fuzzer-discovered error in SPIR-V compilation.        Unused InterfaceBlocks were not added to the ProgramUsage map. The    ProgramUsageVisitor now makes sure to account for them during its    initial scan.        Change-Id: If3afac8e954c5b685ddc6b63b0f771d8c0b8f207    Bug: oss-fuzz:33405    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/398016    Auto-Submit: John Stiles <johnstiles@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	33405	gn/sksl_tests.gni;src/sksl/SkSLAnalysis.cpp;src/sksl/codegen/SkSLSPIRVCodeGenerator.cpp	237;0;210;3521;3561;0
skia-20210412-d02615698e	d02615698e	e14d72500f	Mon Apr 12 16:40:31 2021 +0000	Fix assertion when performing type-coercion with enums.	commit d02615698ec193f3219077fa6799318538fd29faAuthor: John Stiles <johnstiles@google.com>Date:   Mon Apr 12 11:37:14 2021 -0400    Fix assertion when performing type-coercion with enums.        In http://review.skia.org/393397, I replaced a Constructor::Convert call    with a call directly to ConstructorCompoundCast::Make.        This worked fine if the input expression was actually a compound, but    if it was not, the code would assert/crash. The fuzzer detected this    error right away. (Enums are not considered to be a scalar, a vector or    a matrix in SkSL.)        Change-Id: Ie0df4c5771ff4f4d8f5251d4703e9c3516b6baad    Bug: oss-fuzz:33113    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/395720    Commit-Queue: John Stiles <johnstiles@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	33113	gn/sksl_tests.gni;src/sksl/ir/SkSLType.cpp	110;0;269;0
skia-20210402-ffeee9bfde	ffeee9bfde	3144a1e698	Fri Apr 2 20:42:35 2021 +0000	Fix lost precision case in SkComputeRadialSteps.	commit ffeee9bfdeba868c53badee8285d37576dca9adeAuthor: Jim Van Verth <jvanverth@google.com>Date:   Fri Apr 2 15:42:35 2021 -0400    Fix lost precision case in SkComputeRadialSteps.        With large offsets, we can end up with a tiny change in angle at each    radial step, so that rotSin and rotCos can get truncated to 0 and/or 1,    respectively. This means that we won't sweep the entire radial distance,    throwing future calculations off. Instead in this case we should fail.        Bug: oss-fuzz:21826    Change-Id: I24f5b1ac315a3697d2ea00ee4bd73652ec3e16dd    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/392377    Commit-Queue: Jim Van Verth <jvanverth@google.com>    Reviewed-by: Kevin Lubick <kjlubick@google.com>	21826	src/utils/SkPolyUtils.cpp	494
skia-20210329-fabed8bb79	fabed8bb79	02f72022c5	Mon Mar 29 14:35:09 2021 +0000	Fix fuzzer-discovered error with variable declarations.	commit fabed8bb79ce17af2988dd38e51a2fd59c48d6deAuthor: John Stiles <johnstiles@google.com>Date:   Mon Mar 29 09:38:59 2021 -0400    Fix fuzzer-discovered error with variable declarations.        As soon as a single VarDeclaration is successfully created, its Variable    is added to the current symbol table. However, if a variable-declaration    line declared several variables in a row, we would stop if ANY of the    declarations contained an error and discard the entire statement, but    would continue processing the rest of the program. This left us in a    position where some Variables existed in the SymbolTable with valid,    reachable names, but their corresponding VarDeclaration statement had    been thrown away as erroneous. Since Variables point back to    VarDeclarations for their initialValues, this gave us a stale pointer.    Any future reference to that variable name which could trigger an    access to its initialValue would read from this dead pointer.        This CL fixes the conversion of VarDeclarations so that we no longer    throw away any VarDeclarations associated with a successfully-parsed    Variable.        Change-Id: If8ec3c160933e48a0e1f36414234b3a849d8978c    Bug: oss-fuzz:32587    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/389636    Commit-Queue: John Stiles <johnstiles@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	32587	gn/sksl_tests.gni;src/sksl/SkSLIRGenerator.cpp	142;0;457;0
skia-20210316-f10eff363b	f10eff363b	3230255e06	Tue Mar 16 16:02:03 2021 +0000	Fix misdetection of dead global variables.	commit f10eff363bd19d76c7714b0af2668c292d94255aAuthor: John Stiles <johnstiles@google.com>Date:   Tue Mar 16 10:57:55 2021 -0400    Fix misdetection of dead global variables.        A global variable should be considered "dead" if it's never written and    never read. The previous code checked if it was never written OR never    read, which is not the same.        This would generate GLSL/Metal that didn't compile. In SPIR-V, it would    SkASSERT, then crash, during codegen. The fuzzer was able to detect the    SPIR-V issue, but it was wrong in all three cases.        Change-Id: Id59a2499eb5baa3839b93826bfbc24191bfd490b    Bug: oss-fuzz:32005    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/385280    Commit-Queue: John Stiles <johnstiles@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	32005	resources/sksl/shared/Assignment.sksl;src/sksl/SkSLAnalysis.cpp;tests/sksl/shared/Assignment.asm.frag;tests/sksl/shared/Assignment.glsl;tests/sksl/shared/Assignment.metal	7;22;610;5;17;30;52;67;82;99;108;139;7;31;15;42
skia-20210301-0c2d14a1b9	0c2d14a1b9	4636ac68de	Mon Mar 1 20:06:50 2021 +0000	Fix fuzzer-discovered error with inlining.	commit 0c2d14a1b976b3d7c543b17730ef120350101b62Author: John Stiles <johnstiles@google.com>Date:   Mon Mar 1 10:08:08 2021 -0500    Fix fuzzer-discovered error with inlining.        In http://review.skia.org/375776, an optimization was added to the    Inliner, causing it to skip generation of unnecessary temporary    variables. The fuzzer immediately discovered a flaw in this logic: the    "unnecessary" variable was actually used in the rare case that a    function failed to actually return a value. The inliner didn't detect    this case. Of course, this isn't a valid program either, so now we    report the error and cleanly fail.        Change-Id: I1f201cfd33f45cace3be93765a4e214e43a46e69    Bug: oss-fuzz:31469, oss-fuzz:31525    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/377101    Reviewed-by: Ethan Nicholas <ethannicholas@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>	31469	gn/sksl_tests.gni;src/sksl/SkSLInliner.cpp	144;0;760;1198;0
skia-20210226-bb8542f086	bb8542f086	ea5822ea27	Fri Feb 26 17:30:26 2021 +0000	Fix fuzzer-discovered error with ~ prefix on literals.	commit bb8542f08685e649bfecca4a9ec462b34509ef1aAuthor: John Stiles <johnstiles@google.com>Date:   Fri Feb 26 11:32:06 2021 -0500    Fix fuzzer-discovered error with ~ prefix on literals.        The expression `~123` was making a PrefixExpression of type $intLiteral.    It should be converted to type `int` when the ~ prefix is applied.        This change also changes the output from oss-fuzz:27614. Both programs    are essentially nonsense expressions with no real behavior, so this is    fine.        Change-Id: I586be149ce95136fabee72fdd3473814d54948cf    Bug: oss-fuzz:31410    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/376620    Commit-Queue: John Stiles <johnstiles@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	27614	gn/sksl_tests.gni;src/sksl/SkSLIRGenerator.cpp;tests/sksl/shared/Ossfuzz27614.asm.frag;tests/sksl/shared/Ossfuzz27614.glsl;tests/sksl/shared/Ossfuzz27614.metal	135;379;0;2160;0;0;1;1;1
skia-20210211-1b91c0e29b	1b91c0e29b	53ab360418	Thu Feb 11 17:52:43 2021 +0000	Fix use-after-free discovered by the fuzzer.	commit 1b91c0e29bc802b515f509d6a0e9396f2318b066Author: John Stiles <johnstiles@google.com>Date:   Thu Feb 11 11:43:09 2021 -0500    Fix use-after-free discovered by the fuzzer.        The optimization which replaces unnecessarily nested constructors is    creating a new constructor from whole cloth, obliterating the original    constructor and its arguments. This can invalidate the definition map.    For now, this is fixed by forcing a rescan when this optimization is    applied.        Change-Id: I8a46bccf3b6422282eaf95409cd4fa50b8ad3187    Bug: oss-fuzz:29994    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/369324    Commit-Queue: John Stiles <johnstiles@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Ethan Nicholas <ethannicholas@google.com>	29994	src/sksl/SkSLCompiler.cpp	945
skia-20210126-e3a91cf31c	e3a91cf31c	dac139abd9	Tue Jan 26 17:08:59 2021 +0000	Fix fuzzer-discovered error with variable scoping.	commit e3a91cf31c3680d11d3678150a33024fe36eb577Author: John Stiles <johnstiles@google.com>Date:   Tue Jan 26 10:13:58 2021 -0500    Fix fuzzer-discovered error with variable scoping.        In GLSL and SkSL, control statements don't require explicit braces    around single-statement children. That is, the `match = true` child    statement here doesn't need to be braced.            if (condition) match = true;        Because there are no braces, we never create a Block or a dedicated    SymbolTable here.  This is normally not a problem, but the fuzzer    discovered that it can dump things into the symbol table inside a child    statement:            if (condition) int newSymbol;        This becomes problematic because the symbol name now outlives its block.    This means `newSymbol` can be referred to later, which should be illegal    (and can cause the optimizer to blow up since the structure is bogus).        There doesn't seem to be any reason to allow this code to compile; the    user can add an explicit scope here to make it reasonable, and it's    (almost) meaningless to declare a symbol that's instantly going to fall    out of scope. This code is now rejected with an error message.        Change-Id: I44778e5b59652d345b10eecd4c88efbf7d86a5e0    Bug: oss-fuzz:29849    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/358960    Reviewed-by: Ethan Nicholas <ethannicholas@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>	29849	gn/sksl_tests.gni;src/sksl/SkSLIRGenerator.cpp;src/sksl/SkSLIRGenerator.h	121;156;0;0;0;0;0;150;567;655;685;261;0;0;0;0;0
skia-20210126-76389b7d24	76389b7d24	3419dda058	Tue Jan 26 00:47:13 2021 +0000	Fix fuzzer-discovered errors in SkSL parser.	commit 76389b7d2444324a270a9eea0e1b415ee90f97ecAuthor: John Stiles <johnstiles@google.com>Date:   Mon Jan 25 13:49:05 2021 -0500    Fix fuzzer-discovered errors in SkSL parser.        The previous change caused varDeclarations() to sometimes return an    expression-statement. This only made sense in the context of being    called from Parser::statement(). Other places which called    varDeclarations() expect vardecls and nothing else.        Change-Id: I562657cadfa20dcd77b527f2dc43dca0c6bf389f    Bug: oss-fuzz:29845    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/358528    Reviewed-by: Ethan Nicholas <ethannicholas@google.com>    Commit-Queue: John Stiles <johnstiles@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>	29845	gn/sksl_tests.gni;src/sksl/SkSLParser.cpp;src/sksl/SkSLParser.h	120;0;531;1119;172;0
skia-20210115-6a1a98c313	6a1a98c313	5878ecef2f	Fri Jan 15 15:11:00 2021 +0000	Fix for fuzzer-discovered use-after-free.	commit 6a1a98c313bfbe24fa140b3ccba0af23676d5beaAuthor: John Stiles <johnstiles@google.com>Date:   Thu Jan 14 18:35:34 2021 -0500    Fix for fuzzer-discovered use-after-free.        The inliner discovered that when a binary expression is inlined, its    type is not cloned into the destination's SymbolTable. This meant that    when the inlined-from function was later dead-stripped, the type pointer    would become dangling. Did a quick pass over inlineExpression and    inlineStatement and ensured that types are always copied.        Also found that `copy_if_needed` was making a copy of eligible types    each time one was encountered, instead of making one copy and reusing    it. This is fixed as well.        Change-Id: Iee3259ab038dfb04034bf0110af1909ccffec3de    Bug: oss-fuzz:29444    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/354219    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>    Commit-Queue: John Stiles <johnstiles@google.com>	29444	gn/sksl_tests.gni;src/sksl/SkSLInliner.cpp;src/sksl/ir/SkSLSymbolTable.h	340;158;343;356;372;520;566;36;53;124;0;0;0;0
skia-20210114-4ea46b71ac	4ea46b71ac	4a2d651243	Thu Jan 14 19:03:25 2021 +0000	[svg] Fix null text context crash	commit 4ea46b71ac0fb08e989d0fb19ebb2db32c8a256bAuthor: Florin Malita <fmalita@chromium.org>Date:   Thu Jan 14 12:17:36 2021 -0500    [svg] Fix null text context crash        The input may contain invalid text constructs lacking a root <text> node    e.g.  <svg><tspan>foo</tspan></svg>        Since we don't perform content model validation at the moment and text    contexts are only instantiated for root nodes, we must guard against    this case at render time.        Bug: oss-fuzz:29558    Change-Id: I7e39c1c4048900ce5becb3549802dc66bb1d242b    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/353711    Commit-Queue: Florin Malita <fmalita@chromium.org>    Commit-Queue: Florin Malita <fmalita@google.com>    Reviewed-by: Tyler Denniston <tdenniston@google.com>	29558	modules/svg/src/SkSVGText.cpp	506
skia-20210108-d2f51b1806	d2f51b1806	cb3bcf88e3	Fri Jan 8 13:03:02 2021 +0000	Fix fuzzer-discovered optimizer crash.	commit d2f51b18065a1ed93a4195afb8852b12e2fae1cdAuthor: John Stiles <johnstiles@google.com>Date:   Thu Jan 7 18:12:31 2021 -0500    Fix fuzzer-discovered optimizer crash.        The CFG/definition map are no longer valid after replacing an expression    entirely. Swizzle-of-swizzle optimization was another case where the    optimizer would replace an expression wholesale, but failed to set the    needs-rescan flag.        Change-Id: Ida0363d738cd1d3ac2a48c824aa04065a7ca16b7    Bug: oss-fuzz:29085    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/351776    Auto-Submit: John Stiles <johnstiles@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>    Reviewed-by: Ethan Nicholas <ethannicholas@google.com>	29085	gn/sksl_tests.gni;src/sksl/SkSLCFGGenerator.cpp;src/sksl/SkSLCompiler.cpp;src/sksl/SkSLIRGenerator.cpp	122;80;1133;1863;0;0
skia-20201223-e64855fbfa	e64855fbfa	20fad32064	Wed Dec 23 18:52:47 2020 +0000	Fix fuzzer-discovered crash with negated swizzles.	commit e64855fbfaf4a629f7eaa10ab9216690b5fc715fAuthor: John Stiles <johnstiles@google.com>Date:   Wed Dec 23 12:56:14 2020 -0500    Fix fuzzer-discovered crash with negated swizzles.        This CL updates `compareConstant` to fail gracefully instead of    aborting if the passed-in types don't match. This lets us call    `compareConstant` without checking types first.        Change-Id: Id2acdbdf700e64bcb24825cdad2c0e000992e8cb    Bug: oss-fuzz:28904    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/347038    Commit-Queue: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	28904	gn/sksl_tests.gni;src/sksl/SkSLIRGenerator.cpp;src/sksl/ir/SkSLBoolLiteral.h;src/sksl/ir/SkSLConstructor.cpp;src/sksl/ir/SkSLConstructor.h;src/sksl/ir/SkSLExpression.h;src/sksl/ir/SkSLFloatLiteral.h;src/sksl/ir/SkSLIntLiteral.h;src/sksl/ir/SkSLPrefixExpression.h	336;1791;1955;45;30;41;56;99;104;56;51;95;0;0;0;0
skia-20201222-a60ac0c45c	a60ac0c45c	e38beddbbf	Tue Dec 22 14:38:52 2020 +0000	Fix for fuzzer-discovered crash with swizzles.	commit a60ac0c45c7fb940d348c72c6c4f9a19548ad569Author: John Stiles <johnstiles@google.com>Date:   Tue Dec 22 08:59:51 2020 -0500    Fix for fuzzer-discovered crash with swizzles.        We need to rescan after optimizing away expressions that might exist    in the CFG/definition map, since we are rebuilding them from scratch and    not just stripping off excess parts from them.        Change-Id: I843a2ea3fc38428e7c0bd0e2bf7a7d41101345e3    Bug: oss-fuzz:28794    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/344972    Commit-Queue: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>	28794	gn/sksl_tests.gni;src/sksl/SkSLCFGGenerator.cpp;src/sksl/SkSLCompiler.cpp	332;106;114;129;1180;1305;0;0;0;0
skia-20201130-d7cc093f1f	d7cc093f1f	74ff1d668f	Mon Nov 30 18:37:05 2020 +0000	Fix ASAN error when inlining array constructor expressions.	commit d7cc093f1f33136964383b576d7ce60299eaa41aAuthor: John Stiles <johnstiles@google.com>Date:   Mon Nov 30 12:24:27 2020 -0500    Fix ASAN error when inlining array constructor expressions.        Constructors such as `float[2](0, 0)` add a type to the symbol table;    this type needs to be copied into the new symbol table if the    constructor is cloned by the inliner.        Change-Id: Ifa8d2dec87103c6223ce493e2201a904c14c2137    Bug: oss-fuzz:28050    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/339168    Auto-Submit: John Stiles <johnstiles@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	28050	gn/sksl_tests.gni;src/sksl/SkSLInliner.cpp;src/sksl/SkSLInliner.h	243;324;356;449;56;0;0;0;0
skia-20201130-21f5f450a4	21f5f450a4	dc75a97b80	Mon Nov 30 17:28:14 2020 +0000	Fix SPIR-V compilation error with arrays of samplers.	commit 21f5f450a4eec856ac69d3a3d86da4095f9b5141Author: John Stiles <johnstiles@google.com>Date:   Mon Nov 30 09:57:59 2020 -0500    Fix SPIR-V compilation error with arrays of samplers.        This CL addresses the root cause of the fuzzer issue, by checking for    LayoutIsSupported before getting the MemoryLayout of a type. However,    this array ought to be detected as an error everywhere, as samplers are    opaque types; at present, this code compiles without error in GLSL and    Metal. This is an issue for followup CLs.        GLSL's actual support for arrays of samplers is interesting and probably    too nuanced for us to try to emulate:        https://www.khronos.org/opengl/wiki/Data_Type_(GLSL)#Opaque_arrays        "Under GLSL version 3.30, Sampler arrays (the only opaque type 3.30    provides) can be declared, but they can only be accessed by compile-time    integral Constant Expressions. So you cannot loop over an array of    samplers, no matter what the array initializer, offset and comparison    expressions are.        Under GLSL 4.00 and above, array indices leading to an opaque value can    be accessed by non-compile-time constants, but these index values must    be dynamically uniform. The value of those indices must be the same    value, in the same execution order, regardless of any non-uniform    parameter values, for all shader invocations in the invocation group."        Change-Id: Ib382f5c3b563f996b3c8f1eb6b021b6d31fa9ce7    Bug: oss-fuzz:28107    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/339159    Commit-Queue: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>	28107	gn/sksl_tests.gni;src/sksl/SkSLMemoryLayout.h;src/sksl/SkSLMetalCodeGenerator.cpp;src/sksl/SkSLSPIRVCodeGenerator.cpp	180;8;142;1240;396;516;2715;0;0
skia-20201124-bc75ebb1af	bc75ebb1af	7512507050	Tue Nov 24 18:21:46 2020 +0000	Fix crash with boolean vectors in is_constant<T>.	commit bc75ebb1afc47a03574c02f1ff470949f1cf5b6dAuthor: John Stiles <johnstiles@google.com>Date:   Tue Nov 24 12:04:47 2020 -0500    Fix crash with boolean vectors in is_constant<T>.        Previously, we assumed that if a vector in `is_constant` was not made of    floats, it must be made of integers. This ignores that boolean vectors    also exist. The original code would abort when `getIVecComponent` was    called on a bool vector.        There is another bug here--arithmetic operators on bool types should be    disallowed entirely. That will be addressed in later CLs.        Change-Id: I78781d839abde9376917fd92f2fe6311a1a58b02    Bug: oss-fuzz:27808    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/338055    Auto-Submit: John Stiles <johnstiles@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	27808	gn/sksl_tests.gni;src/sksl/SkSLCompiler.cpp;src/sksl/ir/SkSLConstructor.cpp;src/sksl/ir/SkSLConstructor.h	84;663;103;75;98;0;0
skia-20201123-21a59d650d	21a59d650d	9a8cbe52e1	Mon Nov 23 17:02:21 2020 +0000	Fix double-negation of constant-value construcors.	commit 21a59d650dc8d2171cb779184af2c3a1c420c9baAuthor: John Stiles <johnstiles@google.com>Date:   Fri Nov 20 13:27:04 2020 -0500    Fix double-negation of constant-value construcors.        Previously, the code which calculated Constructor constant values    assumed that a constant-value PrefixExpression would always have an    operand of Constructor. It turns out that another valid case is multiple    PrefixExpressions nested within each other (representing repeated    negation). Updated the code to work regardless of the type of the prefix    operand.        Change-Id: Ic9bf54725ae59330ac817bc4ec7a64def384ab54    Bug: oss-fuzz:27663    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/337177    Auto-Submit: John Stiles <johnstiles@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	27663	gn/sksl_tests.gni;src/sksl/ir/SkSLConstructor.cpp;src/sksl/ir/SkSLPrefixExpression.h	115;63;87;103;119;85;0;0
skia-20201120-8c58899371	8c58899371	9dce4d081f	Fri Nov 20 14:07:03 2020 +0000	Fix fuzzer crash when casting between int and float.	commit 8c5889937172a4ce733dc904ddb3ca961eeed3daAuthor: John Stiles <johnstiles@google.com>Date:   Thu Nov 19 17:36:17 2020 -0500    Fix fuzzer crash when casting between int and float.        The fix submitted at http://review.skia.org/335868 did not support    casts. The fuzzer discovered this shortcoming right away.        Change-Id: I2f5166528cee41367348564d4e664476fd5704ff    Bug: oss-fuzz:27650    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/336656    Commit-Queue: Brian Osman <brianosman@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>	27650	gn/sksl_tests.gni;src/sksl/ir/SkSLConstructor.cpp	114;194;0;0
skia-20201118-d1d872905b	d1d872905b	1f71f433ff	Wed Nov 18 21:53:45 2020 +0000	Add fix for fuzzer-discovered crash with negated constructors.	commit d1d872905b0fefe103ae7c09d0447940715e4f32Author: John Stiles <johnstiles@google.com>Date:   Wed Nov 18 15:58:55 2020 -0500    Add fix for fuzzer-discovered crash with negated constructors.        This was found at https://oss-fuzz.com/testcase-detail/5155684475469824    but the associated oss-fuzz issue ID appears to be misdirected (it's    showing oss-fuzz:24498, an unrelated issue).        PrefixExpressions can return true for `isCompileTimeConstant` but did    not implement `compareConstant`; the fuzzer discovered this. Because    compile-time constants can only be compared if they are of the same    kind, this means that `compareConstant` is actually comparing a pair of    expressions that are both negated. These negations will just cancel    out, so `compareConstant` on a pair of PrefixExpressions can just call    `compareConstant` on the inner operand of each expression.        Change-Id: I7793e25314e6c8a74278b73299d310794baf71f4    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/335870    Commit-Queue: John Stiles <johnstiles@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>		src/sksl/ir/SkSLExpression.h;src/sksl/ir/SkSLPrefixExpression.h;tests/sksl/shared/VectorFolding.sksl;tests/sksl/shared/golden/VectorFolding.glsl;tests/sksl/shared/golden/VectorFolding.metal	105;85;15;18;26
skia-20201118-d0f712f3fe	d0f712f3fe	466e7e88d3	Wed Nov 18 21:01:15 2020 +0000	Add fix for fuzzer-discovered crash at oss-fuzz:27614.	commit d0f712f3fe9f9a7d0ef654ada5fdf08efcb116f1Author: John Stiles <johnstiles@google.com>Date:   Wed Nov 18 15:18:40 2020 -0500    Add fix for fuzzer-discovered crash at oss-fuzz:27614.        The fuzzer managed to create a test case which temporarily evaluates to    expression `half2(half(0.2)) + 2` as it is optimized. This requires a    bunch of temporary nonsense math as the IR Generator is attempting to    simplify as it goes; various attempts to remove terms from the fuzzer    test-case would cause it to stop reproducing the error.        Constructor::getVecComponent assumed that any constructor with a single    scalar argument would always implement `getConstantFloat` and    `getConstantInt`; however, constructors themselves did not actually    implement these methods. This meant that nesting a scalar constructor    inside a non-scalar constructor would abort when it tried to deduce the    value inside the inner constructor.        This has been fixed by implementing `getConstantFloat` and    `getConstantInt` for Constructors. These methods will assert if the    constructor has more than one argument or is a non-scalar type. This    should allow any number of nested constructors, e.g.    `half4(half(half(half(1))))` should recursively evaluate properly,    should we somehow generate this as an intermediate expression.        Change-Id: Iaee4284cba03974443cd7b5dccfd7909c1a5f3a6    Bug: oss-fuzz:27614    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/335868    Commit-Queue: John Stiles <johnstiles@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	27614	gn/sksl_tests.gni;src/sksl/ir/SkSLConstructor.cpp;src/sksl/ir/SkSLConstructor.h	228;193;112;0;0;0
skia-20201113-bfce87b06e	bfce87b06e	3e1b771ce4	Fri Nov 13 21:50:40 2020 +0000	Fix fuzzing error with duplicate function definitions.	commit bfce87b06e400ec62c2e0cee1c68c4a8fb4d1e9fAuthor: John Stiles <johnstiles@google.com>Date:   Thu Nov 12 16:03:23 2020 -0500    Fix fuzzing error with duplicate function definitions.        Without an early return, the inliner tries to inline a function inside    of itself, eating up gigabytes of memory before hitting its inline    threshold.        This normally wouldn't be possible because functions are meant to be    fully assembled before they're added to the list of ProgramElements, so    the inliner shouldn't find a function as a candidate to be inlined into    itself at all. However, the fuzzer found that an existing function    could be extended by re-declaring it; in this case, it is findable as    a ProgramElement and becomes inlinable.        Change-Id: I4c02a7b52e4b75151b75c94cb70dfadb8e4c9e6b    Bug: oss-fuzz:27442    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/334556    Auto-Submit: John Stiles <johnstiles@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>    Reviewed-by: Ethan Nicholas <ethannicholas@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	27442	src/sksl/SkSLIRGenerator.cpp	1042
skia-20201104-95acbbc3c9	95acbbc3c9	6c88ea1278	Wed Nov 4 22:17:53 2020 +0000	Fix crash when comparing against a negated constant vector.	commit 95acbbc3c950d2f2699688760bb0a648e4ee8760Author: John Stiles <johnstiles@google.com>Date:   Wed Nov 4 16:23:26 2020 -0500    Fix crash when comparing against a negated constant vector.        This CL solves the fuzzer crash. Constant propagation of the negative    sign into the vector will be investigated in a followup CL.        This CL also adds a few cleanups into IRGenerator::constantFold.        Change-Id: If73a4fe2a5777265e7d43cc4f482653a38cb59af    Bug: oss-fuzz:26830, oss-fuzz:26789    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/332261    Commit-Queue: John Stiles <johnstiles@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>    Reviewed-by: Ethan Nicholas <ethannicholas@google.com>	26830	src/sksl/SkSLIRGenerator.cpp;tests/sksl/shared/golden/NegatedVectorLiteral.glsl;tests/sksl/shared/golden/NegatedVectorLiteral.metal	1726;1742;1753;1814;1842;1872;1;1
skia-20201103-7d3f089e58	7d3f089e58	28eb592735	Tue Nov 3 17:59:02 2020 +0000	Fix use-after-free error discovered by the fuzzer.	commit 7d3f089e581145465da30bbe8ca4fcff9c489333Author: John Stiles <johnstiles@google.com>Date:   Tue Nov 3 11:35:01 2020 -0500    Fix use-after-free error discovered by the fuzzer.        When eliminating a CFG node, we now flag its exit nodes; if our    optimization pass reaches one of those flagged nodes, we stop the    current optimization process in its tracks and initiate a rescan.        We do NOT recursively mark the exits of the exit nodes, so this fix is    reliant on the CFG being ordered in a non-chaotic fashion, but in    practice this seems to be sufficient for the CFGs we generate today.        Change-Id: I892805361c5f4297e02146f37a759dfda83f5488    Bug: oss-fuzz:26942    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/331597    Commit-Queue: John Stiles <johnstiles@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	26942	src/sksl/SkSLCFGGenerator.cpp;src/sksl/SkSLCompiler.cpp;src/utils/SkBitSet.h;tests/BitSetTest.cpp;tests/sksl/shared/golden/DeadIfStatement.glsl;tests/sksl/shared/golden/DeadIfStatement.metal	58;1456;1463;12;42;51;1;1
skia-20201030-869cdefdd1	869cdefdd1	30e327e19e	Fri Oct 30 19:11:31 2020 +0000	Fix unknown-identifier issue discovered by fuzzer.	commit 869cdefdd1ae2da9b4821079498f829e0289fe1fAuthor: John Stiles <johnstiles@google.com>Date:   Fri Oct 30 14:24:24 2020 -0400    Fix unknown-identifier issue discovered by fuzzer.        This error was caused by an unbalanced symbol table push. This could    occur when an interface block encountered an error while parsing its    var-decls.        Change-Id: I910a980ac92fac7c0786c48b8dc3003ee3e75e5b    Bug: oss-fuzz:26700    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/330896    Commit-Queue: John Stiles <johnstiles@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Ethan Nicholas <ethannicholas@google.com>	26700	gn/sksl_tests.gni;src/sksl/SkSLIRGenerator.cpp	106;1093;0;0
skia-20201030-ec9db71e00	ec9db71e00	b3058ad5a5	Fri Oct 30 15:34:10 2020 +0000	Fix prefix/postfix mixup discovered by fuzzer.	commit ec9db71e002d3205e2dd7c63d6f3b139d43108ebAuthor: John Stiles <johnstiles@google.com>Date:   Fri Oct 30 10:52:05 2020 -0400    Fix prefix/postfix mixup discovered by fuzzer.        Change-Id: I8b70f456d1a659e46600bbad40b5bcadd08e8edf    Bug: oss-fuzz:26759    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/330743    Commit-Queue: John Stiles <johnstiles@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Ethan Nicholas <ethannicholas@google.com>	26759	src/sksl/SkSLCFGGenerator.cpp	256
skia-20201023-9cef66fbf5	9cef66fbf5	15d8174fc9	Fri Oct 23 16:10:15 2020 +0000	Fix use-after-free discovered by fuzzer.	commit 9cef66fbf56edf43233792e926e12eec952e7799Author: John Stiles <johnstiles@google.com>Date:   Fri Oct 23 09:46:11 2020 -0400    Fix use-after-free discovered by fuzzer.        In cases where multiple variables were declared on a single line, it is    legal for variable initialization-expressions to reference variables    declared earlier in the var-decl statement. It is NOT legal for the    inliner to move those references up to the previous statement, where the    variable doesn't exist yet.        This is mitigated by disabling the IRGenerator inliner for var-decls    past the first one in a var-decls statement. (The optimizer will still    pass over this code later and is able to inline it correctly, if it is    worth doing.)        Change-Id: I7a0d45eab20e30ed9f6b2f5c1251b6e0d8eeaea3    Bug: oss-fuzz:26167    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/329357    Auto-Submit: John Stiles <johnstiles@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>    Reviewed-by: Ethan Nicholas <ethannicholas@google.com>	26167	gn/sksl_tests.gni;src/sksl/SkSLIRGenerator.cpp	197;368;0;0;0
skia-20200922-d0e4840b11	d0e4840b11	5f35ac9faa	Tue Sep 22 19:08:42 2020 +0000	Fix crash when swizzling a bvec with constant 0/1s.	commit d0e4840b1178c0a4d59b489ab5ac4a7d4557ce5aAuthor: John Stiles <johnstiles@google.com>Date:   Tue Sep 22 14:00:40 2020 -0400    Fix crash when swizzling a bvec with constant 0/1s.        Code like      bool4 result = val.xy01;        Will now be converted to:      bvec4 result = bvec4(val.xy, bool(0), bool(1));        Previously it tried to do this, but there isn't an implicit conversion    from int to bool, so it was silently failing and adding nulls into the    constructor:      bvec4 result = bvec4(val.xy, $coerceToBool(0), $coerceToBool(1));        This CL also cleans up some related code that I was checking while    trying to understand the nature of the error.        Change-Id: I5b7d96760a03170ff78b46251c4182cc4e89836f    Bug: oss-fuzz:25781    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/318636    Commit-Queue: John Stiles <johnstiles@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	25781	src/sksl/SkSLIRGenerator.cpp;tests/sksl/glsl/golden/SwizzleBoolConstants.glsl	1209;1928;2210;2239;2592;1
skia-20200909-db16c4845f	db16c4845f	c2ae19caa5	Wed Sep 9 19:50:47 2020 +0000	Fix use-after-free when variable declarations become unreachable	commit db16c4845f5feca61664dc52801b43cb4b6a92aaAuthor: Brian Osman <brianosman@google.com>Date:   Wed Sep 9 15:15:06 2020 -0400    Fix use-after-free when variable declarations become unreachable        Bug: oss-fuzz:24289    Change-Id: I79ea84f8a0b7f593a79b6cc2904bf03879ed0eb9    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/315956    Reviewed-by: John Stiles <johnstiles@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>	24289	src/sksl/SkSLCompiler.cpp	1452
skia-20200821-d66c2488d4	d66c2488d4	be1455850c	Fri Aug 21 16:09:03 2020 +0000	Fix two null dereference bugs in SkSL visitor	commit d66c2488d4c1f5e384e0a43e2fd1d96b60879e74Author: Brian Osman <brianosman@google.com>Date:   Fri Aug 21 11:27:59 2020 -0400    Fix two null dereference bugs in SkSL visitor        Fuzzer found one of these, and I spotted the other during visual    inspection and manual testing.        Bug: oss-fuzz:25109    Change-Id: I8273231d9f76fe55459d4b742225627dcc524e6f    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/312476    Auto-Submit: Brian Osman <brianosman@google.com>    Reviewed-by: John Stiles <johnstiles@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>	25109	src/sksl/SkSLAnalysis.cpp	296;320
skia-20200805-0e041baeaa	0e041baeaa	2000c64e2b	Wed Aug 5 16:01:15 2020 +0000	Fix out-of-bounds array access discovered by fuzzer.	commit 0e041baeaa47668a0075fcb49faad24c2bdbf034Author: John Stiles <johnstiles@google.com>Date:   Wed Aug 5 11:14:33 2020 -0400    Fix out-of-bounds array access discovered by fuzzer.        The root cause of this error is that Metal does not support upcasting    a small matrix into a larger matrix (I was unfamiliar with this GLSL    ability). Proper support in Metal for that type of cast will be added in    a followup CL. For now, this CL adds defensive bounds-checking to    placate ASAN.        Change-Id: Ieb0d6b14f9bc7ecc9ef6223364c606612dc79e43    Bug: oss-fuzz:22776    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/308182    Commit-Queue: John Stiles <johnstiles@google.com>    Commit-Queue: Jim Van Verth <jvanverth@google.com>    Auto-Submit: John Stiles <johnstiles@google.com>    Reviewed-by: Jim Van Verth <jvanverth@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	22776	src/sksl/SkSLMetalCodeGenerator.cpp	439
skia-20200720-c59916a5cc	c59916a5cc	a6ab4b4f80	Mon Jul 20 14:51:31 2020 +0000	SkVertices: Fix calculation of size needed for attr marker names	commit c59916a5cc0ae7574780555fe5d6cf80160cdae1Author: Brian Osman <brianosman@google.com>Date:   Mon Jul 20 09:39:59 2020 -0400    SkVertices: Fix calculation of size needed for attr marker names        Bug: oss-fuzz:24246    Change-Id: Ib99a359b2f0c6ee55180734d6ae933b90e4f6ca8    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/303920    Commit-Queue: Brian Osman <brianosman@google.com>    Auto-Submit: Brian Osman <brianosman@google.com>    Reviewed-by: Kevin Lubick <kjlubick@google.com>	24246	src/core/SkVertices.cpp	121;247
skia-20200707-b4d60f807d	b4d60f807d	01d8ad64fe	Tue Jul 7 18:49:10 2020 +0000	Fix use of uninitialized value in SkSVGDevice	commit b4d60f807dbd034edf9fae1233aa1784f6c36d5cAuthor: Tyler Denniston <tdenniston@google.com>Date:   Tue Jul 7 14:11:27 2020 -0400    Fix use of uninitialized value in SkSVGDevice        The asAGradient() function appears to be deprecated    (https://crbug.com/skia/8941) but there's no easy way to remove its use    here at the moment. So, fixing the surface-level issue.        Bug: oss-fuzz:23932    Change-Id: Ia9675f3b31644f2754421f27844e77c43f189c90    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/300907    Reviewed-by: Florin Malita <fmalita@chromium.org>    Auto-Submit: Tyler Denniston <tdenniston@google.com>    Commit-Queue: Tyler Denniston <tdenniston@google.com>	23932	src/svg/SkSVGDevice.cpp	401
skia-20200617-4190f27b41	4190f27b41	1443609db4	Wed Jun 17 14:23:14 2020 +0000	Fix SkParse::FindNamedColor OOB	commit 4190f27b41ffb710e7d56fe1f1883cd8cd8b853eAuthor: Florin Malita <fmalita@chromium.org>Date:   Tue Jun 16 12:58:08 2020 -0400    Fix SkParse::FindNamedColor OOB        Plus some minor cleanup and asserts.        Bug: oss-fuzz:23395        Change-Id: I667bee2d7f21864defe2fd97df9eb4e99d69d9ca    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/296451    Reviewed-by: Mike Klein <mtklein@google.com>    Reviewed-by: Tyler Denniston <tdenniston@google.com>    Commit-Queue: Florin Malita <fmalita@google.com>	23395	gn/tests.gni;src/utils/SkParseColor.cpp	185;185;0
skia-20200615-2d9e0357fa	2d9e0357fa	5ee90ff982	Mon Jun 15 19:31:45 2020 +0000	Fix infinite loop in SkParsePath::FromSVGString	commit 2d9e0357faaf20ebcf8d7d9bc2217d34ea488839Author: Florin Malita <fmalita@chromium.org>Date:   Mon Jun 15 14:00:34 2020 -0400    Fix infinite loop in SkParsePath::FromSVGString        A close-path verb (Z) does not allow/consume any numerical tokens.        Bug: oss-fuzz:23398    Change-Id: I46694957873b615875fb9ff7ed01b9d77a49babc    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/296476    Reviewed-by: Tyler Denniston <tdenniston@google.com>    Commit-Queue: Florin Malita <fmalita@google.com>	23398	src/utils/SkParsePath.cpp	92
skia-20200514-ff350cb9db	ff350cb9db	79c5674a4c	Thu May 14 18:36:53 2020 +0000	fixed null dereference in SkSLMetalCodeGenerator	commit ff350cb9db955539fe8c8f19b08d7140223a3f4aAuthor: Ethan Nicholas <ethannicholas@google.com>Date:   Thu May 14 14:05:13 2020 -0400    fixed null dereference in SkSLMetalCodeGenerator        Bug: oss-fuzz:21999    Change-Id: I156e5015570394104796380455366bbeb31181a4    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/287385    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	21999	src/sksl/SkSLMetalCodeGenerator.cpp;src/sksl/SkSLMetalCodeGenerator.h	1478;1546;1629;245
skia-20200504-9fdab9fea2	9fdab9fea2	4dab280c28	Mon May 4 14:41:49 2020 +0000	fixed an SkSL ASAN issue	commit 9fdab9fea277f995b9e4a7652a1d32beed25df4dAuthor: Ethan Nicholas <ethannicholas@google.com>Date:   Fri May 1 11:02:15 2020 -0400    fixed an SkSL ASAN issue        Bug: oss-fuzz:20029    Change-Id: I8fcd6ab6a76dd003f90be6751bb9abaf21b2a0b9    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/286937    Reviewed-by: Brian Osman <brianosman@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>	20029	src/sksl/SkSLIRGenerator.cpp	2328
skia-20200504-3d919c5301	3d919c5301	2329db1171	Mon May 4 14:01:19 2020 +0000	Fix uninitialized read in simplifyRect()	commit 3d919c5301957d3a78db6466b37af43a088cc7d8Author: Michael Ludwig <michaelludwig@google.com>Date:   Mon May 4 09:24:57 2020 -0400    Fix uninitialized read in simplifyRect()        Bug: oss-fuzz:21976    Change-Id: I635b9092bc4a30bb6a23ddcf1430a3ec06b9d598    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/287377    Commit-Queue: Michael Ludwig <michaelludwig@google.com>    Commit-Queue: Robert Phillips <robertphillips@google.com>    Auto-Submit: Michael Ludwig <michaelludwig@google.com>    Reviewed-by: Robert Phillips <robertphillips@google.com>    Reviewed-by: Brian Salomon <bsalomon@google.com>	21976	src/gpu/geometry/GrShape.cpp	172
skia-20200429-e448900952	e448900952	77083c7d74	Wed Apr 29 19:49:47 2020 +0000	fixed UB in SkSL shift operations	commit e448900952cd21f70c2ea4f36195eac53b3dd188Author: Ethan Nicholas <ethannicholas@google.com>Date:   Wed Apr 29 14:00:14 2020 -0400    fixed UB in SkSL shift operations        Bug: oss-fuzz:20522    Change-Id: Ib08a988b83bac922e8076c62f568e329ef7866bd    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/286136    Reviewed-by: Brian Osman <brianosman@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>	20522	src/sksl/SkSLIRGenerator.cpp	1545;1575
skia-20191104-790eff85a0	790eff85a0	501149f8d1	Mon Nov 4 20:30:16 2019 +0000	Fix fuzz bug in isValid for SkDescriptor	commit 790eff85a0393d6b8440e7c81803c273cbd4ce92Author: Herb Derby <herb@google.com>Date:   Mon Nov 4 12:03:51 2019 -0500    Fix fuzz bug in isValid for SkDescriptor        isValid read memory beyond the buffer that was uninitialized.        BUG=oss-fuzz:18555        Change-Id: I5576add2cd7bfbe146d495239b96210fe15fe562    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/252538    Commit-Queue: Herb Derby <herb@google.com>    Reviewed-by: Mike Klein <mtklein@google.com>	18555	src/core/SkDescriptor.cpp;tests/DescriptorTest.cpp	95;122
skia-20190930-0f55db5390	0f55db5390	384f6e35b1	Mon Sep 30 15:44:42 2019 +0000	fix buffer overflow	commit 0f55db539032a23b52897aebcb9c532b5ad37beaAuthor: Mike Klein <mtklein@google.com>Date:   Mon Sep 30 10:01:08 2019 -0500    fix buffer overflow        The other side of this branch also reads too many bytes,    8 when only 4 are allowed.        Bug: oss-fuzz:17829    Change-Id: I3fe4a9e39acf77abacbae9ab892f1d0794a411a8    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/245184    Reviewed-by: Robert Phillips <robertphillips@google.com>    Commit-Queue: Mike Klein <mtklein@google.com>	17829	src/opts/SkRasterPipeline_opts.h	727;738
skia-20190924-f73ef0b841	f73ef0b841	ba45830975	Tue Sep 24 17:28:33 2019 +0000	Fix accessing off end of pixmap for R16G16_float in SSE2/SSE4.1 mode	commit f73ef0b84137943fce6044690d1fdb154d938e6bAuthor: Robert Phillips <robertphillips@google.com>Date:   Tue Sep 24 13:00:42 2019 -0400    Fix accessing off end of pixmap for R16G16_float in SSE2/SSE4.1 mode        Bug: 1005615, oss-fuzz:17491    Change-Id: Ice8686890efad4693ba436ec74a99d9e73f25d8f    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/243097    Commit-Queue: Robert Phillips <robertphillips@google.com>    Reviewed-by: Mike Klein <mtklein@google.com>	17491	src/opts/SkRasterPipeline_opts.h	734
skia-20190910-66d8006c2b	66d8006c2b	f57b7cb8f0	Tue Sep 10 17:35:03 2019 +0000	fixed an assertion error with unspecified sksl array sizes	commit 66d8006c2bb1f980beaa302b47cb23d0d60ea81dAuthor: Ethan Nicholas <ethannicholas@google.com>Date:   Mon Sep 9 14:50:51 2019 -0400    fixed an assertion error with unspecified sksl array sizes        Bug: oss-fuzz:15329    Change-Id: I994e58e794e4c0ee97a59ff83f295dc981ba5dba    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/240276    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>    Reviewed-by: Brian Osman <brianosman@google.com>	15329	src/sksl/SkSLIRGenerator.cpp	303;965;978
skia-20190909-c2d84bfa74	c2d84bfa74	c88c38e93e	Mon Sep 9 18:53:38 2019 +0000	fixed byte/ubyte types in SPIR-V output	commit c2d84bfa74212bf97405429225b88944d1377c69Author: Ethan Nicholas <ethannicholas@google.com>Date:   Mon Sep 9 10:49:15 2019 -0400    fixed byte/ubyte types in SPIR-V output        Bug: oss-fuzz:15313    Change-Id: Id694413b5c4de41b4e64ed45b732aaa4c52b5f1e    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/240198    Reviewed-by: Brian Osman <brianosman@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>	15313	src/sksl/SkSLSPIRVCodeGenerator.cpp	2478
skia-20190909-73b8376b30	73b8376b30	e8820d45ce	Mon Sep 9 14:05:41 2019 +0000	Fixed skslc assertion failure discovered by fuzzer	commit 73b8376b302ac3fd61ef4010f2bcc4fc2a48b5bcAuthor: Ethan Nicholas <ethannicholas@google.com>Date:   Mon Sep 9 09:25:45 2019 -0400    Fixed skslc assertion failure discovered by fuzzer        This particular issue probably wouldn't ever occur in hand-written code, but    such is fuzzing...        Bug: oss-fuzz:17061    Change-Id: Ia5da7b75afef8b49bb19ddb7f1ea8696053c2e54    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/240197    Reviewed-by: Brian Osman <brianosman@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>	17061	src/sksl/ir/SkSLFunctionDeclaration.h	93
skia-20190611-53bd4c5d4e	53bd4c5d4e	d188c18835	Tue Jun 11 16:35:03 2019 +0000	fixed an skslc crash with uninitialized globals	commit 53bd4c5d4e3245030dc390327b6d1eebf7a525daAuthor: Ethan Nicholas <ethannicholas@google.com>Date:   Tue Jun 11 10:18:58 2019 -0400    fixed an skslc crash with uninitialized globals        Bug: oss-fuzz:14372    Change-Id: I9445a36a7d7b04ba63f1e5c9b1d1bd270708a7c0    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/219481    Reviewed-by: Brian Osman <brianosman@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>	14372	src/sksl/ir/SkSLVariable.h	53
skia-20190611-d188c18835	d188c18835	6488077ea3	Tue Jun 11 16:34:04 2019 +0000	fixed SkSL handling of negated literal vectors	commit d188c188354158dd94358018881cee0da8e7d041Author: Ethan Nicholas <ethannicholas@google.com>Date:   Mon Jun 10 15:55:38 2019 -0400    fixed SkSL handling of negated literal vectors        Bug: oss-fuzz:14409    Change-Id: I837083139489d46f7db2f697ce85a0cabf85fb94    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/219997    Reviewed-by: Brian Osman <brianosman@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>	14409	src/sksl/SkSLCompiler.cpp;src/sksl/SkSLUtil.h;src/sksl/ir/SkSLConstructor.h;src/sksl/ir/SkSLExpression.h;src/sksl/ir/SkSLPrefixExpression.h;tests/SkSLGLSLTest.cpp	535;23;92;113;136;113;122;132;46;2296
skia-20190611-6d71f49e25	6d71f49e25	a716809d5a	Tue Jun 11 13:05:28 2019 +0000	fixed a spot where skslc would crash instead of report a parse error	commit 6d71f49e2516f84ab493d43b75f76239fbf95389Author: Ethan Nicholas <ethannicholas@google.com>Date:   Mon Jun 10 16:58:37 2019 -0400    fixed a spot where skslc would crash instead of report a parse error        Bug: oss-fuzz:14355    Change-Id: Iff70351a983a0d3451b8609507e55ecc6aec0c2f    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/220001    Reviewed-by: Brian Osman <brianosman@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>	14355	src/sksl/SkSLParser.cpp	688
skia-20190501-a5ef39726a	a5ef39726a	b75be23bc4	Wed May 1 18:02:05 2019 +0000	More polyutils fixes	commit a5ef39726a7b8e54d295aa8336e7d874bc33f436Author: Jim Van Verth <jvanverth@google.com>Date:   Wed May 1 13:28:07 2019 -0400    More polyutils fixes        Bug: chromium:954891, oss-fuzz:14079    Change-Id: Ia1ee0a15ab4bfc93e67188ff02e6aa436432a3be    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/211602    Commit-Queue: Jim Van Verth <jvanverth@google.com>    Reviewed-by: Robert Phillips <robertphillips@google.com>	14079	bench/PolyUtilsBench.cpp;fuzz/FuzzPolyUtils.cpp;gm/polygonoffset.cpp;src/utils/SkPolyUtils.cpp;src/utils/SkPolyUtils.h;src/utils/SkShadowTessellator.cpp;tests/OffsetSimplePolyTest.cpp;tests/ShadowTest.cpp	6;70;17;29;561;1052;1146;1161;13;33;40;25;99;155;559;570;904;999;34;56;66;98;122;42
skia-20190419-898a8a5b1a	898a8a5b1a	865dc5604d	Fri Apr 19 19:37:52 2019 +0000	Fixed internal skslc error with negated literal vectors	commit 898a8a5b1a8135bf3d30285592e6fab0ac21a2f1Author: Ethan Nicholas <ethannicholas@google.com>Date:   Fri Apr 19 09:39:14 2019 -0400    Fixed internal skslc error with negated literal vectors        There was a spot where we were assuming that a constant vector was    guaranteed to be a vector constructor (e.g. float4(1)), while ignoring    the possibility that it could be a prefix operator applied to a    constructor (-float4(1)), leading to a crash. This fixes that and    simplifies the logic.        Bug: oss-fuzz:14019    Change-Id: Ic4b8fc896764494112a83c2fcca0a66eed804bf4    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/209176    Reviewed-by: Greg Daniel <egdaniel@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>	14019	src/sksl/SkSLCompiler.cpp;src/sksl/SkSLIRGenerator.cpp;src/sksl/ir/SkSLConstructor.h;src/sksl/ir/SkSLExpression.h;src/sksl/ir/SkSLPrefixExpression.h	529;1495;93;113;136;178;107;45
skia-20190419-65a8f56e74	65a8f56e74	2929f51aa4	Fri Apr 19 18:36:03 2019 +0000	fixed Metal code generation for recursive functions	commit 65a8f56e74337d01c5c7f0b4aa657f359e68ff28Author: Ethan Nicholas <ethannicholas@google.com>Date:   Fri Apr 19 14:00:26 2019 -0400    fixed Metal code generation for recursive functions        Bug: oss-fuzz:14096    Change-Id: I9a7586e4000d1398be131ee4a2b85812b14096f3    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/209381    Reviewed-by: Kevin Lubick <kjlubick@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>	14096	src/sksl/SkSLMetalCodeGenerator.cpp	1649
skia-20190418-1a668d26f8	1a668d26f8	2c2240f668	Thu Apr 18 17:03:07 2019 +0000	fixed assertion failure in skslc SPIR-V output	commit 1a668d26f80af893fd8fb94dcab83bfc3bb77dbeAuthor: Ethan Nicholas <ethannicholas@google.com>Date:   Thu Apr 18 10:37:40 2019 -0400    fixed assertion failure in skslc SPIR-V output        Bug: oss-fuzz:13683    Change-Id: Ifceacb35417b1175b3d561c4f0f9794987a09ec3    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/209162    Reviewed-by: Kevin Lubick <kjlubick@google.com>    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>	13683	src/sksl/SkSLDefines.h;src/sksl/SkSLSPIRVCodeGenerator.cpp	18;3201
skia-20190213-62ad46b059	62ad46b059	6f0e02f5d7	Wed Feb 13 17:14:09 2019 +0000	fix contour-measure for move-line-move	commit 62ad46b0590157a69d26c25f55087d72d31478a9Author: Mike Reed <reed@google.com>Date:   Wed Feb 13 11:48:35 2019 -0500    fix contour-measure for move-line-move        Use RawIter, so we can dependably peek() (since consumeDegenerates in    Iter() make peeking unreliable), which caused us to think there were two    real contours in the test case.        Bug: oss-fuzz:13013    Change-Id: I0d85f3e6a83cb972c4d801dd9b17f0e388b926d0    Reviewed-on: https://skia-review.googlesource.com/c/192025    Commit-Queue: Mike Reed <reed@google.com>    Reviewed-by: Kevin Lubick <kjlubick@google.com>	13013	include/core/SkContourMeasure.h;include/core/SkPath.h;src/core/SkContourMeasure.cpp;src/core/SkPath.cpp;tests/PathMeasureTest.cpp	121;132;1485;181;208;232;242;257;297;312;321;338;366;419;434;541;1959;265;290
skia-20181126-bfd90e3902	bfd90e3902	037ea382aa	Mon Nov 26 19:23:30 2018 +0000	Fix multiplication of maxIterations in PolyUtils	commit bfd90e39024747b70b58229af2802ed53b68cccdAuthor: Kevin Lubick <kjlubick@google.com>Date:   Mon Nov 26 13:01:10 2018 -0500    Fix multiplication of maxIterations in PolyUtils        Bug: oss-fuzz:11546    Change-Id: Icb08cfeb685d3992d99df8f98336093a79295ed0    Reviewed-on: https://skia-review.googlesource.com/c/172869    Reviewed-by: Jim Van Verth <jvanverth@google.com>    Commit-Queue: Kevin Lubick <kjlubick@google.com>	11546	src/utils/SkPolyUtils.cpp	1262
skia-20181106-2dfab27d69	2dfab27d69	422f95bce8	Tue Nov 6 00:41:49 2018 +0000	Revert "Fix div-by-zero loophole in gradient factory func"	commit 2dfab27d6957074ad0b27966bb5ffd0075d1f4e7Author: Brian Osman <brianosman@google.com>Date:   Tue Nov 6 00:41:40 2018 +0000    Revert "Fix div-by-zero loophole in gradient factory func"        This reverts commit c34dd6c5263490b94ef9af7a14dee1b4bc872b58.        Reason for revert: Speculative fix for Chrome roll (gradient layout test failures)        Original change's description:    > Fix div-by-zero loophole in gradient factory func    >    > Bug: oss-fuzz:10373    > Change-Id: I4277fb63e3186ee34feaf09ecf6aeddeb532f9c1    > Reviewed-on: https://skia-review.googlesource.com/c/168269    > Reviewed-by: Kevin Lubick <kjlubick@google.com>    > Commit-Queue: Michael Ludwig <michaelludwig@google.com>        TBR=jvanverth@google.com,kjlubick@google.com,michaelludwig@google.com        Change-Id: I6333390d2ecc559ad98bd4d734ab1c674e23037f    No-Presubmit: true    No-Tree-Checks: true    No-Try: true    Bug: oss-fuzz:10373    Reviewed-on: https://skia-review.googlesource.com/c/168460    Reviewed-by: Brian Osman <brianosman@google.com>    Commit-Queue: Brian Osman <brianosman@google.com>	10373	src/shaders/gradients/SkGradientShader.cpp;src/shaders/gradients/SkTwoPointConicalGradient.cpp	694;55
skia-20181105-c34dd6c526	c34dd6c526	52065473ee	Mon Nov 5 21:20:32 2018 +0000	Fix div-by-zero loophole in gradient factory func	commit c34dd6c5263490b94ef9af7a14dee1b4bc872b58Author: Michael Ludwig <michaelludwig@google.com>Date:   Mon Nov 5 13:55:43 2018 -0500    Fix div-by-zero loophole in gradient factory func        Bug: oss-fuzz:10373    Change-Id: I4277fb63e3186ee34feaf09ecf6aeddeb532f9c1    Reviewed-on: https://skia-review.googlesource.com/c/168269    Reviewed-by: Kevin Lubick <kjlubick@google.com>    Commit-Queue: Michael Ludwig <michaelludwig@google.com>	10373	src/shaders/gradients/SkGradientShader.cpp;src/shaders/gradients/SkTwoPointConicalGradient.cpp	694;55
skia-20181022-07afa23bd0	07afa23bd0	701167cfb9	Mon Oct 22 17:41:52 2018 +0000	Fix heap buffer overflow	commit 07afa23bd0fa74d18fb7faee898b2a876536a170Author: Leon Scroggins III <scroggo@google.com>Date:   Mon Oct 22 13:16:37 2018 -0400    Fix heap buffer overflow        Bug: oss-fuzz:11040        Because we're sampling, the offset ends up the same as the width. Back    up to the left enough to fit the bytes we will write.        Change-Id: Ie476a0191b66c2322446b9c0922f630d6e971645    Reviewed-on: https://skia-review.googlesource.com/c/164262    Commit-Queue: Leon Scroggins <scroggo@google.com>    Commit-Queue: Mike Klein <mtklein@google.com>    Auto-Submit: Leon Scroggins <scroggo@google.com>    Reviewed-by: Mike Klein <mtklein@google.com>	11040	src/codec/SkSwizzler.cpp	1216
skia-20181016-016d9b098c	016d9b098c	a90ea228ab	Tue Oct 16 17:40:57 2018 +0000	fix divides for osfuzz	commit 016d9b098c4c9d2434a89a9714f427a47c3493b3Author: Cary Clark <caryclark@skia.org>Date:   Tue Oct 16 11:59:34 2018 -0400    fix divides for osfuzz        R=kjlubick@google.com        Bug: oss-fuzz:10567,oss-fuzz:10568    Change-Id: I22bf654e183a973f2c50ea619aaaba1c22f44912    Reviewed-on: https://skia-review.googlesource.com/c/162580    Commit-Queue: Cary Clark <caryclark@google.com>    Reviewed-by: Kevin Lubick <kjlubick@google.com>	10567	src/pathops/SkOpAngle.cpp;src/pathops/SkPathOpsConic.cpp	577;94
skia-20180921-9ea7682ba4	9ea7682ba4	d842557c07	Fri Sep 21 15:28:52 2018 +0000	Fix line distance issue	commit 9ea7682ba4dfa68d981f35903e5e0d4f009898e6Author: Jim Van Verth <jvanverth@google.com>Date:   Fri Sep 21 11:00:59 2018 -0400    Fix line distance issue        Bug: oss-fuzz:9430    Change-Id: If785ed487d007fc01a7625686246fe5a66575371    Reviewed-on: https://skia-review.googlesource.com/156180    Reviewed-by: Kevin Lubick <kjlubick@google.com>    Commit-Queue: Jim Van Verth <jvanverth@google.com>	9430	src/core/SkPoint.cpp	151
skia-20180918-6dcbb90025	6dcbb90025	5103aa3d74	Tue Sep 18 18:29:31 2018 +0000	fix conic fuzz	commit 6dcbb90025d15394d916592d7cda1ae878d41776Author: Cary Clark <caryclark@skia.org>Date:   Tue Sep 18 13:39:42 2018 -0400    fix conic fuzz        Avoid divide by zero in conic divide.    If the control point z value is zero, resulting    conic will have no weight, and control point value    will not affect conic; so any non-zero value will    work to avoid the zero divide.        R=kjlubick@google.com        Bug: oss-fuzz:10157    Change-Id: Ia0456ff6028559b4e1040725fea5f8bf4717e192    Reviewed-on: https://skia-review.googlesource.com/155320    Reviewed-by: Kevin Lubick <kjlubick@google.com>    Auto-Submit: Cary Clark <caryclark@skia.org>    Commit-Queue: Kevin Lubick <kjlubick@google.com>	10157	src/pathops/SkPathOpsConic.cpp	156
skia-20180914-7b617a7fc8	7b617a7fc8	04e0c8b2f1	Fri Sep 14 18:51:14 2018 +0000	Fix some issues with shadow tesselation	commit 7b617a7fc85db973fc15e225c56a4da05f564e36Author: Jim Van Verth <jvanverth@google.com>Date:   Fri Sep 14 14:03:52 2018 -0400    Fix some issues with shadow tesselation        Bug: oss-fuzz:10348    Change-Id: I818f741452bdb8092796f78bb73d9b518502e4c9    Reviewed-on: https://skia-review.googlesource.com/154627    Reviewed-by: Brian Salomon <bsalomon@google.com>    Commit-Queue: Jim Van Verth <jvanverth@google.com>	10348	src/utils/SkShadowTessellator.cpp	1005;1017;1025
skia-20180911-b7c955199a	b7c955199a	5831e11133	Tue Sep 11 17:16:17 2018 +0000	Fix some overflowing integers in SkPolyUtils	commit b7c955199a347ce6eca88e8343ae1f83f0cdedeaAuthor: Jim Van Verth <jvanverth@google.com>Date:   Tue Sep 11 12:57:42 2018 -0400    Fix some overflowing integers in SkPolyUtils        Bug: oss-fuzz:10293    Change-Id: If3a98e60081ebef7bdc8460fce4fa682245c68cc    Reviewed-on: https://skia-review.googlesource.com/153661    Reviewed-by: Brian Salomon <bsalomon@google.com>    Commit-Queue: Jim Van Verth <jvanverth@google.com>	10293	src/utils/SkPolyUtils.cpp	7;309;346;406;455;1029;1129;1145;1181;1243;1327;1462
skia-20180618-94d4d3e20b	94d4d3e20b	0333854e55	Mon Jun 18 17:33:18 2018 +0000	[skottie] Fix OOB access in Parse<SkPoint>	commit 94d4d3e20b8be29233bc7056ed3b8b36def3e98aAuthor: Florin Malita <fmalita@chromium.org>Date:   Mon Jun 18 13:10:51 2018 -0400    [skottie] Fix OOB access in Parse<SkPoint>        SkJSON requires valid array indices, so callers must guard against    out-of-bounds conditions explicitly.        Bug: oss-fuzz:8956    Change-Id: I50b96b088e44a4c1a569e6911d4be5d75799b464    Reviewed-on: https://skia-review.googlesource.com/135445    Commit-Queue: Florin Malita <fmalita@chromium.org>    Reviewed-by: Kevin Lubick <kjlubick@google.com>	8956	BUILD.gn;modules/skottie/BUILD.gn;modules/skottie/src/SkottieJson.cpp	1385;40;84;0
skia-20180604-5059541dcc	5059541dcc	ad445ce841	Mon Jun 4 15:47:19 2018 +0000	need conservative bounds for triangles due to SkFixed drift in SkEdge	commit 5059541dcc1950107ffeed930f85d986f4b5d613Author: Mike Reed <reed@google.com>Date:   Wed May 30 16:32:33 2018 -0400    need conservative bounds for triangles due to SkFixed drift in SkEdge        Bug: oss-fuzz:8018    Change-Id: I09456f906b7eb89f74ffd2c484bc6e30e029bfbb    Reviewed-on: https://skia-review.googlesource.com/131021    Reviewed-by: Cary Clark <caryclark@google.com>    Auto-Submit: Mike Reed <reed@google.com>    Commit-Queue: Mike Reed <reed@google.com>	8018	src/core/SkScan_Path.cpp;tests/PathTest.cpp	738;788;5053;5061
skia-20180518-ab0795c4dd	ab0795c4dd	30e1a5edda	Fri May 18 18:55:14 2018 +0000	Fix fuzzer bug i.e., compute the correct repeated dst domain	commit ab0795c4dd2c138c3037a4f22d2b762b449ec460Author: Robert Phillips <robertphillips@google.com>Date:   Fri May 18 12:43:27 2018 -0400    Fix fuzzer bug i.e., compute the correct repeated dst domain        BUG: oss-fuzz:8367    Change-Id: Ib5a9bf6e8446459db88016176e4c22397a3f1965    Reviewed-on: https://skia-review.googlesource.com/129184    Reviewed-by: Herb Derby <herb@google.com>    Commit-Queue: Robert Phillips <robertphillips@google.com>	8367	src/effects/SkMatrixConvolutionImageFilter.cpp	403
skia-20180516-6ee268de12	6ee268de12	37aea440fd	Wed May 16 12:40:44 2018 +0000	Fix UBSAN warnings in SkPerlinNoiseShaderImpl	commit 6ee268de1238a95cd2448798ba7517ee9863a7c1Author: Kevin Lubick <kjlubick@google.com>Date:   Tue May 15 13:59:54 2018 -0400    Fix UBSAN warnings in SkPerlinNoiseShaderImpl        Also update the docs in places.        Bug: oss-fuzz:6138, oss-fuzz:6275, oss-fuzz:6118    Change-Id: Idfef4118dd6e58f8aa528365895f7d7b8ebc50e5    Reviewed-on: https://skia-review.googlesource.com/128300    Reviewed-by: Mike Reed <reed@google.com>    Commit-Queue: Kevin Lubick <kjlubick@google.com>	6138	include/effects/SkPerlinNoiseShader.h;src/shaders/SkPerlinNoiseShader.cpp	27;270;281;419;426
skia-20180510-5c560c90f7	5c560c90f7	e5f39624b6	Thu May 10 22:43:56 2018 +0000	Fix unchecked allocation in kImageFilter::Common::unflatten()	commit 5c560c90f7345cb0bc57571eb3215ad25c1a1b10Author: Florin Malita <fmalita@chromium.org>Date:   Thu May 10 17:22:13 2018 -0400    Fix unchecked allocation in kImageFilter::Common::unflatten()        The bad news is we don't have a good way to validate the count against    the available data size.        The good news is we don't have to: most filters only use two inputs,    which will fit in the stack-reserved storage; for those who don't,    growing the input vector during deserialization should not be    problematic.        The CL drops the prea-allocation, and instead appends inputs iteratively.    Also switches the storage to SkSTArray for append/push_back() support.        Bug: oss-fuzz:8219    Change-Id: Ic6bf6e435e6e18b9e026aeb393612210c9e6e57a    Reviewed-on: https://skia-review.googlesource.com/127306    Commit-Queue: Florin Malita <fmalita@chromium.org>    Reviewed-by: Mike Reed <reed@google.com>	8219	include/core/SkImageFilter.h;src/core/SkImageFilter.cpp	264;108;121
skia-20180420-8f88d89796	8f88d89796	adeb75d67c	Fri Apr 20 14:14:45 2018 +0000	Fix use-of-uninitialized-value in SkPictureShader::onMakeContext	commit 8f88d89796d0ab7fefb302b21e03cc186dfc8bc3Author: Florin Malita <fmalita@chromium.org>Date:   Thu Apr 19 21:07:19 2018 -0400    Fix use-of-uninitialized-value in SkPictureShader::onMakeContext        SkPictureShader::refBitmapShader is expected to always initialize the    scale adjust vector when returning a non-null shader.  But the code path    returning EmptyShader does not do that.        Instead of hauling around a separate scale adjustment, we can refactor    to avoid this problem by adjusting the local matrix directly, if needed,    in refBitmapShader.  The local matrix is conveniently already stored in    a SkTCopyOnFirstWrite.        Bug: chromium:835048, oss-fuzz:7738    Change-Id: I2df3bde7d6237f01bc71857c2fe254e86b186dc0    Reviewed-on: https://skia-review.googlesource.com/122544    Auto-Submit: Florin Malita <fmalita@chromium.org>    Reviewed-by: Kevin Lubick <kjlubick@google.com>    Commit-Queue: Florin Malita <fmalita@chromium.org>	7738	src/shaders/SkPictureShader.cpp;src/shaders/SkPictureShader.h	171;270;301;382;46
skia-20180316-b5319d5e13	b5319d5e13	310a2d9280	Fri Mar 16 19:02:06 2018 +0000	fix overflow in rgnbuilder	commit b5319d5e132b84963801c1299382ccc62f13baaaAuthor: Mike Reed <reed@google.com>Date:   Fri Mar 16 11:09:13 2018 -0400    fix overflow in rgnbuilder        Bug: oss-fuzz:6956    Change-Id: I244e49d458eb78e0c6200fc3c147f0f67823f97f    Reviewed-on: https://skia-review.googlesource.com/114780    Reviewed-by: Herb Derby <herb@google.com>    Commit-Queue: Mike Reed <reed@google.com>	6956	src/core/SkRegion_path.cpp	7;123
skia-20180213-289d36f905	289d36f905	d76e56d93c	Tue Feb 13 16:10:10 2018 +0000	Address MSAN bug in SkAnimatedImage::decodeNextFrame	commit 289d36f90519affa549a18abbf29323b4e74cfc2Author: Kevin Lubick <kjlubick@google.com>Date:   Tue Feb 13 10:25:00 2018 -0500    Address MSAN bug in SkAnimatedImage::decodeNextFrame        Bug: oss-fuzz:6284    Change-Id: I77537d6624e7d03fbbfe96046300a9dd7d609064    Reviewed-on: https://skia-review.googlesource.com/106930    Commit-Queue: Kevin Lubick <kjlubick@google.com>    Reviewed-by: Leon Scroggins <scroggo@google.com>	6284	src/android/SkAnimatedImage.cpp	176
