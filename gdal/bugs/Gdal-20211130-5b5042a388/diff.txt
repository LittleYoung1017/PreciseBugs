diff --git a/frmts/zarr/zarr_array.cpp b/frmts/zarr/zarr_array.cpp
index 219ae9331f..966d13b81d 100644
--- a/frmts/zarr/zarr_array.cpp
+++ b/frmts/zarr/zarr_array.cpp
@@ -1363,8 +1363,9 @@ bool ZarrArray::LoadTileData(const uint64_t* tileIndices,
             }
 
             if( bRet &&
-                VSIFReadL(&abyCompressedData[0], 1, abyCompressedData.size(),
-                          fp) != abyCompressedData.size() )
+                (abyCompressedData.empty() ||
+                 VSIFReadL(&abyCompressedData[0], 1, abyCompressedData.size(),
+                          fp) != abyCompressedData.size()) )
             {
                 CPLError(CE_Failure, CPLE_AppDefined,
                          "Could not read tile %s correctly",
@@ -1389,8 +1390,10 @@ bool ZarrArray::LoadTileData(const uint64_t* tileIndices,
         }
     }
     VSIFCloseL(fp);
+    if( !bRet )
+        return false;
 
-    for( int i = m_oFiltersArray.Size(); bRet && i > 0; )
+    for( int i = m_oFiltersArray.Size(); i > 0; )
     {
         --i;
         const auto& oFilter = m_oFiltersArray[i];
@@ -1430,13 +1433,13 @@ bool ZarrArray::LoadTileData(const uint64_t* tileIndices,
         return false;
     }
 
-    if( bRet && !bMissingTileOut && m_bFortranOrder )
+    if( !bMissingTileOut && m_bFortranOrder )
     {
         BlockTranspose(abyRawTileData, abyTmpRawTileData, true);
         std::swap(abyRawTileData, abyTmpRawTileData);
     }
 
-    if( bRet && !bMissingTileOut && !abyDecodedTileData.empty() )
+    if( !bMissingTileOut && !abyDecodedTileData.empty() )
     {
         const size_t nSourceSize = m_aoDtypeElts.back().nativeOffset +
                                    m_aoDtypeElts.back().nativeSize;
@@ -1450,7 +1453,7 @@ bool ZarrArray::LoadTileData(const uint64_t* tileIndices,
         }
     }
 
-    return bRet;
+    return true;
 
 #undef m_abyTmpRawTileData
 #undef m_abyRawTileData
