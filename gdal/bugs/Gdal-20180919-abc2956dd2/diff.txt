diff --git a/gdal/frmts/usgsdem/usgsdemdataset.cpp b/gdal/frmts/usgsdem/usgsdemdataset.cpp
index 21d4ba7e35..1bf7186792 100644
--- a/gdal/frmts/usgsdem/usgsdemdataset.cpp
+++ b/gdal/frmts/usgsdem/usgsdemdataset.cpp
@@ -362,13 +362,10 @@ CPLErr USGSDEMRasterBand::IReadBlock( CPL_UNUSED int nBlockXOff,
 /* -------------------------------------------------------------------- */
 /*      Initialize image buffer to nodata value.                        */
 /* -------------------------------------------------------------------- */
-    for( int k = GetXSize() * GetYSize() - 1; k >= 0; k-- )
-    {
-        if( GetRasterDataType() == GDT_Int16 )
-            reinterpret_cast<GInt16 *>( pImage )[k] = USGSDEM_NODATA;
-        else
-            reinterpret_cast<float *>( pImage )[k] = USGSDEM_NODATA;
-    }
+    GDALCopyWords(&USGSDEM_NODATA, GDT_Int32, 0,
+                  pImage, GetRasterDataType(),
+                  GDALGetDataTypeSizeBytes(GetRasterDataType()),
+                  GetXSize() * GetYSize());
 
 /* -------------------------------------------------------------------- */
 /*      Seek to data.                                                   */
diff --git a/gdal/fuzzers/GNUmakefile b/gdal/fuzzers/GNUmakefile
index 387b9502cb..150a2e1dea 100644
--- a/gdal/fuzzers/GNUmakefile
+++ b/gdal/fuzzers/GNUmakefile
@@ -39,6 +39,9 @@ gdal_vector_translate_fuzzer$(EXE): gdal_vector_translate_fuzzer.$(OBJ_EXT) $(DE
 aig_fuzzer$(EXE): gdal_fuzzer.$(OBJ_EXT) $(DEP_LIBS)
 	$(LD) $(LDFLAGS) $(LNK_FLAGS) $(CXXFLAGS) $(GDAL_INCLUDE) gdal_fuzzer.cpp fuzzingengine.cpp $(XTRAOBJ) $(CONFIG_LIBS) -o $@ -DREGISTER_FUNC=GDALRegister_AIGrid -DMEM_FILENAME="\"/vsimem/test.tar\"" -DGDAL_FILENAME="\"/vsitar//vsimem/test.tar/hdr.adf\""
 
+gdal_vrt_fuzzer$(EXE): gdal_fuzzer.$(OBJ_EXT) $(DEP_LIBS)
+	$(LD) $(LDFLAGS) $(LNK_FLAGS) $(CXXFLAGS) $(GDAL_INCLUDE) gdal_fuzzer.cpp fuzzingengine.cpp $(XTRAOBJ) $(CONFIG_LIBS) -o $@ -DMEM_FILENAME="\"/vsimem/test.tar\"" -DGDAL_FILENAME="\"/vsitar//vsimem/test.tar/test.vrt\""
+
 ogr_fuzzer$(EXE): ogr_fuzzer.$(OBJ_EXT) $(DEP_LIBS)
 	$(LD) $(LDFLAGS) $(LNK_FLAGS) $(CXXFLAGS) $(GDAL_INCLUDE) ogr_fuzzer.cpp fuzzingengine.cpp $(XTRAOBJ) $(CONFIG_LIBS) -o $@
 
diff --git a/gdal/gcore/rasterio.cpp b/gdal/gcore/rasterio.cpp
index 7c57c82df2..4363736fb0 100644
--- a/gdal/gcore/rasterio.cpp
+++ b/gdal/gcore/rasterio.cpp
@@ -2684,13 +2684,50 @@ inline void GDALCopyWordsFromT( const T* const CPL_RESTRICT pSrcData,
 /*                          GDALReplicateWord()                         */
 /************************************************************************/
 
+template <class T>
+inline void GDALReplicateWordT( void * pDstData,
+                                int nDstPixelStride,
+                                unsigned int nWordCount )
+{
+    const T valSet = *static_cast<const T*>(pDstData);
+    if( nDstPixelStride == static_cast<int>(sizeof(T)) )
+    {
+        T* pDstPtr = static_cast<T*>(pDstData) + 1;
+        while( nWordCount >= 4 )
+        {
+            nWordCount -= 4;
+            pDstPtr[0] = valSet;
+            pDstPtr[1] = valSet;
+            pDstPtr[2] = valSet;
+            pDstPtr[3] = valSet;
+            pDstPtr += 4;
+        }
+        while( nWordCount > 0 )
+        {
+            --nWordCount;
+            *pDstPtr = valSet;
+            pDstPtr++;
+        }
+    }
+    else
+    {
+        GByte *pabyDstPtr = static_cast<GByte *>(pDstData) + nDstPixelStride;
+        while( nWordCount > 0 )
+        {
+            --nWordCount;
+            *reinterpret_cast<T*>(pabyDstPtr) = valSet;
+            pabyDstPtr += nDstPixelStride;
+        }
+    }
+}
+
 static
 void GDALReplicateWord( const void * CPL_RESTRICT pSrcData,
                         GDALDataType eSrcType,
                         void * CPL_RESTRICT pDstData,
                         GDALDataType eDstType,
                         int nDstPixelStride,
-                        int nWordCount)
+                        unsigned int nWordCount)
 {
 /* ----------------------------------------------------------------------- */
 /* Special case when the source data is always the same value              */
@@ -2720,8 +2757,9 @@ void GDALReplicateWord( const void * CPL_RESTRICT pSrcData,
             else
             {
                 GByte valSet = *reinterpret_cast<const GByte*>(pDstData);
-                while(nWordCount--)
+                while( nWordCount > 0 )
                 {
+                    --nWordCount;
                     *pabyDstWord = valSet;
                     pabyDstWord += nDstPixelStride;
                 }
@@ -2732,12 +2770,7 @@ void GDALReplicateWord( const void * CPL_RESTRICT pSrcData,
 #define CASE_DUPLICATE_SIMPLE(enum_type, c_type) \
         case enum_type:\
         { \
-            c_type valSet = *reinterpret_cast<const c_type*>(pDstData); \
-            while(nWordCount--) \
-            { \
-                *reinterpret_cast<c_type*>(pabyDstWord) = valSet; \
-                pabyDstWord += nDstPixelStride; \
-            } \
+            GDALReplicateWordT<c_type>(pDstData, nDstPixelStride, nWordCount); \
             break; \
         }
 
@@ -2753,8 +2786,9 @@ void GDALReplicateWord( const void * CPL_RESTRICT pSrcData,
         { \
             c_type valSet1 = reinterpret_cast<const c_type*>(pDstData)[0]; \
             c_type valSet2 = reinterpret_cast<const c_type*>(pDstData)[1]; \
-            while(nWordCount--) \
+            while( nWordCount > 0 ) \
             { \
+                --nWordCount; \
                 reinterpret_cast<c_type*>(pabyDstWord)[0] = valSet1; \
                 reinterpret_cast<c_type*>(pabyDstWord)[1] = valSet2; \
                 pabyDstWord += nDstPixelStride; \
