diff --git a/gdal/frmts/raw/eirdataset.cpp b/gdal/frmts/raw/eirdataset.cpp
index 25440d34cb..66dabcf266 100644
--- a/gdal/frmts/raw/eirdataset.cpp
+++ b/gdal/frmts/raw/eirdataset.cpp
@@ -32,6 +32,8 @@
 #include "ogr_spatialref.h"
 #include "rawdataset.h"
 
+#include <limits>
+
 CPL_CVSID("$Id$")
 
 /************************************************************************/
@@ -44,12 +46,12 @@ class EIRDataset final: public RawDataset
 {
     friend class RawRasterBand;
 
-    VSILFILE  *fpImage; // image data file
-    bool   bGotTransform;
-    double adfGeoTransform[6];
-    bool   bHDRDirty;
-    char **papszHDR;
-    char **papszExtraFiles;
+    VSILFILE  *fpImage = nullptr; // image data file
+    bool   bGotTransform = false;
+    double adfGeoTransform[6] = {0,0,0,0,0,0};
+    bool   bHDRDirty = false;
+    CPLStringList aosHDR{};
+    char **papszExtraFiles = nullptr;
 
     void        ResetKeyValue( const char *pszKey, const char *pszValue );
 #ifdef unused
@@ -80,15 +82,7 @@ class EIRDataset final: public RawDataset
 /*                            EIRDataset()                             */
 /************************************************************************/
 
-EIRDataset::EIRDataset() :
-    fpImage(nullptr),
-    bGotTransform(false),
-    bHDRDirty(false),
-    papszHDR(nullptr),
-    papszExtraFiles(nullptr)
-{
-    memset( adfGeoTransform, 0, sizeof(adfGeoTransform) );
-}
+EIRDataset::EIRDataset() = default;
 
 /************************************************************************/
 /*                            ~EIRDataset()                            */
@@ -116,7 +110,6 @@ EIRDataset::~EIRDataset()
     if( fpImage != nullptr )
         CPL_IGNORE_RET_VAL(VSIFCloseL( fpImage ));
 
-    CSLDestroy( papszHDR );
     CSLDestroy( papszExtraFiles );
 }
 
@@ -129,6 +122,7 @@ const char *EIRDataset::GetKeyValue( const char *pszKey,
                                      const char *pszDefault )
 
 {
+    const char* const* papszHDR = aosHDR.List();
     for( int i = 0; papszHDR[i] != nullptr; i++ )
     {
         if( EQUALN(pszKey,papszHDR[i],strlen(pszKey))
@@ -165,7 +159,8 @@ void EIRDataset::ResetKeyValue( const char *pszKey, const char *pszValue )
     char szNewLine[82] = { '\0' };
     snprintf( szNewLine, sizeof(szNewLine), "%-15s%s", pszKey, pszValue );
 
-    for( int i = CSLCount(papszHDR)-1; i >= 0; i-- )
+    char** papszHDR = aosHDR.List();
+    for( int i = aosHDR.size()-1; i >= 0; i-- )
     {
         if( EQUALN(papszHDR[i],szNewLine,strlen(pszKey)+1 ) )
         {
@@ -180,7 +175,7 @@ void EIRDataset::ResetKeyValue( const char *pszKey, const char *pszValue )
     }
 
     bHDRDirty = true;
-    papszHDR = CSLAddString( papszHDR, szNewLine );
+    aosHDR.AddString( szNewLine );
 }
 
 /************************************************************************/
@@ -280,7 +275,7 @@ GDALDataset *EIRDataset::Open( GDALOpenInfo * poOpenInfo )
     int nBits = 8;
     char chByteOrder = 'M';
     char szLayout[10] = "BIL";
-    char **papszHDR = nullptr;
+    CPLStringList aosHDR;
 
     // default raster file: same name with no extension
     const CPLString osPath = CPLGetPath( poOpenInfo->pszFilename );
@@ -305,67 +300,65 @@ GDALDataset *EIRDataset::Open( GDALOpenInfo * poOpenInfo )
         if( strlen(pszLine) > 1000 )
             break;
 
-        papszHDR = CSLAddString( papszHDR, pszLine );
+        aosHDR.AddString( pszLine );
 
-        char **papszTokens
-            = CSLTokenizeStringComplex( pszLine, " \t", TRUE, FALSE );
-        if( CSLCount( papszTokens ) < 2 )
+        const CPLStringList aosTokens(CSLTokenizeStringComplex( pszLine, " \t", TRUE, FALSE ));
+        if( aosTokens.size() < 2 )
         {
-            CSLDestroy( papszTokens );
             continue;
         }
 
-        if( EQUAL(papszTokens[0], "WIDTH") )
+        if( EQUAL(aosTokens[0], "WIDTH") )
         {
-            nCols = atoi(papszTokens[1]);
+            nCols = atoi(aosTokens[1]);
         }
-        else if( EQUAL(papszTokens[0], "HEIGHT") )
+        else if( EQUAL(aosTokens[0], "HEIGHT") )
         {
-            nRows = atoi(papszTokens[1]);
+            nRows = atoi(aosTokens[1]);
         }
-        else if( EQUAL(papszTokens[0], "NUM_LAYERS") )
+        else if( EQUAL(aosTokens[0], "NUM_LAYERS") )
         {
-            nBands = atoi(papszTokens[1]);
+            nBands = atoi(aosTokens[1]);
         }
-        else if( EQUAL(papszTokens[0], "PIXEL_FILES") )
+        else if( EQUAL(aosTokens[0], "PIXEL_FILES") )
         {
-            osRasterFilename = CPLFormCIFilename( osPath, papszTokens[1], "" );
+            osRasterFilename = CPLFormCIFilename( osPath, aosTokens[1], "" );
         }
-        else if( EQUAL(papszTokens[0], "FORMAT") )
+        else if( EQUAL(aosTokens[0], "FORMAT") )
         {
-            snprintf( szLayout, sizeof(szLayout), "%s", papszTokens[1] );
+            snprintf( szLayout, sizeof(szLayout), "%s", aosTokens[1] );
         }
-        else if( EQUAL(papszTokens[0], "DATATYPE")
-                 || EQUAL(papszTokens[0], "DATA_TYPE") )
+        else if( EQUAL(aosTokens[0], "DATATYPE")
+                 || EQUAL(aosTokens[0], "DATA_TYPE") )
         {
-            if ( EQUAL(papszTokens[1], "U1")
-                 || EQUAL(papszTokens[1], "U2")
-                 || EQUAL(papszTokens[1], "U4")
-                 || EQUAL(papszTokens[1], "U8") ) {
+            if ( EQUAL(aosTokens[1], "U1")
+                 || EQUAL(aosTokens[1], "U2")
+                 || EQUAL(aosTokens[1], "U4")
+                 || EQUAL(aosTokens[1], "U8") ) {
                 nBits = 8;
                 eDataType = GDT_Byte;
             }
-            else if( EQUAL(papszTokens[1], "U16") ) {
+            else if( EQUAL(aosTokens[1], "U16") ) {
                 nBits = 16;
                 eDataType = GDT_UInt16;
             }
-            else if( EQUAL(papszTokens[1], "U32") ) {
+            else if( EQUAL(aosTokens[1], "U32") ) {
                 nBits = 32;
                 eDataType = GDT_UInt32;
             }
-            else if( EQUAL(papszTokens[1], "S16") ) {
+            else if( EQUAL(aosTokens[1], "S16") ) {
                 nBits = 16;
                 eDataType = GDT_Int16;
             }
-            else if( EQUAL(papszTokens[1], "S32") ) {
+            else if( EQUAL(aosTokens[1], "S32") ) {
                 nBits = 32;
                 eDataType = GDT_Int32;
             }
-            else if( EQUAL(papszTokens[1], "F32") ) {
+            else if( EQUAL(aosTokens[1], "F32") ) {
                 nBits = 32;
                 eDataType = GDT_Float32;
             }
-            else if( EQUAL(papszTokens[1], "F64") ) {
+            else if( EQUAL(aosTokens[1], "F64") ) {
                 nBits = 64;
                 eDataType = GDT_Float64;
             }
@@ -373,23 +366,23 @@ GDALDataset *EIRDataset::Open( GDALOpenInfo * poOpenInfo )
                 CPLError(
                     CE_Failure, CPLE_NotSupported,
                     "EIR driver does not support DATATYPE %s.",
-                    papszTokens[1] );
-                CSLDestroy( papszTokens );
-                CSLDestroy( papszHDR );
+                    aosTokens[1] );
                 return nullptr;
             }
         }
-        else if( EQUAL(papszTokens[0], "BYTE_ORDER") )
+        else if( EQUAL(aosTokens[0], "BYTE_ORDER") )
         {
             // M for MSB, L for LSB
-            chByteOrder = static_cast<char>( toupper(papszTokens[1][0]) );
+            chByteOrder = static_cast<char>( toupper(aosTokens[1][0]) );
         }
-        else if( EQUAL(papszTokens[0],"DATA_OFFSET") )
+        else if( EQUAL(aosTokens[0],"DATA_OFFSET") )
         {
-            nSkipBytes = atoi(papszTokens[1]); // TBD: is this mapping right?
+            nSkipBytes = atoi(aosTokens[1]); // TBD: is this mapping right?
+            if( nSkipBytes < 0 )
+            {
+                return nullptr;
+            }
         }
-
-        CSLDestroy( papszTokens );
     }
     CPL_IGNORE_RET_VAL(nBits);
 
@@ -400,14 +393,12 @@ GDALDataset *EIRDataset::Open( GDALOpenInfo * poOpenInfo )
 /* -------------------------------------------------------------------- */
     if( nRows <= 0 || nCols <= 0 || nBands <= 0 )
     {
-        CSLDestroy( papszHDR );
         return nullptr;
     }
 
     if (!GDALCheckDatasetDimensions(nCols, nRows) ||
         !GDALCheckBandCount(nBands, FALSE))
     {
-        CSLDestroy( papszHDR );
         return nullptr;
     }
 
@@ -416,7 +407,6 @@ GDALDataset *EIRDataset::Open( GDALOpenInfo * poOpenInfo )
 /* -------------------------------------------------------------------- */
     if( poOpenInfo->eAccess == GA_Update )
     {
-        CSLDestroy( papszHDR );
         CPLError( CE_Failure, CPLE_NotSupported,
                   "The EIR driver does not support update access to existing"
                   " datasets." );
@@ -425,14 +415,14 @@ GDALDataset *EIRDataset::Open( GDALOpenInfo * poOpenInfo )
 /* -------------------------------------------------------------------- */
 /*      Create a corresponding GDALDataset.                             */
 /* -------------------------------------------------------------------- */
-    EIRDataset *poDS = new EIRDataset();
+    auto poDS = cpl::make_unique<EIRDataset>();
 
 /* -------------------------------------------------------------------- */
 /*      Capture some information from the file that is of interest.     */
 /* -------------------------------------------------------------------- */
     poDS->nRasterXSize = nCols;
     poDS->nRasterYSize = nRows;
-    poDS->papszHDR = papszHDR;
+    poDS->aosHDR = aosHDR;
 
 /* -------------------------------------------------------------------- */
 /*      Open target binary file.                                        */
@@ -443,7 +433,6 @@ GDALDataset *EIRDataset::Open( GDALOpenInfo * poOpenInfo )
         CPLError( CE_Failure, CPLE_OpenFailed,
                   "Failed to open %s: %s",
                   osRasterFilename.c_str(), VSIStrerror( errno ) );
-        delete poDS;
         return nullptr;
     }
     poDS->papszExtraFiles =
@@ -465,7 +454,6 @@ GDALDataset *EIRDataset::Open( GDALOpenInfo * poOpenInfo )
         nPixelOffset = nItemSize * nBands;
         if( nPixelOffset > INT_MAX / nCols )
         {
-            delete poDS;
             return nullptr;
         }
         nLineOffset = nPixelOffset * nCols;
@@ -476,7 +464,6 @@ GDALDataset *EIRDataset::Open( GDALOpenInfo * poOpenInfo )
         nPixelOffset = nItemSize;
         if( nPixelOffset > INT_MAX / nCols )
         {
-            delete poDS;
             return nullptr;
         }
         nLineOffset = nPixelOffset * nCols;
@@ -487,13 +474,21 @@ GDALDataset *EIRDataset::Open( GDALOpenInfo * poOpenInfo )
         nPixelOffset = nItemSize;
         if( nItemSize > INT_MAX / nBands || nItemSize * nBands > INT_MAX / nCols )
         {
-            delete poDS;
             return nullptr;
         }
         nLineOffset = nItemSize * nBands * nCols;
         nBandOffset = static_cast<vsi_l_offset>(nItemSize) * nCols;
     }
 
+    if( poDS->nBands > 1 )
+    {
+        if( nBandOffset > std::numeric_limits<vsi_l_offset>::max() / (poDS->nBands - 1) ||
+            static_cast<vsi_l_offset>(nSkipBytes) > std::numeric_limits<vsi_l_offset>::max() - nBandOffset * (poDS->nBands - 1) )
+        {
+            return nullptr;
+        }
+    }
+
     poDS->SetDescription( poOpenInfo->pszFilename );
     poDS->PamInitialize();
 
@@ -504,7 +499,7 @@ GDALDataset *EIRDataset::Open( GDALOpenInfo * poOpenInfo )
     for( int i = 0; i < poDS->nBands; i++ )
     {
         RawRasterBand *poBand
-            = new RawRasterBand( poDS, i+1, poDS->fpImage,
+            = new RawRasterBand( poDS.get(), i+1, poDS->fpImage,
                                 nSkipBytes + nBandOffset * i,
                                 nPixelOffset, nLineOffset, eDataType,
 #ifdef CPL_LSB
@@ -539,9 +534,9 @@ GDALDataset *EIRDataset::Open( GDALOpenInfo * poOpenInfo )
 /* -------------------------------------------------------------------- */
 /*      Check for overviews.                                            */
 /* -------------------------------------------------------------------- */
-    poDS->oOvManager.Initialize( poDS, poOpenInfo->pszFilename );
+    poDS->oOvManager.Initialize( poDS.get(), poOpenInfo->pszFilename );
 
-    return poDS;
+    return poDS.release();
 }
 
 /************************************************************************/
