diff --git a/src/sksl/codegen/SkSLPipelineStageCodeGenerator.cpp b/src/sksl/codegen/SkSLPipelineStageCodeGenerator.cpp
index 69ca39f24a..4d93efedb7 100644
--- a/src/sksl/codegen/SkSLPipelineStageCodeGenerator.cpp
+++ b/src/sksl/codegen/SkSLPipelineStageCodeGenerator.cpp
@@ -212,9 +212,7 @@ void PipelineStageCodeGenerator::writeFunctionCall(const FunctionCall& c) {
     if (function.isBuiltin()) {
         this->write(function.name());
     } else {
-        auto it = fFunctionNames.find(&function);
-        SkASSERT(it != fFunctionNames.end());
-        this->write(it->second);
+        this->write(this->functionName(function));
     }
 
     this->write("(");
@@ -316,8 +314,6 @@ void PipelineStageCodeGenerator::writeFunction(const FunctionDefinition& f) {
         fCastReturnsToHalf = false;
     }
 
-    String fnName = this->functionName(decl);
-
     // This is similar to decl.description(), but substitutes a mangled name, and handles modifiers
     // on the function (e.g. `inline`) and its parameters (e.g. `inout`).
     String declString =
@@ -325,7 +321,7 @@ void PipelineStageCodeGenerator::writeFunction(const FunctionDefinition& f) {
                            (decl.modifiers().fFlags & Modifiers::kInline_Flag) ? "inline " : "",
                            (decl.modifiers().fFlags & Modifiers::kNoInline_Flag) ? "noinline " : "",
                            this->typeName(decl.returnType()).c_str(),
-                           fnName.c_str());
+                           this->functionName(decl).c_str());
     const char* separator = "";
     for (const Variable* p : decl.parameters()) {
         // TODO: Handle arrays
