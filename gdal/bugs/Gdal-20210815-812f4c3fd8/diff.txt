diff --git a/autotest/ogr/data/gml/too_nested.gml b/autotest/ogr/data/gml/too_nested.gml
new file mode 100644
index 0000000000..db799cb951
--- /dev/null
+++ b/autotest/ogr/data/gml/too_nested.gml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8" ?>
+<ogr:FeatureCollection
+     gml:id="aFeatureCollection"
+     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+     xsi:schemaLocation="http://ogr.maptools.org/ test.xsd"
+     xmlns:ogr="http://ogr.maptools.org/"
+     xmlns:gml="http://www.opengis.net/gml/3.2">
+  <ogr:featureMember>
+    <ogr:test gml:id="test.0">
+        <ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a><ogr:a>X</ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a></ogr:a>
+    </ogr:test>
+  </ogr:featureMember>
+</ogr:FeatureCollection>
diff --git a/autotest/ogr/ogr_gml_read.py b/autotest/ogr/ogr_gml_read.py
index 007594afcd..f907114396 100755
--- a/autotest/ogr/ogr_gml_read.py
+++ b/autotest/ogr/ogr_gml_read.py
@@ -3861,3 +3861,28 @@ def test_ogr_gml_srs_name_in_xsd(gml_format):
 
     gdal.Unlink(filename)
     gdal.Unlink(xsdfilename)
+
+
+###############################################################################
+
+
+def test_ogr_gml_too_nested():
+
+    if not gdaltest.have_gml_reader:
+        pytest.skip()
+
+    gdal.Unlink('data/gml/too_nested.gfs')
+
+    with gdaltest.error_handler():
+        ds = ogr.Open('data/gml/too_nested.gml')
+        lyr = ds.GetLayer(0)
+        assert lyr.GetNextFeature() is None
+
+    gdal.Unlink('data/gml/too_nested.gfs')
+
+    with gdaltest.config_option('OGR_GML_NESTING_LEVEL', 'UNLIMITED'):
+        ds = ogr.Open('data/gml/too_nested.gml')
+        lyr = ds.GetLayer(0)
+        assert lyr.GetNextFeature() is not None
+
+    gdal.Unlink('data/gml/too_nested.gfs')
diff --git a/gdal/ogr/ogrsf_frmts/gml/gmlhandler.cpp b/gdal/ogr/ogrsf_frmts/gml/gmlhandler.cpp
index 2a26a13fb7..a13dd1078a 100644
--- a/gdal/ogr/ogrsf_frmts/gml/gmlhandler.cpp
+++ b/gdal/ogr/ogrsf_frmts/gml/gmlhandler.cpp
@@ -67,6 +67,22 @@ GMLXercesHandler::GMLXercesHandler( GMLReader *poReader ) :
     m_nEntityCounter(0)
 {}
 
+/************************************************************************/
+/*                    GMLXercesHandlerDealWithError()                   */
+/************************************************************************/
+
+static void GMLXercesHandlerDealWithError(OGRErr eErr)
+{
+    if( eErr == OGRERR_NOT_ENOUGH_MEMORY )
+    {
+        throw SAXNotSupportedException("Out of memory");
+    }
+    else if( eErr != OGRERR_NONE )
+    {
+        throw SAXNotSupportedException("Other error during parsing");
+    }
+}
+
 /************************************************************************/
 /*                            startElement()                            */
 /************************************************************************/
@@ -80,13 +96,10 @@ void GMLXercesHandler::startElement( const XMLCh* const /*uri*/,
 
     transcode(localname, m_osElement);
 
-    if( GMLHandler::startElement(
+    GMLXercesHandlerDealWithError(GMLHandler::startElement(
             m_osElement.c_str(),
             static_cast<int>(m_osElement.size()),
-            const_cast<Attributes *>(&attrs)) == OGRERR_NOT_ENOUGH_MEMORY )
-    {
-        throw SAXNotSupportedException("Out of memory");
-    }
+            const_cast<Attributes *>(&attrs)));
 }
 
 /************************************************************************/
@@ -98,10 +111,7 @@ void GMLXercesHandler::endElement(const XMLCh* const /*uri*/,
 {
     m_nEntityCounter = 0;
 
-    if (GMLHandler::endElement() == OGRERR_NOT_ENOUGH_MEMORY)
-    {
-        throw SAXNotSupportedException("Out of memory");
-    }
+    GMLXercesHandlerDealWithError(GMLHandler::endElement());
 }
 
 /************************************************************************/
@@ -113,12 +123,8 @@ void GMLXercesHandler::characters(const XMLCh* const chars_in,
 
 {
     transcode( chars_in, m_osCharacters, static_cast<int>(length) );
-    OGRErr eErr = GMLHandler::dataHandler(m_osCharacters.c_str(),
-                                    static_cast<int>(m_osCharacters.size()));
-    if (eErr == OGRERR_NOT_ENOUGH_MEMORY)
-    {
-        throw SAXNotSupportedException("Out of memory");
-    }
+    GMLXercesHandlerDealWithError(GMLHandler::dataHandler(m_osCharacters.c_str(),
+                                    static_cast<int>(m_osCharacters.size())));
 }
 
 /************************************************************************/
@@ -264,6 +270,21 @@ GMLExpatHandler::GMLExpatHandler( GMLReader *poReader, XML_Parser oParser ) :
     m_nDataHandlerCounter(0)
 {}
 
+/************************************************************************/
+/*                  GMLExpatHandler::DealWithError()                    */
+/************************************************************************/
+
+void GMLExpatHandler::DealWithError(OGRErr eErr)
+{
+    if( eErr != OGRERR_NONE )
+    {
+        m_bStopParsing = true;
+        XML_StopParser(m_oParser, XML_FALSE);
+        if( eErr == OGRERR_NOT_ENOUGH_MEMORY )
+            CPLError(CE_Failure, CPLE_OutOfMemory, "Out of memory");
+    }
+}
+
 /************************************************************************/
 /*                           startElementCbk()                          */
 /************************************************************************/
@@ -286,14 +307,9 @@ void XMLCALL GMLExpatHandler::startElementCbk( void *pUserData,
         pszIter ++;
     }
 
-    if( pThis->GMLHandler::startElement(pszName,
+    pThis->DealWithError( pThis->GMLHandler::startElement(pszName,
                                         static_cast<int>(pszIter - pszName),
-                                        ppszAttr) == OGRERR_NOT_ENOUGH_MEMORY )
-    {
-        CPLError(CE_Failure, CPLE_OutOfMemory, "Out of memory");
-        pThis->m_bStopParsing = true;
-        XML_StopParser(pThis->m_oParser, XML_FALSE);
-    }
+                                        ppszAttr) );
 }
 
 /************************************************************************/
@@ -306,12 +322,7 @@ void XMLCALL GMLExpatHandler::endElementCbk( void *pUserData,
     if( pThis->m_bStopParsing )
         return;
 
-    if( pThis->GMLHandler::endElement() == OGRERR_NOT_ENOUGH_MEMORY )
-    {
-        CPLError(CE_Failure, CPLE_OutOfMemory, "Out of memory");
-        pThis->m_bStopParsing = true;
-        XML_StopParser(pThis->m_oParser, XML_FALSE);
-    }
+    pThis->DealWithError( pThis->GMLHandler::endElement() );
 }
 
 /************************************************************************/
@@ -343,12 +354,7 @@ GMLExpatHandler::dataHandlerCbk(void *pUserData, const char *data, int nLen)
         return;
     }
 
-    if( pThis->GMLHandler::dataHandler(data, nLen) == OGRERR_NOT_ENOUGH_MEMORY )
-    {
-        CPLError(CE_Failure, CPLE_OutOfMemory, "Out of memory");
-        pThis->m_bStopParsing = true;
-        XML_StopParser(pThis->m_oParser, XML_FALSE);
-    }
+    pThis->DealWithError( pThis->GMLHandler::dataHandler(data, nLen) );
 }
 
 /************************************************************************/
@@ -592,6 +598,25 @@ OGRErr GMLHandler::startElement(const char *pszName, int nLenName, void* attr)
         default:                        eRet = OGRERR_NONE; break;
     }
     m_nDepth++;
+    if( m_nDepth == 64 )
+    {
+        // Avoid performance issues on files like
+        // https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=21737
+        if( m_nUnlimitedDepth < 0 )
+        {
+            m_nUnlimitedDepth =
+                EQUAL(CPLGetConfigOption("OGR_GML_NESTING_LEVEL", ""), "UNLIMITED");
+        }
+        if( !m_nUnlimitedDepth )
+        {
+            CPLError(CE_Failure, CPLE_NotSupported,
+                     "Too deep XML nesting level (%d). "
+                     "Set the OGR_GML_NESTING_LEVEL configuration option to "
+                     "UNLIMITED to remove that limitation.",
+                     m_nDepth);
+            eRet = OGRERR_FAILURE;
+        }
+    }
     return eRet;
 }
 
diff --git a/gdal/ogr/ogrsf_frmts/gml/gmlreaderp.h b/gdal/ogr/ogrsf_frmts/gml/gmlreaderp.h
index 3997a13bb3..5e8e5dc2d1 100644
--- a/gdal/ogr/ogrsf_frmts/gml/gmlreaderp.h
+++ b/gdal/ogr/ogrsf_frmts/gml/gmlreaderp.h
@@ -135,6 +135,7 @@ class GMLHandler
 
     int        m_nDepth;
     int        m_nDepthFeature;
+    int        m_nUnlimitedDepth = -1; // -1 unknown, 0=false, 1=true
 
     int        m_inBoundedByDepth;
 
@@ -265,6 +266,8 @@ class GMLExpatHandler final: public GMLHandler
     bool       m_bStopParsing;
     int        m_nDataHandlerCounter;
 
+    void       DealWithError(OGRErr eErr);
+
 public:
     GMLExpatHandler( GMLReader *poReader, XML_Parser oParser );
 
