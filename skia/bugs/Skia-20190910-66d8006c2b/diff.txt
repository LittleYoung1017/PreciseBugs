diff --git a/src/sksl/SkSLIRGenerator.cpp b/src/sksl/SkSLIRGenerator.cpp
index 2e707679f0..e6f915a2c8 100644
--- a/src/sksl/SkSLIRGenerator.cpp
+++ b/src/sksl/SkSLIRGenerator.cpp
@@ -303,11 +303,12 @@ std::unique_ptr<VarDeclarations> IRGenerator::convertVarDeclarations(const ASTNo
                     count = ((IntLiteral&) *size).fValue;
                     if (count <= 0) {
                         fErrors.error(size->fOffset, "array size must be positive");
+                        return nullptr;
                     }
                     name += "[" + to_string(count) + "]";
                 } else {
-                    count = -1;
-                    name += "[]";
+                    fErrors.error(size->fOffset, "array size must be specified");
+                    return nullptr;
                 }
                 type = (Type*) fSymbolTable->takeOwnership(
                                                  std::unique_ptr<Symbol>(new Type(name,
@@ -965,11 +966,12 @@ std::unique_ptr<InterfaceBlock> IRGenerator::convertInterfaceBlock(const ASTNode
                 count = ((IntLiteral&) *converted).fValue;
                 if (count <= 0) {
                     fErrors.error(converted->fOffset, "array size must be positive");
+                    return nullptr;
                 }
                 name += "[" + to_string(count) + "]";
             } else {
-                count = -1;
-                name += "[]";
+                fErrors.error(intf.fOffset, "array size must be specified");
+                return nullptr;
             }
             type = (Type*) symbols->takeOwnership(std::unique_ptr<Symbol>(
                                                                          new Type(name,
@@ -978,12 +980,8 @@ std::unique_ptr<InterfaceBlock> IRGenerator::convertInterfaceBlock(const ASTNode
                                                                                   (int) count)));
             sizes.push_back(std::move(converted));
         } else {
-            type = (Type*) symbols->takeOwnership(std::unique_ptr<Symbol>(
-                                                                       new Type(type->name() + "[]",
-                                                                                Type::kArray_Kind,
-                                                                                *type,
-                                                                                -1)));
-            sizes.push_back(nullptr);
+            fErrors.error(intf.fOffset, "array size must be specified");
+            return nullptr;
         }
     }
     Variable* var = (Variable*) old->takeOwnership(std::unique_ptr<Symbol>(
