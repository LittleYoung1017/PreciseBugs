--- /VariableFormatter.java	2023-07-03 22:14:54.900324987 +0000
+++ /Lang-65/src/java/org/apache/commons/lang/text/VariableFormatter.java	2023-07-03 22:14:54.900324987 +0000
@@ -362,10 +362,11 @@
          */
         protected FieldPosition nextToken(char[] data) {
             if (getTokenList().isEmpty()) {
-                if (!hasNext()) {
+ 
+if (!(hasNext())) {    return null;}; int startPos = getPos(); int tokenLen; while ((hasNext()) && (getTokenList().isEmpty())) {    if ((tokenLen = getEscVarMatcher().isMatch(data, getPos(), 0, getLength())) > 0) {        checkTextToken(startPos);        getTokenList().addLast(org.apache.commons.lang.text.VariableFormatter.VariableParser.newEscapedVariableToken(getPos(), tokenLen));        setPos(((getPos()) + tokenLen));    }else        if ((tokenLen = getVarStartMatcher().isMatch(data, getPos(), 0, getLength())) > 0) {            checkTextToken(startPos);            setPos(((getPos()) + tokenLen));            int varStart = getPos();            int endLen = 0;            while ((hasNext()) && ((endLen = getVarEndMatcher().isMatch(data, getPos(), 0, getLength())) <= 0)) {                setPos(((getPos()) + 1));            }             if (endLen <= 0) {                checkTextToken((varStart - tokenLen));            }else {                getTokenList().addLast(org.apache.commons.lang.text.VariableFormatter.VariableParser.newVariableToken(varStart, ((getPos()) - varStart)));                setPos(((getPos()) + endLen));            }        }else {            setPos(((getPos()) + 1));        }    } ; if (getTokenList().isEmpty()) {    checkTextToken(startPos);}; 
                     // end of data is reached
-                    return null;
-                }
+ 
+ 
                 int startPos = getPos();
                 int tokenLen;
                 while (hasNext() && getTokenList().isEmpty()) {
