diff --git a/autotest/ogr/data/test.bna b/autotest/ogr/data/test.bna
index 2278bb3464..ddb82b6753 100644
--- a/autotest/ogr/data/test.bna
+++ b/autotest/ogr/data/test.bna
@@ -100,3 +100,20 @@
 8.0000000000,2.0000000000
 2.0000000000,2.0000000000
 0.0000000000,0.0000000000
+"PID9","SID9",4
+0.0000000000,0.0000000000
+0.0000000000,10.0000000000
+10.0000000000,10.0000000000
+10.0000000000,0.0000000000
+"PID10","SID10",11
+0.0000000000,0.0000000000
+0.0000000000,10.0000000000
+10.0000000000,10.0000000000
+10.0000000000,0.0000000000
+0.0000000000,0.0000000000
+0.0000000000,0.0000000000
+0.0000000000,10.0000000000
+10.0000000000,10.0000000000
+10.0000000000,0.0000000000
+0.0000000000,0.0000000000
+0.0000000000,0.0000000000
\ No newline at end of file
diff --git a/autotest/ogr/ogr_bna.py b/autotest/ogr/ogr_bna.py
index d053505a13..8afa02c811 100755
--- a/autotest/ogr/ogr_bna.py
+++ b/autotest/ogr/ogr_bna.py
@@ -100,7 +100,7 @@ def ogr_bna_3():
 
     lyr = gdaltest.bna_ds.GetLayerByName('test_polygons')
 
-    expect = ['PID2', 'PID1', 'PID7', 'PID8']
+    expect = ['PID2', 'PID1', 'PID7', 'PID8', 'PID9', 'PID10']
 
     tr = ogrtest.check_features_against_list(lyr, 'Primary ID', expect)
     if not tr:
@@ -117,6 +117,12 @@ def ogr_bna_3():
     feat = lyr.GetFeature(3)
     if ogrtest.check_feature_geometry(feat, 'POLYGON ((0 0,0 10,10 10,10 0,0 0),(2 2,2 8,8 8,8 2,2 2))', max_error=0.0001) != 0:
         return 'fail'
+    feat = lyr.GetFeature(4)
+    if ogrtest.check_feature_geometry(feat, 'MULTIPOLYGON (((0 0,0 10,10 10,10 0,0 0)))', max_error=0.0001) != 0:
+        return 'fail'
+    feat = lyr.GetFeature(5)
+    if ogrtest.check_feature_geometry(feat, 'MULTIPOLYGON (((0 0,0 10,10 10,10 0,0 0)))', max_error=0.0001) != 0:
+        return 'fail'
 
     return 'success'
 
@@ -223,8 +229,8 @@ def ogr_bna_6():
         return ret
 
     size = os.stat('tmp/out.bna').st_size
-    if size != 1479:
-        gdaltest.post_reason('Got size %d. Expected %d' % (size, 1479))
+    if size != 1601:
+        gdaltest.post_reason('Got size %d. Expected %d' % (size, 1601))
         return 'fail'
 
     os.remove('tmp/out.bna')
@@ -234,8 +240,8 @@ def ogr_bna_6():
         return ret
 
     size = os.stat('tmp/out.bna').st_size
-    if size != 1487:
-        gdaltest.post_reason('Got size %d. Expected %d' % (size, 1487))
+    if size != 1611:
+        gdaltest.post_reason('Got size %d. Expected %d' % (size, 1611))
         return 'fail'
 
     return 'success'
diff --git a/gdal/ogr/ogr_geometry.h b/gdal/ogr/ogr_geometry.h
index 2b36ea01f2..a143a86bd7 100644
--- a/gdal/ogr/ogr_geometry.h
+++ b/gdal/ogr/ogr_geometry.h
@@ -1169,6 +1169,7 @@ class CPL_DLL OGRSimpleCurve: public OGRCurve
     virtual void setCoordinateDimension( int nDimension ) override;
     virtual void set3D( OGRBoolean bIs3D ) override;
     virtual void setMeasured( OGRBoolean bIsMeasured ) override;
+    void        reserve( int nReservedPointCount );
     void        setNumPoints( int nNewPointCount,
                               int bZeroizeNewContent = TRUE );
     void        setPoint( int, OGRPoint * );
diff --git a/gdal/ogr/ogrsf_frmts/bna/ogrbnalayer.cpp b/gdal/ogr/ogrsf_frmts/bna/ogrbnalayer.cpp
index 0b69d3d390..e953c860bb 100644
--- a/gdal/ogr/ogrsf_frmts/bna/ogrbnalayer.cpp
+++ b/gdal/ogr/ogrsf_frmts/bna/ogrbnalayer.cpp
@@ -601,10 +601,7 @@ OGRFeature *OGRBNALayer::BuildFeatureFromBNARecord (BNARecord* record, long fid)
         int isFirstPolygon = 1;
         double secondaryFirstX = 0.0;
         double secondaryFirstY = 0.0;
-
-        OGRLinearRing* ring = new OGRLinearRing ();
-        ring->setCoordinateDimension(2);
-        ring->addPoint(record->tabCoords[0][0], record->tabCoords[0][1] );
+        int iStartIndex = 0;
 
         /* record->nCoords is really a safe upper bound */
         int nbPolygons = 0;
@@ -615,14 +612,21 @@ OGRFeature *OGRBNALayer::BuildFeatureFromBNARecord (BNARecord* record, long fid)
         int i = 1;
         for( ; i < record->nCoords; i++ )
         {
-            ring->addPoint(record->tabCoords[i][0], record->tabCoords[i][1] );
             if (isFirstPolygon == 1 &&
                 record->tabCoords[i][0] == firstX &&
                 record->tabCoords[i][1] == firstY)
             {
                 OGRPolygon* polygon = new OGRPolygon ();
+                OGRLinearRing* ring = new OGRLinearRing ();
+                ring->setCoordinateDimension(2);
+                ring->setNumPoints(i - iStartIndex + 1, false);
+                for( int j = iStartIndex; j <= i ; ++j )
+                {
+                    ring->setPoint( j - iStartIndex,
+                                    record->tabCoords[j][0],
+                                    record->tabCoords[j][1] );
+                }
                 polygon->addRingDirectly(ring);
-                ring = nullptr;
                 tabPolygons[nbPolygons] = polygon;
                 nbPolygons++;
 
@@ -636,10 +640,7 @@ OGRFeature *OGRBNALayer::BuildFeatureFromBNARecord (BNARecord* record, long fid)
                 i++;
                 secondaryFirstX = record->tabCoords[i][0];
                 secondaryFirstY = record->tabCoords[i][1];
-                ring = new OGRLinearRing ();
-                ring->setCoordinateDimension(2);
-                ring->addPoint( record->tabCoords[i][0],
-                                record->tabCoords[i][1] );
+                iStartIndex = i;
             }
             else if (isFirstPolygon == 0 &&
                     record->tabCoords[i][0] == secondaryFirstX &&
@@ -647,8 +648,17 @@ OGRFeature *OGRBNALayer::BuildFeatureFromBNARecord (BNARecord* record, long fid)
             {
 
                 OGRPolygon* polygon = new OGRPolygon ();
+                OGRLinearRing* ring = new OGRLinearRing ();
+                ring->setCoordinateDimension(2);
+                ring->setNumPoints(i - iStartIndex + 1, false);
+                for( int j = iStartIndex; j <= i ; ++j )
+                {
+                    ring->setPoint( j - iStartIndex,
+                                    record->tabCoords[j][0],
+                                    record->tabCoords[j][1] );
+                }
                 polygon->addRingDirectly(ring);
-                ring = nullptr;
+
                 for( int j = 0; j < nbPolygons; j++ )
                 {
                     if( polygon->Equals(tabPolygons[j]) )
@@ -691,10 +701,7 @@ OGRFeature *OGRBNALayer::BuildFeatureFromBNARecord (BNARecord* record, long fid)
                     i ++;
                     secondaryFirstX = record->tabCoords[i][0];
                     secondaryFirstY = record->tabCoords[i][1];
-                    ring = new OGRLinearRing ();
-                    ring->setCoordinateDimension(2);
-                    ring->addPoint( record->tabCoords[i][0],
-                                    record->tabCoords[i][1] );
+                    iStartIndex = i;
                 }
                 else
                 {
@@ -714,17 +721,28 @@ OGRFeature *OGRBNALayer::BuildFeatureFromBNARecord (BNARecord* record, long fid)
             /* Let's be a bit tolerant about non-closing polygons. */
             if (isFirstPolygon)
             {
-                ring->addPoint( record->tabCoords[0][0],
+                CPLAssert( iStartIndex == 0 );
+                OGRLinearRing* ring = new OGRLinearRing ();
+                ring->setCoordinateDimension(2);
+                ring->setNumPoints(record->nCoords + 1, false);
+                for( int j = 0; j < record->nCoords ; ++j )
+                {
+                    ring->setPoint( j,
+                                    record->tabCoords[j][0],
+                                    record->tabCoords[j][1] );
+                }
+
+                ring->setPoint( record->nCoords,
+                                record->tabCoords[0][0],
                                 record->tabCoords[0][1] );
 
                 OGRPolygon* polygon = new OGRPolygon ();
                 polygon->addRingDirectly(ring);
-                ring = nullptr;
+
                 tabPolygons[nbPolygons] = polygon;
                 nbPolygons++;
             }
         }
-        delete ring;
 
         if (nbPolygons == 1)
         {
