diff --git a/include/envoy/stream_info/stream_info.h b/include/envoy/stream_info/stream_info.h
index c6a0318564..fbec2554d3 100644
--- a/include/envoy/stream_info/stream_info.h
+++ b/include/envoy/stream_info/stream_info.h
@@ -95,6 +95,9 @@ struct ResponseCodeDetailValues {
   // Envoy is doing non-streaming proxying, and the request payload exceeded
   // configured limits.
   const std::string RequestPayloadTooLarge = "request_payload_too_large";
+  // Envoy is doing non-streaming proxying, and the response payload exceeded
+  // configured limits.
+  const std::string ResponsePayloadTooLarge = "response_payload_too_large";
   // Envoy is doing streaming proxying, but too much data arrived while waiting
   // to attempt a retry.
   const std::string RequestPayloadExceededRetryBufferLimit =
@@ -112,8 +115,6 @@ struct ResponseCodeDetailValues {
   const std::string LowVersion = "low_version";
   // The request was rejected due to the Host: or :authority field missing
   const std::string MissingHost = "missing_host_header";
-  // The request was rejected due to the request headers being larger than the configured limit.
-  const std::string RequestHeadersTooLarge = "request_headers_too_large";
   // The request was rejected due to x-envoy-* headers failing strict header validation.
   const std::string InvalidEnvoyRequestHeaders = "request_headers_failed_strict_check";
   // The request was rejected due to the Path or :path header field missing.
diff --git a/source/common/http/conn_manager_impl.cc b/source/common/http/conn_manager_impl.cc
index 94575ac9ff..f10d3052c5 100644
--- a/source/common/http/conn_manager_impl.cc
+++ b/source/common/http/conn_manager_impl.cc
@@ -2550,9 +2550,8 @@ void ConnectionManagerImpl::ActiveStreamEncoderFilter::responseDataTooLarge() {
       // Make sure we won't end up with nested watermark calls from the body buffer.
       parent_.state_.encoder_filters_streaming_ = true;
       allowIteration();
-
       parent_.stream_info_.setResponseCodeDetails(
-          StreamInfo::ResponseCodeDetails::get().RequestHeadersTooLarge);
+          StreamInfo::ResponseCodeDetails::get().ResponsePayloadTooLarge);
       // This does not call the standard sendLocalReply because if there is already response data
       // we do not want to pass a second set of response headers through the filter chain.
       // Instead, call the encodeHeadersInternal / encodeDataInternal helpers
diff --git a/test/common/http/conn_manager_impl_test.cc b/test/common/http/conn_manager_impl_test.cc
index a95be80108..58a22f4087 100644
--- a/test/common/http/conn_manager_impl_test.cc
+++ b/test/common/http/conn_manager_impl_test.cc
@@ -4784,6 +4784,8 @@ TEST_F(HttpConnectionManagerImplTest, HitResponseBufferLimitsBeforeHeaders) {
         EXPECT_EQ("500", headers.getStatusValue());
         // Make sure Envoy standard sanitization has been applied.
         EXPECT_TRUE(headers.Date() != nullptr);
+        EXPECT_EQ("response_payload_too_large",
+                  decoder_filters_[0]->callbacks_->streamInfo().responseCodeDetails().value());
         return FilterHeadersStatus::Continue;
       }));
   EXPECT_CALL(response_encoder_, encodeData(_, true)).WillOnce(AddBufferToString(&response_body));
