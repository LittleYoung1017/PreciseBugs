diff --git a/gdal/third_party/LercLib/BitStuffer2.cpp b/gdal/third_party/LercLib/BitStuffer2.cpp
index 4df31e0b45..475399017d 100644
--- a/gdal/third_party/LercLib/BitStuffer2.cpp
+++ b/gdal/third_party/LercLib/BitStuffer2.cpp
@@ -156,7 +156,7 @@ bool BitStuffer2::EncodeLut(Byte** ppByte, const vector<pair<unsigned int, unsig
 
 // if you change Encode(...) / Decode(...), don't forget to update ComputeNumBytesNeeded(...)
 
-bool BitStuffer2::Decode(const Byte** ppByte, size_t& nBytesRemaining, vector<unsigned int>& dataVec, int lerc2Version) const
+bool BitStuffer2::Decode(const Byte** ppByte, size_t& nBytesRemaining, vector<unsigned int>& dataVec, size_t maxElementCount, int lerc2Version) const
 {
   if (!ppByte || nBytesRemaining < 1)
     return false;
@@ -175,6 +175,8 @@ bool BitStuffer2::Decode(const Byte** ppByte, size_t& nBytesRemaining, vector<un
   unsigned int numElements = 0;
   if (!DecodeUInt(ppByte, nBytesRemaining, numElements, nb))
     return false;
+  if (numElements > maxElementCount)
+    return false;
 
   if (!doLut)
   {
@@ -356,7 +358,14 @@ void BitStuffer2::BitStuff_Before_Lerc2v3(Byte** ppByte, const vector<unsigned i
 bool BitStuffer2::BitUnStuff_Before_Lerc2v3(const Byte** ppByte, size_t& nBytesRemaining, 
     vector<unsigned int>& dataVec, unsigned int numElements, int numBits)
 {
-  dataVec.resize(numElements, 0);    // init with 0
+  try
+  {
+    dataVec.resize(numElements, 0);    // init with 0
+  }
+  catch( const std::bad_alloc& )
+  {
+    return false;
+  }
 
   unsigned int numUInts = (numElements * numBits + 31) / 32;
   unsigned int numBytes = numUInts * sizeof(unsigned int);
@@ -478,12 +487,27 @@ bool BitStuffer2::BitUnStuff(const Byte** ppByte, size_t& nBytesRemaining, vecto
   if (numElements == 0)
     return false;
 
-  dataVec.resize(numElements);
+  try
+  {
+    dataVec.resize(numElements);
+  }
+  catch( const std::bad_alloc& )
+  {
+    return false;
+  }
 
   unsigned int numUInts = (numElements * numBits + 31) / 32;
   unsigned int numBytes = numUInts * sizeof(unsigned int);
 
-  m_tmpBitStuffVec.resize(numUInts);
+  try
+  {
+    m_tmpBitStuffVec.resize(numUInts);
+  }
+  catch( const std::bad_alloc& )
+  {
+    return false;
+  }
+
   m_tmpBitStuffVec[numUInts - 1] = 0;    // set last uint to 0
 
   // copy the bytes from the incoming byte stream
diff --git a/gdal/third_party/LercLib/BitStuffer2.h b/gdal/third_party/LercLib/BitStuffer2.h
index 58f262b221..c6dbfdfebe 100644
--- a/gdal/third_party/LercLib/BitStuffer2.h
+++ b/gdal/third_party/LercLib/BitStuffer2.h
@@ -44,7 +44,7 @@ public:
   // dst buffer is already allocated. byte ptr is moved like a file pointer.
   bool EncodeSimple(Byte** ppByte, const std::vector<unsigned int>& dataVec, int lerc2Version) const;
   bool EncodeLut(Byte** ppByte, const std::vector<std::pair<unsigned int, unsigned int> >& sortedDataVec, int lerc2Version) const;
-  bool Decode(const Byte** ppByte, size_t& nBytesRemaining, std::vector<unsigned int>& dataVec, int lerc2Version) const;
+  bool Decode(const Byte** ppByte, size_t& nBytesRemaining, std::vector<unsigned int>& dataVec, size_t maxElementCount, int lerc2Version) const;
 
   static unsigned int ComputeNumBytesNeededSimple(unsigned int numElem, unsigned int maxElem);
   static unsigned int ComputeNumBytesNeededLut(const std::vector<std::pair<unsigned int, unsigned int> >& sortedDataVec, bool& doLut);
diff --git a/gdal/third_party/LercLib/Huffman.cpp b/gdal/third_party/LercLib/Huffman.cpp
index e3948a86d8..3c19c8db70 100644
--- a/gdal/third_party/LercLib/Huffman.cpp
+++ b/gdal/third_party/LercLib/Huffman.cpp
@@ -201,7 +201,7 @@ bool Huffman::ReadCodeTable(const Byte** ppByte, size_t& nBytesRemainingInOut, i
   {
     vector<unsigned int> dataVec(i1 - i0, 0);
     BitStuffer2 bitStuffer2;
-    if (!bitStuffer2.Decode(&ptr, nBytesRemaining, dataVec, lerc2Version))    // unstuff the code lengths
+    if (!bitStuffer2.Decode(&ptr, nBytesRemaining, dataVec, dataVec.size(), lerc2Version))    // unstuff the code lengths
       return false;
 
     if (dataVec.size() != static_cast<size_t>(i1 - i0))
diff --git a/gdal/third_party/LercLib/Lerc2.h b/gdal/third_party/LercLib/Lerc2.h
index 4922d03f5c..a2d0034ed7 100644
--- a/gdal/third_party/LercLib/Lerc2.h
+++ b/gdal/third_party/LercLib/Lerc2.h
@@ -1295,14 +1295,15 @@ bool Lerc2::ReadTile(const Byte** ppByte, size_t& nBytesRemainingInOut, T* data,
     }
     else
     {
-      if (!m_bitStuffer2.Decode(&ptr, nBytesRemaining, bufferVec, hd.version))
+      size_t maxElementCount = (i1 - i0) * (j1 - j0);
+      if (!m_bitStuffer2.Decode(&ptr, nBytesRemaining, bufferVec, maxElementCount, hd.version))
         return false;
 
       double invScale = 2 * hd.maxZError;    // for int types this is int
       double zMax = (hd.version >= 4 && nDim > 1) ? m_zMaxVec[iDim] : hd.zMax;
       unsigned int* srcPtr = &bufferVec[0];
 
-      if ((int)bufferVec.size() == (i1 - i0) * (j1 - j0))    // all valid
+      if (bufferVec.size() == maxElementCount)    // all valid
       {
         for (int i = i0; i < i1; i++)
         {
