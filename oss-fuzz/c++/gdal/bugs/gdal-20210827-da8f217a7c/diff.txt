diff --git a/gdal/frmts/vrt/vrtrasterband.cpp b/gdal/frmts/vrt/vrtrasterband.cpp
index 8c4a900a38..9f49abc605 100644
--- a/gdal/frmts/vrt/vrtrasterband.cpp
+++ b/gdal/frmts/vrt/vrtrasterband.cpp
@@ -1151,7 +1151,7 @@ void VRTRasterBand::GetFileList(char*** ppapszFileList, int *pnSize,
 int VRTRasterBand::GetOverviewCount()
 
 {
-    VRTDataset* poVRTDS = static_cast<VRTDataset *>( poDS );
+    VRTDataset* poVRTDS = cpl::down_cast<VRTDataset *>( poDS );
     if( !poVRTDS->AreOverviewsEnabled() )
         return 0;
 
@@ -1164,8 +1164,27 @@ int VRTRasterBand::GetOverviewCount()
     if( nOverviewCount )
         return nOverviewCount;
 
-    // If not found, implicit virtual overviews
-    poVRTDS->BuildVirtualOverviews();
+    if( poVRTDS->m_apoOverviews.empty() )
+    {
+        // If not found, implicit virtual overviews
+
+        const std::string osFctId("VRTRasterBand::GetOverviewCount");
+        GDALAntiRecursionGuard oGuard(osFctId);
+        if( oGuard.GetCallDepth() >= 32 )
+        {
+            CPLError(CE_Failure, CPLE_AppDefined, "Recursion detected");
+            return 0;
+        }
+
+        GDALAntiRecursionGuard oGuard2(oGuard, poVRTDS->GetDescription());
+        if( oGuard2.GetCallDepth() >= 2 )
+        {
+            CPLError(CE_Failure, CPLE_AppDefined, "Recursion detected");
+            return 0;
+        }
+
+        poVRTDS->BuildVirtualOverviews();
+    }
     if( !poVRTDS->m_apoOverviews.empty() && poVRTDS->m_apoOverviews[0] )
         return static_cast<int>( poVRTDS->m_apoOverviews.size() );
 
diff --git a/gdal/frmts/vrt/vrtsourcedrasterband.cpp b/gdal/frmts/vrt/vrtsourcedrasterband.cpp
index 717707ce6e..9b447b20fd 100644
--- a/gdal/frmts/vrt/vrtsourcedrasterband.cpp
+++ b/gdal/frmts/vrt/vrtsourcedrasterband.cpp
@@ -152,6 +152,22 @@ CPLErr VRTSourcedRasterBand::IRasterIO( GDALRWFlag eRWFlag,
         return CE_Failure;
     }
 
+    const std::string osFctId("VRTSourcedRasterBand::IRasterIO");
+    GDALAntiRecursionGuard oGuard(osFctId);
+    if( oGuard.GetCallDepth() >= 32 )
+    {
+        CPLError(CE_Failure, CPLE_AppDefined, "Recursion detected");
+        return CE_Failure;
+    }
+
+    GDALAntiRecursionGuard oGuard2(oGuard, poDS->GetDescription());
+    // Allow 2 recursion depths on the same dataset for non-nearest resampling
+    if( oGuard2.GetCallDepth() > 2 )
+    {
+        CPLError(CE_Failure, CPLE_AppDefined, "Recursion detected");
+        return CE_Failure;
+    }
+
     // When using GDALProxyPoolDataset for sources, the recursion will not be
     // detected at VRT opening but when doing RasterIO. As the proxy pool will
     // return the already opened dataset, we can just test a member variable.
@@ -579,6 +595,25 @@ double VRTSourcedRasterBand::GetMinimum( int *pbSuccess )
         return CPLAtofM(pszValue);
     }
 
+    const std::string osFctId("VRTSourcedRasterBand::GetMinimum");
+    GDALAntiRecursionGuard oGuard(osFctId);
+    if( oGuard.GetCallDepth() >= 32 )
+    {
+        CPLError(CE_Failure, CPLE_AppDefined, "Recursion detected");
+        if( pbSuccess != nullptr )
+            *pbSuccess = FALSE;
+        return 0;
+    }
+
+    GDALAntiRecursionGuard oGuard2(oGuard, poDS->GetDescription());
+    if( oGuard2.GetCallDepth() >= 2 )
+    {
+        CPLError(CE_Failure, CPLE_AppDefined, "Recursion detected");
+        if( pbSuccess != nullptr )
+            *pbSuccess = FALSE;
+        return 0;
+    }
+
     if( m_nRecursionCounter > 0 )
     {
         CPLError(
@@ -636,6 +671,25 @@ double VRTSourcedRasterBand::GetMaximum( int *pbSuccess )
         return CPLAtofM(pszValue);
     }
 
+    const std::string osFctId("VRTSourcedRasterBand::GetMaximum");
+    GDALAntiRecursionGuard oGuard(osFctId);
+    if( oGuard.GetCallDepth() >= 32 )
+    {
+        CPLError(CE_Failure, CPLE_AppDefined, "Recursion detected");
+        if( pbSuccess != nullptr )
+            *pbSuccess = FALSE;
+        return 0;
+    }
+
+    GDALAntiRecursionGuard oGuard2(oGuard, poDS->GetDescription());
+    if( oGuard2.GetCallDepth() >= 2 )
+    {
+        CPLError(CE_Failure, CPLE_AppDefined, "Recursion detected");
+        if( pbSuccess != nullptr )
+            *pbSuccess = FALSE;
+        return 0;
+    }
+
     if( m_nRecursionCounter > 0 )
     {
         CPLError( CE_Failure, CPLE_AppDefined,
@@ -711,6 +765,21 @@ CPLErr VRTSourcedRasterBand::ComputeRasterMinMax( int bApproxOK, double* adfMinM
             return poBand->ComputeRasterMinMax( TRUE, adfMinMax );
     }
 
+    const std::string osFctId("VRTSourcedRasterBand::ComputeRasterMinMax");
+    GDALAntiRecursionGuard oGuard(osFctId);
+    if( oGuard.GetCallDepth() >= 32 )
+    {
+        CPLError(CE_Failure, CPLE_AppDefined, "Recursion detected");
+        return CE_Failure;
+    }
+
+    GDALAntiRecursionGuard oGuard2(oGuard, poDS->GetDescription());
+    if( oGuard2.GetCallDepth() >= 2 )
+    {
+        CPLError(CE_Failure, CPLE_AppDefined, "Recursion detected");
+        return CE_Failure;
+    }
+
 /* -------------------------------------------------------------------- */
 /*      Try with source bands.                                          */
 /* -------------------------------------------------------------------- */
@@ -808,6 +877,21 @@ VRTSourcedRasterBand::ComputeStatistics( int bApproxOK,
                                               pfnProgress, pProgressData );
     }
 
+    const std::string osFctId("VRTSourcedRasterBand::ComputeStatistics");
+    GDALAntiRecursionGuard oGuard(osFctId);
+    if( oGuard.GetCallDepth() >= 32 )
+    {
+        CPLError(CE_Failure, CPLE_AppDefined, "Recursion detected");
+        return CE_Failure;
+    }
+
+    GDALAntiRecursionGuard oGuard2(oGuard, poDS->GetDescription());
+    if( oGuard2.GetCallDepth() >= 2 )
+    {
+        CPLError(CE_Failure, CPLE_AppDefined, "Recursion detected");
+        return CE_Failure;
+    }
+
 /* -------------------------------------------------------------------- */
 /*      Try with source bands.                                          */
 /* -------------------------------------------------------------------- */
@@ -903,6 +987,21 @@ CPLErr VRTSourcedRasterBand::GetHistogram( double dfMin, double dfMax,
         }
     }
 
+    const std::string osFctId("VRTSourcedRasterBand::GetHistogram");
+    GDALAntiRecursionGuard oGuard(osFctId);
+    if( oGuard.GetCallDepth() >= 32 )
+    {
+        CPLError(CE_Failure, CPLE_AppDefined, "Recursion detected");
+        return CE_Failure;
+    }
+
+    GDALAntiRecursionGuard oGuard2(oGuard, poDS->GetDescription());
+    if( oGuard2.GetCallDepth() >= 2 )
+    {
+        CPLError(CE_Failure, CPLE_AppDefined, "Recursion detected");
+        return CE_Failure;
+    }
+
 /* -------------------------------------------------------------------- */
 /*      Try with source bands.                                          */
 /* -------------------------------------------------------------------- */
diff --git a/gdal/gcore/gdal_priv.h b/gdal/gcore/gdal_priv.h
index 1711a7d932..e480eac6d5 100644
--- a/gdal/gcore/gdal_priv.h
+++ b/gdal/gcore/gdal_priv.h
@@ -2732,6 +2732,30 @@ public:
 };
 //! @endcond
 
+/************************************************************************/
+/*                       GDALAntiRecursionGuard                         */
+/************************************************************************/
+
+//! @cond Doxygen_Suppress
+struct GDALAntiRecursionStruct;
+class GDALAntiRecursionGuard
+{
+    GDALAntiRecursionStruct* m_psAntiRecursionStruct;
+    std::string m_osIdentifier;
+    int m_nDepth;
+
+    GDALAntiRecursionGuard(const GDALAntiRecursionGuard&) = delete;
+    GDALAntiRecursionGuard& operator= (const GDALAntiRecursionGuard&) = delete;
+
+public:
+    explicit GDALAntiRecursionGuard(const std::string& osIdentifier);
+             GDALAntiRecursionGuard(const GDALAntiRecursionGuard& other, const std::string& osIdentifier);
+    ~GDALAntiRecursionGuard();
+    int GetCallDepth() const { return m_nDepth; }
+};
+//! @endcond
+
+
 /* ==================================================================== */
 /*      An assortment of overview related stuff.                        */
 /* ==================================================================== */
diff --git a/gdal/gcore/gdaldataset.cpp b/gdal/gcore/gdaldataset.cpp
index 4c2ea076e2..ea4bec4a19 100644
--- a/gdal/gcore/gdaldataset.cpp
+++ b/gdal/gcore/gdaldataset.cpp
@@ -2858,12 +2858,11 @@ GDALDatasetAdviseRead( GDALDatasetH hDS,
 }
 
 /************************************************************************/
-/*                         AntiRecursionStruct                          */
+/*                         GDALAntiRecursionStruct                      */
 /************************************************************************/
 
-namespace {
 // Prevent infinite recursion.
-struct AntiRecursionStruct
+struct GDALAntiRecursionStruct
 {
     struct DatasetContext
     {
@@ -2891,19 +2890,19 @@ struct AntiRecursionStruct
 
     std::set<DatasetContext, DatasetContextCompare> aosDatasetNamesWithFlags{};
     int nRecLevel = 0;
+    std::map<std::string, int> m_oMapDepth{};
 };
-} // namespace
 
 #ifdef WIN32
 // Currently thread_local and C++ objects don't work well with DLL on Windows
 static void FreeAntiRecursion( void* pData )
 {
-    delete static_cast<AntiRecursionStruct*>(pData);
+    delete static_cast<GDALAntiRecursionStruct*>(pData);
 }
 
-static AntiRecursionStruct& GetAntiRecursion()
+static GDALAntiRecursionStruct& GetAntiRecursion()
 {
-    static AntiRecursionStruct dummy;
+    static GDALAntiRecursionStruct dummy;
     int bMemoryErrorOccurred = false;
     void* pData = CPLGetTLSEx(CTLS_GDALOPEN_ANTIRECURSION, &bMemoryErrorOccurred);
     if( bMemoryErrorOccurred )
@@ -2912,7 +2911,7 @@ static AntiRecursionStruct& GetAntiRecursion()
     }
     if( pData == nullptr)
     {
-        auto pAntiRecursion = new AntiRecursionStruct();
+        auto pAntiRecursion = new GDALAntiRecursionStruct();
         CPLSetTLSWithFreeFuncEx( CTLS_GDALOPEN_ANTIRECURSION,
                                  pAntiRecursion,
                                  FreeAntiRecursion, &bMemoryErrorOccurred );
@@ -2923,16 +2922,41 @@ static AntiRecursionStruct& GetAntiRecursion()
         }
         return *pAntiRecursion;
     }
-    return *static_cast<AntiRecursionStruct*>(pData);
+    return *static_cast<GDALAntiRecursionStruct*>(pData);
 }
 #else
-static thread_local AntiRecursionStruct g_tls_antiRecursion;
-static AntiRecursionStruct& GetAntiRecursion()
+static thread_local GDALAntiRecursionStruct g_tls_antiRecursion;
+static GDALAntiRecursionStruct& GetAntiRecursion()
 {
     return g_tls_antiRecursion;
 }
 #endif
 
+//! @cond Doxygen_Suppress
+GDALAntiRecursionGuard::GDALAntiRecursionGuard(const std::string& osIdentifier):
+    m_psAntiRecursionStruct(&GetAntiRecursion()),
+    m_osIdentifier(osIdentifier),
+    m_nDepth(++ m_psAntiRecursionStruct->m_oMapDepth[m_osIdentifier])
+{
+    CPLAssert(!osIdentifier.empty());
+}
+
+GDALAntiRecursionGuard::GDALAntiRecursionGuard(const GDALAntiRecursionGuard& other, const std::string& osIdentifier):
+    m_psAntiRecursionStruct(other.m_psAntiRecursionStruct),
+    m_osIdentifier(osIdentifier.empty() ? osIdentifier : other.m_osIdentifier + osIdentifier),
+    m_nDepth(m_osIdentifier.empty() ? 0 : ++ m_psAntiRecursionStruct->m_oMapDepth[m_osIdentifier])
+{
+}
+
+GDALAntiRecursionGuard::~GDALAntiRecursionGuard()
+{
+    if( !m_osIdentifier.empty() )
+    {
+        -- m_psAntiRecursionStruct->m_oMapDepth[m_osIdentifier];
+    }
+}
+//! @endcond
+
 /************************************************************************/
 /*                            GetFileList()                             */
 /************************************************************************/
@@ -2961,8 +2985,8 @@ char **GDALDataset::GetFileList()
     CPLString osMainFilename = GetDescription();
     VSIStatBufL sStat;
 
-    AntiRecursionStruct& sAntiRecursion = GetAntiRecursion();
-    const AntiRecursionStruct::DatasetContext datasetCtxt(
+    GDALAntiRecursionStruct& sAntiRecursion = GetAntiRecursion();
+    const GDALAntiRecursionStruct::DatasetContext datasetCtxt(
         osMainFilename, 0, 0);
     auto& aosDatasetList = sAntiRecursion.aosDatasetNamesWithFlags;
     if( aosDatasetList.find(datasetCtxt) != aosDatasetList.end() )
@@ -3331,7 +3355,7 @@ GDALDatasetH CPL_STDCALL GDALOpenEx( const char *pszFilename,
                            const_cast<char **>(papszSiblingFiles));
     oOpenInfo.papszAllowedDrivers = papszAllowedDrivers;
 
-    AntiRecursionStruct& sAntiRecursion = GetAntiRecursion();
+    GDALAntiRecursionStruct& sAntiRecursion = GetAntiRecursion();
     if( sAntiRecursion.nRecLevel == 100 )
     {
         CPLError(CE_Failure, CPLE_AppDefined,
@@ -3339,7 +3363,7 @@ GDALDatasetH CPL_STDCALL GDALOpenEx( const char *pszFilename,
         return nullptr;
     }
 
-    auto dsCtxt = AntiRecursionStruct::DatasetContext(
+    auto dsCtxt = GDALAntiRecursionStruct::DatasetContext(
         std::string(pszFilename), nOpenFlags, CSLCount(papszAllowedDrivers));
     if( sAntiRecursion.aosDatasetNamesWithFlags.find(dsCtxt) !=
                 sAntiRecursion.aosDatasetNamesWithFlags.end() )
