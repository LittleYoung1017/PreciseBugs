diff --git a/autotest/gdrivers/zarr_driver.py b/autotest/gdrivers/zarr_driver.py
index a3bc301605..3927f615f3 100644
--- a/autotest/gdrivers/zarr_driver.py
+++ b/autotest/gdrivers/zarr_driver.py
@@ -2539,3 +2539,64 @@ def test_zarr_advise_read(compression):
     finally:
         gdal.RmdirRecursive(filename)
 
+
+
+def test_zarr_read_invalid_nczarr_dim():
+
+    try:
+        gdal.Mkdir('/vsimem/test.zarr', 0)
+
+        j = { "chunks": [1,1],
+              "compressor": None,
+              "dtype": '!b1',
+              "fill_value": None,
+              "filters": None,
+              "order": "C",
+              "shape": [ 1,1 ],
+              "zarr_format": 2,
+              "_NCZARR_ARRAY":{"dimrefs":["/MyGroup/lon", "/OtherGroup/lat"]}
+        }
+
+        gdal.FileFromMemBuffer('/vsimem/test.zarr/.zarray', json.dumps(j))
+
+        j = { "chunks": [1],
+              "compressor": None,
+              "dtype": '!b1',
+              "fill_value": None,
+              "filters": None,
+              "order": "C",
+              "shape": [ 1 ],
+              "zarr_format": 2
+        }
+
+        gdal.FileFromMemBuffer('/vsimem/test.zarr/MyGroup/lon/.zarray', json.dumps(j))
+
+        j = { "_NCZARR_GROUP":{ "dims":{ "lon": 0 } } }
+
+        gdal.FileFromMemBuffer('/vsimem/test.zarr/MyGroup/.zgroup', json.dumps(j))
+
+        j = { "chunks": [2],
+              "compressor": None,
+              "dtype": '!b1',
+              "fill_value": None,
+              "filters": None,
+              "order": "C",
+              "shape": [ 2 ],
+              "zarr_format": 2
+        }
+
+        gdal.FileFromMemBuffer('/vsimem/test.zarr/OtherGroup/lat/.zarray', json.dumps(j))
+
+        j = { "_NCZARR_GROUP":{ "dims":{ "lat": 2, "invalid.name": 2 } } }
+
+        gdal.FileFromMemBuffer('/vsimem/test.zarr/OtherGroup/.zgroup', json.dumps(j))
+
+        with gdaltest.error_handler():
+            ds = gdal.OpenEx('/vsimem/test.zarr', gdal.OF_MULTIDIM_RASTER)
+            assert ds
+            rg = ds.GetRootGroup()
+            ar = rg.OpenMDArray('test')
+            assert ar
+
+    finally:
+        gdal.RmdirRecursive('/vsimem/test.zarr')
diff --git a/gdal/frmts/zarr/zarr_array.cpp b/gdal/frmts/zarr/zarr_array.cpp
index 499dfbd81d..27b2246bb7 100644
--- a/gdal/frmts/zarr/zarr_array.cpp
+++ b/gdal/frmts/zarr/zarr_array.cpp
@@ -3359,7 +3359,20 @@ std::shared_ptr<ZarrArray> ZarrGroupBase::LoadArray(const std::string& osArrayNa
                 {
                     const auto osDimFullpath = arrayDims[i].ToString();
                     auto poDim = poRG->OpenDimensionFromFullname(osDimFullpath);
-                    if( poDim )
+                    if( poDim == nullptr )
+                    {
+                        CPLError(CE_Failure, CPLE_AppDefined,
+                                 "Cannot find NCZarr dimension %s",
+                                 osDimFullpath.c_str());
+                    }
+                    else if( poDim->GetSize() != aoDims[i]->GetSize() )
+                    {
+                        CPLError(CE_Failure, CPLE_AppDefined,
+                                 "Inconsistency in size between NCZarr "
+                                 "dimension %s and regular dimension",
+                                 osDimFullpath.c_str());
+                    }
+                    else
                     {
                         aoDims[i] = poDim;
 
diff --git a/gdal/frmts/zarr/zarr_group.cpp b/gdal/frmts/zarr/zarr_group.cpp
index 31c4049cd0..3e81e5c3fe 100644
--- a/gdal/frmts/zarr/zarr_group.cpp
+++ b/gdal/frmts/zarr/zarr_group.cpp
@@ -638,18 +638,6 @@ bool ZarrGroupV2::InitFromZGroup(const CPLJSONObject& obj)
             }
         }
 
-        // Create dimensions first, as they will be potentially patched
-        // by the OpenMDArray() later
-        const auto dims = nczarrGroup["dims"];
-        for( const auto& jDim: dims.GetChildren() )
-        {
-            const GUInt64 nSize = jDim.ToLong();
-            CreateDimension(jDim.GetName(),
-                            std::string(), // type
-                            std::string(), // direction,
-                            nSize, nullptr);
-        }
-
         const auto IsValidName = [](const std::string& s)
         {
             return !s.empty() &&
@@ -659,6 +647,34 @@ bool ZarrGroupV2::InitFromZGroup(const CPLJSONObject& obj)
                    s.find("\\") == std::string::npos;
         };
 
+        // Create dimensions first, as they will be potentially patched
+        // by the OpenMDArray() later
+        const auto dims = nczarrGroup["dims"];
+        for( const auto& jDim: dims.GetChildren() )
+        {
+            const auto osName = jDim.GetName();
+            const GUInt64 nSize = jDim.ToLong();
+            if( !IsValidName(osName) )
+            {
+                CPLError(CE_Failure, CPLE_AppDefined,
+                         "Invalid dimension name for %s",
+                         osName.c_str());
+            }
+            else if( nSize == 0 )
+            {
+                CPLError(CE_Failure, CPLE_AppDefined,
+                         "Invalid dimension size for %s",
+                         osName.c_str());
+            }
+            else
+            {
+                CreateDimension(osName,
+                                std::string(), // type
+                                std::string(), // direction,
+                                nSize, nullptr);
+            }
+        }
+
         const auto vars = nczarrGroup["vars"].ToArray();
         // open first indexing variables
         for( const auto& var: vars )
