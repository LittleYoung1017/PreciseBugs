diff --git a/autotest/ogr/ogr_avc.py b/autotest/ogr/ogr_avc.py
index d022e6655d..e1453e1ff7 100755
--- a/autotest/ogr/ogr_avc.py
+++ b/autotest/ogr/ogr_avc.py
@@ -65,6 +65,9 @@ def ogr_avc_1():
 
     # Example given at Annex A of http://avce00.maptools.org/docs/v7_e00_cover.html
     avc_ds = ogr.Open( 'data/test.e00' )
+    if avc_ds.GetLayer(0).GetSpatialRef() is None:
+        gdaltest.post_reason('expected SRS')
+        return 'fail'
 
     if avc_ds is not None:
         return check_content(avc_ds)
@@ -77,6 +80,9 @@ def ogr_avc_1():
 def ogr_avc_2():
 
     avc_ds = ogr.Open( 'data/testavc/testavc' )
+    if avc_ds.GetLayer(0).GetSpatialRef() is None:
+        gdaltest.post_reason('expected SRS')
+        return 'fail'
 
     if avc_ds is not None:
         return check_content(avc_ds)
diff --git a/gdal/ogr/ogrsf_frmts/avc/ogravce00datasource.cpp b/gdal/ogr/ogrsf_frmts/avc/ogravce00datasource.cpp
index 4d4e9d8059..702dbcae16 100644
--- a/gdal/ogr/ogrsf_frmts/avc/ogravce00datasource.cpp
+++ b/gdal/ogr/ogrsf_frmts/avc/ogravce00datasource.cpp
@@ -152,7 +152,7 @@ int OGRAVCE00DataSource::Open( const char * pszNewName, int bTestOpen )
                                     psE00->eCoverType,
                                     psSec->eType,
                                     psE00->psDBCSInfo);
-              if( hFile && poSRS == nullptr )
+              if( hFile && poSRS == NULL )
               {
                   char **papszPRJ = AVCE00ReadNextPrj( hFile );
 
@@ -162,7 +162,7 @@ int OGRAVCE00DataSource::Open( const char * pszNewName, int bTestOpen )
                       CPLError( CE_Warning, CPLE_AppDefined,
                                 "Failed to parse PRJ section, ignoring." );
                       delete poSRS;
-                      poSRS = nullptr;
+                      poSRS = NULL;
                   }
                   AVCE00ReadClose( hFile );
               }
@@ -224,18 +224,24 @@ OGRSpatialReference *OGRAVCE00DataSource::GetSpatialRef()
     for( int iSection = 0; iSection < psE00->numSections; iSection++ )
     {
         AVCE00Section *psSec = psE00->pasSections + iSection;
-        if (psSec->eType == AVCFilePRJ)
+        if (psSec->eType == AVCFilePRJ )
         {
             AVCE00ReadGotoSectionE00(psE00, psSec, 0);
-            char **pszPRJ
-                = static_cast<char **>( AVCE00ReadNextObjectE00(psE00) );
-            poSRS = new OGRSpatialReference();
-            if( poSRS->importFromESRI( pszPRJ ) != OGRERR_NONE )
+            void* obj = AVCE00ReadNextObjectE00(psE00);
+            if( psE00->hParseInfo->eFileType == AVCFilePRJ )
             {
-                CPLError( CE_Warning, CPLE_AppDefined,
-                          "Failed to parse PRJ section, ignoring." );
-                delete poSRS;
-                poSRS = nullptr;
+                char **pszPRJ = static_cast<char **>(obj);
+                if( pszPRJ )
+                {
+                    poSRS = new OGRSpatialReference();
+                    if( poSRS->importFromESRI( pszPRJ ) != OGRERR_NONE )
+                    {
+                        CPLError( CE_Warning, CPLE_AppDefined,
+                                "Failed to parse PRJ section, ignoring." );
+                        delete poSRS;
+                        poSRS = nullptr;
+                    }
+                }
             }
             break;
         }
