diff --git a/gdal/ogr/ogrsf_frmts/avc/avc.h b/gdal/ogr/ogrsf_frmts/avc/avc.h
index 15367d7198..76fbf494b1 100644
--- a/gdal/ogr/ogrsf_frmts/avc/avc.h
+++ b/gdal/ogr/ogrsf_frmts/avc/avc.h
@@ -494,28 +494,28 @@ typedef struct AVCE00GenInfo_t
  * their buffer and their current state while parsing an object.
  *--------------------------------------------------------------------*/
 
-typedef struct AVCE00ParseInfo_t
+struct AVCE00ParseInfo
 {
-    AVCFileType eFileType;
-    int         nPrecision;     /* AVC_SINGLE/DOUBLE_PREC       */
-    int         iCurItem;
-    int         numItems;
-    int         nStartLineNum;
-    int         nCurLineNum;
-
-    int         nCurObjectId;
-    GBool       bForceEndOfSection;  /* For sections that don't have an */
+    AVCFileType eFileType = AVCFileUnknown;
+    int         nPrecision = 0;     /* AVC_SINGLE/DOUBLE_PREC       */
+    int         iCurItem = 0;
+    int         numItems = 0;
+    int         nStartLineNum = 0;
+    int         nCurLineNum = 0;
+
+    int         nCurObjectId = 0;
+    GBool       bForceEndOfSection = 0;  /* For sections that don't have an */
                                      /* explicit end-of-section line.   */
-    AVCFileType eSuperSectionType;/* For sections containing several files*/
-    char        *pszSectionHdrLine;  /* Used by supersection types      */
+    AVCFileType eSuperSectionType = AVCFileUnknown;/* For sections containing several files*/
+    char        *pszSectionHdrLine = nullptr;  /* Used by supersection types      */
 
-    union
+    struct
     {
-        AVCTableDef  *psTableDef;
-    }hdr;
-    GBool       bTableHdrComplete;   /* FALSE until table header is */
+        AVCTableDef  *psTableDef = nullptr;
+    } hdr;
+    GBool       bTableHdrComplete = 0;   /* FALSE until table header is */
                                      /* finished parsing */
-    int         nTableE00RecLength;
+    int         nTableE00RecLength = 0;
 
     /* cur.* : temp. storage used to store current object (ARC, PAL, ... or
      *         Table record) from the file.
@@ -530,12 +530,14 @@ typedef struct AVCE00ParseInfo_t
         AVCTxt       *psTxt;
         AVCRxp       *psRxp;
         AVCField     *pasFields;
-        char         **papszPrj;
     }cur;
+    CPLStringList aosPrj;
 
-    char        *pszBuf;        /* Buffer used only for TABLEs  */
-    int         nBufSize;
-}AVCE00ParseInfo;
+    char        *pszBuf = nullptr;        /* Buffer used only for TABLEs  */
+    int         nBufSize = 0;
+
+    AVCE00ParseInfo() { cur.psArc = nullptr; }
+};
 
 /*---------------------------------------------------------------------
  * Stuff related to the transparent binary -> E00 conversion
diff --git a/gdal/ogr/ogrsf_frmts/avc/avc_e00parse.cpp b/gdal/ogr/ogrsf_frmts/avc/avc_e00parse.cpp
index 2f6b897ab4..aba294fdf9 100644
--- a/gdal/ogr/ogrsf_frmts/avc/avc_e00parse.cpp
+++ b/gdal/ogr/ogrsf_frmts/avc/avc_e00parse.cpp
@@ -145,10 +145,7 @@ AVCE00ParseInfo  *AVCE00ParseInfoAlloc(void)
 {
     AVCE00ParseInfo       *psInfo;
 
-    psInfo = (AVCE00ParseInfo*)CPLCalloc(1,sizeof(AVCE00ParseInfo));
-
-    psInfo->eFileType = AVCFileUnknown;
-    psInfo->eSuperSectionType = AVCFileUnknown;
+    psInfo = new AVCE00ParseInfo();
 
     /* Allocate output buffer.
      * 2k should be enough... the biggest thing we'll need to store
@@ -208,8 +205,7 @@ void    _AVCE00ParseDestroyCurObject(AVCE00ParseInfo  *psInfo)
     }
     else if (psInfo->eFileType == AVCFilePRJ)
     {
-        CSLDestroy(psInfo->cur.papszPrj);
-        psInfo->cur.papszPrj = nullptr;
+        psInfo->aosPrj.Clear();
     }
     else if (psInfo->eFileType == AVCFileTXT ||
              psInfo->eFileType == AVCFileTX6)
@@ -256,7 +252,7 @@ void    AVCE00ParseInfoFree(AVCE00ParseInfo  *psInfo)
         _AVCE00ParseDestroyCurObject(psInfo);
     }
 
-    CPLFree(psInfo);
+    delete psInfo;
 }
 
 /**********************************************************************
@@ -507,7 +503,7 @@ AVCFileType  AVCE00ParseSectionHeader(AVCE00ParseInfo  *psInfo,
     }
     else if (eNewType == AVCFilePRJ)
     {
-        psInfo->cur.papszPrj = nullptr;
+        psInfo->aosPrj.Clear();
     }
     else if (eNewType == AVCFileTXT ||
              eNewType == AVCFileTX6)
@@ -1276,7 +1272,7 @@ char  **AVCE00ParseNextPrjLine(AVCE00ParseInfo *psInfo, const char *pszLine)
          * We reached end of section... return the PRJ.
          *------------------------------------------------------------*/
         psInfo->bForceEndOfSection = TRUE;
-        return psInfo->cur.papszPrj;
+        return psInfo->aosPrj.List();
     }
 
     if ( pszLine[0] != '~' )
@@ -1284,7 +1280,7 @@ char  **AVCE00ParseNextPrjLine(AVCE00ParseInfo *psInfo, const char *pszLine)
         /*-------------------------------------------------------------
          * This is a new line... add it to the papszPrj stringlist.
          *------------------------------------------------------------*/
-        psInfo->cur.papszPrj = CSLAddString(psInfo->cur.papszPrj, pszLine);
+        psInfo->aosPrj.AddString(pszLine);
     }
     else if ( strlen(pszLine) > 1 )
     {
@@ -1292,17 +1288,16 @@ char  **AVCE00ParseNextPrjLine(AVCE00ParseInfo *psInfo, const char *pszLine)
          * '~' is a line continuation char.  Append what follows the '~'
          * to the end of the previous line.
          *------------------------------------------------------------*/
-        int  iLastLine, nNewLen;
-
-        iLastLine = CSLCount(psInfo->cur.papszPrj) - 1;
-        if (iLastLine >= 0)
+        if (!psInfo->aosPrj.empty())
         {
-            nNewLen = (int)strlen(psInfo->cur.papszPrj[iLastLine])+(int)strlen(pszLine)-1+1;
-            psInfo->cur.papszPrj[iLastLine] =
-                  (char*)CPLRealloc(psInfo->cur.papszPrj[iLastLine],
-                                    nNewLen * sizeof(char));
-
-            strcat(psInfo->cur.papszPrj[iLastLine], pszLine+1);
+            size_t nOldLen = strlen(psInfo->aosPrj.List()[psInfo->aosPrj.size()-1]);
+            size_t nAddLen = strlen(pszLine + 1);
+            psInfo->aosPrj.List()[psInfo->aosPrj.size()-1] =
+                static_cast<char*>(CPLRealloc(
+                    psInfo->aosPrj.List()[psInfo->aosPrj.size()-1],
+                    nOldLen + nAddLen + 1));
+            memcpy(psInfo->aosPrj.List()[psInfo->aosPrj.size()-1] + nOldLen,
+                   pszLine + 1, nAddLen + 1);
         }
     }
 
