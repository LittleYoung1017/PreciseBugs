dba690145	4fec46512	Fri Jul 22 09:54:11 2022 +0100	Fixes Crash unknown read in ntfs_dir_open_meta	commit dba69014523b470eb7313c680cc58316c2c15df4Author: Aleks L <93376818+sashashura@users.noreply.github.com>Date:   Fri Jul 22 09:54:11 2022 +0100    Fixes Crash unknown read in ntfs_dir_open_meta        https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=34415        The root cause is in `for (off = 0; off < idxalloc_len; off += ntfs->csize_b)` - the `int off` overflows and becomes negative which later is used in `idxalloc[off]`
eb18a559f	4fec46512	Fri Jul 22 09:50:47 2022 +0100	Fixes heap use after free read	commit eb18a559f140da76734627b6543baddb67022f70Author: Aleks L <93376818+sashashura@users.noreply.github.com>Date:   Fri Jul 22 09:50:47 2022 +0100    Fixes heap use after free read        https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=36024 and    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=36098 and    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=36021 and    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=36122 and    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=38365        The `val_data` points to invalid memory because of invalid `t.val_offset`.
a650e0fe6	4fec46512	Fri Jul 22 09:45:17 2022 +0100	Fixes Crash Unknown Read in std::__1::enable_if<true, memory_view>::type	commit a650e0fe607c16ad3c0677f38334eb63c4e3f5a0Author: Aleks L <93376818+sashashura@users.noreply.github.com>Date:   Fri Jul 22 09:45:17 2022 +0100    Fixes Crash Unknown Read in std::__1::enable_if<true, memory_view>::type        https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=36027 and    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=36025        The `_table_data.toc` points to invalid memory because of the wrong offset set in `APFSBtreeNode` constructor.
74858daf6	4fec46512	Fri Jul 22 09:37:11 2022 +0100	Fixes Heap-buffer-overflow READ in tsk_stack_pop	commit 74858daf6ed2a58c85653dfebe740a5622b08e4bAuthor: Aleks L <93376818+sashashura@users.noreply.github.com>Date:   Fri Jul 22 09:37:11 2022 +0100    Fixes Heap-buffer-overflow READ in tsk_stack_pop        https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=36955        The `stack_seen` pointer gets corrupted because of `strncat(a_dinfo->dirs, "/", DIR_STRSZ-1);` in `tsk_fs_dir_walk_recursive`.    When the `a_dinfo->dirs` buffer is full (4095 chars are filled with data and the last 4096's char (index 4095) is '\0')    the `strncat(a_dinfo->dirs, "/", DIR_STRSZ-1);` copies '/' to the last char in the buffer and terminating '\0' out of the buffer bounds.    `strncat` does not check for sufficient space in `a_dinfo->dirs`, the last parameter `DIR_STRSZ-1` tells the max characters to copy from the source.    Since the buffer is a field in the `DENT_DINFO` structure, it overwrites a single byte in the next member - `stack_seen` pointer.
7a24f4c9e	4fec46512	Fri Jul 22 09:34:53 2022 +0100	Fixes Heap-buffer-overflow READ in ntfs_make_data_run	commit 7a24f4c9e10a7dbe2564f5cacdb29abb98edfe86Author: Aleks L <93376818+sashashura@users.noreply.github.com>Date:   Fri Jul 22 09:34:53 2022 +0100    Fixes Heap-buffer-overflow READ in ntfs_make_data_run        https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=46779        The `runlist_head` parameter in `ntfs_make_data_run` called from `ntfs_load_bmap` is calculated as `data_attr + run_off`.    Even though it is checked before as:    ```cpp    if ((run_off < 48) || (run_off >= attr_len)) {    ```    it points beyond `mft + ntfs->mft_rsize_b`.
54380c8c9	4fec46512	Fri Jul 22 09:31:14 2022 +0100	Fixes Heap-buffer-overflow READ in tsk_UTF16toUTF8	commit 54380c8c98a78de73a52c279dde424df4009fb30Author: Aleks L <93376818+sashashura@users.noreply.github.com>Date:   Fri Jul 22 09:31:14 2022 +0100    Fixes Heap-buffer-overflow READ in tsk_UTF16toUTF8        https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=43923        The `sourceEnd` in `tsk_UTF16toUTF8` is calculated as `(UTF16 *) ((uintptr_t) name16 + fname->nlen * 2)` in `ntfs_dent_copy` points past the `endaddr` calculated in `ntfs_proc_idxentry`.
