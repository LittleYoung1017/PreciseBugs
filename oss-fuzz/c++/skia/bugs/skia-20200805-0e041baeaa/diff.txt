diff --git a/src/sksl/SkSLMetalCodeGenerator.cpp b/src/sksl/SkSLMetalCodeGenerator.cpp
index ad2ca45dd9..026c85ed15 100644
--- a/src/sksl/SkSLMetalCodeGenerator.cpp
+++ b/src/sksl/SkSLMetalCodeGenerator.cpp
@@ -439,33 +439,38 @@ String MetalCodeGenerator::getMatrixConstructHelper(const Constructor& c) {
             fExtraFunctions.printf("%s", rowSeparator);
             rowSeparator = ", ";
 
-            const Type& argType = args[argIndex]->fType;
-            switch (argType.kind()) {
-                case Type::kScalar_Kind: {
-                    fExtraFunctions.printf("x%zu", argIndex);
-                    break;
-                }
-                case Type::kVector_Kind: {
-                    fExtraFunctions.printf("x%zu[%d]", argIndex, argPosition);
-                    break;
-                }
-                case Type::kMatrix_Kind: {
-                    fExtraFunctions.printf("x%zu[%d][%d]", argIndex,
-                                           argPosition / argType.rows(),
-                                           argPosition % argType.rows());
-                    break;
-                }
-                default: {
-                    SkDEBUGFAIL("incorrect type of argument for matrix constructor");
-                    fExtraFunctions.printf("<error>");
-                    break;
+            if (argIndex < args.size()) {
+                const Type& argType = args[argIndex]->fType;
+                switch (argType.kind()) {
+                    case Type::kScalar_Kind: {
+                        fExtraFunctions.printf("x%zu", argIndex);
+                        break;
+                    }
+                    case Type::kVector_Kind: {
+                        fExtraFunctions.printf("x%zu[%d]", argIndex, argPosition);
+                        break;
+                    }
+                    case Type::kMatrix_Kind: {
+                        fExtraFunctions.printf("x%zu[%d][%d]", argIndex,
+                                               argPosition / argType.rows(),
+                                               argPosition % argType.rows());
+                        break;
+                    }
+                    default: {
+                        SkDEBUGFAIL("incorrect type of argument for matrix constructor");
+                        fExtraFunctions.printf("<error>");
+                        break;
+                    }
                 }
-            }
 
-            ++argPosition;
-            if (argPosition >= argType.columns() * argType.rows()) {
-                ++argIndex;
-                argPosition = 0;
+                ++argPosition;
+                if (argPosition >= argType.columns() * argType.rows()) {
+                    ++argIndex;
+                    argPosition = 0;
+                }
+            } else {
+                SkDEBUGFAIL("not enough arguments for matrix constructor");
+                fExtraFunctions.printf("<error>");
             }
         }
     }
