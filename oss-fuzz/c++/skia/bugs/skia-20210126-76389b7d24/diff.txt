diff --git a/gn/sksl_tests.gni b/gn/sksl_tests.gni
index 8c5b076bbb..fedbb77d1d 100644
--- a/gn/sksl_tests.gni
+++ b/gn/sksl_tests.gni
@@ -120,6 +120,7 @@ sksl_error_tests = [
   "/sksl/errors/Ossfuzz27650.sksl",
   "/sksl/errors/Ossfuzz27663.sksl",
   "/sksl/errors/Ossfuzz29085.sksl",
+  "/sksl/errors/Ossfuzz29845.sksl",
   "/sksl/errors/OverflowFloatLiteral.sksl",
   "/sksl/errors/OverflowIntLiteral.sksl",
   "/sksl/errors/OverflowParamArraySize.sksl",
diff --git a/resources/sksl/errors/Ossfuzz29845.sksl b/resources/sksl/errors/Ossfuzz29845.sksl
new file mode 100644
index 0000000000..3b5b004887
--- /dev/null
+++ b/resources/sksl/errors/Ossfuzz29845.sksl
@@ -0,0 +1,3 @@
+struct Test {
+    l();
+    void m();
diff --git a/src/sksl/SkSLParser.cpp b/src/sksl/SkSLParser.cpp
index 57ef2bfb2a..e6535ba93e 100644
--- a/src/sksl/SkSLParser.cpp
+++ b/src/sksl/SkSLParser.cpp
@@ -531,24 +531,38 @@ ASTNode::ID Parser::declaration() {
     }
 }
 
+/* (varDeclarations | expressionStatement) */
+ASTNode::ID Parser::varDeclarationsOrExpressionStatement() {
+    if (this->isType(this->text(this->peek()))) {
+        // Statements that begin with a typename are most often variable declarations, but
+        // occasionally the type is part of a constructor, and these are actually expression-
+        // statements in disguise. First, attempt the common case: parse it as a vardecl.
+        Checkpoint checkpoint(this);
+        ASTNode::ID node = this->varDeclarations();
+        if (node) {
+            return node;
+        }
+
+        // If this statement wasn't actually a vardecl after all, rewind and try parsing it as an
+        // expression-statement instead.
+        checkpoint.rewind();
+    }
+
+    return this->expressionStatement();
+}
+
 /* modifiers type IDENTIFIER varDeclarationEnd */
 ASTNode::ID Parser::varDeclarations() {
-    // We identify statements that begin with a type name as variable declarations, but some of
-    // these are actually expression-statements in disguise. So if we get a parse failure here, we
-    // rewind and retry the parse as an expression-statement.
     Checkpoint checkpoint(this);
     Modifiers modifiers = this->modifiers();
     ASTNode::ID type = this->type();
     if (!type) {
-        checkpoint.rewind();
-        return this->expressionStatement();
+        return ASTNode::ID::Invalid();
     }
     Token name;
     if (!this->expectIdentifier(&name)) {
-        checkpoint.rewind();
-        return this->expressionStatement();
+        return ASTNode::ID::Invalid();
     }
-    // At this point we're fully committed to parsing the statement as a vardecl.
     return this->varDeclarationEnd(modifiers, type, this->text(name));
 }
 
@@ -1119,10 +1133,7 @@ ASTNode::ID Parser::statement() {
         case Token::Kind::TK_CONST:
             return this->varDeclarations();
         case Token::Kind::TK_IDENTIFIER:
-            if (this->isType(this->text(start))) {
-                return this->varDeclarations();
-            }
-            [[fallthrough]];
+            return this->varDeclarationsOrExpressionStatement();
         default:
             return this->expressionStatement();
     }
diff --git a/src/sksl/SkSLParser.h b/src/sksl/SkSLParser.h
index afd4ccb733..c2a679f3a7 100644
--- a/src/sksl/SkSLParser.h
+++ b/src/sksl/SkSLParser.h
@@ -172,6 +172,8 @@ private:
 
     ASTNode::ID declaration();
 
+    ASTNode::ID varDeclarationsOrExpressionStatement();
+
     ASTNode::ID varDeclarations();
 
     ASTNode::ID structDeclaration();
diff --git a/tests/sksl/errors/Ossfuzz29845.glsl b/tests/sksl/errors/Ossfuzz29845.glsl
new file mode 100644
index 0000000000..2cf7d592da
--- /dev/null
+++ b/tests/sksl/errors/Ossfuzz29845.glsl
@@ -0,0 +1,4 @@
+### Compilation failed:
+
+error: 2: no type named 'l'
+1 error
