diff --git a/autotest/gdrivers/grib.py b/autotest/gdrivers/grib.py
index 72242f4551..0df0b53894 100755
--- a/autotest/gdrivers/grib.py
+++ b/autotest/gdrivers/grib.py
@@ -1286,23 +1286,32 @@ def grib_grib2_write_data_encodings():
     for encoding in encodings:
         tmpfilename = '/vsimem/out.grb2'
         gdal.ErrorReset()
-        gdal.Translate( tmpfilename, test_ds, format = 'GRIB', creationOptions = ['DATA_ENCODING=' + encoding] )
-        error_msg = gdal.GetLastErrorMsg()
-        if error_msg != '':
-            gdaltest.post_reason('did not expect error for %s, %s' % (str(filename), str(options)))
-            return 'fail'
-        out_ds = gdal.Open(tmpfilename)
-        got_vals = struct.unpack(4 * 'd', out_ds.ReadRaster())
-        out_ds = None
-        gdal.Unlink(tmpfilename)
-        if encoding == 'IEEE_FLOATING_POINT':
-            expected_vals = (1.23, 1.45, 1.56, 1.78)
+        options = ['DATA_ENCODING=' + encoding]
+        if encoding == 'COMPLEX_PACKING':
+            with gdaltest.error_handler():
+                success = gdal.Translate( tmpfilename, test_ds, format = 'GRIB', creationOptions = options )
+            if success:
+                gdaltest.post_reason('expected error for %s, %s' % ('floating point data with dynamic < 1', str(options)))
+                return 'fail'
         else:
-            expected_vals = (1.2300000190734863, 1.4487500190734863, 1.5581250190734863, 1.7807812690734863)
-        if max([abs(got_vals[i] - expected_vals[i]) for i in range(4)]) > 1e-7:
-            gdaltest.post_reason('did not get expected values')
-            print(got_vals)
-            return 'fail'
+            gdal.Translate( tmpfilename, test_ds, format = 'GRIB', creationOptions = options )
+            error_msg = gdal.GetLastErrorMsg()
+            if error_msg != '':
+                gdaltest.post_reason('did not expect error for %s, %s' % ('floating point data with dynamic < 1', str(options)))
+                return 'fail'
+            out_ds = gdal.Open(tmpfilename)
+            got_vals = struct.unpack(4 * 'd', out_ds.ReadRaster())
+            out_ds = None
+            if encoding == 'IEEE_FLOATING_POINT':
+                expected_vals = (1.23, 1.45, 1.56, 1.78)
+            else:
+                expected_vals = (1.2300000190734863, 1.4487500190734863, 1.5581250190734863, 1.7807812690734863)
+            if max([abs(got_vals[i] - expected_vals[i]) for i in range(4)]) > 1e-7:
+                gdaltest.post_reason('did not get expected values')
+                print(got_vals)
+                return 'fail'
+        gdal.Unlink(tmpfilename)
+
     test_ds = None
 
     # Test floating point data with very large dynamic
diff --git a/gdal/frmts/grib/degrib/g2clib/reduce.c b/gdal/frmts/grib/degrib/g2clib/reduce.c
index b20e33b85d..37e0a585ec 100644
--- a/gdal/frmts/grib/degrib/g2clib/reduce.c
+++ b/gdal/frmts/grib/degrib/g2clib/reduce.c
@@ -111,6 +111,12 @@
 /*           NONE */
 
 
+    if( *kbit <= 0 || *kbit > 32 )
+    {
+        *ier = 714;
+        return 0;
+    }
+
 /*        NEWBOX( ) AND NEWBOXP( ) were AUTOMATIC ARRAYS. */
     newbox = (integer *)calloc(*ndg,sizeof(integer));
     newboxp = (integer *)calloc(*ndg,sizeof(integer));
