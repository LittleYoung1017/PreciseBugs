diff --git a/src/core/SkDescriptor.cpp b/src/core/SkDescriptor.cpp
index 6d6ce3740c..90406e7336 100644
--- a/src/core/SkDescriptor.cpp
+++ b/src/core/SkDescriptor.cpp
@@ -95,19 +95,23 @@ bool SkDescriptor::isValid() const {
     size_t offset = sizeof(SkDescriptor);
 
     while (lengthRemaining > 0 && count > 0) {
-        const Entry* entry = (const Entry*)(reinterpret_cast<const char*>(this) + offset);
-        // rec tags are always a known size.
-        if (entry->fTag == kRec_SkDescriptorTag && entry->fLen != sizeof(SkScalerContextRec)) {
-            return false;
-        }
         if (lengthRemaining < sizeof(Entry)) {
             return false;
         }
         lengthRemaining -= sizeof(Entry);
+
+        const Entry* entry = (const Entry*)(reinterpret_cast<const char*>(this) + offset);
+
         if (lengthRemaining < entry->fLen) {
             return false;
         }
         lengthRemaining -= entry->fLen;
+
+        // rec tags are always a known size.
+        if (entry->fTag == kRec_SkDescriptorTag && entry->fLen != sizeof(SkScalerContextRec)) {
+            return false;
+        }
+
         offset += sizeof(Entry) + entry->fLen;
         count--;
     }
diff --git a/tests/DescriptorTest.cpp b/tests/DescriptorTest.cpp
index eab3673b49..837a37f0d2 100644
--- a/tests/DescriptorTest.cpp
+++ b/tests/DescriptorTest.cpp
@@ -122,3 +122,17 @@ DEF_TEST(Descriptor_entry_too_big, r) {
     SkDescriptorTestHelper::SetCount(desc.get(), 1);
     REPORTER_ASSERT(r, !desc->isValid());
 }
+
+DEF_TEST(Descriptor_entry_over_end, r) {
+    auto desc = SkDescriptor::Alloc(36);
+    desc->init();
+
+    // Make the start of the Entry be in the SkDescriptor, but the second half falls out side the
+    // SkDescriptor. So: 12 (for descriptor) + 8 (for entry) + 12 (for entry length) = 32. An
+    // An Entry is 8 bytes, so 4 bytes are < 36 and 4 bytes > 36.
+    desc->addEntry(kEffects_SkDescriptorTag, 12, nullptr);
+
+    SkDescriptorTestHelper::SetLength(desc.get(), 36);
+    SkDescriptorTestHelper::SetCount(desc.get(), 2);
+    REPORTER_ASSERT(r, !desc->isValid());
+}
