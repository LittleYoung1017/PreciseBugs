libcoap-20210301-f930b0a	f930b0a	25db741	Mon Mar 1 18:18:09 2021 +0100	pdu.c: Fix length check in write_{prefix,char}	commit f930b0ad5bc73689d4b63d3742f39d6ff49197a9Author: Olaf Bergmann <bergmann@tzi.org>Date:   Mon Mar 1 18:17:05 2021 +0100    pdu.c: Fix length check in write_{prefix,char}        Fix length check in two helper functions that have been introduced in    commit 757ca19c.        Fixes OSS-Fuzz issue 31479 [1]        [1] https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=31479	31479	src/pdu.c	933;946
libcoap-20210301-34b8484	34b8484	dc888cb	Mon Mar 1 18:07:37 2021 +0100	pdu.c: Fix length check in write_{prefix,char}	commit 34b8484a0c9d13db4c6086c880e40484ef9177ddAuthor: Olaf Bergmann <bergmann@tzi.org>Date:   Mon Mar 1 18:06:04 2021 +0100    pdu.c: Fix length check in write_{prefix,char}        Fix length check in two helper functions that have been introduced in    commit 757ca19c.        Fixes OSS-Fuzz issue 31479 [1]        [1] https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=31479	31479	src/pdu.c	933;946
libcoap-20201020-b1ee9c8	b1ee9c8	4ca959c	Tue Oct 20 13:16:00 2020 +0200	options: fix integer overflow in option parser	commit b1ee9c8912924d141ae8bd00ad32470f8904a377Author: Olaf Bergmann <bergmann@tzi.org>Date:   Tue Oct 20 12:23:38 2020 +0200    options: fix integer overflow in option parser        As the numeric range of CoAP option codes is [0..65804], the data    type for representing these codes must be uint32_t rather than    uint16_t.        Fixes OSS-Fuzz 26371. [1]        [1] https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=26371	26371	include/coap2/option.h;include/coap2/pdu.h;libcoap-2.map;libcoap-2.sym;src/option.c;src/pdu.c;tests/test_pdu.c	374;495;88;86;234;521;687;695;942;989;1014
libcoap-20190731-3c91257	3c91257	3a25eb6	Wed Jul 31 12:22:53 2019 +0200	uri.c: Fix integer overflow in URI parser	commit 3c9125736e8d51e6fc6f27156092480136ba8431Author: Olaf Bergmann <bergmann@tzi.org>Date:   Wed Jul 31 12:15:06 2019 +0200    uri.c: Fix integer overflow in URI parser        In coap_split_uri(), the manual conversion of a URI port may run into    an integer overflow for values greater than UINT16_MAX (i.e., 65535).        Although the subsequent typecast into a uint16_t limits possible    damage, a wrong port may be used when exceeding the positive integer    range. This fix adds an additional check to trigger error -4 before    this happens.        Fixes OSS-Fuzz 16115. [1]        [1] https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=16115	16115	src/uri.c	16;150
