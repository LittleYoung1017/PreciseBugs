commit 7e1687689389b053ec762ac8c41fe79775537256
Author: Chris Liddell <chris.liddell@artifex.com>
Date:   Wed Jun 2 10:10:05 2021 +0100

    Fix uses of pop() vs ref_stack_pop(()
    
    The pop() macro is very simple: all it does is decrement the pointer for top
    of the operand stack - it does no stack limit checking and, more importantly,
    it has no capability to cope with stack extension blocks.
    
    Since the main interpreter loop has to do its own stack limit checking, and
    handle the extension blocks, it would be wasteful for each operator to do so,
    too. So the intention is that pop() is only called immediately before returning
    to the interpreter loop, setting the point, but leaving the interpreter loop to
    cope with error conditions or extension blocks.
    
    Over the years, various cases have crept in with pop() being used in places
    that are not immediately before a return to the interpreter loop and, in
    several cases, are before other code that also accesses the stack, causing
    potential problems - not least, two (so far) oss-fuzz issues.
    
    So review uses of pop() and change the bad ones to ref_stack_pop() (which does
    bounds checking and extension block handling). Also change a few uses of
    ref_stack_pop() to pop().
    
    There are a couple of exceptions: one in the inner tokenizing code, where
    a) performance is important, and b) (I think!) the use of the stack is a
    "closed system" - it only pushes or pops for it's own purpose, so should be
    safe.
    
    And at least one place where we use pop() in the middle of a function, but we
    can safely do so because before anything else happens that might access the
    stack, it's been changed to call ref_stack_pop() or ref_stack_push(), which will
    take care of any mess left by pop().
    
    This review was "inspired" by:
    https://bugs.ghostscript.com/show_bug.cgi?id=703902
    
    but is not directly fixing that bug.
