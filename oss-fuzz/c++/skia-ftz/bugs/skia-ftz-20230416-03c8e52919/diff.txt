diff --git a/gn/sksl_tests.gni b/gn/sksl_tests.gni
index 9b5220818b..0ed4aa6327 100644
--- a/gn/sksl_tests.gni
+++ b/gn/sksl_tests.gni
@@ -186,6 +186,7 @@ sksl_error_tests = [
   "errors/Ossfuzz50798.sksl",
   "errors/Ossfuzz50922.sksl",
   "errors/Ossfuzz56373.sksl",
+  "errors/Ossfuzz58037.sksl",
   "errors/OverflowFloatIntrinsic.sksl",
   "errors/OverflowFloatLiteral.rts",
   "errors/OverflowInlinedLiteral.sksl",
diff --git a/resources/sksl/BUILD.bazel b/resources/sksl/BUILD.bazel
index 69f0fd11e9..731d5da333 100644
--- a/resources/sksl/BUILD.bazel
+++ b/resources/sksl/BUILD.bazel
@@ -358,6 +358,7 @@ skia_filegroup(
         "errors/Ossfuzz50798.sksl",
         "errors/Ossfuzz50922.sksl",
         "errors/Ossfuzz56373.sksl",
+        "errors/Ossfuzz58037.sksl",
         "errors/OverflowFloatIntrinsic.sksl",
         "errors/OverflowFloatLiteral.rts",
         "errors/OverflowInlinedLiteral.sksl",
diff --git a/resources/sksl/errors/Ossfuzz58037.sksl b/resources/sksl/errors/Ossfuzz58037.sksl
new file mode 100644
index 0000000000..94691833cc
--- /dev/null
+++ b/resources/sksl/errors/Ossfuzz58037.sksl
@@ -0,0 +1 @@
+InterfaceBlock { int[] z; } r[0];
diff --git a/src/sksl/ir/SkSLType.cpp b/src/sksl/ir/SkSLType.cpp
index d4831b942f..614c847938 100644
--- a/src/sksl/ir/SkSLType.cpp
+++ b/src/sksl/ir/SkSLType.cpp
@@ -1194,9 +1194,14 @@ SKSL_INT Type::convertArraySize(const Context& context,
         context.fErrors->error(size->fPosition, "array size must be positive");
         return 0;
     }
-    if (SkSafeMath::Mul(this->slotCount(), count) > kVariableSlotLimit) {
-        context.fErrors->error(size->fPosition, "array size is too large");
-        return 0;
+    // We can't get a meaningful slot count if the interior type contains an unsized array; we'll
+    // assert if we try. Unsized arrays should only occur in a handful of limited cases (e.g. an
+    // interface block with a trailing buffer), and will never be valid in a runtime effect.
+    if (!this->isOrContainsUnsizedArray()) {
+        if (SkSafeMath::Mul(this->slotCount(), count) > kVariableSlotLimit) {
+            context.fErrors->error(size->fPosition, "array size is too large");
+            return 0;
+        }
     }
     return static_cast<int>(count);
 }
diff --git a/tests/sksl/errors/Ossfuzz58037.glsl b/tests/sksl/errors/Ossfuzz58037.glsl
new file mode 100644
index 0000000000..6cf16e2114
--- /dev/null
+++ b/tests/sksl/errors/Ossfuzz58037.glsl
@@ -0,0 +1,9 @@
+### Compilation failed:
+
+error: 1: array size must be positive
+InterfaceBlock { int[] z; } r[0];
+                              ^
+error: 1: unsized array must be the last member of a storage block
+InterfaceBlock { int[] z; } r[0];
+                 ^^^^^^^^
+2 errors
