diff --git a/gdal/frmts/webp/webpdataset.cpp b/gdal/frmts/webp/webpdataset.cpp
index 4b32e27d19..d91cf52d68 100644
--- a/gdal/frmts/webp/webpdataset.cpp
+++ b/gdal/frmts/webp/webpdataset.cpp
@@ -283,6 +283,15 @@ CPLErr WEBPDataset::Uncompress()
     bHasBeenUncompressed = TRUE;
     eUncompressErrRet = CE_Failure;
 
+    // To avoid excessive memory allocation attempts
+    // Normally WebP images are no larger than 16383x16383*4 ~= 1 GB
+    if( nRasterXSize > INT_MAX / (nRasterYSize * nBands) )
+    {
+        CPLError(CE_Failure, CPLE_NotSupported,
+                 "Too large image");
+        return CE_Failure;
+    }
+
     pabyUncompressed = reinterpret_cast<GByte*>(
         VSIMalloc3(nRasterXSize, nRasterYSize, nBands ) );
     if (pabyUncompressed == NULL)
@@ -305,14 +314,14 @@ CPLErr WEBPDataset::Uncompress()
             pabyCompressed,
             static_cast<uint32_t>( nSize ),
             static_cast<uint8_t*>( pabyUncompressed),
-            nRasterXSize * nRasterYSize * nBands,
+            static_cast<size_t>(nRasterXSize) * nRasterYSize * nBands,
             nRasterXSize * nBands );
     else
         pRet = WebPDecodeRGBInto(
             pabyCompressed,
             static_cast<uint32_t>( nSize ),
             static_cast<uint8_t*>( pabyUncompressed ),
-            nRasterXSize * nRasterYSize * nBands,
+            static_cast<size_t>(nRasterXSize) * nRasterYSize * nBands,
             nRasterXSize * nBands );
 
     VSIFree(pabyCompressed);
