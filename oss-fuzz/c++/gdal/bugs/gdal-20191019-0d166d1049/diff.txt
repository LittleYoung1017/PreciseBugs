diff --git a/gdal/fuzzers/GNUmakefile b/gdal/fuzzers/GNUmakefile
index 260f4902ab..44090e946d 100644
--- a/gdal/fuzzers/GNUmakefile
+++ b/gdal/fuzzers/GNUmakefile
@@ -11,6 +11,7 @@ OBJ	=	gdal_fuzzer.o \
 		get_jpeg2000_structure_fuzzer.o \
 		gdal_translate_fuzzer.o \
 		gdal_vector_translate_fuzzer.o \
+		gml_geom_import_fuzzer.o \
 		fuzzingengine.o
 
 CPPFLAGS	:=	$(CPPFLAGS) -I../ogr/ogrsf_frmts/sqlite
@@ -54,6 +55,9 @@ mitab_tab_fuzzer$(EXE): ogr_fuzzer.$(OBJ_EXT) $(DEP_LIBS)
 gtiff_mmap_fuzzer$(EXE): gdal_fuzzer.$(OBJ_EXT) $(DEP_LIBS)
 	$(LD) $(LDFLAGS) $(LNK_FLAGS) $(CXXFLAGS) $(GDAL_INCLUDE) gdal_fuzzer.cpp fuzzingengine.cpp $(XTRAOBJ) $(CONFIG_LIBS) -o $@ -DREGISTER_FUNC=GDALRegister_GTiff -DGTIFF_USE_MMAP
 
+gml_geom_import_fuzzer$(EXE): gml_geom_import_fuzzer.$(OBJ_EXT) $(DEP_LIBS)
+	$(LD) $(LDFLAGS) $(LNK_FLAGS) $(CXXFLAGS) $(GDAL_INCLUDE) gml_geom_import_fuzzer.cpp fuzzingengine.cpp $(XTRAOBJ) $(CONFIG_LIBS) -o $@
+
 dummyfuzzers: fuzzingengine.o
 	$(AR) r libFuzzingEngine.a fuzzingengine.o
 	CXX="${CXX}" CXXFLAGS="${CXXFLAGS} -L." EXTRA_LIBS="${LIBS}" SRC=/tmp OUT=/tmp ./build_google_oss_fuzzers.sh
diff --git a/gdal/ogr/gml2ogrgeometry.cpp b/gdal/ogr/gml2ogrgeometry.cpp
index 17c235bb8a..4357235486 100644
--- a/gdal/ogr/gml2ogrgeometry.cpp
+++ b/gdal/ogr/gml2ogrgeometry.cpp
@@ -268,7 +268,6 @@ static bool ParseGMLCoordinates( const CPLXMLNode *psGeomNode,
 {
     const CPLXMLNode *psCoordinates =
         FindBareXMLChild( psGeomNode, "coordinates" );
-    int iCoord = 0;
 
 /* -------------------------------------------------------------------- */
 /*      Handle <coordinates> case.                                      */
@@ -328,83 +327,117 @@ static bool ParseGMLCoordinates( const CPLXMLNode *psGeomNode,
             return true;
         }
 
-        while( *pszCoordString != '\0' )
+        int iCoord;
+        const OGRwkbGeometryType eType = wkbFlatten(poGeometry->getGeometryType());
+        OGRSimpleCurve *poCurve =
+            (eType == wkbLineString || eType == wkbCircularString) ?
+                poGeometry->toSimpleCurve() : nullptr;
+        for( int iter = (eType == wkbPoint ? 1 : 0); iter < 2; iter++ )
         {
-            double dfX = 0.0;
-            int nDimension = 2;
+            const char* pszStr = pszCoordString;
+            double dfX = 0;
+            double dfY = 0;
+            double dfZ = 0;
+            iCoord = 0;
+            while( *pszStr != '\0' )
+            {
+                int nDimension = 2;
+                // parse out 2 or 3 tuple.
+                if( iter == 1 )
+                {
+                    if( chDecimal == '.' )
+                        dfX = OGRFastAtof( pszStr );
+                    else
+                        dfX = CPLAtofDelim( pszStr, chDecimal);
+                }
+                while( *pszStr != '\0'
+                    && *pszStr != chCS
+                    && !isspace(static_cast<unsigned char>(*pszStr)) )
+                    pszStr++;
 
-            // parse out 2 or 3 tuple.
-            if( chDecimal == '.' )
-                dfX = OGRFastAtof( pszCoordString );
-            else
-                dfX = CPLAtofDelim( pszCoordString, chDecimal);
-            while( *pszCoordString != '\0'
-                   && *pszCoordString != chCS
-                   && !isspace(static_cast<unsigned char>(*pszCoordString)) )
-                pszCoordString++;
+                if( *pszStr == '\0' )
+                {
+                    CPLError(CE_Failure, CPLE_AppDefined,
+                            "Corrupt <coordinates> value.");
+                    return false;
+                }
+                else if( chCS == ',' && pszCS == nullptr &&
+                        isspace(static_cast<unsigned char>(*pszStr)) )
+                {
+                    // In theory, the coordinates inside a coordinate tuple should
+                    // be separated by a comma. However it has been found in the
+                    // wild that the coordinates are in rare cases separated by a
+                    // space, and the tuples by a comma.
+                    // See:
+                    // https://52north.org/twiki/bin/view/Processing/WPS-IDWExtension-ObservationCollectionExample
+                    // or
+                    // http://agisdemo.faa.gov/aixmServices/getAllFeaturesByLocatorId?locatorId=DFW
+                    chCS = ' ';
+                    chTS = ',';
+                }
 
-            if( *pszCoordString == '\0' )
-            {
-                CPLError(CE_Failure, CPLE_AppDefined,
-                         "Corrupt <coordinates> value.");
-                return false;
-            }
-            else if( chCS == ',' && pszCS == nullptr &&
-                     isspace(static_cast<unsigned char>(*pszCoordString)) )
-            {
-                // In theory, the coordinates inside a coordinate tuple should
-                // be separated by a comma. However it has been found in the
-                // wild that the coordinates are in rare cases separated by a
-                // space, and the tuples by a comma.
-                // See:
-                // https://52north.org/twiki/bin/view/Processing/WPS-IDWExtension-ObservationCollectionExample
-                // or
-                // http://agisdemo.faa.gov/aixmServices/getAllFeaturesByLocatorId?locatorId=DFW
-                chCS = ' ';
-                chTS = ',';
-            }
+                pszStr++;
 
-            pszCoordString++;
+                if( iter == 1 )
+                {
+                    if( chDecimal == '.' )
+                        dfY = OGRFastAtof( pszStr );
+                    else
+                        dfY = CPLAtofDelim( pszStr, chDecimal);
+                }
+                while( *pszStr != '\0'
+                    && *pszStr != chCS
+                    && *pszStr != chTS
+                    && !isspace(static_cast<unsigned char>(*pszStr)) )
+                    pszStr++;
+
+                dfZ = 0.0;
+                if( *pszStr == chCS )
+                {
+                    pszStr++;
+                    if( iter == 1 )
+                    {
+                        if( chDecimal == '.' )
+                            dfZ = OGRFastAtof( pszStr );
+                        else
+                            dfZ = CPLAtofDelim( pszStr, chDecimal);
+                    }
+                    nDimension = 3;
+                    while( *pszStr != '\0'
+                        && *pszStr != chCS
+                        && *pszStr != chTS
+                        && !isspace(static_cast<unsigned char>(*pszStr)) )
+                    pszStr++;
+                }
 
-            double dfY = 0.0;
-            if( chDecimal == '.' )
-                dfY = OGRFastAtof( pszCoordString );
-            else
-                dfY = CPLAtofDelim( pszCoordString, chDecimal);
-            while( *pszCoordString != '\0'
-                   && *pszCoordString != chCS
-                   && *pszCoordString != chTS
-                   && !isspace(static_cast<unsigned char>(*pszCoordString)) )
-                pszCoordString++;
-
-            double dfZ = 0.0;
-            if( *pszCoordString == chCS )
-            {
-                pszCoordString++;
-                if( chDecimal == '.' )
-                    dfZ = OGRFastAtof( pszCoordString );
-                else
-                    dfZ = CPLAtofDelim( pszCoordString, chDecimal);
-                nDimension = 3;
-                while( *pszCoordString != '\0'
-                       && *pszCoordString != chCS
-                       && *pszCoordString != chTS
-                       && !isspace(static_cast<unsigned char>(*pszCoordString)) )
-                pszCoordString++;
-            }
+                if( *pszStr == chTS )
+                {
+                    pszStr++;
+                }
 
-            if( *pszCoordString == chTS )
-            {
-                pszCoordString++;
-            }
+                while( isspace(static_cast<unsigned char>(*pszStr)) )
+                    pszStr++;
 
-            while( isspace(static_cast<unsigned char>(*pszCoordString)) )
-                pszCoordString++;
+                if( iter == 1 )
+                {
+                    if( poCurve )
+                    {
+                        if( nDimension == 3 )
+                            poCurve->setPoint(iCoord, dfX, dfY, dfZ);
+                        else
+                            poCurve->setPoint(iCoord, dfX, dfY);
+                    }
+                    else if( !AddPoint( poGeometry, dfX, dfY, dfZ, nDimension ) )
+                        return false;
+                }
 
-            if( !AddPoint( poGeometry, dfX, dfY, dfZ, nDimension ) )
-                return false;
+                iCoord++;
+            }
 
-            iCoord++;
+            if( poCurve && iter == 0 )
+            {
+                poCurve->setNumPoints(iCoord);
+            }
         }
 
         return iCoord > 0;
@@ -586,6 +619,7 @@ static bool ParseGMLCoordinates( const CPLXMLNode *psGeomNode,
 /*      Handle form with a list of <coord> items each with an <X>,      */
 /*      and <Y> element.                                                */
 /* -------------------------------------------------------------------- */
+    int iCoord = 0;
     for( const CPLXMLNode *psCoordNode = psGeomNode->psChild;
          psCoordNode != nullptr;
          psCoordNode = psCoordNode->psNext )
