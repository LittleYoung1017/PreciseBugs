diff --git a/gn/sksl_tests.gni b/gn/sksl_tests.gni
index 0472be304b..fe640a9878 100644
--- a/gn/sksl_tests.gni
+++ b/gn/sksl_tests.gni
@@ -295,6 +295,7 @@ sksl_glsl_tests = [
 sksl_metal_tests = [
   "/sksl/compute/ArrayAdd.compute",
   "/sksl/compute/Desaturate.compute",
+  "/sksl/compute/DesaturateFunction.compute",
   "/sksl/compute/DesaturateReadWrite.compute",
   "/sksl/compute/MatrixMultiply.compute",
   "/sksl/compute/Raytrace.compute",
diff --git a/resources/sksl/compute/DesaturateFunction.compute b/resources/sksl/compute/DesaturateFunction.compute
new file mode 100644
index 0000000000..dccb99cfc9
--- /dev/null
+++ b/resources/sksl/compute/DesaturateFunction.compute
@@ -0,0 +1,14 @@
+layout(binding=0) in texture2D src;
+layout(binding=1) out texture2D dest;
+
+// TODO(skia:13609): we need a mechanism for access levels on src and dst.
+noinline void desaturate(texture2D src, texture2D dest, half4 color) {
+    color.rgb = half3(dot(color.rgb, half3(0.22, 0.67, 0.11)));
+    write(dest, sk_ThreadPosition.xy, read(src, sk_ThreadPosition.xy));
+}
+
+void main() {
+    if (sk_ThreadPosition.x < width(src) && sk_ThreadPosition.y < height(src)) {
+        desaturate(src, dest, read(src, sk_ThreadPosition.xy));
+    }
+}
diff --git a/src/sksl/codegen/SkSLMetalCodeGenerator.cpp b/src/sksl/codegen/SkSLMetalCodeGenerator.cpp
index 34250dd9f0..78d45b8775 100644
--- a/src/sksl/codegen/SkSLMetalCodeGenerator.cpp
+++ b/src/sksl/codegen/SkSLMetalCodeGenerator.cpp
@@ -154,10 +154,10 @@ std::string MetalCodeGenerator::typeName(const Type& type) {
     }
 }
 
-std::string MetalCodeGenerator::textureTypeName(const Type& type, const Modifiers& modifiers) {
-    if (type.typeKind() == Type::TypeKind::kTexture) {
+std::string MetalCodeGenerator::textureTypeName(const Type& type, const Modifiers* modifiers) {
+    if (type.typeKind() == Type::TypeKind::kTexture && modifiers) {
         std::string result = "texture2d<half, access::"; // FIXME - support other texture types
-        int flags = modifiers.fFlags;
+        int flags = modifiers->fFlags;
         if ((flags & Modifiers::kIn_Flag) || !(flags & Modifiers::kOut_Flag)) {
             result += "read";
             if (flags & Modifiers::kOut_Flag) {
@@ -187,7 +187,17 @@ void MetalCodeGenerator::writeType(const Type& type) {
 }
 
 void MetalCodeGenerator::writeTextureType(const Type& type, const Modifiers& modifiers) {
-    this->write(this->textureTypeName(type, modifiers));
+    this->write(this->textureTypeName(type, &modifiers));
+}
+
+void MetalCodeGenerator::writeParameterType(const Type& type) {
+    if (type.typeKind() == Type::TypeKind::kTexture) {
+        // TODO(skia:13609): we will need a mechanism in SkSL to specify texture-access type on
+        // parameters. The default value (`access::sample`) is probably not what we will want.
+        this->write(this->textureTypeName(type, /*modifiers=*/nullptr));
+    } else {
+        this->writeType(type);
+    }
 }
 
 void MetalCodeGenerator::writeExpression(const Expression& expr, Precedence parentPrecedence) {
@@ -305,7 +315,7 @@ std::string MetalCodeGenerator::getOutParamHelper(const FunctionCall& call,
         this->writeModifiers(param->modifiers());
 
         const Type* type = outVars[index] ? &outVars[index]->type() : &arguments[index]->type();
-        this->writeType(*type);
+        this->writeParameterType(*type);
 
         if (pass_by_reference(param->modifiers(), param->type())) {
             this->write("&");
@@ -2107,7 +2117,7 @@ bool MetalCodeGenerator::writeFunctionDeclaration(const FunctionDeclaration& f)
         separator = ", ";
         this->writeModifiers(param->modifiers());
         const Type* type = &param->type();
-        this->writeType(*type);
+        this->writeParameterType(*type);
         if (pass_by_reference(param->modifiers(), param->type())) {
             this->write("&");
         }
diff --git a/src/sksl/codegen/SkSLMetalCodeGenerator.h b/src/sksl/codegen/SkSLMetalCodeGenerator.h
index 309e6d6db5..9856c8bb09 100644
--- a/src/sksl/codegen/SkSLMetalCodeGenerator.h
+++ b/src/sksl/codegen/SkSLMetalCodeGenerator.h
@@ -135,7 +135,7 @@ protected:
 
     std::string typeName(const Type& type);
 
-    std::string textureTypeName(const Type& type, const Modifiers& modifiers);
+    std::string textureTypeName(const Type& type, const Modifiers* modifiers);
 
     void writeStructDefinition(const StructDefinition& s);
 
@@ -143,6 +143,8 @@ protected:
 
     void writeTextureType(const Type& type, const Modifiers& modifiers);
 
+    void writeParameterType(const Type& type);
+
     void writeExtension(const Extension& ext);
 
     void writeInterfaceBlock(const InterfaceBlock& intf);
diff --git a/tests/sksl/compute/DesaturateFunction.metal b/tests/sksl/compute/DesaturateFunction.metal
new file mode 100644
index 0000000000..a092b2359f
--- /dev/null
+++ b/tests/sksl/compute/DesaturateFunction.metal
@@ -0,0 +1,26 @@
+#include <metal_stdlib>
+#include <simd/simd.h>
+using namespace metal;
+struct Inputs {
+    uint3 sk_ThreadPosition;
+};
+struct Outputs {
+};
+struct Globals {
+    texture2d<half, access::read> src;
+    texture2d<half, access::write> dest;
+};
+void desaturate_vTTh4(Inputs _in, texture2d<half> src, texture2d<half> dest, half4 color) {
+    color.xyz = half3(dot(color.xyz, half3(0.2199999988079071h, 0.67000001668930054h, 0.10999999940395355h)));
+    dest.write(src.read(_in.sk_ThreadPosition.xy), _in.sk_ThreadPosition.xy);
+}
+kernel void computeMain(texture2d<half, access::read> src [[texture(0)]], texture2d<half, access::write> dest [[texture(1)]], uint3 sk_ThreadPosition [[thread_position_in_grid]]) {
+    Globals _globals{src, dest};
+    (void)_globals;
+    Inputs _in = { sk_ThreadPosition };
+    Outputs _out = {  };
+    if (_in.sk_ThreadPosition.x < _globals.src.get_width() && _in.sk_ThreadPosition.y < _globals.src.get_height()) {
+        desaturate_vTTh4(_in, _globals.src, _globals.dest, _globals.src.read(_in.sk_ThreadPosition.xy));
+    }
+    return;
+}
