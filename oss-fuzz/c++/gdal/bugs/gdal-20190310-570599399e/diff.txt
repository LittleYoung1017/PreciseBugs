diff --git a/gdal/ogr/swq.h b/gdal/ogr/swq.h
index b36c1d268a..d97f61201d 100644
--- a/gdal/ogr/swq.h
+++ b/gdal/ogr/swq.h
@@ -129,7 +129,8 @@ public:
     void           Dump( FILE *fp, int depth );
     swq_field_type Check( swq_field_list *, int bAllowFieldsInSecondaryTables,
                           int bAllowMismatchTypeOnFieldComparison,
-                          swq_custom_func_registrar* poCustomFuncRegistrar );
+                          swq_custom_func_registrar* poCustomFuncRegistrar,
+                          int depth = 0 );
     swq_expr_node* Evaluate( swq_field_fetcher pfnFetcher,
                              void *record );
     swq_expr_node* Clone();
diff --git a/gdal/ogr/swq_expr_node.cpp b/gdal/ogr/swq_expr_node.cpp
index 2eb20ffb7e..5a1edd76a5 100644
--- a/gdal/ogr/swq_expr_node.cpp
+++ b/gdal/ogr/swq_expr_node.cpp
@@ -179,9 +179,17 @@ swq_field_type
 swq_expr_node::Check( swq_field_list *poFieldList,
                       int bAllowFieldsInSecondaryTables,
                       int bAllowMismatchTypeOnFieldComparison,
-                      swq_custom_func_registrar* poCustomFuncRegistrar )
+                      swq_custom_func_registrar* poCustomFuncRegistrar,
+                      int nDepth )
 
 {
+    if( nDepth == 32 )
+    {
+        CPLError(CE_Failure, CPLE_AppDefined,
+                 "Too many recursion levels in expression");
+        return SWQ_ERROR;
+    }
+
 /* -------------------------------------------------------------------- */
 /*      Otherwise we take constants literally.                          */
 /* -------------------------------------------------------------------- */
@@ -253,7 +261,8 @@ swq_expr_node::Check( swq_field_list *poFieldList,
     {
         if( papoSubExpr[i]->Check(poFieldList, bAllowFieldsInSecondaryTables,
                                   bAllowMismatchTypeOnFieldComparison,
-                                  poCustomFuncRegistrar) == SWQ_ERROR )
+                                  poCustomFuncRegistrar,
+                                  nDepth + 1) == SWQ_ERROR )
             return SWQ_ERROR;
     }
 
@@ -708,7 +717,7 @@ swq_expr_node *swq_expr_node::Evaluate( swq_field_fetcher pfnFetcher,
     if( nRecLevel == 32 )
     {
         CPLError(CE_Failure, CPLE_AppDefined,
-                 "Too many recursion levels in expression to evaluate");
+                 "Too many recursion levels in expression");
         return nullptr;
     }
 
