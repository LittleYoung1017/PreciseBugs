diff --git a/autotest/cpp/test_cpl.cpp b/autotest/cpp/test_cpl.cpp
index 606bc18758..a84ccb33d9 100644
--- a/autotest/cpp/test_cpl.cpp
+++ b/autotest/cpp/test_cpl.cpp
@@ -1083,4 +1083,38 @@ namespace tut
                       strlen(CPLGetLastErrorMsg())); // DEFAULT_LAST_ERR_MSG_SIZE - 1
     }
 
+    template<>
+    template<>
+    void object::test<23>()
+    {
+        char* pszText = CPLUnescapeString("&lt;&gt;&amp;&apos;&quot;&#x3f;&#x3F;&#63;", NULL, CPLES_XML);
+        ensure_equals( CPLString(pszText), "<>&'\"???");
+        CPLFree(pszText);
+
+        // Integer overflow
+        pszText = CPLUnescapeString("&10000000000000000;", NULL, CPLES_XML);
+        // We do not really care about the return value
+        CPLFree(pszText);
+
+        // Integer overflow
+        pszText = CPLUnescapeString("&#10000000000000000;", NULL, CPLES_XML);
+        // We do not really care about the return value
+        CPLFree(pszText);
+
+        // Error case
+        pszText = CPLUnescapeString("&foo", NULL, CPLES_XML);
+        ensure_equals( CPLString(pszText), "");
+        CPLFree(pszText);
+
+        // Error case
+        pszText = CPLUnescapeString("&#x", NULL, CPLES_XML);
+        ensure_equals( CPLString(pszText), "");
+        CPLFree(pszText);
+
+        // Error case
+        pszText = CPLUnescapeString("&#", NULL, CPLES_XML);
+        ensure_equals( CPLString(pszText), "");
+        CPLFree(pszText);
+    }
+
 } // namespace tut
diff --git a/gdal/port/cpl_string.cpp b/gdal/port/cpl_string.cpp
index 2f176f1466..7ee50470e5 100644
--- a/gdal/port/cpl_string.cpp
+++ b/gdal/port/cpl_string.cpp
@@ -2288,18 +2288,23 @@ char *CPLUnescapeString( const char *pszInput, int *pnLength, int nScheme )
                 wchar_t anVal[2] = {0 , 0};
                 iIn += 3;
 
+                unsigned int nVal = 0;
                 while( true )
                 {
                     ch = pszInput[iIn++];
                     if( ch >= 'a' && ch <= 'f' )
-                        anVal[0] = anVal[0] * 16 + ch - 'a' + 10;
+                        nVal = nVal * 16U +
+                                static_cast<unsigned int>(ch - 'a' + 10);
                     else if( ch >= 'A' && ch <= 'F' )
-                        anVal[0] = anVal[0] * 16 + ch - 'A' + 10;
+                        nVal = nVal * 16U +
+                                static_cast<unsigned int>(ch - 'A' + 10);
                     else if( ch >= '0' && ch <= '9' )
-                        anVal[0] = anVal[0] * 16 + ch - '0';
+                        nVal = nVal * 16U +
+                                static_cast<unsigned int>(ch - '0');
                     else
                         break;
                 }
+                anVal[0] = static_cast<wchar_t>(nVal);
                 if( ch != ';' )
                     break;
                 iIn--;
@@ -2316,14 +2321,16 @@ char *CPLUnescapeString( const char *pszInput, int *pnLength, int nScheme )
                 wchar_t anVal[2] = { 0, 0 };
                 iIn += 2;
 
+                unsigned int nVal = 0;
                 while( true )
                 {
                     ch = pszInput[iIn++];
                     if( ch >= '0' && ch <= '9' )
-                        anVal[0] = anVal[0] * 10 + ch - '0';
+                        nVal = nVal * 10U + static_cast<unsigned int>(ch - '0');
                     else
                         break;
                 }
+                anVal[0] = static_cast<wchar_t>(nVal);
                 if( ch != ';' )
                     break;
                 iIn--;
