diff --git a/gn/sksl_tests.gni b/gn/sksl_tests.gni
index 56a71593fe..f5ee0e627f 100644
--- a/gn/sksl_tests.gni
+++ b/gn/sksl_tests.gni
@@ -197,6 +197,7 @@ sksl_shared_tests = [
   "$_tests/sksl/shared/NumberConversions.sksl",
   "$_tests/sksl/shared/Offset.sksl",
   "$_tests/sksl/shared/Operators.sksl",
+  "$_tests/sksl/shared/Ossfuzz26167.sksl",
   "$_tests/sksl/shared/OutParams.sksl",
   "$_tests/sksl/shared/OutParamsTricky.sksl",
   "$_tests/sksl/shared/RectangleTexture.sksl",
diff --git a/src/sksl/SkSLIRGenerator.cpp b/src/sksl/SkSLIRGenerator.cpp
index d275fc7400..4c166088e9 100644
--- a/src/sksl/SkSLIRGenerator.cpp
+++ b/src/sksl/SkSLIRGenerator.cpp
@@ -368,7 +368,11 @@ StatementArray IRGenerator::convertVarDeclarations(const ASTNode& decls,
     this->checkModifiers(decls.fOffset, modifiers, permitted);
 
     StatementArray varDecls;
+    bool firstDecl = true;
     for (; declarationsIter != decls.end(); ++declarationsIter) {
+        AutoDisableInline disableInline(this, /*canInline=*/firstDecl);
+        firstDecl = false;
+
         const ASTNode& varDecl = *declarationsIter;
         if (modifiers.fLayout.fLocation == 0 && modifiers.fLayout.fIndex == 0 &&
             (modifiers.fFlags & Modifiers::kOut_Flag) && fKind == Program::kFragment_Kind &&
diff --git a/tests/sksl/shared/Ossfuzz26167.sksl b/tests/sksl/shared/Ossfuzz26167.sksl
new file mode 100644
index 0000000000..765e562329
--- /dev/null
+++ b/tests/sksl/shared/Ossfuzz26167.sksl
@@ -0,0 +1,3 @@
+float foo(float v) { return v; }
+void bar() { float y = 0, z = foo(y); }
+void main() { bar(); }
diff --git a/tests/sksl/shared/golden/Ossfuzz26167.glsl b/tests/sksl/shared/golden/Ossfuzz26167.glsl
new file mode 100644
index 0000000000..2933520785
--- /dev/null
+++ b/tests/sksl/shared/golden/Ossfuzz26167.glsl
@@ -0,0 +1,3 @@
+
+void main() {
+}
diff --git a/tests/sksl/shared/golden/Ossfuzz26167.metal b/tests/sksl/shared/golden/Ossfuzz26167.metal
new file mode 100644
index 0000000000..c18cef376a
--- /dev/null
+++ b/tests/sksl/shared/golden/Ossfuzz26167.metal
@@ -0,0 +1,13 @@
+#include <metal_stdlib>
+#include <simd/simd.h>
+using namespace metal;
+struct Inputs {
+};
+struct Outputs {
+    float4 sk_FragColor [[color(0)]];
+};
+fragment Outputs fragmentMain(Inputs _in [[stage_in]], bool _frontFacing [[front_facing]], float4 _fragCoord [[position]]) {
+    Outputs _outputStruct;
+    thread Outputs* _out = &_outputStruct;
+    return *_out;
+}
