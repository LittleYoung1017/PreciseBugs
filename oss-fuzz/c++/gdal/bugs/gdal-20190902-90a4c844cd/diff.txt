diff --git a/gdal/frmts/gtiff/libtiff/tif_ojpeg.c b/gdal/frmts/gtiff/libtiff/tif_ojpeg.c
index 83d2f5c65b..bf0d1a2a09 100644
--- a/gdal/frmts/gtiff/libtiff/tif_ojpeg.c
+++ b/gdal/frmts/gtiff/libtiff/tif_ojpeg.c
@@ -679,7 +679,7 @@ OJPEGPreDecode(TIFF* tif, uint16 s)
 		if (OJPEGReadSecondarySos(tif,s)==0)
 			return(0);
 	}
-	if isTiled(tif)
+	if (isTiled(tif))
 		m=tif->tif_curtile;
 	else
 		m=tif->tif_curstrip;
@@ -1084,7 +1084,7 @@ OJPEGReadHeaderInfo(TIFF* tif)
 	assert(sp->readheader_done==0);
 	sp->image_width=tif->tif_dir.td_imagewidth;
 	sp->image_length=tif->tif_dir.td_imagelength;
-	if isTiled(tif)
+	if (isTiled(tif))
 	{
 		sp->strile_width=tif->tif_dir.td_tilewidth;
 		sp->strile_length=tif->tif_dir.td_tilelength;
@@ -1241,7 +1241,13 @@ OJPEGWriteHeaderInfo(TIFF* tif)
 			sp->subsampling_convert_ybuflen=sp->subsampling_convert_ylinelen*sp->subsampling_convert_ylines;
 			sp->subsampling_convert_cbuflen=sp->subsampling_convert_clinelen*sp->subsampling_convert_clines;
 			sp->subsampling_convert_ycbcrbuflen=sp->subsampling_convert_ybuflen+2*sp->subsampling_convert_cbuflen;
-			sp->subsampling_convert_ycbcrbuf=_TIFFmalloc(sp->subsampling_convert_ycbcrbuflen);
+                        /* The calloc is not normally necessary, except in some edge/broken cases */
+                        /* for example for a tiled image of height 1 with a tile height of 1 and subsampling_hor=subsampling_ver=2 */
+                        /* In that case, libjpeg will only fill the 8 first lines of the 16 lines */
+                        /* See https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=16844 */
+                        /* Even if this case is allowed (?), its handling is broken because OJPEGPreDecode() should also likely */
+                        /* reset subsampling_convert_state to 0 when changing tile. */
+			sp->subsampling_convert_ycbcrbuf=_TIFFcalloc(1, sp->subsampling_convert_ycbcrbuflen);
 			if (sp->subsampling_convert_ycbcrbuf==0)
 			{
 				TIFFErrorExt(tif->tif_clientdata,module,"Out of memory");
diff --git a/gdal/frmts/hdf5/hdf5dataset.cpp b/gdal/frmts/hdf5/hdf5dataset.cpp
index 8c98bbdeb9..8a1c08d991 100644
--- a/gdal/frmts/hdf5/hdf5dataset.cpp
+++ b/gdal/frmts/hdf5/hdf5dataset.cpp
@@ -364,6 +364,10 @@ int HDF5Dataset::Identify( GDALOpenInfo * poOpenInfo )
     {
         return TRUE;
     }
+    if( STARTS_WITH(poOpenInfo->pszFilename, "HDF5_FAMILY:") )
+    {
+        return TRUE;
+    }
 
     // Is it an HDF5 file?
     constexpr char achSignature[] = "\211HDF\r\n\032\n";
@@ -443,10 +447,20 @@ GDALDataset *HDF5Dataset::Open( GDALOpenInfo *poOpenInfo )
     poDS->SetDescription(poOpenInfo->pszFilename);
 
     // Try opening the dataset.
-    hid_t fapl = H5Pcreate(H5P_FILE_ACCESS);
-    H5Pset_driver(fapl, HDF5GetFileDriver(), nullptr);
-    poDS->hHDF5 = H5Fopen(poOpenInfo->pszFilename, H5F_ACC_RDONLY, fapl);
-    H5Pclose(fapl);
+    if( STARTS_WITH(poOpenInfo->pszFilename, "HDF5_FAMILY:") )
+    {
+        hid_t new_fapl = H5Pcreate(H5P_FILE_ACCESS);
+        H5Pset_fapl_family(new_fapl, (hsize_t) 0, H5P_DEFAULT);
+        poDS->hHDF5 = H5Fopen(poOpenInfo->pszFilename + strlen("HDF5_FAMILY:"), H5F_ACC_RDONLY, new_fapl);
+        H5Pclose(new_fapl);
+    }
+    else
+    {
+        hid_t fapl = H5Pcreate(H5P_FILE_ACCESS);
+        H5Pset_driver(fapl, HDF5GetFileDriver(), nullptr);
+        poDS->hHDF5 = H5Fopen(poOpenInfo->pszFilename, H5F_ACC_RDONLY, fapl);
+        H5Pclose(fapl);
+    }
 
     if( poDS->hHDF5 < 0 )
     {
diff --git a/gdal/frmts/hdf5/hdf5multidim.cpp b/gdal/frmts/hdf5/hdf5multidim.cpp
index 56fc270866..264fa8a82a 100644
--- a/gdal/frmts/hdf5/hdf5multidim.cpp
+++ b/gdal/frmts/hdf5/hdf5multidim.cpp
@@ -2067,16 +2067,29 @@ std::shared_ptr<GDALMDArray> HDF5Dimension::GetIndexingVariable() const
 
 GDALDataset *HDF5Dataset::OpenMultiDim( GDALOpenInfo *poOpenInfo )
 {
-    const char* pszFilename =
-        STARTS_WITH(poOpenInfo->pszFilename, "HDF5:") ?
-            poOpenInfo->pszFilename + strlen("HDF5:") :
-            poOpenInfo->pszFilename;
-
-    // Try opening the dataset.
-    hid_t fapl = H5Pcreate(H5P_FILE_ACCESS);
-    H5Pset_driver(fapl, HDF5GetFileDriver(), nullptr);
-    auto hHDF5 = H5Fopen(pszFilename, H5F_ACC_RDONLY, fapl);
-    H5Pclose(fapl);
+    const char* pszFilename;
+    hid_t hHDF5;
+    if( STARTS_WITH(poOpenInfo->pszFilename, "HDF5_FAMILY:") )
+    {
+        pszFilename = poOpenInfo->pszFilename + strlen("HDF5_FAMILY:");
+        hid_t new_fapl = H5Pcreate(H5P_FILE_ACCESS);
+        H5Pset_fapl_family(new_fapl, (hsize_t) 0, H5P_DEFAULT);
+        hHDF5 = H5Fopen(pszFilename, H5F_ACC_RDONLY, new_fapl);
+        H5Pclose(new_fapl);
+    }
+    else
+    {
+        pszFilename =
+            STARTS_WITH(poOpenInfo->pszFilename, "HDF5:") ?
+                poOpenInfo->pszFilename + strlen("HDF5:") :
+                poOpenInfo->pszFilename;
+
+        // Try opening the dataset.
+        hid_t fapl = H5Pcreate(H5P_FILE_ACCESS);
+        H5Pset_driver(fapl, HDF5GetFileDriver(), nullptr);
+        hHDF5 = H5Fopen(pszFilename, H5F_ACC_RDONLY, fapl);
+        H5Pclose(fapl);
+    }
 
     if( hHDF5 < 0 )
     {
