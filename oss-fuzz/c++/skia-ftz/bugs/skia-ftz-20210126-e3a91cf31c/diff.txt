diff --git a/gn/sksl_tests.gni b/gn/sksl_tests.gni
index 62ce54cc9e..6b08449f3b 100644
--- a/gn/sksl_tests.gni
+++ b/gn/sksl_tests.gni
@@ -121,6 +121,7 @@ sksl_error_tests = [
   "/sksl/errors/Ossfuzz27663.sksl",
   "/sksl/errors/Ossfuzz29085.sksl",
   "/sksl/errors/Ossfuzz29845.sksl",
+  "/sksl/errors/Ossfuzz29849.sksl",
   "/sksl/errors/OverflowFloatLiteral.sksl",
   "/sksl/errors/OverflowIntLiteral.sksl",
   "/sksl/errors/OverflowParamArraySize.sksl",
@@ -156,6 +157,10 @@ sksl_error_tests = [
   "/sksl/errors/UndefinedSymbol.sksl",
   "/sksl/errors/Unreachable.sksl",
   "/sksl/errors/UnsupportedGLSLIdentifiers.sksl",
+  "/sksl/errors/UnscopedVariableInDoWhile.sksl",
+  "/sksl/errors/UnscopedVariableInElse.sksl",
+  "/sksl/errors/UnscopedVariableInIf.sksl",
+  "/sksl/errors/UnscopedVariableInWhile.sksl",
   "/sksl/errors/UseWithoutInitializeArrayIndex.sksl",
   "/sksl/errors/UseWithoutInitializeBinaryExpr.sksl",
   "/sksl/errors/UseWithoutInitializeDeadIf.sksl",
diff --git a/resources/sksl/errors/Ossfuzz29849.sksl b/resources/sksl/errors/Ossfuzz29849.sksl
new file mode 100644
index 0000000000..9e00e9582e
--- /dev/null
+++ b/resources/sksl/errors/Ossfuzz29849.sksl
@@ -0,0 +1,4 @@
+void main() {
+    if (2 < 2) int a;
+    a;
+}
diff --git a/resources/sksl/errors/UnscopedVariableInDoWhile.sksl b/resources/sksl/errors/UnscopedVariableInDoWhile.sksl
new file mode 100644
index 0000000000..39dada807a
--- /dev/null
+++ b/resources/sksl/errors/UnscopedVariableInDoWhile.sksl
@@ -0,0 +1,3 @@
+void main() {
+    do int foo = 1, bar = foo; while (false);
+}
diff --git a/resources/sksl/errors/UnscopedVariableInElse.sksl b/resources/sksl/errors/UnscopedVariableInElse.sksl
new file mode 100644
index 0000000000..5f1a42af83
--- /dev/null
+++ b/resources/sksl/errors/UnscopedVariableInElse.sksl
@@ -0,0 +1,3 @@
+void main() {
+    if (true) ; else half4 color = sk_FragColor;
+}
diff --git a/resources/sksl/errors/UnscopedVariableInIf.sksl b/resources/sksl/errors/UnscopedVariableInIf.sksl
new file mode 100644
index 0000000000..912b58b5e8
--- /dev/null
+++ b/resources/sksl/errors/UnscopedVariableInIf.sksl
@@ -0,0 +1,3 @@
+void main() {
+    if (true) half4 x;
+}
diff --git a/resources/sksl/errors/UnscopedVariableInWhile.sksl b/resources/sksl/errors/UnscopedVariableInWhile.sksl
new file mode 100644
index 0000000000..07da96781a
--- /dev/null
+++ b/resources/sksl/errors/UnscopedVariableInWhile.sksl
@@ -0,0 +1,3 @@
+void main() {
+    while (false) bool b;
+}
diff --git a/src/sksl/SkSLIRGenerator.cpp b/src/sksl/SkSLIRGenerator.cpp
index d7c9e5ccbd..3e7d56441e 100644
--- a/src/sksl/SkSLIRGenerator.cpp
+++ b/src/sksl/SkSLIRGenerator.cpp
@@ -150,6 +150,38 @@ void IRGenerator::popSymbolTable() {
     fSymbolTable = fSymbolTable->fParent;
 }
 
+bool IRGenerator::detectVarDeclarationWithoutScope(const Statement& stmt) {
+    // Parsing an AST node containing a single variable declaration creates a lone VarDeclaration
+    // statement. An AST with multiple variable declarations creates an unscoped Block containing
+    // multiple VarDeclaration statements. We need to detect either case.
+    const Variable* var;
+    if (stmt.is<VarDeclaration>()) {
+        // The single-variable case. No blocks at all.
+        var = &stmt.as<VarDeclaration>().var();
+    } else if (stmt.is<Block>()) {
+        // The multiple-variable case: an unscoped, non-empty block...
+        const Block& block = stmt.as<Block>();
+        if (block.isScope() || block.children().empty()) {
+            return false;
+        }
+        // ... holding a variable declaration.
+        const Statement& innerStmt = *block.children().front();
+        if (!innerStmt.is<VarDeclaration>()) {
+            return false;
+        }
+        var = &innerStmt.as<VarDeclaration>().var();
+    } else {
+        // This statement wasn't a variable declaration. No problem.
+        return false;
+    }
+
+    // Report an error.
+    SkASSERT(var);
+    this->errorReporter().error(stmt.fOffset,
+                                "variable '" + var->name() + "' must be created in a scope");
+    return true;
+}
+
 std::unique_ptr<Extension> IRGenerator::convertExtension(int offset, StringFragment name) {
     if (fKind != Program::kFragment_Kind &&
         fKind != Program::kVertex_Kind &&
@@ -567,6 +599,12 @@ std::unique_ptr<Statement> IRGenerator::convertIf(int offset, bool isStatic,
     if (!test) {
         return nullptr;
     }
+    if (this->detectVarDeclarationWithoutScope(*ifTrue)) {
+        return nullptr;
+    }
+    if (ifFalse && this->detectVarDeclarationWithoutScope(*ifFalse)) {
+        return nullptr;
+    }
     if (test->is<BoolLiteral>()) {
         // Static Boolean values can fold down to a single branch.
         if (test->as<BoolLiteral>().value()) {
@@ -655,6 +693,10 @@ std::unique_ptr<Statement> IRGenerator::convertWhile(int offset, std::unique_ptr
     if (!test) {
         return nullptr;
     }
+    if (this->detectVarDeclarationWithoutScope(*statement)) {
+        return nullptr;
+    }
+
     return std::make_unique<ForStatement>(offset, /*initializer=*/nullptr, std::move(test),
                                           /*next=*/nullptr, std::move(statement), fSymbolTable);
 }
@@ -685,6 +727,9 @@ std::unique_ptr<Statement> IRGenerator::convertDo(std::unique_ptr<Statement> stm
     if (!test) {
         return nullptr;
     }
+    if (this->detectVarDeclarationWithoutScope(*stmt)) {
+        return nullptr;
+    }
     return std::make_unique<DoStatement>(stmt->fOffset, std::move(stmt), std::move(test));
 }
 
diff --git a/src/sksl/SkSLIRGenerator.h b/src/sksl/SkSLIRGenerator.h
index f05a44a2a4..2e952002d7 100644
--- a/src/sksl/SkSLIRGenerator.h
+++ b/src/sksl/SkSLIRGenerator.h
@@ -261,6 +261,7 @@ private:
     bool getConstantInt(const Expression& value, SKSL_INT* out);
     void copyIntrinsicIfNeeded(const FunctionDeclaration& function);
     void findAndDeclareBuiltinVariables();
+    bool detectVarDeclarationWithoutScope(const Statement& stmt);
 
     // Runtime effects (and the interpreter, which uses the same CPU runtime) require adherence to
     // the strict rules from The OpenGL ES Shading Language Version 1.00. (Including Appendix A).
diff --git a/tests/sksl/errors/Ossfuzz29849.glsl b/tests/sksl/errors/Ossfuzz29849.glsl
new file mode 100644
index 0000000000..b6529e1838
--- /dev/null
+++ b/tests/sksl/errors/Ossfuzz29849.glsl
@@ -0,0 +1,4 @@
+### Compilation failed:
+
+error: 2: variable 'a' must be created in a scope
+1 error
diff --git a/tests/sksl/errors/UnscopedVariableInDoWhile.glsl b/tests/sksl/errors/UnscopedVariableInDoWhile.glsl
new file mode 100644
index 0000000000..74112d3dc0
--- /dev/null
+++ b/tests/sksl/errors/UnscopedVariableInDoWhile.glsl
@@ -0,0 +1,4 @@
+### Compilation failed:
+
+error: 2: variable 'foo' must be created in a scope
+1 error
diff --git a/tests/sksl/errors/UnscopedVariableInElse.glsl b/tests/sksl/errors/UnscopedVariableInElse.glsl
new file mode 100644
index 0000000000..46151b7629
--- /dev/null
+++ b/tests/sksl/errors/UnscopedVariableInElse.glsl
@@ -0,0 +1,4 @@
+### Compilation failed:
+
+error: 2: variable 'color' must be created in a scope
+1 error
diff --git a/tests/sksl/errors/UnscopedVariableInIf.glsl b/tests/sksl/errors/UnscopedVariableInIf.glsl
new file mode 100644
index 0000000000..3ce2f16f51
--- /dev/null
+++ b/tests/sksl/errors/UnscopedVariableInIf.glsl
@@ -0,0 +1,4 @@
+### Compilation failed:
+
+error: 2: variable 'x' must be created in a scope
+1 error
diff --git a/tests/sksl/errors/UnscopedVariableInWhile.glsl b/tests/sksl/errors/UnscopedVariableInWhile.glsl
new file mode 100644
index 0000000000..77003b65ef
--- /dev/null
+++ b/tests/sksl/errors/UnscopedVariableInWhile.glsl
@@ -0,0 +1,4 @@
+### Compilation failed:
+
+error: 2: variable 'b' must be created in a scope
+1 error
