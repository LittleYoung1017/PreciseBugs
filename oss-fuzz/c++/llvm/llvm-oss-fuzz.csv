llvm-20220816-aa0e9046c16b	aa0e9046c16b	d8cdd78b6c04	Tue Aug 16 16:45:39 2022 -0700	Libfuzzer fix for Ctrl + c not working with -fork and -ignore_crashes=1	commit aa0e9046c16bf27a8affbd903e2e3cad924a5217Author: Maxim Schessler <maxim.schessler@gmail.com>Date:   Mon Aug 15 11:44:06 2022 -0700    Libfuzzer fix for Ctrl + c not working with -fork and -ignore_crashes=1        In some cases running Libfuzzer in fork mode with -ignore_crashes=1 counts ctrl+c as crash and restarts.        Thread: https://github.com/google/oss-fuzz/issues/4547        Credit: Marcel Boehme <marcel.boehme@acm.org>        Reviewed By: vitalybuka        Differential Revision: https://reviews.llvm.org/D130990	4547	compiler-rt/lib/fuzzer/FuzzerInternal.h;compiler-rt/lib/fuzzer/FuzzerLoop.cpp;compiler-rt/lib/fuzzer/FuzzerUtilLinux.cpp	91;262;11;25
llvm-20211110-faa019c0e38e	faa019c0e38e	51ae78a6d679	Wed Nov 10 21:26:05 2021 +0100	[libc++] Fix segmentation fault in __do_put_integral	commit faa019c0e38e8cb33d7e7fee92aa548bd052939eAuthor: MarcoFalke <falke.marco@gmail.com>Date:   Wed Nov 10 20:34:31 2021 +0100    [libc++] Fix segmentation fault in __do_put_integral        6 chars are not sufficient to represent all formats for 64 bit integers.        This was accidentally introduced in commit b889cbf36635a302f5b77560f1769178f196c2c7 (https://reviews.llvm.org/D112830).        This causes failures in downstream projects, for example:        * https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=40817    * https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=40841        Differential Revision: https://reviews.llvm.org/D113600	40817	libcxx/include/locale	1476
llvm-20211024-3c06ecaa1e8d	3c06ecaa1e8d	850217686e21	Sun Oct 24 14:42:03 2021 -0700	[instcombine] Fix oss-fuzz 39934 (mul matcher can match non-instruction)	commit 3c06ecaa1e8d0267fe67c1e5c8fa5f294de2aab8Author: Philip Reames <listmail@philipreames.com>Date:   Sat Oct 23 18:07:21 2021 -0700    [instcombine] Fix oss-fuzz 39934 (mul matcher can match non-instruction)        Fixes a crash observed by oss-fuzz in 39934.  Issue at hand is that code expects a pattern match on m_Mul to imply the operand is a mul instruction, however mul constexprs are also valid here.	39934	llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp	4184;668
llvm-20210629-47215e1c6250	47215e1c6250	2098c5dfbd62	Tue Jun 29 13:31:22 2021 +0100	[LV] Fix crash when target instruction for sinking is dead.	commit 47215e1c6250298aa9db59b3b06f832fcd23be01Author: Florian Hahn <flo@fhahn.com>Date:   Tue Jun 29 11:54:52 2021 +0100    [LV] Fix crash when target instruction for sinking is dead.        This patch fixes a crash when the target instruction for sinking is    dead. In that case, no recipe is created and trying to get the recipe    for it results in a crash. To ensure all sink targets are alive, find &    use the first previous alive instruction.        Note that the case where the sink source is dead is already handled.        Found by    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=35320        Reviewed By: Ayal        Differential Revision: https://reviews.llvm.org/D104603	35320	llvm/lib/Transforms/Vectorize/LoopVectorize.cpp	9040;895
llvm-20210413-423024904825	423024904825	ae8a5c68523c	Tue Apr 13 10:49:42 2021 -0700	[libFuzzer] Fix MSan false positives with custom mutators.	commit 423024904825d147c69e8999537b6b813bc24999Author: Matt Morehouse <mascasa@google.com>Date:   Tue Apr 13 09:25:12 2021 -0700    [libFuzzer] Fix MSan false positives with custom mutators.        We need to unpoison parameters before calling into MSan-instrumented    user-defined mutators.        Addresses https://github.com/google/oss-fuzz/issues/4605.        Reviewed By: metzman        Differential Revision: https://reviews.llvm.org/D100355	4605	compiler-rt/lib/fuzzer/FuzzerMutate.cpp	69;83;0;0
llvm-20210402-b82b305cf94a	b82b305cf94a	411673e769ac	Fri Apr 2 13:45:11 2021 +0200	[InstCombine] Fix out-of-bounds ashr(shl) optimization	commit b82b305cf94a57a7e0e72f576b85aaa136a505c3Author: Jeroen Dobbelaere <jeroen.dobbelaere@synopsys.com>Date:   Fri Apr 2 13:45:11 2021 +0200    [InstCombine] Fix out-of-bounds ashr(shl) optimization        This fixes a crash found by the oss fuzzer and reported by @fhahn.    The suggestion of @RKSimon seems to be the correct fix here. (See D91343).        The oss fuzz report can be found here: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=32759        Reviewed By: lebedev.ri        Differential Revision: https://reviews.llvm.org/D99792	32759	llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp	927;0
llvm-20201117-7e30989dabce	7e30989dabce	53fba9d9d303	Tue Nov 17 16:16:51 2020 +0000	[IR] ShuffleVectorInst::isIdentityWithPadding - bail on non-fixed-type vector shuffles.	commit 7e30989dabce9ddbca0cbad7a8f25fb4e756d334Author: Simon Pilgrim <llvm-dev@redking.me.uk>Date:   Tue Nov 17 16:05:03 2020 +0000    [IR] ShuffleVectorInst::isIdentityWithPadding - bail on non-fixed-type vector shuffles.        Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=27416	27416	llvm/lib/IR/Instructions.cpp	2225;2248;83
llvm-20190702-0bde7c65275e	0bde7c65275e	6c0dcf65e710	Tue Jul 2 12:54:48 2019 +0000	[InstCombine] Shift amount reassociation: fixup constantexpr handling (PR42484)	commit 0bde7c65275ef4fcd51bc92e1b6c280f9888b73fAuthor: Roman Lebedev <lebedev.ri@gmail.com>Date:   Tue Jul 2 12:54:48 2019 +0000    [InstCombine] Shift amount reassociation: fixup constantexpr handling (PR42484)        I was actually wondering if there was some nicer way than m_Value()+cast,    but apparently what i was really "subconsciously" thinking about    was correctness issue.        hasNoUnsignedWrap()/hasNoUnsignedWrap() exist for Instruction,    not for BinaryOperator, so let's just use m_Instruction(),    thus both avoiding a cast, and a crash.        Fixes https://bugs.llvm.org/show_bug.cgi?id=42484,          https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=15587        llvm-svn: 364915	15587	llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp	29;154
llvm-20190307-6ca0985aa572	6ca0985aa572	bd53e768d22c	Thu Mar 7 17:50:16 2019 +0000	[InterleavedAccessAnalysis] Fix integer overflow in insertMember.	commit 6ca0985aa572f25635f28ce8385dba112d56b6e9Author: Florian Hahn <flo@fhahn.com>Date:   Thu Mar 7 17:50:16 2019 +0000    [InterleavedAccessAnalysis] Fix integer overflow in insertMember.        Without checking for integer overflow, invalid members can be added     e.g. if the calculated key overflows, becomes positive and the largest key.        This fixes          https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=7560          https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=13128          https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=13229        Reviewers: Ayal, anna, hsaito, efriedma        Reviewed By: efriedma        Differential Revision: https://reviews.llvm.org/D55538        llvm-svn: 355613	7560	llvm/include/llvm/Analysis/VectorUtils.h;llvm/include/llvm/Support/CheckedArithmetic.h	17;277;285;49;0
llvm-20180817-03e57521c0fc	03e57521c0fc	f874607f328a	Fri Aug 17 12:25:18 2018 +0000	[DAGCombiner] extractShiftForRotate - fix out of range shift issue	commit 03e57521c0fc720b6bf7ab858f232e4d02942be4Author: Simon Pilgrim <llvm-dev@redking.me.uk>Date:   Fri Aug 17 12:25:18 2018 +0000    [DAGCombiner] extractShiftForRotate - fix out of range shift issue        Don't just check for negative shift amounts.        Fixes OSS Fuzz #9935    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=9935        llvm-svn: 340015	9935	llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp	5276;341
llvm-20180813-ee82a79041a4	ee82a79041a4	b44789759b70	Mon Aug 13 12:10:09 2018 +0000	[CGP] Fix GEP issue with out of range APInt constant values not fitting in int64_t	commit ee82a79041a43dfa3e8249cc66c1dd0c9918c202Author: Simon Pilgrim <llvm-dev@redking.me.uk>Date:   Mon Aug 13 12:10:09 2018 +0000    [CGP] Fix GEP issue with out of range APInt constant values not fitting in int64_t        Test case reduced from https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=7173        llvm-svn: 339556	7173	llvm/lib/CodeGen/CodeGenPrepare.cpp	3801;78
llvm-20180808-8511777d3a41	8511777d3a41	caacedb03e95	Wed Aug 8 16:34:03 2018 +0000	[WASM] Fix overflow when reading custom section	commit 8511777d3a41e5198a7028711754d3e9c29afddcAuthor: Jonas Devlieghere <jonas@devlieghere.com>Date:   Wed Aug 8 16:34:03 2018 +0000    [WASM] Fix overflow when reading custom section        When reading a custom WASM section, it was possible that its name    extended beyond the size of the section. This resulted in a bogus value    for the section size due to the size overflowing.        Fixes heap buffer overflow detected by OSS-fuzz:    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=8190        Differential revision: https://reviews.llvm.org/D50387        llvm-svn: 339269	8190	llvm/lib/Object/WasmObjectFile.cpp	216;0
llvm-20180522-f163bdc07ee3	f163bdc07ee3	11d68a619e3f	Tue May 22 09:46:55 2018 +0000	[clang-format] Fix crash in getLengthToMatchingParen	commit f163bdc07ee357753f36ecb922acd769f0df6c98Author: Krasimir Georgiev <krasimir@google.com>Date:   Tue May 22 09:46:55 2018 +0000    [clang-format] Fix crash in getLengthToMatchingParen        Summary:    Found by oss-fuzz:    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=8212        Reviewers: bkramer        Subscribers: klimek, cfe-commits        Differential Revision: https://reviews.llvm.org/D47191        llvm-svn: 332961	8212	clang/lib/Format/ContinuationIndenter.cpp	94
llvm-20180312-b4c85cf4a401	b4c85cf4a401	bbfe43418587	Mon Mar 12 14:45:08 2018 +0000	[DebugInfo] Replace unreachable with None	commit b4c85cf4a4014a52e11d3967e8a310f0d13d11b8Author: Jonas Devlieghere <jonas@devlieghere.com>Date:   Mon Mar 12 14:45:08 2018 +0000    [DebugInfo] Replace unreachable with None        Invalid user input should not trigger assertions and unreachables. We    already return an Option so we should just return None here.        Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=5532        llvm-svn: 327274	5532	llvm/lib/DebugInfo/DWARF/DWARFFormValue.cpp	161
llvm-20180223-e8f1ffb50a20	e8f1ffb50a20	8b1e93b7d617	Fri Feb 23 23:59:20 2018 +0000	[ExprConstant] Fix crash when initialize an indirect field with another field.	commit e8f1ffb50a203c3b2e1f5bb94f493ecb381a43faAuthor: Volodymyr Sapsai <vsapsai@apple.com>Date:   Fri Feb 23 23:59:20 2018 +0000    [ExprConstant] Fix crash when initialize an indirect field with another field.        When indirect field is initialized with another field, you have    MemberExpr with CXXThisExpr that corresponds to the field's immediate    anonymous parent. But 'this' was referring to the non-anonymous parent.    So when we were building LValue Designator, it was incorrect as it had    wrong starting point. Usage of such designator would cause unexpected    APValue changes and crashes.        The fix is in adjusting 'this' for indirect fields from non-anonymous    parent to the field's immediate parent.        Discovered by OSS-Fuzz:    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=4985        rdar://problem/36359187        Reviewers: rsmith, efriedma        Reviewed By: rsmith        Subscribers: cfe-commits, jkorous-apple        Differential Revision: https://reviews.llvm.org/D42498        llvm-svn: 325997	4985	clang/lib/AST/ExprConstant.cpp	4383;4413;4429;4440;1045
llvm-20180206-579f0b307c19	579f0b307c19	64626b344b33	Tue Feb 6 22:39:25 2018 +0000	[Lex] Fix handling numerical literals ending with \' and signed exponent.	commit 579f0b307c19efd778d221703ea7743234113535Author: Volodymyr Sapsai <vsapsai@apple.com>Date:   Tue Feb 6 22:39:25 2018 +0000    [Lex] Fix handling numerical literals ending with ' and signed exponent.        For input `0'e+1` lexer tokenized as numeric constant only `0'e`. Later    NumericLiteralParser skipped 0 and ' as digits and parsed `e+1` as valid    exponent going past the end of the token. Because it didn't mark numeric    literal as having an error, it continued parsing and tried to expandUCNs    with StringRef of length -2.        The fix is not to parse exponent when we reached the end of token.        Discovered by OSS-Fuzz:    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=4588        rdar://problem/36076719        Reviewers: rsmith, t.p.northover        Reviewed By: rsmith        Subscribers: cfe-commits, jkorous-apple        Differential Revision: https://reviews.llvm.org/D41834        llvm-svn: 324419	4588	clang/lib/Lex/LiteralSupport.cpp	738;787;840;51
llvm-20180105-cbf651f7399f	cbf651f7399f	1ad085b8081e	Fri Jan 5 10:03:02 2018 +0000	[DebugInfo] Don\'t crash when given invalid DWARFv5 line table prologue.	commit cbf651f7399feea9ea8495af571d67d924b8ec11Author: Jonas Devlieghere <jonas@devlieghere.com>Date:   Fri Jan 5 10:03:02 2018 +0000    [DebugInfo] Don't crash when given invalid DWARFv5 line table prologue.        This patch replaces an assertion with an explicit check for the validity    of the FORM parameters. The assertion was triggered when the DWARFv5    line table contained a zero address size.        This fixes OSS-Fuzz Issue 4644    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=4644        Differential revision: https://reviews.llvm.org/D41615        llvm-svn: 321863	4644	llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h;llvm/lib/DebugInfo/DWARF/DWARFDebugLine.cpp;llvm/lib/DebugInfo/DWARF/DWARFFormValue.cpp	50;268;64;86;118;0
llvm-20171130-fbb4bace6600	fbb4bace6600	d6b165341d51	Thu Nov 30 22:15:39 2017 +0000	[msan] Fix return type of mbrtowc	commit fbb4bace6600d6738118c2a07581bd3cf2fad687Author: Vitaly Buka <vitalybuka@google.com>Date:   Thu Nov 30 22:15:39 2017 +0000    [msan] Fix return type of mbrtowc        Summary: Fixes https://github.com/google/oss-fuzz/issues/1009        Reviewers: eugenis        Subscribers: llvm-commits        Differential Revision: https://reviews.llvm.org/D40676        llvm-svn: 319484	1009	compiler-rt/lib/msan/msan_interceptors.cc;compiler-rt/lib/msan/tests/msan_test.cc	526;2121
llvm-20171030-9c3cbeea3943	9c3cbeea3943	c38ba6697fc8	Mon Oct 30 23:59:51 2017 +0000	[CGP] Fix crash on i96 bit multiply	commit 9c3cbeea3943dcfa096634eb94c8acc5ff8bf640Author: Philip Reames <listmail@philipreames.com>Date:   Mon Oct 30 23:59:51 2017 +0000    [CGP] Fix crash on i96 bit multiply        Issue found by llvm-isel-fuzzer on OSS fuzz, https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=3725        If anyone actually cares about > 64 bit arithmetic, there's a lot more to do in this area.  There's a bunch of obviously wrong code in the same function.  I don't have the time to fix all of them and am just using this to understand what the workflow for fixing fuzzer cases might look like.        llvm-svn: 316967	3725	llvm/lib/Analysis/ScalarEvolutionExpander.cpp;llvm/lib/CodeGen/CodeGenPrepare.cpp;llvm/lib/Transforms/Utils/SimplifyIndVar.cpp	1690;1702;4032;83;161;180;193;268
llvm-20171027-b42db1567c55	b42db1567c55	92a2635bbd23	Fri Oct 27 19:15:13 2017 +0000	Fix llvm-special-case-list-fuzzer regexp exception	commit b42db1567c55a1d00ff7ecbe9abbbfba9a7d19cbAuthor: Vlad Tsyrklevich <vlad@tsyrklevich.net>Date:   Fri Oct 27 19:15:13 2017 +0000    Fix llvm-special-case-list-fuzzer regexp exception        Summary:    Original oss-fuzz report:    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=3727 #c2        The minimized test case that causes this failure:    5b 5b 5b 3d 47 53 00 5b  3d 5d 5b 5d 0a     [[[=GS.[=][].        Note the string "=GS\x00". The failure happens because the code is    searching the string against an array of known collated names. "GS\x00"    is a hit, but since len takes into account an extra NUL byte, indexing    into cp->name[len] goes one byte past it's allocated memory. Fix this to    use a strlen(cp->name) comparison to account for NUL bytes in the input.        Reviewers: pcc        Reviewed By: pcc        Subscribers: hctim, kcc        Differential Revision: https://reviews.llvm.org/D39380        llvm-svn: 316786	3727	llvm/lib/Support/regcomp.c;llvm/unittests/Support/RegexTest.cpp	1008;1018;171
llvm-20171023-35b50a83aba3	35b50a83aba3	1108d072f47b	Mon Oct 23 18:04:34 2017 +0000	[wasm] readSection: Avoid reading past eof (fixes oss-fuzz #3219)	commit 35b50a83aba3a5eedd3395341b5be76600a6841cAuthor: Vedant Kumar <vsk@apple.com>Date:   Mon Oct 23 18:04:34 2017 +0000    [wasm] readSection: Avoid reading past eof (fixes oss-fuzz #3219)        A wasm file crafted with a bogus section size can trigger an ASan issue    in the DWARFObjInMemory constructor. Nip the problem in the bud when we    read the wasm section.        Found by OSS-Fuzz:    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=3219        Differential Revision: https://reviews.llvm.org/D38777        llvm-svn: 316357	3219	llvm/lib/Object/WasmObjectFile.cpp	178;221;0
llvm-20170831-80df64239593	80df64239593	bfcac0b4806a	Thu Aug 31 12:50:42 2017 +0000	[BinaryFormat] Fix out of bounds read.	commit 80df64239593200f9d79312fd22975457f981b58Author: Benjamin Kramer <benny.kra@googlemail.com>Date:   Thu Aug 31 12:50:42 2017 +0000    [BinaryFormat] Fix out of bounds read.        Found by OSS-FUZZ!    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=3220        llvm-svn: 312238	3220	llvm/lib/BinaryFormat/Magic.cpp;llvm/unittests/BinaryFormat/TestFileMagic.cpp	182;80;108
