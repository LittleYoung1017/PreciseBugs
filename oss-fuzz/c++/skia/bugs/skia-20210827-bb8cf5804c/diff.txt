diff --git a/gn/sksl_tests.gni b/gn/sksl_tests.gni
index 5d5ad22293..ab04a02c91 100644
--- a/gn/sksl_tests.gni
+++ b/gn/sksl_tests.gni
@@ -355,6 +355,7 @@ sksl_shared_tests = [
   "/sksl/shared/Ossfuzz36770.sksl",
   "/sksl/shared/Ossfuzz36852.sksl",
   "/sksl/shared/Ossfuzz37466.sksl",
+  "/sksl/shared/Ossfuzz37677.sksl",
   "/sksl/shared/OutParams.sksl",
   "/sksl/shared/OutParamsNoInline.sksl",
   "/sksl/shared/OutParamsTricky.sksl",
diff --git a/resources/sksl/shared/Ossfuzz37677.sksl b/resources/sksl/shared/Ossfuzz37677.sksl
new file mode 100644
index 0000000000..25c1ac3a63
--- /dev/null
+++ b/resources/sksl/shared/Ossfuzz37677.sksl
@@ -0,0 +1,20 @@
+uniform half4 colorGreen;
+
+void original_fuzzer_output() {
+    float y[8],z;
+    z,y[3 .1L[y[7]=y[3],4]]+=0;
+}
+
+half4 main(float2 coords) {
+    int x[1], y=0, z=0;
+
+    // This line triggers two optimizations:
+    // 1 - No-op arithmetic simplification removes the `+= 0` and changes the ref-kind of `x` from
+    //     "write" to "read". Crucially, the ref-kind of `y` must remain "write."
+    // 2 - Comma-operator simplification detects that the leftmost `0, ` has no side effect and
+    //     eliminates it. This is done by returning a clone of the right-side expression. The act of
+    //     cloning the right-side expression can lead to an assertion if `y` has the wrong ref-kind.
+    0, x[y=z] += 0;
+
+    return colorGreen;
+}
diff --git a/src/sksl/SkSLAnalysis.cpp b/src/sksl/SkSLAnalysis.cpp
index 6b31f86c87..f145008383 100644
--- a/src/sksl/SkSLAnalysis.cpp
+++ b/src/sksl/SkSLAnalysis.cpp
@@ -288,6 +288,7 @@ private:
 // If a caller doesn't care about errors, we can use this trivial reporter that just counts up.
 class TrivialErrorReporter : public ErrorReporter {
 public:
+    ~TrivialErrorReporter() override { this->reportPendingErrors({}); }
     void handleError(const char*, PositionInfo) override {}
 };
 
@@ -808,36 +809,18 @@ bool Analysis::IsAssignable(Expression& expr, AssignmentInfo* info, ErrorReporte
     return IsAssignableVisitor{errors ? errors : &trivialErrors}.visit(expr, info);
 }
 
-void Analysis::UpdateRefKind(Expression* expr, VariableRefKind refKind) {
-    class RefKindWriter : public ProgramWriter {
-    public:
-        RefKindWriter(VariableReference::RefKind refKind) : fRefKind(refKind) {}
-
-        bool visitExpression(Expression& expr) override {
-            if (expr.is<VariableReference>()) {
-                expr.as<VariableReference>().setRefKind(fRefKind);
-            }
-            return INHERITED::visitExpression(expr);
-        }
-
-    private:
-        VariableReference::RefKind fRefKind;
-
-        using INHERITED = ProgramWriter;
-    };
-
-    RefKindWriter{refKind}.visitExpression(*expr);
-}
-
-bool Analysis::MakeAssignmentExpr(Expression* expr,
-                                  VariableReference::RefKind kind,
-                                  ErrorReporter* errors) {
+bool Analysis::UpdateVariableRefKind(Expression* expr,
+                                     VariableReference::RefKind kind,
+                                     ErrorReporter* errors) {
     Analysis::AssignmentInfo info;
     if (!Analysis::IsAssignable(*expr, &info, errors)) {
         return false;
     }
     if (!info.fAssignedVar) {
-        errors->error(expr->fOffset, "can't assign to expression '" + expr->description() + "'");
+        if (errors) {
+            errors->error(expr->fOffset, "can't assign to expression '" +
+                                          expr->description() + "'");
+        }
         return false;
     }
     info.fAssignedVar->setRefKind(kind);
diff --git a/src/sksl/SkSLAnalysis.h b/src/sksl/SkSLAnalysis.h
index 2e31e1f0c5..e599abff1d 100644
--- a/src/sksl/SkSLAnalysis.h
+++ b/src/sksl/SkSLAnalysis.h
@@ -91,13 +91,11 @@ struct Analysis {
     static bool IsAssignable(Expression& expr, AssignmentInfo* info = nullptr,
                              ErrorReporter* errors = nullptr);
 
-    // Updates the `refKind` field of exactly one VariableReference inside `expr`.
-    // `expr` must be `IsAssignable`; returns an error otherwise.
-    static bool MakeAssignmentExpr(Expression* expr, VariableRefKind kind, ErrorReporter* errors);
-
-    // Updates the `refKind` field of every VariableReference found within `expr`.
-    // `expr` is allowed to have zero, one, or multiple VariableReferences.
-    static void UpdateRefKind(Expression* expr, VariableRefKind refKind);
+    // Updates the `refKind` field of the VariableReference at the top level of `expr`.
+    // If `expr` can be assigned to (`IsAssignable`), true is returned and no errors are reported.
+    // If not, false is returned. and an error is reported if `errors` is non-null.
+    static bool UpdateVariableRefKind(Expression* expr, VariableRefKind kind,
+                                      ErrorReporter* errors = nullptr);
 
     // A "trivial" expression is one where we'd feel comfortable cloning it multiple times in
     // the code, without worrying about incurring a performance penalty. Examples:
diff --git a/src/sksl/SkSLConstantFolder.cpp b/src/sksl/SkSLConstantFolder.cpp
index 3de16afe05..3f7c8c3a2d 100644
--- a/src/sksl/SkSLConstantFolder.cpp
+++ b/src/sksl/SkSLConstantFolder.cpp
@@ -293,7 +293,7 @@ static std::unique_ptr<Expression> simplify_no_op_arithmetic(const Context& cont
         case Token::Kind::TK_MINUSEQ:
             if (is_constant_value(right, 0.0)) {  // x += 0, x -= 0
                 std::unique_ptr<Expression> result = cast_expression(context, left, resultType);
-                Analysis::UpdateRefKind(result.get(), VariableRefKind::kRead);
+                Analysis::UpdateVariableRefKind(result.get(), VariableRefKind::kRead);
                 return result;
             }
             break;
@@ -302,7 +302,7 @@ static std::unique_ptr<Expression> simplify_no_op_arithmetic(const Context& cont
         case Token::Kind::TK_SLASHEQ:
             if (is_constant_value(right, 1.0)) {  // x *= 1, x /= 1
                 std::unique_ptr<Expression> result = cast_expression(context, left, resultType);
-                Analysis::UpdateRefKind(result.get(), VariableRefKind::kRead);
+                Analysis::UpdateVariableRefKind(result.get(), VariableRefKind::kRead);
                 return result;
             }
             break;
diff --git a/src/sksl/SkSLIRGenerator.cpp b/src/sksl/SkSLIRGenerator.cpp
index ba7f2e5cc5..e85b8ead09 100644
--- a/src/sksl/SkSLIRGenerator.cpp
+++ b/src/sksl/SkSLIRGenerator.cpp
@@ -1420,8 +1420,7 @@ std::unique_ptr<Expression> IRGenerator::convertIndexExpression(const ASTNode& i
     if (!converted) {
         return nullptr;
     }
-    return IndexExpression::Convert(fContext, *fSymbolTable, std::move(base),
-                                    std::move(converted));
+    return IndexExpression::Convert(fContext, *fSymbolTable, std::move(base), std::move(converted));
 }
 
 std::unique_ptr<Expression> IRGenerator::convertCallExpression(const ASTNode& callNode) {
diff --git a/src/sksl/SkSLInliner.cpp b/src/sksl/SkSLInliner.cpp
index 3d64ccc283..671f69d82f 100644
--- a/src/sksl/SkSLInliner.cpp
+++ b/src/sksl/SkSLInliner.cpp
@@ -162,7 +162,7 @@ static std::unique_ptr<Statement>* find_parent_statement(
 std::unique_ptr<Expression> clone_with_ref_kind(const Expression& expr,
                                                 VariableReference::RefKind refKind) {
     std::unique_ptr<Expression> clone = expr.clone();
-    Analysis::UpdateRefKind(clone.get(), refKind);
+    Analysis::UpdateVariableRefKind(clone.get(), refKind);
     return clone;
 }
 
diff --git a/src/sksl/ir/SkSLBinaryExpression.cpp b/src/sksl/ir/SkSLBinaryExpression.cpp
index 598e1b8dbf..bb88c5c846 100644
--- a/src/sksl/ir/SkSLBinaryExpression.cpp
+++ b/src/sksl/ir/SkSLBinaryExpression.cpp
@@ -88,11 +88,11 @@ std::unique_ptr<Expression> BinaryExpression::Convert(const Context& context,
 
     bool isAssignment = op.isAssignment();
     if (isAssignment &&
-        !Analysis::MakeAssignmentExpr(left.get(),
-                                      op.kind() != Token::Kind::TK_EQ
-                                              ? VariableReference::RefKind::kReadWrite
-                                              : VariableReference::RefKind::kWrite,
-                                      context.fErrors)) {
+        !Analysis::UpdateVariableRefKind(left.get(),
+                                         op.kind() != Token::Kind::TK_EQ
+                                                 ? VariableReference::RefKind::kReadWrite
+                                                 : VariableReference::RefKind::kWrite,
+                                         context.fErrors)) {
         return nullptr;
     }
 
diff --git a/src/sksl/ir/SkSLFunctionCall.cpp b/src/sksl/ir/SkSLFunctionCall.cpp
index 2d9204356b..d402a515ce 100644
--- a/src/sksl/ir/SkSLFunctionCall.cpp
+++ b/src/sksl/ir/SkSLFunctionCall.cpp
@@ -864,7 +864,7 @@ std::unique_ptr<Expression> FunctionCall::Convert(const Context& context,
             const VariableRefKind refKind = paramModifiers.fFlags & Modifiers::kIn_Flag
                                                     ? VariableReference::RefKind::kReadWrite
                                                     : VariableReference::RefKind::kPointer;
-            if (!Analysis::MakeAssignmentExpr(arguments[i].get(), refKind, context.fErrors)) {
+            if (!Analysis::UpdateVariableRefKind(arguments[i].get(), refKind, context.fErrors)) {
                 return nullptr;
             }
         }
diff --git a/src/sksl/ir/SkSLPostfixExpression.cpp b/src/sksl/ir/SkSLPostfixExpression.cpp
index 4ec9749587..f4a1523dce 100644
--- a/src/sksl/ir/SkSLPostfixExpression.cpp
+++ b/src/sksl/ir/SkSLPostfixExpression.cpp
@@ -22,7 +22,8 @@ std::unique_ptr<Expression> PostfixExpression::Convert(const Context& context,
                                baseType.displayName() + "'");
         return nullptr;
     }
-    if (!Analysis::MakeAssignmentExpr(base.get(), VariableRefKind::kReadWrite, context.fErrors)) {
+    if (!Analysis::UpdateVariableRefKind(base.get(), VariableRefKind::kReadWrite,
+                                         context.fErrors)) {
         return nullptr;
     }
     return PostfixExpression::Make(context, std::move(base), op);
diff --git a/src/sksl/ir/SkSLPrefixExpression.cpp b/src/sksl/ir/SkSLPrefixExpression.cpp
index 9e88fa8f17..c24a567fe4 100644
--- a/src/sksl/ir/SkSLPrefixExpression.cpp
+++ b/src/sksl/ir/SkSLPrefixExpression.cpp
@@ -157,8 +157,8 @@ std::unique_ptr<Expression> PrefixExpression::Convert(const Context& context,
                                        baseType.displayName() + "'");
                 return nullptr;
             }
-            if (!Analysis::MakeAssignmentExpr(base.get(), VariableReference::RefKind::kReadWrite,
-                                              context.fErrors)) {
+            if (!Analysis::UpdateVariableRefKind(base.get(), VariableReference::RefKind::kReadWrite,
+                                                 context.fErrors)) {
                 return nullptr;
             }
             break;
diff --git a/tests/sksl/shared/Ossfuzz37677.asm.frag b/tests/sksl/shared/Ossfuzz37677.asm.frag
new file mode 100644
index 0000000000..d7b4771c0e
--- /dev/null
+++ b/tests/sksl/shared/Ossfuzz37677.asm.frag
@@ -0,0 +1,73 @@
+OpCapability Shader
+%1 = OpExtInstImport "GLSL.std.450"
+OpMemoryModel Logical GLSL450
+OpEntryPoint Fragment %_entrypoint_v "_entrypoint" %sk_FragColor %sk_Clockwise
+OpExecutionMode %_entrypoint_v OriginUpperLeft
+OpName %sk_FragColor "sk_FragColor"
+OpName %sk_Clockwise "sk_Clockwise"
+OpName %_UniformBuffer "_UniformBuffer"
+OpMemberName %_UniformBuffer 0 "colorGreen"
+OpName %_entrypoint_v "_entrypoint_v"
+OpName %main "main"
+OpName %x "x"
+OpName %y "y"
+OpName %z "z"
+OpDecorate %sk_FragColor RelaxedPrecision
+OpDecorate %sk_FragColor Location 0
+OpDecorate %sk_FragColor Index 0
+OpDecorate %sk_Clockwise BuiltIn FrontFacing
+OpMemberDecorate %_UniformBuffer 0 Offset 0
+OpMemberDecorate %_UniformBuffer 0 RelaxedPrecision
+OpDecorate %_UniformBuffer Block
+OpDecorate %10 Binding 0
+OpDecorate %10 DescriptorSet 0
+OpDecorate %_arr_int_int_1 ArrayStride 16
+OpDecorate %40 RelaxedPrecision
+%float = OpTypeFloat 32
+%v4float = OpTypeVector %float 4
+%_ptr_Output_v4float = OpTypePointer Output %v4float
+%sk_FragColor = OpVariable %_ptr_Output_v4float Output
+%bool = OpTypeBool
+%_ptr_Input_bool = OpTypePointer Input %bool
+%sk_Clockwise = OpVariable %_ptr_Input_bool Input
+%_UniformBuffer = OpTypeStruct %v4float
+%_ptr_Uniform__UniformBuffer = OpTypePointer Uniform %_UniformBuffer
+%10 = OpVariable %_ptr_Uniform__UniformBuffer Uniform
+%void = OpTypeVoid
+%15 = OpTypeFunction %void
+%v2float = OpTypeVector %float 2
+%float_0 = OpConstant %float 0
+%19 = OpConstantComposite %v2float %float_0 %float_0
+%_ptr_Function_v2float = OpTypePointer Function %v2float
+%23 = OpTypeFunction %v4float %_ptr_Function_v2float
+%int = OpTypeInt 32 1
+%int_1 = OpConstant %int 1
+%_arr_int_int_1 = OpTypeArray %int %int_1
+%_ptr_Function__arr_int_int_1 = OpTypePointer Function %_arr_int_int_1
+%_ptr_Function_int = OpTypePointer Function %int
+%int_0 = OpConstant %int 0
+%_ptr_Uniform_v4float = OpTypePointer Uniform %v4float
+%_entrypoint_v = OpFunction %void None %15
+%16 = OpLabel
+%20 = OpVariable %_ptr_Function_v2float Function
+OpStore %20 %19
+%22 = OpFunctionCall %v4float %main %20
+OpStore %sk_FragColor %22
+OpReturn
+OpFunctionEnd
+%main = OpFunction %v4float None %23
+%24 = OpFunctionParameter %_ptr_Function_v2float
+%25 = OpLabel
+%x = OpVariable %_ptr_Function__arr_int_int_1 Function
+%y = OpVariable %_ptr_Function_int Function
+%z = OpVariable %_ptr_Function_int Function
+OpStore %y %int_0
+OpStore %z %int_0
+%35 = OpLoad %int %z
+OpStore %y %35
+%36 = OpAccessChain %_ptr_Function_int %x %35
+%37 = OpLoad %int %36
+%38 = OpAccessChain %_ptr_Uniform_v4float %10 %int_0
+%40 = OpLoad %v4float %38
+OpReturnValue %40
+OpFunctionEnd
diff --git a/tests/sksl/shared/Ossfuzz37677.glsl b/tests/sksl/shared/Ossfuzz37677.glsl
new file mode 100644
index 0000000000..ac468b20ad
--- /dev/null
+++ b/tests/sksl/shared/Ossfuzz37677.glsl
@@ -0,0 +1,10 @@
+
+out vec4 sk_FragColor;
+uniform vec4 colorGreen;
+vec4 main() {
+    int x[1];
+    int y = 0;
+    int z = 0;
+    x[y = z];
+    return colorGreen;
+}
diff --git a/tests/sksl/shared/Ossfuzz37677.metal b/tests/sksl/shared/Ossfuzz37677.metal
new file mode 100644
index 0000000000..b0fe90b552
--- /dev/null
+++ b/tests/sksl/shared/Ossfuzz37677.metal
@@ -0,0 +1,21 @@
+#include <metal_stdlib>
+#include <simd/simd.h>
+using namespace metal;
+struct Uniforms {
+    float4 colorGreen;
+};
+struct Inputs {
+};
+struct Outputs {
+    float4 sk_FragColor [[color(0)]];
+};
+fragment Outputs fragmentMain(Inputs _in [[stage_in]], constant Uniforms& _uniforms [[buffer(0)]], bool _frontFacing [[front_facing]], float4 _fragCoord [[position]]) {
+    Outputs _out;
+    (void)_out;
+    array<int, 1> x;
+    int y = 0;
+    int z = 0;
+    x[y = z];
+    _out.sk_FragColor = _uniforms.colorGreen;
+    return _out;
+}
