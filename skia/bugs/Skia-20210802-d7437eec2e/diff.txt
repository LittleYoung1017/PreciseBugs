diff --git a/gn/sksl_tests.gni b/gn/sksl_tests.gni
index aea4724738..44c79acf27 100644
--- a/gn/sksl_tests.gni
+++ b/gn/sksl_tests.gni
@@ -340,6 +340,7 @@ sksl_shared_tests = [
   "/sksl/shared/Ossfuzz29085.sksl",
   "/sksl/shared/Ossfuzz29494.sksl",
   "/sksl/shared/Ossfuzz36655.sksl",
+  "/sksl/shared/Ossfuzz36770.sksl",
   "/sksl/shared/OutParams.sksl",
   "/sksl/shared/OutParamsNoInline.sksl",
   "/sksl/shared/OutParamsTricky.sksl",
diff --git a/resources/sksl/shared/Ossfuzz36770.sksl b/resources/sksl/shared/Ossfuzz36770.sksl
new file mode 100644
index 0000000000..044512e438
--- /dev/null
+++ b/resources/sksl/shared/Ossfuzz36770.sksl
@@ -0,0 +1,2 @@
+in T { int x; };
+void main() { sk_FragCoord; }
diff --git a/src/sksl/codegen/SkSLSPIRVCodeGenerator.cpp b/src/sksl/codegen/SkSLSPIRVCodeGenerator.cpp
index d3d785d0dc..6863c80966 100644
--- a/src/sksl/codegen/SkSLSPIRVCodeGenerator.cpp
+++ b/src/sksl/codegen/SkSLSPIRVCodeGenerator.cpp
@@ -2079,12 +2079,14 @@ SpvId SPIRVCodeGenerator::writeVariableReference(const VariableReference& ref, O
             if (fProgram.fPool) {
                 fProgram.fPool->attachToThread();
             }
-            symbols.add(std::make_unique<Variable>(/*offset=*/-1,
-                                                   fContext.fModifiersPool->add(modifiers),
-                                                   DEVICE_COORDS_NAME,
-                                                   fContext.fTypes.fFloat4.get(),
-                                                   true,
-                                                   Variable::Storage::kGlobal));
+            auto coordsVar = std::make_unique<Variable>(/*offset=*/-1,
+                                                        fContext.fModifiersPool->add(modifiers),
+                                                        DEVICE_COORDS_NAME,
+                                                        fContext.fTypes.fFloat4.get(),
+                                                        true,
+                                                        Variable::Storage::kGlobal);
+            fSPIRVBonusVariables.insert(coordsVar.get());
+            symbols.add(std::move(coordsVar));
             if (fProgram.fPool) {
                 fProgram.fPool->detachFromThread();
             }
@@ -2117,12 +2119,14 @@ SpvId SPIRVCodeGenerator::writeVariableReference(const VariableReference& ref, O
             if (fProgram.fPool) {
                 fProgram.fPool->attachToThread();
             }
-            symbols.add(std::make_unique<Variable>(/*offset=*/-1,
-                                                   fContext.fModifiersPool->add(modifiers),
-                                                   DEVICE_CLOCKWISE_NAME,
-                                                   fContext.fTypes.fBool.get(),
-                                                   true,
-                                                   Variable::Storage::kGlobal));
+            auto clockwiseVar = std::make_unique<Variable>(/*offset=*/-1,
+                                                           fContext.fModifiersPool->add(modifiers),
+                                                           DEVICE_CLOCKWISE_NAME,
+                                                           fContext.fTypes.fBool.get(),
+                                                           true,
+                                                           Variable::Storage::kGlobal);
+            fSPIRVBonusVariables.insert(clockwiseVar.get());
+            symbols.add(std::move(clockwiseVar));
             if (fProgram.fPool) {
                 fProgram.fPool->detachFromThread();
             }
@@ -3064,6 +3068,7 @@ SpvId SPIRVCodeGenerator::writeInterfaceBlock(const InterfaceBlock& intf, bool a
                                            rtFlipStructType,
                                            intfVar.isBuiltin(),
                                            intfVar.storage()));
+        fSPIRVBonusVariables.insert(modifiedVar);
         InterfaceBlock modifiedCopy(intf.fOffset,
                                     modifiedVar,
                                     intf.typeName(),
@@ -3109,8 +3114,13 @@ SpvId SPIRVCodeGenerator::writeInterfaceBlock(const InterfaceBlock& intf, bool a
     return result;
 }
 
-static bool is_dead(const Variable& var, const ProgramUsage* usage) {
-    ProgramUsage::VariableCounts counts = usage->get(var);
+bool SPIRVCodeGenerator::isDead(const Variable& var) const {
+    // During SPIR-V code generation, we synthesize some extra bonus variables that don't actually
+    // exist in the Program at all and aren't tracked by the ProgramUsage. They aren't dead, though.
+    if (fSPIRVBonusVariables.count(&var)) {
+        return false;
+    }
+    ProgramUsage::VariableCounts counts = fProgram.usage()->get(var);
     if (counts.fRead || counts.fWrite) {
         return false;
     }
@@ -3133,7 +3143,7 @@ void SPIRVCodeGenerator::writeGlobalVar(ProgramKind kind, const VarDeclaration&
         SkASSERT(!fProgram.fConfig->fSettings.fFragColorIsInOut);
         return;
     }
-    if (is_dead(var, fProgram.fUsage.get())) {
+    if (this->isDead(var)) {
         return;
     }
     SpvStorageClass_ storageClass = get_storage_class(var, SpvStorageClassPrivate);
@@ -3628,6 +3638,7 @@ void SPIRVCodeGenerator::addRTFlipUniform(int offset) {
                                        intfStruct,
                                        /*builtin=*/false,
                                        Variable::Storage::kGlobal));
+    fSPIRVBonusVariables.insert(intfVar);
     if (fProgram.fPool) {
         fProgram.fPool->attachToThread();
     }
@@ -3674,8 +3685,7 @@ void SPIRVCodeGenerator::writeInstructions(const Program& program, OutputStream&
 
             const Modifiers& modifiers = intf.variable().modifiers();
             if ((modifiers.fFlags & (Modifiers::kIn_Flag | Modifiers::kOut_Flag)) &&
-                modifiers.fLayout.fBuiltin == -1 &&
-                !is_dead(intf.variable(), fProgram.fUsage.get())) {
+                modifiers.fLayout.fBuiltin == -1 && !this->isDead(intf.variable())) {
                 interfaceVars.insert(id);
             }
         }
@@ -3713,7 +3723,7 @@ void SPIRVCodeGenerator::writeInstructions(const Program& program, OutputStream&
         const Variable* var = entry.first;
         if (var->storage() == Variable::Storage::kGlobal &&
             (var->modifiers().fFlags & (Modifiers::kIn_Flag | Modifiers::kOut_Flag)) &&
-            !is_dead(*var, fProgram.fUsage.get())) {
+            !this->isDead(*var)) {
             interfaceVars.insert(entry.second);
         }
     }
diff --git a/src/sksl/codegen/SkSLSPIRVCodeGenerator.h b/src/sksl/codegen/SkSLSPIRVCodeGenerator.h
index d284bd8a74..212e66189a 100644
--- a/src/sksl/codegen/SkSLSPIRVCodeGenerator.h
+++ b/src/sksl/codegen/SkSLSPIRVCodeGenerator.h
@@ -11,6 +11,7 @@
 #include <stack>
 #include <tuple>
 #include <unordered_map>
+#include <unordered_set>
 
 #include "include/private/SkSLModifiers.h"
 #include "include/private/SkSLProgramElement.h"
@@ -443,6 +444,8 @@ private:
 
     void writeGeometryShaderExecutionMode(SpvId entryPoint, OutputStream& out);
 
+    bool isDead(const Variable& var) const;
+
     MemoryLayout memoryLayoutForVariable(const Variable&) const;
 
     struct EntrypointAdapter {
@@ -503,6 +506,7 @@ private:
     UniformBuffer fUniformBuffer;
     std::vector<const VarDeclaration*> fTopLevelUniforms;
     std::unordered_map<const Variable*, int> fTopLevelUniformMap; //<var, UniformBuffer field index>
+    std::unordered_set<const Variable*> fSPIRVBonusVariables;
     SpvId fUniformBufferId = -1;
 
     friend class PointerLValue;
diff --git a/tests/sksl/shared/Ossfuzz36770.asm.frag b/tests/sksl/shared/Ossfuzz36770.asm.frag
new file mode 100644
index 0000000000..a9da2b9f37
--- /dev/null
+++ b/tests/sksl/shared/Ossfuzz36770.asm.frag
@@ -0,0 +1,36 @@
+### Compilation failed:
+
+error: SPIR-V validation error: Member index 0 is missing a location assignment
+  %T = OpTypeStruct %int %v2float
+
+OpCapability Shader
+%1 = OpExtInstImport "GLSL.std.450"
+OpMemoryModel Logical GLSL450
+OpEntryPoint Fragment %main "main" %4 %sk_Clockwise
+OpExecutionMode %main OriginUpperLeft
+OpName %T "T"
+OpMemberName %T 0 "x"
+OpMemberName %T 1 "u_skRTFlip"
+OpName %sk_Clockwise "sk_Clockwise"
+OpName %main "main"
+OpMemberDecorate %T 0 Offset 0
+OpMemberDecorate %T 1 Offset 32
+OpDecorate %T Block
+OpDecorate %sk_Clockwise BuiltIn FrontFacing
+%int = OpTypeInt 32 1
+%float = OpTypeFloat 32
+%v2float = OpTypeVector %float 2
+%T = OpTypeStruct %int %v2float
+%_ptr_Input_T = OpTypePointer Input %T
+%4 = OpVariable %_ptr_Input_T Input
+%bool = OpTypeBool
+%_ptr_Input_bool = OpTypePointer Input %bool
+%sk_Clockwise = OpVariable %_ptr_Input_bool Input
+%void = OpTypeVoid
+%14 = OpTypeFunction %void
+%main = OpFunction %void None %14
+%15 = OpLabel
+OpReturn
+OpFunctionEnd
+
+1 error
diff --git a/tests/sksl/shared/Ossfuzz36770.glsl b/tests/sksl/shared/Ossfuzz36770.glsl
new file mode 100644
index 0000000000..a503b40742
--- /dev/null
+++ b/tests/sksl/shared/Ossfuzz36770.glsl
@@ -0,0 +1,7 @@
+
+uniform vec2 u_skRTFlip;
+in T {
+    int x;
+};
+void main() {
+}
diff --git a/tests/sksl/shared/Ossfuzz36770.metal b/tests/sksl/shared/Ossfuzz36770.metal
new file mode 100644
index 0000000000..bd726388d0
--- /dev/null
+++ b/tests/sksl/shared/Ossfuzz36770.metal
@@ -0,0 +1,22 @@
+#include <metal_stdlib>
+#include <simd/simd.h>
+using namespace metal;
+struct Inputs {
+};
+struct Outputs {
+    float4 sk_FragColor [[color(0)]];
+};
+struct T {
+    int x;
+    float2 u_skRTFlip;
+};
+struct Globals {
+    constant T* _anonInterface0;
+};
+fragment Outputs fragmentMain(Inputs _in [[stage_in]], constant T& _anonInterface0 [[buffer(0)]], bool _frontFacing [[front_facing]], float4 _fragCoord [[position]]) {
+    Globals _globals{&_anonInterface0};
+    (void)_globals;
+    Outputs _out;
+    (void)_out;
+    return _out;
+}
