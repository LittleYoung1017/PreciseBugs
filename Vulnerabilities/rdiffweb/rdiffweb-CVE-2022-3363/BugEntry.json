{"buggy_code": ["![Rdiffweb Banner](https://gitlab.com/ikus-soft/rdiffweb/-/raw/master/doc/_static/banner.png)\n\n<p align=\"center\">\n<strong>\n<a href=\"https://www.rdiffweb.org\">website</a>\n\u2022 <a href=\"https://www.ikus-soft.com/archive/rdiffweb/doc/latest/html/\">docs</a>\n\u2022 <a href=\"https://groups.google.com/d/forum/rdiffweb\">community</a>\n\u2022 <a href=\"https://rdiffweb-demo.ikus-soft.com/\">demo</a>\n</strong>\n</p>\n\n<p align=\"center\">\n<a href=\"LICENSE\"><img alt=\"License\" src=\"https://img.shields.io/github/license/ikus060/rdiffweb\"></a>\n<a href=\"https://gitlab.com/ikus-soft/rdiffweb/pipelines\"><img alt=\"Build\" src=\"https://gitlab.com/ikus-soft/rdiffweb/badges/master/pipeline.svg\"></a>\n<a href=\"https://sonar.ikus-soft.com/dashboard?id=rdiffweb\"><img alt=\"Quality Gate Minarca Client\" src=\"https://sonar.ikus-soft.com/api/project_badges/measure?project=rdiffweb&metric=alert_status\"></a>\n<a href=\"https://sonar.ikus-soft.com/dashboard?id=rdiffweb\"><img alt=\"Coverage\" src=\"https://sonar.ikus-soft.com/api/project_badges/measure?project=rdiffweb&metric=coverage\"></a>\n<a href=\"https://bestpractices.coreinfrastructure.org/projects/6583\"><img src=\"https://bestpractices.coreinfrastructure.org/projects/6583/badge\"></a>\n</p>\n\n<h1 align=\"center\">\nWelcome to Rdiffweb\n</h1>\n\nRdiffweb is a web application that allows you to view repositories generated\nby [rdiff-backup](https://rdiff-backup.net/). The purpose of this\napplication is to ease the management of backups and quickly restore your data\nwith a rich and powerful web interface.\n\nRdiffweb is written in Python and is released as open source project under the \nGNU GENERAL PUBLIC LICENSE (GPL). All source code and documentation are\nCopyright Rdiffweb contributors.\n\nRdiffweb is actively developed by [IKUS Soft](https://www.ikus-soft.com/)\nsince November 2014.\n\nThe Rdiffweb source code is hosted on [Gitlab](https://gitlab.com/ikus-soft/rdiffweb)\nand mirrored to [Github](https://github.com/ikus060/rdiffweb).\n\nThe Rdiffweb website is https://rdiffweb.org/.\n\n## Features\n\nWith its rich web interface Rdiffweb provide a notable list of features:\n\n * Browse your backup\n * Restore single file or multiple files as an archived\n * Users authentication via local database and LDAP\n * Users authorization\n * Email notification when backup is not successful\n * Configurable repository encoding\n * Configurable retention period\n * Backup statistics visualization using graphs\n * SSH Keys management\n * Disk quota visualization\n * File and folder deletion\n\n## Demo\n\nIf you quickly want to check how Rdiffweb is behaving, you may try our demo server hosted on:\n\n[https://rdiffweb-demo.ikus-soft.com/](https://rdiffweb-demo.ikus-soft.com/)\n\nUse the following credential to login:\n\n * Username: admin\n * Password: admin123\n\n## Installation & Docker usage\n\nFor detailed installation steps, read the [Installation documentation](https://www.ikus-soft.com/archive/rdiffweb/doc/latest/html/installation.html).\n\n## Current Build Status\n\n[![Build Status](https://gitlab.com/ikus-soft/rdiffweb/badges/master/pipeline.svg)](https://gitlab.com/ikus-soft/rdiffweb/pipelines)\n\n## Download\n\nYou should read the [Documentation](https://www.ikus-soft.com/archive/rdiffweb/doc/latest/html/index.html) to properly install Rdiffweb in your environment.\n\n**Docker**\n\n    docker pull ikus060/rdiffweb\n    \n**Debian**\n\n    curl -L https://www.ikus-soft.com/archive/rdiffweb/public.key | apt-key add - \n    echo \"deb https://nexus.ikus-soft.com/repository/apt-release-bullseye/ bullseye main\" > /etc/apt/sources.list.d/rdiffweb.list\n    apt update\n    apt install rdiffweb\n\n**Pypi**\n\n    pip install rdiffweb\n\n## Support\n\n### Mailing list\n\nRdiffweb users should use the [Rdiffweb mailing list](https://groups.google.com/forum/#!forum/rdiffweb).\n\n### Bug Reports\n\nBug reports should be reported on the Rdiffweb Gitlab at https://gitlab.com/ikus-soft/rdiffweb/-/issues\n\n### Professional support\n\nProfessional support for Rdiffweb is available by contacting [IKUS Soft](https://www.ikus-soft.com/en/support/#form).\n\n# Changelog\n\n## Next Release - 2.5.0\n\nThis next release focus on two-factor-authentication as a measure to increase security of user's account.\n\n* Store User's session information into database\n* Update ldap plugin to load additional attributes from LDAP server\n* Improve `/status` page error handling when `session_statistics` cannot be read\n* Add support for Ubuntu Jammy\n* Upgrade from Bootstrap v3 to v4 #204\n* Replace Fontello by Font-Awesome v4\n* Use CSS variables `var()` to customize themes\n* Remove usage of Jquery.validate\n* Replace custom timsort by jquery DataTables #205\n* Add Active Session managements #203\n  * Active session should be visible in user's profiles\n  * Active session may be revoked by user\n  * Active session should be visible in administration view\n  * Action session may be revoke by administrator\n  * Show number of active users within the last 24 hours in dashboard\n* Handle migration of older Rdiffweb database by adding the missing `repos.Encoding`, `repos.keepdays` and `users.role` columns #185\n* Replace deprecated references of `disutils.spawn.find_executable()` by `shutil.which()` #208\n* Add two-factor authentication with email verification #201\n* Generate a new session on login and 2FA #220\n* Enforce permission on /etc/rdiffweb configuration folder\n* Enforce validation on fullname, username and email\n* Limit incorrect attempts to change the user's password to prevent brute force attacks #225 [CVE-2022-3273](https://nvd.nist.gov/vuln/detail/CVE-2022-3273)\n* Enforce password policy new password cannot be set as new password [CVE-2022-3376](https://nvd.nist.gov/vuln/detail/CVE-2022-3376)\n* Enforce better rate limit on login, mfa, password change and API [CVE-2022-3439](https://nvd.nist.gov/vuln/detail/CVE-2022-3439) [CVE-2022-3456](https://nvd.nist.gov/vuln/detail/CVE-2022-3456)\n* Enforce 'Origin' validation [CVE-2022-3457](https://nvd.nist.gov/vuln/detail/CVE-2022-3457)\n* Define idle and absolute session timeout with agressive default to protect usage on public computer [CVE-2022-3327](https://nvd.nist.gov/vuln/detail/CVE-2022-3327)\n\nBreaking changes:\n\n* Drop Ubuntu Hirsute & Impish (End-of-life)\n* `session-dir` is deprecated and should be replace by `rate-limit-dir`. User's session are stored in database.\n* previous `.css` customization are not barkward compatible\n\n## 2.4.10 (2022-10-03)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Mitigate path traversal vulnerability [CVE-2022-3389](https://nvd.nist.gov/vuln/detail/CVE-2022-3389)\n\n## 2.4.9 (2022-09-28)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Add `Cache-Control` and other security headers [CVE-2022-3292](https://nvd.nist.gov/vuln/detail/CVE-2022-3292)\n* Enforce password policy using `password-score` based on [zxcvbn](https://github.com/dropbox/zxcvbn) [CVE-2022-3326](https://nvd.nist.gov/vuln/detail/CVE-2022-3326)\n\n## 2.4.8 (2022-09-26)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Clean-up invalid path on error page\n* Limit username field length [CVE-2022-3290](https://nvd.nist.gov/vuln/detail/CVE-2022-3290)\n* Limit user's email field length [CVE-2022-3272](https://nvd.nist.gov/vuln/detail/CVE-2022-3272)\n* Limit user's root directory field length [CVE-2022-3295](https://nvd.nist.gov/vuln/detail/CVE-2022-3295)\n* Limit SSH Key title field length [CVE-2022-3298](https://nvd.nist.gov/vuln/detail/CVE-2022-3298)\n\n## 2.4.7 (2002-09-21)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Generate a new session on login and 2FA #220 [CVE-2022-3269](https://nvd.nist.gov/vuln/detail/CVE-2022-3269)\n* Mitigate CSRF on user's settings #221 [CVE-2022-3274](https://nvd.nist.gov/vuln/detail/CVE-2022-3274)\n\n## 2.4.6 (2022-09-20)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Support MarkupSafe<3 for Debian bookworm\n* Mitigate CSRF on user's notification settings #216 [CVE-2022-3233](https://nvd.nist.gov/vuln/detail/CVE-2022-3233)\n* Mitigate CSRF on repository settings #217 [CVE-2022-3267](https://nvd.nist.gov/vuln/detail/CVE-2022-3267)\n* Use 'Secure' Attribute with Sensitive Cookie in HTTPS Session on HTTP Error #218 [CVE-2022-3174](https://nvd.nist.gov/vuln/detail/CVE-2022-3174)\n\n## 2.4.5 (2002-09-16)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Mitigate CSRF on repository deletion and user deletion [CVE-2022-3232](https://nvd.nist.gov/vuln/detail/CVE-2022-3232) #214 #215\n\n## 2.4.4 (2002-09-15)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Use `X-Real-IP` to identify client IP address to mitigate Brute-Force attack #213\n\n## 2.4.3 (2022-09-14)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Mitigate CSRF in profile's SSH Keys [CVE-2022-3221](https://nvd.nist.gov/vuln/detail/CVE-2022-3221) #212\n\n## 2.4.2 (2022-09-12)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Use 'Secure' Attribute with Sensitive Cookie in HTTPS Session. [CVE-2022-3174](https://nvd.nist.gov/vuln/detail/CVE-2022-3174) #209\n* Avoid leakage of the stack trace in the default error page. [CVE-2022-3175](https://nvd.nist.gov/vuln/detail/CVE-2022-3175) #210\n* Enforce minimum and maximum password length [CVE-2022-3175](https://nvd.nist.gov/vuln/detail/CVE-2022-3179) #211\n\n## 2.4.1 (2022-09-08)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Add Clickjacking Defense [CVE-2022-3167](https://nvd.nist.gov/vuln/detail/CVE-2022-3167)\n* Drop Ubuntu Hirsute & Impish (End-of-life)\n\n## 2.4.0 (2022-06-21)\n\nThis new release brings a lot of improvement since the last version, multiple bug fixes\nto make the application stable. A couple of new features to improve the overall\nusability and a new security feature to block a brute force attack.\n\n* Add RateLimit to login page and API to mitigate robots attacks #167\n* Send email notification only if `email-sender` option is defined to avoid raising exception in logs #176\n* Support file restore cancellation without leaving `rdiffweb-restore` process in `<defunct>` state #174\n* Replace `python-ldap` by `ldap3` a pure python implementation to avoid dependencies on `sasl` and `ldap` binaries #186\n* Reffactor core module to allow better extendability and reusability #183\n* Add support for Debian Bookworm #180\n* Add support for Ubuntu Impish #175\n* Add rdiff-backup version to administration view\n* Run unit test during Debian build package\n* Refresh repository list automatically when required #188 #189\n* Fix error 500 displayed in status page #191\n* Improve repository browsing speed by minimizing the number of I/O call #192\n* Publish Docker image directly to DockerHub #144\n* Add REST API to manage sshkeys\n\nBreaking changes:\n\n* Ldap Password changes is not supported anymore.\n* Ldap Check Shadow expire config is not supported anymore. It should be replace by a custom filter.\n* Drop CentOS 7 and CentOS 8 support\n\n## 2.3.9 (2022-01-05)\n\nMaintenance release to fix minor issues\n\n* Improve date parsing for `backup.log` to avoid printing exception in logs #170\n* Return HTTP error 403 for invalid symlink to avoid returning a misleading HTTP 500 Server Error #168\n* Show a user friendly error message when trying to create a new user with an existing username #169\n* Handle repository without last-backup date during the notification process to ensure notifications are sent #171\n* Replace CherryPy `storage_type` by `storage_class` to avoid warning in logs\n* Update code to avoid deprecation warning where applicable\n* Add Flake8 validation to improve code quality\n* Remove Ubuntu Groovy support\n\n## 2.3.8 (2021-12-01)\n\n* Push all artefacts to nexus server including binaries and documentation\n* Fix `Chart.js` loading on Debian bullseye #164\n* Update installation steps documentation\n* Improve LDAP authentication to lookup entire directory\n* Fix usage of `--ldap-add-user-default-userroot` to avoid error related to wrong encoding\n* Improve authentication mechanics\n* Avoid raising an HTTP error 500 when login form receive invalid payload\n* Mitigate open redirect vulnerability in login form\n\n## 2.3.7 (2021-10-21)\n\n * To avoid backward compatibility issue, revert CSRF Token validation\n * Mitigate CSRF vulnerability using cookies with `SameSite=Lax`\n * Mitigate CSRF vulnerability by validating the `Origin` header when a form is submited\n * Improve usage of WTForm for all form validation\n * Update installation stepd for debian #162\n * Build Ubuntu packages and publish them to our APT repo\n\n## 2.3.6 (2021-10-20)\n\n * Broken build\n\n## 2.3.5 (2021-10-18)\n\n * Mitigate CSRF vulnerability to user, ssh and repo management with CSRF Token\n\n## 2.3.4 (2021-09-20)\n\n * Skip email notification if `email-host` configuration is not provided #157\n * Skip email notification when the new attribute value has the same value #159\n * USE LDAP `mail` attribute when creating new user from LDAP directory #156\n\n## 2.3.3 (2021-09-10)\n\n * Provide a new theme `blue` to match IKUS Soft colors #158\n\n## 2.3.2 (2021-09-07)\n\n * Automatically update user's repository list based on user's home directory\n\n## 2.3.1 (2021-07-14)\n\n * Update default `session-dir` location to `/var/lib/rdiffweb/session` to avoid using `/var/run` #148\n\n## 2.3.0 (2021-07-06)\n\n * Improve timezone handling to display date with local timezone using javascript #143\n * Improve charts by replacing d3js by chartkick #122\n * Replace the status view by something meaningful with chartkick #122\n * Provide Docker image with Rdiffweb `docker pull ikus060/rdiffweb` #55\n * Fix file and folder sorting #143\n\n## 2.2.0 (2021-05-11)\n \n * Debian package:\n   * Add rdiff-backup as dependencies to comply with Debian packaging rules\n   * Multiple other fixed to control files\n   * Use debhelper-compat (= 13)\n   * Use debhelper-compat (= 13)\n   * Run test during packaging\n   * Create default folder `/var/run/rdiffweb/sessions` to store user session\n * Use ConfigArgPare for configuration to support configuration file, environment variables and arguments to configure rdiffweb #114\n * Fix cache in localization module\n * Add `ldap-add-default-role` and `ldap-add-default-userroot` option to define default value for role and user root when creating user from LDAP #125\n * Support PostgreSQL database by replacing our storage layer by SQLAlchemy #126\n * Fix to retrieve user quota only for valid user_root #135\n * Add option `disable-ssh-keys` to disable SSH Key management\n * Use absolute URL everywhere\n * Add support for `X-Forwarded-For`, `X-Forwarded-proto` and other reverse proxy header when generating absolute URL\n * Drop Debian Stretch support\n * Implement a new background scheduler using apscheduler #82\n * Use background job to send email notification to avoid blocking web page loading #47\n * Use background job to delete repository to avoid blocking web page loading #48\n * Allow deleting a specific file or folder from the history using `rdiff-backup-delete` #128\n * Improve support for `session-dir` #131\n * Add option `admin-password` to define administrator password for better security\n * Improve performance of repository browsing \n * Add a new view to display logs of a specific repository\n * Allow downloading the log\n * Define a default limit to graph statistics to make it display faster\n * Fix `get-quota-cmd` option to properly return a value\n\n## 2.1.0 (2021-01-15)\n\n* Debian package: Remove dh-systemd from Debian build dependencies (https://bugs.debian.org/871312we)\n* Improve Quota management:\n  * `QuotaSetCmd`, `QuotaGetCmd` and `QuotaUsedCmd` options could be used to customize how to set the quota for your environment.\n  * Display user's quota in User View\n  * Display user's quota in Admin View\n  * Allow admin to update user quota from Admin View when `QuotaSetCmd` is defined.\n  * Allow admin to define user quota using human readable value (e.g.: GiB, TiB, etc.)\n  * Improve logging around quota management\n* Improve robustness when service is starting\n* Improve robustness when repository has wrong permission defined (e.g.: when some files not readable)\n* Add user id in Admin view\n* Replace `UserObject(1)` by the actual username in log file to improve debugging\n\n## 2.0.0 (2020-12-04)\n\n* Re-implement logic to update repositories views to remove duplicates and avoid nesting repo. #107\n* Handle elapsed time of days in the graph. Thanks [Nathaniel van Diepen](https://github.com/Eeems) contributions.\n* Rebrand all link to ikus-soft.com\n* Update documentation to install rdiffweb\n* Remove obsolete minify dependency\n* Drop support for python2\n* Provide null translation if translation catalogues are not found\n* Pass a LANG environment variable to rdiff-backup restore process to fix encoding issue #112\n* Remove obsolete python shebang\n* Remove execution bit (+x) on python modules\n* Provide `--help` and `--version` on `rdiffweb` executable\n* Improve cherrypy version detection\n* Do not update translation files (.mo) during build\n\n## 1.5.0 (2020-06-24)\n\nThis minor release introduce official support of rdiffweb on Debian Bullseye. It also includes some usability improvements.\n\n * Change formatting of Last Backup date for \"Updated 3 weeks ago\" to ease the readability\n * Add support for Debian Bullseye\n * Add support for Python 3.8 (#104)\n * Add warning in the users list view when a root directory is invalid (#30)\n * Add options to control search depthness (#1)\n * Print a warning in the log when the \"DefaultTheme\" value is not valid (#90)\n\n## 1.4.0 (2020-05-20)\n\nThanks to our sponsor, this release introduce a feature to have better control over the user's permission by defining 3 different levels of privilege: Admin, Maintainer and User. This addition allows you to have better control on what your users can or can't do.\n\n * Fix single repository discovery when a user's home is a rdiff-backup repository\n * [SPONSORED] Add a new setting at the user level to define the user's role. Admin,\n   Maintainer and User. Admin are allowed to do everything. Maintainer are\n   allow to browse and delete repo. Users are only allowed to browse. #94\n * Add \"Powered by\" in the web interface footer #91\n * Display a nice error message when trying to delete admin user #93\n * Introduce usage of wtforms and flash in admin users for better form validation. #96 #97\n * Update French translation\n\n## 1.3.2 (2020-04-23)\n\nThis minor releases fixed issues found while testing release 1.3.0.\n\n * Fix lookup of executable rdiff-backup and rdiffweb-restore to search in current virtualenv first\n * Fix repository view when multiple repo path are conflicting\n * Fix logging of rdiffweb-restore subprocess\n\n## 1.3.1 (2020-04-10)\n\nThis minor release enforces security of the password stored in rdiffweb database to make use of a better encryption using SSHA.\nOnly new passwords will make use of the SSHA scheme.\n\n * Enforce password encryption by using SSHA scheme #88\n\n## 1.3.0 (2020-04-07)\n\nThis release focuses on improving the restore of big archives. The download should be much faster to start. Major enhancement was made to offload the processing outside the web server. And all of this is still compatible with rdiff-backup v1.2.8 and the latest v2.0.0.\n\n * Restore file and folder in a subprocess to make the download start faster\n * Fix encoding of archive on Python3.6 (CentOS 7) by using PAX format\n * Add support to restore files and folders using rdiff-backup2\n * Remove obsolete dependencies `pysqlite2`\n * Fix issue creating duplicate entries of repository in the database\n\n## 1.2.2 (2020-03-05)\n\nThis release provides little improvement to the v1.2.x including official support of rdiff-backup v2.0.0.\n\n * Enhance the repository to invite users to refresh the repository when the view is empty.\n * Support rdiff-backup v2.0.0\n * Deprecate support for cherrypy 4, 5, 6 and 7\n * Improve loading of repository data (cache status and entries)\n * Restore compatibility with SQLite 3.7 (CentOS7)\n\nKnown issues:\n\n * Filename encoding in tar.gz and zip file might not be accurate if you are running Python 3.6 (CentOS7)\n\n\n## 1.2.1 (2020-02-08)\n\nLittle bug fix following the previous release\n\n * Fix 404 error when trying to access other users repo as admin\n * Fix logging format for cherrypy logs to matches rdiffweb format\n * Add log rotation by default\n\n## 1.2.0 (2020-01-30)\n\nThis release focus on improving the database layers for better extendability to add more type of data and to support more databases backend like postgresql in the near future.\n\n * Add explicit testing for Debian Stretch & Buster\n * Change the persistence layers\n   * Minimize number of SQL queries\n   * Add object lazy loading\n   * Add object data caching\n * Fix bugs with SQLite <= 3.16 (Debian Stretch)\n\n## 1.1.0 (2019-10-31)\n\nThis release focus on improving the admin area and building the fundation for repository access control list (ACL).\n\n * Update documentation from PDSL web site\n * Improve the navigation bar layout\n * Update the login page headline\n * Update jinja2 version to allow 2.10.x\n * Show server log in admin area\n * Reduce code smell\n * Add System information in admin area\n * Validate credential using local database before LDAP\n * Reffactoring templates macros\n * Enhance user's view search bar\n * Change repository URL to username/repopath\n * Add System information in admin area\n * Improve testcases\n * Clean-up obsolete code\n * Fix issue with captital case encoding name\n * Fix compilation of less files\n * Fix google font import\n\n## 1.0.3 (2019-10-04)\n * Removing the auto update repos\n\n## 1.0.2 (2019-10-01)\n * Create \"admin\" user if missing\n * Update french translation\n\n## 1.0.1 (2019-09-22)\n * Update installation documentation \n * Fix removal of SSH Key\n * Return meaningful error to the user trying to add an existing SSH key\n\n## 1.0.0 (2019-09-11)\n * Make repository removal more robust\n * Improve performance of librdiff\n * Add new RESTful api\n * Return the right HTTP 401 or 402 error code for authentication\n * Fix bug introduce by upgrade to Jinja2 + python3\n * Store ssh keys in database and disk\n * Add support for theme (default, orange)\n * Remove deprecated profiling code\n * Add disk usage support / quota\n * Add support of cherrypy v18\n * Drop support of cherrypy v3.2.2\n * Add wsgi entry point\n * Replace the plugins architecture to ease implementation\n * Numerous bug fixes\n\n## 0.10.9 (2019-05-22)\n * Better error handling when error.log file are not valid gzip file\n\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport logging\n\nimport cherrypy\nfrom wtforms.fields import BooleanField, StringField, SubmitField\n\nfrom rdiffweb.controller import Controller, flash\nfrom rdiffweb.controller.form import CherryForm\nfrom rdiffweb.tools.auth_form import LOGIN_PERSISTENT\nfrom rdiffweb.tools.i18n import gettext_lazy as _\n\n# Define the logger\nlogger = logging.getLogger(__name__)\n\n\nclass MfaForm(CherryForm):\n    code = StringField(\n        _('Verification code'),\n        description=_('Enter the code to verify your identity.'),\n        render_kw={\n            \"class\": \"form-control-lg\",\n            \"placeholder\": _('Enter verification code here'),\n            \"autocomplete\": \"off\",\n            \"autocorrect\": \"off\",\n            \"autofocus\": \"autofocus\",\n        },\n    )\n    persistent = BooleanField(\n        _('Remember me'),\n        default=lambda: cherrypy.session.get(LOGIN_PERSISTENT, False),\n    )\n    submit = SubmitField(\n        _('Sign in'),\n        render_kw={\"class\": \"btn-primary btn-lg btn-block\"},\n    )\n    resend_code = SubmitField(\n        _('Resend code to my email'),\n        render_kw={\"class\": \"btn-link btn-sm btn-block\"},\n    )\n\n    def validate_code(self, field):\n        # Code is required when submit.\n        if self.submit.data:\n            if not self.code.data:\n                raise ValueError(_('Invalid verification code.'))\n            # Validate verification code.\n            if not cherrypy.tools.auth_mfa.verify_code(code=self.code.data, persistent=self.persistent.data):\n                raise ValueError(_('Invalid verification code.'))\n\n    def validate(self, extra_validators=None):\n        if not (self.submit.data or self.resend_code.data):\n            raise ValueError(_('Invalid operation'))\n        return super().validate()\n\n\nclass MfaPage(Controller):\n    @cherrypy.expose()\n    @cherrypy.tools.ratelimit(methods=['POST'])\n    def index(self, **kwargs):\n        form = MfaForm()\n\n        # Validate MFA\n        if form.is_submitted():\n            if form.validate():\n                if form.submit.data:\n                    cherrypy.tools.auth_mfa.redirect_to_original_url()\n                elif form.resend_code.data:\n                    self.send_code()\n        if cherrypy.tools.auth_mfa.is_code_expired():\n            # Send verification code if previous code expired.\n            self.send_code()\n        params = {\n            'form': form,\n        }\n        # Add welcome message to params. Try to load translated message.\n        welcome_msg = self.app.cfg.welcome_msg\n        if welcome_msg:\n            params[\"welcome_msg\"] = welcome_msg.get('')\n            if hasattr(cherrypy.response, 'i18n'):\n                locale = cherrypy.response.i18n.locale.language\n                params[\"welcome_msg\"] = welcome_msg.get(locale, params[\"welcome_msg\"])\n        return self._compile_template(\"mfa.html\", **params)\n\n    def send_code(self):\n        # Send verification code by email\n        userobj = cherrypy.serving.request.currentuser\n        if not userobj.email:\n            flash(\n                _(\n                    \"Multi-factor authentication is enabled for your account, but your account does not have a valid email address to send the verification code to. Check your account settings with your administrator.\"\n                )\n            )\n        else:\n            code = cherrypy.tools.auth_mfa.generate_code()\n            body = self.app.templates.compile_template(\n                \"email_mfa.html\", **{\"header_name\": self.app.cfg.header_name, 'user': userobj, 'code': code}\n            )\n            cherrypy.engine.publish('queue_mail', to=userobj.email, subject=_(\"Your verification code\"), message=body)\n            flash(_(\"A new verification code has been sent to your email.\"))\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nimport cherrypy\nfrom wtforms.fields import SelectField, StringField, SubmitField\nfrom wtforms.widgets import HiddenInput\n\nfrom rdiffweb.controller import Controller, flash\nfrom rdiffweb.controller.form import CherryForm\nfrom rdiffweb.core.model import UserObject\nfrom rdiffweb.tools.i18n import gettext_lazy as _\n\n\nclass AbstractMfaForm(CherryForm):\n    def __init__(self, obj, **kwargs):\n        assert obj\n        super().__init__(obj=obj, **kwargs)\n        # Keep only one of the enable or disable button\n        if obj.mfa:\n            self.enable_mfa.widget = HiddenInput()\n            self.enable_mfa.data = ''\n        else:\n            self.disable_mfa.widget = HiddenInput()\n            self.disable_mfa.data = ''\n\n\nclass MfaStatusForm(AbstractMfaForm):\n    mfa = SelectField(\n        _('Two-Factor Authentication (2FA) Status'),\n        coerce=int,\n        choices=[\n            (UserObject.DISABLED_MFA, _(\"Disabled\")),\n            (UserObject.ENABLED_MFA, _(\"Enabled\")),\n        ],\n        render_kw={'readonly': True, 'disabled': True, 'data-beta': '1'},\n    )\n    enable_mfa = SubmitField(_('Enable Two-Factor Authentication'), render_kw={\"class\": \"btn-success\"})\n    disable_mfa = SubmitField(_('Disable Two-Factor Authentication'), render_kw={\"class\": \"btn-warning\"})\n\n\nclass MfaToggleForm(AbstractMfaForm):\n    code = StringField(\n        _('Verification code'),\n        render_kw={\n            \"placeholder\": _('Enter verification code here'),\n            \"autocomplete\": \"off\",\n            \"autocorrect\": \"off\",\n            \"autofocus\": \"autofocus\",\n        },\n    )\n    enable_mfa = SubmitField(_('Enable Two-Factor Authentication'), render_kw={\"class\": \"btn-success\"})\n    disable_mfa = SubmitField(_('Disable Two-Factor Authentication'), render_kw={\"class\": \"btn-warning\"})\n    resend_code = SubmitField(\n        _('Resend code to my email'),\n        render_kw={\"class\": \"btn-link\"},\n    )\n\n    @property\n    def app(self):\n        return cherrypy.request.app\n\n    def populate_obj(self, userobj):\n        # Enable or disable MFA only when a code is provided.\n        if self.enable_mfa.data:\n            userobj.mfa = UserObject.ENABLED_MFA\n            flash(_(\"Two-Factor authentication enabled successfully.\"), level='success')\n        elif self.disable_mfa.data:\n            userobj.mfa = UserObject.DISABLED_MFA\n            flash(_(\"Two-Factor authentication disabled successfully.\"), level='success')\n\n    def validate_code(self, field):\n        # Code is required for enable_mfa and disable_mfa\n        if self.enable_mfa.data or self.disable_mfa.data:\n            if not self.code.data:\n                raise ValueError(_(\"Enter the verification code to continue.\"))\n            # Validate code\n            if not cherrypy.tools.auth_mfa.verify_code(self.code.data, False):\n                raise ValueError(_(\"Invalid verification code.\"))\n\n    def validate(self, extra_validators=None):\n        if not (self.enable_mfa.data or self.disable_mfa.data or self.resend_code.data):\n            raise ValueError(_('Invalid operation'))\n        return super().validate()\n\n\nclass PagePrefMfa(Controller):\n    @cherrypy.expose\n    def default(self, action=None, **kwargs):\n        form = MfaToggleForm(obj=self.app.currentuser)\n        if form.is_submitted():\n            if form.validate():\n                if form.resend_code.data:\n                    self.send_code()\n                elif form.enable_mfa.data or form.disable_mfa.data:\n                    form.populate_obj(self.app.currentuser)\n                    form = MfaStatusForm(obj=self.app.currentuser)\n            # Send verification code if previous code expired.\n            elif cherrypy.tools.auth_mfa.is_code_expired():\n                self.send_code()\n        else:\n            form = MfaStatusForm(obj=self.app.currentuser)\n        params = {\n            'form': form,\n        }\n        return self._compile_template(\"prefs_mfa.html\", **params)\n\n    def send_code(self):\n        userobj = self.app.currentuser\n        if not userobj.email:\n            flash(_(\"To continue, you must set up an email address for your account.\"), level='warning')\n            return\n        code = cherrypy.tools.auth_mfa.generate_code()\n        body = self.app.templates.compile_template(\n            \"email_mfa.html\", **{\"header_name\": self.app.cfg.header_name, 'user': userobj, 'code': code}\n        )\n        cherrypy.engine.publish('queue_mail', to=userobj.email, subject=_(\"Your verification code\"), message=body)\n        flash(_(\"A new verification code has been sent to your email.\"))\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nfrom unittest.mock import MagicMock\n\nimport cherrypy\nfrom parameterized import parameterized\n\nimport rdiffweb.test\nfrom rdiffweb.core.model import UserObject\n\n\nclass PagePrefMfaTest(rdiffweb.test.WebCase):\n\n    login = True\n\n    def setUp(self):\n        super().setUp()\n        # Define email for all test\n        userobj = UserObject.get_user(self.USERNAME)\n        userobj.email = 'admin@example.com'\n        userobj.add()\n\n    def _set_mfa(self, mfa):\n        # Define mfa for user\n        userobj = UserObject.get_user(self.USERNAME)\n        userobj.mfa = mfa\n        userobj.add()\n        if mfa == UserObject.DISABLED_MFA:\n            return\n        # Generate a code for login if required\n        self.listener = MagicMock()\n        cherrypy.engine.subscribe('queue_mail', self.listener.queue_email, priority=50)\n        try:\n            self.getPage(\"/mfa/\")\n            self.assertStatus(200)\n            self.assertInBody(\"A new verification code has been sent to your email.\")\n            # Extract code from email between <strong> and </strong>\n            self.listener.queue_email.assert_called_once()\n            message = self.listener.queue_email.call_args[1]['message']\n            code = message.split('<strong>', 1)[1].split('</strong>')[0]\n            # Login to MFA\n            self.getPage(\"/mfa/\", method='POST', body={'code': code, 'submit': '1'})\n            self.assertStatus(303)\n        finally:\n            cherrypy.engine.unsubscribe('queue_mail', self.listener.queue_email)\n\n    def _get_code(self, action):\n        assert action in ['enable_mfa', 'disable_mfa', 'resend_code']\n        # Register an email listeer to capture email send\n        self.listener = MagicMock()\n        cherrypy.engine.subscribe('queue_mail', self.listener.queue_email, priority=50)\n        # Query MFA page to generate a code\n        try:\n            self.getPage(\"/prefs/mfa\", method='POST', body={action: '1'})\n            self.assertStatus(200)\n            self.assertInBody(\"A new verification code has been sent to your email.\")\n            # Extract code from email between <strong> and </strong>\n            self.listener.queue_email.assert_called_once()\n            message = self.listener.queue_email.call_args[1]['message']\n            return message.split('<strong>', 1)[1].split('</strong>')[0]\n        finally:\n            cherrypy.engine.unsubscribe('queue_mail', self.listener.queue_email)\n\n    def test_get(self):\n        # When getting the page\n        self.getPage(\"/prefs/mfa\")\n        # Then the page is return without error\n        self.assertStatus(200)\n\n    @parameterized.expand(\n        [\n            ('enable_mfa', UserObject.DISABLED_MFA, UserObject.ENABLED_MFA),\n            ('disable_mfa', UserObject.ENABLED_MFA, UserObject.DISABLED_MFA),\n        ]\n    )\n    def test_with_valid_code(self, action, initial_mfa, expected_mfa):\n        # Define mfa for user\n        self._set_mfa(initial_mfa)\n        # Given a user with email requesting a code\n        code = self._get_code(action=action)\n        # When sending a valid code\n        self.getPage(\"/prefs/mfa\", method='POST', body={action: '1', 'code': code})\n        # Then mfa get enabled or disable accordingly\n        self.assertStatus(200)\n        userobj = UserObject.get_user(self.USERNAME)\n        self.assertEqual(userobj.mfa, expected_mfa)\n        # Then no email get sent\n        self.assertNotInBody(\"A new verification code has been sent to your email.\")\n        # Then next page request is still working.\n        self.getPage('/')\n        self.assertStatus(200)\n\n    @parameterized.expand(\n        [\n            ('enable_mfa', UserObject.DISABLED_MFA, UserObject.DISABLED_MFA),\n            ('disable_mfa', UserObject.ENABLED_MFA, UserObject.ENABLED_MFA),\n        ]\n    )\n    def test_with_invalid_code(self, action, initial_mfa, expected_mfa):\n        # Define mfa for user\n        self._set_mfa(initial_mfa)\n        # Given a user with email requesting a code\n        self._get_code(action=action)\n        # When sending an invalid code\n        self.getPage(\"/prefs/mfa\", method='POST', body={action: '1', 'code': '1234567'})\n        # Then mfa get enabled or disable accordingly\n        self.assertStatus(200)\n        userobj = UserObject.get_user(self.USERNAME)\n        self.assertEqual(userobj.mfa, expected_mfa)\n        # Then next page request is still working.\n        self.getPage('/')\n        self.assertStatus(200)\n\n    @parameterized.expand(\n        [\n            ('enable_mfa', UserObject.DISABLED_MFA),\n            ('disable_mfa', UserObject.ENABLED_MFA),\n        ]\n    )\n    def test_without_email(self, action, initial_mfa):\n        # Define mfa for user\n        self._set_mfa(initial_mfa)\n        # Given a user without email requesting a code\n        userobj = UserObject.get_user(self.USERNAME)\n        userobj.email = ''\n        userobj.add()\n        # When trying to enable or disable mfa\n        self.getPage(\"/prefs/mfa\", method='POST', body={action: '1'})\n        # Then an error is return to the user\n        self.assertStatus(200)\n        self.assertInBody(\"To continue, you must set up an email address for your account.\")\n\n    @parameterized.expand(\n        [\n            (UserObject.DISABLED_MFA,),\n            (UserObject.ENABLED_MFA,),\n        ]\n    )\n    def test_resend_code(self, initial_mfa):\n        # Define mfa for user\n        self._set_mfa(initial_mfa)\n        # When requesting a new code.\n        self.getPage(\"/prefs/mfa\", method='POST', body={'resend_code': '1'})\n        # Then a new code get sent.\n        self.assertInBody(\"A new verification code has been sent to your email.\")\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport argparse\nimport logging\nimport re\nimport sys\nfrom collections import OrderedDict\n\nimport cherrypy\nimport configargparse\nimport pkg_resources\nfrom cherrypy import Application\n\n# Define the logger\nlogger = logging.getLogger(__name__)\n\n# Get rdiffweb version.\ntry:\n    VERSION = pkg_resources.get_distribution(\"rdiffweb\").version\nexcept pkg_resources.DistributionNotFound:\n    VERSION = \"DEV\"\n\n\ndef get_parser():\n    # Get global config argument parser\n    parser = configargparse.ArgumentParser(\n        prog='rdiffweb',\n        description='Web interface to browse and restore rdiff-backup repositories.',\n        default_config_files=['/etc/rdiffweb/rdw.conf', '/etc/rdiffweb/rdw.conf.d/*.conf'],\n        add_env_var_help=True,\n        auto_env_var_prefix='RDIFFWEB_',\n        config_file_parser_class=ConfigFileParser,\n        conflict_handler='resolve',\n    )\n\n    parser.add_argument(\n        '-f', '--config', is_config_file=True, metavar='FILE', help='location of Rdiffweb configuration file'\n    )\n\n    parser.add(\n        '--database-uri',\n        '--sqlitedb-file',\n        '--sqlitedbfile',\n        metavar='URI',\n        help=\"\"\"Location of the database used for persistence. SQLite and PostgreSQL\n            database are supported officially. To use a SQLite database you may\n            define the location using a file path or a URI.\n            e.g.: /srv/rdiffweb/file.db or sqlite:///srv/rdiffweb/file.db`.\n            To use PostgreSQL server you must provide\n            a URI similar to postgresql://user:pass@10.255.1.34/dbname and you\n            must install required dependencies.\n            By default, Rdiffweb uses a SQLite embedded database located at\n            /etc/rdiffweb/rdw.db.\"\"\",\n        default='/etc/rdiffweb/rdw.db',\n    )\n\n    parser.add_argument(\n        '-d',\n        '--debug',\n        action='store_true',\n        help='enable rdiffweb debug mode - change the log level to DEBUG, print exception stack trace to the web interface and show SQL query in logs',\n    )\n\n    parser.add_argument(\n        '--admin-user',\n        '--adminuser',\n        metavar='USERNAME',\n        help='administrator username. The administrator user get created on startup if the database is empty.',\n        default='admin',\n    )\n\n    parser.add_argument(\n        '--admin-password',\n        metavar='USERNAME',\n        help=\"\"\"administrator encrypted password as SSHA. Read online\n            documentation to know more about how to encrypt your password\n            into SSHA or use http://projects.marsching.org/weave4j/util/genpassword.php\n            When defined, administrator password cannot be updated using the web interface.\n            When undefined, default administrator password is `admin123` and\n            it can be updated using the web interface.\"\"\",\n    )\n\n    parser.add_argument(\n        '--default-theme',\n        '--defaulttheme',\n        help='define the default theme. Either: default, blue or orange. Define the CSS file to be loaded in the web interface. You may manually edit a CSS file to customize it. The location is similar to `/usr/local/lib/python3.9/dist-packages/rdiffweb/static/`',\n        choices=['default', 'blue', 'orange'],\n        default='default',\n    )\n\n    parser.add_argument(\n        '--environment',\n        choices=['development', 'production'],\n        help='define the type of environment: development, production. This is used to limit the information shown to the user when an error occur.',\n        default='production',\n    )\n\n    parser.add_argument(\n        '--email-encryption',\n        '--emailencryption',\n        choices=['none', 'ssl', 'starttls'],\n        help='type of encryption to be used when establishing communication with SMTP server. Default: none',\n        default='none',\n    )\n\n    parser.add_argument(\n        '--email-host',\n        '--emailhost',\n        metavar='HOST',\n        help='SMTP server used to send email in the form <host>:<port>. If the port is not provided, default to standard port 25 or 465 is used. e.g.: smtp.gmail.com:587',\n    )\n\n    parser.add_argument(\n        '--email-sender',\n        '--emailsender',\n        metavar='EMAIL',\n        help='email addres used for the `from:` field when sending email.',\n    )\n\n    parser.add_argument(\n        '--email-notification-time',\n        '--emailnotificationtime',\n        metavar='TIME',\n        help='time when the email notifcation should be sent for inactive backups. e.g.: 22:00 Default value: 23:00',\n        default='23:00',\n    )\n\n    parser.add_argument(\n        '--email-username',\n        '--emailusername',\n        metavar='USERNAME',\n        help='username used for authentication with the SMTP server.',\n    )\n\n    parser.add_argument(\n        '--email-password',\n        '--emailpassword',\n        metavar='PASSWORD',\n        help='password used for authentication with the SMTP server.',\n    )\n\n    parser.add_argument(\n        '--email-send-changed-notification',\n        '--emailsendchangednotification',\n        help='True to send notification when sensitive information get change in user profile.',\n        action='store_true',\n        default=False,\n    )\n\n    parser.add_argument(\n        '--favicon',\n        help='location of an icon to be used as a favicon displayed in web browser.',\n        default=pkg_resources.resource_filename('rdiffweb', 'static/favicon.ico'),\n    )  # @UndefinedVariable\n\n    parser.add_argument(\n        '--footer-name', '--footername', help=argparse.SUPPRESS, default='rdiffweb'\n    )  # @UndefinedVariable\n\n    parser.add_argument(\n        '--footer-url', '--footerurl', help=argparse.SUPPRESS, default='https://rdiffweb.org/'\n    )  # @UndefinedVariable\n\n    parser.add_argument(\n        '--header-logo',\n        '--headerlogo',\n        help='location of an image (preferably a .png) to be used as a replacement for the rdiffweb logo.',\n    )\n\n    parser.add_argument(\n        '--header-name',\n        '--headername',\n        help='application name displayed in the title bar and header menu.',\n        default='Rdiffweb',\n    )\n\n    parser.add_argument(\n        '--ldap-add-missing-user',\n        '--addmissinguser',\n        action='store_true',\n        help='enable creation of users from LDAP when the credential are valid.',\n        default=False,\n    )\n\n    parser.add_argument(\n        '--ldap-add-user-default-role',\n        help='default role used when creating users from LDAP. This parameter is only useful when `--ldap-add-missing-user` is enabled.',\n        default='user',\n        choices=['admin', 'maintainer', 'user'],\n    )\n\n    parser.add_argument(\n        '--ldap-add-user-default-userroot',\n        help='default user root directory used when creating users from LDAP. LDAP attributes may be used to define the default location. e.g.: `/backups/{uid[0]}/`. This parameter is only useful when `--ldap-add-missing-user` is enabled.',\n        default='',\n    )\n\n    parser.add_argument(\n        '--ldap-uri',\n        '--ldapuri',\n        help='URL to the LDAP server used to validate user credentials. e.g.: ldap://localhost:389',\n    )\n\n    parser.add_argument(\n        '--ldap-base-dn',\n        '--ldapbasedn',\n        metavar='DN',\n        help='DN of the branch of the directory where all searches should start from. e.g.: dc=my,dc=domain',\n        default=\"\",\n    )\n\n    parser.add_argument(\n        '--ldap-scope',\n        '--ldapscope',\n        help='scope of the search. Can be either base, onelevel or subtree',\n        choices=['base', 'onelevel', 'subtree'],\n        default=\"subtree\",\n    )\n\n    parser.add_argument('--ldap-tls', '--ldaptls', action='store_true', help='enable TLS')\n\n    parser.add_argument(\n        '--ldap-username-attribute',\n        '--ldapattribute',\n        metavar='ATTRIBUTE',\n        help=\"The attribute to search username. If no attributes are provided, the default is to use `uid`. It's a good idea to choose an attribute that will be unique across all entries in the subtree you will be using.\",\n        default='uid',\n    )\n\n    parser.add_argument(\n        '--ldap-filter',\n        '--ldapfilter',\n        help=\"search filter to limit LDAP lookup. If not provided, defaults to (objectClass=*), which searches for all objects in the tree.\",\n        default='(objectClass=*)',\n    )\n\n    parser.add_argument(\n        '--ldap-required-group',\n        '--ldaprequiredgroup',\n        metavar='GROUPNAME',\n        help=\"name of the group of which the user must be a member to access rdiffweb. Should be used with ldap-group-attribute and ldap-group-attribute-is-dn.\",\n    )\n\n    parser.add_argument(\n        '--ldap-group-attribute',\n        '--ldapgroupattribute',\n        metavar='ATTRIBUTE',\n        help=\"name of the attribute defining the groups of which the user is a member. Should be used with ldap-required-group and ldap-group-attribute-is-dn.\",\n        default='member',\n    )\n\n    parser.add_argument(\n        '--ldap-group-attribute-is-dn',\n        '--ldapgroupattributeisdn',\n        help=\"True if the content of the attribute `ldap-group-attribute` is a DN.\",\n        action='store_true',\n    )\n\n    parser.add_argument(\n        '--ldap-bind-dn',\n        '--ldapbinddn',\n        metavar='DN',\n        help=\"optional DN used to bind to the server when searching for entries. If not provided, will use an anonymous bind.\",\n        default=\"\",\n    )\n\n    parser.add_argument(\n        '--ldap-bind-password',\n        '--ldapbindpassword',\n        metavar='PASSWORD',\n        help=\"password to use in conjunction with LdapBindDn. Note that the bind password is probably sensitive data, and should be properly protected. You should only use the LdapBindDn and LdapBindPassword if you absolutely need them to search the directory.\",\n        default=\"\",\n    )\n\n    parser.add_argument(\n        '--ldap-version',\n        '--ldapversion',\n        '--ldapprotocolversion',\n        help=\"version of LDAP in use either 2 or 3. Default to 3.\",\n        default=3,\n        type=int,\n        choices=[2, 3],\n    )\n\n    parser.add_argument(\n        '--ldap-network-timeout',\n        '--ldapnetworktimeout',\n        metavar='SECONDS',\n        help=\"timeout in seconds value used for LDAP connection\",\n        default=100,\n        type=int,\n    )\n\n    parser.add_argument(\n        '--ldap-timeout',\n        '--ldaptimeout',\n        metavar='SECONDS',\n        help=\"timeout in seconds value used for LDAP request\",\n        default=300,\n        type=int,\n    )\n\n    parser.add_argument(\n        '--ldap-encoding',\n        '--ldapencoding',\n        metavar='ENCODING',\n        help=\"encoding used by your LDAP server.\",\n        default=\"utf-8\",\n    )\n\n    parser.add_argument(\n        '--log-access-file', '--logaccessfile', metavar='FILE', help='location of Rdiffweb log access file.'\n    )\n\n    parser.add_argument(\n        '--log-file',\n        '--logfile',\n        metavar='FILE',\n        help='location of Rdiffweb log file. Print log to the console if not define in config file.',\n    )\n\n    parser.add_argument(\n        '--log-level',\n        '--loglevel',\n        help='Define the log level.',\n        choices=['ERROR', 'WARN', 'INFO', 'DEBUG'],\n        default='INFO',\n    )\n\n    parser.add_argument(\n        '--max-depth',\n        '--maxdepth',\n        metavar='DEPTH',\n        help=\"define the maximum folder depthness to search into the user's root directory to find repositories. This is commonly used if you repositories are organised with multiple sub-folder.\",\n        type=int,\n        default=3,\n    )\n\n    parser.add('--quota-set-cmd', '--quotasetcmd', metavar='COMMAND', help=\"command line to set the user's quota.\")\n\n    parser.add('--quota-get-cmd', '--quotagetcmd', metavar='COMMAND', help=\"command line to get the user's quota.\")\n\n    parser.add(\n        '--quota-used-cmd', '--quotausedcmd', metavar='COMMAND', help=\"Command line to get user's quota disk usage.\"\n    )\n\n    parser.add(\n        '--remove-older-time',\n        '--removeoldertime',\n        metavar='TIME',\n        help=\"Time when to execute the remove older scheduled job. e.g.: 22:30\",\n        default='23:00',\n    )\n\n    parser.add('--server-host', '--serverhost', metavar='IP', default='127.0.0.1', help='IP address to listen to')\n\n    parser.add(\n        '--server-port',\n        '--serverport',\n        metavar='PORT',\n        help='port to listen to for HTTP request',\n        default='8080',\n        type=int,\n    )\n\n    parser.add(\n        '--rate-limit-dir',\n        '--session-dir',\n        '--sessiondir',\n        metavar='FOLDER',\n        help='location where to store rate-limit information. When undefined, the data is kept in memory. `--session-dir` are deprecated and kept for backward compatibility.',\n    )\n\n    parser.add(\n        '--rate-limit',\n        metavar='LIMIT',\n        type=int,\n        default=20,\n        help='maximum number of requests per hour that can be made on sensitive endpoints. When this limit is reached, an HTTP 429 message is returned to the user or the user is logged out. This security measure is used to limit brute force attacks on the login page and the RESTful API.',\n    )\n\n    parser.add(\n        '--session-idle-timeout',\n        metavar='MINUTES',\n        help='This timeout defines the amount of time a session will remain active in case there is no activity in the session. User Session will be revoke after this period of inactivity, unless the user selected \"remember me\". Default 5 minutes.',\n        default=5,\n    )\n\n    parser.add(\n        '--session-absolute-timeout',\n        metavar='MINUTES',\n        help='This timeout defines the maximum amount of time a session can be active. After this period, user is forced to (re)authenticate, unless the user selected \"remember me\". Default 20 minutes.',\n        default=20,\n    )\n\n    parser.add(\n        '--session-persistent-timeout',\n        metavar='MINUTES',\n        help='This timeout defines the maximum amount of time to remember and trust a user device. This timeout is used when user select \"remember me\". Default 30 days.',\n        default=43200,\n    )\n\n    parser.add(\n        '--ssl-certificate',\n        '--sslcertificate',\n        metavar='CERT',\n        help='location of the SSL Certification to enable HTTPS (not recommended)',\n    )\n\n    parser.add(\n        '--ssl-private-key',\n        '--sslprivatekey',\n        metavar='KEY',\n        help='location of the SSL Private Key to enable HTTPS (not recommended)',\n    )\n\n    parser.add(\n        '--tempdir',\n        metavar='FOLDER',\n        help='alternate temporary folder to be used when restoring files. Might be useful if the default location has limited disk space. Default to TEMPDIR environment or `/tmp`.',\n    )\n\n    parser.add(\n        '--disable-ssh-keys',\n        action='store_true',\n        help='used to hide SSH Key management to avoid users to add or remove SSH Key using the web application',\n        default=False,\n    )\n\n    parser.add(\n        '--password-min-length',\n        type=int,\n        help=\"Minimum length of the user's password\",\n        default=8,\n    )\n\n    parser.add(\n        '--password-max-length',\n        type=int,\n        help=\"Maximum length of the user's password\",\n        default=128,\n    )\n\n    parser.add(\n        '--password-score',\n        type=lambda x: max(1, min(int(x), 4)),\n        help=\"Minimum zxcvbn's score for password. Value from 1 to 4. Default value 2. Read more about it here: https://github.com/dropbox/zxcvbn\",\n        default=2,\n    )\n\n    parser.add_argument('--version', action='version', version='%(prog)s ' + VERSION)\n\n    # Here we append a list of arguments for each locale.\n    flags = ['--welcome-msg'] + ['--welcome-msg-' + i for i in ['ca', 'en', 'es', 'fr', 'ru']] + ['--welcomemsg']\n    parser.add_argument(\n        *flags,\n        metavar='HTML',\n        help='replace the welcome message displayed in the login page for default locale or for a specific locale',\n        action=LocaleAction\n    )\n    return parser\n\n\ndef parse_args(args=None, config_file_contents=None):\n    args = sys.argv[1:] if args is None else args\n    return get_parser().parse_args(args, config_file_contents=config_file_contents)\n\n\nclass LocaleAction(argparse.Action):\n    \"\"\"\n    Custom Action to support defining arguments with locale.\n    \"\"\"\n\n    def __init__(self, option_strings, dest, nargs=None, **kwargs):\n        super(LocaleAction, self).__init__(option_strings, dest, **kwargs)\n\n    def __call__(self, parser, namespace, value, option_string=None):\n        if option_string[-3] == '-':\n            # When using arguments, we can extract the locale from the argument key\n            locale = option_string[-2:]\n        elif value[2] == ':':\n            # When using config file, the locale could be extract from the value e.g. fr:message\n            locale = value[0:2]\n            value = value[3:]\n        else:\n            locale = ''\n        # Create a dictionary with locale.\n        items = getattr(namespace, self.dest) or {}\n        items[locale] = value\n        setattr(namespace, self.dest, items)\n\n\nclass ConfigFileParser(object):\n    \"\"\"\n    Custom config file parser to support rdiffweb config file format.\n    \"\"\"\n\n    def get_syntax_description(self):\n        msg = \"Configuration file syntax allows: key=value, flag=true.\"\n        return msg\n\n    def parse(self, stream):\n        \"\"\"\n        Used to read the rdiffweb config file as dict.\n        \"\"\"\n\n        result = OrderedDict()\n\n        for i, line in enumerate(stream):\n            line = re.compile(\"(.*?)#.*\").sub(r'\\1', line).strip()\n            if not line:\n                continue\n            if '=' not in line:\n                raise configargparse.ConfigFileParserException(\n                    \"Unexpected line {} in {}: {}\".format(i, getattr(stream, 'name', 'stream'), line)\n                )\n            split_line = line.partition('=')\n            if not len(split_line) == 3:\n                raise configargparse.ConfigFileParserException(\n                    \"Unexpected line {} in {}: {}\".format(i, getattr(stream, 'name', 'stream'), line)\n                )\n\n            # Get key a& value\n            key = split_line[0].lower().strip().replace('_', '-')\n            value = split_line[2].strip()\n\n            # Support welcome-msg locale for backward compatibility\n            m = re.match(\"welcome-?msg\\\\[(ca|en|es|fr|ru)\\\\]\", key.lower())\n            if m:\n                key = \"welcome-msg-\" + m.group(1)\n                value = m.group(1) + \":\" + value\n\n            result[key] = value\n\n        # This dictionary is read by cherrypy. So create appropriate structure.\n        return result\n\n\nclass Option(object):\n    def __init__(self, key):\n        assert key\n        self.key = key\n\n    def __get__(self, instance, owner):\n        \"\"\"\n        Return a property to wrap the given option.\n        \"\"\"\n        return self.get(instance)\n\n    def get(self, instance=None):\n        \"\"\"\n        Return the value of this options.\n        \"\"\"\n        if isinstance(instance, Application):\n            app = instance\n        else:\n            app = cherrypy.request.app or getattr(instance, 'app', None)\n        assert app, \"Option() can't get reference to app\"\n        assert app.cfg, \"Option() can't get reference to app.cfg\"\n        return getattr(app.cfg, self.key)\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport datetime\nimport logging\nimport os\nimport secrets\nimport string\n\nimport cherrypy\nfrom sqlalchemy import Column, Integer, SmallInteger, String, and_, event, inspect, or_\nfrom sqlalchemy.exc import IntegrityError\nfrom sqlalchemy.ext.hybrid import hybrid_property\nfrom sqlalchemy.orm import deferred, relationship\nfrom zxcvbn import zxcvbn\n\nimport rdiffweb.tools.db  # noqa\nfrom rdiffweb.core import authorizedkeys\nfrom rdiffweb.core.passwd import check_password, hash_password\nfrom rdiffweb.tools.i18n import ugettext as _\n\nfrom ._repo import RepoObject\nfrom ._sshkey import SshKey\nfrom ._token import Token\n\nlogger = logging.getLogger(__name__)\n\nBase = cherrypy.tools.db.get_base()\n\nSEP = b'/'\n\n\nclass DuplicateSSHKeyError(Exception):\n    \"\"\"\n    Raised by add_authorizedkey when trying to add the same SSH Key twice.\n    \"\"\"\n\n    pass\n\n\nclass UserObject(Base):\n    __tablename__ = 'users'\n    __table_args__ = {'sqlite_autoincrement': True}\n\n    # Value for role.\n    ADMIN_ROLE = 0\n    MAINTAINER_ROLE = 5\n    USER_ROLE = 10\n    ROLES = {\n        'admin': ADMIN_ROLE,\n        'maintainer': MAINTAINER_ROLE,\n        'user': USER_ROLE,\n    }\n    # Value for mfa field\n    DISABLED_MFA = 0\n    ENABLED_MFA = 1\n\n    # Regex pattern to be used for validation.\n    PATTERN_EMAIL = r\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\"\n    PATTERN_FULLNAME = r\"\"\"[^!\"#$%&()*+,./:;<=>?@[\\]_{|}~]+$\"\"\"\n    PATTERN_USERNAME = r\"[a-zA-Z0-9_.\\-]+$\"\n\n    userid = Column('UserID', Integer, primary_key=True)\n    _username = Column('Username', String, nullable=False, unique=True)\n    hash_password = Column('Password', String, nullable=False, default=\"\")\n    _user_root = Column('UserRoot', String, nullable=False, default=\"\")\n    _is_admin = deferred(\n        Column(\n            'IsAdmin',\n            SmallInteger,\n            nullable=False,\n            server_default=\"0\",\n            doc=\"DEPRECATED This column is replaced by 'role'\",\n        )\n    )\n    _email = Column('UserEmail', String, nullable=False, default=\"\")\n    restore_format = deferred(\n        Column(\n            'RestoreFormat',\n            SmallInteger,\n            nullable=False,\n            server_default=\"1\",\n            doc=\"DEPRECATED This column is not used anymore\",\n        )\n    )\n    _role = Column('role', SmallInteger, nullable=False, server_default=str(USER_ROLE))\n    fullname = Column('fullname', String, nullable=False, default=\"\")\n    mfa = Column('mfa', SmallInteger, nullable=False, default=DISABLED_MFA)\n    repo_objs = relationship(\n        'RepoObject',\n        foreign_keys='UserObject.userid',\n        primaryjoin='UserObject.userid == RepoObject.userid',\n        uselist=True,\n        lazy=True,\n        order_by=lambda: RepoObject.repopath,\n    )\n\n    @classmethod\n    def get_user(cls, user):\n        \"\"\"Return a user object.\"\"\"\n        return UserObject.query.filter(UserObject.username == user).first()\n\n    @classmethod\n    def create_admin_user(cls, default_username, default_password):\n        # Check if admin user exists. If not, created it.\n        userobj = UserObject.get_user(default_username)\n        if not userobj:\n            userobj = cls.add_user(default_username, role=UserObject.ADMIN_ROLE, user_root='/backups')\n        # Also make sure to update the password with latest value from config file.\n        if default_password and default_password.startswith('{SSHA}'):\n            userobj.hash_password = default_password\n        elif default_password:\n            userobj.hash_password = hash_password(default_password)\n        else:\n            userobj.hash_password = hash_password('admin123')\n        userobj.add()\n\n    @classmethod\n    def add_user(cls, username, password=None, **attrs):\n        \"\"\"\n        Used to add a new user with an optional password.\n        \"\"\"\n        assert password is None or isinstance(password, str)\n        # Check if user already exists.\n        if UserObject.get_user(username):\n            raise ValueError(_(\"User %s already exists.\" % (username,)))\n\n        # Find a database where to add the user\n        logger.info(\"adding new user [%s]\", username)\n        userobj = UserObject(\n            username=username,\n            hash_password=hash_password(password) if password else '',\n            **attrs,\n        ).add()\n        # Raise event\n        cherrypy.engine.publish('user_added', userobj)\n        # Return user object\n        return userobj\n\n    def add_authorizedkey(self, key, comment=None):\n        \"\"\"\n        Add the given key to the user. Adding the key to his `authorized_keys`\n        file if it exists and adding it to database.\n        \"\"\"\n        # Parse and validate ssh key\n        assert key\n        key = authorizedkeys.check_publickey(key)\n\n        # Remove option, replace comments.\n        key = authorizedkeys.AuthorizedKey(\n            options=None, keytype=key.keytype, key=key.key, comment=comment or key.comment\n        )\n\n        # If a filename exists, use it by default.\n        filename = os.path.join(self.user_root, '.ssh', 'authorized_keys')\n        if os.path.isfile(filename):\n            with open(filename, mode=\"r+\", encoding='utf-8') as fh:\n                if authorizedkeys.exists(fh, key):\n                    raise DuplicateSSHKeyError(_(\"SSH key already exists\"))\n                logger.info(\"add key [%s] to [%s] authorized_keys\", key, self.username)\n                authorizedkeys.add(fh, key)\n        else:\n            # Also look in database.\n            logger.info(\"add key [%s] to [%s] database\", key, self.username)\n            try:\n                SshKey(userid=self.userid, fingerprint=key.fingerprint, key=key.getvalue()).add()\n            except IntegrityError:\n                SshKey.session.rollback()\n                raise DuplicateSSHKeyError(\n                    _(\"Duplicate key. This key already exists or is associated to another user.\")\n                )\n        cherrypy.engine.publish('user_attr_changed', self, {'authorizedkeys': True})\n\n    def add_access_token(self, name, expiration_time=None, length=16):\n        \"\"\"\n        Create a new access token. Return the un-encrypted value of the token.\n        \"\"\"\n        assert name\n        assert length >= 8\n        # Generate a random token\n        token = ''.join(secrets.choice(string.ascii_lowercase) for i in range(length))\n        # Store hash token\n        try:\n            obj = Token(userid=self.userid, name=name, hash_token=hash_password(token), expiration_time=expiration_time)\n            obj.add()\n        except IntegrityError:\n            Token.session.rollback()\n            raise ValueError(_(\"Duplicate token name: %s\") % name)\n        cherrypy.engine.publish('access_token_added', self, name)\n        return token\n\n    def valid_user_root(self):\n        \"\"\"\n        Check if the current user_root is valid and readable\n        \"\"\"\n        try:\n            return os.access(self.user_root, os.F_OK) and os.path.isdir(self.user_root)\n        except Exception:\n            return False\n\n    def delete(self, *args, **kwargs):\n        cfg = cherrypy.tree.apps[''].cfg\n        if self.username == cfg.admin_user:\n            raise ValueError(_(\"can't delete admin user\"))\n        # FIXME This should be deleted by cascade\n        SshKey.query.filter(SshKey.userid == self.userid).delete()\n        RepoObject.query.filter(RepoObject.userid == self.userid).delete()\n        Token.query.filter(Token.userid == self.userid).delete()\n        # Delete ourself\n        Base.delete(self)\n\n    def delete_authorizedkey(self, fingerprint):\n        \"\"\"\n        Remove the given key from the user. Remove the key from his\n        `authorized_keys` file if it exists and from database database.\n        \"\"\"\n        # If a filename exists, use it by default.\n        filename = os.path.join(self.user_root, '.ssh', 'authorized_keys')\n        if os.path.isfile(filename):\n            with open(filename, mode='r+', encoding='utf-8') as fh:\n                logger.info(\"removing key [%s] from [%s] authorized_keys\", fingerprint, self.username)\n                authorizedkeys.remove(fh, fingerprint)\n        else:\n            # Also look in database.\n            logger.info(\"removing key [%s] from [%s] database\", fingerprint, self.username)\n            SshKey.query.filter(and_(SshKey.userid == self.userid, SshKey.fingerprint == fingerprint)).delete()\n        cherrypy.engine.publish('user_attr_changed', self, {'authorizedkeys': True})\n\n    def delete_access_token(self, name):\n        assert name\n        if not Token.query.filter(Token.userid == self.userid, Token.name == name).delete():\n            raise ValueError(_(\"token name doesn't exists: %s\") % name)\n\n    @property\n    def disk_usage(self):\n        # Skip if user_root is invalid.\n        if not self.user_root or not os.path.exists(self.user_root):\n            return 0\n        values = cherrypy.engine.publish('get_disk_usage', self)\n        # Return the first not None value\n        return next((v for v in values if v is not None), 0)\n\n    @property\n    def disk_quota(self):\n        # Skip if user_root is invalid.\n        if not self.user_root or not os.path.exists(self.user_root):\n            return 0\n        values = cherrypy.engine.publish('get_disk_quota', self)\n        # Return the first not None value\n        return next((v for v in values if v is not None), 0)\n\n    @disk_quota.setter\n    def disk_quota(self, value):\n        # Skip if user_root is invalid.\n        if not self.user_root or not os.path.exists(self.user_root):\n            return\n        cherrypy.engine.publish('set_disk_quota', self, value)\n\n    @property\n    def authorizedkeys(self):\n        \"\"\"\n        Return an iterator on the authorized key. Either from his\n        `authorized_keys` file if it exists or from database.\n        \"\"\"\n        # If a filename exists, use it by default.\n        filename = os.path.join(self.user_root, '.ssh', 'authorized_keys')\n        if os.path.isfile(filename):\n            for k in authorizedkeys.read(filename):\n                yield k\n\n        # Also look in database.\n        for record in SshKey.query.filter(SshKey.userid == self.userid).all():\n            yield authorizedkeys.check_publickey(record.key)\n\n    def refresh_repos(self, delete=False):\n        \"\"\"\n        Return list of repositories object to reflect the filesystem folders.\n\n        Return a RepoObject for each sub directories under `user_root` with `rdiff-backup-data`.\n        \"\"\"\n        # Update the repositories by walking in the directory tree.\n        def _onerror(unused):\n            logger.error('error updating user [%s] repos' % self.username, exc_info=1)\n\n        # Get application config\n        cfg = cherrypy.tree.apps[''].cfg\n\n        dirty = False\n        records = RepoObject.query.filter(RepoObject.userid == self.userid).order_by(RepoObject.repopath).all()\n        user_root = os.fsencode(self.user_root)\n        for root, dirs, unused_files in os.walk(user_root, _onerror):\n            for name in dirs.copy():\n                if name.startswith(b'.'):\n                    dirs.remove(name)\n            if b'rdiff-backup-data' in dirs:\n                repopath = os.path.relpath(root, start=user_root)\n                del dirs[:]\n                # Handle special scenario when the repo is the\n                # user_root\n                repopath = b'' if repopath == b'.' else repopath\n\n                # Check if repo path exists.\n                record_match = next((record for record in records if record.repopath == os.fsdecode(repopath)), None)\n                if not record_match:\n                    # Add repository to database.\n                    RepoObject(user=self, repopath=os.fsdecode(repopath)).add()\n                    dirty = True\n                else:\n                    records.remove(record_match)\n            if root.count(SEP) - user_root.count(SEP) >= cfg.max_depth:\n                del dirs[:]\n        # If enabled, remove entried from database\n        if delete:\n            for record in records:\n                RepoObject.query.filter(RepoObject.repoid == record.repoid).delete()\n        return dirty\n\n    @hybrid_property\n    def is_admin(self):\n        return self.role <= self.ADMIN_ROLE\n\n    @hybrid_property\n    def is_ldap(self):\n        return self.hash_password is None or self.hash_password == ''\n\n    @is_ldap.expression\n    def is_ldap(cls):\n        return or_(cls.hash_password.is_(None), cls.hash_password == '')\n\n    @hybrid_property\n    def is_maintainer(self):\n        return self.role <= self.MAINTAINER_ROLE\n\n    def set_password(self, password):\n        \"\"\"\n        Change the user's password. Raise a ValueError if the username or\n        the password are invalid.\n        \"\"\"\n        assert isinstance(password, str)\n        if not password:\n            raise ValueError(\"password can't be empty\")\n        cfg = cherrypy.tree.apps[''].cfg\n\n        # Cannot update admin-password if defined\n        if self.username == cfg.admin_user and cfg.admin_password:\n            raise ValueError(_(\"can't update admin-password defined in configuration file\"))\n\n        # Check password length\n        if cfg.password_min_length > len(password) or len(password) > cfg.password_max_length:\n            raise ValueError(\n                _('Password must have between %(min)d and %(max)d characters.')\n                % {'min': cfg.password_min_length, 'max': cfg.password_max_length}\n            )\n\n        # Verify password score using zxcvbn\n        stats = zxcvbn(password)\n        if stats.get('score') < cfg.password_score:\n            msg = _('Password too weak.')\n            warning = stats.get('feedback', {}).get('warning')\n            suggestions = stats.get('feedback', {}).get('suggestions')\n            if warning:\n                msg += ' ' + warning\n            if suggestions:\n                msg += ' ' + ' '.join(suggestions)\n            raise ValueError(msg)\n\n        logger.info(\"updating user password [%s]\", self.username)\n        self.hash_password = hash_password(password)\n\n    def __eq__(self, other):\n        return type(self) == type(other) and inspect(self).key == inspect(other).key\n\n    @hybrid_property\n    def username(self):\n        return self._username\n\n    @username.setter\n    def username(self, value):\n        oldvalue = self._username\n        self._username = value\n        if oldvalue != value:\n            cherrypy.engine.publish('user_attr_changed', self, {'username': (oldvalue, value)})\n\n    @hybrid_property\n    def role(self):\n        if self._role is None:\n            return self.USER_ROLE\n        return self._role\n\n    @role.setter\n    def role(self, value):\n        oldvalue = self._role\n        self._role = value\n        if oldvalue != value:\n            cherrypy.engine.publish('user_attr_changed', self, {'role': (oldvalue, value)})\n\n    @hybrid_property\n    def email(self):\n        return self._email\n\n    @email.setter\n    def email(self, value):\n        oldvalue = self._email\n        self._email = value\n        if oldvalue != value:\n            cherrypy.engine.publish('user_attr_changed', self, {'email': (oldvalue, value)})\n\n    @hybrid_property\n    def user_root(self):\n        return self._user_root\n\n    @user_root.setter\n    def user_root(self, value):\n        oldvalue = self._user_root\n        self._user_root = value\n        if oldvalue != value:\n            cherrypy.engine.publish('user_attr_changed', self, {'user_root': (oldvalue, value)})\n\n    def validate_access_token(self, token):\n        \"\"\"\n        Check if the given token matches.\n        \"\"\"\n        for access_token in Token.query.all():\n            # If token expired. Let delete it.\n            if access_token.is_expired:\n                access_token.delete()\n                continue\n            if check_password(token, access_token.hash_token):\n                # When it matches, let update the record.\n                access_token.access_time = datetime.datetime.utcnow\n                return True\n        return False\n\n    def validate_password(self, password):\n        return check_password(password, self.hash_password)\n\n\n@event.listens_for(UserObject.hash_password, \"set\")\ndef hash_password_set(target, value, oldvalue, initiator):\n    if value and value != oldvalue:\n        cherrypy.engine.publish('user_password_changed', target)\n\n\n@event.listens_for(UserObject, 'after_delete')\ndef user_after_delete(mapper, connection, target):\n    \"\"\"\n    Publish event when user is deleted.\n    \"\"\"\n    cherrypy.engine.publish('user_deleted', target.username)\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"\nCreated on June 30, 2022\n\nModule to test `user` model.\n\n@author: Patrik Dufresne <patrik@ikus-soft.com>\n\"\"\"\nimport datetime\nimport os\nfrom io import StringIO, open\nfrom unittest.mock import MagicMock\n\nimport cherrypy\nimport pkg_resources\n\nimport rdiffweb.test\nfrom rdiffweb.core import authorizedkeys\nfrom rdiffweb.core.model import DuplicateSSHKeyError, RepoObject, Token, UserObject\nfrom rdiffweb.core.passwd import check_password\n\n\nclass UserObjectTest(rdiffweb.test.WebCase):\n\n    default_config = {\n        'email-send-changed-notification': True,\n    }\n\n    def _read_ssh_key(self):\n        \"\"\"Readthe pub key from test packages\"\"\"\n        filename = pkg_resources.resource_filename('rdiffweb.core.tests', 'test_publickey_ssh_rsa.pub')\n        with open(filename, 'r', encoding='utf8') as f:\n            return f.readline()\n\n    def _read_authorized_keys(self):\n        \"\"\"Read the content of test_authorized_keys\"\"\"\n        filename = pkg_resources.resource_filename('rdiffweb.core.tests', 'test_authorized_keys')\n        with open(filename, 'r', encoding='utf8') as f:\n            return f.read()\n\n    def setUp(self):\n        super().setUp()\n        self.listener = MagicMock()\n        cherrypy.engine.subscribe('access_token_added', self.listener.access_token_added, priority=50)\n        cherrypy.engine.subscribe('queue_mail', self.listener.queue_mail, priority=50)\n        cherrypy.engine.subscribe('user_added', self.listener.user_added, priority=50)\n        cherrypy.engine.subscribe('user_attr_changed', self.listener.user_attr_changed, priority=50)\n        cherrypy.engine.subscribe('user_deleted', self.listener.user_deleted, priority=50)\n        cherrypy.engine.subscribe('user_login', self.listener.user_login, priority=50)\n        cherrypy.engine.subscribe('user_password_changed', self.listener.user_password_changed, priority=50)\n\n    def tearDown(self):\n        cherrypy.engine.unsubscribe('access_token_added', self.listener.access_token_added)\n        cherrypy.engine.unsubscribe('queue_mail', self.listener.queue_mail)\n        cherrypy.engine.unsubscribe('user_added', self.listener.user_added)\n        cherrypy.engine.unsubscribe('user_attr_changed', self.listener.user_attr_changed)\n        cherrypy.engine.unsubscribe('user_deleted', self.listener.user_deleted)\n        cherrypy.engine.unsubscribe('user_login', self.listener.user_login)\n        cherrypy.engine.unsubscribe('user_password_changed', self.listener.user_password_changed)\n        return super().tearDown()\n\n    def test_add_user(self):\n        \"\"\"Add user to database.\"\"\"\n        userobj = UserObject.add_user('joe')\n        self.assertIsNotNone(userobj)\n        self.assertIsNotNone(UserObject.get_user('joe'))\n        # Check if listener called\n        self.listener.user_added.assert_called_once_with(userobj)\n\n    def test_add_user_updated_by_listener(self):\n        \"\"\"Add user to database.\"\"\"\n        # Given a listener with side effet\n        def change_user_obj(userobj):\n            userobj.user_root = '/new/value'\n\n        self.listener.user_added.side_effect = change_user_obj\n        # When adding user\n        userobj = UserObject.add_user('joe')\n        self.assertIsNotNone(userobj)\n        self.assertIsNotNone(UserObject.get_user('joe'))\n        # Then lister get called\n        self.listener.user_added.assert_called_once_with(userobj)\n        # Then object was updated by listener\n        self.assertEqual('/new/value', userobj.user_root)\n\n    def test_add_user_with_duplicate(self):\n        \"\"\"Add user to database.\"\"\"\n        UserObject.add_user('denise')\n        self.listener.user_added.reset_mock()\n        with self.assertRaises(ValueError):\n            UserObject.add_user('denise')\n        # Check if listener called\n        self.listener.user_added.assert_not_called()\n\n    def test_add_user_with_password(self):\n        \"\"\"Add user to database with password.\"\"\"\n        userobj = UserObject.add_user('jo', 'password')\n        self.assertIsNotNone(UserObject.get_user('jo'))\n        # Check if listener called\n        self.listener.user_added.assert_called_once_with(userobj)\n\n    def test_delete_admin_user(self):\n        # Trying to delete admin user should raise an error.\n        userobj = UserObject.get_user('admin')\n        with self.assertRaises(ValueError):\n            userobj.delete()\n\n    def test_users(self):\n        # Check admin exists\n        self.assertEqual(1, UserObject.query.count())\n        # Create user.\n        UserObject.add_user('annik')\n        users = UserObject.query.all()\n        self.assertEqual(2, len(users))\n        self.assertEqual('annik', users[1].username)\n        # Then 2 user exists\n        self.assertEqual(2, UserObject.query.count())\n\n    def test_get_user(self):\n        # Create new user\n        user = UserObject.add_user('bernie', 'my-password')\n        user.user_root = self.testcases\n        user.role = UserObject.ADMIN_ROLE\n        user.email = 'bernie@gmail.com'\n        user.refresh_repos()\n        self.assertEqual(['broker-repo', 'testcases'], sorted([r.name for r in user.repo_objs]))\n        user.repo_objs[0].maxage = -1\n        user.repo_objs[1].maxage = 3\n\n        # Get user record.\n        obj = UserObject.get_user('bernie')\n        self.assertIsNotNone(obj)\n        self.assertEqual('bernie', obj.username)\n        self.assertEqual('bernie@gmail.com', obj.email)\n        self.assertEqual(['broker-repo', 'testcases'], sorted([r.name for r in obj.repo_objs]))\n        self.assertEqual(self.testcases, obj.user_root)\n        self.assertEqual(True, obj.is_admin)\n        self.assertEqual(UserObject.ADMIN_ROLE, obj.role)\n\n        # Get repo object\n        self.assertEqual('broker-repo', obj.repo_objs[0].name)\n        self.assertEqual(-1, obj.repo_objs[0].maxage)\n        self.assertEqual('testcases', obj.repo_objs[1].name)\n        self.assertEqual(3, obj.repo_objs[1].maxage)\n\n    def test_get_user_with_invalid_user(self):\n        self.assertIsNone(UserObject.get_user('invalid'))\n\n    def test_get_set(self):\n        user = UserObject.add_user('larry', 'password')\n\n        self.assertEqual('', user.email)\n        self.assertEqual([], user.repo_objs)\n        self.assertEqual('', user.user_root)\n        self.assertEqual(False, user.is_admin)\n        self.assertEqual(UserObject.USER_ROLE, user.role)\n\n        user.user_root = self.testcases\n        user.refresh_repos()\n        self.listener.user_attr_changed.assert_called_with(user, {'user_root': ('', self.testcases)})\n        self.listener.user_attr_changed.reset_mock()\n        user.role = UserObject.ADMIN_ROLE\n        self.listener.user_attr_changed.assert_called_with(\n            user, {'role': (UserObject.USER_ROLE, UserObject.ADMIN_ROLE)}\n        )\n        self.listener.user_attr_changed.reset_mock()\n        user.email = 'larry@gmail.com'\n        self.listener.user_attr_changed.assert_called_with(user, {'email': ('', 'larry@gmail.com')})\n        self.listener.user_attr_changed.reset_mock()\n\n        self.assertEqual('larry@gmail.com', user.email)\n        self.assertEqual(['broker-repo', 'testcases'], sorted([r.name for r in user.repo_objs]))\n        self.assertEqual(self.testcases, user.user_root)\n        self.assertEqual(True, user.is_admin)\n        self.assertEqual(UserObject.ADMIN_ROLE, user.role)\n\n    def test_set_password_update(self):\n        # Given a user in database with a password\n        userobj = UserObject.add_user('annik', 'password')\n        self.listener.user_password_changed.reset_mock()\n        # When updating the user's password\n        userobj.set_password('new_password')\n        # Then password is SSHA\n        self.assertTrue(check_password('new_password', userobj.hash_password))\n        # Check if listener called\n        self.listener.user_password_changed.assert_called_once_with(userobj)\n\n    def test_delete_user(self):\n        # Given an existing user in database\n        userobj = UserObject.add_user('vicky')\n        self.assertIsNotNone(UserObject.get_user('vicky'))\n        # When deleting that user\n        userobj.delete()\n        # Then user it no longer in database\n        self.assertIsNone(UserObject.get_user('vicky'))\n        # Then listner was called\n        self.listener.user_deleted.assert_called_once_with('vicky')\n\n    def test_set_password_empty(self):\n        \"\"\"Expect error when trying to update password of invalid user.\"\"\"\n        userobj = UserObject.add_user('john')\n        with self.assertRaises(ValueError):\n            self.assertFalse(userobj.set_password(''))\n\n    def test_disk_quota(self):\n        \"\"\"\n        Just make a call to the function.\n        \"\"\"\n        userobj = UserObject.get_user(self.USERNAME)\n        userobj.disk_quota\n\n    def test_disk_usage(self):\n        \"\"\"\n        Just make a call to the function.\n        \"\"\"\n        userobj = UserObject.get_user(self.USERNAME)\n        disk_usage = userobj.disk_usage\n        self.assertIsInstance(disk_usage, int)\n\n    def test_add_authorizedkey_without_file(self):\n        \"\"\"\n        Add an ssh key for a user without an authorizedkey file.\n        \"\"\"\n        # Read the pub key\n        key = self._read_ssh_key()\n        # Add the key to the user\n        userobj = UserObject.get_user(self.USERNAME)\n        userobj.add_authorizedkey(key)\n\n        # validate\n        keys = list(userobj.authorizedkeys)\n        self.assertEqual(1, len(keys), \"expecting one key\")\n        self.assertEqual(\"3c:99:ed:a7:82:a8:71:09:2c:15:3d:78:4a:8c:11:99\", keys[0].fingerprint)\n\n    def test_add_authorizedkey_duplicate(self):\n        # Read the pub key\n        key = self._read_ssh_key()\n        # Add the key to the user\n        userobj = UserObject.get_user(self.USERNAME)\n        userobj.add_authorizedkey(key)\n        # Add the same key\n        with self.assertRaises(DuplicateSSHKeyError):\n            userobj.add_authorizedkey(key)\n\n    def test_add_authorizedkey_with_file(self):\n        \"\"\"\n        Add an ssh key for a user with an authorizedkey file.\n        \"\"\"\n        userobj = UserObject.get_user(self.USERNAME)\n\n        # Create empty authorized_keys file\n        os.mkdir(os.path.join(userobj.user_root, '.ssh'))\n        filename = os.path.join(userobj.user_root, '.ssh', 'authorized_keys')\n        open(filename, 'a').close()\n\n        # Read the pub key\n        key = self._read_ssh_key()\n        userobj.add_authorizedkey(key)\n\n        # Validate\n        with open(filename, 'r') as fh:\n            self.assertEqual(key, fh.read())\n\n    def test_delete_authorizedkey_without_file(self):\n        \"\"\"\n        Remove an ssh key for a user without authorizedkey file.\n        \"\"\"\n        # Update user with ssh keys.\n        data = self._read_authorized_keys()\n        userobj = UserObject.get_user(self.USERNAME)\n        for k in authorizedkeys.read(StringIO(data)):\n            try:\n                userobj.add_authorizedkey(k.getvalue())\n            except ValueError:\n                # Some ssh key in the testing file are not valid.\n                pass\n\n        # Get the keys\n        keys = list(userobj.authorizedkeys)\n        self.assertEqual(2, len(keys))\n\n        # Remove a key\n        userobj.delete_authorizedkey(\"9a:f1:69:3c:bc:5a:cd:02:5e:33:bc:cd:c0:01:eb:4c\")\n\n        # Validate\n        keys = list(userobj.authorizedkeys)\n        self.assertEqual(1, len(keys))\n\n    def test_delete_authorizedkey_with_file(self):\n        \"\"\"\n        Remove an ssh key for a user with authorizedkey file.\n        \"\"\"\n        # Create authorized_keys file\n        data = self._read_authorized_keys()\n        userobj = UserObject.get_user(self.USERNAME)\n        os.mkdir(os.path.join(userobj.user_root, '.ssh'))\n        filename = os.path.join(userobj.user_root, '.ssh', 'authorized_keys')\n        with open(filename, 'w') as f:\n            f.write(data)\n\n        # Get the keys\n        keys = list(userobj.authorizedkeys)\n        self.assertEqual(5, len(keys))\n\n        # Remove a key\n        userobj.delete_authorizedkey(\"9a:f1:69:3c:bc:5a:cd:02:5e:33:bc:cd:c0:01:eb:4c\")\n\n        # Validate\n        keys = list(userobj.authorizedkeys)\n        self.assertEqual(4, len(keys))\n\n    def test_repo_objs(self):\n        # Given a user with a list of repositories\n        userobj = UserObject.get_user(self.USERNAME)\n        repos = sorted(userobj.repo_objs, key=lambda r: r.name)\n        self.assertEqual(['broker-repo', 'testcases'], [r.name for r in repos])\n        # When deleting a repository empty list\n        repos[1].delete()\n        # Then the repository is removed from the list.\n        self.assertEqual(['broker-repo'], sorted([r.name for r in userobj.repo_objs]))\n\n    def test_refresh_repos_without_delete(self):\n        # Given a user with invalid repositories\n        userobj = UserObject.get_user(self.USERNAME)\n        RepoObject.query.delete()\n        RepoObject(userid=userobj.userid, repopath='invalid').add()\n        self.assertEqual(['invalid'], sorted([r.name for r in userobj.repo_objs]))\n        # When updating the repository list without deletion\n        userobj.refresh_repos()\n        # Then the list invlaid the invalid repo and new repos\n        self.assertEqual(['broker-repo', 'invalid', 'testcases'], sorted([r.name for r in userobj.repo_objs]))\n\n    def test_refresh_repos_with_delete(self):\n        # Given a user with invalid repositories\n        userobj = UserObject.get_user(self.USERNAME)\n        RepoObject.query.delete()\n        RepoObject(userid=userobj.userid, repopath='invalid').add()\n        self.assertEqual(['invalid'], sorted([r.name for r in userobj.repo_objs]))\n        # When updating the repository list without deletion\n        userobj.refresh_repos(delete=True)\n        # Then the list invlaid the invalid repo and new repos\n        userobj.expire()\n        self.assertEqual(['broker-repo', 'testcases'], sorted([r.name for r in userobj.repo_objs]))\n\n    def test_refresh_repos_with_single_repo(self):\n        # Given a user with invalid repositories\n        userobj = UserObject.get_user(self.USERNAME)\n        userobj.user_root = os.path.join(self.testcases, 'testcases')\n        # When updating the repository list without deletion\n        userobj.refresh_repos(delete=True)\n        # Then the list invlaid the invalid repo and new repos\n        userobj.expire()\n        self.assertEqual([''], sorted([r.name for r in userobj.repo_objs]))\n\n    def test_add_access_token(self):\n        # Given a user with an email\n        userobj = UserObject.get_user(self.USERNAME)\n        userobj.email = 'test@examples.com'\n        userobj.add()\n        # When adding a new token\n        token = userobj.add_access_token('test')\n        # Then a new token get created\n        self.assertTrue(token)\n        tokenobj = Token.query.filter(Token.userid == userobj.userid).first()\n        self.assertTrue(tokenobj)\n        self.assertEqual(None, tokenobj.expiration_time)\n        self.assertEqual(None, tokenobj.access_time)\n        # Then an email is sent to the user.\n        self.listener.access_token_added.assert_called_once_with(userobj, 'test')\n        self.listener.queue_mail.assert_called_once()\n\n    def test_add_access_token_duplicate_name(self):\n        # Given a user with an existing token\n        userobj = UserObject.get_user(self.USERNAME)\n        userobj.add_access_token('test')\n        self.assertEqual(1, Token.query.filter(Token.userid == userobj.userid).count())\n        # When adding a new token with the same name\n        with self.assertRaises(ValueError):\n            userobj.add_access_token('test')\n        # Then token is not created\n        self.assertEqual(1, Token.query.filter(Token.userid == userobj.userid).count())\n        # Then an email is not sent.\n        self.listener.access_token_added.assert_called_once_with(userobj, 'test')\n\n    def test_delete_access_token(self):\n        # Given a user with an existing token\n        userobj = UserObject.get_user(self.USERNAME)\n        userobj.add_access_token('test')\n        self.assertEqual(1, Token.query.filter(Token.userid == userobj.userid).count())\n        # When deleting an access token\n        userobj.delete_access_token('test')\n        # Then Token get deleted\n        self.assertEqual(0, Token.query.filter(Token.userid == userobj.userid).count())\n\n    def test_delete_access_token_invalid(self):\n        # Given a user with an existing token\n        userobj = UserObject.get_user(self.USERNAME)\n        userobj.add_access_token('test')\n        self.assertEqual(1, Token.query.filter(Token.userid == userobj.userid).count())\n        # When deleting an invalid access token\n        with self.assertRaises(ValueError):\n            userobj.delete_access_token('invalid')\n        # Then Token not deleted\n        self.assertEqual(1, Token.query.filter(Token.userid == userobj.userid).count())\n\n    def test_delete_user_remove_access_tokens(self):\n        # Given a user with an existing token\n        userobj = UserObject.add_user('testuser', 'password')\n        userobj.add_access_token('test')\n        self.assertEqual(1, Token.query.filter(Token.userid == userobj.userid).count())\n        # When deleting the user\n        userobj.delete()\n        # Then Token get deleted\n        self.assertEqual(0, Token.query.filter(Token.userid == userobj.userid).count())\n\n    def test_verify_access_token(self):\n        # Given a user with an existing token\n        userobj = UserObject.get_user(self.USERNAME)\n        token = userobj.add_access_token('test')\n        self.assertEqual(1, Token.query.filter(Token.userid == userobj.userid).count())\n        # When validating the token\n        # Then token is valid\n        self.assertTrue(userobj.validate_access_token(token))\n\n    def test_verify_access_token_with_expired(self):\n        # Given a user with an existing token\n        userobj = UserObject.get_user(self.USERNAME)\n        token = userobj.add_access_token(\n            'test', expiration_time=datetime.datetime.now() - datetime.timedelta(seconds=1)\n        )\n        self.assertEqual(1, Token.query.filter(Token.userid == userobj.userid).count())\n        # When validating the token\n        # Then token is invalid\n        self.assertFalse(userobj.validate_access_token(token))\n        # Then token get removed\n        self.assertEqual(0, Token.query.filter(Token.userid == userobj.userid).count())\n\n    def test_verify_access_token_with_invalid(self):\n        # Given a user with an existing token\n        userobj = UserObject.get_user(self.USERNAME)\n        userobj.add_access_token('test', expiration_time=datetime.datetime.now())\n        self.assertEqual(1, Token.query.filter(Token.userid == userobj.userid).count())\n        # When validating the token\n        # Then token is invalid\n        self.assertFalse(userobj.validate_access_token('invalid'))\n\n\nclass UserObjectWithAdminPassword(rdiffweb.test.WebCase):\n\n    # password: test\n    default_config = {'admin-password': '{SSHA}wbSK4hlEX7mtGJplFi2oN6ABm6Y3Bo1e'}\n\n    def setUp(self):\n        # Do nothing - We need to skip the default setup to avoid deleting the records.\n        pass\n\n    def test_create_admin_user(self):\n        # Given admin-password is configure\n        # When database get created\n        # Then admin user get created with 'test' password\n        userobj = UserObject.get_user(self.USERNAME)\n        self.assertIsNotNone(userobj)\n        self.assertEqual('{SSHA}wbSK4hlEX7mtGJplFi2oN6ABm6Y3Bo1e', userobj.hash_password)\n        self.assertTrue(check_password('test', userobj.hash_password))\n\n    def test_set_password(self):\n        # Given admin-password is configure\n        # When trying to update admin password\n        # Then an exception is raised\n        userobj = UserObject.get_user(self.USERNAME)\n        with self.assertRaises(ValueError):\n            userobj.set_password('newpassword')\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"\nPlugin used to send email to users when their repository is getting too old.\nUser can control the notification period.\n\"\"\"\n\nimport datetime\nimport logging\n\nimport cherrypy\nfrom cherrypy.process.plugins import SimplePlugin\n\nfrom rdiffweb.core import librdiff\nfrom rdiffweb.core.model import UserObject\nfrom rdiffweb.tools.i18n import ugettext as _\n\nlogger = logging.getLogger(__name__)\n\n\nclass NotificationPlugin(SimplePlugin):\n    \"\"\"\n    Send email notification when a repository get too old (without a backup).\n    \"\"\"\n\n    execution_time = '23:00'\n\n    send_changed = False\n\n    def start(self):\n        self.bus.log('Start Notification plugin')\n        self.bus.publish('schedule_job', self.execution_time, self.notification_job)\n        self.bus.subscribe('access_token_added', self.access_token_added)\n        self.bus.subscribe('user_attr_changed', self.user_attr_changed)\n        self.bus.subscribe('user_password_changed', self.user_password_changed)\n\n    def stop(self):\n        self.bus.log('Stop Notification plugin')\n        self.bus.publish('unschedule_job', self.notification_job)\n        self.bus.unsubscribe('access_token_added', self.access_token_added)\n        self.bus.unsubscribe('user_attr_changed', self.user_attr_changed)\n        self.bus.unsubscribe('user_password_changed', self.user_password_changed)\n\n    @property\n    def app(self):\n        return cherrypy.tree.apps['']\n\n    def access_token_added(self, userobj, name):\n        if not self.send_changed:\n            return\n\n        if not userobj.email:\n            logger.info(\"can't sent mail to user [%s] without an email\", userobj.username)\n            return\n\n        # Send a mail notification\n        body = self.app.templates.compile_template(\n            \"access_token_added.html\", **{\"header_name\": self.app.cfg.header_name, 'user': userobj, 'name': name}\n        )\n        self.bus.publish('queue_mail', to=userobj.email, subject=_(\"A new access token has been created\"), message=body)\n\n    def user_attr_changed(self, userobj, attrs={}):\n        if not self.send_changed:\n            return\n\n        # Leave if the mail was not changed.\n        if 'email' not in attrs:\n            return\n\n        old_email = attrs['email'][0]\n        if not old_email:\n            logger.info(\"can't sent mail to user [%s] without an email\", userobj.username)\n            return\n\n        # If the email attributes was changed, send a mail notification.\n        body = self.app.templates.compile_template(\n            \"email_changed.html\", **{\"header_name\": self.app.cfg.header_name, 'user': userobj}\n        )\n        self.bus.publish('queue_mail', to=old_email, subject=_(\"Email address changed\"), message=body)\n\n    def user_password_changed(self, userobj):\n        if not self.send_changed:\n            return\n\n        if not userobj.email:\n            logger.info(\"can't sent mail to user [%s] without an email\", userobj.username)\n            return\n\n        # If the email attributes was changed, send a mail notification.\n        body = self.app.templates.compile_template(\n            \"password_changed.html\", **{\"header_name\": self.app.cfg.header_name, 'user': userobj}\n        )\n        self.bus.publish('queue_mail', to=userobj.email, subject=_(\"Password changed\"), message=body)\n\n    def notification_job(self):\n        \"\"\"\n        Loop trough all the user repository and send notifications.\n        \"\"\"\n\n        now = librdiff.RdiffTime()\n\n        def _user_repos():\n            \"\"\"Return a generator trought user repos to be notified.\"\"\"\n            for user in UserObject.query.all():\n                # Check if user has email.\n                if not user.email:\n                    continue\n                # Identify old repo for current user.\n                old_repos = []\n                for repo in user.repo_objs:\n                    # Check if repo has age configured (in days)\n                    maxage = repo.maxage\n                    if not maxage or maxage <= 0:\n                        continue\n                    # Check repo age.\n                    if repo.last_backup_date is None or repo.last_backup_date < (now - datetime.timedelta(days=maxage)):\n                        old_repos.append(repo)\n                # Return an item only if user had old repo\n                if old_repos:\n                    yield user, old_repos\n\n        # For each candidate, send mail.\n        for user, repos in _user_repos():\n            parms = {'user': user, 'repos': repos}\n            body = self.app.templates.compile_template(\"email_notification.html\", **parms)\n            cherrypy.engine.publish('queue_mail', to=user.email, subject=_(\"Notification\"), message=body)\n\n\ncherrypy.notification = NotificationPlugin(cherrypy.engine)\ncherrypy.notification.subscribe()\n\ncherrypy.config.namespaces['notification'] = lambda key, value: setattr(cherrypy.notification, key, value)\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\n\"\"\"\nCreated on Feb 13, 2016\n\n@author: Patrik Dufresne <patrik@ikus-soft.com>\n\"\"\"\nfrom unittest.mock import MagicMock\n\nimport cherrypy\n\nimport rdiffweb.core.notification\nimport rdiffweb.test\nfrom rdiffweb.core.model import RepoObject, UserObject\n\n\nclass NotificationJobTest(rdiffweb.test.WebCase):\n    def setUp(self):\n        self.listener = MagicMock()\n        cherrypy.engine.subscribe('queue_mail', self.listener.queue_email, priority=50)\n        return super().setUp()\n\n    def tearDown(self):\n        cherrypy.engine.unsubscribe('queue_mail', self.listener.queue_email)\n        return super().tearDown()\n\n    def test_notification_job(self):\n        \"\"\"\n        Run the notification and check if mails are sent\n        \"\"\"\n        # Given a user with an email address and a repository with a maxage\n        # Set user config\n        user = UserObject.get_user(self.USERNAME)\n        user.email = 'test@test.com'\n        user.add()\n        repo = RepoObject.query.filter(RepoObject.user == user, RepoObject.repopath == self.REPO).first()\n        repo.maxage = 1\n        repo.add()\n        # When running notification_job\n        cherrypy.notification.notification_job()\n\n        # Then an email is queue for this user\n        self.listener.queue_email.assert_called_once_with(\n            to='test@test.com',\n            subject='Notification',\n            message=\"<html>\\n  <head></head>\\n  <body>\\n    Hey admin,\\n    <p>\\n      You are receiving this email to notify you about your backups. The\\n      following repositories are inactive for some time. We invite you to have a look\\n      at your last backup schedule.\\n    </p>\\n    <ul>\\n      <li>testcases</li>\\n    </ul>\\n    <p>\\n      If you don't want to be notify about this. You need to review your\\n      user preferences.\\n    </p>\\n  </body>\\n</html>\",\n        )\n\n    def test_notification_job_undefined_last_backup_date(self):\n        # Given a valid user with a repository configured for notification\n        user = UserObject.get_user(self.USERNAME)\n        user.email = 'test@test.com'\n        user.add()\n        # Given a repo with last_backup_date None\n        repo = RepoObject.query.filter(RepoObject.user == user, RepoObject.repopath == 'broker-repo').first()\n        repo.maxage = 1\n        repo.add()\n        self.assertIsNone(repo.last_backup_date)\n\n        # When Notification job is running\n        cherrypy.notification.notification_job()\n\n        # Then a notification is sent to the user.\n        self.listener.queue_email.assert_called_once_with(\n            to='test@test.com',\n            subject='Notification',\n            message=\"<html>\\n  <head></head>\\n  <body>\\n    Hey admin,\\n    <p>\\n      You are receiving this email to notify you about your backups. The\\n      following repositories are inactive for some time. We invite you to have a look\\n      at your last backup schedule.\\n    </p>\\n    <ul>\\n      <li>broker-repo</li>\\n    </ul>\\n    <p>\\n      If you don't want to be notify about this. You need to review your\\n      user preferences.\\n    </p>\\n  </body>\\n</html>\",\n        )\n\n    def test_notification_job_without_notification(self):\n        # Given a valid user with a repository configured without notification (-1)\n        user = UserObject.get_user(self.USERNAME)\n        user.email = 'test@test.com'\n        user.add()\n        repo = RepoObject.query.filter(RepoObject.user == user, RepoObject.repopath == self.REPO).first()\n        repo.maxage = -1\n        repo.add()\n\n        # Call notification.\n        cherrypy.notification.notification_job()\n\n        # Expect it to be called.\n        self.listener.queue_email.assert_not_called()\n\n\nclass NotificationPluginTest(rdiffweb.test.WebCase):\n\n    default_config = {\n        'email-send-changed-notification': True,\n    }\n\n    def setUp(self):\n        self.listener = MagicMock()\n        cherrypy.engine.subscribe('queue_mail', self.listener.queue_email, priority=50)\n        return super().setUp()\n\n    def tearDown(self):\n        cherrypy.engine.unsubscribe('queue_mail', self.listener.queue_email)\n        return super().tearDown()\n\n    def test_email_changed(self):\n        # Given a user with an email address\n        user = UserObject.get_user(self.USERNAME)\n        user.email = 'original_email@test.com'\n        self.listener.queue_email.reset_mock()\n\n        # When updating the user's email\n        user.email = 'email_changed@test.com'\n\n        # Then a email is queue to notify the user.\n        self.listener.queue_email.assert_called_once_with(\n            to='original_email@test.com',\n            subject='Email address changed',\n            message='<html>\\n  <head></head>\\n  <body>\\n    Hey admin,\\n    <p>You recently changed the email address associated with your Rdiffweb account.</p>\\n    <p>\\n      If you did not make this change and believe your account has been compromised, please contact your administrator.\\n    </p>\\n  </body>\\n</html>',\n        )\n\n    def test_email_updated_with_same_value(self):\n        # Given a user with an email\n        user = UserObject.get_user(self.USERNAME)\n        user.email = 'email_changed@test.com'\n        self.listener.queue_email.reset_mock()\n\n        # When updating the user's email with the same value\n        user.email = 'email_changed@test.com'\n\n        # Then no email are sent to the user\n        self.listener.queue_email.assert_not_called()\n\n    def test_password_change_notification(self):\n        # Given a user with a email.\n        user = UserObject.get_user(self.USERNAME)\n        user.email = 'password_change@test.com'\n        self.listener.queue_email.reset_mock()\n\n        # When updating the user password\n        user.set_password('new_password')\n\n        # Then a email is send to the user\n        self.listener.queue_email.assert_called_once_with(\n            to='password_change@test.com',\n            subject='Password changed',\n            message='<html>\\n  <head></head>\\n  <body>\\n    Hey admin,\\n    <p>You recently changed the password associated with your Rdiffweb account.</p>\\n    <p>\\n      If you did not make this change and believe your account has been compromised, please contact your administrator.\\n    </p>\\n  </body>\\n</html>',\n        )\n\n    def test_password_change_with_same_value(self):\n        # Given a user with a email.\n        user = UserObject.get_user(self.USERNAME)\n        user.email = 'password_change@test.com'\n        user.set_password('new_password')\n        self.listener.queue_email.reset_mock()\n\n        # When updating the user password with the same value\n        user.set_password('new_password')\n\n        # Then an email is sent to the user\n        self.listener.queue_email.assert_called_once_with(\n            to='password_change@test.com',\n            subject='Password changed',\n            message='<html>\\n  <head></head>\\n  <body>\\n    Hey admin,\\n    <p>You recently changed the password associated with your Rdiffweb account.</p>\\n    <p>\\n      If you did not make this change and believe your account has been compromised, please contact your administrator.\\n    </p>\\n  </body>\\n</html>',\n        )\n", "<html>\n  <head></head>\n  <body>\n    {% trans username=(user.fullname or user.username) %}Hey {{ username }},{% endtrans %}\n    <p>\n      {% trans %}To help us make sure it's really you, here's the verification code you'll need to log in:{% endtrans %}\n    </p>\n    <p>\n      <strong>{{ code }}</strong>\n    </p>\n    <p>\n      {% trans %}If this wasn't you logging in, and you use a password to log in, please reset your password.{% endtrans %}\n    </p>\n    <p>\n      {% trans %}This code will expire in 1 hour. Once the code expires, you will need to request a new verification code by going through the login procedure again.{% endtrans %}\n    </p>\n  </body>\n</html>\n", "Couldn't find the requested file /rdiffweb/templates/email_verification_code.html in ikus060/rdiffweb.", "# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n[tox]\nenvlist = py3,doc,flake8,black,isort,djlint,buster,bullseye,bookworm\n\n[testenv]\npassenv = RDIFFWEB_TEST_DATABASE_URI\ndeps=\n  pytest\n  coverage\n  pytest-cov\n  psycopg2-binary\n  #cherrypy<9 depends on nosetest\n  buster: nose\n  buster: apscheduler==3.5.3\n  buster: cherrypy==8.9.1\n  buster: configargparse==0.13.0\n  buster: distro==1.3.0\n  buster: humanfriendly==4.18\n  buster: Jinja2==2.10\n  buster: ldap3==2.4.1\n  buster: MarkupSafe==1.1.0\n  buster: psutil==5.7.2\n  buster: sqlalchemy==1.2.18\n  buster: WTForms==2.2.1\n  bullseye: apscheduler==3.7.0\n  bullseye: cherrypy==18.6.1\n  bullseye: configargparse==1.2.3\n  bullseye: distro==1.5.0\n  bullseye: humanfriendly==9.1\n  bullseye: Jinja2==2.11.3\n  bullseye: ldap3==2.8.1\n  bullseye: MarkupSafe==1.1.1\n  bullseye: psutil==5.8.0\n  bullseye: sqlalchemy==1.3.22\n  bullseye: WTForms==2.2.1\n  bookworm: apscheduler==3.9.1\n  bookworm: cherrypy==18.8.0\n  bookworm: configargparse==1.5.3\n  bookworm: distro==1.7.0\n  bookworm: humanfriendly==10.0\n  bookworm: Jinja2==3.0.3\n  bookworm: ldap3==2.9.1\n  bookworm: MarkupSafe==2.1.1\n  bookworm: psutil==5.9.0\n  bookworm: sqlalchemy==1.4.31\n  bookworm: WTForms==2.2.1\nextras = test\ncommands=\n  pytest -v --debug --override-ini junit_family=xunit1 --junit-xml=xunit-{envname}.xml --cov=rdiffweb --cov-report xml:coverage-{envname}.xml\n\n[testenv:doc]\ndeps =\n  sphinx\n  sphinx_md\n  recommonmark\n  sphinx-markdown-tables==0.0.3\ncommands = sphinx-build -W -b html -d {envtmpdir}/doctrees doc {envtmpdir}/html\n\n[testenv:black]\ndeps = black\ncommands = black --check --diff setup.py rdiffweb\nskip_install = true\n\n[testenv:djlint]\ndeps = djlint==1.12.1\nallowlist_externals = sh\ncommands = sh -c 'djlint --check rdiffweb/templates/*.html  rdiffweb/templates/**/*.html'\nskip_install = true\n\n[testenv:flake8]\ndeps =\n  flake8\ncommands = flake8 setup.py rdiffweb\nskip_install = true\n\n[testenv:isort]\ndeps = isort>=5.0.1\ncommands = isort --check --diff setup.py rdiffweb\nskip_install = true\n\n[flake8]\nignore =\n  E203 # whitespace before ':'\n  E501 # line too long (86 > 79 characters)\n  W503 # line break before binary operator\n  E741 # ambiguous variable name 'I'\nfilename =\n  *.py\n  setup.py\nmax-complexity = 20\n\n[isort]\nprofile = black\nline_length = 120"], "fixing_code": ["![Rdiffweb Banner](https://gitlab.com/ikus-soft/rdiffweb/-/raw/master/doc/_static/banner.png)\n\n<p align=\"center\">\n<strong>\n<a href=\"https://www.rdiffweb.org\">website</a>\n\u2022 <a href=\"https://www.ikus-soft.com/archive/rdiffweb/doc/latest/html/\">docs</a>\n\u2022 <a href=\"https://groups.google.com/d/forum/rdiffweb\">community</a>\n\u2022 <a href=\"https://rdiffweb-demo.ikus-soft.com/\">demo</a>\n</strong>\n</p>\n\n<p align=\"center\">\n<a href=\"LICENSE\"><img alt=\"License\" src=\"https://img.shields.io/github/license/ikus060/rdiffweb\"></a>\n<a href=\"https://gitlab.com/ikus-soft/rdiffweb/pipelines\"><img alt=\"Build\" src=\"https://gitlab.com/ikus-soft/rdiffweb/badges/master/pipeline.svg\"></a>\n<a href=\"https://sonar.ikus-soft.com/dashboard?id=rdiffweb\"><img alt=\"Quality Gate Minarca Client\" src=\"https://sonar.ikus-soft.com/api/project_badges/measure?project=rdiffweb&metric=alert_status\"></a>\n<a href=\"https://sonar.ikus-soft.com/dashboard?id=rdiffweb\"><img alt=\"Coverage\" src=\"https://sonar.ikus-soft.com/api/project_badges/measure?project=rdiffweb&metric=coverage\"></a>\n<a href=\"https://bestpractices.coreinfrastructure.org/projects/6583\"><img src=\"https://bestpractices.coreinfrastructure.org/projects/6583/badge\"></a>\n</p>\n\n<h1 align=\"center\">\nWelcome to Rdiffweb\n</h1>\n\nRdiffweb is a web application that allows you to view repositories generated\nby [rdiff-backup](https://rdiff-backup.net/). The purpose of this\napplication is to ease the management of backups and quickly restore your data\nwith a rich and powerful web interface.\n\nRdiffweb is written in Python and is released as open source project under the \nGNU GENERAL PUBLIC LICENSE (GPL). All source code and documentation are\nCopyright Rdiffweb contributors.\n\nRdiffweb is actively developed by [IKUS Soft](https://www.ikus-soft.com/)\nsince November 2014.\n\nThe Rdiffweb source code is hosted on [Gitlab](https://gitlab.com/ikus-soft/rdiffweb)\nand mirrored to [Github](https://github.com/ikus060/rdiffweb).\n\nThe Rdiffweb website is https://rdiffweb.org/.\n\n## Features\n\nWith its rich web interface Rdiffweb provide a notable list of features:\n\n * Browse your backup\n * Restore single file or multiple files as an archived\n * Users authentication via local database and LDAP\n * Users authorization\n * Email notification when backup is not successful\n * Configurable repository encoding\n * Configurable retention period\n * Backup statistics visualization using graphs\n * SSH Keys management\n * Disk quota visualization\n * File and folder deletion\n\n## Demo\n\nIf you quickly want to check how Rdiffweb is behaving, you may try our demo server hosted on:\n\n[https://rdiffweb-demo.ikus-soft.com/](https://rdiffweb-demo.ikus-soft.com/)\n\nUse the following credential to login:\n\n * Username: admin\n * Password: admin123\n\n## Installation & Docker usage\n\nFor detailed installation steps, read the [Installation documentation](https://www.ikus-soft.com/archive/rdiffweb/doc/latest/html/installation.html).\n\n## Current Build Status\n\n[![Build Status](https://gitlab.com/ikus-soft/rdiffweb/badges/master/pipeline.svg)](https://gitlab.com/ikus-soft/rdiffweb/pipelines)\n\n## Download\n\nYou should read the [Documentation](https://www.ikus-soft.com/archive/rdiffweb/doc/latest/html/index.html) to properly install Rdiffweb in your environment.\n\n**Docker**\n\n    docker pull ikus060/rdiffweb\n    \n**Debian**\n\n    curl -L https://www.ikus-soft.com/archive/rdiffweb/public.key | apt-key add - \n    echo \"deb https://nexus.ikus-soft.com/repository/apt-release-bullseye/ bullseye main\" > /etc/apt/sources.list.d/rdiffweb.list\n    apt update\n    apt install rdiffweb\n\n**Pypi**\n\n    pip install rdiffweb\n\n## Support\n\n### Mailing list\n\nRdiffweb users should use the [Rdiffweb mailing list](https://groups.google.com/forum/#!forum/rdiffweb).\n\n### Bug Reports\n\nBug reports should be reported on the Rdiffweb Gitlab at https://gitlab.com/ikus-soft/rdiffweb/-/issues\n\n### Professional support\n\nProfessional support for Rdiffweb is available by contacting [IKUS Soft](https://www.ikus-soft.com/en/support/#form).\n\n# Changelog\n\n## Next Release - 2.5.0\n\nThis next release focus on two-factor-authentication as a measure to increase security of user's account.\n\n* Store User's session information into database\n* Update ldap plugin to load additional attributes from LDAP server\n* Improve `/status` page error handling when `session_statistics` cannot be read\n* Add support for Ubuntu Jammy\n* Upgrade from Bootstrap v3 to v4 #204\n* Replace Fontello by Font-Awesome v4\n* Use CSS variables `var()` to customize themes\n* Remove usage of Jquery.validate\n* Replace custom timsort by jquery DataTables #205\n* Add Active Session managements #203\n  * Active session should be visible in user's profiles\n  * Active session may be revoked by user\n  * Active session should be visible in administration view\n  * Action session may be revoke by administrator\n  * Show number of active users within the last 24 hours in dashboard\n* Handle migration of older Rdiffweb database by adding the missing `repos.Encoding`, `repos.keepdays` and `users.role` columns #185\n* Replace deprecated references of `disutils.spawn.find_executable()` by `shutil.which()` #208\n* Add two-factor authentication with email verification #201\n* Generate a new session on login and 2FA #220\n* Enforce permission on /etc/rdiffweb configuration folder\n* Enforce validation on fullname, username and email\n* Limit incorrect attempts to change the user's password to prevent brute force attacks #225 [CVE-2022-3273](https://nvd.nist.gov/vuln/detail/CVE-2022-3273)\n* Enforce password policy new password cannot be set as new password [CVE-2022-3376](https://nvd.nist.gov/vuln/detail/CVE-2022-3376)\n* Enforce better rate limit on login, mfa, password change and API [CVE-2022-3439](https://nvd.nist.gov/vuln/detail/CVE-2022-3439) [CVE-2022-3456](https://nvd.nist.gov/vuln/detail/CVE-2022-3456)\n* Enforce 'Origin' validation [CVE-2022-3457](https://nvd.nist.gov/vuln/detail/CVE-2022-3457)\n* Define idle and absolute session timeout with agressive default to protect usage on public computer [CVE-2022-3327](https://nvd.nist.gov/vuln/detail/CVE-2022-3327)\n* Send email notification when enabling or disabling MFA [CVE-2022-3363](https://nvd.nist.gov/vuln/detail/CVE-2022-3363)\n\nBreaking changes:\n\n* Drop Ubuntu Hirsute & Impish (End-of-life)\n* `session-dir` is deprecated and should be replace by `rate-limit-dir`. User's session are stored in database.\n* previous `.css` customization are not barkward compatible\n\n## 2.4.10 (2022-10-03)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Mitigate path traversal vulnerability [CVE-2022-3389](https://nvd.nist.gov/vuln/detail/CVE-2022-3389)\n\n## 2.4.9 (2022-09-28)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Add `Cache-Control` and other security headers [CVE-2022-3292](https://nvd.nist.gov/vuln/detail/CVE-2022-3292)\n* Enforce password policy using `password-score` based on [zxcvbn](https://github.com/dropbox/zxcvbn) [CVE-2022-3326](https://nvd.nist.gov/vuln/detail/CVE-2022-3326)\n\n## 2.4.8 (2022-09-26)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Clean-up invalid path on error page\n* Limit username field length [CVE-2022-3290](https://nvd.nist.gov/vuln/detail/CVE-2022-3290)\n* Limit user's email field length [CVE-2022-3272](https://nvd.nist.gov/vuln/detail/CVE-2022-3272)\n* Limit user's root directory field length [CVE-2022-3295](https://nvd.nist.gov/vuln/detail/CVE-2022-3295)\n* Limit SSH Key title field length [CVE-2022-3298](https://nvd.nist.gov/vuln/detail/CVE-2022-3298)\n\n## 2.4.7 (2002-09-21)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Generate a new session on login and 2FA #220 [CVE-2022-3269](https://nvd.nist.gov/vuln/detail/CVE-2022-3269)\n* Mitigate CSRF on user's settings #221 [CVE-2022-3274](https://nvd.nist.gov/vuln/detail/CVE-2022-3274)\n\n## 2.4.6 (2022-09-20)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Support MarkupSafe<3 for Debian bookworm\n* Mitigate CSRF on user's notification settings #216 [CVE-2022-3233](https://nvd.nist.gov/vuln/detail/CVE-2022-3233)\n* Mitigate CSRF on repository settings #217 [CVE-2022-3267](https://nvd.nist.gov/vuln/detail/CVE-2022-3267)\n* Use 'Secure' Attribute with Sensitive Cookie in HTTPS Session on HTTP Error #218 [CVE-2022-3174](https://nvd.nist.gov/vuln/detail/CVE-2022-3174)\n\n## 2.4.5 (2002-09-16)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Mitigate CSRF on repository deletion and user deletion [CVE-2022-3232](https://nvd.nist.gov/vuln/detail/CVE-2022-3232) #214 #215\n\n## 2.4.4 (2002-09-15)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Use `X-Real-IP` to identify client IP address to mitigate Brute-Force attack #213\n\n## 2.4.3 (2022-09-14)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Mitigate CSRF in profile's SSH Keys [CVE-2022-3221](https://nvd.nist.gov/vuln/detail/CVE-2022-3221) #212\n\n## 2.4.2 (2022-09-12)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Use 'Secure' Attribute with Sensitive Cookie in HTTPS Session. [CVE-2022-3174](https://nvd.nist.gov/vuln/detail/CVE-2022-3174) #209\n* Avoid leakage of the stack trace in the default error page. [CVE-2022-3175](https://nvd.nist.gov/vuln/detail/CVE-2022-3175) #210\n* Enforce minimum and maximum password length [CVE-2022-3175](https://nvd.nist.gov/vuln/detail/CVE-2022-3179) #211\n\n## 2.4.1 (2022-09-08)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Add Clickjacking Defense [CVE-2022-3167](https://nvd.nist.gov/vuln/detail/CVE-2022-3167)\n* Drop Ubuntu Hirsute & Impish (End-of-life)\n\n## 2.4.0 (2022-06-21)\n\nThis new release brings a lot of improvement since the last version, multiple bug fixes\nto make the application stable. A couple of new features to improve the overall\nusability and a new security feature to block a brute force attack.\n\n* Add RateLimit to login page and API to mitigate robots attacks #167\n* Send email notification only if `email-sender` option is defined to avoid raising exception in logs #176\n* Support file restore cancellation without leaving `rdiffweb-restore` process in `<defunct>` state #174\n* Replace `python-ldap` by `ldap3` a pure python implementation to avoid dependencies on `sasl` and `ldap` binaries #186\n* Reffactor core module to allow better extendability and reusability #183\n* Add support for Debian Bookworm #180\n* Add support for Ubuntu Impish #175\n* Add rdiff-backup version to administration view\n* Run unit test during Debian build package\n* Refresh repository list automatically when required #188 #189\n* Fix error 500 displayed in status page #191\n* Improve repository browsing speed by minimizing the number of I/O call #192\n* Publish Docker image directly to DockerHub #144\n* Add REST API to manage sshkeys\n\nBreaking changes:\n\n* Ldap Password changes is not supported anymore.\n* Ldap Check Shadow expire config is not supported anymore. It should be replace by a custom filter.\n* Drop CentOS 7 and CentOS 8 support\n\n## 2.3.9 (2022-01-05)\n\nMaintenance release to fix minor issues\n\n* Improve date parsing for `backup.log` to avoid printing exception in logs #170\n* Return HTTP error 403 for invalid symlink to avoid returning a misleading HTTP 500 Server Error #168\n* Show a user friendly error message when trying to create a new user with an existing username #169\n* Handle repository without last-backup date during the notification process to ensure notifications are sent #171\n* Replace CherryPy `storage_type` by `storage_class` to avoid warning in logs\n* Update code to avoid deprecation warning where applicable\n* Add Flake8 validation to improve code quality\n* Remove Ubuntu Groovy support\n\n## 2.3.8 (2021-12-01)\n\n* Push all artefacts to nexus server including binaries and documentation\n* Fix `Chart.js` loading on Debian bullseye #164\n* Update installation steps documentation\n* Improve LDAP authentication to lookup entire directory\n* Fix usage of `--ldap-add-user-default-userroot` to avoid error related to wrong encoding\n* Improve authentication mechanics\n* Avoid raising an HTTP error 500 when login form receive invalid payload\n* Mitigate open redirect vulnerability in login form\n\n## 2.3.7 (2021-10-21)\n\n * To avoid backward compatibility issue, revert CSRF Token validation\n * Mitigate CSRF vulnerability using cookies with `SameSite=Lax`\n * Mitigate CSRF vulnerability by validating the `Origin` header when a form is submited\n * Improve usage of WTForm for all form validation\n * Update installation stepd for debian #162\n * Build Ubuntu packages and publish them to our APT repo\n\n## 2.3.6 (2021-10-20)\n\n * Broken build\n\n## 2.3.5 (2021-10-18)\n\n * Mitigate CSRF vulnerability to user, ssh and repo management with CSRF Token\n\n## 2.3.4 (2021-09-20)\n\n * Skip email notification if `email-host` configuration is not provided #157\n * Skip email notification when the new attribute value has the same value #159\n * USE LDAP `mail` attribute when creating new user from LDAP directory #156\n\n## 2.3.3 (2021-09-10)\n\n * Provide a new theme `blue` to match IKUS Soft colors #158\n\n## 2.3.2 (2021-09-07)\n\n * Automatically update user's repository list based on user's home directory\n\n## 2.3.1 (2021-07-14)\n\n * Update default `session-dir` location to `/var/lib/rdiffweb/session` to avoid using `/var/run` #148\n\n## 2.3.0 (2021-07-06)\n\n * Improve timezone handling to display date with local timezone using javascript #143\n * Improve charts by replacing d3js by chartkick #122\n * Replace the status view by something meaningful with chartkick #122\n * Provide Docker image with Rdiffweb `docker pull ikus060/rdiffweb` #55\n * Fix file and folder sorting #143\n\n## 2.2.0 (2021-05-11)\n \n * Debian package:\n   * Add rdiff-backup as dependencies to comply with Debian packaging rules\n   * Multiple other fixed to control files\n   * Use debhelper-compat (= 13)\n   * Use debhelper-compat (= 13)\n   * Run test during packaging\n   * Create default folder `/var/run/rdiffweb/sessions` to store user session\n * Use ConfigArgPare for configuration to support configuration file, environment variables and arguments to configure rdiffweb #114\n * Fix cache in localization module\n * Add `ldap-add-default-role` and `ldap-add-default-userroot` option to define default value for role and user root when creating user from LDAP #125\n * Support PostgreSQL database by replacing our storage layer by SQLAlchemy #126\n * Fix to retrieve user quota only for valid user_root #135\n * Add option `disable-ssh-keys` to disable SSH Key management\n * Use absolute URL everywhere\n * Add support for `X-Forwarded-For`, `X-Forwarded-proto` and other reverse proxy header when generating absolute URL\n * Drop Debian Stretch support\n * Implement a new background scheduler using apscheduler #82\n * Use background job to send email notification to avoid blocking web page loading #47\n * Use background job to delete repository to avoid blocking web page loading #48\n * Allow deleting a specific file or folder from the history using `rdiff-backup-delete` #128\n * Improve support for `session-dir` #131\n * Add option `admin-password` to define administrator password for better security\n * Improve performance of repository browsing \n * Add a new view to display logs of a specific repository\n * Allow downloading the log\n * Define a default limit to graph statistics to make it display faster\n * Fix `get-quota-cmd` option to properly return a value\n\n## 2.1.0 (2021-01-15)\n\n* Debian package: Remove dh-systemd from Debian build dependencies (https://bugs.debian.org/871312we)\n* Improve Quota management:\n  * `QuotaSetCmd`, `QuotaGetCmd` and `QuotaUsedCmd` options could be used to customize how to set the quota for your environment.\n  * Display user's quota in User View\n  * Display user's quota in Admin View\n  * Allow admin to update user quota from Admin View when `QuotaSetCmd` is defined.\n  * Allow admin to define user quota using human readable value (e.g.: GiB, TiB, etc.)\n  * Improve logging around quota management\n* Improve robustness when service is starting\n* Improve robustness when repository has wrong permission defined (e.g.: when some files not readable)\n* Add user id in Admin view\n* Replace `UserObject(1)` by the actual username in log file to improve debugging\n\n## 2.0.0 (2020-12-04)\n\n* Re-implement logic to update repositories views to remove duplicates and avoid nesting repo. #107\n* Handle elapsed time of days in the graph. Thanks [Nathaniel van Diepen](https://github.com/Eeems) contributions.\n* Rebrand all link to ikus-soft.com\n* Update documentation to install rdiffweb\n* Remove obsolete minify dependency\n* Drop support for python2\n* Provide null translation if translation catalogues are not found\n* Pass a LANG environment variable to rdiff-backup restore process to fix encoding issue #112\n* Remove obsolete python shebang\n* Remove execution bit (+x) on python modules\n* Provide `--help` and `--version` on `rdiffweb` executable\n* Improve cherrypy version detection\n* Do not update translation files (.mo) during build\n\n## 1.5.0 (2020-06-24)\n\nThis minor release introduce official support of rdiffweb on Debian Bullseye. It also includes some usability improvements.\n\n * Change formatting of Last Backup date for \"Updated 3 weeks ago\" to ease the readability\n * Add support for Debian Bullseye\n * Add support for Python 3.8 (#104)\n * Add warning in the users list view when a root directory is invalid (#30)\n * Add options to control search depthness (#1)\n * Print a warning in the log when the \"DefaultTheme\" value is not valid (#90)\n\n## 1.4.0 (2020-05-20)\n\nThanks to our sponsor, this release introduce a feature to have better control over the user's permission by defining 3 different levels of privilege: Admin, Maintainer and User. This addition allows you to have better control on what your users can or can't do.\n\n * Fix single repository discovery when a user's home is a rdiff-backup repository\n * [SPONSORED] Add a new setting at the user level to define the user's role. Admin,\n   Maintainer and User. Admin are allowed to do everything. Maintainer are\n   allow to browse and delete repo. Users are only allowed to browse. #94\n * Add \"Powered by\" in the web interface footer #91\n * Display a nice error message when trying to delete admin user #93\n * Introduce usage of wtforms and flash in admin users for better form validation. #96 #97\n * Update French translation\n\n## 1.3.2 (2020-04-23)\n\nThis minor releases fixed issues found while testing release 1.3.0.\n\n * Fix lookup of executable rdiff-backup and rdiffweb-restore to search in current virtualenv first\n * Fix repository view when multiple repo path are conflicting\n * Fix logging of rdiffweb-restore subprocess\n\n## 1.3.1 (2020-04-10)\n\nThis minor release enforces security of the password stored in rdiffweb database to make use of a better encryption using SSHA.\nOnly new passwords will make use of the SSHA scheme.\n\n * Enforce password encryption by using SSHA scheme #88\n\n## 1.3.0 (2020-04-07)\n\nThis release focuses on improving the restore of big archives. The download should be much faster to start. Major enhancement was made to offload the processing outside the web server. And all of this is still compatible with rdiff-backup v1.2.8 and the latest v2.0.0.\n\n * Restore file and folder in a subprocess to make the download start faster\n * Fix encoding of archive on Python3.6 (CentOS 7) by using PAX format\n * Add support to restore files and folders using rdiff-backup2\n * Remove obsolete dependencies `pysqlite2`\n * Fix issue creating duplicate entries of repository in the database\n\n## 1.2.2 (2020-03-05)\n\nThis release provides little improvement to the v1.2.x including official support of rdiff-backup v2.0.0.\n\n * Enhance the repository to invite users to refresh the repository when the view is empty.\n * Support rdiff-backup v2.0.0\n * Deprecate support for cherrypy 4, 5, 6 and 7\n * Improve loading of repository data (cache status and entries)\n * Restore compatibility with SQLite 3.7 (CentOS7)\n\nKnown issues:\n\n * Filename encoding in tar.gz and zip file might not be accurate if you are running Python 3.6 (CentOS7)\n\n\n## 1.2.1 (2020-02-08)\n\nLittle bug fix following the previous release\n\n * Fix 404 error when trying to access other users repo as admin\n * Fix logging format for cherrypy logs to matches rdiffweb format\n * Add log rotation by default\n\n## 1.2.0 (2020-01-30)\n\nThis release focus on improving the database layers for better extendability to add more type of data and to support more databases backend like postgresql in the near future.\n\n * Add explicit testing for Debian Stretch & Buster\n * Change the persistence layers\n   * Minimize number of SQL queries\n   * Add object lazy loading\n   * Add object data caching\n * Fix bugs with SQLite <= 3.16 (Debian Stretch)\n\n## 1.1.0 (2019-10-31)\n\nThis release focus on improving the admin area and building the fundation for repository access control list (ACL).\n\n * Update documentation from PDSL web site\n * Improve the navigation bar layout\n * Update the login page headline\n * Update jinja2 version to allow 2.10.x\n * Show server log in admin area\n * Reduce code smell\n * Add System information in admin area\n * Validate credential using local database before LDAP\n * Reffactoring templates macros\n * Enhance user's view search bar\n * Change repository URL to username/repopath\n * Add System information in admin area\n * Improve testcases\n * Clean-up obsolete code\n * Fix issue with captital case encoding name\n * Fix compilation of less files\n * Fix google font import\n\n## 1.0.3 (2019-10-04)\n * Removing the auto update repos\n\n## 1.0.2 (2019-10-01)\n * Create \"admin\" user if missing\n * Update french translation\n\n## 1.0.1 (2019-09-22)\n * Update installation documentation \n * Fix removal of SSH Key\n * Return meaningful error to the user trying to add an existing SSH key\n\n## 1.0.0 (2019-09-11)\n * Make repository removal more robust\n * Improve performance of librdiff\n * Add new RESTful api\n * Return the right HTTP 401 or 402 error code for authentication\n * Fix bug introduce by upgrade to Jinja2 + python3\n * Store ssh keys in database and disk\n * Add support for theme (default, orange)\n * Remove deprecated profiling code\n * Add disk usage support / quota\n * Add support of cherrypy v18\n * Drop support of cherrypy v3.2.2\n * Add wsgi entry point\n * Replace the plugins architecture to ease implementation\n * Numerous bug fixes\n\n## 0.10.9 (2019-05-22)\n * Better error handling when error.log file are not valid gzip file\n\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport logging\n\nimport cherrypy\nfrom wtforms.fields import BooleanField, StringField, SubmitField\n\nfrom rdiffweb.controller import Controller, flash\nfrom rdiffweb.controller.form import CherryForm\nfrom rdiffweb.tools.auth_form import LOGIN_PERSISTENT\nfrom rdiffweb.tools.i18n import gettext_lazy as _\n\n# Define the logger\nlogger = logging.getLogger(__name__)\n\n\nclass MfaForm(CherryForm):\n    code = StringField(\n        _('Verification code'),\n        description=_('Enter the code to verify your identity.'),\n        render_kw={\n            \"class\": \"form-control-lg\",\n            \"placeholder\": _('Enter verification code here'),\n            \"autocomplete\": \"off\",\n            \"autocorrect\": \"off\",\n            \"autofocus\": \"autofocus\",\n        },\n    )\n    persistent = BooleanField(\n        _('Remember me'),\n        default=lambda: cherrypy.session.get(LOGIN_PERSISTENT, False),\n    )\n    submit = SubmitField(\n        _('Sign in'),\n        render_kw={\"class\": \"btn-primary btn-lg btn-block\"},\n    )\n    resend_code = SubmitField(\n        _('Resend code to my email'),\n        render_kw={\"class\": \"btn-link btn-sm btn-block\"},\n    )\n\n    def validate_code(self, field):\n        # Code is required when submit.\n        if self.submit.data:\n            if not self.code.data:\n                raise ValueError(_('Invalid verification code.'))\n            # Validate verification code.\n            if not cherrypy.tools.auth_mfa.verify_code(code=self.code.data, persistent=self.persistent.data):\n                raise ValueError(_('Invalid verification code.'))\n\n    def validate(self, extra_validators=None):\n        if not (self.submit.data or self.resend_code.data):\n            raise ValueError(_('Invalid operation'))\n        return super().validate()\n\n\nclass MfaPage(Controller):\n    @cherrypy.expose()\n    @cherrypy.tools.ratelimit(methods=['POST'])\n    def index(self, **kwargs):\n        form = MfaForm()\n\n        # Validate MFA\n        if form.is_submitted():\n            if form.validate():\n                if form.submit.data:\n                    cherrypy.tools.auth_mfa.redirect_to_original_url()\n                elif form.resend_code.data:\n                    self.send_code()\n        if cherrypy.tools.auth_mfa.is_code_expired():\n            # Send verification code if previous code expired.\n            self.send_code()\n        params = {\n            'form': form,\n        }\n        # Add welcome message to params. Try to load translated message.\n        welcome_msg = self.app.cfg.welcome_msg\n        if welcome_msg:\n            params[\"welcome_msg\"] = welcome_msg.get('')\n            if hasattr(cherrypy.response, 'i18n'):\n                locale = cherrypy.response.i18n.locale.language\n                params[\"welcome_msg\"] = welcome_msg.get(locale, params[\"welcome_msg\"])\n        return self._compile_template(\"mfa.html\", **params)\n\n    def send_code(self):\n        # Send verification code by email\n        userobj = cherrypy.serving.request.currentuser\n        if not userobj.email:\n            flash(\n                _(\n                    \"Multi-factor authentication is enabled for your account, but your account does not have a valid email address to send the verification code to. Check your account settings with your administrator.\"\n                )\n            )\n            return\n        code = cherrypy.tools.auth_mfa.generate_code()\n        body = self.app.templates.compile_template(\n            \"email_verification_code.html\", **{\"header_name\": self.app.cfg.header_name, 'user': userobj, 'code': code}\n        )\n        cherrypy.engine.publish('queue_mail', to=userobj.email, subject=_(\"Your verification code\"), message=body)\n        flash(_(\"A new verification code has been sent to your email.\"))\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nimport cherrypy\nfrom wtforms.fields import SelectField, StringField, SubmitField\nfrom wtforms.widgets import HiddenInput\n\nfrom rdiffweb.controller import Controller, flash\nfrom rdiffweb.controller.form import CherryForm\nfrom rdiffweb.core.model import UserObject\nfrom rdiffweb.tools.i18n import gettext_lazy as _\n\n\nclass AbstractMfaForm(CherryForm):\n    def __init__(self, obj, **kwargs):\n        assert obj\n        super().__init__(obj=obj, **kwargs)\n        # Keep only one of the enable or disable button\n        if obj.mfa:\n            self.enable_mfa.widget = HiddenInput()\n            self.enable_mfa.data = ''\n        else:\n            self.disable_mfa.widget = HiddenInput()\n            self.disable_mfa.data = ''\n\n\nclass MfaStatusForm(AbstractMfaForm):\n    mfa = SelectField(\n        _('Two-Factor Authentication (2FA) Status'),\n        coerce=int,\n        choices=[\n            (UserObject.DISABLED_MFA, _(\"Disabled\")),\n            (UserObject.ENABLED_MFA, _(\"Enabled\")),\n        ],\n        render_kw={'readonly': True, 'disabled': True, 'data-beta': '1'},\n    )\n    enable_mfa = SubmitField(_('Enable Two-Factor Authentication'), render_kw={\"class\": \"btn-success\"})\n    disable_mfa = SubmitField(_('Disable Two-Factor Authentication'), render_kw={\"class\": \"btn-warning\"})\n\n\nclass MfaToggleForm(AbstractMfaForm):\n    code = StringField(\n        _('Verification code'),\n        render_kw={\n            \"placeholder\": _('Enter verification code here'),\n            \"autocomplete\": \"off\",\n            \"autocorrect\": \"off\",\n            \"autofocus\": \"autofocus\",\n        },\n    )\n    enable_mfa = SubmitField(_('Enable Two-Factor Authentication'), render_kw={\"class\": \"btn-success\"})\n    disable_mfa = SubmitField(_('Disable Two-Factor Authentication'), render_kw={\"class\": \"btn-warning\"})\n    resend_code = SubmitField(\n        _('Resend code to my email'),\n        render_kw={\"class\": \"btn-link\"},\n    )\n\n    @property\n    def app(self):\n        return cherrypy.request.app\n\n    def populate_obj(self, userobj):\n        # Enable or disable MFA only when a code is provided.\n        if self.enable_mfa.data:\n            userobj.mfa = UserObject.ENABLED_MFA\n            flash(_(\"Two-Factor authentication enabled successfully.\"), level='success')\n        elif self.disable_mfa.data:\n            userobj.mfa = UserObject.DISABLED_MFA\n            flash(_(\"Two-Factor authentication disabled successfully.\"), level='success')\n\n    def validate_code(self, field):\n        # Code is required for enable_mfa and disable_mfa\n        if self.enable_mfa.data or self.disable_mfa.data:\n            if not self.code.data:\n                raise ValueError(_(\"Enter the verification code to continue.\"))\n            # Validate code\n            if not cherrypy.tools.auth_mfa.verify_code(self.code.data, False):\n                raise ValueError(_(\"Invalid verification code.\"))\n\n    def validate(self, extra_validators=None):\n        if not (self.enable_mfa.data or self.disable_mfa.data or self.resend_code.data):\n            raise ValueError(_('Invalid operation'))\n        return super().validate()\n\n\nclass PagePrefMfa(Controller):\n    @cherrypy.expose\n    def default(self, action=None, **kwargs):\n        form = MfaToggleForm(obj=self.app.currentuser)\n        if form.is_submitted():\n            if form.validate():\n                if form.resend_code.data:\n                    self.send_code()\n                elif form.enable_mfa.data or form.disable_mfa.data:\n                    form.populate_obj(self.app.currentuser)\n                    form = MfaStatusForm(obj=self.app.currentuser)\n            # Send verification code if previous code expired.\n            elif cherrypy.tools.auth_mfa.is_code_expired():\n                self.send_code()\n        else:\n            form = MfaStatusForm(obj=self.app.currentuser)\n        params = {\n            'form': form,\n        }\n        return self._compile_template(\"prefs_mfa.html\", **params)\n\n    def send_code(self):\n        userobj = self.app.currentuser\n        if not userobj.email:\n            flash(_(\"To continue, you must set up an email address for your account.\"), level='warning')\n            return\n        code = cherrypy.tools.auth_mfa.generate_code()\n        body = self.app.templates.compile_template(\n            \"email_verification_code.html\", **{\"header_name\": self.app.cfg.header_name, 'user': userobj, 'code': code}\n        )\n        cherrypy.engine.publish('queue_mail', to=userobj.email, subject=_(\"Your verification code\"), message=body)\n        flash(_(\"A new verification code has been sent to your email.\"))\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nfrom unittest.mock import ANY, MagicMock\n\nimport cherrypy\nfrom parameterized import parameterized\n\nimport rdiffweb.test\nfrom rdiffweb.core.model import UserObject\n\n\nclass PagePrefMfaTest(rdiffweb.test.WebCase):\n\n    login = True\n\n    def setUp(self):\n        super().setUp()\n        # Define email for all test\n        userobj = UserObject.get_user(self.USERNAME)\n        userobj.email = 'admin@example.com'\n        userobj.add()\n        # Register a listener on email\n        self.listener = MagicMock()\n        cherrypy.engine.subscribe('queue_mail', self.listener.queue_email, priority=50)\n\n    def tearDown(self):\n        cherrypy.engine.unsubscribe('queue_mail', self.listener.queue_email)\n        return super().tearDown()\n\n    def _set_mfa(self, mfa):\n        # Define mfa for user\n        userobj = UserObject.get_user(self.USERNAME)\n        userobj.mfa = mfa\n        userobj.add()\n        # Reset mock.\n        self.listener.queue_email.reset_mock()\n        # Leave to disable mfa\n        if mfa == UserObject.DISABLED_MFA:\n            return\n        # Generate a code for login if required\n        self.getPage(\"/mfa/\")\n        self.assertStatus(200)\n        self.assertInBody(\"A new verification code has been sent to your email.\")\n        # Extract code from email between <strong> and </strong>\n        self.listener.queue_email.assert_called_once()\n        message = self.listener.queue_email.call_args[1]['message']\n        code = message.split('<strong>', 1)[1].split('</strong>')[0]\n        # Login to MFA\n        self.getPage(\"/mfa/\", method='POST', body={'code': code, 'submit': '1'})\n        self.assertStatus(303)\n        # Clear mock.\n        self.listener.queue_email.reset_mock()\n\n    def _get_code(self, action):\n        assert action in ['enable_mfa', 'disable_mfa', 'resend_code']\n        # Query MFA page to generate a code\n        self.getPage(\"/prefs/mfa\", method='POST', body={action: '1'})\n        self.assertStatus(200)\n        self.assertInBody(\"A new verification code has been sent to your email.\")\n        # Extract code from email between <strong> and </strong>\n        self.listener.queue_email.assert_called_once()\n        message = self.listener.queue_email.call_args[1]['message']\n        self.listener.queue_email.reset_mock()\n        return message.split('<strong>', 1)[1].split('</strong>')[0]\n\n    def test_get(self):\n        # When getting the page\n        self.getPage(\"/prefs/mfa\")\n        # Then the page is return without error\n        self.assertStatus(200)\n\n    @parameterized.expand(\n        [\n            ('enable_mfa', UserObject.DISABLED_MFA, UserObject.ENABLED_MFA, \"Two-Factor Authentication turned on\"),\n            ('disable_mfa', UserObject.ENABLED_MFA, UserObject.DISABLED_MFA, \"Two-Factor Authentication turned off\"),\n        ]\n    )\n    def test_with_valid_code(self, action, initial_mfa, expected_mfa, expected_subject):\n        # Define mfa for user\n        self._set_mfa(initial_mfa)\n        # Given a user with email requesting a code\n        code = self._get_code(action=action)\n        # When sending a valid code\n        self.getPage(\"/prefs/mfa\", method='POST', body={action: '1', 'code': code})\n        # Then mfa get enabled or disable accordingly\n        self.assertStatus(200)\n        userobj = UserObject.get_user(self.USERNAME)\n        self.assertEqual(userobj.mfa, expected_mfa)\n        # Then no verification code get sent\n        self.assertNotInBody(\"A new verification code has been sent to your email.\")\n        # Then an email confirmation get send\n        self.listener.queue_email.assert_called_once_with(to=ANY, subject=expected_subject, message=ANY)\n        # Then next page request is still working.\n        self.getPage('/')\n        self.assertStatus(200)\n\n    @parameterized.expand(\n        [\n            ('enable_mfa', UserObject.DISABLED_MFA, UserObject.DISABLED_MFA),\n            ('disable_mfa', UserObject.ENABLED_MFA, UserObject.ENABLED_MFA),\n        ]\n    )\n    def test_with_invalid_code(self, action, initial_mfa, expected_mfa):\n        # Define mfa for user\n        self._set_mfa(initial_mfa)\n        # Given a user with email requesting a code\n        self._get_code(action=action)\n        # When sending an invalid code\n        self.getPage(\"/prefs/mfa\", method='POST', body={action: '1', 'code': '1234567'})\n        # Then mfa get enabled or disable accordingly\n        self.assertStatus(200)\n        userobj = UserObject.get_user(self.USERNAME)\n        self.assertEqual(userobj.mfa, expected_mfa)\n        # Then next page request is still working.\n        self.getPage('/')\n        self.assertStatus(200)\n\n    @parameterized.expand(\n        [\n            ('enable_mfa', UserObject.DISABLED_MFA),\n            ('disable_mfa', UserObject.ENABLED_MFA),\n        ]\n    )\n    def test_without_email(self, action, initial_mfa):\n        # Define mfa for user\n        self._set_mfa(initial_mfa)\n        # Given a user without email requesting a code\n        userobj = UserObject.get_user(self.USERNAME)\n        userobj.email = ''\n        userobj.add()\n        # When trying to enable or disable mfa\n        self.getPage(\"/prefs/mfa\", method='POST', body={action: '1'})\n        # Then an error is return to the user\n        self.assertStatus(200)\n        self.assertInBody(\"To continue, you must set up an email address for your account.\")\n\n    @parameterized.expand(\n        [\n            (UserObject.DISABLED_MFA,),\n            (UserObject.ENABLED_MFA,),\n        ]\n    )\n    def test_resend_code(self, initial_mfa):\n        # Define mfa for user\n        self._set_mfa(initial_mfa)\n        # When requesting a new code.\n        self.getPage(\"/prefs/mfa\", method='POST', body={'resend_code': '1'})\n        # Then a new code get sent.\n        self.assertInBody(\"A new verification code has been sent to your email.\")\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport argparse\nimport logging\nimport re\nimport sys\nfrom collections import OrderedDict\n\nimport cherrypy\nimport configargparse\nimport pkg_resources\nfrom cherrypy import Application\n\n# Define the logger\nlogger = logging.getLogger(__name__)\n\n# Get rdiffweb version.\ntry:\n    VERSION = pkg_resources.get_distribution(\"rdiffweb\").version\nexcept pkg_resources.DistributionNotFound:\n    VERSION = \"DEV\"\n\n\ndef get_parser():\n    # Get global config argument parser\n    parser = configargparse.ArgumentParser(\n        prog='rdiffweb',\n        description='Web interface to browse and restore rdiff-backup repositories.',\n        default_config_files=['/etc/rdiffweb/rdw.conf', '/etc/rdiffweb/rdw.conf.d/*.conf'],\n        add_env_var_help=True,\n        auto_env_var_prefix='RDIFFWEB_',\n        config_file_parser_class=ConfigFileParser,\n        conflict_handler='resolve',\n    )\n\n    parser.add_argument(\n        '-f', '--config', is_config_file=True, metavar='FILE', help='location of Rdiffweb configuration file'\n    )\n\n    parser.add(\n        '--database-uri',\n        '--sqlitedb-file',\n        '--sqlitedbfile',\n        metavar='URI',\n        help=\"\"\"Location of the database used for persistence. SQLite and PostgreSQL\n            database are supported officially. To use a SQLite database you may\n            define the location using a file path or a URI.\n            e.g.: /srv/rdiffweb/file.db or sqlite:///srv/rdiffweb/file.db`.\n            To use PostgreSQL server you must provide\n            a URI similar to postgresql://user:pass@10.255.1.34/dbname and you\n            must install required dependencies.\n            By default, Rdiffweb uses a SQLite embedded database located at\n            /etc/rdiffweb/rdw.db.\"\"\",\n        default='/etc/rdiffweb/rdw.db',\n    )\n\n    parser.add_argument(\n        '-d',\n        '--debug',\n        action='store_true',\n        help='enable rdiffweb debug mode - change the log level to DEBUG, print exception stack trace to the web interface and show SQL query in logs',\n    )\n\n    parser.add_argument(\n        '--admin-user',\n        '--adminuser',\n        metavar='USERNAME',\n        help='administrator username. The administrator user get created on startup if the database is empty.',\n        default='admin',\n    )\n\n    parser.add_argument(\n        '--admin-password',\n        metavar='USERNAME',\n        help=\"\"\"administrator encrypted password as SSHA. Read online\n            documentation to know more about how to encrypt your password\n            into SSHA or use http://projects.marsching.org/weave4j/util/genpassword.php\n            When defined, administrator password cannot be updated using the web interface.\n            When undefined, default administrator password is `admin123` and\n            it can be updated using the web interface.\"\"\",\n    )\n\n    parser.add_argument(\n        '--default-theme',\n        '--defaulttheme',\n        help='define the default theme. Either: default, blue or orange. Define the CSS file to be loaded in the web interface. You may manually edit a CSS file to customize it. The location is similar to `/usr/local/lib/python3.9/dist-packages/rdiffweb/static/`',\n        choices=['default', 'blue', 'orange'],\n        default='default',\n    )\n\n    parser.add_argument(\n        '--environment',\n        choices=['development', 'production'],\n        help='define the type of environment: development, production. This is used to limit the information shown to the user when an error occur.',\n        default='production',\n    )\n\n    parser.add_argument(\n        '--email-encryption',\n        '--emailencryption',\n        choices=['none', 'ssl', 'starttls'],\n        help='type of encryption to be used when establishing communication with SMTP server. Default: none',\n        default='none',\n    )\n\n    parser.add_argument(\n        '--email-host',\n        '--emailhost',\n        metavar='HOST',\n        help='SMTP server used to send email in the form <host>:<port>. If the port is not provided, default to standard port 25 or 465 is used. e.g.: smtp.gmail.com:587',\n    )\n\n    parser.add_argument(\n        '--email-sender',\n        '--emailsender',\n        metavar='EMAIL',\n        help='email addres used for the `from:` field when sending email.',\n    )\n\n    parser.add_argument(\n        '--email-notification-time',\n        '--emailnotificationtime',\n        metavar='TIME',\n        help='time when the email notifcation should be sent for inactive backups. e.g.: 22:00 Default value: 23:00',\n        default='23:00',\n    )\n\n    parser.add_argument(\n        '--email-username',\n        '--emailusername',\n        metavar='USERNAME',\n        help='username used for authentication with the SMTP server.',\n    )\n\n    parser.add_argument(\n        '--email-password',\n        '--emailpassword',\n        metavar='PASSWORD',\n        help='password used for authentication with the SMTP server.',\n    )\n\n    parser.add_argument(\n        '--email-send-changed-notification',\n        '--emailsendchangednotification',\n        help='True to send notification when sensitive information get change in user profile.',\n        action='store_true',\n        default=True,\n    )\n\n    parser.add_argument(\n        '--favicon',\n        help='location of an icon to be used as a favicon displayed in web browser.',\n        default=pkg_resources.resource_filename('rdiffweb', 'static/favicon.ico'),\n    )  # @UndefinedVariable\n\n    parser.add_argument(\n        '--footer-name', '--footername', help=argparse.SUPPRESS, default='rdiffweb'\n    )  # @UndefinedVariable\n\n    parser.add_argument(\n        '--footer-url', '--footerurl', help=argparse.SUPPRESS, default='https://rdiffweb.org/'\n    )  # @UndefinedVariable\n\n    parser.add_argument(\n        '--header-logo',\n        '--headerlogo',\n        help='location of an image (preferably a .png) to be used as a replacement for the rdiffweb logo.',\n    )\n\n    parser.add_argument(\n        '--header-name',\n        '--headername',\n        help='application name displayed in the title bar and header menu.',\n        default='Rdiffweb',\n    )\n\n    parser.add_argument(\n        '--ldap-add-missing-user',\n        '--addmissinguser',\n        action='store_true',\n        help='enable creation of users from LDAP when the credential are valid.',\n        default=False,\n    )\n\n    parser.add_argument(\n        '--ldap-add-user-default-role',\n        help='default role used when creating users from LDAP. This parameter is only useful when `--ldap-add-missing-user` is enabled.',\n        default='user',\n        choices=['admin', 'maintainer', 'user'],\n    )\n\n    parser.add_argument(\n        '--ldap-add-user-default-userroot',\n        help='default user root directory used when creating users from LDAP. LDAP attributes may be used to define the default location. e.g.: `/backups/{uid[0]}/`. This parameter is only useful when `--ldap-add-missing-user` is enabled.',\n        default='',\n    )\n\n    parser.add_argument(\n        '--ldap-uri',\n        '--ldapuri',\n        help='URL to the LDAP server used to validate user credentials. e.g.: ldap://localhost:389',\n    )\n\n    parser.add_argument(\n        '--ldap-base-dn',\n        '--ldapbasedn',\n        metavar='DN',\n        help='DN of the branch of the directory where all searches should start from. e.g.: dc=my,dc=domain',\n        default=\"\",\n    )\n\n    parser.add_argument(\n        '--ldap-scope',\n        '--ldapscope',\n        help='scope of the search. Can be either base, onelevel or subtree',\n        choices=['base', 'onelevel', 'subtree'],\n        default=\"subtree\",\n    )\n\n    parser.add_argument('--ldap-tls', '--ldaptls', action='store_true', help='enable TLS')\n\n    parser.add_argument(\n        '--ldap-username-attribute',\n        '--ldapattribute',\n        metavar='ATTRIBUTE',\n        help=\"The attribute to search username. If no attributes are provided, the default is to use `uid`. It's a good idea to choose an attribute that will be unique across all entries in the subtree you will be using.\",\n        default='uid',\n    )\n\n    parser.add_argument(\n        '--ldap-filter',\n        '--ldapfilter',\n        help=\"search filter to limit LDAP lookup. If not provided, defaults to (objectClass=*), which searches for all objects in the tree.\",\n        default='(objectClass=*)',\n    )\n\n    parser.add_argument(\n        '--ldap-required-group',\n        '--ldaprequiredgroup',\n        metavar='GROUPNAME',\n        help=\"name of the group of which the user must be a member to access rdiffweb. Should be used with ldap-group-attribute and ldap-group-attribute-is-dn.\",\n    )\n\n    parser.add_argument(\n        '--ldap-group-attribute',\n        '--ldapgroupattribute',\n        metavar='ATTRIBUTE',\n        help=\"name of the attribute defining the groups of which the user is a member. Should be used with ldap-required-group and ldap-group-attribute-is-dn.\",\n        default='member',\n    )\n\n    parser.add_argument(\n        '--ldap-group-attribute-is-dn',\n        '--ldapgroupattributeisdn',\n        help=\"True if the content of the attribute `ldap-group-attribute` is a DN.\",\n        action='store_true',\n    )\n\n    parser.add_argument(\n        '--ldap-bind-dn',\n        '--ldapbinddn',\n        metavar='DN',\n        help=\"optional DN used to bind to the server when searching for entries. If not provided, will use an anonymous bind.\",\n        default=\"\",\n    )\n\n    parser.add_argument(\n        '--ldap-bind-password',\n        '--ldapbindpassword',\n        metavar='PASSWORD',\n        help=\"password to use in conjunction with LdapBindDn. Note that the bind password is probably sensitive data, and should be properly protected. You should only use the LdapBindDn and LdapBindPassword if you absolutely need them to search the directory.\",\n        default=\"\",\n    )\n\n    parser.add_argument(\n        '--ldap-version',\n        '--ldapversion',\n        '--ldapprotocolversion',\n        help=\"version of LDAP in use either 2 or 3. Default to 3.\",\n        default=3,\n        type=int,\n        choices=[2, 3],\n    )\n\n    parser.add_argument(\n        '--ldap-network-timeout',\n        '--ldapnetworktimeout',\n        metavar='SECONDS',\n        help=\"timeout in seconds value used for LDAP connection\",\n        default=100,\n        type=int,\n    )\n\n    parser.add_argument(\n        '--ldap-timeout',\n        '--ldaptimeout',\n        metavar='SECONDS',\n        help=\"timeout in seconds value used for LDAP request\",\n        default=300,\n        type=int,\n    )\n\n    parser.add_argument(\n        '--ldap-encoding',\n        '--ldapencoding',\n        metavar='ENCODING',\n        help=\"encoding used by your LDAP server.\",\n        default=\"utf-8\",\n    )\n\n    parser.add_argument(\n        '--log-access-file', '--logaccessfile', metavar='FILE', help='location of Rdiffweb log access file.'\n    )\n\n    parser.add_argument(\n        '--log-file',\n        '--logfile',\n        metavar='FILE',\n        help='location of Rdiffweb log file. Print log to the console if not define in config file.',\n    )\n\n    parser.add_argument(\n        '--log-level',\n        '--loglevel',\n        help='Define the log level.',\n        choices=['ERROR', 'WARN', 'INFO', 'DEBUG'],\n        default='INFO',\n    )\n\n    parser.add_argument(\n        '--max-depth',\n        '--maxdepth',\n        metavar='DEPTH',\n        help=\"define the maximum folder depthness to search into the user's root directory to find repositories. This is commonly used if you repositories are organised with multiple sub-folder.\",\n        type=int,\n        default=3,\n    )\n\n    parser.add('--quota-set-cmd', '--quotasetcmd', metavar='COMMAND', help=\"command line to set the user's quota.\")\n\n    parser.add('--quota-get-cmd', '--quotagetcmd', metavar='COMMAND', help=\"command line to get the user's quota.\")\n\n    parser.add(\n        '--quota-used-cmd', '--quotausedcmd', metavar='COMMAND', help=\"Command line to get user's quota disk usage.\"\n    )\n\n    parser.add(\n        '--remove-older-time',\n        '--removeoldertime',\n        metavar='TIME',\n        help=\"Time when to execute the remove older scheduled job. e.g.: 22:30\",\n        default='23:00',\n    )\n\n    parser.add('--server-host', '--serverhost', metavar='IP', default='127.0.0.1', help='IP address to listen to')\n\n    parser.add(\n        '--server-port',\n        '--serverport',\n        metavar='PORT',\n        help='port to listen to for HTTP request',\n        default='8080',\n        type=int,\n    )\n\n    parser.add(\n        '--rate-limit-dir',\n        '--session-dir',\n        '--sessiondir',\n        metavar='FOLDER',\n        help='location where to store rate-limit information. When undefined, the data is kept in memory. `--session-dir` are deprecated and kept for backward compatibility.',\n    )\n\n    parser.add(\n        '--rate-limit',\n        metavar='LIMIT',\n        type=int,\n        default=20,\n        help='maximum number of requests per hour that can be made on sensitive endpoints. When this limit is reached, an HTTP 429 message is returned to the user or the user is logged out. This security measure is used to limit brute force attacks on the login page and the RESTful API.',\n    )\n\n    parser.add(\n        '--session-idle-timeout',\n        metavar='MINUTES',\n        help='This timeout defines the amount of time a session will remain active in case there is no activity in the session. User Session will be revoke after this period of inactivity, unless the user selected \"remember me\". Default 5 minutes.',\n        default=5,\n    )\n\n    parser.add(\n        '--session-absolute-timeout',\n        metavar='MINUTES',\n        help='This timeout defines the maximum amount of time a session can be active. After this period, user is forced to (re)authenticate, unless the user selected \"remember me\". Default 20 minutes.',\n        default=20,\n    )\n\n    parser.add(\n        '--session-persistent-timeout',\n        metavar='MINUTES',\n        help='This timeout defines the maximum amount of time to remember and trust a user device. This timeout is used when user select \"remember me\". Default 30 days.',\n        default=43200,\n    )\n\n    parser.add(\n        '--ssl-certificate',\n        '--sslcertificate',\n        metavar='CERT',\n        help='location of the SSL Certification to enable HTTPS (not recommended)',\n    )\n\n    parser.add(\n        '--ssl-private-key',\n        '--sslprivatekey',\n        metavar='KEY',\n        help='location of the SSL Private Key to enable HTTPS (not recommended)',\n    )\n\n    parser.add(\n        '--tempdir',\n        metavar='FOLDER',\n        help='alternate temporary folder to be used when restoring files. Might be useful if the default location has limited disk space. Default to TEMPDIR environment or `/tmp`.',\n    )\n\n    parser.add(\n        '--disable-ssh-keys',\n        action='store_true',\n        help='used to hide SSH Key management to avoid users to add or remove SSH Key using the web application',\n        default=False,\n    )\n\n    parser.add(\n        '--password-min-length',\n        type=int,\n        help=\"Minimum length of the user's password\",\n        default=8,\n    )\n\n    parser.add(\n        '--password-max-length',\n        type=int,\n        help=\"Maximum length of the user's password\",\n        default=128,\n    )\n\n    parser.add(\n        '--password-score',\n        type=lambda x: max(1, min(int(x), 4)),\n        help=\"Minimum zxcvbn's score for password. Value from 1 to 4. Default value 2. Read more about it here: https://github.com/dropbox/zxcvbn\",\n        default=2,\n    )\n\n    parser.add_argument('--version', action='version', version='%(prog)s ' + VERSION)\n\n    # Here we append a list of arguments for each locale.\n    flags = ['--welcome-msg'] + ['--welcome-msg-' + i for i in ['ca', 'en', 'es', 'fr', 'ru']] + ['--welcomemsg']\n    parser.add_argument(\n        *flags,\n        metavar='HTML',\n        help='replace the welcome message displayed in the login page for default locale or for a specific locale',\n        action=LocaleAction\n    )\n    return parser\n\n\ndef parse_args(args=None, config_file_contents=None):\n    args = sys.argv[1:] if args is None else args\n    return get_parser().parse_args(args, config_file_contents=config_file_contents)\n\n\nclass LocaleAction(argparse.Action):\n    \"\"\"\n    Custom Action to support defining arguments with locale.\n    \"\"\"\n\n    def __init__(self, option_strings, dest, nargs=None, **kwargs):\n        super(LocaleAction, self).__init__(option_strings, dest, **kwargs)\n\n    def __call__(self, parser, namespace, value, option_string=None):\n        if option_string[-3] == '-':\n            # When using arguments, we can extract the locale from the argument key\n            locale = option_string[-2:]\n        elif value[2] == ':':\n            # When using config file, the locale could be extract from the value e.g. fr:message\n            locale = value[0:2]\n            value = value[3:]\n        else:\n            locale = ''\n        # Create a dictionary with locale.\n        items = getattr(namespace, self.dest) or {}\n        items[locale] = value\n        setattr(namespace, self.dest, items)\n\n\nclass ConfigFileParser(object):\n    \"\"\"\n    Custom config file parser to support rdiffweb config file format.\n    \"\"\"\n\n    def get_syntax_description(self):\n        msg = \"Configuration file syntax allows: key=value, flag=true.\"\n        return msg\n\n    def parse(self, stream):\n        \"\"\"\n        Used to read the rdiffweb config file as dict.\n        \"\"\"\n\n        result = OrderedDict()\n\n        for i, line in enumerate(stream):\n            line = re.compile(\"(.*?)#.*\").sub(r'\\1', line).strip()\n            if not line:\n                continue\n            if '=' not in line:\n                raise configargparse.ConfigFileParserException(\n                    \"Unexpected line {} in {}: {}\".format(i, getattr(stream, 'name', 'stream'), line)\n                )\n            split_line = line.partition('=')\n            if not len(split_line) == 3:\n                raise configargparse.ConfigFileParserException(\n                    \"Unexpected line {} in {}: {}\".format(i, getattr(stream, 'name', 'stream'), line)\n                )\n\n            # Get key a& value\n            key = split_line[0].lower().strip().replace('_', '-')\n            value = split_line[2].strip()\n\n            # Support welcome-msg locale for backward compatibility\n            m = re.match(\"welcome-?msg\\\\[(ca|en|es|fr|ru)\\\\]\", key.lower())\n            if m:\n                key = \"welcome-msg-\" + m.group(1)\n                value = m.group(1) + \":\" + value\n\n            result[key] = value\n\n        # This dictionary is read by cherrypy. So create appropriate structure.\n        return result\n\n\nclass Option(object):\n    def __init__(self, key):\n        assert key\n        self.key = key\n\n    def __get__(self, instance, owner):\n        \"\"\"\n        Return a property to wrap the given option.\n        \"\"\"\n        return self.get(instance)\n\n    def get(self, instance=None):\n        \"\"\"\n        Return the value of this options.\n        \"\"\"\n        if isinstance(instance, Application):\n            app = instance\n        else:\n            app = cherrypy.request.app or getattr(instance, 'app', None)\n        assert app, \"Option() can't get reference to app\"\n        assert app.cfg, \"Option() can't get reference to app.cfg\"\n        return getattr(app.cfg, self.key)\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport datetime\nimport logging\nimport os\nimport secrets\nimport string\n\nimport cherrypy\nfrom sqlalchemy import Column, Integer, SmallInteger, String, and_, event, inspect, or_\nfrom sqlalchemy.exc import IntegrityError\nfrom sqlalchemy.ext.hybrid import hybrid_property\nfrom sqlalchemy.orm import deferred, relationship, validates\nfrom zxcvbn import zxcvbn\n\nimport rdiffweb.tools.db  # noqa\nfrom rdiffweb.core import authorizedkeys\nfrom rdiffweb.core.passwd import check_password, hash_password\nfrom rdiffweb.tools.i18n import ugettext as _\n\nfrom ._repo import RepoObject\nfrom ._sshkey import SshKey\nfrom ._token import Token\n\nlogger = logging.getLogger(__name__)\n\nBase = cherrypy.tools.db.get_base()\n\nSEP = b'/'\n\n\nclass DuplicateSSHKeyError(Exception):\n    \"\"\"\n    Raised by add_authorizedkey when trying to add the same SSH Key twice.\n    \"\"\"\n\n    pass\n\n\nclass UserObject(Base):\n    __tablename__ = 'users'\n    __table_args__ = {'sqlite_autoincrement': True}\n\n    # Value for role.\n    ADMIN_ROLE = 0\n    MAINTAINER_ROLE = 5\n    USER_ROLE = 10\n    ROLES = {\n        'admin': ADMIN_ROLE,\n        'maintainer': MAINTAINER_ROLE,\n        'user': USER_ROLE,\n    }\n    # Value for mfa field\n    DISABLED_MFA = 0\n    ENABLED_MFA = 1\n\n    # Regex pattern to be used for validation.\n    PATTERN_EMAIL = r\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\"\n    PATTERN_FULLNAME = r\"\"\"[^!\"#$%&()*+,./:;<=>?@[\\]_{|}~]+$\"\"\"\n    PATTERN_USERNAME = r\"[a-zA-Z0-9_.\\-]+$\"\n\n    userid = Column('UserID', Integer, primary_key=True)\n    username = Column('Username', String, nullable=False, unique=True)\n    hash_password = Column('Password', String, nullable=False, default=\"\")\n    user_root = Column('UserRoot', String, nullable=False, default=\"\")\n    _is_admin = deferred(\n        Column(\n            'IsAdmin',\n            SmallInteger,\n            nullable=False,\n            server_default=\"0\",\n            doc=\"DEPRECATED This column is replaced by 'role'\",\n        )\n    )\n    email = Column('UserEmail', String, nullable=False, default=\"\")\n    restore_format = deferred(\n        Column(\n            'RestoreFormat',\n            SmallInteger,\n            nullable=False,\n            server_default=\"1\",\n            doc=\"DEPRECATED This column is not used anymore\",\n        )\n    )\n    role = Column('role', SmallInteger, nullable=False, server_default=str(USER_ROLE), default=USER_ROLE)\n    fullname = Column('fullname', String, nullable=False, default=\"\")\n    mfa = Column('mfa', SmallInteger, nullable=False, default=DISABLED_MFA)\n    repo_objs = relationship(\n        'RepoObject',\n        foreign_keys='UserObject.userid',\n        primaryjoin='UserObject.userid == RepoObject.userid',\n        uselist=True,\n        lazy=True,\n        order_by=lambda: RepoObject.repopath,\n    )\n\n    @classmethod\n    def get_user(cls, user):\n        \"\"\"Return a user object.\"\"\"\n        return UserObject.query.filter(UserObject.username == user).first()\n\n    @classmethod\n    def create_admin_user(cls, default_username, default_password):\n        # Check if admin user exists. If not, created it.\n        userobj = UserObject.get_user(default_username)\n        if not userobj:\n            userobj = cls.add_user(default_username, role=UserObject.ADMIN_ROLE, user_root='/backups')\n        # Also make sure to update the password with latest value from config file.\n        if default_password and default_password.startswith('{SSHA}'):\n            userobj.hash_password = default_password\n        elif default_password:\n            userobj.hash_password = hash_password(default_password)\n        else:\n            userobj.hash_password = hash_password('admin123')\n        userobj.add()\n\n    @classmethod\n    def add_user(cls, username, password=None, role=USER_ROLE, **attrs):\n        \"\"\"\n        Used to add a new user with an optional password.\n        \"\"\"\n        assert password is None or isinstance(password, str)\n        # Check if user already exists.\n        if UserObject.get_user(username):\n            raise ValueError(_(\"User %s already exists.\" % (username,)))\n\n        # Find a database where to add the user\n        logger.info(\"adding new user [%s]\", username)\n        userobj = UserObject(\n            username=username,\n            hash_password=hash_password(password) if password else '',\n            role=role,\n            **attrs,\n        ).add()\n        # Raise event\n        cherrypy.engine.publish('user_added', userobj)\n        # Return user object\n        return userobj\n\n    def add_authorizedkey(self, key, comment=None):\n        \"\"\"\n        Add the given key to the user. Adding the key to his `authorized_keys`\n        file if it exists and adding it to database.\n        \"\"\"\n        # Parse and validate ssh key\n        assert key\n        key = authorizedkeys.check_publickey(key)\n\n        # Remove option, replace comments.\n        key = authorizedkeys.AuthorizedKey(\n            options=None, keytype=key.keytype, key=key.key, comment=comment or key.comment\n        )\n\n        # If a filename exists, use it by default.\n        filename = os.path.join(self.user_root, '.ssh', 'authorized_keys')\n        if os.path.isfile(filename):\n            with open(filename, mode=\"r+\", encoding='utf-8') as fh:\n                if authorizedkeys.exists(fh, key):\n                    raise DuplicateSSHKeyError(_(\"SSH key already exists\"))\n                logger.info(\"add key [%s] to [%s] authorized_keys\", key, self.username)\n                authorizedkeys.add(fh, key)\n        else:\n            # Also look in database.\n            logger.info(\"add key [%s] to [%s] database\", key, self.username)\n            try:\n                SshKey(userid=self.userid, fingerprint=key.fingerprint, key=key.getvalue()).add()\n            except IntegrityError:\n                SshKey.session.rollback()\n                raise DuplicateSSHKeyError(\n                    _(\"Duplicate key. This key already exists or is associated to another user.\")\n                )\n        cherrypy.engine.publish('user_attr_changed', self, {'authorizedkeys': True})\n\n    def add_access_token(self, name, expiration_time=None, length=16):\n        \"\"\"\n        Create a new access token. Return the un-encrypted value of the token.\n        \"\"\"\n        assert name\n        assert length >= 8\n        # Generate a random token\n        token = ''.join(secrets.choice(string.ascii_lowercase) for i in range(length))\n        # Store hash token\n        try:\n            obj = Token(userid=self.userid, name=name, hash_token=hash_password(token), expiration_time=expiration_time)\n            obj.add()\n        except IntegrityError:\n            Token.session.rollback()\n            raise ValueError(_(\"Duplicate token name: %s\") % name)\n        cherrypy.engine.publish('access_token_added', self, name)\n        return token\n\n    def valid_user_root(self):\n        \"\"\"\n        Check if the current user_root is valid and readable\n        \"\"\"\n        try:\n            return os.access(self.user_root, os.F_OK) and os.path.isdir(self.user_root)\n        except Exception:\n            return False\n\n    def delete(self, *args, **kwargs):\n        cfg = cherrypy.tree.apps[''].cfg\n        if self.username == cfg.admin_user:\n            raise ValueError(_(\"can't delete admin user\"))\n        # FIXME This should be deleted by cascade\n        SshKey.query.filter(SshKey.userid == self.userid).delete()\n        RepoObject.query.filter(RepoObject.userid == self.userid).delete()\n        Token.query.filter(Token.userid == self.userid).delete()\n        # Delete ourself\n        Base.delete(self)\n\n    def delete_authorizedkey(self, fingerprint):\n        \"\"\"\n        Remove the given key from the user. Remove the key from his\n        `authorized_keys` file if it exists and from database database.\n        \"\"\"\n        # If a filename exists, use it by default.\n        filename = os.path.join(self.user_root, '.ssh', 'authorized_keys')\n        if os.path.isfile(filename):\n            with open(filename, mode='r+', encoding='utf-8') as fh:\n                logger.info(\"removing key [%s] from [%s] authorized_keys\", fingerprint, self.username)\n                authorizedkeys.remove(fh, fingerprint)\n        else:\n            # Also look in database.\n            logger.info(\"removing key [%s] from [%s] database\", fingerprint, self.username)\n            SshKey.query.filter(and_(SshKey.userid == self.userid, SshKey.fingerprint == fingerprint)).delete()\n        cherrypy.engine.publish('user_attr_changed', self, {'authorizedkeys': True})\n\n    def delete_access_token(self, name):\n        assert name\n        if not Token.query.filter(Token.userid == self.userid, Token.name == name).delete():\n            raise ValueError(_(\"token name doesn't exists: %s\") % name)\n\n    @property\n    def disk_usage(self):\n        # Skip if user_root is invalid.\n        if not self.user_root or not os.path.exists(self.user_root):\n            return 0\n        values = cherrypy.engine.publish('get_disk_usage', self)\n        # Return the first not None value\n        return next((v for v in values if v is not None), 0)\n\n    @property\n    def disk_quota(self):\n        # Skip if user_root is invalid.\n        if not self.user_root or not os.path.exists(self.user_root):\n            return 0\n        values = cherrypy.engine.publish('get_disk_quota', self)\n        # Return the first not None value\n        return next((v for v in values if v is not None), 0)\n\n    @disk_quota.setter\n    def disk_quota(self, value):\n        # Skip if user_root is invalid.\n        if not self.user_root or not os.path.exists(self.user_root):\n            return\n        cherrypy.engine.publish('set_disk_quota', self, value)\n\n    @property\n    def authorizedkeys(self):\n        \"\"\"\n        Return an iterator on the authorized key. Either from his\n        `authorized_keys` file if it exists or from database.\n        \"\"\"\n        # If a filename exists, use it by default.\n        filename = os.path.join(self.user_root, '.ssh', 'authorized_keys')\n        if os.path.isfile(filename):\n            for k in authorizedkeys.read(filename):\n                yield k\n\n        # Also look in database.\n        for record in SshKey.query.filter(SshKey.userid == self.userid).all():\n            yield authorizedkeys.check_publickey(record.key)\n\n    def refresh_repos(self, delete=False):\n        \"\"\"\n        Return list of repositories object to reflect the filesystem folders.\n\n        Return a RepoObject for each sub directories under `user_root` with `rdiff-backup-data`.\n        \"\"\"\n        # Update the repositories by walking in the directory tree.\n        def _onerror(unused):\n            logger.error('error updating user [%s] repos' % self.username, exc_info=1)\n\n        # Get application config\n        cfg = cherrypy.tree.apps[''].cfg\n\n        dirty = False\n        records = RepoObject.query.filter(RepoObject.userid == self.userid).order_by(RepoObject.repopath).all()\n        user_root = os.fsencode(self.user_root)\n        for root, dirs, unused_files in os.walk(user_root, _onerror):\n            for name in dirs.copy():\n                if name.startswith(b'.'):\n                    dirs.remove(name)\n            if b'rdiff-backup-data' in dirs:\n                repopath = os.path.relpath(root, start=user_root)\n                del dirs[:]\n                # Handle special scenario when the repo is the\n                # user_root\n                repopath = b'' if repopath == b'.' else repopath\n\n                # Check if repo path exists.\n                record_match = next((record for record in records if record.repopath == os.fsdecode(repopath)), None)\n                if not record_match:\n                    # Add repository to database.\n                    RepoObject(user=self, repopath=os.fsdecode(repopath)).add()\n                    dirty = True\n                else:\n                    records.remove(record_match)\n            if root.count(SEP) - user_root.count(SEP) >= cfg.max_depth:\n                del dirs[:]\n        # If enabled, remove entried from database\n        if delete:\n            for record in records:\n                RepoObject.query.filter(RepoObject.repoid == record.repoid).delete()\n        return dirty\n\n    @hybrid_property\n    def is_admin(self):\n        return self.role <= self.ADMIN_ROLE\n\n    @hybrid_property\n    def is_ldap(self):\n        return self.hash_password is None or self.hash_password == ''\n\n    @is_ldap.expression\n    def is_ldap(cls):\n        return or_(cls.hash_password.is_(None), cls.hash_password == '')\n\n    @hybrid_property\n    def is_maintainer(self):\n        return self.role <= self.MAINTAINER_ROLE\n\n    def set_password(self, password):\n        \"\"\"\n        Change the user's password. Raise a ValueError if the username or\n        the password are invalid.\n        \"\"\"\n        assert isinstance(password, str)\n        if not password:\n            raise ValueError(\"password can't be empty\")\n        cfg = cherrypy.tree.apps[''].cfg\n\n        # Cannot update admin-password if defined\n        if self.username == cfg.admin_user and cfg.admin_password:\n            raise ValueError(_(\"can't update admin-password defined in configuration file\"))\n\n        # Check password length\n        if cfg.password_min_length > len(password) or len(password) > cfg.password_max_length:\n            raise ValueError(\n                _('Password must have between %(min)d and %(max)d characters.')\n                % {'min': cfg.password_min_length, 'max': cfg.password_max_length}\n            )\n\n        # Verify password score using zxcvbn\n        stats = zxcvbn(password)\n        if stats.get('score') < cfg.password_score:\n            msg = _('Password too weak.')\n            warning = stats.get('feedback', {}).get('warning')\n            suggestions = stats.get('feedback', {}).get('suggestions')\n            if warning:\n                msg += ' ' + warning\n            if suggestions:\n                msg += ' ' + ' '.join(suggestions)\n            raise ValueError(msg)\n\n        logger.info(\"updating user password [%s]\", self.username)\n        self.hash_password = hash_password(password)\n\n    def __eq__(self, other):\n        return type(self) == type(other) and inspect(self).key == inspect(other).key\n\n    @validates('username')\n    def validates_username(self, key, value):\n        if self.username:\n            raise ValueError('Username cannot be modified.')\n        return value\n\n    def validate_access_token(self, token):\n        \"\"\"\n        Check if the given token matches.\n        \"\"\"\n        for access_token in Token.query.all():\n            # If token expired. Let delete it.\n            if access_token.is_expired:\n                access_token.delete()\n                continue\n            if check_password(token, access_token.hash_token):\n                # When it matches, let update the record.\n                access_token.access_time = datetime.datetime.utcnow\n                return True\n        return False\n\n    def validate_password(self, password):\n        return check_password(password, self.hash_password)\n\n\n@event.listens_for(UserObject.hash_password, \"set\")\ndef hash_password_set(target, value, oldvalue, initiator):\n    if value and value != oldvalue:\n        cherrypy.engine.publish('user_password_changed', target)\n\n\n@event.listens_for(UserObject, 'after_delete')\ndef user_after_delete(mapper, connection, target):\n    \"\"\"\n    Publish event when user is deleted.\n    \"\"\"\n    cherrypy.engine.publish('user_deleted', target.username)\n\n\n@event.listens_for(UserObject, 'after_update')\ndef user_attr_changed(mapper, connection, target):\n    changes = {}\n    state = inspect(target)\n    for attr in state.attrs:\n        if attr.key in ['user_root', 'email', 'role', 'mfa']:\n            hist = attr.load_history()\n            if hist.has_changes():\n                changes[attr.key] = (\n                    hist.deleted[0] if len(hist.deleted) >= 1 else None,\n                    hist.added[0] if len(hist.added) >= 1 else None,\n                )\n    if changes:\n        cherrypy.engine.publish('user_attr_changed', target, changes)\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"\nCreated on June 30, 2022\n\nModule to test `user` model.\n\n@author: Patrik Dufresne <patrik@ikus-soft.com>\n\"\"\"\nimport datetime\nimport os\nfrom io import StringIO, open\nfrom unittest.mock import MagicMock\n\nimport cherrypy\nimport pkg_resources\n\nimport rdiffweb.test\nfrom rdiffweb.core import authorizedkeys\nfrom rdiffweb.core.model import DuplicateSSHKeyError, RepoObject, Token, UserObject\nfrom rdiffweb.core.passwd import check_password\n\n\nclass UserObjectTest(rdiffweb.test.WebCase):\n    def _read_ssh_key(self):\n        \"\"\"Readthe pub key from test packages\"\"\"\n        filename = pkg_resources.resource_filename('rdiffweb.core.tests', 'test_publickey_ssh_rsa.pub')\n        with open(filename, 'r', encoding='utf8') as f:\n            return f.readline()\n\n    def _read_authorized_keys(self):\n        \"\"\"Read the content of test_authorized_keys\"\"\"\n        filename = pkg_resources.resource_filename('rdiffweb.core.tests', 'test_authorized_keys')\n        with open(filename, 'r', encoding='utf8') as f:\n            return f.read()\n\n    def setUp(self):\n        super().setUp()\n        self.listener = MagicMock()\n        cherrypy.engine.subscribe('access_token_added', self.listener.access_token_added, priority=50)\n        cherrypy.engine.subscribe('queue_mail', self.listener.queue_mail, priority=50)\n        cherrypy.engine.subscribe('user_added', self.listener.user_added, priority=50)\n        cherrypy.engine.subscribe('user_attr_changed', self.listener.user_attr_changed, priority=50)\n        cherrypy.engine.subscribe('user_deleted', self.listener.user_deleted, priority=50)\n        cherrypy.engine.subscribe('user_login', self.listener.user_login, priority=50)\n        cherrypy.engine.subscribe('user_password_changed', self.listener.user_password_changed, priority=50)\n\n    def tearDown(self):\n        cherrypy.engine.unsubscribe('access_token_added', self.listener.access_token_added)\n        cherrypy.engine.unsubscribe('queue_mail', self.listener.queue_mail)\n        cherrypy.engine.unsubscribe('user_added', self.listener.user_added)\n        cherrypy.engine.unsubscribe('user_attr_changed', self.listener.user_attr_changed)\n        cherrypy.engine.unsubscribe('user_deleted', self.listener.user_deleted)\n        cherrypy.engine.unsubscribe('user_login', self.listener.user_login)\n        cherrypy.engine.unsubscribe('user_password_changed', self.listener.user_password_changed)\n        return super().tearDown()\n\n    def test_add_user(self):\n        \"\"\"Add user to database.\"\"\"\n        userobj = UserObject.add_user('joe')\n        self.assertIsNotNone(userobj)\n        self.assertIsNotNone(UserObject.get_user('joe'))\n        # Check if listener called\n        self.listener.user_added.assert_called_once_with(userobj)\n\n    def test_add_user_updated_by_listener(self):\n        \"\"\"Add user to database.\"\"\"\n        # Given a listener with side effet\n        def change_user_obj(userobj):\n            userobj.user_root = '/new/value'\n\n        self.listener.user_added.side_effect = change_user_obj\n        # When adding user\n        userobj = UserObject.add_user('joe')\n        self.assertIsNotNone(userobj)\n        self.assertIsNotNone(UserObject.get_user('joe'))\n        # Then lister get called\n        self.listener.user_added.assert_called_once_with(userobj)\n        # Then object was updated by listener\n        self.assertEqual('/new/value', userobj.user_root)\n\n    def test_add_user_with_duplicate(self):\n        \"\"\"Add user to database.\"\"\"\n        UserObject.add_user('denise')\n        self.listener.user_added.reset_mock()\n        with self.assertRaises(ValueError):\n            UserObject.add_user('denise')\n        # Check if listener called\n        self.listener.user_added.assert_not_called()\n\n    def test_add_user_with_password(self):\n        \"\"\"Add user to database with password.\"\"\"\n        userobj = UserObject.add_user('jo', 'password')\n        self.assertIsNotNone(UserObject.get_user('jo'))\n        # Check if listener called\n        self.listener.user_added.assert_called_once_with(userobj)\n\n    def test_delete_admin_user(self):\n        # Trying to delete admin user should raise an error.\n        userobj = UserObject.get_user('admin')\n        with self.assertRaises(ValueError):\n            userobj.delete()\n\n    def test_users(self):\n        # Check admin exists\n        self.assertEqual(1, UserObject.query.count())\n        # Create user.\n        UserObject.add_user('annik')\n        users = UserObject.query.all()\n        self.assertEqual(2, len(users))\n        self.assertEqual('annik', users[1].username)\n        # Then 2 user exists\n        self.assertEqual(2, UserObject.query.count())\n\n    def test_get_user(self):\n        # Create new user\n        user = UserObject.add_user('bernie', 'my-password')\n        user.user_root = self.testcases\n        user.role = UserObject.ADMIN_ROLE\n        user.email = 'bernie@gmail.com'\n        user.refresh_repos()\n        self.assertEqual(['broker-repo', 'testcases'], sorted([r.name for r in user.repo_objs]))\n        user.repo_objs[0].maxage = -1\n        user.repo_objs[1].maxage = 3\n\n        # Get user record.\n        obj = UserObject.get_user('bernie')\n        self.assertIsNotNone(obj)\n        self.assertEqual('bernie', obj.username)\n        self.assertEqual('bernie@gmail.com', obj.email)\n        self.assertEqual(['broker-repo', 'testcases'], sorted([r.name for r in obj.repo_objs]))\n        self.assertEqual(self.testcases, obj.user_root)\n        self.assertEqual(True, obj.is_admin)\n        self.assertEqual(UserObject.ADMIN_ROLE, obj.role)\n\n        # Get repo object\n        self.assertEqual('broker-repo', obj.repo_objs[0].name)\n        self.assertEqual(-1, obj.repo_objs[0].maxage)\n        self.assertEqual('testcases', obj.repo_objs[1].name)\n        self.assertEqual(3, obj.repo_objs[1].maxage)\n\n    def test_get_user_with_invalid_user(self):\n        self.assertIsNone(UserObject.get_user('invalid'))\n\n    def test_get_set(self):\n        user = UserObject.add_user('larry', 'password')\n\n        self.assertEqual('', user.email)\n        self.assertEqual([], user.repo_objs)\n        self.assertEqual('', user.user_root)\n        self.assertEqual(False, user.is_admin)\n        self.assertEqual(UserObject.USER_ROLE, user.role)\n\n        user.user_root = self.testcases\n        user.refresh_repos()\n        self.listener.user_attr_changed.assert_called_with(user, {'user_root': ('', self.testcases)})\n        self.listener.user_attr_changed.reset_mock()\n        user = UserObject.get_user('larry')\n        user.role = UserObject.ADMIN_ROLE\n        user.add()\n        self.listener.user_attr_changed.assert_called_with(\n            user, {'role': (UserObject.USER_ROLE, UserObject.ADMIN_ROLE)}\n        )\n        self.listener.user_attr_changed.reset_mock()\n        user = UserObject.get_user('larry')\n        user.email = 'larry@gmail.com'\n        user.add()\n        self.listener.user_attr_changed.assert_called_with(user, {'email': ('', 'larry@gmail.com')})\n        self.listener.user_attr_changed.reset_mock()\n\n        self.assertEqual('larry@gmail.com', user.email)\n        self.assertEqual(['broker-repo', 'testcases'], sorted([r.name for r in user.repo_objs]))\n        self.assertEqual(self.testcases, user.user_root)\n        self.assertEqual(True, user.is_admin)\n        self.assertEqual(UserObject.ADMIN_ROLE, user.role)\n\n    def test_set_password_update(self):\n        # Given a user in database with a password\n        userobj = UserObject.add_user('annik', 'password')\n        self.listener.user_password_changed.reset_mock()\n        # When updating the user's password\n        userobj.set_password('new_password')\n        # Then password is SSHA\n        self.assertTrue(check_password('new_password', userobj.hash_password))\n        # Check if listener called\n        self.listener.user_password_changed.assert_called_once_with(userobj)\n\n    def test_delete_user(self):\n        # Given an existing user in database\n        userobj = UserObject.add_user('vicky')\n        self.assertIsNotNone(UserObject.get_user('vicky'))\n        # When deleting that user\n        userobj.delete()\n        # Then user it no longer in database\n        self.assertIsNone(UserObject.get_user('vicky'))\n        # Then listner was called\n        self.listener.user_deleted.assert_called_once_with('vicky')\n\n    def test_set_password_empty(self):\n        \"\"\"Expect error when trying to update password of invalid user.\"\"\"\n        userobj = UserObject.add_user('john')\n        with self.assertRaises(ValueError):\n            self.assertFalse(userobj.set_password(''))\n\n    def test_disk_quota(self):\n        \"\"\"\n        Just make a call to the function.\n        \"\"\"\n        userobj = UserObject.get_user(self.USERNAME)\n        userobj.disk_quota\n\n    def test_disk_usage(self):\n        \"\"\"\n        Just make a call to the function.\n        \"\"\"\n        userobj = UserObject.get_user(self.USERNAME)\n        disk_usage = userobj.disk_usage\n        self.assertIsInstance(disk_usage, int)\n\n    def test_add_authorizedkey_without_file(self):\n        \"\"\"\n        Add an ssh key for a user without an authorizedkey file.\n        \"\"\"\n        # Read the pub key\n        key = self._read_ssh_key()\n        # Add the key to the user\n        userobj = UserObject.get_user(self.USERNAME)\n        userobj.add_authorizedkey(key)\n\n        # validate\n        keys = list(userobj.authorizedkeys)\n        self.assertEqual(1, len(keys), \"expecting one key\")\n        self.assertEqual(\"3c:99:ed:a7:82:a8:71:09:2c:15:3d:78:4a:8c:11:99\", keys[0].fingerprint)\n\n    def test_add_authorizedkey_duplicate(self):\n        # Read the pub key\n        key = self._read_ssh_key()\n        # Add the key to the user\n        userobj = UserObject.get_user(self.USERNAME)\n        userobj.add_authorizedkey(key)\n        # Add the same key\n        with self.assertRaises(DuplicateSSHKeyError):\n            userobj.add_authorizedkey(key)\n\n    def test_add_authorizedkey_with_file(self):\n        \"\"\"\n        Add an ssh key for a user with an authorizedkey file.\n        \"\"\"\n        userobj = UserObject.get_user(self.USERNAME)\n\n        # Create empty authorized_keys file\n        os.mkdir(os.path.join(userobj.user_root, '.ssh'))\n        filename = os.path.join(userobj.user_root, '.ssh', 'authorized_keys')\n        open(filename, 'a').close()\n\n        # Read the pub key\n        key = self._read_ssh_key()\n        userobj.add_authorizedkey(key)\n\n        # Validate\n        with open(filename, 'r') as fh:\n            self.assertEqual(key, fh.read())\n\n    def test_delete_authorizedkey_without_file(self):\n        \"\"\"\n        Remove an ssh key for a user without authorizedkey file.\n        \"\"\"\n        # Update user with ssh keys.\n        data = self._read_authorized_keys()\n        userobj = UserObject.get_user(self.USERNAME)\n        for k in authorizedkeys.read(StringIO(data)):\n            try:\n                userobj.add_authorizedkey(k.getvalue())\n            except ValueError:\n                # Some ssh key in the testing file are not valid.\n                pass\n\n        # Get the keys\n        keys = list(userobj.authorizedkeys)\n        self.assertEqual(2, len(keys))\n\n        # Remove a key\n        userobj.delete_authorizedkey(\"9a:f1:69:3c:bc:5a:cd:02:5e:33:bc:cd:c0:01:eb:4c\")\n\n        # Validate\n        keys = list(userobj.authorizedkeys)\n        self.assertEqual(1, len(keys))\n\n    def test_delete_authorizedkey_with_file(self):\n        \"\"\"\n        Remove an ssh key for a user with authorizedkey file.\n        \"\"\"\n        # Create authorized_keys file\n        data = self._read_authorized_keys()\n        userobj = UserObject.get_user(self.USERNAME)\n        os.mkdir(os.path.join(userobj.user_root, '.ssh'))\n        filename = os.path.join(userobj.user_root, '.ssh', 'authorized_keys')\n        with open(filename, 'w') as f:\n            f.write(data)\n\n        # Get the keys\n        keys = list(userobj.authorizedkeys)\n        self.assertEqual(5, len(keys))\n\n        # Remove a key\n        userobj.delete_authorizedkey(\"9a:f1:69:3c:bc:5a:cd:02:5e:33:bc:cd:c0:01:eb:4c\")\n\n        # Validate\n        keys = list(userobj.authorizedkeys)\n        self.assertEqual(4, len(keys))\n\n    def test_repo_objs(self):\n        # Given a user with a list of repositories\n        userobj = UserObject.get_user(self.USERNAME)\n        repos = sorted(userobj.repo_objs, key=lambda r: r.name)\n        self.assertEqual(['broker-repo', 'testcases'], [r.name for r in repos])\n        # When deleting a repository empty list\n        repos[1].delete()\n        # Then the repository is removed from the list.\n        self.assertEqual(['broker-repo'], sorted([r.name for r in userobj.repo_objs]))\n\n    def test_refresh_repos_without_delete(self):\n        # Given a user with invalid repositories\n        userobj = UserObject.get_user(self.USERNAME)\n        RepoObject.query.delete()\n        RepoObject(userid=userobj.userid, repopath='invalid').add()\n        self.assertEqual(['invalid'], sorted([r.name for r in userobj.repo_objs]))\n        # When updating the repository list without deletion\n        userobj.refresh_repos()\n        # Then the list invlaid the invalid repo and new repos\n        self.assertEqual(['broker-repo', 'invalid', 'testcases'], sorted([r.name for r in userobj.repo_objs]))\n\n    def test_refresh_repos_with_delete(self):\n        # Given a user with invalid repositories\n        userobj = UserObject.get_user(self.USERNAME)\n        RepoObject.query.delete()\n        RepoObject(userid=userobj.userid, repopath='invalid').add()\n        self.assertEqual(['invalid'], sorted([r.name for r in userobj.repo_objs]))\n        # When updating the repository list without deletion\n        userobj.refresh_repos(delete=True)\n        # Then the list invlaid the invalid repo and new repos\n        userobj.expire()\n        self.assertEqual(['broker-repo', 'testcases'], sorted([r.name for r in userobj.repo_objs]))\n\n    def test_refresh_repos_with_single_repo(self):\n        # Given a user with invalid repositories\n        userobj = UserObject.get_user(self.USERNAME)\n        userobj.user_root = os.path.join(self.testcases, 'testcases')\n        # When updating the repository list without deletion\n        userobj.refresh_repos(delete=True)\n        # Then the list invlaid the invalid repo and new repos\n        userobj.expire()\n        self.assertEqual([''], sorted([r.name for r in userobj.repo_objs]))\n\n    def test_add_access_token(self):\n        # Given a user with an email\n        userobj = UserObject.get_user(self.USERNAME)\n        userobj.email = 'test@examples.com'\n        userobj.add()\n        # When adding a new token\n        token = userobj.add_access_token('test')\n        # Then a new token get created\n        self.assertTrue(token)\n        tokenobj = Token.query.filter(Token.userid == userobj.userid).first()\n        self.assertTrue(tokenobj)\n        self.assertEqual(None, tokenobj.expiration_time)\n        self.assertEqual(None, tokenobj.access_time)\n        # Then an email is sent to the user.\n        self.listener.access_token_added.assert_called_once_with(userobj, 'test')\n        self.listener.queue_mail.assert_called_once()\n\n    def test_add_access_token_duplicate_name(self):\n        # Given a user with an existing token\n        userobj = UserObject.get_user(self.USERNAME)\n        userobj.add_access_token('test')\n        self.assertEqual(1, Token.query.filter(Token.userid == userobj.userid).count())\n        # When adding a new token with the same name\n        with self.assertRaises(ValueError):\n            userobj.add_access_token('test')\n        # Then token is not created\n        self.assertEqual(1, Token.query.filter(Token.userid == userobj.userid).count())\n        # Then an email is not sent.\n        self.listener.access_token_added.assert_called_once_with(userobj, 'test')\n\n    def test_delete_access_token(self):\n        # Given a user with an existing token\n        userobj = UserObject.get_user(self.USERNAME)\n        userobj.add_access_token('test')\n        self.assertEqual(1, Token.query.filter(Token.userid == userobj.userid).count())\n        # When deleting an access token\n        userobj.delete_access_token('test')\n        # Then Token get deleted\n        self.assertEqual(0, Token.query.filter(Token.userid == userobj.userid).count())\n\n    def test_delete_access_token_invalid(self):\n        # Given a user with an existing token\n        userobj = UserObject.get_user(self.USERNAME)\n        userobj.add_access_token('test')\n        self.assertEqual(1, Token.query.filter(Token.userid == userobj.userid).count())\n        # When deleting an invalid access token\n        with self.assertRaises(ValueError):\n            userobj.delete_access_token('invalid')\n        # Then Token not deleted\n        self.assertEqual(1, Token.query.filter(Token.userid == userobj.userid).count())\n\n    def test_delete_user_remove_access_tokens(self):\n        # Given a user with an existing token\n        userobj = UserObject.add_user('testuser', 'password')\n        userobj.add_access_token('test')\n        self.assertEqual(1, Token.query.filter(Token.userid == userobj.userid).count())\n        # When deleting the user\n        userobj.delete()\n        # Then Token get deleted\n        self.assertEqual(0, Token.query.filter(Token.userid == userobj.userid).count())\n\n    def test_verify_access_token(self):\n        # Given a user with an existing token\n        userobj = UserObject.get_user(self.USERNAME)\n        token = userobj.add_access_token('test')\n        self.assertEqual(1, Token.query.filter(Token.userid == userobj.userid).count())\n        # When validating the token\n        # Then token is valid\n        self.assertTrue(userobj.validate_access_token(token))\n\n    def test_verify_access_token_with_expired(self):\n        # Given a user with an existing token\n        userobj = UserObject.get_user(self.USERNAME)\n        token = userobj.add_access_token(\n            'test', expiration_time=datetime.datetime.now() - datetime.timedelta(seconds=1)\n        )\n        self.assertEqual(1, Token.query.filter(Token.userid == userobj.userid).count())\n        # When validating the token\n        # Then token is invalid\n        self.assertFalse(userobj.validate_access_token(token))\n        # Then token get removed\n        self.assertEqual(0, Token.query.filter(Token.userid == userobj.userid).count())\n\n    def test_verify_access_token_with_invalid(self):\n        # Given a user with an existing token\n        userobj = UserObject.get_user(self.USERNAME)\n        userobj.add_access_token('test', expiration_time=datetime.datetime.now())\n        self.assertEqual(1, Token.query.filter(Token.userid == userobj.userid).count())\n        # When validating the token\n        # Then token is invalid\n        self.assertFalse(userobj.validate_access_token('invalid'))\n\n\nclass UserObjectWithAdminPassword(rdiffweb.test.WebCase):\n\n    # password: test\n    default_config = {'admin-password': '{SSHA}wbSK4hlEX7mtGJplFi2oN6ABm6Y3Bo1e'}\n\n    def setUp(self):\n        # Do nothing - We need to skip the default setup to avoid deleting the records.\n        pass\n\n    def test_create_admin_user(self):\n        # Given admin-password is configure\n        # When database get created\n        # Then admin user get created with 'test' password\n        userobj = UserObject.get_user(self.USERNAME)\n        self.assertIsNotNone(userobj)\n        self.assertEqual('{SSHA}wbSK4hlEX7mtGJplFi2oN6ABm6Y3Bo1e', userobj.hash_password)\n        self.assertTrue(check_password('test', userobj.hash_password))\n\n    def test_set_password(self):\n        # Given admin-password is configure\n        # When trying to update admin password\n        # Then an exception is raised\n        userobj = UserObject.get_user(self.USERNAME)\n        with self.assertRaises(ValueError):\n            userobj.set_password('newpassword')\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"\nPlugin used to send email to users when their repository is getting too old.\nUser can control the notification period.\n\"\"\"\n\nimport datetime\nimport logging\n\nimport cherrypy\nfrom cherrypy.process.plugins import SimplePlugin\n\nfrom rdiffweb.core import librdiff\nfrom rdiffweb.core.model import UserObject\nfrom rdiffweb.tools.i18n import ugettext as _\n\nlogger = logging.getLogger(__name__)\n\n\nclass NotificationPlugin(SimplePlugin):\n    \"\"\"\n    Send email notification when a repository get too old (without a backup).\n    \"\"\"\n\n    execution_time = '23:00'\n\n    send_changed = False\n\n    def start(self):\n        self.bus.log('Start Notification plugin')\n        self.bus.publish('schedule_job', self.execution_time, self.notification_job)\n        self.bus.subscribe('access_token_added', self.access_token_added)\n        self.bus.subscribe('user_attr_changed', self.user_attr_changed)\n        self.bus.subscribe('user_password_changed', self.user_password_changed)\n\n    def stop(self):\n        self.bus.log('Stop Notification plugin')\n        self.bus.publish('unschedule_job', self.notification_job)\n        self.bus.unsubscribe('access_token_added', self.access_token_added)\n        self.bus.unsubscribe('user_attr_changed', self.user_attr_changed)\n        self.bus.unsubscribe('user_password_changed', self.user_password_changed)\n\n    @property\n    def app(self):\n        return cherrypy.tree.apps['']\n\n    def access_token_added(self, userobj, name):\n        if not self.send_changed:\n            return\n\n        if not userobj.email:\n            logger.info(\"can't sent mail to user [%s] without an email\", userobj.username)\n            return\n\n        # Send a mail notification\n        body = self.app.templates.compile_template(\n            \"access_token_added.html\", **{\"header_name\": self.app.cfg.header_name, 'user': userobj, 'name': name}\n        )\n        self.bus.publish('queue_mail', to=userobj.email, subject=_(\"A new access token has been created\"), message=body)\n\n    def user_attr_changed(self, userobj, attrs={}):\n        if not self.send_changed:\n            return\n\n        # Leave if the mail was not changed.\n        if 'email' in attrs:\n            old_email = attrs['email'][0]\n            if not old_email:\n                logger.info(\"can't sent mail to user [%s] without an email\", userobj.username)\n                return\n            # If the email attributes was changed, send a mail notification.\n            subject = _(\"Email address changed\")\n            body = self.app.templates.compile_template(\n                \"email_changed.html\", **{\"header_name\": self.app.cfg.header_name, 'user': userobj}\n            )\n            self.bus.publish('queue_mail', to=old_email, subject=str(subject), message=body)\n\n        if 'mfa' in attrs:\n            if not userobj.email:\n                logger.info(\"can't sent mail to user [%s] without an email\", userobj.username)\n                return\n            subject = (\n                _(\"Two-Factor Authentication turned off\")\n                if userobj.mfa == UserObject.DISABLED_MFA\n                else _(\"Two-Factor Authentication turned on\")\n            )\n            body = self.app.templates.compile_template(\n                \"email_mfa.html\", **{\"header_name\": self.app.cfg.header_name, 'user': userobj}\n            )\n            self.bus.publish('queue_mail', to=userobj.email, subject=str(subject), message=body)\n\n    def user_password_changed(self, userobj):\n        if not self.send_changed:\n            return\n\n        if not userobj.email:\n            logger.info(\"can't sent mail to user [%s] without an email\", userobj.username)\n            return\n\n        # If the email attributes was changed, send a mail notification.\n        body = self.app.templates.compile_template(\n            \"password_changed.html\", **{\"header_name\": self.app.cfg.header_name, 'user': userobj}\n        )\n        self.bus.publish('queue_mail', to=userobj.email, subject=_(\"Password changed\"), message=body)\n\n    def notification_job(self):\n        \"\"\"\n        Loop trough all the user repository and send notifications.\n        \"\"\"\n\n        now = librdiff.RdiffTime()\n\n        def _user_repos():\n            \"\"\"Return a generator trought user repos to be notified.\"\"\"\n            for user in UserObject.query.all():\n                # Check if user has email.\n                if not user.email:\n                    continue\n                # Identify old repo for current user.\n                old_repos = []\n                for repo in user.repo_objs:\n                    # Check if repo has age configured (in days)\n                    maxage = repo.maxage\n                    if not maxage or maxage <= 0:\n                        continue\n                    # Check repo age.\n                    if repo.last_backup_date is None or repo.last_backup_date < (now - datetime.timedelta(days=maxage)):\n                        old_repos.append(repo)\n                # Return an item only if user had old repo\n                if old_repos:\n                    yield user, old_repos\n\n        # For each candidate, send mail.\n        for user, repos in _user_repos():\n            parms = {'user': user, 'repos': repos}\n            body = self.app.templates.compile_template(\"email_notification.html\", **parms)\n            cherrypy.engine.publish('queue_mail', to=user.email, subject=_(\"Notification\"), message=body)\n\n\ncherrypy.notification = NotificationPlugin(cherrypy.engine)\ncherrypy.notification.subscribe()\n\ncherrypy.config.namespaces['notification'] = lambda key, value: setattr(cherrypy.notification, key, value)\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\n\"\"\"\nCreated on Feb 13, 2016\n\n@author: Patrik Dufresne <patrik@ikus-soft.com>\n\"\"\"\nfrom unittest.mock import MagicMock\n\nimport cherrypy\n\nimport rdiffweb.core.notification\nimport rdiffweb.test\nfrom rdiffweb.core.model import RepoObject, UserObject\n\n\nclass NotificationJobTest(rdiffweb.test.WebCase):\n    def setUp(self):\n        self.listener = MagicMock()\n        cherrypy.engine.subscribe('queue_mail', self.listener.queue_email, priority=50)\n        return super().setUp()\n\n    def tearDown(self):\n        cherrypy.engine.unsubscribe('queue_mail', self.listener.queue_email)\n        return super().tearDown()\n\n    def test_notification_job(self):\n        \"\"\"\n        Run the notification and check if mails are sent\n        \"\"\"\n        # Given a user with an email address and a repository with a maxage\n        # Set user config\n        user = UserObject.get_user(self.USERNAME)\n        user.email = 'test@test.com'\n        user.add()\n        repo = RepoObject.query.filter(RepoObject.user == user, RepoObject.repopath == self.REPO).first()\n        repo.maxage = 1\n        repo.add()\n        # When running notification_job\n        cherrypy.notification.notification_job()\n\n        # Then an email is queue for this user\n        self.listener.queue_email.assert_called_once_with(\n            to='test@test.com',\n            subject='Notification',\n            message=\"<html>\\n  <head></head>\\n  <body>\\n    Hey admin,\\n    <p>\\n      You are receiving this email to notify you about your backups. The\\n      following repositories are inactive for some time. We invite you to have a look\\n      at your last backup schedule.\\n    </p>\\n    <ul>\\n      <li>testcases</li>\\n    </ul>\\n    <p>\\n      If you don't want to be notify about this. You need to review your\\n      user preferences.\\n    </p>\\n  </body>\\n</html>\",\n        )\n\n    def test_notification_job_undefined_last_backup_date(self):\n        # Given a valid user with a repository configured for notification\n        user = UserObject.get_user(self.USERNAME)\n        user.email = 'test@test.com'\n        user.add()\n        # Given a repo with last_backup_date None\n        repo = RepoObject.query.filter(RepoObject.user == user, RepoObject.repopath == 'broker-repo').first()\n        repo.maxage = 1\n        repo.add()\n        self.assertIsNone(repo.last_backup_date)\n\n        # When Notification job is running\n        cherrypy.notification.notification_job()\n\n        # Then a notification is sent to the user.\n        self.listener.queue_email.assert_called_once_with(\n            to='test@test.com',\n            subject='Notification',\n            message=\"<html>\\n  <head></head>\\n  <body>\\n    Hey admin,\\n    <p>\\n      You are receiving this email to notify you about your backups. The\\n      following repositories are inactive for some time. We invite you to have a look\\n      at your last backup schedule.\\n    </p>\\n    <ul>\\n      <li>broker-repo</li>\\n    </ul>\\n    <p>\\n      If you don't want to be notify about this. You need to review your\\n      user preferences.\\n    </p>\\n  </body>\\n</html>\",\n        )\n\n    def test_notification_job_without_notification(self):\n        # Given a valid user with a repository configured without notification (-1)\n        user = UserObject.get_user(self.USERNAME)\n        user.email = 'test@test.com'\n        user.add()\n        repo = RepoObject.query.filter(RepoObject.user == user, RepoObject.repopath == self.REPO).first()\n        repo.maxage = -1\n        repo.add()\n\n        # Call notification.\n        cherrypy.notification.notification_job()\n\n        # Expect it to be called.\n        self.listener.queue_email.assert_not_called()\n\n\nclass NotificationPluginTest(rdiffweb.test.WebCase):\n\n    default_config = {\n        'email-send-changed-notification': True,\n    }\n\n    def setUp(self):\n        self.listener = MagicMock()\n        cherrypy.engine.subscribe('queue_mail', self.listener.queue_email, priority=50)\n        return super().setUp()\n\n    def tearDown(self):\n        cherrypy.engine.unsubscribe('queue_mail', self.listener.queue_email)\n        return super().tearDown()\n\n    def test_email_changed(self):\n        # Given a user with an email address\n        user = UserObject.get_user(self.USERNAME)\n        user.email = 'original_email@test.com'\n        user.add()\n        self.listener.queue_email.reset_mock()\n\n        # When updating the user's email\n        user = UserObject.get_user(self.USERNAME)\n        user.email = 'email_changed@test.com'\n        user.add()\n\n        # Then a email is queue to notify the user.\n        self.listener.queue_email.assert_called_once_with(\n            to='original_email@test.com',\n            subject='Email address changed',\n            message='<html>\\n  <head></head>\\n  <body>\\n    Hey admin,\\n    <p>You recently changed the email address associated with your Rdiffweb account.</p>\\n    <p>\\n      If you did not make this change and believe your account has been compromised, please contact your administrator.\\n    </p>\\n  </body>\\n</html>',\n        )\n\n    def test_email_updated_with_same_value(self):\n        # Given a user with an email\n        user = UserObject.get_user(self.USERNAME)\n        user.email = 'email_changed@test.com'\n        self.listener.queue_email.reset_mock()\n\n        # When updating the user's email with the same value\n        user.email = 'email_changed@test.com'\n\n        # Then no email are sent to the user\n        self.listener.queue_email.assert_not_called()\n\n    def test_password_change_notification(self):\n        # Given a user with a email.\n        user = UserObject.get_user(self.USERNAME)\n        user.email = 'password_change@test.com'\n        self.listener.queue_email.reset_mock()\n\n        # When updating the user password\n        user.set_password('new_password')\n\n        # Then a email is send to the user\n        self.listener.queue_email.assert_called_once_with(\n            to='password_change@test.com',\n            subject='Password changed',\n            message='<html>\\n  <head></head>\\n  <body>\\n    Hey admin,\\n    <p>You recently changed the password associated with your Rdiffweb account.</p>\\n    <p>\\n      If you did not make this change and believe your account has been compromised, please contact your administrator.\\n    </p>\\n  </body>\\n</html>',\n        )\n\n    def test_password_change_with_same_value(self):\n        # Given a user with a email.\n        user = UserObject.get_user(self.USERNAME)\n        user.email = 'password_change@test.com'\n        user.set_password('new_password')\n        self.listener.queue_email.reset_mock()\n\n        # When updating the user password with the same value\n        user.set_password('new_password')\n\n        # Then an email is sent to the user\n        self.listener.queue_email.assert_called_once_with(\n            to='password_change@test.com',\n            subject='Password changed',\n            message='<html>\\n  <head></head>\\n  <body>\\n    Hey admin,\\n    <p>You recently changed the password associated with your Rdiffweb account.</p>\\n    <p>\\n      If you did not make this change and believe your account has been compromised, please contact your administrator.\\n    </p>\\n  </body>\\n</html>',\n        )\n", "<html>\n  <head></head>\n  <body>\n    {% trans username=(user.fullname or user.username) %}Hey {{ username }},{% endtrans %}\n    <p>\n      {% if user.mfa %}\n        {% trans %}Your {{ header_name }} Account is now protected with Two-Factor Authentication. When you sign in on a new or untrusted device, you'll need your second factor to verify your identity.{% endtrans %}\n      {% else %}\n        {% trans %}Your {{ header_name }} account is no longer protected with Two-Factor Authentication. You don't need your second factor to sign in.{% endtrans %}\n      {% endif %}\n    </p>\n    <p>\n      {% trans %}You received this email to let you know about important changes to your Google Account and services.{% endtrans %}\n    </p>\n  </body>\n</html>\n", "<html>\n  <head></head>\n  <body>\n    {% trans username=(user.fullname or user.username) %}Hey {{ username }},{% endtrans %}\n    <p>\n      {% trans %}To help us make sure it's really you, here's the verification code you'll need to log in:{% endtrans %}\n    </p>\n    <p>\n      <strong>{{ code }}</strong>\n    </p>\n    <p>\n      {% trans %}If this wasn't you logging in, and you use a password to log in, please reset your password.{% endtrans %}\n    </p>\n    <p>\n      {% trans %}This code will expire in 1 hour. Once the code expires, you will need to request a new verification code by going through the login procedure again.{% endtrans %}\n    </p>\n  </body>\n</html>\n", "# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n[tox]\nenvlist = py3,doc,flake8,black,isort,djlint,buster,bullseye,bookworm\n\n[testenv]\npassenv = RDIFFWEB_TEST_DATABASE_URI\ndeps=\n  pytest\n  coverage\n  pytest-cov\n  psycopg2-binary\n  #cherrypy<9 depends on nosetest\n  buster: nose\n  buster: apscheduler==3.5.3\n  buster: cherrypy==8.9.1\n  buster: configargparse==0.13.0\n  buster: distro==1.3.0\n  buster: humanfriendly==4.18\n  buster: Jinja2==2.10\n  buster: ldap3==2.4.1\n  buster: MarkupSafe==1.1.0\n  buster: psutil==5.7.2\n  buster: sqlalchemy==1.2.18\n  buster: WTForms==2.2.1\n  bullseye: apscheduler==3.7.0\n  bullseye: cherrypy==18.6.1\n  bullseye: configargparse==1.2.3\n  bullseye: distro==1.5.0\n  bullseye: humanfriendly==9.1\n  bullseye: Jinja2==2.11.3\n  bullseye: ldap3==2.8.1\n  bullseye: MarkupSafe==1.1.1\n  bullseye: psutil==5.8.0\n  bullseye: sqlalchemy==1.3.22\n  bullseye: WTForms==2.2.1\n  bookworm: apscheduler==3.9.1\n  bookworm: cherrypy==18.8.0\n  bookworm: configargparse==1.5.3\n  bookworm: distro==1.7.0\n  bookworm: humanfriendly==10.0\n  bookworm: Jinja2==3.0.3\n  bookworm: ldap3==2.9.1\n  bookworm: MarkupSafe==2.1.1\n  bookworm: psutil==5.9.0\n  bookworm: sqlalchemy==1.4.31\n  bookworm: WTForms==2.2.1\nextras = test\ncommands=\n  pytest -v --debug --override-ini junit_family=xunit1 --junit-xml=xunit-{envname}.xml --cov=rdiffweb --cov-report xml:coverage-{envname}.xml\n\n[testenv:doc]\ndeps =\n  sphinx\n  sphinx_md\n  recommonmark\n  sphinx-markdown-tables==0.0.3\ncommands = sphinx-build -W -b html -d {envtmpdir}/doctrees doc {envtmpdir}/html\n\n[testenv:black]\ndeps = black\ncommands = black --check --diff setup.py rdiffweb\nskip_install = true\n\n[testenv:djlint]\ndeps = djlint==1.19.2\nallowlist_externals = sh\ncommands = sh -c 'djlint --check rdiffweb/templates/*.html  rdiffweb/templates/**/*.html'\nskip_install = true\n\n[testenv:flake8]\ndeps =\n  flake8\ncommands = flake8 setup.py rdiffweb\nskip_install = true\n\n[testenv:isort]\ndeps = isort>=5.0.1\ncommands = isort --check --diff setup.py rdiffweb\nskip_install = true\n\n[flake8]\nignore =\n  E203 # whitespace before ':'\n  E501 # line too long (86 > 79 characters)\n  W503 # line break before binary operator\n  E741 # ambiguous variable name 'I'\nfilename =\n  *.py\n  setup.py\nmax-complexity = 20\n\n[isort]\nprofile = black\nline_length = 120"], "buggy_code_start_loc": [140, 108, 129, 18, 162, 27, 39, 81, 120, 6, 1, 80], "buggy_code_end_loc": [140, 115, 130, 103, 163, 462, 182, 94, 124, 16, 2, 81], "fixing_code_start_loc": [141, 108, 129, 18, 162, 27, 38, 81, 121, 6, 1, 80], "fixing_code_end_loc": [142, 115, 130, 108, 163, 440, 182, 106, 128, 14, 19, 81], "type": "NVD-CWE-Other", "message": "Business Logic Errors in GitHub repository ikus060/rdiffweb prior to 2.5.0a7.", "other": {"cve": {"id": "CVE-2022-3363", "sourceIdentifier": "security@huntr.dev", "published": "2022-10-26T21:15:10.537", "lastModified": "2022-11-01T14:12:05.687", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Business Logic Errors in GitHub repository ikus060/rdiffweb prior to 2.5.0a7."}, {"lang": "es", "value": "Unos Errores de L\u00f3gica de Negocio en el repositorio de GitHub ikus060/rdiffweb versiones anteriores a 2.5.0a7"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:P/AC:L/PR:H/UI:R/S:U/C:N/I:L/A:L", "attackVector": "PHYSICAL", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 2.8, "baseSeverity": "LOW"}, "exploitabilityScore": 0.2, "impactScore": 2.5}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-840"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ikus-soft:rdiffweb:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.5.0", "matchCriteriaId": "F257A723-7B4C-47E8-8E5E-16BB1A418F66"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ikus-soft:rdiffweb:2.5.0:alpha1:*:*:*:*:*:*", "matchCriteriaId": "E967F2E5-0F47-436B-9DC7-4F8D051F5615"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ikus-soft:rdiffweb:2.5.0:alpha2:*:*:*:*:*:*", "matchCriteriaId": "039D2014-4F4C-4B3F-81B1-EFA08EE3D513"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ikus-soft:rdiffweb:2.5.0:alpha3:*:*:*:*:*:*", "matchCriteriaId": "37EFE887-5C53-48EA-974C-25F36D6014EC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ikus-soft:rdiffweb:2.5.0:alpha4:*:*:*:*:*:*", "matchCriteriaId": "7DA70603-82D5-4EAF-BF6B-A2FF2549D592"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ikus-soft:rdiffweb:2.5.0:alpha5:*:*:*:*:*:*", "matchCriteriaId": "BFC076DD-CBC9-4493-A996-807F97C6D56A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ikus-soft:rdiffweb:2.5.0:alpha6:*:*:*:*:*:*", "matchCriteriaId": "DB2967A3-17F1-4AFD-A6B4-4969C52541DD"}]}]}], "references": [{"url": "https://github.com/ikus060/rdiffweb/commit/c27c46bac656b1da74f28eac1b52dfa5df76e6f2", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/b8a40ba6-2452-4abe-a80a-2d065ee8891e", "source": "security@huntr.dev", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ikus060/rdiffweb/commit/c27c46bac656b1da74f28eac1b52dfa5df76e6f2"}}