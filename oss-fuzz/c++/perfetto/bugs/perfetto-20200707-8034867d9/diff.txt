diff --git a/src/trace_processor/importers/common/clock_tracker.cc b/src/trace_processor/importers/common/clock_tracker.cc
index af809dbb1..1de0a5ef8 100644
--- a/src/trace_processor/importers/common/clock_tracker.cc
+++ b/src/trace_processor/importers/common/clock_tracker.cc
@@ -252,11 +252,18 @@ base::Optional<int64_t> ClockTracker::ConvertSlowpath(ClockId src_clock_id,
     // And use that to retrieve the corresponding time in the next clock domain.
     // The snapshot id must exist in the target clock domain. If it doesn't
     // either the hash logic or the pathfinding logic are bugged.
+    // This can also happen if the sanity checks in AddSnapshot fail and we
+    // skip part of the snapshot.
     const ClockSnapshots& next_snap = next_clock->GetSnapshot(hash);
+
+    // Using std::lower_bound because snapshot_ids is sorted, so we can do
+    // a binary search. std::find would do a linear scan.
     auto next_it = std::lower_bound(next_snap.snapshot_ids.begin(),
                                     next_snap.snapshot_ids.end(), snapshot_id);
-    PERFETTO_DCHECK(next_it != next_snap.snapshot_ids.end() &&
-                    *next_it == snapshot_id);
+    if (next_it == next_snap.snapshot_ids.end() || *next_it != snapshot_id) {
+      PERFETTO_DFATAL("Snapshot does not exist in clock domain.");
+      continue;
+    }
     size_t next_index = static_cast<size_t>(
         std::distance(next_snap.snapshot_ids.begin(), next_it));
     PERFETTO_DCHECK(next_index < next_snap.snapshot_ids.size());
