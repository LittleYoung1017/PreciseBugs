diff --git a/ogr/ogrsf_frmts/ods/ogr_ods.h b/ogr/ogrsf_frmts/ods/ogr_ods.h
index 528b86962c..d915cb1259 100644
--- a/ogr/ogrsf_frmts/ods/ogr_ods.h
+++ b/ogr/ogrsf_frmts/ods/ogr_ods.h
@@ -156,6 +156,8 @@ class OGRODSDataSource final: public GDALDataset
     int                 nRowsRepeated;
     int                 nCurCol;
     int                 nCellsRepeated;
+    // Accumulated memory allocations related to repeated cells.
+    size_t              m_nAccRepeatedMemory = 0;
     bool                bEndTableParsing;
 
     OGRODSLayer        *poCurLayer;
diff --git a/ogr/ogrsf_frmts/ods/ogrodsdatasource.cpp b/ogr/ogrsf_frmts/ods/ogrodsdatasource.cpp
index d9bf2ed5e7..c010136c22 100644
--- a/ogr/ogrsf_frmts/ods/ogrodsdatasource.cpp
+++ b/ogr/ogrsf_frmts/ods/ogrodsdatasource.cpp
@@ -850,8 +850,9 @@ void OGRODSDataSource::FillRepeatedCells(bool wasLastCell)
         return;
     }
 
+    // Use 16 as minimum cost for each allocation.
     const size_t nCellMemSize =
-        (!osValue.empty()) ? osValue.size() : osFormula.size();
+        std::max<size_t>(16, (!osValue.empty()) ? osValue.size() : osFormula.size());
     if( nCellMemSize > static_cast<size_t>(10 * 1024 * 1024) /
             (std::max(nCellsRepeated, 1) * nRowsRepeated) )
     {
@@ -861,6 +862,20 @@ void OGRODSDataSource::FillRepeatedCells(bool wasLastCell)
         nCellsRepeated = 0;
         return;
     }
+
+    m_nAccRepeatedMemory +=
+        nCellMemSize * std::max(nCellsRepeated, 1) * nRowsRepeated;
+    if( m_nAccRepeatedMemory > static_cast<size_t>(10 * 1024 * 1024) )
+    {
+        CPLError(CE_Failure, CPLE_NotSupported,
+                 "Too much accumulated memory for row/cell repetition. "
+                 "Parsing stopped");
+        bEndTableParsing = true;
+        nCellsRepeated = 0;
+        bStopParsing = true;
+        return;
+    }
+
     for(int i = 0; i < nCellsRepeated; i++)
     {
         if( !osValue.empty() )
