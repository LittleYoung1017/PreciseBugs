diff --git a/gn/sksl_tests.gni b/gn/sksl_tests.gni
index 8c39dd0748..61c2213701 100644
--- a/gn/sksl_tests.gni
+++ b/gn/sksl_tests.gni
@@ -156,6 +156,7 @@ sksl_error_tests = [
   "/sksl/errors/Ossfuzz44559.sksl",
   "/sksl/errors/Ossfuzz44561.sksl",
   "/sksl/errors/Ossfuzz44565.sksl",
+  "/sksl/errors/Ossfuzz47935.sksl",
   "/sksl/errors/OverflowFloatLiteral.rts",
   "/sksl/errors/OverflowInlinedLiteral.sksl",
   "/sksl/errors/OverflowInt64Literal.rts",
diff --git a/resources/sksl/errors/Ossfuzz47935.sksl b/resources/sksl/errors/Ossfuzz47935.sksl
new file mode 100644
index 0000000000..dc2ddc3e78
--- /dev/null
+++ b/resources/sksl/errors/Ossfuzz47935.sksl
@@ -0,0 +1,6 @@
+void j = half[4](float[4](5,2,3,1));
+
+/*%%*
+variables of type 'void' are not allowed
+expected 'void', but found 'half[4]'
+*%%*/
diff --git a/src/sksl/ir/SkSLConstructorArrayCast.cpp b/src/sksl/ir/SkSLConstructorArrayCast.cpp
index 59f5336c03..4824670b3e 100644
--- a/src/sksl/ir/SkSLConstructorArrayCast.cpp
+++ b/src/sksl/ir/SkSLConstructorArrayCast.cpp
@@ -19,6 +19,7 @@
 namespace SkSL {
 
 static std::unique_ptr<Expression> cast_constant_array(const Context& context,
+                                                       Position pos,
                                                        const Type& destType,
                                                        std::unique_ptr<Expression> constCtor) {
     const Type& scalarType = destType.componentType();
@@ -28,17 +29,17 @@ static std::unique_ptr<Expression> cast_constant_array(const Context& context,
     ExpressionArray typecastArgs;
     typecastArgs.reserve_back(inputArgs.size());
     for (std::unique_ptr<Expression>& arg : inputArgs) {
-        Position pos = arg->fPosition;
+        Position argPos = arg->fPosition;
         if (arg->type().isScalar()) {
-            typecastArgs.push_back(ConstructorScalarCast::Make(context, pos, scalarType,
+            typecastArgs.push_back(ConstructorScalarCast::Make(context, argPos, scalarType,
                                                                std::move(arg)));
         } else {
-            typecastArgs.push_back(ConstructorCompoundCast::Make(context, pos, scalarType,
+            typecastArgs.push_back(ConstructorCompoundCast::Make(context, argPos, scalarType,
                                                                  std::move(arg)));
         }
     }
 
-    return ConstructorArray::Make(context, constCtor->fPosition, destType, std::move(typecastArgs));
+    return ConstructorArray::Make(context, pos, destType, std::move(typecastArgs));
 }
 
 std::unique_ptr<Expression> ConstructorArrayCast::Make(const Context& context,
@@ -53,6 +54,7 @@ std::unique_ptr<Expression> ConstructorArrayCast::Make(const Context& context,
 
     // If this is a no-op cast, return the expression as-is.
     if (type.matches(arg->type())) {
+        arg->fPosition = pos;
         return arg;
     }
 
@@ -62,7 +64,7 @@ std::unique_ptr<Expression> ConstructorArrayCast::Make(const Context& context,
 
     // We can cast a vector of compile-time constants at compile-time.
     if (arg->isCompileTimeConstant()) {
-        return cast_constant_array(context, type, std::move(arg));
+        return cast_constant_array(context, pos, type, std::move(arg));
     }
     return std::make_unique<ConstructorArrayCast>(pos, type, std::move(arg));
 }
diff --git a/tests/sksl/errors/Ossfuzz47935.glsl b/tests/sksl/errors/Ossfuzz47935.glsl
new file mode 100644
index 0000000000..7be8dd0ba5
--- /dev/null
+++ b/tests/sksl/errors/Ossfuzz47935.glsl
@@ -0,0 +1,9 @@
+### Compilation failed:
+
+error: 1: variables of type 'void' are not allowed
+void j = half[4](float[4](5,2,3,1));
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+error: 1: expected 'void', but found 'half[4]'
+void j = half[4](float[4](5,2,3,1));
+         ^^^^^^^^^^^^^^^^^^^^^^^^^^
+2 errors
