diff --git a/autotest/gcore/vsifile.py b/autotest/gcore/vsifile.py
index 13ff94c71d..38482eef9f 100755
--- a/autotest/gcore/vsifile.py
+++ b/autotest/gcore/vsifile.py
@@ -881,3 +881,16 @@ def test_vsifile_rmdirrecursive():
     open('tmp/rmdirrecursive/subdir/bar.bin', 'wb').close()
     assert gdal.RmdirRecursive('tmp/rmdirrecursive') == 0
     assert not os.path.exists('tmp/rmdirrecursive')
+
+###############################################################################
+
+def test_vsifile_vsizip_error():
+
+    for i in range(128):
+        filename = '/vsimem/tmp||maxlength=%d.zip' % i
+        with gdaltest.error_handler():
+            f = gdal.VSIFOpenL('/vsizip/%s/out.bin' % filename, 'wb')
+            if f is not None:
+                assert gdal.VSIFCloseL(f) < 0
+        gdal.Unlink(filename)
+
diff --git a/gdal/port/cpl_vsil_gzip.cpp b/gdal/port/cpl_vsil_gzip.cpp
index 638cc4482b..66309fd877 100644
--- a/gdal/port/cpl_vsil_gzip.cpp
+++ b/gdal/port/cpl_vsil_gzip.cpp
@@ -1919,24 +1919,30 @@ int VSIGZipWriteHandle::Close()
         const size_t nOutBytes =
             static_cast<uInt>(Z_BUFSIZE) - sStream.avail_out;
 
-        if( m_poBaseHandle->Write( pabyOutBuf, 1, nOutBytes ) < nOutBytes )
-            return EOF;
-
         deflateEnd( &sStream );
 
-        if( nDeflateType == CPL_DEFLATE_TYPE_GZIP )
+        if( m_poBaseHandle->Write( pabyOutBuf, 1, nOutBytes ) < nOutBytes )
+        {
+            nRet = -1;
+        }
+
+        if( nRet == 0 && nDeflateType == CPL_DEFLATE_TYPE_GZIP )
         {
             const GUInt32 anTrailer[2] = {
                 CPL_LSBWORD32(static_cast<GUInt32>(nCRC)),
                 CPL_LSBWORD32(static_cast<GUInt32>(nCurOffset))
             };
 
-            m_poBaseHandle->Write( anTrailer, 1, 8 );
+            if( m_poBaseHandle->Write( anTrailer, 1, 8 ) < 8 )
+            {
+                nRet = -1;
+            }
         }
 
         if( bAutoCloseBaseHandle )
         {
-            nRet = m_poBaseHandle->Close();
+            if( nRet == 0 )
+                nRet = m_poBaseHandle->Close();
 
             delete m_poBaseHandle;
         }
@@ -3068,8 +3074,8 @@ VSIZipFilesystemHandler::OpenForWrite_unlocked( const char *pszFilename,
         if( hZIP == nullptr )
             return nullptr;
 
-        oMapZipWriteHandles[osZipFilename] =
-            new VSIZipWriteHandle(this, hZIP, nullptr);
+        auto poHandle = new VSIZipWriteHandle(this, hZIP, nullptr);
+        oMapZipWriteHandles[osZipFilename] = poHandle;
 
         if( !osZipInFileName.empty() )
         {
@@ -3077,7 +3083,8 @@ VSIZipFilesystemHandler::OpenForWrite_unlocked( const char *pszFilename,
                 OpenForWrite_unlocked(pszFilename, pszAccess));
             if( poRes == nullptr )
             {
-                delete oMapZipWriteHandles[osZipFilename];
+                delete poHandle;
+                oMapZipWriteHandles.erase(osZipFilename);
                 return nullptr;
             }
 
@@ -3086,7 +3093,7 @@ VSIZipFilesystemHandler::OpenForWrite_unlocked( const char *pszFilename,
             return poRes;
         }
 
-        return oMapZipWriteHandles[osZipFilename];
+        return poHandle;
     }
 }
 
@@ -3229,28 +3236,35 @@ int VSIZipWriteHandle::Flush()
 
 int VSIZipWriteHandle::Close()
 {
+    int nRet = 0;
     if( m_poParent )
     {
         CPLCloseFileInZip(m_poParent->m_hZIP);
         m_poParent->poChildInWriting = nullptr;
         if( bAutoDeleteParent )
+        {
+            if( m_poParent->Close() != 0 )
+                nRet = -1;
             delete m_poParent;
+        }
         m_poParent = nullptr;
     }
     if( poChildInWriting )
     {
-        poChildInWriting->Close();
+        if( poChildInWriting->Close() != 0 )
+            nRet = -1;
         poChildInWriting = nullptr;
     }
     if( m_hZIP )
     {
-        CPLCloseZip(m_hZIP);
+        if( CPLCloseZip(m_hZIP) != CE_None )
+            nRet = -1;
         m_hZIP = nullptr;
 
         m_poFS->RemoveFromMap(this);
     }
 
-    return 0;
+    return nRet;
 }
 
 /************************************************************************/
