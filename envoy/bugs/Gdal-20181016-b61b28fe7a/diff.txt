diff --git a/api/envoy/api/v2/core/health_check.proto b/api/envoy/api/v2/core/health_check.proto
index 17400bab70..0810b22fe0 100644
--- a/api/envoy/api/v2/core/health_check.proto
+++ b/api/envoy/api/v2/core/health_check.proto
@@ -39,11 +39,11 @@ message HealthCheck {
   ];
 
   // An optional jitter amount in millseconds. If specified, during every
-  // interval Envoy will add 0 to interval_jitter to the wait time.
+  // interval Envoy will add interval_jitter to the wait time.
   google.protobuf.Duration interval_jitter = 3;
 
   // An optional jitter amount as a percentage of interval_ms. If specified,
-  // during every interval Envoy will add 0 to interval_ms *
+  // during every interval Envoy will add interval_ms *
   // interval_jitter_percent / 100 to the wait time.
   //
   // If interval_jitter_ms and interval_jitter_percent are both set, both of
@@ -185,14 +185,14 @@ message HealthCheck {
   // any other.
   //
   // The default value for "no traffic interval" is 60 seconds.
-  google.protobuf.Duration no_traffic_interval = 12;
+  google.protobuf.Duration no_traffic_interval = 12 [(validate.rules).duration.gt = {}];
 
   // The "unhealthy interval" is a health check interval that is used for hosts that are marked as
   // unhealthy. As soon as the host is marked as healthy, Envoy will shift back to using the
   // standard health check interval that is defined.
   //
   // The default value for "unhealthy interval" is the same as "interval".
-  google.protobuf.Duration unhealthy_interval = 14;
+  google.protobuf.Duration unhealthy_interval = 14 [(validate.rules).duration.gt = {}];
 
   // The "unhealthy edge interval" is a special health check interval that is used for the first
   // health check right after a host is marked as unhealthy. For subsequent health checks
@@ -200,14 +200,14 @@ message HealthCheck {
   // check interval that is defined.
   //
   // The default value for "unhealthy edge interval" is the same as "unhealthy interval".
-  google.protobuf.Duration unhealthy_edge_interval = 15;
+  google.protobuf.Duration unhealthy_edge_interval = 15 [(validate.rules).duration.gt = {}];
 
   // The "healthy edge interval" is a special health check interval that is used for the first
   // health check right after a host is marked as healthy. For subsequent health checks
   // Envoy will shift back to using the standard health check interval that is defined.
   //
   // The default value for "healthy edge interval" is the same as the default interval.
-  google.protobuf.Duration healthy_edge_interval = 16;
+  google.protobuf.Duration healthy_edge_interval = 16 [(validate.rules).duration.gt = {}];
 
   // Specifies the path to the :ref:`health check event log <arch_overview_health_check_logging>`.
   // If empty, no event log will be written.
diff --git a/docs/root/configuration/cluster_manager/cluster_runtime.rst b/docs/root/configuration/cluster_manager/cluster_runtime.rst
index 59df338f57..2ac83ab011 100644
--- a/docs/root/configuration/cluster_manager/cluster_runtime.rst
+++ b/docs/root/configuration/cluster_manager/cluster_runtime.rst
@@ -10,13 +10,13 @@ Active health checking
 
 health_check.min_interval
   Min value for the health checking :ref:`interval <envoy_api_field_core.HealthCheck.interval>`.
-  Default value is 0. The health checking interval will be between *min_interval* and
-  *max_interval*.
+  Default value is 1 ms. The effective health check interval will be no less than 1ms. The health
+  checking interval will be between *min_interval* and *max_interval*.
 
 health_check.max_interval
   Max value for the health checking :ref:`interval <envoy_api_field_core.HealthCheck.interval>`.
-  Default value is MAX_INT. The health checking interval will be between *min_interval* and
-  *max_interval*.
+  Default value is MAX_INT. The effective health check interval will be no less than 1ms. The health
+  checking interval will be between *min_interval* and *max_interval*.
 
 health_check.verify_cluster
   What % of health check requests will be verified against the :ref:`expected upstream service
diff --git a/source/common/upstream/health_checker_base_impl.cc b/source/common/upstream/health_checker_base_impl.cc
index 4d8971c0b1..63f5dc6118 100644
--- a/source/common/upstream/health_checker_base_impl.cc
+++ b/source/common/upstream/health_checker_base_impl.cc
@@ -87,20 +87,22 @@ std::chrono::milliseconds HealthCheckerImplBase::interval(HealthState state,
     base_time_ms = no_traffic_interval_.count();
   }
 
-  if (interval_jitter_percent_ > 0) {
-    base_time_ms += random_.random() % (interval_jitter_percent_ * base_time_ms / 100);
+  const uint64_t jitter_percent_mod = interval_jitter_percent_ * base_time_ms / 100;
+  if (jitter_percent_mod > 0) {
+    base_time_ms += random_.random() % jitter_percent_mod;
   }
 
   if (interval_jitter_.count() > 0) {
     base_time_ms += (random_.random() % interval_jitter_.count());
   }
 
-  uint64_t min_interval = runtime_.snapshot().getInteger("health_check.min_interval", 0);
-  uint64_t max_interval = runtime_.snapshot().getInteger("health_check.max_interval",
-                                                         std::numeric_limits<uint64_t>::max());
+  const uint64_t min_interval = runtime_.snapshot().getInteger("health_check.min_interval", 0);
+  const uint64_t max_interval = runtime_.snapshot().getInteger(
+      "health_check.max_interval", std::numeric_limits<uint64_t>::max());
 
   uint64_t final_ms = std::min(base_time_ms, max_interval);
-  final_ms = std::max(final_ms, min_interval);
+  // We force a non-zero final MS, to prevent live lock.
+  final_ms = std::max(uint64_t(1), std::max(final_ms, min_interval));
   return std::chrono::milliseconds(final_ms);
 }
 
diff --git a/test/common/upstream/health_checker_impl_test.cc b/test/common/upstream/health_checker_impl_test.cc
index 0e1fbd9da7..a946290b51 100644
--- a/test/common/upstream/health_checker_impl_test.cc
+++ b/test/common/upstream/health_checker_impl_test.cc
@@ -3,6 +3,8 @@
 #include <string>
 #include <vector>
 
+#include "envoy/api/v2/core/health_check.pb.validate.h"
+
 #include "common/buffer/buffer_impl.h"
 #include "common/buffer/zero_copy_input_stream_impl.h"
 #include "common/config/cds_json.h"
@@ -673,6 +675,58 @@ TEST_F(HttpHealthCheckerImplTest, SuccessWithMultipleHostSets) {
   EXPECT_TRUE(cluster_->prioritySet().getMockHostSet(1)->hosts_[0]->healthy());
 }
 
+// Validate that runtime settings can't force a zero lengthy retry duration (and hence livelock).
+TEST_F(HttpHealthCheckerImplTest, ZeroRetryInterval) {
+  const std::string host = "fake_cluster";
+  const std::string path = "/healthcheck";
+  const std::string yaml = R"EOF(
+    timeout: 1s
+    interval: 1s
+    no_traffic_interval: 1s
+    interval_jitter_percent: 40
+    unhealthy_threshold: 2
+    healthy_threshold: 2
+    http_health_check:
+      service_name: locations
+      path: /healthcheck
+    )EOF";
+
+  health_checker_.reset(new TestHttpHealthCheckerImpl(*cluster_, parseHealthCheckFromV2Yaml(yaml),
+                                                      dispatcher_, runtime_, random_,
+                                                      HealthCheckEventLoggerPtr(event_logger_)));
+  health_checker_->addHostCheckCompleteCb(
+      [this](HostSharedPtr host, HealthTransition changed_state) -> void {
+        onHostStatus(host, changed_state);
+      });
+
+  EXPECT_CALL(runtime_.snapshot_, featureEnabled("health_check.verify_cluster", 100))
+      .WillOnce(Return(true));
+
+  EXPECT_CALL(*this, onHostStatus(_, HealthTransition::Unchanged)).Times(1);
+
+  cluster_->prioritySet().getMockHostSet(0)->hosts_ = {
+      makeTestHost(cluster_->info_, "tcp://127.0.0.1:80")};
+  cluster_->info_->stats().upstream_cx_total_.inc();
+  expectSessionCreate();
+  expectStreamCreate(0);
+  EXPECT_CALL(*test_sessions_[0]->timeout_timer_, enableTimer(_));
+  EXPECT_CALL(test_sessions_[0]->request_encoder_, encodeHeaders(_, true))
+      .WillOnce(Invoke([&](const Http::HeaderMap& headers, bool) {
+        EXPECT_EQ(headers.Host()->value().c_str(), host);
+        EXPECT_EQ(headers.Path()->value().c_str(), path);
+        EXPECT_EQ(headers.Scheme()->value().c_str(), Http::Headers::get().SchemeValues.Http);
+      }));
+  health_checker_->start();
+
+  EXPECT_CALL(runtime_.snapshot_, getInteger("health_check.max_interval", _)).WillOnce(Return(0));
+  EXPECT_CALL(runtime_.snapshot_, getInteger("health_check.min_interval", _)).WillOnce(Return(0));
+  EXPECT_CALL(*test_sessions_[0]->interval_timer_, enableTimer(std::chrono::milliseconds(1)));
+  EXPECT_CALL(*test_sessions_[0]->timeout_timer_, disableTimer());
+  absl::optional<std::string> health_checked_cluster("locations-production-iad");
+  respond(0, "200", false, true, false, health_checked_cluster);
+  EXPECT_TRUE(cluster_->prioritySet().getMockHostSet(0)->hosts_[0]->healthy());
+}
+
 TEST_F(HttpHealthCheckerImplTest, SuccessServiceCheck) {
   const std::string host = "fake_cluster";
   const std::string path = "/healthcheck";
@@ -3311,6 +3365,58 @@ TEST(HealthCheckEventLoggerImplTest, All) {
   event_logger.logAddHealthy(envoy::data::core::v2alpha::HealthCheckerType::HTTP, host, false);
 }
 
+// Validate that the proto constraints don't allow zero length edge durations.
+TEST(HealthCheckProto, Validation) {
+  {
+    const std::string yaml = R"EOF(
+    timeout: 1s
+    interval: 1s
+    no_traffic_interval: 0s
+    http_health_check:
+      service_name: locations
+      path: /healthcheck
+    )EOF";
+    EXPECT_THROW_WITH_REGEX(MessageUtil::validate(parseHealthCheckFromV2Yaml(yaml)), EnvoyException,
+                            "Proto constraint validation failed.*value must be greater than.*");
+  }
+  {
+    const std::string yaml = R"EOF(
+    timeout: 1s
+    interval: 1s
+    unhealthy_interval: 0s
+    http_health_check:
+      service_name: locations
+      path: /healthcheck
+    )EOF";
+    EXPECT_THROW_WITH_REGEX(MessageUtil::validate(parseHealthCheckFromV2Yaml(yaml)), EnvoyException,
+                            "Proto constraint validation failed.*value must be greater than.*");
+  }
+  {
+    const std::string yaml = R"EOF(
+    timeout: 1s
+    interval: 1s
+    unhealthy_edge_interval: 0s
+    http_health_check:
+      service_name: locations
+      path: /healthcheck
+    )EOF";
+    EXPECT_THROW_WITH_REGEX(MessageUtil::validate(parseHealthCheckFromV2Yaml(yaml)), EnvoyException,
+                            "Proto constraint validation failed.*value must be greater than.*");
+  }
+  {
+    const std::string yaml = R"EOF(
+    timeout: 1s
+    interval: 1s
+    healthy_edge_interval: 0s
+    http_health_check:
+      service_name: locations
+      path: /healthcheck
+    )EOF";
+    EXPECT_THROW_WITH_REGEX(MessageUtil::validate(parseHealthCheckFromV2Yaml(yaml)), EnvoyException,
+                            "Proto constraint validation failed.*value must be greater than.*");
+  }
+}
+
 } // namespace
 } // namespace Upstream
 } // namespace Envoy
diff --git a/test/server/server_corpus/clusterfuzz-testcase-minimized-server_fuzz_test-5724853840117760 b/test/server/server_corpus/clusterfuzz-testcase-minimized-server_fuzz_test-5724853840117760
new file mode 100644
index 0000000000..14047b7571
--- /dev/null
+++ b/test/server/server_corpus/clusterfuzz-testcase-minimized-server_fuzz_test-5724853840117760
@@ -0,0 +1 @@
+static_resources {   clusters {     name: " "     connect_timeout {       nanos: 9     }     hosts {       pipe {       }     }     health_checks {       timeout {         nanos: 9       }       interval {         nanos: 9       }       unhealthy_threshold {       }       healthy_threshold {       }       grpc_health_check {       }       no_traffic_interval {       }       interval_jitter_percent: 4     }     http2_protocol_options {     }   } }
diff --git a/test/server/server_fuzz_test.cc b/test/server/server_fuzz_test.cc
index 88061a264b..7b6879d8d2 100644
--- a/test/server/server_fuzz_test.cc
+++ b/test/server/server_fuzz_test.cc
@@ -62,7 +62,7 @@ DEFINE_PROTO_FUZZER(const envoy::config::bootstrap::v2::Bootstrap& input) {
   DangerousDeprecatedTestTime test_time;
   Fuzz::PerTestEnvironment test_env;
 
-  RELEASE_ASSERT(Envoy::Server::validateProtoDescriptors(), "");
+  RELEASE_ASSERT(validateProtoDescriptors(), "");
 
   {
     const std::string bootstrap_path = test_env.temporaryPath("bootstrap.pb_text");
