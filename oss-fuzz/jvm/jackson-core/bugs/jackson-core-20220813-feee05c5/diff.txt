diff --git a/src/main/java/com/fasterxml/jackson/core/json/UTF8DataInputJsonParser.java b/src/main/java/com/fasterxml/jackson/core/json/UTF8DataInputJsonParser.java
index 85313ec5..b05962e5 100644
--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8DataInputJsonParser.java
+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8DataInputJsonParser.java
@@ -1136,6 +1136,10 @@ public class UTF8DataInputJsonParser
         // With this, we have a nice and tight loop:
         while (c <= INT_9 && c >= INT_0) {
             ++intLen;
+            if (outPtr >= outBuf.length) {
+                outBuf = _textBuffer.finishCurrentSegment();
+                outPtr = 0;
+            }
             outBuf[outPtr++] = (char) c;
             c = _inputData.readUnsignedByte();
         }
diff --git a/src/test/java/com/fasterxml/jackson/core/read/NumberParsingTest.java b/src/test/java/com/fasterxml/jackson/core/read/NumberParsingTest.java
index e3012044..912720ef 100644
--- a/src/test/java/com/fasterxml/jackson/core/read/NumberParsingTest.java
+++ b/src/test/java/com/fasterxml/jackson/core/read/NumberParsingTest.java
@@ -210,6 +210,30 @@ public class NumberParsingTest
         assertEquals(Integer.MAX_VALUE+1, NumberInput.parseLong(""+(Integer.MAX_VALUE+1)));
     }
 
+    // Found by oss-fuzzer
+    public void testVeryLongIntRootValue() throws Exception
+    {
+        // For some reason running multiple will tend to hide the issue;
+        // possibly due to re-use of some buffers
+        _testVeryLongIntRootValue(newStreamFactory(), MODE_DATA_INPUT);
+    }
+
+    private void _testVeryLongIntRootValue(JsonFactory jsonF, int mode) throws Exception
+    {
+        StringBuilder sb = new StringBuilder(250);
+        sb.append("-2");
+        for (int i = 0; i < 220; ++i) {
+            sb.append('0');
+        }
+        sb.append(' '); // mostly important for DataInput
+        String DOC = sb.toString();
+
+        try (JsonParser p = createParser(jsonF, mode, DOC)) {
+            assertToken(p.nextToken(), JsonToken.VALUE_NUMBER_INT);
+            assertNotNull(p.getBigIntegerValue());
+        }
+    }
+
     /*
     /**********************************************************************
     /* Tests, Long
