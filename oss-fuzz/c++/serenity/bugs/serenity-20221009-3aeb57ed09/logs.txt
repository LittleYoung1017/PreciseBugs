commit 3aeb57ed095d6174f1561a82afa8164923e2849dAuthor: Ben Wiederhake <BenWiederhake.GitHub@gmx.de>Date:   Mon Sep 12 16:31:16 2022 +0200    AK+Everywhere: Fix data corruption due to code-point-to-char conversion        In particular, StringView::contains(char) is often used with a u32    code point. When this is done, the compiler will for some reason allow    data corruption to occur silently.        In fact, this is one of two reasons for the following OSS Fuzz issue:    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=49184    This is probably a very old bug.        In the particular case of URLParser, AK::is_url_code_point got confused:        return /* ... */ || "!$&'()*+,-./:;=?@_~"sv.contains(code_point);    If code_point is a large code point that happens to have the correct    lower bytes, AK::is_url_code_point is then convinced that the given    code point is okay, even if it is actually problematic.        This commit fixes *only* the silent data corruption due to the erroneous    conversion, and does not fully resolve OSS-Fuzz#49184.
