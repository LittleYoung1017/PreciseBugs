diff --git a/gn/sksl_tests.gni b/gn/sksl_tests.gni
index 7ecba3f169..6e8b6a39c3 100644
--- a/gn/sksl_tests.gni
+++ b/gn/sksl_tests.gni
@@ -332,6 +332,7 @@ sksl_shared_tests = [
   "$_tests/sksl/shared/Ossfuzz26167.sksl",
   "$_tests/sksl/shared/Ossfuzz27614.sksl",
   "$_tests/sksl/shared/Ossfuzz28050.sksl",
+  "$_tests/sksl/shared/Ossfuzz28794.sksl",
   "$_tests/sksl/shared/OutParams.sksl",
   "$_tests/sksl/shared/OutParamsTricky.sksl",
   "$_tests/sksl/shared/RectangleTexture.sksl",
diff --git a/src/sksl/SkSLCFGGenerator.cpp b/src/sksl/SkSLCFGGenerator.cpp
index aabd3a865c..61a45b7fd4 100644
--- a/src/sksl/SkSLCFGGenerator.cpp
+++ b/src/sksl/SkSLCFGGenerator.cpp
@@ -106,7 +106,10 @@ bool BasicBlock::tryRemoveExpressionBefore(std::vector<BasicBlock::Node>::iterat
     bool result;
     if ((*iter)->isExpression()) {
         SkASSERT((*iter)->expression()->get() != e);
+        // Remember the expression that we started on.
         Expression* old = (*iter)->expression()->get();
+        // Back up `iter` until we find the expression that we want to remove. (If we don't find
+        // that expression at all, fail and rescan.)
         do {
             if ((*iter) == fNodes.begin()) {
                 return false;
@@ -114,14 +117,19 @@ bool BasicBlock::tryRemoveExpressionBefore(std::vector<BasicBlock::Node>::iterat
             --(*iter);
         } while (!(*iter)->isExpression() || (*iter)->expression()->get() != e);
 
+        // `iter` now points to our expression that needs removal. Erase it.
         result = this->tryRemoveExpression(iter);
 
+        // Move `iter` forward again until we find the expression we started on.
         while (!(*iter)->isExpression() || (*iter)->expression()->get() != old) {
             SkASSERT(*iter != fNodes.end());
             ++(*iter);
         }
     } else {
+        // Remember the statement that we started on.
         Statement* old = (*iter)->statement()->get();
+        // Back up `iter` until we find the expression that we want to remove. (If we don't find
+        // that expression at all, fail and rescan.)
         do {
             if ((*iter) == fNodes.begin()) {
                 return false;
@@ -129,8 +137,10 @@ bool BasicBlock::tryRemoveExpressionBefore(std::vector<BasicBlock::Node>::iterat
             --(*iter);
         } while (!(*iter)->isExpression() || (*iter)->expression()->get() != e);
 
+        // `iter` now points to our expression that needs removal. Erase it.
         result = this->tryRemoveExpression(iter);
 
+        // Move `iter` forward again until we find the statement we started on.
         while (!(*iter)->isStatement() || (*iter)->statement()->get() != old) {
             SkASSERT(*iter != fNodes.end());
             ++(*iter);
diff --git a/src/sksl/SkSLCompiler.cpp b/src/sksl/SkSLCompiler.cpp
index 0285e71bbb..ae6c225525 100644
--- a/src/sksl/SkSLCompiler.cpp
+++ b/src/sksl/SkSLCompiler.cpp
@@ -1180,14 +1180,12 @@ void Compiler::simplifyExpression(DefinitionMap& definitions,
                             &componentType.toCompound(*fContext, swizzleSize, /*rows=*/1),
                             std::move(newArgs));
 
-                    // No fUsage change: `half4(foo).xy` and `half2(foo)` have equivalent reference
-                    // counts.
+                    // We're replacing an expression with a cloned version; we'll need a rescan.
+                    // There's no fUsage change: `half4(foo).xy` and `half2(foo)` have equivalent
+                    // reference counts.
+                    try_replace_expression(&b, iter, &replacement);
                     optimizationContext->fUpdated = true;
-                    if (!try_replace_expression(&b, iter, &replacement)) {
-                        optimizationContext->fNeedsRescan = true;
-                        return;
-                    }
-                    SkASSERT((*iter)->isExpression());
+                    optimizationContext->fNeedsRescan = true;
                     break;
                 }
 
@@ -1305,14 +1303,13 @@ void Compiler::simplifyExpression(DefinitionMap& definitions,
                             &componentType.toCompound(*fContext, swizzleSize, /*rows=*/1),
                             std::move(newArgs));
 
-                    // Remove references within 'expr', add references within 'optimized'
-                    optimizationContext->fUpdated = true;
+                    // Remove references within 'expr', add references within 'replacement.'
                     optimizationContext->fUsage->replace(expr, replacement.get());
-                    if (!try_replace_expression(&b, iter, &replacement)) {
-                        optimizationContext->fNeedsRescan = true;
-                        return;
-                    }
-                    SkASSERT((*iter)->isExpression());
+
+                    // We're replacing an expression with a cloned version; we'll need a rescan.
+                    try_replace_expression(&b, iter, &replacement);
+                    optimizationContext->fUpdated = true;
+                    optimizationContext->fNeedsRescan = true;
                 }
                 break;
             }
diff --git a/tests/sksl/shared/Ossfuzz28794.sksl b/tests/sksl/shared/Ossfuzz28794.sksl
new file mode 100644
index 0000000000..a4f1f20373
--- /dev/null
+++ b/tests/sksl/shared/Ossfuzz28794.sksl
@@ -0,0 +1,5 @@
+void main() {
+    int i = int(sqrt(1));
+    (i)*half4(i=3).x1.x;
+    sk_FragColor.x = half(i);
+}
diff --git a/tests/sksl/shared/golden/Ossfuzz28794.asm.frag b/tests/sksl/shared/golden/Ossfuzz28794.asm.frag
new file mode 100644
index 0000000000..eb69f48234
--- /dev/null
+++ b/tests/sksl/shared/golden/Ossfuzz28794.asm.frag
@@ -0,0 +1,46 @@
+OpCapability Shader
+%1 = OpExtInstImport "GLSL.std.450"
+OpMemoryModel Logical GLSL450
+OpEntryPoint Fragment %main "main" %sk_FragColor %sk_Clockwise
+OpExecutionMode %main OriginUpperLeft
+OpName %sk_FragColor "sk_FragColor"
+OpName %sk_Clockwise "sk_Clockwise"
+OpName %main "main"
+OpName %i "i"
+OpDecorate %sk_FragColor RelaxedPrecision
+OpDecorate %sk_FragColor Location 0
+OpDecorate %sk_FragColor Index 0
+OpDecorate %sk_Clockwise RelaxedPrecision
+OpDecorate %sk_Clockwise BuiltIn FrontFacing
+OpDecorate %23 RelaxedPrecision
+%float = OpTypeFloat 32
+%v4float = OpTypeVector %float 4
+%_ptr_Output_v4float = OpTypePointer Output %v4float
+%sk_FragColor = OpVariable %_ptr_Output_v4float Output
+%bool = OpTypeBool
+%_ptr_Input_bool = OpTypePointer Input %bool
+%sk_Clockwise = OpVariable %_ptr_Input_bool Input
+%void = OpTypeVoid
+%11 = OpTypeFunction %void
+%int = OpTypeInt 32 1
+%_ptr_Function_int = OpTypePointer Function %int
+%float_1 = OpConstant %float 1
+%int_3 = OpConstant %int 3
+%float_3 = OpConstant %float 3
+%_ptr_Output_float = OpTypePointer Output %float
+%int_0 = OpConstant %int 0
+%main = OpFunction %void None %11
+%12 = OpLabel
+%i = OpVariable %_ptr_Function_int Function
+%17 = OpExtInst %float %1 Sqrt %float_1
+%16 = OpConvertFToS %int %17
+OpStore %i %16
+%20 = OpLoad %int %i
+%19 = OpConvertSToF %float %20
+OpStore %i %int_3
+%21 = OpConvertSToF %float %int_3
+%23 = OpFMul %float %19 %21
+%25 = OpAccessChain %_ptr_Output_float %sk_FragColor %int_0
+OpStore %25 %float_3
+OpReturn
+OpFunctionEnd
diff --git a/tests/sksl/shared/golden/Ossfuzz28794.glsl b/tests/sksl/shared/golden/Ossfuzz28794.glsl
new file mode 100644
index 0000000000..ae2b29b00d
--- /dev/null
+++ b/tests/sksl/shared/golden/Ossfuzz28794.glsl
@@ -0,0 +1,7 @@
+
+out vec4 sk_FragColor;
+void main() {
+    int i = int(sqrt(1.0));
+    float(i) * float(i = 3);
+    sk_FragColor.x = 3.0;
+}
diff --git a/tests/sksl/shared/golden/Ossfuzz28794.metal b/tests/sksl/shared/golden/Ossfuzz28794.metal
new file mode 100644
index 0000000000..7fac041176
--- /dev/null
+++ b/tests/sksl/shared/golden/Ossfuzz28794.metal
@@ -0,0 +1,16 @@
+#include <metal_stdlib>
+#include <simd/simd.h>
+using namespace metal;
+struct Inputs {
+};
+struct Outputs {
+    float4 sk_FragColor [[color(0)]];
+};
+fragment Outputs fragmentMain(Inputs _in [[stage_in]], bool _frontFacing [[front_facing]], float4 _fragCoord [[position]]) {
+    Outputs _outputStruct;
+    thread Outputs* _out = &_outputStruct;
+    int i = int(sqrt(1.0));
+    float(i) * float(i = 3);
+    _out->sk_FragColor.x = 3.0;
+    return *_out;
+}
