diff --git a/cpp/src/arrow/array/concatenate.cc b/cpp/src/arrow/array/concatenate.cc
index 845615453..6989d7a1a 100644
--- a/cpp/src/arrow/array/concatenate.cc
+++ b/cpp/src/arrow/array/concatenate.cc
@@ -42,6 +42,8 @@
 
 namespace arrow {
 
+using internal::SafeSignedAdd;
+
 /// offset, length pair for representing a Range of a buffer or array
 struct Range {
   int64_t offset = -1, length = 0;
@@ -158,7 +160,7 @@ static Status PutOffsets(const std::shared_ptr<Buffer>& src, Offset first_offset
   // Avoid UB on non-validated input by doing the addition in the unsigned domain.
   // (the result can later be validated using Array::ValidateFull)
   std::transform(src_begin, src_end, dst, [adjustment](Offset offset) {
-    return internal::SafeSignedAdd(offset, adjustment);
+    return SafeSignedAdd(offset, adjustment);
   });
   return Status::OK();
 }
@@ -170,13 +172,13 @@ class ConcatenateImpl {
       : in_(std::move(in)), pool_(pool), out_(std::make_shared<ArrayData>()) {
     out_->type = in[0]->type;
     for (size_t i = 0; i < in_.size(); ++i) {
-      out_->length += in[i]->length;
+      out_->length = SafeSignedAdd(out_->length, in[i]->length);
       if (out_->null_count == kUnknownNullCount ||
           in[i]->null_count == kUnknownNullCount) {
         out_->null_count = kUnknownNullCount;
         continue;
       }
-      out_->null_count += in[i]->null_count;
+      out_->null_count = SafeSignedAdd(out_->null_count.load(), in[i]->null_count.load());
     }
     out_->buffers.resize(in[0]->buffers.size());
     out_->child_data.resize(in[0]->child_data.size());
diff --git a/cpp/src/parquet/column_reader.cc b/cpp/src/parquet/column_reader.cc
index 8d9a0f7c7..672b6e370 100644
--- a/cpp/src/parquet/column_reader.cc
+++ b/cpp/src/parquet/column_reader.cc
@@ -86,8 +86,12 @@ int LevelDecoder::SetData(Encoding::type encoding, int16_t max_level,
       return 4 + num_bytes;
     }
     case Encoding::BIT_PACKED: {
-      num_bytes =
-          static_cast<int32_t>(BitUtil::BytesForBits(num_buffered_values * bit_width_));
+      int num_bits = 0;
+      if (MultiplyWithOverflow(num_buffered_values, bit_width_, &num_bits)) {
+        throw ParquetException(
+            "Number of buffered values too large (corrupt data page?)");
+      }
+      num_bytes = static_cast<int32_t>(BitUtil::BytesForBits(num_bits));
       if (num_bytes < 0 || num_bytes > data_size - 4) {
         throw ParquetException("Received invalid number of bytes (corrupt data page?)");
       }
diff --git a/testing b/testing
index f552c4dcd..535369d60 160000
--- a/testing
+++ b/testing
@@ -1 +1 @@
-Subproject commit f552c4dcd2ae3d14048abd20919748cce5276ade
+Subproject commit 535369d600a58cbfe6d952777187561b4dacfcbd
