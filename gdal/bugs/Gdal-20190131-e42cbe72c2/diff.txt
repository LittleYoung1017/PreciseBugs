diff --git a/gdal/ogr/ogrsf_frmts/mitab/mitab_indfile.cpp b/gdal/ogr/ogrsf_frmts/mitab/mitab_indfile.cpp
index a82dd47b82..52120fd0d8 100644
--- a/gdal/ogr/ogrsf_frmts/mitab/mitab_indfile.cpp
+++ b/gdal/ogr/ogrsf_frmts/mitab/mitab_indfile.cpp
@@ -1045,7 +1045,7 @@ GInt32 TABINDNode::ReadIndexEntry(int nEntryNo, GByte *pKeyValue)
  * nEntryNo is the 0-based index of the index entry that we are interested
  * in inside the current node.
  **********************************************************************/
-int   TABINDNode::IndexKeyCmp(GByte *pKeyValue, int nEntryNo)
+int   TABINDNode::IndexKeyCmp(const GByte *pKeyValue, int nEntryNo)
 {
     CPLAssert(pKeyValue);
     CPLAssert(nEntryNo >= 0 && nEntryNo < m_numEntriesInNode);
@@ -1117,7 +1117,14 @@ int TABINDNode::SetFieldType(TABFieldType eType)
  *  - 0 if the key was not found
  *  - or -1 if an error happened
  **********************************************************************/
-GInt32 TABINDNode::FindFirst(GByte *pKeyValue)
+GInt32 TABINDNode::FindFirst(const GByte *pKeyValue)
+{
+    std::set<int> oSetVisitedNodePtr;
+    return FindFirst(pKeyValue, oSetVisitedNodePtr);
+}
+
+GInt32 TABINDNode::FindFirst(const GByte *pKeyValue,
+                             std::set<int>& oSetVisitedNodePtr)
 {
     if (m_poDataBlock == nullptr)
     {
@@ -1255,6 +1262,13 @@ GInt32 TABINDNode::FindFirst(GByte *pKeyValue)
                         nRetValue = 0;
                         continue;
                     }
+                    else if( oSetVisitedNodePtr.find(nChildNodePtr) !=
+                                oSetVisitedNodePtr.end() )
+                    {
+                        CPLError(CE_Failure, CPLE_AppDefined,
+                                 "Invalid child node pointer structure");
+                        return -1;
+                    }
                     else if( (nChildNodePtr % 512) != 0 )
                     {
                         CPLError(CE_Failure, CPLE_AppDefined,
@@ -1285,7 +1299,9 @@ GInt32 TABINDNode::FindFirst(GByte *pKeyValue)
                         return -1;
                     }
 
-                    nRetValue = m_poCurChildNode->FindFirst(pKeyValue);
+                    oSetVisitedNodePtr.insert(nChildNodePtr);
+                    nRetValue = m_poCurChildNode->FindFirst(pKeyValue,
+                                                            oSetVisitedNodePtr);
                 }/*for iChild*/
 
                 return nRetValue;
diff --git a/gdal/ogr/ogrsf_frmts/mitab/mitab_priv.h b/gdal/ogr/ogrsf_frmts/mitab/mitab_priv.h
index 796a2d43d4..37098333bc 100644
--- a/gdal/ogr/ogrsf_frmts/mitab/mitab_priv.h
+++ b/gdal/ogr/ogrsf_frmts/mitab/mitab_priv.h
@@ -37,6 +37,8 @@
 #include "cpl_string.h"
 #include "ogr_feature.h"
 
+#include <set>
+
 class TABFile;
 class TABFeature;
 class TABMAPToolBlock;
@@ -1542,7 +1544,7 @@ class TABINDNode
 
     int         GotoNodePtr(GInt32 nNewNodePtr);
     GInt32      ReadIndexEntry(int nEntryNo, GByte *pKeyValue);
-    int         IndexKeyCmp(GByte *pKeyValue, int nEntryNo);
+    int         IndexKeyCmp(const GByte *pKeyValue, int nEntryNo);
 
     int         InsertEntry(GByte *pKeyValue, GInt32 nRecordNo,
                             GBool bInsertAfterCurChild=FALSE,
@@ -1550,6 +1552,8 @@ class TABINDNode
     int         SetNodeBufferDirectly(int numEntries, GByte *pBuf,
                                       int nCurIndexEntry=0,
                                       TABINDNode *poCurChild=nullptr);
+    GInt32      FindFirst(const GByte *pKeyValue,
+                          std::set<int>& oSetVisitedNodePtr);
 
    public:
     explicit TABINDNode(TABAccess eAccessMode = TABRead);
@@ -1573,7 +1577,7 @@ class TABINDNode
     int         GetNumEntries()         {return m_numEntriesInNode;}
     int         GetMaxNumEntries()      {return (512-12)/(m_nKeyLength+4);}
 
-    GInt32      FindFirst(GByte *pKeyValue);
+    GInt32      FindFirst(const GByte *pKeyValue);
     GInt32      FindNext(GByte *pKeyValue);
 
     int         CommitToFile();
