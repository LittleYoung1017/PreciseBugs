diff --git a/resources/sksl/shared/UnusedVariables.sksl b/resources/sksl/shared/UnusedVariables.sksl
index ee3e13bfa6..b2b57a42a3 100644
--- a/resources/sksl/shared/UnusedVariables.sksl
+++ b/resources/sksl/shared/UnusedVariables.sksl
@@ -7,17 +7,27 @@ noinline float userfunc(float v) {
 }
 
 half4 main(float2 coords) {
-    float a = 1, b = 2, c = 3;
+    float a = 1, b = 2, c = 3, z = 4;
     if (false) {
         a++, b++, c++;
     }
 
+    a = 1;
+    b = 2;
+    z = 3;
+    a = a = 4;
+    z = z = z = 5;
+    a = z = 6;
+    z = a = z = 7;
+
     a = c + 77.0;
     b = c + 77.0;
     a = sin(c + 77.0);
     b = sin(c + 77.0);
     a = userfunc(c + 77.0);
     b = userfunc(c + 77.0);
+    a = a = cos(c);
+    b = b = cos(c);
 
     for (int x=0; x<1; ++x) {
         continue;
@@ -28,5 +38,7 @@ half4 main(float2 coords) {
     b = 3;
     d++;
 
+    int i, j, k = j = i; // oss-fuzz:51741
+
     return half4(b == 2, b == 3, d == 5, d == 4);
 }
diff --git a/src/sksl/transform/SkSLEliminateDeadLocalVariables.cpp b/src/sksl/transform/SkSLEliminateDeadLocalVariables.cpp
index c4f8564653..313cb8130f 100644
--- a/src/sksl/transform/SkSLEliminateDeadLocalVariables.cpp
+++ b/src/sksl/transform/SkSLEliminateDeadLocalVariables.cpp
@@ -57,6 +57,11 @@ static bool eliminate_dead_local_variables(const Context& context,
                         // If `anyExpression` is now a lone ExpressionStatement, it's highly likely
                         // that we can eliminate it entirely. This flag will let us know to check.
                         fAssignmentWasEliminated = true;
+
+                        // Re-process the newly cleaned-up expression. This lets us fully clean up
+                        // gnarly assignments like `a = b = 123;` where both `a` and `b` are dead,
+                        // or silly double-assignments like `a = a = 123;`.
+                        return this->visitExpressionPtr(expr);
                     }
                 }
             }
@@ -90,8 +95,12 @@ static bool eliminate_dead_local_variables(const Context& context,
                     // The variable is no longer referenced anywhere so it should be safe to change.
                     const_cast<Variable*>(var)->markEliminated();
                     fMadeChanges = true;
+
+                    // Re-process the newly cleaned-up statement. This lets us fully clean up
+                    // gnarly assignments like `a = b = 123;` where both `a` and `b` are dead,
+                    // or silly double-assignments like `a = a = 123;`.
+                    return this->visitStatementPtr(stmt);
                 }
-                return false;
             }
 
             bool result = INHERITED::visitStatementPtr(stmt);
diff --git a/tests/sksl/shared/UnusedVariables.asm.frag b/tests/sksl/shared/UnusedVariables.asm.frag
index 84946d9131..2e1770643d 100644
--- a/tests/sksl/shared/UnusedVariables.asm.frag
+++ b/tests/sksl/shared/UnusedVariables.asm.frag
@@ -16,11 +16,11 @@ OpDecorate %sk_Clockwise BuiltIn FrontFacing
 OpDecorate %sk_FragColor RelaxedPrecision
 OpDecorate %sk_FragColor Location 0
 OpDecorate %sk_FragColor Index 0
-OpDecorate %63 RelaxedPrecision
-OpDecorate %65 RelaxedPrecision
-OpDecorate %68 RelaxedPrecision
-OpDecorate %71 RelaxedPrecision
+OpDecorate %64 RelaxedPrecision
+OpDecorate %66 RelaxedPrecision
+OpDecorate %69 RelaxedPrecision
 OpDecorate %72 RelaxedPrecision
+OpDecorate %73 RelaxedPrecision
 %bool = OpTypeBool
 %_ptr_Input_bool = OpTypePointer Input %bool
 %sk_Clockwise = OpVariable %_ptr_Input_bool Input
@@ -74,6 +74,7 @@ OpFunctionEnd
 %d = OpVariable %_ptr_Function_float Function
 OpStore %b %float_2
 OpStore %c %float_3
+OpStore %b %float_2
 %36 = OpFAdd %float %float_3 %float_77
 OpStore %b %36
 %38 = OpFAdd %float %float_3 %float_77
@@ -86,35 +87,38 @@ OpStore %40 %39
 OpStore %43 %42
 %44 = OpFunctionCall %float %userfunc_ff %43
 OpStore %b %44
+%45 = OpExtInst %float %1 Cos %float_3
+OpStore %b %45
+OpStore %b %45
 OpStore %x %int_0
-OpBranch %49
-%49 = OpLabel
-OpLoopMerge %53 %52 None
 OpBranch %50
 %50 = OpLabel
-%54 = OpLoad %int %x
-%56 = OpSLessThan %bool %54 %int_1
-OpBranchConditional %56 %51 %53
+OpLoopMerge %54 %53 None
+OpBranch %51
 %51 = OpLabel
-OpBranch %52
+%55 = OpLoad %int %x
+%57 = OpSLessThan %bool %55 %int_1
+OpBranchConditional %57 %52 %54
 %52 = OpLabel
-%57 = OpLoad %int %x
-%58 = OpIAdd %int %57 %int_1
-OpStore %x %58
-OpBranch %49
+OpBranch %53
 %53 = OpLabel
-%60 = OpLoad %float %c
-OpStore %d %60
-OpStore %b %float_3
-%61 = OpFAdd %float %60 %float_1
+%58 = OpLoad %int %x
+%59 = OpIAdd %int %58 %int_1
+OpStore %x %59
+OpBranch %50
+%54 = OpLabel
+%61 = OpLoad %float %c
 OpStore %d %61
-%62 = OpFOrdEqual %bool %float_3 %float_2
-%63 = OpSelect %float %62 %float_1 %float_0
-%65 = OpSelect %float %true %float_1 %float_0
-%67 = OpFOrdEqual %bool %61 %float_5
-%68 = OpSelect %float %67 %float_1 %float_0
-%70 = OpFOrdEqual %bool %61 %float_4
-%71 = OpSelect %float %70 %float_1 %float_0
-%72 = OpCompositeConstruct %v4float %63 %65 %68 %71
-OpReturnValue %72
+OpStore %b %float_3
+%62 = OpFAdd %float %61 %float_1
+OpStore %d %62
+%63 = OpFOrdEqual %bool %float_3 %float_2
+%64 = OpSelect %float %63 %float_1 %float_0
+%66 = OpSelect %float %true %float_1 %float_0
+%68 = OpFOrdEqual %bool %62 %float_5
+%69 = OpSelect %float %68 %float_1 %float_0
+%71 = OpFOrdEqual %bool %62 %float_4
+%72 = OpSelect %float %71 %float_1 %float_0
+%73 = OpCompositeConstruct %v4float %64 %66 %69 %72
+OpReturnValue %73
 OpFunctionEnd
diff --git a/tests/sksl/shared/UnusedVariables.glsl b/tests/sksl/shared/UnusedVariables.glsl
index a04adb9dff..107bfe1365 100644
--- a/tests/sksl/shared/UnusedVariables.glsl
+++ b/tests/sksl/shared/UnusedVariables.glsl
@@ -6,10 +6,12 @@ float userfunc_ff(float v) {
 vec4 main() {
     float b = 2.0;
     float c = 3.0;
+    b = 2.0;
     b = c + 77.0;
     b = sin(c + 77.0);
     userfunc_ff(c + 77.0);
     b = userfunc_ff(c + 77.0);
+    b = (b = cos(c));
     for (int x = 0;x < 1; ++x) {
         continue;
     }
diff --git a/tests/sksl/shared/UnusedVariables.metal b/tests/sksl/shared/UnusedVariables.metal
index 74b96aac67..292dd405f5 100644
--- a/tests/sksl/shared/UnusedVariables.metal
+++ b/tests/sksl/shared/UnusedVariables.metal
@@ -14,10 +14,12 @@ fragment Outputs fragmentMain(Inputs _in [[stage_in]], bool _frontFacing [[front
     (void)_out;
     float b = 2.0;
     float c = 3.0;
+    b = 2.0;
     b = c + 77.0;
     b = sin(c + 77.0);
     userfunc_ff(c + 77.0);
     b = userfunc_ff(c + 77.0);
+    b = (b = cos(c));
     for (int x = 0;x < 1; ++x) {
         continue;
     }
