diff --git a/gdal/fuzzers/GNUmakefile b/gdal/fuzzers/GNUmakefile
index bc009b2349..bdde6529d5 100644
--- a/gdal/fuzzers/GNUmakefile
+++ b/gdal/fuzzers/GNUmakefile
@@ -21,6 +21,8 @@ clean:
 	$(RM) *.o $(O_OBJ) libFuzzingEngine.a
 	$(RM) gdal_translate_fuzzer$(EXE)
 	$(RM) gdal_vector_translate_fuzzer$(EXE)
+	$(RM) aig_fuzzer$(EXE)
+	$(RM) ogr_fuzzer$(EXE)
 
 gdal_translate_fuzzer$(EXE): gdal_translate_fuzzer.$(OBJ_EXT) $(DEP_LIBS)
 	$(LD) $(LDFLAGS) $(LNK_FLAGS) $(CXXFLAGS) $(GDAL_INCLUDE) gdal_translate_fuzzer.cpp fuzzingengine.cpp $(XTRAOBJ) $(CONFIG_LIBS) -o $@
@@ -28,6 +30,12 @@ gdal_translate_fuzzer$(EXE): gdal_translate_fuzzer.$(OBJ_EXT) $(DEP_LIBS)
 gdal_vector_translate_fuzzer$(EXE): gdal_vector_translate_fuzzer.$(OBJ_EXT) $(DEP_LIBS)
 	$(LD) $(LDFLAGS) $(LNK_FLAGS) $(CXXFLAGS) $(GDAL_INCLUDE) gdal_vector_translate_fuzzer.cpp fuzzingengine.cpp $(XTRAOBJ) $(CONFIG_LIBS) -o $@
 
+aig_fuzzer$(EXE): gdal_fuzzer.$(OBJ_EXT) $(DEP_LIBS)
+	$(LD) $(LDFLAGS) $(LNK_FLAGS) $(CXXFLAGS) $(GDAL_INCLUDE) gdal_fuzzer.cpp fuzzingengine.cpp $(XTRAOBJ) $(CONFIG_LIBS) -o $@ -DREGISTER_FUNC=GDALRegister_AIGrid -DMEM_FILENAME="\"/vsimem/test.tar\"" -DGDAL_FILENAME="\"/vsitar//vsimem/test.tar/hdr.adf\""
+
+ogr_fuzzer$(EXE): ogr_fuzzer.$(OBJ_EXT) $(DEP_LIBS)
+	$(LD) $(LDFLAGS) $(LNK_FLAGS) $(CXXFLAGS) $(GDAL_INCLUDE) ogr_fuzzer.cpp fuzzingengine.cpp $(XTRAOBJ) $(CONFIG_LIBS) -o $@
+
 dummyfuzzers: fuzzingengine.o
 	$(AR) r libFuzzingEngine.a fuzzingengine.o
 	CXX="${CXX}" CXXFLAGS="${CXXFLAGS} -L." EXTRA_LIBS="${LIBS}" SRC=/tmp OUT=/tmp ./build_google_oss_fuzzers.sh
diff --git a/gdal/fuzzers/ogr_fuzzer.cpp b/gdal/fuzzers/ogr_fuzzer.cpp
index a921e1b735..467ac6534b 100644
--- a/gdal/fuzzers/ogr_fuzzer.cpp
+++ b/gdal/fuzzers/ogr_fuzzer.cpp
@@ -102,7 +102,9 @@ int LLVMFuzzerTestOneInput(const uint8_t *buf, size_t len)
     if( hDS )
     {
         const int nLayers = OGR_DS_GetLayerCount(hDS);
-        for( int i = 0; i < 10 && i < nLayers; i++ )
+        time_t nStartTime = time(nullptr);
+        bool bStop = false;
+        for( int i = 0; !bStop && i < 10 && i < nLayers; i++ )
         {
             OGRLayerH hLayer = OGR_DS_GetLayer(hDS, i);
             OGR_L_GetSpatialRef(hLayer);
@@ -110,11 +112,29 @@ int LLVMFuzzerTestOneInput(const uint8_t *buf, size_t len)
             OGR_L_GetFIDColumn(hLayer);
             OGR_L_GetGeometryColumn(hLayer);
             OGRFeatureH hFeature;
-            for( int j = 0; j < 1000 &&
-                    (hFeature = OGR_L_GetNextFeature(hLayer)) != nullptr; j++ )
+            OGRFeatureH hFeaturePrev = nullptr;
+            while( !bStop &&
+                    (hFeature = OGR_L_GetNextFeature(hLayer)) != nullptr )
             {
-                OGR_F_Destroy(hFeature);
+                // Limit runtime to 20 seconds if features returned are
+                // different. Otherwise this may be a sign of a bug in the
+                // reader and we want the infinite loop to be revealed.
+                if( time(nullptr) - nStartTime > 20 )
+                {
+                    bool bIsSameAsPrevious =
+                        (hFeaturePrev != nullptr &&
+                         OGR_F_Equal(hFeature, hFeaturePrev));
+                    if( !bIsSameAsPrevious )
+                    {
+                        bStop = true;
+                    }
+                }
+                if( hFeaturePrev )
+                    OGR_F_Destroy(hFeaturePrev);
+                hFeaturePrev = hFeature;
             }
+            if( hFeaturePrev )
+                OGR_F_Destroy(hFeaturePrev);
         }
         OGR_DS_Destroy(hDS);
     }
