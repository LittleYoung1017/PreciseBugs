diff --git a/autotest/ogr/data/gmlas/test_max_mem_xerces.xml b/autotest/ogr/data/gmlas/test_max_mem_xerces.xml
new file mode 100644
index 0000000000..2e6234786d
--- /dev/null
+++ b/autotest/ogr/data/gmlas/test_max_mem_xerces.xml
@@ -0,0 +1,3 @@
+<myns:main_elt xmlns:myns="http://myns"
+               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+               xsi:schemaLocation="http://myns test_max_mem_xerces.xsd" />
diff --git a/autotest/ogr/data/gmlas/test_max_mem_xerces.xsd b/autotest/ogr/data/gmlas/test_max_mem_xerces.xsd
new file mode 100644
index 0000000000..e047042d86
--- /dev/null
+++ b/autotest/ogr/data/gmlas/test_max_mem_xerces.xsd
@@ -0,0 +1,27 @@
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
+           xmlns:myns="http://myns"
+           targetNamespace="http://myns"
+           elementFormDefault="qualified" attributeFormDefault="unqualified">
+
+<xs:element name="main_elt">
+  <xs:complexType>
+     <xs:sequence>
+        <xs:group ref="myns:mygroup" minOccurs="0" maxOccurs="1"/>
+      </xs:sequence>
+  </xs:complexType>
+</xs:element>
+
+<xs:group name="mygroup">
+  <xs:sequence>
+      <!-- related to https://issues.apache.org/jira/browse/XERCESC-1051 -->
+      <xs:element name="elt" maxOccurs="987654321">
+        <xs:complexType>
+            <xs:sequence>
+                <xs:element name="x" type="xs:int" maxOccurs="1"/>
+            </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+  </xs:sequence>
+</xs:group>
+
+</xs:schema>
diff --git a/autotest/ogr/data/gmlas/test_max_time_xerces.xml b/autotest/ogr/data/gmlas/test_max_time_xerces.xml
new file mode 100644
index 0000000000..edcd22a8c7
--- /dev/null
+++ b/autotest/ogr/data/gmlas/test_max_time_xerces.xml
@@ -0,0 +1,3 @@
+<myns:main_elt xmlns:myns="http://myns"
+               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+               xsi:schemaLocation="http://myns test_max_time_xerces.xsd" />
diff --git a/autotest/ogr/data/gmlas/test_max_time_xerces.xsd b/autotest/ogr/data/gmlas/test_max_time_xerces.xsd
new file mode 100644
index 0000000000..2d66393e8f
--- /dev/null
+++ b/autotest/ogr/data/gmlas/test_max_time_xerces.xsd
@@ -0,0 +1,27 @@
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
+           xmlns:myns="http://myns"
+           targetNamespace="http://myns"
+           elementFormDefault="qualified" attributeFormDefault="unqualified">
+
+<xs:element name="main_elt">
+  <xs:complexType>
+     <xs:sequence>
+        <xs:group ref="myns:mygroup" minOccurs="0" maxOccurs="1"/>
+      </xs:sequence>
+  </xs:complexType>
+</xs:element>
+
+<xs:group name="mygroup">
+  <xs:sequence>
+      <!-- related to https://issues.apache.org/jira/browse/XERCESC-1051 -->
+      <xs:element name="elt" maxOccurs="33333">
+        <xs:complexType>
+            <xs:sequence>
+                <xs:element name="x" type="xs:int" maxOccurs="1"/>
+            </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+  </xs:sequence>
+</xs:group>
+
+</xs:schema>
diff --git a/autotest/ogr/ogr_gmlas.py b/autotest/ogr/ogr_gmlas.py
index af52e94a91..5110a67189 100755
--- a/autotest/ogr/ogr_gmlas.py
+++ b/autotest/ogr/ogr_gmlas.py
@@ -2712,3 +2712,29 @@ def test_ogr_gmlas_invalid_version_xsd():
     with gdaltest.error_handler():
         ds = gdal.OpenEx('GMLAS:data/gmlas/gmlas_invalid_version_xsd.xml')
     assert ds is None
+
+
+###############################################################################
+# Test opening a file whose .xsd leads to huge memory allocation
+# Related to https://issues.apache.org/jira/browse/XERCESC-1051
+
+
+def test_ogr_gmlas_huge_memory_allocation():
+
+    with gdaltest.config_option('OGR_GMLAS_XERCES_MAX_TIME', '0'):
+        with gdaltest.error_handler():
+            ds = gdal.OpenEx('GMLAS:data/gmlas/test_max_mem_xerces.xml')
+        assert ds is None
+
+
+###############################################################################
+# Test opening a file whose .xsd leads to huge processing time
+# Related to https://issues.apache.org/jira/browse/XERCESC-1051
+
+
+def test_ogr_gmlas_huge_processing_time():
+
+    with gdaltest.config_option('OGR_GMLAS_XERCES_MAX_TIME', '0.5'):
+        with gdaltest.error_handler():
+            ds = gdal.OpenEx('GMLAS:data/gmlas/test_max_time_xerces.xml')
+        assert ds is None
diff --git a/gdal/ogr/ogr_xerces.cpp b/gdal/ogr/ogr_xerces.cpp
index a5266e05de..4304d7ceb0 100644
--- a/gdal/ogr/ogr_xerces.cpp
+++ b/gdal/ogr/ogr_xerces.cpp
@@ -40,14 +40,265 @@
 #include "cpl_multiproc.h"
 #include "cpl_string.h"
 
+#include <algorithm>
+#include <map>
+
 CPL_CVSID("$Id$")
 
 #ifdef HAVE_XERCES
 
+class OGRXercesStandardMemoryManager;
+class OGRXercesInstrumentedMemoryManager;
+
+/************************************************************************/
+/*                        CPLGettimeofday()                             */
+/************************************************************************/
+
+#if defined(_WIN32) && !defined(__CYGWIN__)
+#  include <sys/timeb.h>
+
+namespace {
+struct CPLTimeVal
+{
+  time_t  tv_sec;         /* seconds */
+  long    tv_usec;        /* and microseconds */
+};
+} // namespace
+
+static int CPLGettimeofday(struct CPLTimeVal* tp, void* /* timezonep*/ )
+{
+  struct _timeb theTime;
+
+  _ftime(&theTime);
+  tp->tv_sec = static_cast<time_t>(theTime.time);
+  tp->tv_usec = theTime.millitm * 1000;
+  return 0;
+}
+#else
+#  include <sys/time.h>     /* for gettimeofday() */
+#  define  CPLTimeVal timeval
+#  define  CPLGettimeofday(t,u) gettimeofday(t,u)
+#endif
+
+namespace {
+struct LimitationStruct
+{
+    size_t      maxMemAlloc = 0;
+    std::string osMsgMaxMemAlloc{};
+    double      timeOut = 0;
+    std::string osMsgTimeout{};
+
+    CPLTimeVal initTV{0,0};
+    CPLTimeVal lastTV{0,0};
+    size_t     totalAllocSize = 0;
+    size_t     allocCount = 0;
+};
+} // namespace
+
 static CPLMutex* hMutex = nullptr;
 static int nCounter = 0;
 static bool bXercesWasAlreadyInitializedBeforeUs = false;
+static OGRXercesStandardMemoryManager* gpExceptionMemoryManager = nullptr;
+static OGRXercesInstrumentedMemoryManager* gpMemoryManager = nullptr;
+static std::map<GIntBig, LimitationStruct>* gpoMapThreadTimeout = nullptr;
+
+/************************************************************************/
+/*                    OGRXercesStandardMemoryManager                    */
+/************************************************************************/
+
+class OGRXercesStandardMemoryManager final: public MemoryManager
+{
+public:
+    OGRXercesStandardMemoryManager() = default;
+
+    MemoryManager* getExceptionMemoryManager() override { return this; }
+
+    void* allocate(XMLSize_t size) override;
+
+    void deallocate(void* p) override;
+};
+
+void* OGRXercesStandardMemoryManager::allocate(XMLSize_t size)
+{
+    void* memptr = VSIMalloc(size);
+    if(memptr == nullptr && size != 0)
+        throw OutOfMemoryException();
+    return memptr;
+}
+
+void OGRXercesStandardMemoryManager::deallocate(void* p)
+{
+    if( p )
+        VSIFree(p);
+}
+
+/************************************************************************/
+/*               OGRXercesInstrumentedMemoryManager                     */
+/************************************************************************/
+
+class OGRXercesInstrumentedMemoryManager final: public MemoryManager
+{
+public:
+    OGRXercesInstrumentedMemoryManager() = default;
+
+    MemoryManager* getExceptionMemoryManager() override { return gpExceptionMemoryManager; }
+
+    void* allocate(XMLSize_t size) override;
+
+    void deallocate(void* p) override;
+};
+
+void* OGRXercesInstrumentedMemoryManager::allocate(XMLSize_t size)
+{
+    void* memptr = VSIMalloc(size + 8);
+    if( memptr == nullptr )
+        throw OutOfMemoryException();
+    memcpy(memptr, &size, sizeof(XMLSize_t));
+
+    LimitationStruct* pLimitation = nullptr;
+    {
+        CPLMutexHolderD(&hMutex);
+
+        if( gpoMapThreadTimeout )
+        {
+            auto iter = gpoMapThreadTimeout->find(CPLGetPID());
+            if( iter != gpoMapThreadTimeout->end() )
+            {
+                pLimitation = &(iter->second);
+            }
+        }
+    }
+
+    // Big memory allocation can happen in cases like
+    // https://issues.apache.org/jira/browse/XERCESC-1051
+    if( pLimitation && pLimitation->maxMemAlloc > 0 )
+    {
+        pLimitation->totalAllocSize += size;
+
+        if( pLimitation->totalAllocSize > pLimitation->maxMemAlloc )
+        {
+            pLimitation->maxMemAlloc = 0;
+            VSIFree(memptr);
+            if( !pLimitation->osMsgMaxMemAlloc.empty() )
+            {
+                CPLError(CE_Failure, CPLE_AppDefined,
+                         "%s", pLimitation->osMsgMaxMemAlloc.c_str());
+            }
+            throw OutOfMemoryException();
+        }
+    }
+
+    // Quite a hack, but some pathologic schema can cause excessive
+    // processing time. As memory allocations are regularly done, we
+    // measure the time of those consecutive allocations and check it
+    // does not exceed a threshold set by OGRStartXercesTimeoutForThisThread()
+    // Can happen in cases like
+    // https://issues.apache.org/jira/browse/XERCESC-1051
+    if( pLimitation && pLimitation->timeOut > 0 )
+    {
+        ++ pLimitation->allocCount;
+        if( pLimitation->allocCount == 1000 )
+        {
+            pLimitation->allocCount = 0;
+
+            CPLTimeVal tv;
+            CPLGettimeofday(&tv, nullptr);
+            if( pLimitation->initTV.tv_sec == 0 ||
+                // Reset the counter if the delay between the last 1000 memory
+                // allocations is too large. This enables being tolerant to
+                // network requests.
+                tv.tv_sec + tv.tv_usec * 1e-6 -
+                    (pLimitation->lastTV.tv_sec + pLimitation->lastTV.tv_usec * 1e-6) >
+                        std::min(0.1, pLimitation->timeOut / 10))
+            {
+                pLimitation->initTV = tv;
+            }
+            else if( tv.tv_sec + tv.tv_usec * 1e-6 -
+                    (pLimitation->initTV.tv_sec + pLimitation->initTV.tv_usec * 1e-6) > pLimitation->timeOut )
+            {
+                pLimitation->timeOut = 0;
+                VSIFree(memptr);
+                if( !pLimitation->osMsgTimeout.empty() )
+                {
+                    CPLError(CE_Failure, CPLE_AppDefined,
+                             "%s", pLimitation->osMsgTimeout.c_str());
+                }
+                throw OutOfMemoryException();
+            }
+            pLimitation->lastTV = tv;
+        }
+    }
+
+    return static_cast<char*>(memptr) + 8;
+}
+
+void OGRXercesInstrumentedMemoryManager::deallocate(void* p)
+{
+    if( p )
+    {
+        void* rawptr = reinterpret_cast<void*>(reinterpret_cast<uintptr_t>(p) - 8);
+        XMLSize_t size;
+        memcpy(&size, rawptr, sizeof(XMLSize_t));
+        VSIFree(rawptr);
+
+        LimitationStruct* pLimitation = nullptr;
+        {
+            CPLMutexHolderD(&hMutex);
+
+            if( gpoMapThreadTimeout )
+            {
+                auto iter = gpoMapThreadTimeout->find(CPLGetPID());
+                if( iter != gpoMapThreadTimeout->end() )
+                {
+                    pLimitation = &(iter->second);
+                }
+            }
+        }
+        if( pLimitation && pLimitation->maxMemAlloc > 0 )
+        {
+            pLimitation->totalAllocSize -= size;
+        }
+    }
+}
 
+/************************************************************************/
+/*                  OGRStartXercesLimitsForThisThread()                 */
+/************************************************************************/
+
+void OGRStartXercesLimitsForThisThread(size_t nMaxMemAlloc,
+                                       const char* pszMsgMaxMemAlloc,
+                                       double dfTimeoutSecond,
+                                       const char* pszMsgTimeout)
+{
+    CPLMutexHolderD(&hMutex);
+    if( gpoMapThreadTimeout == nullptr )
+    {
+        gpoMapThreadTimeout = new std::map<GIntBig, LimitationStruct>();
+    }
+    LimitationStruct limitation;
+    limitation.maxMemAlloc = nMaxMemAlloc;
+    if( pszMsgMaxMemAlloc )
+        limitation.osMsgMaxMemAlloc = pszMsgMaxMemAlloc;
+    limitation.timeOut = dfTimeoutSecond;
+    if( pszMsgTimeout )
+        limitation.osMsgTimeout = pszMsgTimeout;
+    (*gpoMapThreadTimeout)[CPLGetPID()] = limitation;
+}
+
+/************************************************************************/
+/*                  OGRStopXercesLimitsForThisThread()                  */
+/************************************************************************/
+
+void OGRStopXercesLimitsForThisThread()
+{
+    CPLMutexHolderD(&hMutex);
+    (*gpoMapThreadTimeout).erase(CPLGetPID());
+    if( gpoMapThreadTimeout->empty() )
+    {
+        delete gpoMapThreadTimeout;
+        gpoMapThreadTimeout = nullptr;
+    }
+}
 
 /************************************************************************/
 /*                      OGRXercesBinInputStream                         */
@@ -134,10 +385,16 @@ bool OGRInitializeXerces()
     }
     else
     {
+        gpExceptionMemoryManager = new OGRXercesStandardMemoryManager();
+        gpMemoryManager = new OGRXercesInstrumentedMemoryManager();
+
         try
         {
             CPLDebug("OGR", "XMLPlatformUtils::Initialize()");
-            XMLPlatformUtils::Initialize();
+            XMLPlatformUtils::Initialize(XMLUni::fgXercescDefaultLocale,
+                                         nullptr, /* nlsHome */
+                                         nullptr, /* panicHandler */
+                                         gpMemoryManager);
 
             // Install our own network accessor instead of the default Xerces-C one
             // This enables us in particular to honour GDAL_HTTP_TIMEOUT
@@ -182,6 +439,11 @@ void OGRDeinitializeXerces()
         {
             CPLDebug("OGR", "XMLPlatformUtils::Terminate()");
             XMLPlatformUtils::Terminate();
+
+            delete gpMemoryManager;
+            gpMemoryManager = nullptr;
+            delete gpExceptionMemoryManager;
+            gpExceptionMemoryManager = nullptr;
         }
     }
 }
diff --git a/gdal/ogr/ogr_xerces.h b/gdal/ogr/ogr_xerces.h
index 70d10659d1..98b0745fb3 100644
--- a/gdal/ogr/ogr_xerces.h
+++ b/gdal/ogr/ogr_xerces.h
@@ -48,6 +48,12 @@ void CPL_DLL OGRDeinitializeXerces(void);
 InputSource CPL_DLL* OGRCreateXercesInputSource(VSILFILE* fp);
 void CPL_DLL OGRDestroyXercesInputSource(InputSource* is);
 
+void CPL_DLL OGRStartXercesLimitsForThisThread(size_t nMaxMemAlloc,
+                                               const char* pszMsgMaxMemAlloc,
+                                               double dfTimeoutSecond,
+                                               const char* pszMsgTimeout);
+void CPL_DLL OGRStopXercesLimitsForThisThread();
+
 namespace OGR
 {
 CPLString CPL_DLL transcode( const XMLCh *panXMLString, int nLimitingChars = -1 );
diff --git a/gdal/ogr/ogr_xerces_headers.h b/gdal/ogr/ogr_xerces_headers.h
index f04e378fd4..e50ba5200a 100644
--- a/gdal/ogr/ogr_xerces_headers.h
+++ b/gdal/ogr/ogr_xerces_headers.h
@@ -33,8 +33,10 @@
 #pragma GCC system_header
 #endif
 
+#include <xercesc/framework/MemoryManager.hpp>
 #include <xercesc/sax/InputSource.hpp>
 #include <xercesc/util/BinInputStream.hpp>
+#include <xercesc/util/OutOfMemoryException.hpp>
 #include <xercesc/util/PlatformUtils.hpp>
 #include <xercesc/util/XMLNetAccessor.hpp>
 #include <xercesc/util/XMLUniDefs.hpp>
diff --git a/gdal/ogr/ogrsf_frmts/gmlas/ogrgmlasreader.cpp b/gdal/ogr/ogrsf_frmts/gmlas/ogrgmlasreader.cpp
index 2b857b22c7..d23302e65d 100644
--- a/gdal/ogr/ogrsf_frmts/gmlas/ogrgmlasreader.cpp
+++ b/gdal/ogr/ogrsf_frmts/gmlas/ogrgmlasreader.cpp
@@ -35,6 +35,8 @@
 
 #include "cpl_json_header.h"
 
+#include <algorithm>
+
 CPL_CVSID("$Id$")
 
 /************************************************************************/
@@ -537,6 +539,29 @@ bool GMLASReader::LoadXSDInParser( SAX2XMLReader* poParser,
     const bool bCacheGrammar = true;
     Grammar* poGrammar = nullptr;
     std::string osLoadGrammarErrorMsg("loadGrammar failed");
+
+    const int nMaxMem = std::min(2048, std::max(0, atoi(
+        CPLGetConfigOption("OGR_GMLAS_XERCES_MAX_MEMORY", "500"))));
+    const std::string osMsgMaxMem = CPLSPrintf(
+        "Xerces-C memory allocation exceeds %d MB. "
+        "This can happen on schemas with a big value for maxOccurs. "
+        "Define the OGR_GMLAS_XERCES_MAX_MEMORY configuration option to a "
+        "bigger value (in MB) to increase that limitation, "
+        "or 0 to remove it completely.",
+        nMaxMem);
+    const double dfTimeout = CPLAtof(
+        CPLGetConfigOption("OGR_GMLAS_XERCES_MAX_TIME", "2"));
+    const std::string osMsgTimeout = CPLSPrintf(
+        "Processing in Xerces exceeded maximum allowed of %.3f s. "
+        "This can happen on schemas with a big value for maxOccurs. "
+        "Define the OGR_GMLAS_XERCES_MAX_TIME configuration option to a "
+        "bigger value (in second) to increase that limitation, "
+        "or 0 to remove it completely.",
+        dfTimeout);
+    OGRStartXercesLimitsForThisThread(static_cast<size_t>(nMaxMem) * 1024 * 1024,
+                                      osMsgMaxMem.c_str(),
+                                      dfTimeout,
+                                      osMsgTimeout.c_str());
     try
     {
         poGrammar = poParser->loadGrammar(oSource,
@@ -551,12 +576,20 @@ bool GMLASReader::LoadXSDInParser( SAX2XMLReader* poParser,
     {
         osLoadGrammarErrorMsg += ": "+ transcode(e.getMessage());
     }
+    catch( const OutOfMemoryException& e )
+    {
+        if( strstr(CPLGetLastErrorMsg(), "configuration option") == nullptr )
+        {
+            osLoadGrammarErrorMsg += ": "+ transcode(e.getMessage());
+        }
+    }
     catch( const DOMException& e )
     {
         // Can happen with a .xsd that has a bad <?xml version="
         // declaration.
         osLoadGrammarErrorMsg += ": "+ transcode(e.getMessage());
     }
+    OGRStopXercesLimitsForThisThread();
 
     // Restore previous handlers
     poParser->setEntityResolver( poOldEntityResolver );
@@ -565,8 +598,11 @@ bool GMLASReader::LoadXSDInParser( SAX2XMLReader* poParser,
 
     if( poGrammar == nullptr )
     {
-        CPLError(CE_Failure, CPLE_AppDefined, "%s",
-                 osLoadGrammarErrorMsg.c_str());
+        if( !osLoadGrammarErrorMsg.empty() )
+        {
+            CPLError(CE_Failure, CPLE_AppDefined, "%s",
+                     osLoadGrammarErrorMsg.c_str());
+        }
         return false;
     }
     if( oErrorHandler.hasFailed() )
