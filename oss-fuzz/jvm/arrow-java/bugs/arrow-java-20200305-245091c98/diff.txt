diff --git a/cpp/src/arrow/array/validate.cc b/cpp/src/arrow/array/validate.cc
index 064dcdd3e..6a687fafc 100644
--- a/cpp/src/arrow/array/validate.cc
+++ b/cpp/src/arrow/array/validate.cc
@@ -79,44 +79,23 @@ struct ValidateArrayVisitor {
     if (!array.keys()) {
       return Status::Invalid("keys is null");
     }
-    const Status key_valid = ValidateArray(*array.keys());
-    if (!key_valid.ok()) {
-      return Status::Invalid("key array invalid: ", key_valid.ToString());
-    }
-
-    if (array.length() > 0 && !array.values()) {
-      return Status::Invalid("values is null");
-    }
-    const Status values_valid = ValidateArray(*array.values());
-    if (!values_valid.ok()) {
-      return Status::Invalid("values array invalid: ", values_valid.ToString());
-    }
-
-    const int32_t last_offset = array.value_offset(array.length());
-    if (array.values()->length() != last_offset) {
-      return Status::Invalid("Final offset invariant not equal to values length: ",
-                             last_offset, "!=", array.values()->length());
-    }
-    if (array.keys()->length() != last_offset) {
-      return Status::Invalid("Final offset invariant not equal to keys length: ",
-                             last_offset, "!=", array.keys()->length());
-    }
-
-    return ValidateOffsets(array);
+    return ValidateListArray(array);
   }
 
   Status Visit(const FixedSizeListArray& array) {
-    if (array.length() > 0 && !array.values()) {
+    const int64_t len = array.length();
+    const int64_t value_size = array.value_length();
+    if (len > 0 && !array.values()) {
       return Status::Invalid("values is null");
     }
-    if (array.value_length() < 0) {
-      return Status::Invalid("FixedSizeListArray has negative value length ",
-                             array.value_length());
+    if (value_size < 0) {
+      return Status::Invalid("FixedSizeListArray has negative value size ", value_size);
     }
-    if (array.values()->length() != array.length() * array.value_length()) {
-      return Status::Invalid(
-          "Values Length (", array.values()->length(), ") is not equal to the length (",
-          array.length(), ") multiplied by the list size (", array.value_length(), ")");
+    if (HasMultiplyOverflow(len, value_size) ||
+        array.values()->length() != len * value_size) {
+      return Status::Invalid("Values Length (", array.values()->length(),
+                             ") is not equal to the length (", len,
+                             ") multiplied by the value size (", value_size, ")");
     }
 
     return Status::OK();
diff --git a/testing b/testing
index 590e36d72..05c9e0307 160000
--- a/testing
+++ b/testing
@@ -1 +1 @@
-Subproject commit 590e36d72a0297bc1643b1c144f6c3aafa113078
+Subproject commit 05c9e03070ad5a09a4fd962c7839e8379e3bce96
