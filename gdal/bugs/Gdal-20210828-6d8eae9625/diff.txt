diff --git a/autotest/ogr/data/flatgeobuf/invalid_compoundcurve_non_contiguous_curves.fgb b/autotest/ogr/data/flatgeobuf/invalid_compoundcurve_non_contiguous_curves.fgb
new file mode 100644
index 0000000000..007d2bc43e
Binary files /dev/null and b/autotest/ogr/data/flatgeobuf/invalid_compoundcurve_non_contiguous_curves.fgb differ
diff --git a/autotest/ogr/data/flatgeobuf/invalid_polyhedralsurface_of_curvepolygon.fgb b/autotest/ogr/data/flatgeobuf/invalid_polyhedralsurface_of_curvepolygon.fgb
new file mode 100644
index 0000000000..bd6e1d5e33
Binary files /dev/null and b/autotest/ogr/data/flatgeobuf/invalid_polyhedralsurface_of_curvepolygon.fgb differ
diff --git a/autotest/ogr/ogr_flatgeobuf.py b/autotest/ogr/ogr_flatgeobuf.py
index ac416134f0..c54a58eb56 100644
--- a/autotest/ogr/ogr_flatgeobuf.py
+++ b/autotest/ogr/ogr_flatgeobuf.py
@@ -795,6 +795,19 @@ def test_ogr_flatgeobuf_ossfuzz_bug_29462():
     assert not gdal.VSIStatL('/vsimem/test.fgb')
 
 
+###############################################################################
+# Check that we don't crash or leak
+
+
+@pytest.mark.parametrize("filename", ['data/flatgeobuf/invalid_polyhedralsurface_of_curvepolygon.fgb',
+                                      'data/flatgeobuf/invalid_compoundcurve_non_contiguous_curves.fgb'])
+def test_ogr_flatgeobuf_read_invalid_geometries(filename):
+    with gdaltest.error_handler():
+        ds = gdal.OpenEx(filename)
+        lyr = ds.GetLayer(0)
+        for f in lyr:
+            pass
+
 ###############################################################################
 
 
diff --git a/gdal/ogr/ogrsf_frmts/flatgeobuf/geometryreader.cpp b/gdal/ogr/ogrsf_frmts/flatgeobuf/geometryreader.cpp
index 096b310ae4..9609848e3a 100644
--- a/gdal/ogr/ogrsf_frmts/flatgeobuf/geometryreader.cpp
+++ b/gdal/ogr/ogrsf_frmts/flatgeobuf/geometryreader.cpp
@@ -294,7 +294,12 @@ OGRCompoundCurve *GeometryReader::readCompoundCurve()
         auto g = std::unique_ptr<OGRGeometry>(reader.read());
         if (dynamic_cast<OGRCurve *>(g.get()) == nullptr)
             return nullptr;
-        cc->addCurveDirectly(g.release()->toCurve());
+        auto poCurve = g.release()->toCurve();
+        if( cc->addCurveDirectly(poCurve) != OGRERR_NONE )
+        {
+            delete poCurve;
+            return nullptr;
+        }
     }
     return cc.release();
 }
@@ -356,9 +361,14 @@ OGRPolyhedralSurface *GeometryReader::readPolyhedralSurface()
     for (uoffset_t i = 0; i < parts->size(); i++) {
         GeometryReader reader { parts->Get(i), m_hasZ, m_hasM };
         auto g = std::unique_ptr<OGRGeometry>(reader.read());
-        if (dynamic_cast<OGRSurface *>(g.get()) == nullptr)
+        if (g == nullptr )
             return nullptr;
-        ps->addGeometryDirectly(g.release());
+        auto poSubGeom = g.release();
+        if( ps->addGeometryDirectly(poSubGeom) != OGRERR_NONE )
+        {
+            delete poSubGeom;
+            return nullptr;
+        }
     }
     return ps.release();
 }
