diff --git a/gn/sksl_tests.gni b/gn/sksl_tests.gni
index b3cd2d2bf3..dd2d243778 100644
--- a/gn/sksl_tests.gni
+++ b/gn/sksl_tests.gni
@@ -180,6 +180,7 @@ sksl_metal_tests = [
 sksl_spirv_tests = [
   "$_tests/sksl/spirv/LayoutMultipleOf4.sksl",
   "$_tests/sksl/spirv/LayoutOutOfOrder.sksl",
+  "$_tests/sksl/spirv/OpaqueTypeInArray.sksl",
 ]
 
 sksl_shared_tests = [
diff --git a/src/sksl/SkSLMemoryLayout.h b/src/sksl/SkSLMemoryLayout.h
index ca70610291..562f59db2d 100644
--- a/src/sksl/SkSLMemoryLayout.h
+++ b/src/sksl/SkSLMemoryLayout.h
@@ -8,6 +8,8 @@
 #ifndef SKIASL_MEMORYLAYOUT
 #define SKIASL_MEMORYLAYOUT
 
+#include <algorithm>
+
 #include "src/sksl/ir/SkSLType.h"
 
 namespace SkSL {
@@ -142,15 +144,21 @@ public:
     /**
      * Not all types are compatible with memory layout.
      */
-    size_t layoutIsSupported(const Type& type) const {
+    static size_t LayoutIsSupported(const Type& type) {
         switch (type.typeKind()) {
             case Type::TypeKind::kScalar:
             case Type::TypeKind::kEnum:
             case Type::TypeKind::kVector:
             case Type::TypeKind::kMatrix:
+                return true;
+
             case Type::TypeKind::kArray:
+                return LayoutIsSupported(type.componentType());
+
             case Type::TypeKind::kStruct:
-                return true;
+                return std::all_of(
+                        type.fields().begin(), type.fields().end(),
+                        [](const Type::Field& f) { return LayoutIsSupported(*f.fType); });
 
             default:
                 return false;
diff --git a/src/sksl/SkSLMetalCodeGenerator.cpp b/src/sksl/SkSLMetalCodeGenerator.cpp
index 3324fe6a81..aa74a42244 100644
--- a/src/sksl/SkSLMetalCodeGenerator.cpp
+++ b/src/sksl/SkSLMetalCodeGenerator.cpp
@@ -1240,7 +1240,7 @@ void MetalCodeGenerator::writeFields(const std::vector<Type::Field>& fields, int
     for (const auto& field: fields) {
         int fieldOffset = field.fModifiers.fLayout.fOffset;
         const Type* fieldType = field.fType;
-        if (!memoryLayout.layoutIsSupported(*fieldType)) {
+        if (!MemoryLayout::LayoutIsSupported(*fieldType)) {
             fErrors.error(parentOffset, "type '" + fieldType->name() + "' is not permitted here");
             return;
         }
diff --git a/src/sksl/SkSLSPIRVCodeGenerator.cpp b/src/sksl/SkSLSPIRVCodeGenerator.cpp
index 22a60f855d..e877822200 100644
--- a/src/sksl/SkSLSPIRVCodeGenerator.cpp
+++ b/src/sksl/SkSLSPIRVCodeGenerator.cpp
@@ -396,7 +396,7 @@ void SPIRVCodeGenerator::writeStruct(const Type& type, const MemoryLayout& memor
     size_t offset = 0;
     for (int32_t i = 0; i < (int32_t) type.fields().size(); i++) {
         const Type::Field& field = type.fields()[i];
-        if (!memoryLayout.layoutIsSupported(*field.fType)) {
+        if (!MemoryLayout::LayoutIsSupported(*field.fType)) {
             fErrors.error(type.fOffset, "type '" + field.fType->name() + "' is not permitted here");
             return;
         }
@@ -516,6 +516,10 @@ SpvId SPIRVCodeGenerator::getType(const Type& rawType, const MemoryLayout& layou
                 this->writeStruct(type, layout, result);
                 break;
             case Type::TypeKind::kArray: {
+                if (!MemoryLayout::LayoutIsSupported(type)) {
+                    fErrors.error(type.fOffset, "type '" + type.name() + "' is not permitted here");
+                    return this->nextId();
+                }
                 if (type.columns() > 0) {
                     IntLiteral count(fContext, -1, type.columns());
                     this->writeInstruction(SpvOpTypeArray, result,
@@ -2715,7 +2719,7 @@ SpvId SPIRVCodeGenerator::writeInterfaceBlock(const InterfaceBlock& intf, bool a
                                 fDefaultLayout;
     SpvId result = this->nextId();
     const Type* type = &intf.variable().type();
-    if (!memoryLayout.layoutIsSupported(*type)) {
+    if (!MemoryLayout::LayoutIsSupported(*type)) {
         fErrors.error(type->fOffset, "type '" + type->name() + "' is not permitted here");
         return this->nextId();
     }
diff --git a/tests/sksl/spirv/OpaqueTypeInArray.sksl b/tests/sksl/spirv/OpaqueTypeInArray.sksl
new file mode 100644
index 0000000000..db0c1d7002
--- /dev/null
+++ b/tests/sksl/spirv/OpaqueTypeInArray.sksl
@@ -0,0 +1,2 @@
+in sampler x[1];
+void main() {}
diff --git a/tests/sksl/spirv/golden/OpaqueTypeInArray.asm.frag b/tests/sksl/spirv/golden/OpaqueTypeInArray.asm.frag
new file mode 100644
index 0000000000..4b51580c19
--- /dev/null
+++ b/tests/sksl/spirv/golden/OpaqueTypeInArray.asm.frag
@@ -0,0 +1,4 @@
+### Compilation failed:
+
+error: 1: type 'sampler[1]' is not permitted here
+1 error
