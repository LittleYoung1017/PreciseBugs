diff --git a/resources/sksl/shared/Assignment.sksl b/resources/sksl/shared/Assignment.sksl
index 710e9a39ee..d238eadfbe 100644
--- a/resources/sksl/shared/Assignment.sksl
+++ b/resources/sksl/shared/Assignment.sksl
@@ -7,6 +7,9 @@ struct S {
     half4 ah4[5];
 };
 
+half4 globalVar;
+S globalStruct;
+
 half4 main() {
     /* assign to scalar */               int i; i = 0;
     /* assign to vector */               int4 i4; i4 = int4(1,2,3,4);
@@ -22,6 +25,9 @@ half4 main() {
     /* assign to struct swizzle */       s.h4.zxy = half3(9);
     /* assign to struct array swizzle */ s.ah4[2].yw = half2(5);
 
+    /* assign to global var */           globalVar = half4(0);
+    /* assign to global struct */        globalStruct.f = 0;
+
 // Not allowed in ES2
 //  /* assign to array idx by lookup */  ai[0] = 0; ai[ai[0]] = 0;
 
diff --git a/src/sksl/SkSLAnalysis.cpp b/src/sksl/SkSLAnalysis.cpp
index 38ceacc6f4..3952c99a4f 100644
--- a/src/sksl/SkSLAnalysis.cpp
+++ b/src/sksl/SkSLAnalysis.cpp
@@ -610,7 +610,8 @@ bool ProgramUsage::isDead(const Variable& v) const {
                              Modifiers::kVarying_Flag))) {
         return false;
     }
-    return !counts.fWrite || !counts.fRead;
+    // Consider the variable dead if it's never read and never written (besides the initial-value).
+    return !counts.fRead && (counts.fWrite <= (v.initialValue() ? 1 : 0));
 }
 
 int ProgramUsage::get(const FunctionDeclaration& f) const {
diff --git a/tests/sksl/shared/Assignment.asm.frag b/tests/sksl/shared/Assignment.asm.frag
index 5f0e3b4f46..5073148f6e 100644
--- a/tests/sksl/shared/Assignment.asm.frag
+++ b/tests/sksl/shared/Assignment.asm.frag
@@ -5,6 +5,13 @@ OpEntryPoint Fragment %_entrypoint "_entrypoint" %sk_FragColor %sk_Clockwise
 OpExecutionMode %_entrypoint OriginUpperLeft
 OpName %sk_FragColor "sk_FragColor"
 OpName %sk_Clockwise "sk_Clockwise"
+OpName %globalVar "globalVar"
+OpName %S "S"
+OpMemberName %S 0 "f"
+OpMemberName %S 1 "af"
+OpMemberName %S 2 "h4"
+OpMemberName %S 3 "ah4"
+OpName %globalStruct "globalStruct"
 OpName %_UniformBuffer "_UniformBuffer"
 OpMemberName %_UniformBuffer 0 "colorGreen"
 OpName %_entrypoint "_entrypoint"
@@ -17,11 +24,6 @@ OpName %ai "ai"
 OpName %ai4 "ai4"
 OpName %ah2x4 "ah2x4"
 OpName %af4 "af4"
-OpName %S "S"
-OpMemberName %S 0 "f"
-OpMemberName %S 1 "af"
-OpMemberName %S 2 "h4"
-OpMemberName %S 3 "ah4"
 OpName %s "s"
 OpName %l "l"
 OpName %r "r"
@@ -30,20 +32,7 @@ OpDecorate %sk_FragColor Location 0
 OpDecorate %sk_FragColor Index 0
 OpDecorate %sk_Clockwise RelaxedPrecision
 OpDecorate %sk_Clockwise BuiltIn FrontFacing
-OpMemberDecorate %_UniformBuffer 0 Offset 0
-OpMemberDecorate %_UniformBuffer 0 RelaxedPrecision
-OpDecorate %_UniformBuffer Block
-OpDecorate %10 Binding 0
-OpDecorate %10 DescriptorSet 0
-OpDecorate %57 RelaxedPrecision
-OpDecorate %_arr_int_int_1 ArrayStride 16
-OpDecorate %_arr_v4int_int_1 ArrayStride 16
-OpDecorate %_arr_mat3v3float_int_1 ArrayStride 48
-OpDecorate %70 RelaxedPrecision
-OpDecorate %71 RelaxedPrecision
-OpDecorate %72 RelaxedPrecision
-OpDecorate %69 RelaxedPrecision
-OpDecorate %_arr_v4float_int_1 ArrayStride 16
+OpDecorate %globalVar RelaxedPrecision
 OpDecorate %_arr_float_int_5 ArrayStride 16
 OpDecorate %_arr_v4float_int_5 ArrayStride 16
 OpMemberDecorate %S 0 Offset 0
@@ -52,14 +41,29 @@ OpMemberDecorate %S 2 Offset 96
 OpMemberDecorate %S 2 RelaxedPrecision
 OpMemberDecorate %S 3 Offset 112
 OpMemberDecorate %S 3 RelaxedPrecision
-OpDecorate %94 RelaxedPrecision
+OpDecorate %globalStruct RelaxedPrecision
+OpMemberDecorate %_UniformBuffer 0 Offset 0
+OpMemberDecorate %_UniformBuffer 0 RelaxedPrecision
+OpDecorate %_UniformBuffer Block
+OpDecorate %19 Binding 0
+OpDecorate %19 DescriptorSet 0
+OpDecorate %65 RelaxedPrecision
+OpDecorate %_arr_int_int_1 ArrayStride 16
+OpDecorate %_arr_v4int_int_1 ArrayStride 16
+OpDecorate %_arr_mat3v3float_int_1 ArrayStride 48
+OpDecorate %78 RelaxedPrecision
+OpDecorate %79 RelaxedPrecision
+OpDecorate %80 RelaxedPrecision
+OpDecorate %77 RelaxedPrecision
+OpDecorate %_arr_v4float_int_1 ArrayStride 16
 OpDecorate %98 RelaxedPrecision
-OpDecorate %116 RelaxedPrecision
-OpDecorate %124 RelaxedPrecision
-OpDecorate %125 RelaxedPrecision
-OpDecorate %126 RelaxedPrecision
-OpDecorate %129 RelaxedPrecision
+OpDecorate %102 RelaxedPrecision
+OpDecorate %123 RelaxedPrecision
+OpDecorate %131 RelaxedPrecision
+OpDecorate %132 RelaxedPrecision
 OpDecorate %133 RelaxedPrecision
+OpDecorate %136 RelaxedPrecision
+OpDecorate %140 RelaxedPrecision
 %float = OpTypeFloat 32
 %v4float = OpTypeVector %float 4
 %_ptr_Output_v4float = OpTypePointer Output %v4float
@@ -67,13 +71,21 @@ OpDecorate %133 RelaxedPrecision
 %bool = OpTypeBool
 %_ptr_Input_bool = OpTypePointer Input %bool
 %sk_Clockwise = OpVariable %_ptr_Input_bool Input
+%_ptr_Private_v4float = OpTypePointer Private %v4float
+%globalVar = OpVariable %_ptr_Private_v4float Private
+%int = OpTypeInt 32 1
+%int_5 = OpConstant %int 5
+%_arr_float_int_5 = OpTypeArray %float %int_5
+%_arr_v4float_int_5 = OpTypeArray %v4float %int_5
+%S = OpTypeStruct %float %_arr_float_int_5 %v4float %_arr_v4float_int_5
+%_ptr_Private_S = OpTypePointer Private %S
+%globalStruct = OpVariable %_ptr_Private_S Private
 %_UniformBuffer = OpTypeStruct %v4float
 %_ptr_Uniform__UniformBuffer = OpTypePointer Uniform %_UniformBuffer
-%10 = OpVariable %_ptr_Uniform__UniformBuffer Uniform
+%19 = OpVariable %_ptr_Uniform__UniformBuffer Uniform
 %void = OpTypeVoid
-%15 = OpTypeFunction %void
-%18 = OpTypeFunction %v4float
-%int = OpTypeInt 32 1
+%24 = OpTypeFunction %void
+%27 = OpTypeFunction %v4float
 %_ptr_Function_int = OpTypePointer Function %int
 %int_0 = OpConstant %int 0
 %v4int = OpTypeVector %int 4
@@ -82,7 +94,7 @@ OpDecorate %133 RelaxedPrecision
 %int_2 = OpConstant %int 2
 %int_3 = OpConstant %int 3
 %int_4 = OpConstant %int 4
-%31 = OpConstantComposite %v4int %int_1 %int_2 %int_3 %int_4
+%39 = OpConstantComposite %v4int %int_1 %int_2 %int_3 %int_4
 %v3float = OpTypeVector %float 3
 %mat3v3float = OpTypeMatrix %v3float 3
 %_ptr_Function_mat3v3float = OpTypePointer Function %mat3v3float
@@ -99,7 +111,7 @@ OpDecorate %133 RelaxedPrecision
 %float_0 = OpConstant %float 0
 %_ptr_Function_float = OpTypePointer Function %float
 %v2float = OpTypeVector %float 2
-%55 = OpConstantComposite %v2float %float_0 %float_0
+%63 = OpConstantComposite %v2float %float_0 %float_0
 %_arr_int_int_1 = OpTypeArray %int %int_1
 %_ptr_Function__arr_int_int_1 = OpTypePointer Function %_arr_int_int_1
 %_arr_v4int_int_1 = OpTypeArray %v4int %int_1
@@ -108,25 +120,23 @@ OpDecorate %133 RelaxedPrecision
 %_ptr_Function__arr_mat3v3float_int_1 = OpTypePointer Function %_arr_mat3v3float_int_1
 %_arr_v4float_int_1 = OpTypeArray %v4float %int_1
 %_ptr_Function__arr_v4float_int_1 = OpTypePointer Function %_arr_v4float_int_1
-%79 = OpConstantComposite %v4float %float_1 %float_1 %float_1 %float_1
-%int_5 = OpConstant %int 5
-%_arr_float_int_5 = OpTypeArray %float %int_5
-%_arr_v4float_int_5 = OpTypeArray %v4float %int_5
-%S = OpTypeStruct %float %_arr_float_int_5 %v4float %_arr_v4float_int_5
+%87 = OpConstantComposite %v4float %float_1 %float_1 %float_1 %float_1
 %_ptr_Function_S = OpTypePointer Function %S
-%91 = OpConstantComposite %v3float %float_9 %float_9 %float_9
-%95 = OpConstantComposite %v2float %float_5 %float_5
-%110 = OpConstantComposite %v4float %float_2 %float_2 %float_2 %float_2
+%95 = OpConstantComposite %v3float %float_9 %float_9 %float_9
+%99 = OpConstantComposite %v2float %float_5 %float_5
+%103 = OpConstantComposite %v4float %float_0 %float_0 %float_0 %float_0
+%_ptr_Private_float = OpTypePointer Private %float
+%117 = OpConstantComposite %v4float %float_2 %float_2 %float_2 %float_2
 %_ptr_Function_v3float = OpTypePointer Function %v3float
 %_ptr_Uniform_v4float = OpTypePointer Uniform %v4float
-%_entrypoint = OpFunction %void None %15
-%16 = OpLabel
-%17 = OpFunctionCall %v4float %main
-OpStore %sk_FragColor %17
+%_entrypoint = OpFunction %void None %24
+%25 = OpLabel
+%26 = OpFunctionCall %v4float %main
+OpStore %sk_FragColor %26
 OpReturn
 OpFunctionEnd
-%main = OpFunction %v4float None %18
-%19 = OpLabel
+%main = OpFunction %v4float None %27
+%28 = OpLabel
 %i = OpVariable %_ptr_Function_int Function
 %i4 = OpVariable %_ptr_Function_v4int Function
 %f3x3 = OpVariable %_ptr_Function_mat3v3float Function
@@ -139,85 +149,88 @@ OpFunctionEnd
 %l = OpVariable %_ptr_Function_float Function
 %r = OpVariable %_ptr_Function_float Function
 OpStore %i %int_0
-OpStore %i4 %31
-%46 = OpCompositeConstruct %v3float %float_1 %float_2 %float_3
-%47 = OpCompositeConstruct %v3float %float_4 %float_5 %float_6
-%48 = OpCompositeConstruct %v3float %float_7 %float_8 %float_9
-%45 = OpCompositeConstruct %mat3v3float %46 %47 %48
-OpStore %f3x3 %45
-%52 = OpAccessChain %_ptr_Function_float %x %int_3
-OpStore %52 %float_0
-%56 = OpLoad %v4float %x
-%57 = OpVectorShuffle %v4float %56 %55 5 4 2 3
-OpStore %x %57
-%61 = OpAccessChain %_ptr_Function_int %ai %int_0
-OpStore %61 %int_0
-%65 = OpAccessChain %_ptr_Function_v4int %ai4 %int_0
-OpStore %65 %31
-%70 = OpCompositeConstruct %v3float %float_1 %float_2 %float_3
-%71 = OpCompositeConstruct %v3float %float_4 %float_5 %float_6
-%72 = OpCompositeConstruct %v3float %float_7 %float_8 %float_9
-%69 = OpCompositeConstruct %mat3v3float %70 %71 %72
-%73 = OpAccessChain %_ptr_Function_mat3v3float %ah2x4 %int_0
-OpStore %73 %69
-%77 = OpAccessChain %_ptr_Function_v4float %af4 %int_0
-%78 = OpAccessChain %_ptr_Function_float %77 %int_0
-OpStore %78 %float_0
-%80 = OpAccessChain %_ptr_Function_v4float %af4 %int_0
-%81 = OpLoad %v4float %80
-%82 = OpVectorShuffle %v4float %81 %79 6 4 7 5
-OpStore %80 %82
-%89 = OpAccessChain %_ptr_Function_float %s %int_0
-OpStore %89 %float_0
-%90 = OpAccessChain %_ptr_Function_float %s %int_1 %int_1
-OpStore %90 %float_0
-%92 = OpAccessChain %_ptr_Function_v4float %s %int_2
-%93 = OpLoad %v4float %92
-%94 = OpVectorShuffle %v4float %93 %91 5 6 4 3
-OpStore %92 %94
-%96 = OpAccessChain %_ptr_Function_v4float %s %int_3 %int_2
+OpStore %i4 %39
+%54 = OpCompositeConstruct %v3float %float_1 %float_2 %float_3
+%55 = OpCompositeConstruct %v3float %float_4 %float_5 %float_6
+%56 = OpCompositeConstruct %v3float %float_7 %float_8 %float_9
+%53 = OpCompositeConstruct %mat3v3float %54 %55 %56
+OpStore %f3x3 %53
+%60 = OpAccessChain %_ptr_Function_float %x %int_3
+OpStore %60 %float_0
+%64 = OpLoad %v4float %x
+%65 = OpVectorShuffle %v4float %64 %63 5 4 2 3
+OpStore %x %65
+%69 = OpAccessChain %_ptr_Function_int %ai %int_0
+OpStore %69 %int_0
+%73 = OpAccessChain %_ptr_Function_v4int %ai4 %int_0
+OpStore %73 %39
+%78 = OpCompositeConstruct %v3float %float_1 %float_2 %float_3
+%79 = OpCompositeConstruct %v3float %float_4 %float_5 %float_6
+%80 = OpCompositeConstruct %v3float %float_7 %float_8 %float_9
+%77 = OpCompositeConstruct %mat3v3float %78 %79 %80
+%81 = OpAccessChain %_ptr_Function_mat3v3float %ah2x4 %int_0
+OpStore %81 %77
+%85 = OpAccessChain %_ptr_Function_v4float %af4 %int_0
+%86 = OpAccessChain %_ptr_Function_float %85 %int_0
+OpStore %86 %float_0
+%88 = OpAccessChain %_ptr_Function_v4float %af4 %int_0
+%89 = OpLoad %v4float %88
+%90 = OpVectorShuffle %v4float %89 %87 6 4 7 5
+OpStore %88 %90
+%93 = OpAccessChain %_ptr_Function_float %s %int_0
+OpStore %93 %float_0
+%94 = OpAccessChain %_ptr_Function_float %s %int_1 %int_1
+OpStore %94 %float_0
+%96 = OpAccessChain %_ptr_Function_v4float %s %int_2
 %97 = OpLoad %v4float %96
-%98 = OpVectorShuffle %v4float %97 %95 0 4 2 5
+%98 = OpVectorShuffle %v4float %97 %95 5 6 4 3
 OpStore %96 %98
+%100 = OpAccessChain %_ptr_Function_v4float %s %int_3 %int_2
+%101 = OpLoad %v4float %100
+%102 = OpVectorShuffle %v4float %101 %99 0 4 2 5
+OpStore %100 %102
+OpStore %globalVar %103
+%104 = OpAccessChain %_ptr_Private_float %globalStruct %int_0
+OpStore %104 %float_0
 OpStore %l %float_0
-%101 = OpAccessChain %_ptr_Function_int %ai %int_0
-%102 = OpLoad %int %101
-%103 = OpAccessChain %_ptr_Function_v4int %ai4 %int_0
-%104 = OpLoad %v4int %103
-%105 = OpCompositeExtract %int %104 0
-%106 = OpIAdd %int %102 %105
-OpStore %101 %106
-%107 = OpAccessChain %_ptr_Function_float %s %int_0
-OpStore %107 %float_1
-%108 = OpAccessChain %_ptr_Function_float %s %int_1 %int_0
-OpStore %108 %float_2
-%109 = OpAccessChain %_ptr_Function_v4float %s %int_2
-OpStore %109 %79
-%111 = OpAccessChain %_ptr_Function_v4float %s %int_3 %int_0
-OpStore %111 %110
-%112 = OpAccessChain %_ptr_Function_v4float %af4 %int_0
-%113 = OpLoad %v4float %112
-%114 = OpAccessChain %_ptr_Function_v3float %ah2x4 %int_0 %int_0
-%116 = OpLoad %v3float %114
-%117 = OpCompositeExtract %float %116 0
-%118 = OpVectorTimesScalar %v4float %113 %117
-OpStore %112 %118
-%119 = OpAccessChain %_ptr_Function_int %i4 %int_1
-%120 = OpLoad %int %119
-%121 = OpLoad %int %i
-%122 = OpIMul %int %120 %121
-OpStore %119 %122
-%123 = OpAccessChain %_ptr_Function_float %x %int_1
-%124 = OpLoad %float %123
-%125 = OpLoad %float %l
-%126 = OpFMul %float %124 %125
-OpStore %123 %126
-%127 = OpAccessChain %_ptr_Function_float %s %int_0
-%128 = OpLoad %float %127
-%129 = OpLoad %float %l
-%130 = OpFMul %float %128 %129
-OpStore %127 %130
-%131 = OpAccessChain %_ptr_Uniform_v4float %10 %int_0
-%133 = OpLoad %v4float %131
-OpReturnValue %133
+%108 = OpAccessChain %_ptr_Function_int %ai %int_0
+%109 = OpLoad %int %108
+%110 = OpAccessChain %_ptr_Function_v4int %ai4 %int_0
+%111 = OpLoad %v4int %110
+%112 = OpCompositeExtract %int %111 0
+%113 = OpIAdd %int %109 %112
+OpStore %108 %113
+%114 = OpAccessChain %_ptr_Function_float %s %int_0
+OpStore %114 %float_1
+%115 = OpAccessChain %_ptr_Function_float %s %int_1 %int_0
+OpStore %115 %float_2
+%116 = OpAccessChain %_ptr_Function_v4float %s %int_2
+OpStore %116 %87
+%118 = OpAccessChain %_ptr_Function_v4float %s %int_3 %int_0
+OpStore %118 %117
+%119 = OpAccessChain %_ptr_Function_v4float %af4 %int_0
+%120 = OpLoad %v4float %119
+%121 = OpAccessChain %_ptr_Function_v3float %ah2x4 %int_0 %int_0
+%123 = OpLoad %v3float %121
+%124 = OpCompositeExtract %float %123 0
+%125 = OpVectorTimesScalar %v4float %120 %124
+OpStore %119 %125
+%126 = OpAccessChain %_ptr_Function_int %i4 %int_1
+%127 = OpLoad %int %126
+%128 = OpLoad %int %i
+%129 = OpIMul %int %127 %128
+OpStore %126 %129
+%130 = OpAccessChain %_ptr_Function_float %x %int_1
+%131 = OpLoad %float %130
+%132 = OpLoad %float %l
+%133 = OpFMul %float %131 %132
+OpStore %130 %133
+%134 = OpAccessChain %_ptr_Function_float %s %int_0
+%135 = OpLoad %float %134
+%136 = OpLoad %float %l
+%137 = OpFMul %float %135 %136
+OpStore %134 %137
+%138 = OpAccessChain %_ptr_Uniform_v4float %19 %int_0
+%140 = OpLoad %v4float %138
+OpReturnValue %140
 OpFunctionEnd
diff --git a/tests/sksl/shared/Assignment.glsl b/tests/sksl/shared/Assignment.glsl
index 6fc986970e..c51df52023 100644
--- a/tests/sksl/shared/Assignment.glsl
+++ b/tests/sksl/shared/Assignment.glsl
@@ -7,6 +7,8 @@ struct S {
     vec4 h4;
     vec4 ah4[5];
 };
+vec4 globalVar;
+S globalStruct;
 vec4 main() {
     int i;
     i = 0;
@@ -31,6 +33,8 @@ vec4 main() {
     s.af[1] = 0.0;
     s.h4.zxy = vec3(9.0);
     s.ah4[2].yw = vec2(5.0);
+    globalVar = vec4(0.0);
+    globalStruct.f = 0.0;
     float l;
     float r;
     l = 0.0;
diff --git a/tests/sksl/shared/Assignment.metal b/tests/sksl/shared/Assignment.metal
index 1156ac7666..d4a5bfe5f7 100644
--- a/tests/sksl/shared/Assignment.metal
+++ b/tests/sksl/shared/Assignment.metal
@@ -15,8 +15,13 @@ struct Inputs {
 struct Outputs {
     float4 sk_FragColor [[color(0)]];
 };
-
+struct Globals {
+    float4 globalVar;
+    S globalStruct;
+};
 fragment Outputs fragmentMain(Inputs _in [[stage_in]], constant Uniforms& _uniforms [[buffer(0)]], bool _frontFacing [[front_facing]], float4 _fragCoord [[position]]) {
+    Globals _globals{{}, {}};
+    (void)_globals;
     Outputs _out;
     (void)_out;
     int i;
@@ -42,6 +47,8 @@ fragment Outputs fragmentMain(Inputs _in [[stage_in]], constant Uniforms& _unifo
     s.af[1] = 0.0;
     s.h4.zxy = float3(9.0);
     s.ah4[2].yw = float2(5.0);
+    _globals.globalVar = float4(0.0);
+    _globals.globalStruct.f = 0.0;
     float l;
     float r;
     l = 0.0;
