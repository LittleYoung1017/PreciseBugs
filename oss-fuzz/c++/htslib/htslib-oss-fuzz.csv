htslib-20220824-5036186	5036186	203f5bb	Wed Aug 24 09:53:47 2022 +0100	Fix n-squared complexity in sample line with many adjacent tabs	commit 503618637124b3bff51ac545f43378b2665d4691Author: Rob Davies <rmd+git@sanger.ac.uk>Date:   Mon Aug 22 18:44:30 2022 +0100    Fix n-squared complexity in sample line with many adjacent tabs        This could be triggered by a #CHROM line ending in something    like:        ...\tINFO\t\t\t\t\t\t ... many tabs ... \t\t\tfoo\n        Between each pair of tabs, bcf_hdr_add_sample_len() was called    with len = 0, as if from bcf_hdr_add_sample().  This made it use    strlen(s) instead of 0 as the sample name length, resulting in    the addition of a bogus sample name with lots of leading tabs.    The sample line parser then moved on to the next tab, and do    the same thing again with one fewer leading tab.        Fix by making bcf_hdr_add_sample_len() always use the passed-in    length, even if 0, allowing the empty sample name trap to do    its work.  bcf_hdr_add_sample() is updated to call strlen()    itself, and to also deal with the backwards-compatibility    check where it was permissible to call it with a NULL string.        Credit to OSS-Fuzz    Fixes oss-fuzz 47641	47641	vcf.c	93;140
htslib-20210414-c3ba302	c3ba302	83fd837	Wed Apr 14 17:29:57 2021 +0100	Update htscodecs to fix uninitialised access in name tokeniser	commit c3ba3026d6cebc30bb6c50e6171473db3cd8d445Author: Rob Davies <rmd+git@sanger.ac.uk>Date:   Wed Apr 14 17:29:57 2021 +0100    Update htscodecs to fix uninitialised access in name tokeniser        Credit to OSS-Fuzz    Fixes oss-fuzz 32688	32688	htscodecs	
htslib-20210303-848b301	848b301	0380c7b	Wed Mar 3 23:35:01 2021 +0000	Fix leak of uncompressed_block on bgzf_read_init() error	commit 848b301d6f04a44fa49b08987085eb040bbe1fc3Author: Rob Davies <rmd+git@sanger.ac.uk>Date:   Wed Mar 3 23:35:01 2021 +0000    Fix leak of uncompressed_block on bgzf_read_init() error        Detected by making an RAZF file, but it could also leak    on failure to create the cache.        Credit to OSS-Fuzz    Fixes oss-fuzz 31665	31665	bgzf.c	406
htslib-20210222-c671329	c671329	a117153	Mon Feb 22 17:47:39 2021 +0000	Pull in htscodecs name tokeniser uninitialised memory access fix	commit c6713293758bd8a852203bf08df0396a33d9a23cAuthor: Rob Davies <rmd+git@sanger.ac.uk>Date:   Mon Feb 22 15:23:30 2021 +0000    Pull in htscodecs name tokeniser uninitialised memory access fix        Credit to OSS-Fuzz    Fixes oss-fuzz 31210    Fixes oss-fuzz 31215	31210	htscodecs	
htslib-20210205-8aa9bcd	8aa9bcd	d9890a9	Fri Feb 5 12:13:22 2021 +0000	Fix a minor memory leak in XRLE encoding.	commit 8aa9bcd10c782c8a03adde978f9ef169ebaf4573Author: James Bonfield <jkb@sanger.ac.uk>Date:   Thu Feb 4 11:58:43 2021 +0000    Fix a minor memory leak in XRLE encoding.        Credit to OSS-Fuzz    Fixes oss-fuzz 30260	30260	cram/cram_codecs.c	2130
htslib-20210129-a6e89c5	a6e89c5	8510a0d	Fri Jan 29 11:13:54 2021 +0000	Pull in htscodecs fuzzing bug fixes	commit a6e89c59e976023afb66536e5162a697d298308cAuthor: Rob Davies <rmd+git@sanger.ac.uk>Date:   Fri Jan 29 09:07:25 2021 +0000    Pull in htscodecs fuzzing bug fixes        Credit to OSS-Fuzz        - Fix undefined shifts          Fixes oss-fuzz 29995      Fixes oss-fuzz 30017        - Protect against no tokens present in tok_name3 codec          Fixes oss-fuzz 30008	29995	htscodecs	
htslib-20210129-8510a0d	8510a0d	64808c2	Fri Jan 29 11:13:54 2021 +0000	Fix more OSS fuzz reported issues.	commit 8510a0d2a5ac878f1a4b9a6683580bcdfa9196d3Author: James Bonfield <jkb@sanger.ac.uk>Date:   Thu Jan 28 17:06:25 2021 +0000    Fix more OSS fuzz reported issues.        Credit to OSS-Fuzz        - Add bounds check in cram_const_decode_init.          I've checked and this is the only use of the varint decoders that      didn't have a bounds check.  Suitably sniffed out by the fuzzer.      Good fuzzer!          Fixes oss-fuzz 30012        - Free the sub-encoding when initialising XRLE encoding fails due to      malformed streams.  This removes a tiny memory leak.          Fixes oss-fuzz 30014	30012	cram/cram_codecs.c	964;2118;2175
htslib-20210127-9d9e60c	9d9e60c	42b365f	Wed Jan 27 11:32:04 2021 +0000	Update htscodecs to pull in more bug fixes	commit 9d9e60c83487a8ac4644079e9636e34a9dd4bb08Author: Rob Davies <rmd+git@sanger.ac.uk>Date:   Wed Jan 27 11:32:04 2021 +0000    Update htscodecs to pull in more bug fixes        Fixes various issues found by fuzzing.        Credit to OSS-Fuzz        - Removed undefined shift (malformed input data)      Fixes oss-fuzz 29817        - Fix overflow in filling out sfb[] array      Fixes oss-fuzz 29931        - Fix RLE with zero-byte meta-data block      Fixes oss-fuzz 29939        - Fix rle_decode memory tidyup      Fixes oss-fuzz 29935        - Fix undefined shift in tokenise_name3.c      Fixes oss-fuzz 29956	29817	htscodecs	
htslib-20210125-90fef73	90fef73	a01a139	Mon Jan 25 14:04:53 2021 +0000	More OSS-Fuzz detected fixes	commit 90fef7300c75ca6b8834da0dcb710e27d599324eAuthor: James Bonfield <jkb@sanger.ac.uk>Date:   Mon Jan 25 09:32:50 2021 +0000    More OSS-Fuzz detected fixes        Credit to OSS-Fuzz        - Clean up properly when XPACK output values are out of the accepted      range.          Fixes oss-fuzz 29827        - Add "cp_end" arg to varint_get* funcs in cram_varint_decode_init so      reading beyond the buffer can be spotted.          Fixes oss-fuzz 29837        - Set b->uncomp_size for FQZ decoder.  Already done in other codecs,      just accidentally missed here.  Without it, it invalidates the      boundary check in int32_get_blk.          Fixes oss-fuzz 29855      Fixes oss-fuzz 29908        - Fixed memory leak in XDELTA when recovering from malformed data stream.          Fixes oss-fuzz 29858	29827	cram/cram_codecs.c;cram/cram_io.c	745;775;1414;1714;1749;1674
htslib-20210125-a01a139	a01a139	40afaaa	Mon Jan 25 09:59:48 2021 +0000	Pull in htscodecs bug fixes	commit a01a139ac1fa365a688ec8734d62ef859a8bc416Author: James Bonfield <jkb@sanger.ac.uk>Date:   Fri Jan 22 18:49:40 2021 +0000    Pull in htscodecs bug fixes        * Fix 1-byte buffer overruns in arith_uncompress_to() and      rans_uncompress_to_4x16()    * Fixes various cases of undefined behaviour.    * Adds a limit on max_names in the name tokeniser to prevent      excess memory use.        Credit to OSS-Fuzz    Fixes oss-fuzz 29785    Fixes oss-fuzz 29789    Fixes oss-fuzz 29792    Fixes oss-fuzz 29795    Fixes oss-fuzz 29802	29785	htscodecs	
htslib-20210125-40afaaa	40afaaa	23a6749	Mon Jan 25 09:59:49 2021 +0000	Fixed some more malformed data bugs, this time XPACK.	commit 40afaaa5bf7e3f9cd6d6d9d9d8ae26496df82aeaAuthor: James Bonfield <jkb@sanger.ac.uk>Date:   Fri Jan 22 14:37:37 2021 +0000    Fixed some more malformed data bugs, this time XPACK.        This is an experimental encoding for CRAM 4.0 draft.  We protect    against nbits and nval being out of range.  Fixes a buffer overrun.        Credit to OSS-Fuzz    Fixes oss-fuzz 29827	29827	cram/cram_codecs.c	1400;1408
htslib-20210125-f423578	f423578	79d8c94	Mon Jan 25 09:59:48 2021 +0000	Fix memory leak with malformed huffman data.	commit f4235784d7feb75ed0a15afa3f624029172c39bbAuthor: James Bonfield <jkb@sanger.ac.uk>Date:   Thu Jan 21 17:00:03 2021 +0000    Fix memory leak with malformed huffman data.        Credit to OSS-Fuzz    Fixes oss-fuzz 29780	29780	cram/cram_codecs.c	2758;2794
htslib-20210125-79d8c94	79d8c94	1c93061	Mon Jan 25 09:59:48 2021 +0000	Fix some fuzz issues in CRAM 3.1.	commit 79d8c948e6aaec343e6f07d9bab9f7edcf1fa368Author: James Bonfield <jkb@sanger.ac.uk>Date:   Thu Jan 21 16:42:34 2021 +0000    Fix some fuzz issues in CRAM 3.1.        Credit to OSS-Fuzz        - Check for return value from RANS4x16 and ARITH codecs so a valid      stream that is the wrong size still frees up the memory.      Fixes oss-fuzz 29786      Fixes oss-fuzz 29787      Fixes oss-fuzz 29796        - Check for return value from TOK3 codec so error is bubbled up      Fixes oss-fuzz 29789	29786	cram/cram_io.c	1680;1696;1712
htslib-20201106-b710781	b710781	0ad12d7	Fri Nov 6 08:58:22 2020 +0000	Fix memory leak on bad input in vcf_parse_info()	commit b710781df0d9bb6f665756316653554fe32e5c68Author: Rob Davies <rmd+git@sanger.ac.uk>Date:   Wed Nov 4 18:52:24 2020 +0000    Fix memory leak on bad input in vcf_parse_info()        Credit to OSS-Fuzz    Fixes oss-fuzz 26968	26968	vcf.c	2709;2736;2757;2854
htslib-20200715-dcd4b73	dcd4b73	df31e59	Wed Jul 15 09:26:33 2020 +0100	Fix check for VCF record size	commit dcd4b7304941a8832fba2d0fc4c1e716e7a4e72cAuthor: Rob Davies <rmd+git@sanger.ac.uk>Date:   Mon Jul 13 11:48:49 2020 +0100    Fix check for VCF record size        The check for excessive record size in vcf_parse_format() only    looked at individual fields.  It was therefore possible to    exceed the limit and overflow fmt_aux_t::offset by having    multiple fields with a combined size that went over INT_MAX.    Fix by including the amount of memory used so far in the check.        Credit to OSS-Fuzz    Fixes oss-fuzz 24097	24097	vcf.c	2354
htslib-20200515-382867a	382867a	fc431eb	Fri May 15 17:19:35 2020 +0100	Fix reference length check. (PR #1068)	commit 382867a850b74e7285166a67ee3243560cd974acAuthor: Valeriu Ohan <vo2@sanger.ac.uk>Date:   Fri May 15 17:19:35 2020 +0100    Fix reference length check. (PR #1068)        Credit to OSS-Fuzz    Fixes oss-fuzz 22231	22231	cram/cram_decode.c	2211
htslib-20200407-2e36fa6	2e36fa6	f58a6f3	Tue Apr 7 16:07:13 2020 +0100	Fix memory leak on failure in cram_decode_slice()	commit 2e36fa6ea4d753fc9aac0c6259078bdc9720a930Author: Rob Davies <rmd+git@sanger.ac.uk>Date:   Tue Mar 31 15:29:30 2020 +0100    Fix memory leak on failure in cram_decode_slice()        Make the error case decrement the reference count on any used    refs and free the refs array.        Credit to OSS-Fuzz    Fixes oss-fuzz 21393	21393	cram/cram_decode.c	2335;2351;2371;2390;2430;2458;2467;2486;2503;2528;2553;2565;2581;2628;2638;2654;2677;2708;2743
htslib-20200311-29c294e	29c294e	8ff8bb3	Wed Mar 11 12:21:29 2020 +0000	Fixed a raft of integer overflows in VCF land.	commit 29c294e6842a56ba3b9a24a24a5f6de1575b0961Author: James Bonfield <jkb@sanger.ac.uk>Date:   Tue Mar 10 10:31:45 2020 +0000    Fixed a raft of integer overflows in VCF land.        - Cast data into size_t before multiplication to avoid wrapping around      int32.        - Added checks for return values to align_mem and ks_resize        - Simplified the byzantine calculation in align_mem        - Fixed kroundup_size_t and kroundup32 so they cannot wrap around to      zero and turn the realloc into a free.        - Also added a check for ~2Gb on total length of FORMAT fields, which      nullifies the need for some of the above.  We may wish to remove      this at some point if we want to cope with truely mammoth      multi-sample data, and the above fixes means doing so will not      expose bugs.          However for now this check adds protection against malformed data      creating excessive memory usage and CPU requirements.        Credit to OSS-Fuzz    Fixes oss-fuzz 21139    Fixes oss-fuzz 20881	21139	htslib/kstring.h;vcf.c	38;49;2193;2338;2367;2391;2421;2454;2485;3038
htslib-20200219-8fc5c63	8fc5c63	5fef1d3	Wed Feb 19 10:29:14 2020 +0000	Fix integer overflow in cram_read_slice	commit 8fc5c63123c61ab33afc26264a220c5264cbdb88Author: Rob Davies <rmd+git@sanger.ac.uk>Date:   Mon Feb 17 11:24:11 2020 +0000    Fix integer overflow in cram_read_slice        Occurs when block content_id is INT_MIN, which cannot be    negated in an int.        Casting to uint32_t fixes the problem and allows checks for    negative values to be eliminated.  Blocks with negative    content_id will end up in different hash buckets, but that    shouldn't matter as long as cram_get_block_by_id() is    consistent with cram_read_slice().        Credit to OSS-Fuzz    Fixes oss-fuzz 20102	20102	cram/cram_io.c;cram/cram_io.h	3852;477
htslib-20200203-39acb95	39acb95	ecf0216	Mon Feb 3 12:00:52 2020 +0000	Fixed nuances between gzip vs bgzf compressed files.	commit 39acb9583128ede53d0562a8055786cec0e5ab40Author: James Bonfield <jkb@sanger.ac.uk>Date:   Mon Feb 3 11:52:52 2020 +0000    Fixed nuances between gzip vs bgzf compressed files.        Credit to OSS-Fuzz    Fixes oss-fuzz 20473        This also fixes the indexing tests forbidding samtools index on    gzipped or naked SAM and BAMs.  Previously the index command did not    fail, but gave broken indices.        Ironically with 1.10 samtools index on a totally raw uncompressed BAM    did actually start working (but not gzipped BAM or raw/gzipped SAM).    This was not by design and the indices produced couldn't be used by    1.9 and prior so it's safest to forbid this case too.        Also added documentation on the ambiguous "is_bgzf" field given this    is set for BAM files, even if ungzipped.  It's purely a flag on usage    of the bgzf_open/read functions, which can read uncompressed data, and    has nothing to do with the file format actually being BGZF.	20473	htslib/hts.h;sam.c	231;848;1402;1620;1641;1650;2692;2731;3284
htslib-20200108-223a124	223a124	736050d	Wed Jan 8 11:27:08 2020 +0000	Fix possible undefined shift in cram_byte_array_stop_decode_init() (#1009)	commit 223a12498ba17bcedd30764398b4904d26f1e9c0Author: daviesrob <rmd+git@sanger.ac.uk>Date:   Wed Jan 8 11:27:08 2020 +0000    Fix possible undefined shift in cram_byte_array_stop_decode_init() (#1009)        Only happens if high bit of last external block content_id byte    is set.  This is unlikely in real data.        Credit to OSS-Fuzz    Fixes oss-fuzz 18141    Fixes oss-fuzz 19564	18141	cram/cram_codecs.c	1926
htslib-20191115-d58f21e	d58f21e	71d8683	Fri Nov 15 09:12:14 2019 +0000	Fix possible integer overflows in sam_parse1()	commit d58f21ebafdb653dcb3154f581f4102f731807f5Author: Rob Davies <rmd+git@sanger.ac.uk>Date:   Thu Nov 14 10:04:26 2019 +0000    Fix possible integer overflows in sam_parse1()        bam_cigar2rlen() returns hts_pos_t, so store the result in    a variable of the same type.        Add a check to ensure c->pos + reflen is within the range    we support.        Credit to OSS-Fuzz    Fixes oss-fuzz 18916	18916	sam.c	1915;1979
