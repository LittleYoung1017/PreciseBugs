diff --git a/resources/sksl/shared/Assignment.sksl b/resources/sksl/shared/Assignment.sksl
index 21ab4bd16a..f678b3eb52 100644
--- a/resources/sksl/shared/Assignment.sksl
+++ b/resources/sksl/shared/Assignment.sksl
@@ -41,6 +41,8 @@ half4 main(float2 coords) {
     /* assign to struct unary plus */    +s.f = 1; +s.af[0] = 2;
                                          +s.h4 = half4(1); +s.ah4[0] = half4(2);
 
+    /* repeat assignment */              float repeat; repeat = repeat = 1.0;
+
     keepAlive(af4[0][0]);
     keepAlive(ah3x3[0][0][0]);
     keepAlive(i);
@@ -51,6 +53,7 @@ half4 main(float2 coords) {
     keepAlive(s.f);
     keepAlive(l);
     keepAlive(f3x3[0][0]);
+    keepAlive(repeat);
 
     return colorGreen;
 }
diff --git a/src/sksl/SkSLAnalysis.cpp b/src/sksl/SkSLAnalysis.cpp
index 7a619a66df..768a6ab417 100644
--- a/src/sksl/SkSLAnalysis.cpp
+++ b/src/sksl/SkSLAnalysis.cpp
@@ -381,6 +381,27 @@ bool Analysis::ContainsRTAdjust(const Expression& expr) {
     return visitor.visitExpression(expr);
 }
 
+bool Analysis::ContainsVariable(const Expression& expr, const Variable& var) {
+    class ContainsVariableVisitor : public ProgramVisitor {
+    public:
+        ContainsVariableVisitor(const Variable* v) : fVariable(v) {}
+
+        bool visitExpression(const Expression& expr) override {
+            if (expr.is<VariableReference>() &&
+                expr.as<VariableReference>().variable() == fVariable) {
+                return true;
+            }
+            return INHERITED::visitExpression(expr);
+        }
+
+        using INHERITED = ProgramVisitor;
+        const Variable* fVariable;
+    };
+
+    ContainsVariableVisitor visitor{&var};
+    return visitor.visitExpression(expr);
+}
+
 bool Analysis::IsCompileTimeConstant(const Expression& expr) {
     class IsCompileTimeConstantVisitor : public ProgramVisitor {
     public:
diff --git a/src/sksl/SkSLAnalysis.h b/src/sksl/SkSLAnalysis.h
index 57b0721f9f..9cd88d665e 100644
--- a/src/sksl/SkSLAnalysis.h
+++ b/src/sksl/SkSLAnalysis.h
@@ -86,6 +86,9 @@ bool CheckProgramStructure(const Program& program, bool enforceSizeLimit);
 /** Determines if `expr` contains a reference to the variable sk_RTAdjust. */
 bool ContainsRTAdjust(const Expression& expr);
 
+/** Determines if `expr` contains a reference to variable `var`. */
+bool ContainsVariable(const Expression& expr, const Variable& var);
+
 /** Determines if `expr` has any side effects. (Is the expression state-altering or pure?) */
 bool HasSideEffects(const Expression& expr);
 
diff --git a/src/sksl/ir/SkSLFunctionDefinition.cpp b/src/sksl/ir/SkSLFunctionDefinition.cpp
index 91d587e0b2..dcb6b8cf98 100644
--- a/src/sksl/ir/SkSLFunctionDefinition.cpp
+++ b/src/sksl/ir/SkSLFunctionDefinition.cpp
@@ -177,6 +177,11 @@ std::unique_ptr<FunctionDefinition> FunctionDefinition::Convert(const Context& c
                         if (varRef.variable() != vardecl->var()) {
                             break;
                         }
+                        // The init-expression must not reference the variable.
+                        // `int x; x = x = 0;` is legal SkSL, but `int x = x = 0;` is not.
+                        if (Analysis::ContainsVariable(*binaryExpr.right(), *varRef.variable())) {
+                            break;
+                        }
                         // We found a match! Move the init-expression directly onto the vardecl, and
                         // turn the assignment into a no-op.
                         vardecl->value() = std::move(binaryExpr.right());
diff --git a/tests/sksl/shared/Assignment.asm.frag b/tests/sksl/shared/Assignment.asm.frag
index 4afc9c707f..70811cfe4f 100644
--- a/tests/sksl/shared/Assignment.asm.frag
+++ b/tests/sksl/shared/Assignment.asm.frag
@@ -29,6 +29,7 @@ OpName %ah3x3 "ah3x3"
 OpName %af4 "af4"
 OpName %s "s"
 OpName %l "l"
+OpName %repeat "repeat"
 OpDecorate %sk_Clockwise BuiltIn FrontFacing
 OpDecorate %sk_FragColor RelaxedPrecision
 OpDecorate %sk_FragColor Location 0
@@ -59,16 +60,16 @@ OpDecorate %108 RelaxedPrecision
 OpDecorate %111 RelaxedPrecision
 OpDecorate %112 RelaxedPrecision
 OpDecorate %l RelaxedPrecision
-OpDecorate %137 RelaxedPrecision
 OpDecorate %138 RelaxedPrecision
-OpDecorate %140 RelaxedPrecision
-OpDecorate %162 RelaxedPrecision
+OpDecorate %139 RelaxedPrecision
+OpDecorate %141 RelaxedPrecision
 OpDecorate %163 RelaxedPrecision
-OpDecorate %165 RelaxedPrecision
-OpDecorate %171 RelaxedPrecision
+OpDecorate %164 RelaxedPrecision
+OpDecorate %166 RelaxedPrecision
 OpDecorate %172 RelaxedPrecision
-OpDecorate %174 RelaxedPrecision
-OpDecorate %183 RelaxedPrecision
+OpDecorate %173 RelaxedPrecision
+OpDecorate %175 RelaxedPrecision
+OpDecorate %188 RelaxedPrecision
 %bool = OpTypeBool
 %_ptr_Input_bool = OpTypePointer Input %bool
 %sk_Clockwise = OpVariable %_ptr_Input_bool Input
@@ -177,16 +178,18 @@ OpFunctionEnd
 %af4 = OpVariable %_ptr_Function__arr_v4float_int_1 Function
 %s = OpVariable %_ptr_Function_S Function
 %l = OpVariable %_ptr_Function_float Function
-%131 = OpVariable %_ptr_Function_float Function
-%138 = OpVariable %_ptr_Function_float Function
-%142 = OpVariable %_ptr_Function_int Function
-%147 = OpVariable %_ptr_Function_int Function
-%152 = OpVariable %_ptr_Function_int Function
-%158 = OpVariable %_ptr_Function_int Function
-%163 = OpVariable %_ptr_Function_float Function
-%168 = OpVariable %_ptr_Function_float Function
-%172 = OpVariable %_ptr_Function_float Function
-%178 = OpVariable %_ptr_Function_float Function
+%repeat = OpVariable %_ptr_Function_float Function
+%132 = OpVariable %_ptr_Function_float Function
+%139 = OpVariable %_ptr_Function_float Function
+%143 = OpVariable %_ptr_Function_int Function
+%148 = OpVariable %_ptr_Function_int Function
+%153 = OpVariable %_ptr_Function_int Function
+%159 = OpVariable %_ptr_Function_int Function
+%164 = OpVariable %_ptr_Function_float Function
+%169 = OpVariable %_ptr_Function_float Function
+%173 = OpVariable %_ptr_Function_float Function
+%179 = OpVariable %_ptr_Function_float Function
+%183 = OpVariable %_ptr_Function_float Function
 OpStore %i %int_0
 OpStore %i4 %57
 OpStore %f3x3 %74
@@ -239,69 +242,76 @@ OpStore %124 %float_2
 OpStore %125 %97
 %127 = OpAccessChain %_ptr_Function_v4float %s %int_3 %int_0
 OpStore %127 %126
-%128 = OpAccessChain %_ptr_Function_v4float %af4 %int_0
-%129 = OpAccessChain %_ptr_Function_float %128 %int_0
-%130 = OpLoad %float %129
-OpStore %131 %130
-%132 = OpFunctionCall %void %keepAlive_vf %131
-%133 = OpLoad %float %131
-OpStore %129 %133
-%134 = OpAccessChain %_ptr_Function_v3float %ah3x3 %int_0 %int_0
-%136 = OpAccessChain %_ptr_Function_float %134 %int_0
-%137 = OpLoad %float %136
-OpStore %138 %137
-%139 = OpFunctionCall %void %keepAlive_vh %138
-%140 = OpLoad %float %138
-OpStore %136 %140
-%141 = OpLoad %int %i
-OpStore %142 %141
-%143 = OpFunctionCall %void %keepAlive_vi %142
-%144 = OpLoad %int %142
-OpStore %i %144
-%145 = OpAccessChain %_ptr_Function_int %i4 %int_1
-%146 = OpLoad %int %145
-OpStore %147 %146
-%148 = OpFunctionCall %void %keepAlive_vi %147
-%149 = OpLoad %int %147
-OpStore %145 %149
-%150 = OpAccessChain %_ptr_Function_int %ai %int_0
-%151 = OpLoad %int %150
-OpStore %152 %151
-%153 = OpFunctionCall %void %keepAlive_vi %152
-%154 = OpLoad %int %152
-OpStore %150 %154
-%155 = OpAccessChain %_ptr_Function_v4int %ai4 %int_0
-%156 = OpAccessChain %_ptr_Function_int %155 %int_0
-%157 = OpLoad %int %156
-OpStore %158 %157
-%159 = OpFunctionCall %void %keepAlive_vi %158
-%160 = OpLoad %int %158
-OpStore %156 %160
-%161 = OpAccessChain %_ptr_Function_float %x %int_1
-%162 = OpLoad %float %161
-OpStore %163 %162
-%164 = OpFunctionCall %void %keepAlive_vh %163
-%165 = OpLoad %float %163
-OpStore %161 %165
-%166 = OpAccessChain %_ptr_Function_float %s %int_0
-%167 = OpLoad %float %166
-OpStore %168 %167
-%169 = OpFunctionCall %void %keepAlive_vf %168
-%170 = OpLoad %float %168
-OpStore %166 %170
-%171 = OpLoad %float %l
-OpStore %172 %171
-%173 = OpFunctionCall %void %keepAlive_vh %172
-%174 = OpLoad %float %172
-OpStore %l %174
-%175 = OpAccessChain %_ptr_Function_v3float %f3x3 %int_0
-%176 = OpAccessChain %_ptr_Function_float %175 %int_0
-%177 = OpLoad %float %176
-OpStore %178 %177
-%179 = OpFunctionCall %void %keepAlive_vf %178
-%180 = OpLoad %float %178
-OpStore %176 %180
-%181 = OpAccessChain %_ptr_Uniform_v4float %22 %int_0
-%183 = OpLoad %v4float %181
-OpReturnValue %183
+OpStore %repeat %float_1
+OpStore %repeat %float_1
+%129 = OpAccessChain %_ptr_Function_v4float %af4 %int_0
+%130 = OpAccessChain %_ptr_Function_float %129 %int_0
+%131 = OpLoad %float %130
+OpStore %132 %131
+%133 = OpFunctionCall %void %keepAlive_vf %132
+%134 = OpLoad %float %132
+OpStore %130 %134
+%135 = OpAccessChain %_ptr_Function_v3float %ah3x3 %int_0 %int_0
+%137 = OpAccessChain %_ptr_Function_float %135 %int_0
+%138 = OpLoad %float %137
+OpStore %139 %138
+%140 = OpFunctionCall %void %keepAlive_vh %139
+%141 = OpLoad %float %139
+OpStore %137 %141
+%142 = OpLoad %int %i
+OpStore %143 %142
+%144 = OpFunctionCall %void %keepAlive_vi %143
+%145 = OpLoad %int %143
+OpStore %i %145
+%146 = OpAccessChain %_ptr_Function_int %i4 %int_1
+%147 = OpLoad %int %146
+OpStore %148 %147
+%149 = OpFunctionCall %void %keepAlive_vi %148
+%150 = OpLoad %int %148
+OpStore %146 %150
+%151 = OpAccessChain %_ptr_Function_int %ai %int_0
+%152 = OpLoad %int %151
+OpStore %153 %152
+%154 = OpFunctionCall %void %keepAlive_vi %153
+%155 = OpLoad %int %153
+OpStore %151 %155
+%156 = OpAccessChain %_ptr_Function_v4int %ai4 %int_0
+%157 = OpAccessChain %_ptr_Function_int %156 %int_0
+%158 = OpLoad %int %157
+OpStore %159 %158
+%160 = OpFunctionCall %void %keepAlive_vi %159
+%161 = OpLoad %int %159
+OpStore %157 %161
+%162 = OpAccessChain %_ptr_Function_float %x %int_1
+%163 = OpLoad %float %162
+OpStore %164 %163
+%165 = OpFunctionCall %void %keepAlive_vh %164
+%166 = OpLoad %float %164
+OpStore %162 %166
+%167 = OpAccessChain %_ptr_Function_float %s %int_0
+%168 = OpLoad %float %167
+OpStore %169 %168
+%170 = OpFunctionCall %void %keepAlive_vf %169
+%171 = OpLoad %float %169
+OpStore %167 %171
+%172 = OpLoad %float %l
+OpStore %173 %172
+%174 = OpFunctionCall %void %keepAlive_vh %173
+%175 = OpLoad %float %173
+OpStore %l %175
+%176 = OpAccessChain %_ptr_Function_v3float %f3x3 %int_0
+%177 = OpAccessChain %_ptr_Function_float %176 %int_0
+%178 = OpLoad %float %177
+OpStore %179 %178
+%180 = OpFunctionCall %void %keepAlive_vf %179
+%181 = OpLoad %float %179
+OpStore %177 %181
+%182 = OpLoad %float %repeat
+OpStore %183 %182
+%184 = OpFunctionCall %void %keepAlive_vf %183
+%185 = OpLoad %float %183
+OpStore %repeat %185
+%186 = OpAccessChain %_ptr_Uniform_v4float %22 %int_0
+%188 = OpLoad %v4float %186
+OpReturnValue %188
 OpFunctionEnd
diff --git a/tests/sksl/shared/Assignment.glsl b/tests/sksl/shared/Assignment.glsl
index 032fa88440..bde509d678 100644
--- a/tests/sksl/shared/Assignment.glsl
+++ b/tests/sksl/shared/Assignment.glsl
@@ -45,6 +45,8 @@ vec4 main() {
     s.af[0] = 2.0;
     s.h4 = vec4(1.0);
     s.ah4[0] = vec4(2.0);
+    float repeat;
+    repeat = (repeat = 1.0);
     keepAlive_vf(af4[0].x);
     keepAlive_vh(ah3x3[0][0].x);
     keepAlive_vi(i);
@@ -55,5 +57,6 @@ vec4 main() {
     keepAlive_vf(s.f);
     keepAlive_vh(l);
     keepAlive_vf(f3x3[0].x);
+    keepAlive_vf(repeat);
     return colorGreen;
 }
diff --git a/tests/sksl/shared/Assignment.hlsl b/tests/sksl/shared/Assignment.hlsl
index d98683aeb3..3d2f4d08c4 100644
--- a/tests/sksl/shared/Assignment.hlsl
+++ b/tests/sksl/shared/Assignment.hlsl
@@ -64,36 +64,41 @@ float4 main(float2 _46)
     s.af[0] = 2.0f;
     s.h4 = 1.0f.xxxx;
     s.ah4[0] = 2.0f.xxxx;
-    float _131 = af4[0].x;
-    keepAlive_vf(_131);
-    af4[0].x = _131;
-    float _138 = ah3x3[0][0].x;
-    keepAlive_vh(_138);
-    ah3x3[0][0].x = _138;
-    int _142 = i;
-    keepAlive_vi(_142);
-    i = _142;
-    int _147 = i4.y;
-    keepAlive_vi(_147);
-    i4.y = _147;
-    int _152 = ai[0];
-    keepAlive_vi(_152);
-    ai[0] = _152;
-    int _158 = ai4[0].x;
-    keepAlive_vi(_158);
-    ai4[0].x = _158;
-    float _163 = x.y;
-    keepAlive_vh(_163);
-    x.y = _163;
-    float _168 = s.f;
-    keepAlive_vf(_168);
-    s.f = _168;
-    float _172 = l;
-    keepAlive_vh(_172);
-    l = _172;
-    float _178 = f3x3[0].x;
-    keepAlive_vf(_178);
-    f3x3[0].x = _178;
+    float repeat = 1.0f;
+    repeat = 1.0f;
+    float _132 = af4[0].x;
+    keepAlive_vf(_132);
+    af4[0].x = _132;
+    float _139 = ah3x3[0][0].x;
+    keepAlive_vh(_139);
+    ah3x3[0][0].x = _139;
+    int _143 = i;
+    keepAlive_vi(_143);
+    i = _143;
+    int _148 = i4.y;
+    keepAlive_vi(_148);
+    i4.y = _148;
+    int _153 = ai[0];
+    keepAlive_vi(_153);
+    ai[0] = _153;
+    int _159 = ai4[0].x;
+    keepAlive_vi(_159);
+    ai4[0].x = _159;
+    float _164 = x.y;
+    keepAlive_vh(_164);
+    x.y = _164;
+    float _169 = s.f;
+    keepAlive_vf(_169);
+    s.f = _169;
+    float _173 = l;
+    keepAlive_vh(_173);
+    l = _173;
+    float _179 = f3x3[0].x;
+    keepAlive_vf(_179);
+    f3x3[0].x = _179;
+    float _183 = repeat;
+    keepAlive_vf(_183);
+    repeat = _183;
     return _22_colorGreen;
 }
 
diff --git a/tests/sksl/shared/Assignment.metal b/tests/sksl/shared/Assignment.metal
index e461933bac..d989d4ea06 100644
--- a/tests/sksl/shared/Assignment.metal
+++ b/tests/sksl/shared/Assignment.metal
@@ -79,6 +79,12 @@ void _skOutParamHelper9_keepAlive_vf(thread float3x3& f3x3) {
     keepAlive_vf(_var0);
     f3x3[0].x = _var0;
 }
+void keepAlive_vf(thread float& f);
+void _skOutParamHelper10_keepAlive_vf(thread float& repeat) {
+    float _var0 = repeat;
+    keepAlive_vf(_var0);
+    repeat = _var0;
+}
 void keepAlive_vh(thread half& h) {
 }
 void keepAlive_vf(thread float& f) {
@@ -119,6 +125,8 @@ fragment Outputs fragmentMain(Inputs _in [[stage_in]], constant Uniforms& _unifo
     s.af[0] = 2.0;
     s.h4 = half4(1.0h);
     s.ah4[0] = half4(2.0h);
+    float repeat;
+    repeat = (repeat = 1.0);
     _skOutParamHelper0_keepAlive_vf(af4);
     _skOutParamHelper1_keepAlive_vh(ah3x3);
     _skOutParamHelper2_keepAlive_vi(i);
@@ -129,6 +137,7 @@ fragment Outputs fragmentMain(Inputs _in [[stage_in]], constant Uniforms& _unifo
     _skOutParamHelper7_keepAlive_vf(s);
     _skOutParamHelper8_keepAlive_vh(l);
     _skOutParamHelper9_keepAlive_vf(f3x3);
+    _skOutParamHelper10_keepAlive_vf(repeat);
     _out.sk_FragColor = _uniforms.colorGreen;
     return _out;
 }
diff --git a/tests/sksl/shared/Assignment.skrp b/tests/sksl/shared/Assignment.skrp
index 75001ea2a3..9901b06744 100644
--- a/tests/sksl/shared/Assignment.skrp
+++ b/tests/sksl/shared/Assignment.skrp
@@ -75,6 +75,10 @@ copy_constant                  s.f = 0x3F800000 (1.0)
 copy_constant                  s.af[0] = 0x40000000 (2.0)
 splat_4_constants              s.h4 = 0x3F800000 (1.0)
 splat_4_constants              s.ah4[0] = 0x40000000 (2.0)
+copy_constant                  repeat = 0
+copy_constant                  $0 = 0x3F800000 (1.0)
+copy_slot_unmasked             repeat = $0
+copy_slot_unmasked             repeat = $0
 copy_slot_unmasked             f = af4[0](0)
 copy_slot_unmasked             af4[0](0) = f
 label                          label 0
@@ -105,5 +109,8 @@ label                          label 0x00000008
 copy_slot_unmasked             f = f3x3(0)
 copy_slot_unmasked             f3x3(0) = f
 label                          label 0x00000009
+copy_slot_unmasked             f = repeat
+copy_slot_unmasked             repeat = f
+label                          label 0x0000000A
 copy_4_uniforms                $0..3 = colorGreen
 load_src                       src.rgba = $0..3
