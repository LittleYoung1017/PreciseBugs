diff --git a/toml/src/main/java/com/fasterxml/jackson/dataformat/toml/Parser.java b/toml/src/main/java/com/fasterxml/jackson/dataformat/toml/Parser.java
index 645b684f..ddd6d9a6 100644
--- a/toml/src/main/java/com/fasterxml/jackson/dataformat/toml/Parser.java
+++ b/toml/src/main/java/com/fasterxml/jackson/dataformat/toml/Parser.java
@@ -1,5 +1,6 @@
 package com.fasterxml.jackson.dataformat.toml;
 
+import com.fasterxml.jackson.core.JsonParseException;
 import com.fasterxml.jackson.core.io.IOContext;
 import com.fasterxml.jackson.core.io.NumberInput;
 import com.fasterxml.jackson.core.util.VersionUtil;
@@ -321,8 +322,12 @@ class Parser {
         } else if (text.endsWith("inf")) {
             return factory.numberNode(text.startsWith("-") ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);
         } else {
-            BigDecimal dec = NumberInput.parseBigDecimal(text);
-            return factory.numberNode(dec);
+            try {
+                BigDecimal dec = NumberInput.parseBigDecimal(text);
+                return factory.numberNode(dec);
+            } catch (NumberFormatException e) {
+                throw errorContext.atPosition(lexer).invalidNumber(e, text);
+            }
         }
     }
 
diff --git a/toml/src/main/java/com/fasterxml/jackson/dataformat/toml/TomlStreamReadException.java b/toml/src/main/java/com/fasterxml/jackson/dataformat/toml/TomlStreamReadException.java
index 86bfced0..ac618f04 100644
--- a/toml/src/main/java/com/fasterxml/jackson/dataformat/toml/TomlStreamReadException.java
+++ b/toml/src/main/java/com/fasterxml/jackson/dataformat/toml/TomlStreamReadException.java
@@ -73,6 +73,11 @@ public class TomlStreamReadException
                 return new TomlStreamReadException(parser,
                         "Number out of bounds", location, cause);
             }
+
+            TomlStreamReadException invalidNumber(NumberFormatException cause, String value) {
+                return new TomlStreamReadException(parser,
+                        "Invalid number representation ('"+value+"'), problem: "+cause.getMessage(), location, cause);
+            }
         }
     }
 }
diff --git a/toml/src/test/java/com/fasterxml/jackson/dataformat/toml/FuzzReadTest.java b/toml/src/test/java/com/fasterxml/jackson/dataformat/toml/FuzzReadTest.java
index d6f5ce19..2a9847d1 100644
--- a/toml/src/test/java/com/fasterxml/jackson/dataformat/toml/FuzzReadTest.java
+++ b/toml/src/test/java/com/fasterxml/jackson/dataformat/toml/FuzzReadTest.java
@@ -1,6 +1,7 @@
 package com.fasterxml.jackson.dataformat.toml;
 
 import java.io.IOException;
+import java.math.BigDecimal;
 import java.util.Arrays;
 
 import org.junit.Assert;
@@ -29,6 +30,20 @@ public class FuzzReadTest
         }
     }
 
+    // https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=50039    
+    @Test
+    public void testBigDecimalOverflow() throws Exception
+    {
+        String INPUT = "q=8E8188888888";
+        try {
+            MAPPER.readTree(INPUT);
+            Assert.fail("Should not pass");
+        } catch (IOException e) {
+            verifyException(e, "Invalid number");
+            verifyException(e, "8E8188888888");
+        }
+    }
+
     protected void verifyException(Throwable e, String... matches)
     {
         String msg = e.getMessage();
