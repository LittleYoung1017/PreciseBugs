diff --git a/autotest/gcore/data/uint33.tif b/autotest/gcore/data/uint33.tif
new file mode 100644
index 0000000000..633d29c94d
Binary files /dev/null and b/autotest/gcore/data/uint33.tif differ
diff --git a/autotest/gcore/tiff_read.py b/autotest/gcore/tiff_read.py
index 1be5064699..023cc8b3c4 100755
--- a/autotest/gcore/tiff_read.py
+++ b/autotest/gcore/tiff_read.py
@@ -3071,6 +3071,19 @@ def tiff_read_many_blocks():
 
     return 'success'
 
+###############################################################################
+# Test reading  images with nbits > 32
+
+def tiff_read_uint33():
+
+    with gdaltest.error_handler():
+        ds = gdal.Open('data/uint33.tif')
+    if gdal.GetLastErrorMsg().find('Unsupported TIFF configuration') < 0:
+        print(gdal.GetLastErrorMsg())
+        return 'fail'
+
+    return 'success'
+
 ###############################################################################
 
 for item in init_list:
@@ -3134,8 +3147,6 @@ gdaltest_list.append( (tiff_read_scanline_more_than_2GB) )
 gdaltest_list.append( (tiff_read_wrong_number_extrasamples) )
 gdaltest_list.append( (tiff_read_one_strip_no_bytecount) )
 
-gdaltest_list.append( (tiff_read_online_1) )
-gdaltest_list.append( (tiff_read_online_2) )
 gdaltest_list.append( (tiff_read_md1) )
 gdaltest_list.append( (tiff_read_md2) )
 gdaltest_list.append( (tiff_read_md3) )
@@ -3177,7 +3188,10 @@ gdaltest_list.append( (tiff_read_big_strip) )
 gdaltest_list.append( (tiff_read_big_tile) )
 gdaltest_list.append( (tiff_read_huge_number_strips) )
 gdaltest_list.append( (tiff_read_many_blocks) )
+gdaltest_list.append( (tiff_read_uint33) )
 
+gdaltest_list.append( (tiff_read_online_1) )
+gdaltest_list.append( (tiff_read_online_2) )
 
 # gdaltest_list = [ tiff_read_ycbcr_lzw ]
 
diff --git a/gdal/frmts/gtiff/geotiff.cpp b/gdal/frmts/gtiff/geotiff.cpp
index b01f026406..035d5cf835 100644
--- a/gdal/frmts/gtiff/geotiff.cpp
+++ b/gdal/frmts/gtiff/geotiff.cpp
@@ -5720,12 +5720,23 @@ GTiffOddBitsBand::GTiffOddBitsBand( GTiffDataset *poGDSIn, int nBandIn )
         : GTiffRasterBand( poGDSIn, nBandIn )
 
 {
-    eDataType = GDT_Byte;
-    if( poGDS->nSampleFormat == SAMPLEFORMAT_IEEEFP )
+    eDataType = GDT_Unknown;
+    if( (poGDS->nBitsPerSample == 16 || poGDS->nBitsPerSample == 24) &&
+        poGDS->nSampleFormat == SAMPLEFORMAT_IEEEFP )
         eDataType = GDT_Float32;
-    else if( poGDS->nBitsPerSample > 8 && poGDS->nBitsPerSample < 16 )
+    // FIXME ? in autotest we currently open gcore/data/int24.tif
+    // which is declared as signed, but we consider it as unsigned
+    else if( (poGDS->nSampleFormat == SAMPLEFORMAT_UINT ||
+              poGDS->nSampleFormat == SAMPLEFORMAT_INT) &&
+             poGDS->nBitsPerSample < 8 )
+        eDataType = GDT_Byte;
+    else if( (poGDS->nSampleFormat == SAMPLEFORMAT_UINT ||
+              poGDS->nSampleFormat == SAMPLEFORMAT_INT) &&
+             poGDS->nBitsPerSample > 8 && poGDS->nBitsPerSample < 16 )
         eDataType = GDT_UInt16;
-    else if( poGDS->nBitsPerSample > 16 )
+    else if( (poGDS->nSampleFormat == SAMPLEFORMAT_UINT ||
+              poGDS->nSampleFormat == SAMPLEFORMAT_INT) &&
+             poGDS->nBitsPerSample > 16 && poGDS->nBitsPerSample < 32 )
         eDataType = GDT_UInt32;
 }
 
@@ -13134,8 +13145,11 @@ CPLErr GTiffDataset::OpenOffset( TIFF *hTIFFIn,
 
     if( GetRasterBand(1)->GetRasterDataType() == GDT_Unknown )
     {
-        CPLError( CE_Failure, CPLE_NotSupported,
-                  "Unsupported TIFF configuration." );
+        CPLError(CE_Failure, CPLE_NotSupported,
+                 "Unsupported TIFF configuration: BitsPerSample(=%d) and "
+                 "SampleType(=%d)",
+                 nBitsPerSample,
+                 nSampleFormat);
         return CE_Failure;
     }
 
