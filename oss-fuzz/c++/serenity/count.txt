3aeb57ed09	f07e0180d6	Sun Oct 9 10:37:20 2022 -0600	AK+Everywhere: Fix data corruption due to code-point-to-char conversion	commit 3aeb57ed095d6174f1561a82afa8164923e2849dAuthor: Ben Wiederhake <BenWiederhake.GitHub@gmx.de>Date:   Mon Sep 12 16:31:16 2022 +0200    AK+Everywhere: Fix data corruption due to code-point-to-char conversion        In particular, StringView::contains(char) is often used with a u32    code point. When this is done, the compiler will for some reason allow    data corruption to occur silently.        In fact, this is one of two reasons for the following OSS Fuzz issue:    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=49184    This is probably a very old bug.        In the particular case of URLParser, AK::is_url_code_point got confused:        return /* ... */ || "!$&'()*+,-./:;=?@_~"sv.contains(code_point);    If code_point is a large code point that happens to have the correct    lower bytes, AK::is_url_code_point is then convinced that the given    code point is okay, even if it is actually problematic.        This commit fixes *only* the silent data corruption due to the erroneous    conversion, and does not fully resolve OSS-Fuzz#49184.
0a827eaa02	da6aef9fff	Thu Dec 23 17:43:31 2021 -0800	LibGfx: Fix incorrect error handling in ICOLoader	commit 0a827eaa028e648fb9e42fd02564ab1647a4e190Author: Brian Gianforcaro <bgianf@serenityos.org>Date:   Thu Dec 23 01:49:27 2021 -0800    LibGfx: Fix incorrect error handling in ICOLoader        This was found by OSS Fuzz:    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=42188
5d865d574a	885b69c877	Sat Oct 23 19:02:54 2021 +0100	AK: Fix BumpAllocator iteration if last object doesn\'t align	commit 5d865d574a102501bd8a616f01e52e489ce88e6dAuthor: Ben Wiederhake <BenWiederhake.GitHub@gmx.de>Date:   Fri Oct 22 20:08:44 2021 +0200    AK: Fix BumpAllocator iteration if last object doesn't align        This fixes two bugs:        1. `end_offset` was missing the alignment that might have been       introduced while computing `base_ptr`.    2. Ignoring point 1, `end_offset` computed the offset of the first byte       that is outside the current chunk. However, this might be in the       middle of a (hypothetical) object! The loop treats `end_offset` as if       it points to the first byte beyond the last (valid) object. So if the       last few bytes of the chunk are unused, the loop iterates once too       often.        Found by OSS Fuzz, long-standing issue (since 2021-07-31)    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=38733    (This probably also resolves some other issues that go through    RegexMatcher.)        See also: 0f1425c895ace40fbb10d68a55eeb3a6354479d3
77d8a65498	0f3f814945	Wed Aug 25 09:21:23 2021 +0100	LibJS: Fix incorrect Lexer VERIFY when parsing Unicode characters	commit 77d8a65498eec7c24b4947630710eac83bf97b0aAuthor: Brian Gianforcaro <bgianf@serenityos.org>Date:   Tue Aug 24 23:11:08 2021 -0700    LibJS: Fix incorrect Lexer VERIFY when parsing Unicode characters        This bug was discovered via OSS fuzz, it's possible to fall through    to this assert with a char_size == 1, so we need to account for that    in the VERIFY(..).        Repro test case can be found in the OSS fuzz bug:    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=37296
a4dc1eb330	4d0f849654	Fri Jul 30 20:28:59 2021 +0100	Lagom: Fix oss-fuzz build error due to CMake typo	commit a4dc1eb330d5991c390b67f7fec4f6212064d0dbAuthor: Brian Gianforcaro <bgianf@serenityos.org>Date:   Fri Jul 30 12:24:27 2021 -0700    Lagom: Fix oss-fuzz build error due to CMake typo        The OSS-Fuzz build was failing with the following error:         /usr/bin/ld: cannot find -l{}
3c7e775a9a	efae7b7748	Tue Jun 8 19:08:02 2021 +0200	AK: Utf8CodePointIterator: Don\'t output full string to debug output	commit 3c7e775a9a4af177cd999066ec3656387d337d6aAuthor: Max Wipfli <mail@maxwipfli.ch>Date:   Tue Jun 8 15:19:09 2021 +0200    AK: Utf8CodePointIterator: Don't output full string to debug output        When a code point is invalid, the full string was outputted to the debug    output. For large strings, this can make the system quite slow.    Furthermore, one of the cases incorrectly assumed the data to be null    terminated. This patch modifies the debug statements not to print the    full string.        This fixes oss-fuzz issue 35050.
05d49cc0cb	3e0266c9e9	Mon May 31 00:47:43 2021 +0430	LibCrypto: Fix bound checks when reading bitmaps	commit 05d49cc0cbb66e065856fd696af044d9c8a0fea9Author: Ben Wiederhake <BenWiederhake.GitHub@gmx.de>Date:   Sun May 30 18:44:06 2021 +0200    LibCrypto: Fix bound checks when reading bitmaps        This only affects malformed RSA keys. Instead of accepting and    continuing with potentially broken pointers (and in ASAN, crashing), we    now consider bitmaps malformed, and stop parsing.        Found by OSS Fuzz: #31698, long-standing-bug:    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=31698        Fun fact: The "if" only exists because of OSS Fuzz.    8cc279ed74dc0b16a187052d2454c26c8c6ecaf2
ce5fe2a6e8	9aa91e6c6f	Sat Feb 27 07:30:39 2021 +0100	LibGfx: Fix read buffer overflow in interlaced GIF decode	commit ce5fe2a6e807b819866b4f429ca6f7a2d74445b7Author: Luke <luke.wilde@live.co.uk>Date:   Fri Feb 26 22:31:07 2021 +0000    LibGfx: Fix read buffer overflow in interlaced GIF decode        Unfortunately 10420dee7e48c818a7b1c5386b8fcebc587825f0 didn't quite fix it,    as the buffer overflow was actually happening here:    https://github.com/SerenityOS/serenity/blob/af2220448834fb0bff5132bf68104719819862ce/Userland/Libraries/LibGfx/GIFLoader.cpp#L402        Found by oss-fuzz: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=30507
338bb73289	1fd349b8c2	Wed Feb 10 08:01:47 2021 +0100	AK: Fix build with Clang>=12	commit 338bb732898dbf68db9554e6a32b4a89ccabb891Author: AnotherTest <ali.mpfard@gmail.com>Date:   Wed Feb 10 00:45:53 2021 +0330    AK: Fix build with Clang>=12        Build failure as in https://oss-fuzz-build-logs.storage.googleapis.com/log-79750138-f41e-4f39-8812-7c536f1d2e35.txt    Clang does not appear to like using consteval functions' arguments as    constant expressions, so move all the arguments that need to appear as    constant expressions into the template parameters for now.        This patch should fix the OSS-Fuzz build.
10420dee7e	0c66e53544	Sun Feb 7 11:18:55 2021 +0100	LibGfx: Fix global-buffer-overflow in interlaced GIF decode	commit 10420dee7e48c818a7b1c5386b8fcebc587825f0Author: Andreas Kling <kling@serenityos.org>Date:   Sun Feb 7 11:18:55 2021 +0100    LibGfx: Fix global-buffer-overflow in interlaced GIF decode        Regressed with 57e10eadac01273cc4c0bcb681aa9381cacef0b3 and immediately    caught by oss-fuzz: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=30507
4332dfb964	648f153951	Sat Jan 30 09:23:18 2021 +0100	LibGfx: Fix dynamic bitmasks in BMPs	commit 4332dfb9640f28ef7daafe340b061d2586d2fc28Author: Ben Wiederhake <BenWiederhake.GitHub@gmx.de>Date:   Sat Jan 30 01:24:41 2021 +0100    LibGfx: Fix dynamic bitmasks in BMPs        I overlooked a corner case where we might call the built-in ctz() on zero.        Furthermore, the calculation of the shift was wrong and the results were often    unusable.        Both issue were caused by a forgotten 36daeee34ff04f64c933e94a9cdffe9080061fb0.    This time I made sure to look at bmpsuite_files first, and now they look good.        Found by OSS-Fuzz:    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=28985
65570216b4	57ca15f126	Wed Jan 20 23:41:38 2021 +0100	oss-fuzz: Try harder to fix build	commit 65570216b406f7f71c96ddbafb10ee766b1a8ee5Author: Nico Weber <thakis@chromium.org>Date:   Wed Jan 20 15:17:51 2021 -0500    oss-fuzz: Try harder to fix build        Apparently memfd_create() is newish in glibc, and oss-fuzz    uses Ubuntu 16.04 as base for its docker images, which doens't    yet have memfd_create(). But, not to worry, it does have the syscall    define and that's all we really need :/
c5709c0aed	98637bd549	Wed Jan 20 19:14:04 2021 +0100	LibCore: Try to fix fuzzer build	commit c5709c0aed02cf7c7c5cda914d9794ac5cab55e7Author: Nico Weber <thakis@chromium.org>Date:   Wed Jan 20 11:03:34 2021 -0500    LibCore: Try to fix fuzzer build        This might fix https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=29675    See also `man memfd_create`.
7ed89703fe	cd2f85dc10	Thu Jan 7 08:57:37 2021 +0100	LibCrypto+LibJS: Fix broken subtraction of two negative signed bigints	commit 7ed89703fea8fcd2ca7da6fa50c78ff9d84b1113Author: Andreas Kling <kling@serenityos.org>Date:   Thu Jan 7 08:51:52 2021 +0100    LibCrypto+LibJS: Fix broken subtraction of two negative signed bigints        Found by oss-fuzz: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=29326
fdd974b7ef	279d2eee04	Tue Jan 5 12:02:59 2021 +0100	LibJS: Fix UB downcast during GlobalObject construction	commit fdd974b7ef4fb3f38c266f0f16d9b68f84f40bcaAuthor: Andreas Kling <kling@serenityos.org>Date:   Tue Jan 5 12:02:59 2021 +0100    LibJS: Fix UB downcast during GlobalObject construction        When constructing a GlobalObject, it has to pass itself as the global    object to its own Shape. Since this is done in the Object constructor,    and Object is a base class of GlobalObject, it's not yet valid to cast    "this" to a GlobalObject*.        Fix this by having Shape store the global object as an Object& and move    Shape::global_object() to GlobalObject.h where we can at least perform a    valid static_cast in the getter.        Found by oss-fuzz: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=29267
476911e1f9	be30dc2b18	Mon Dec 28 15:12:29 2020 +0100	LibGfx: fix OOB access in LZW decoder on bad input	commit 476911e1f90742c4bf67e9b3d1815c8211f40bddAuthor: Peter Nelson <peter@peterdn.com>Date:   Mon Dec 28 12:31:09 2020 +0000    LibGfx: fix OOB access in LZW decoder on bad input        This fixes an issue where a corrupted LZW code can result in the first    element of an empty buffer being accessed.        Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=27863
531c3fe72e	69d7a34bc2	Tue Dec 22 10:09:41 2020 +0100	LibGfx: Fix OOB access in GIF deinterlacing	commit 531c3fe72eb18615dba89bfe673b8a8336abfb89Author: Andreas Kling <kling@serenityos.org>Date:   Tue Dec 22 09:31:33 2020 +0100    LibGfx: Fix OOB access in GIF deinterlacing        It was possible to go outside the interlacing row strid/offset arrays.    Just fail the decode if this is about to happen. I've added a FIXME    about rejecting such images earlier, since it's a bit sad to only do    this once we realize the pass index is about to overflow.        Found by oss-fuzz: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=28239
780c64e1f0	ab549cf942	Mon Dec 21 18:37:53 2020 +0100	LibELF: Fix ELF::Image::symbol_count() asserting on section-less ELF	commit 780c64e1f09bf7400b94aab594e1993ac97e0557Author: Andreas Kling <kling@serenityos.org>Date:   Mon Dec 21 18:37:53 2020 +0100    LibELF: Fix ELF::Image::symbol_count() asserting on section-less ELF        If we have no sections, we also have no symbols, so just return 0.        Found by oss-fuzz: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=28683
9d9347cd5a	c1c5225b72	Thu Dec 3 10:51:56 2020 +0100	Shell: Fix bad cast to BarewordLiteral	commit 9d9347cd5aec545ad5c0f48cc637ca3e13970808Author: AnotherTest <ali.mpfard@gmail.com>Date:   Thu Dec 3 12:33:06 2020 +0330    Shell: Fix bad cast to BarewordLiteral        As found by oss-fuzz: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=28109&q=label%3AProj-serenity
c1c5225b72	4fe987ba00	Thu Dec 3 10:51:56 2020 +0100	LibRegex: Fix assertion when parsing \'(?\'	commit c1c5225b7207d3be0a63ef1abfd62fc3b04acb2bAuthor: AnotherTest <ali.mpfard@gmail.com>Date:   Thu Dec 3 12:28:47 2020 +0330    LibRegex: Fix assertion when parsing '(?'        Found by oss-fuzz: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=28186&q=label%3AProj-serenity
