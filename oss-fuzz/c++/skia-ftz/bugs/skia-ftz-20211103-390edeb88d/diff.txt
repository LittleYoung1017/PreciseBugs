diff --git a/gn/sksl_tests.gni b/gn/sksl_tests.gni
index e8a2aed841..0de25bf6f6 100644
--- a/gn/sksl_tests.gni
+++ b/gn/sksl_tests.gni
@@ -114,6 +114,7 @@ sksl_error_tests = [
   "/sksl/errors/Ossfuzz40427.sksl",
   "/sksl/errors/Ossfuzz40428.sksl",
   "/sksl/errors/Ossfuzz40479.sksl",
+  "/sksl/errors/Ossfuzz40660.sksl",
   "/sksl/errors/OverflowFloatLiteral.sksl",
   "/sksl/errors/OverflowInlinedLiteral.sksl",
   "/sksl/errors/OverflowIntLiteral.sksl",
diff --git a/resources/sksl/errors/Ossfuzz40660.sksl b/resources/sksl/errors/Ossfuzz40660.sksl
new file mode 100644
index 0000000000..6a7a322721
--- /dev/null
+++ b/resources/sksl/errors/Ossfuzz40660.sksl
@@ -0,0 +1 @@
+half i() { f[0 * (4, int4(3 `` -3689348940
diff --git a/src/sksl/SkSLConstantFolder.cpp b/src/sksl/SkSLConstantFolder.cpp
index 6e76eb6f73..dc388f64b3 100644
--- a/src/sksl/SkSLConstantFolder.cpp
+++ b/src/sksl/SkSLConstantFolder.cpp
@@ -134,10 +134,7 @@ static std::unique_ptr<Expression> cast_expression(const Context& context,
                                                    const Type& type) {
     ExpressionArray ctorArgs;
     ctorArgs.push_back(expr.clone());
-    std::unique_ptr<Expression> ctor = Constructor::Convert(context, expr.fLine, type,
-                                                            std::move(ctorArgs));
-    SkASSERT(ctor);
-    return ctor;
+    return Constructor::Convert(context, expr.fLine, type, std::move(ctorArgs));
 }
 
 bool ConstantFolder::GetConstantInt(const Expression& value, SKSL_INT* out) {
@@ -272,8 +269,9 @@ static std::unique_ptr<Expression> simplify_no_op_arithmetic(const Context& cont
                 return cast_expression(context, left, resultType);
             }
             if (is_constant_value(left, 0.0)) {   // 0 - x (to `-x`)
-                return PrefixExpression::Make(context, Token::Kind::TK_MINUS,
-                                              cast_expression(context, right, resultType));
+                if (std::unique_ptr<Expression> val = cast_expression(context, right, resultType)) {
+                    return PrefixExpression::Make(context, Token::Kind::TK_MINUS, std::move(val));
+                }
             }
             break;
 
@@ -286,18 +284,20 @@ static std::unique_ptr<Expression> simplify_no_op_arithmetic(const Context& cont
         case Token::Kind::TK_PLUSEQ:
         case Token::Kind::TK_MINUSEQ:
             if (is_constant_value(right, 0.0)) {  // x += 0, x -= 0
-                std::unique_ptr<Expression> result = cast_expression(context, left, resultType);
-                Analysis::UpdateVariableRefKind(result.get(), VariableRefKind::kRead);
-                return result;
+                if (std::unique_ptr<Expression> var = cast_expression(context, left, resultType)) {
+                    Analysis::UpdateVariableRefKind(var.get(), VariableRefKind::kRead);
+                    return var;
+                }
             }
             break;
 
         case Token::Kind::TK_STAREQ:
         case Token::Kind::TK_SLASHEQ:
             if (is_constant_value(right, 1.0)) {  // x *= 1, x /= 1
-                std::unique_ptr<Expression> result = cast_expression(context, left, resultType);
-                Analysis::UpdateVariableRefKind(result.get(), VariableRefKind::kRead);
-                return result;
+                if (std::unique_ptr<Expression> var = cast_expression(context, left, resultType)) {
+                    Analysis::UpdateVariableRefKind(var.get(), VariableRefKind::kRead);
+                    return var;
+                }
             }
             break;
 
diff --git a/tests/sksl/errors/Ossfuzz40660.glsl b/tests/sksl/errors/Ossfuzz40660.glsl
new file mode 100644
index 0000000000..3f669decb5
--- /dev/null
+++ b/tests/sksl/errors/Ossfuzz40660.glsl
@@ -0,0 +1,10 @@
+### Compilation failed:
+
+error: 1: unknown identifier 'f'
+error: 1: expected ')' to complete function arguments, but found '`'
+error: 1: expected ')' to complete expression, but found '`'
+error: 1: integer is out of range for type 'int': 3689348940
+error: 1: integer is out of range for type 'int': 3689348940
+error: 2: expected ']' to complete array access expression, but found ''
+error: 2: expected ';', but found ''
+7 errors
