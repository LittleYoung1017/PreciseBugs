diff --git a/gdal/frmts/mrf/marfa_dataset.cpp b/gdal/frmts/mrf/marfa_dataset.cpp
index 6ebcf6e791..b2547c092f 100644
--- a/gdal/frmts/mrf/marfa_dataset.cpp
+++ b/gdal/frmts/mrf/marfa_dataset.cpp
@@ -1467,6 +1467,10 @@ CPLErr GDALMRFDataset::Initialize(CPLXMLNode *config)
     }
 
     idxSize = IdxSize(full, int(scale));
+    if( idxSize == 0 )
+    {
+        return CE_Failure;
+    }
 
     // If not set by the bands, get a pageSizeBytes buffer
     if (GetPBufferSize() == 0)
diff --git a/gdal/frmts/mrf/mrf_util.cpp b/gdal/frmts/mrf/mrf_util.cpp
index d61d9a4593..c0cfcf5233 100644
--- a/gdal/frmts/mrf/mrf_util.cpp
+++ b/gdal/frmts/mrf/mrf_util.cpp
@@ -43,6 +43,7 @@
 #include "marfa.h"
 #include <zlib.h>
 #include <algorithm>
+#include <limits>
 
 CPL_CVSID("$Id$")
 
@@ -180,6 +181,11 @@ GIntBig IdxSize(const ILImage &full, const int scale) {
         img.pagecount = pcount(img.size, img.pagesize);
         sz += img.pagecount.l;
     }
+    if( sz > std::numeric_limits<GIntBig>::max() / static_cast<int>(sizeof(ILIdx)) )
+    {
+        CPLError(CE_Failure, CPLE_AppDefined, "IdxSize: integer overflow");
+        return 0;
+    }
     return sz*sizeof(ILIdx);
 }
 
