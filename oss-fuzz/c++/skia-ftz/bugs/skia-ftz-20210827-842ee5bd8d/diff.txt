diff --git a/gn/sksl_tests.gni b/gn/sksl_tests.gni
index ab04a02c91..1309c0ff37 100644
--- a/gn/sksl_tests.gni
+++ b/gn/sksl_tests.gni
@@ -64,6 +64,7 @@ sksl_error_tests = [
   "/sksl/errors/InterfaceBlockScope.sksl",
   "/sksl/errors/InterfaceBlockStorageModifiers.sksl",
   "/sksl/errors/InterfaceBlockWithNoMembers.sksl",
+  "/sksl/errors/IntrinsicInGlobalVariable.sksl",
   "/sksl/errors/InvalidAssignment.sksl",
   "/sksl/errors/InvalidOutParams.sksl",
   "/sksl/errors/InvalidToken.sksl",
diff --git a/resources/sksl/errors/IntrinsicInGlobalVariable.sksl b/resources/sksl/errors/IntrinsicInGlobalVariable.sksl
new file mode 100644
index 0000000000..d1eb39f5f6
--- /dev/null
+++ b/resources/sksl/errors/IntrinsicInGlobalVariable.sksl
@@ -0,0 +1,2 @@
+float c = blend_src_over(half4(1), half4(0));
+void f() {}
diff --git a/src/sksl/SkSLIRGenerator.cpp b/src/sksl/SkSLIRGenerator.cpp
index cd5e239116..5206457ab2 100644
--- a/src/sksl/SkSLIRGenerator.cpp
+++ b/src/sksl/SkSLIRGenerator.cpp
@@ -640,8 +640,11 @@ std::unique_ptr<Block> IRGenerator::applyInvocationIDWorkaround(std::unique_ptr<
             std::vector<const Variable*>(),
             fContext.fTypes.fVoid.get(),
             fIsBuiltinCode));
-    auto invokeDef = std::make_unique<FunctionDefinition>(/*offset=*/-1, invokeDecl, fIsBuiltinCode,
-                                                          std::move(main));
+    IntrinsicSet referencedIntrinsics;
+    main = this->finalizeFunction(*invokeDecl, std::move(main), &referencedIntrinsics);
+    auto invokeDef = std::make_unique<FunctionDefinition>(/*offset=*/-1, invokeDecl,
+                                                          fIsBuiltinCode, std::move(main),
+                                                          std::move(referencedIntrinsics));
     invokeDecl->setDefinition(invokeDef.get());
     fProgramElements->push_back(std::move(invokeDef));
 
@@ -759,12 +762,15 @@ void IRGenerator::CheckModifiers(const Context& context,
 }
 
 std::unique_ptr<Block> IRGenerator::finalizeFunction(const FunctionDeclaration& funcDecl,
-                                                     std::unique_ptr<Block> body) {
+                                                     std::unique_ptr<Block> body,
+                                                     IntrinsicSet* referencedIntrinsics) {
     class Finalizer : public ProgramWriter {
     public:
-        Finalizer(IRGenerator* irGenerator, const FunctionDeclaration* function)
+        Finalizer(IRGenerator* irGenerator, const FunctionDeclaration* function,
+                  IntrinsicSet* referencedIntrinsics)
             : fIRGenerator(irGenerator)
-            , fFunction(function) {}
+            , fFunction(function)
+            , fReferencedIntrinsics(referencedIntrinsics) {}
 
         ~Finalizer() override {
             SkASSERT(!fBreakableLevel);
@@ -776,8 +782,13 @@ std::unique_ptr<Block> IRGenerator::finalizeFunction(const FunctionDeclaration&
         }
 
         bool visitExpression(Expression& expr) override {
-            // Do not recurse into expressions.
-            return false;
+            if (expr.is<FunctionCall>()) {
+                const FunctionDeclaration& func = expr.as<FunctionCall>().function();
+                if (func.isBuiltin() && func.definition()) {
+                    fReferencedIntrinsics->insert(&func);
+                }
+            }
+            return INHERITED::visitExpression(expr);
         }
 
         bool visitStatement(Statement& stmt) override {
@@ -850,6 +861,8 @@ std::unique_ptr<Block> IRGenerator::finalizeFunction(const FunctionDeclaration&
     private:
         IRGenerator* fIRGenerator;
         const FunctionDeclaration* fFunction;
+        // which intrinsics have we encountered in this function
+        IntrinsicSet* fReferencedIntrinsics;
         // how deeply nested we are in breakable constructs (for, do, switch).
         int fBreakableLevel = 0;
         // how deeply nested we are in continuable constructs (for, do).
@@ -868,7 +881,7 @@ std::unique_ptr<Block> IRGenerator::finalizeFunction(const FunctionDeclaration&
         body->children().push_back(this->getNormalizeSkPositionCode());
     }
 
-    Finalizer finalizer{this, &funcDecl};
+    Finalizer finalizer{this, &funcDecl, referencedIntrinsics};
     finalizer.visitStatement(*body);
 
     if (Analysis::CanExitWithoutReturningValue(funcDecl, *body)) {
@@ -879,9 +892,6 @@ std::unique_ptr<Block> IRGenerator::finalizeFunction(const FunctionDeclaration&
 }
 
 void IRGenerator::convertFunction(const ASTNode& f) {
-    SkASSERT(fReferencedIntrinsics.empty());
-    SK_AT_SCOPE_EXIT(fReferencedIntrinsics.clear());
-
     auto iter = f.begin();
     const Type* returnType = this->convertType(*(iter++), /*allowVoid=*/true);
     if (returnType == nullptr) {
@@ -954,9 +964,10 @@ void IRGenerator::convertFunction(const ASTNode& f) {
         if (!body) {
             return;
         }
-        body = this->finalizeFunction(*decl, std::move(body));
+        IntrinsicSet referencedIntrinsics;
+        body = this->finalizeFunction(*decl, std::move(body), &referencedIntrinsics);
         auto result = std::make_unique<FunctionDefinition>(
-                f.fOffset, decl, fIsBuiltinCode, std::move(body), std::move(fReferencedIntrinsics));
+                f.fOffset, decl, fIsBuiltinCode, std::move(body), std::move(referencedIntrinsics));
         decl->setDefinition(result.get());
         result->setSource(&f);
         fProgramElements->push_back(std::move(result));
@@ -1287,9 +1298,6 @@ std::unique_ptr<Expression> IRGenerator::call(int offset,
         if (function.intrinsicKind() == k_dFdy_IntrinsicKind) {
             fInputs.fUseFlipRTUniform = true;
         }
-        if (function.definition()) {
-            fReferencedIntrinsics.insert(&function);
-        }
         if (!fIsBuiltinCode && fIntrinsics) {
             this->copyIntrinsicIfNeeded(function);
         }
diff --git a/src/sksl/SkSLIRGenerator.h b/src/sksl/SkSLIRGenerator.h
index 691feec79b..e23078f7f2 100644
--- a/src/sksl/SkSLIRGenerator.h
+++ b/src/sksl/SkSLIRGenerator.h
@@ -230,10 +230,12 @@ private:
     void copyIntrinsicIfNeeded(const FunctionDeclaration& function);
     void findAndDeclareBuiltinVariables();
     bool detectVarDeclarationWithoutScope(const Statement& stmt);
-    // Coerces returns to correct type, detects invalid break / continue placement, and otherwise
+    // Coerces returns to correct type, detects invalid break / continue placement, identifies any
+    // built-in functions that will need to be added to the shared elements list, and otherwise
     // massages the function into its final form
     std::unique_ptr<Block> finalizeFunction(const FunctionDeclaration& funcDecl,
-                                            std::unique_ptr<Block> body);
+                                            std::unique_ptr<Block> body,
+                                            IntrinsicSet* referencedIntrinsics);
 
     // Runtime effects (and the interpreter, which uses the same CPU runtime) require adherence to
     // the strict rules from The OpenGL ES Shading Language Version 1.00. (Including Appendix A).
@@ -260,7 +262,6 @@ private:
     std::shared_ptr<SymbolTable> fSymbolTable = nullptr;
     // Symbols which have definitions in the include files.
     IRIntrinsicMap* fIntrinsics = nullptr;
-    std::unordered_set<const FunctionDeclaration*> fReferencedIntrinsics;
     int fInvocations;
     std::unordered_set<const Type*> fDefinedStructs;
     std::vector<std::unique_ptr<ProgramElement>>* fProgramElements = nullptr;
diff --git a/src/sksl/SkSLRehydrator.cpp b/src/sksl/SkSLRehydrator.cpp
index 331e199fb8..6ed4ad5493 100644
--- a/src/sksl/SkSLRehydrator.cpp
+++ b/src/sksl/SkSLRehydrator.cpp
@@ -279,7 +279,7 @@ std::unique_ptr<ProgramElement> Rehydrator::element() {
             const FunctionDeclaration* decl = this->symbolRef<FunctionDeclaration>(
                                                                 Symbol::Kind::kFunctionDeclaration);
             std::unique_ptr<Statement> body = this->statement();
-            std::unordered_set<const FunctionDeclaration*> refs;
+            IntrinsicSet refs;
             uint8_t refCount = this->readU8();
             for (int i = 0; i < refCount; ++i) {
                 refs.insert(this->symbolRef<FunctionDeclaration>(
diff --git a/src/sksl/codegen/SkSLSPIRVCodeGenerator.cpp b/src/sksl/codegen/SkSLSPIRVCodeGenerator.cpp
index b30d250788..a4baecef0a 100644
--- a/src/sksl/codegen/SkSLSPIRVCodeGenerator.cpp
+++ b/src/sksl/codegen/SkSLSPIRVCodeGenerator.cpp
@@ -3542,8 +3542,8 @@ SPIRVCodeGenerator::EntrypointAdapter SPIRVCodeGenerator::writeEntrypointAdapter
     // Define it.
     adapter.entrypointDef =
             std::make_unique<FunctionDefinition>(/*offset=*/-1, adapter.entrypointDecl.get(),
-                                                 /*builtin=*/false,
-                                                 /*body=*/std::move(entrypointBlock));
+                                                 /*builtin=*/false, std::move(entrypointBlock),
+                                                 IntrinsicSet{});
 
     adapter.entrypointDecl->setDefinition(adapter.entrypointDef.get());
     return adapter;
diff --git a/src/sksl/dsl/DSLFunction.cpp b/src/sksl/dsl/DSLFunction.cpp
index 21305c1b44..18a8892ccb 100644
--- a/src/sksl/dsl/DSLFunction.cpp
+++ b/src/sksl/dsl/DSLFunction.cpp
@@ -89,9 +89,12 @@ void DSLFunction::define(DSLBlock block) {
     }
     SkASSERTF(!fDecl->definition(), "function '%s' already defined", fDecl->description().c_str());
     std::unique_ptr<Block> body = block.release();
-    body = DSLWriter::IRGenerator().finalizeFunction(*fDecl, std::move(body));
+    IntrinsicSet referencedIntrinsics;
+    body = DSLWriter::IRGenerator().finalizeFunction(*fDecl, std::move(body),
+                                                     &referencedIntrinsics);
     auto function = std::make_unique<SkSL::FunctionDefinition>(/*offset=*/-1, fDecl,
-                                                               /*builtin=*/false, std::move(body));
+                                                               /*builtin=*/false, std::move(body),
+                                                               std::move(referencedIntrinsics));
     DSLWriter::ReportErrors();
     fDecl->fDefinition = function.get();
     DSLWriter::ProgramElements().push_back(std::move(function));
diff --git a/src/sksl/ir/SkSLFunctionDefinition.h b/src/sksl/ir/SkSLFunctionDefinition.h
index 9244c16c18..c9c554df63 100644
--- a/src/sksl/ir/SkSLFunctionDefinition.h
+++ b/src/sksl/ir/SkSLFunctionDefinition.h
@@ -16,6 +16,8 @@ namespace SkSL {
 
 struct ASTNode;
 
+using IntrinsicSet = std::unordered_set<const FunctionDeclaration*>;
+
 /**
  * A function definition (a declaration plus an associated block of code).
  */
@@ -23,10 +25,8 @@ class FunctionDefinition final : public ProgramElement {
 public:
     static constexpr Kind kProgramElementKind = Kind::kFunction;
 
-    FunctionDefinition(int offset,
-                       const FunctionDeclaration* declaration, bool builtin,
-                       std::unique_ptr<Statement> body,
-                       std::unordered_set<const FunctionDeclaration*> referencedIntrinsics = {})
+    FunctionDefinition(int offset, const FunctionDeclaration* declaration, bool builtin,
+                       std::unique_ptr<Statement> body, IntrinsicSet referencedIntrinsics)
         : INHERITED(offset, kProgramElementKind)
         , fDeclaration(declaration)
         , fBuiltin(builtin)
diff --git a/tests/sksl/errors/IntrinsicInGlobalVariable.glsl b/tests/sksl/errors/IntrinsicInGlobalVariable.glsl
new file mode 100644
index 0000000000..f85146c5b8
--- /dev/null
+++ b/tests/sksl/errors/IntrinsicInGlobalVariable.glsl
@@ -0,0 +1,4 @@
+### Compilation failed:
+
+error: 1: global variable initializer must be a constant expression
+1 error
