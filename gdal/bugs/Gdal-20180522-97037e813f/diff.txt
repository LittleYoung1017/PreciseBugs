diff --git a/gdal/frmts/iris/irisdataset.cpp b/gdal/frmts/iris/irisdataset.cpp
index 6190f6a09f..3a9d315ff1 100644
--- a/gdal/frmts/iris/irisdataset.cpp
+++ b/gdal/frmts/iris/irisdataset.cpp
@@ -70,9 +70,10 @@ class IRISDataset : public GDALPamDataset
     double                adfGeoTransform[6];
     bool                  bHasLoadedProjection;
     void                  LoadProjection();
-    static std::pair<double, double> GeodesicCalculation(
+    static bool GeodesicCalculation(
         float fLat, float fLon, float fAngle, float fDist,
-        float fEquatorialRadius, float fPolarRadius, float fFlattening );
+        float fEquatorialRadius, float fPolarRadius, float fFlattening,
+        std::pair<double, double>& oOutPair);
 
 public:
     IRISDataset();
@@ -485,6 +486,19 @@ void IRISDataset::LoadProjection()
     // Mercator projection.
     if( EQUAL(aszProjections[nProjectionCode],"Mercator") )
     {
+        std::pair<double, double> oPositionX2;
+        if( !GeodesicCalculation(
+                fCenterLat, fCenterLon, 90.0f, fScaleX,
+                fEquatorialRadius, fPolarRadius, fFlattening,
+                oPositionX2) )
+            return;
+        std::pair<double, double> oPositionY2;
+        if( !GeodesicCalculation(
+                fCenterLat, fCenterLon, 0.0f, fScaleY,
+                fEquatorialRadius, fPolarRadius, fFlattening,
+                oPositionY2) )
+            return;
+
         oSRSOut.SetGeogCS(
             "unnamed ellipse",
             "unknown",
@@ -511,15 +525,6 @@ void IRISDataset::LoadProjection()
         OGRCoordinateTransformation *poTransform =
             OGRCreateCoordinateTransformation( &oSRSLatLon, &oSRSOut );
 
-        const std::pair<double, double> oPositionX2 =
-            GeodesicCalculation(
-                fCenterLat, fCenterLon, 90.0f, fScaleX,
-                fEquatorialRadius, fPolarRadius, fFlattening);
-        const std::pair<double, double> oPositionY2 =
-            GeodesicCalculation(
-                fCenterLat, fCenterLon, 0.0f, fScaleY,
-                fEquatorialRadius, fPolarRadius, fFlattening);
-
         const double dfLon2 = oPositionX2.first;
         const double dfLat2 = oPositionY2.second;
 
@@ -590,10 +595,11 @@ void IRISDataset::LoadProjection()
 /*       http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf                                             */
 /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
 
-std::pair<double, double>
+bool
 IRISDataset::GeodesicCalculation(
     float fLat, float fLon, float fAngle, float fDist, float fEquatorialRadius,
-    float fPolarRadius, float fFlattening )
+    float fPolarRadius, float fFlattening,
+    std::pair<double, double>& oOutPair )
 {
     const double dfAlpha1 = DEG2RAD * fAngle;
     const double dfSinAlpha1 = sin(dfAlpha1);
@@ -621,6 +627,7 @@ IRISDataset::GeodesicCalculation(
     double dfCosSigma = 0.0;
     double dfCos2SigmaM = 0.0;
 
+    int nIter = 0;
     while( fabs(dfSigma-dfSigmaP) > 1e-12 )
     {
         dfCos2SigmaM = cos(2*dfSigma1 + dfSigma);
@@ -633,6 +640,9 @@ IRISDataset::GeodesicCalculation(
                 (-3+4*dfCos2SigmaM*dfCos2SigmaM)));
         dfSigmaP = dfSigma;
         dfSigma = fDist / (fPolarRadius*dfA) + dfDeltaSigma;
+        nIter ++;
+        if( nIter == 100 )
+            return false;
     }
 
     const double dfTmp = dfSinU1*dfSinSigma - dfCosU1*dfCosSigma*dfCosAlpha1;
@@ -654,9 +664,9 @@ IRISDataset::GeodesicCalculation(
     if( dfLon2 < -1*M_PI )
         dfLon2 = dfLon2 + 2 * M_PI;
 
-    std::pair<double, double> oOutput(dfLon2 * RAD2DEG, dfLat2 * RAD2DEG);
+    oOutPair = std::pair<double, double>(dfLon2 * RAD2DEG, dfLat2 * RAD2DEG);
 
-    return oOutput;
+    return true;
 }
 
 /************************************************************************/
