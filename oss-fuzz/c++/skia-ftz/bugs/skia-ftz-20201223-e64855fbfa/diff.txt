diff --git a/gn/sksl_tests.gni b/gn/sksl_tests.gni
index b7d5a280a5..74856b4709 100644
--- a/gn/sksl_tests.gni
+++ b/gn/sksl_tests.gni
@@ -336,6 +336,7 @@ sksl_shared_tests = [
   "$_tests/sksl/shared/Ossfuzz27614.sksl",
   "$_tests/sksl/shared/Ossfuzz28050.sksl",
   "$_tests/sksl/shared/Ossfuzz28794.sksl",
+  "$_tests/sksl/shared/Ossfuzz28904.sksl",
   "$_tests/sksl/shared/OutParams.sksl",
   "$_tests/sksl/shared/OutParamsTricky.sksl",
   "$_tests/sksl/shared/RectangleTexture.sksl",
diff --git a/src/sksl/SkSLIRGenerator.cpp b/src/sksl/SkSLIRGenerator.cpp
index a8badcea58..f7289b4ba7 100644
--- a/src/sksl/SkSLIRGenerator.cpp
+++ b/src/sksl/SkSLIRGenerator.cpp
@@ -1791,11 +1791,19 @@ std::unique_ptr<Expression> IRGenerator::constantFoldVector(const Expression& le
 
     // Handle boolean operations: == !=
     if (op == Token::Kind::TK_EQEQ || op == Token::Kind::TK_NEQ) {
-        if (left.kind() == right.kind()) {
-            bool result = left.compareConstant(fContext, right) ^ (op == Token::Kind::TK_NEQ);
-            return std::make_unique<BoolLiteral>(fContext, left.fOffset, result);
+        bool equality = (op == Token::Kind::TK_EQEQ);
+
+        switch (left.compareConstant(fContext, right)) {
+            case Expression::ComparisonResult::kNotEqual:
+                equality = !equality;
+                [[fallthrough]];
+
+            case Expression::ComparisonResult::kEqual:
+                return std::make_unique<BoolLiteral>(fContext, left.fOffset, equality);
+
+            case Expression::ComparisonResult::kUnknown:
+                return nullptr;
         }
-        return nullptr;
     }
 
     // Handle floating-point arithmetic: + - * /
@@ -1955,17 +1963,30 @@ std::unique_ptr<Expression> IRGenerator::constantFold(const Expression& left,
             return constantFoldVector<SKSL_INT>(left, op, right);
         }
     }
-    if (leftType.isMatrix() && rightType.isMatrix() && left.kind() == right.kind()) {
+    if (leftType.isMatrix() && rightType.isMatrix()) {
+        bool equality;
         switch (op) {
             case Token::Kind::TK_EQEQ:
-                return std::make_unique<BoolLiteral>(fContext, left.fOffset,
-                                                     left.compareConstant(fContext, right));
+                equality = true;
+                break;
             case Token::Kind::TK_NEQ:
-                return std::make_unique<BoolLiteral>(fContext, left.fOffset,
-                                                     !left.compareConstant(fContext, right));
+                equality = false;
+                break;
             default:
                 return nullptr;
         }
+
+        switch (left.compareConstant(fContext, right)) {
+            case Expression::ComparisonResult::kNotEqual:
+                equality = !equality;
+                [[fallthrough]];
+
+            case Expression::ComparisonResult::kEqual:
+                return std::make_unique<BoolLiteral>(fContext, left.fOffset, equality);
+
+            case Expression::ComparisonResult::kUnknown:
+                return nullptr;
+        }
     }
     #undef RESULT
     return nullptr;
diff --git a/src/sksl/ir/SkSLBoolLiteral.h b/src/sksl/ir/SkSLBoolLiteral.h
index 939f4bee35..76f8adeadc 100644
--- a/src/sksl/ir/SkSLBoolLiteral.h
+++ b/src/sksl/ir/SkSLBoolLiteral.h
@@ -45,9 +45,13 @@ public:
         return true;
     }
 
-    bool compareConstant(const Context& context, const Expression& other) const override {
-        const BoolLiteral& b = other.as<BoolLiteral>();
-        return this->value() == b.value();
+    ComparisonResult compareConstant(const Context& context,
+                                     const Expression& other) const override {
+        if (!other.is<BoolLiteral>()) {
+            return ComparisonResult::kUnknown;
+        }
+        return this->value() == other.as<BoolLiteral>().value() ? ComparisonResult::kEqual
+                                                                : ComparisonResult::kNotEqual;
     }
 
     std::unique_ptr<Expression> clone() const override {
diff --git a/src/sksl/ir/SkSLConstructor.cpp b/src/sksl/ir/SkSLConstructor.cpp
index 2dbc0fc32a..9a5e21996c 100644
--- a/src/sksl/ir/SkSLConstructor.cpp
+++ b/src/sksl/ir/SkSLConstructor.cpp
@@ -30,7 +30,11 @@ std::unique_ptr<Expression> Constructor::constantPropagate(const IRGenerator& ir
     return nullptr;
 }
 
-bool Constructor::compareConstant(const Context& context, const Expression& other) const {
+Expression::ComparisonResult Constructor::compareConstant(const Context& context,
+                                                          const Expression& other) const {
+    if (!other.is<Constructor>()) {
+        return ComparisonResult::kUnknown;
+    }
     const Constructor& c = other.as<Constructor>();
     const Type& myType = this->type();
     const Type& otherType = c.type();
@@ -41,13 +45,13 @@ bool Constructor::compareConstant(const Context& context, const Expression& othe
         for (int i = 0; i < myType.columns(); i++) {
             if (isFloat) {
                 if (this->getFVecComponent(i) != c.getFVecComponent(i)) {
-                    return false;
+                    return ComparisonResult::kNotEqual;
                 }
             } else if (this->getIVecComponent(i) != c.getIVecComponent(i)) {
-                return false;
+                return ComparisonResult::kNotEqual;
             }
         }
-        return true;
+        return ComparisonResult::kEqual;
     }
     // shouldn't be possible to have a constant constructor that isn't a vector or matrix;
     // a constant scalar constructor should have been collapsed down to the appropriate
@@ -56,11 +60,11 @@ bool Constructor::compareConstant(const Context& context, const Expression& othe
     for (int col = 0; col < myType.columns(); col++) {
         for (int row = 0; row < myType.rows(); row++) {
             if (getMatComponent(col, row) != c.getMatComponent(col, row)) {
-                return false;
+                return ComparisonResult::kNotEqual;
             }
         }
     }
-    return true;
+    return ComparisonResult::kEqual;
 }
 
 template <typename ResultType>
diff --git a/src/sksl/ir/SkSLConstructor.h b/src/sksl/ir/SkSLConstructor.h
index d062e28a06..27a4687216 100644
--- a/src/sksl/ir/SkSLConstructor.h
+++ b/src/sksl/ir/SkSLConstructor.h
@@ -99,7 +99,8 @@ public:
         return true;
     }
 
-    bool compareConstant(const Context& context, const Expression& other) const override;
+    ComparisonResult compareConstant(const Context& context,
+                                     const Expression& other) const override;
 
     template <typename resultType>
     resultType getVecComponent(int index) const;
diff --git a/src/sksl/ir/SkSLExpression.h b/src/sksl/ir/SkSLExpression.h
index 15dbb8f159..72d81de47a 100644
--- a/src/sksl/ir/SkSLExpression.h
+++ b/src/sksl/ir/SkSLExpression.h
@@ -104,12 +104,18 @@ public:
     }
 
     /**
-     * Compares this constant expression against another constant expression of the same kind. (i.e.
-     * both sides must be IntLiterals, or BoolLiterals, or Constructors, etc.) It is an error to
-     * call this on non-constant expressions, or if the kinds of the expressions do not match.
+     * Compares this constant expression against another constant expression. Returns kUnknown if
+     * we aren't able to deduce a result (an expression isn't actually constant, the types are
+     * mismatched, etc).
      */
-    virtual bool compareConstant(const Context& context, const Expression& other) const {
-        ABORT("cannot call compareConstant on this type");
+    enum class ComparisonResult {
+        kUnknown = -1,
+        kNotEqual,
+        kEqual
+    };
+    virtual ComparisonResult compareConstant(const Context& context,
+                                             const Expression& other) const {
+        return ComparisonResult::kUnknown;
     }
 
     /**
diff --git a/src/sksl/ir/SkSLFloatLiteral.h b/src/sksl/ir/SkSLFloatLiteral.h
index 2957853eed..6cecb675e6 100644
--- a/src/sksl/ir/SkSLFloatLiteral.h
+++ b/src/sksl/ir/SkSLFloatLiteral.h
@@ -56,8 +56,13 @@ public:
         return INHERITED::coercionCost(target);
     }
 
-    bool compareConstant(const Context& context, const Expression& other) const override {
-        return this->value() == other.as<FloatLiteral>().value();
+    ComparisonResult compareConstant(const Context& context,
+                                     const Expression& other) const override {
+        if (!other.is<FloatLiteral>()) {
+            return ComparisonResult::kUnknown;
+        }
+        return this->value() == other.as<FloatLiteral>().value() ? ComparisonResult::kEqual
+                                                                 : ComparisonResult::kNotEqual;
     }
 
     SKSL_FLOAT getConstantFloat() const override {
diff --git a/src/sksl/ir/SkSLIntLiteral.h b/src/sksl/ir/SkSLIntLiteral.h
index c5523aeb94..b7863ffd9a 100644
--- a/src/sksl/ir/SkSLIntLiteral.h
+++ b/src/sksl/ir/SkSLIntLiteral.h
@@ -51,8 +51,13 @@ public:
         return true;
     }
 
-    bool compareConstant(const Context& context, const Expression& other) const override {
-        return this->value() == other.as<IntLiteral>().value();
+    ComparisonResult compareConstant(const Context& context,
+                                     const Expression& other) const override {
+        if (!other.is<IntLiteral>()) {
+            return ComparisonResult::kUnknown;
+        }
+        return this->value() == other.as<IntLiteral>().value() ? ComparisonResult::kEqual
+                                                               : ComparisonResult::kNotEqual;
     }
 
     CoercionCost coercionCost(const Type& target) const override {
diff --git a/src/sksl/ir/SkSLPrefixExpression.h b/src/sksl/ir/SkSLPrefixExpression.h
index 119a21b5d2..362de089de 100644
--- a/src/sksl/ir/SkSLPrefixExpression.h
+++ b/src/sksl/ir/SkSLPrefixExpression.h
@@ -95,13 +95,16 @@ public:
         return -this->operand()->getConstantFloat();
     }
 
-    bool compareConstant(const Context& context, const Expression& other) const override {
-        // This expression and the other expression must be of the same kind. Since the only
-        // compile-time PrefixExpression we optimize for is negation, that means we're comparing
-        // -X == -Y. The negatives should cancel out, so we can just constant-compare the inner
-        // expressions.
+    ComparisonResult compareConstant(const Context& context,
+                                     const Expression& other) const override {
+        if (!other.is<PrefixExpression>()) {
+            return ComparisonResult::kUnknown;
+        }
+        // The only compile-time PrefixExpression we optimize for is negation, so we're comparing
+        // `-X == -Y`.
         SkASSERT(this->isNegationOfCompileTimeConstant());
         SkASSERT(other.as<PrefixExpression>().isNegationOfCompileTimeConstant());
+        // The negatives cancel out; constant-compare the inner expressions.
         return this->operand()->compareConstant(context, *other.as<PrefixExpression>().operand());
     }
 
diff --git a/tests/sksl/shared/Ossfuzz28904.sksl b/tests/sksl/shared/Ossfuzz28904.sksl
new file mode 100644
index 0000000000..8c5969d483
--- /dev/null
+++ b/tests/sksl/shared/Ossfuzz28904.sksl
@@ -0,0 +1,2 @@
+void n()    { -2 .L1==- -2 .L1; }
+void main() { n(); sk_FragColor = half4(0); }
diff --git a/tests/sksl/shared/golden/Ossfuzz28904.asm.frag b/tests/sksl/shared/golden/Ossfuzz28904.asm.frag
new file mode 100644
index 0000000000..c8352c68c7
--- /dev/null
+++ b/tests/sksl/shared/golden/Ossfuzz28904.asm.frag
@@ -0,0 +1,29 @@
+OpCapability Shader
+%1 = OpExtInstImport "GLSL.std.450"
+OpMemoryModel Logical GLSL450
+OpEntryPoint Fragment %main "main" %sk_FragColor %sk_Clockwise
+OpExecutionMode %main OriginUpperLeft
+OpName %sk_FragColor "sk_FragColor"
+OpName %sk_Clockwise "sk_Clockwise"
+OpName %main "main"
+OpDecorate %sk_FragColor RelaxedPrecision
+OpDecorate %sk_FragColor Location 0
+OpDecorate %sk_FragColor Index 0
+OpDecorate %sk_Clockwise RelaxedPrecision
+OpDecorate %sk_Clockwise BuiltIn FrontFacing
+%float = OpTypeFloat 32
+%v4float = OpTypeVector %float 4
+%_ptr_Output_v4float = OpTypePointer Output %v4float
+%sk_FragColor = OpVariable %_ptr_Output_v4float Output
+%bool = OpTypeBool
+%_ptr_Input_bool = OpTypePointer Input %bool
+%sk_Clockwise = OpVariable %_ptr_Input_bool Input
+%void = OpTypeVoid
+%11 = OpTypeFunction %void
+%float_0 = OpConstant %float 0
+%13 = OpConstantComposite %v4float %float_0 %float_0 %float_0 %float_0
+%main = OpFunction %void None %11
+%12 = OpLabel
+OpStore %sk_FragColor %13
+OpReturn
+OpFunctionEnd
diff --git a/tests/sksl/shared/golden/Ossfuzz28904.glsl b/tests/sksl/shared/golden/Ossfuzz28904.glsl
new file mode 100644
index 0000000000..604f63cb78
--- /dev/null
+++ b/tests/sksl/shared/golden/Ossfuzz28904.glsl
@@ -0,0 +1,5 @@
+
+out vec4 sk_FragColor;
+void main() {
+    sk_FragColor = vec4(0.0);
+}
diff --git a/tests/sksl/shared/golden/Ossfuzz28904.metal b/tests/sksl/shared/golden/Ossfuzz28904.metal
new file mode 100644
index 0000000000..51c66d94d1
--- /dev/null
+++ b/tests/sksl/shared/golden/Ossfuzz28904.metal
@@ -0,0 +1,14 @@
+#include <metal_stdlib>
+#include <simd/simd.h>
+using namespace metal;
+struct Inputs {
+};
+struct Outputs {
+    float4 sk_FragColor [[color(0)]];
+};
+fragment Outputs fragmentMain(Inputs _in [[stage_in]], bool _frontFacing [[front_facing]], float4 _fragCoord [[position]]) {
+    Outputs _outputStruct;
+    thread Outputs* _out = &_outputStruct;
+    _out->sk_FragColor = float4(0.0);
+    return *_out;
+}
