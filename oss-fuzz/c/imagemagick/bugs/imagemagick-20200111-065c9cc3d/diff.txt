diff --git a/MagickCore/fx.c b/MagickCore/fx.c
index e5fdaac7e..d2b24e377 100644
--- a/MagickCore/fx.c
+++ b/MagickCore/fx.c
@@ -1438,6 +1438,24 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,
   subexpression=DestroyString(subexpression); \
   return(value); \
 }
+#define FxParseSubscription(subexpression,sentinal,p,q) \
+{ \
+  p=subexpression; \
+  for (q=(char *) p; (*q != (sentinal)) && (*q != '\0'); q++) \
+    if (*q == '(') \
+      { \
+        for (q++; (*q != ')') && (*q != '\0'); q++); \
+        if (*q == '\0') \
+          break; \
+      } \
+  if (*q == '\0') \
+    { \
+      (void) ThrowMagickException(exception,GetMagickModule(), \
+        OptionError,"UnableToParseExpression","`%s'",subexpression); \
+      FxReturn(0.0); \
+    } \
+  *q='\0'; \
+}
 
   char
     *q,
@@ -1866,17 +1884,7 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,
         case '?':
         {
           (void) CopyMagickString(subexpression,++p,MagickPathExtent);
-          p=subexpression;
-          for (q=(char *) p; (*q != ':') && (*q != '\0'); q++)
-            if (*q == '(')
-              for ( ; (*q != ')') && (*q != '\0'); q++);
-          if (*q == '\0')
-            {
-              (void) ThrowMagickException(exception,GetMagickModule(),
-                OptionError,"UnableToParseExpression","`%s'",subexpression);
-              FxReturn(0.0);
-            }
-          *q='\0';
+          FxParseSubscription(subexpression,':',p,q);
           if (fabs(alpha) >= MagickEpsilon)
             gamma=FxEvaluateSubexpression(fx_info,channel,x,y,p,depth+1,beta,
               exception);
@@ -2154,17 +2162,8 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,
           length=CopyMagickString(subexpression,expression+3,MagickPathExtent);
           if (length != 0)
             subexpression[length-1]='\0';
-          p=subexpression;
-          for (q=(char *) p; (*q != ',') && (*q != '\0'); q++)
-            if (*q == '(')
-              for ( ; (*q != ')') && (*q != '\0'); q++);
-          if (*q == '\0')
-            {
-              (void) ThrowMagickException(exception,GetMagickModule(),
-                OptionError,"UnableToParseExpression","`%s'",subexpression);
-              FxReturn(0.0);
-            }
-          for (*q='\0'; ; )
+          FxParseSubscription(subexpression,',',p,q);
+          for ( ; ; )
           {
             alpha=FxEvaluateSubexpression(fx_info,channel,x,y,q+1,depth+1,beta,
               exception);
@@ -2229,31 +2228,12 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,
           length=CopyMagickString(subexpression,expression+4,MagickPathExtent);
           if (length != 0)
             subexpression[length-1]='\0';
-          p=subexpression;
-          for (q=(char *) p; (*q != ',') && (*q != '\0'); q++)
-            if (*q == '(')
-              for ( ; (*q != ')') && (*q != '\0'); q++);
-          if (*q == '\0')
-            {
-              (void) ThrowMagickException(exception,GetMagickModule(),
-                OptionError,"UnableToParseExpression","`%s'",subexpression);
-              FxReturn(0.0);
-            }
-          *q='\0';
+          FxParseSubscription(subexpression,',',p,q);
           alpha=FxEvaluateSubexpression(fx_info,channel,x,y,p,depth+1,&sans,
             exception);
           (void) CopyMagickString(subexpression,q+1,MagickPathExtent);
-          p=subexpression;
-          for (q=(char *) p; (*q != ',') && (*q != '\0'); q++)
-            if (*q == '(')
-              for ( ; (*q != ')') && (*q != '\0'); q++);
-          if (*q == '\0')
-            {
-              (void) ThrowMagickException(exception,GetMagickModule(),
-                OptionError,"UnableToParseExpression","`%s'",subexpression);
-              FxReturn(0.0);
-            }
-          for (*q='\0'; ; )
+          FxParseSubscription(subexpression,',',p,q);
+          for ( ; ; )
           {
             gamma=FxEvaluateSubexpression(fx_info,channel,x,y,p,depth+1,&sans,
               exception);
@@ -2326,31 +2306,11 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,
           length=CopyMagickString(subexpression,expression+3,MagickPathExtent);
           if (length != 0)
             subexpression[length-1]='\0';
-          p=subexpression;
-          for (q=(char *) p; (*q != ',') && (*q != '\0'); q++)
-            if (*q == '(')
-              for ( ; (*q != ')') && (*q != '\0'); q++);
-          if (*q == '\0')
-            {
-              (void) ThrowMagickException(exception,GetMagickModule(),
-                OptionError,"UnableToParseExpression","`%s'",subexpression);
-              FxReturn(0.0);
-            }
-          *q='\0';
+          FxParseSubscription(subexpression,',',p,q);
           alpha=FxEvaluateSubexpression(fx_info,channel,x,y,p,depth+1,&sans,
             exception);
           (void) CopyMagickString(subexpression,q+1,MagickPathExtent);
-          p=subexpression;
-          for (q=(char *) p; (*q != ',') && (*q != '\0'); q++)
-            if (*q == '(')
-              for ( ; (*q != ')') && (*q != '\0'); q++);
-          if (*q == '\0')
-            {
-              (void) ThrowMagickException(exception,GetMagickModule(),
-                OptionError,"UnableToParseExpression","`%s'",subexpression);
-              FxReturn(0.0);
-            }
-          *q='\0';
+          FxParseSubscription(subexpression,',',p,q);
           if (fabs(alpha) >= MagickEpsilon)
             alpha=FxEvaluateSubexpression(fx_info,channel,x,y,p,depth+1,beta,
               exception);
@@ -2644,17 +2604,8 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,
           length=CopyMagickString(subexpression,expression+6,MagickPathExtent);
           if (length != 0)
             subexpression[length-1]='\0';
-          p=subexpression;
-          for (q=(char *) p; (*q != ',') && (*q != '\0'); q++)
-            if (*q == '(')
-              for ( ; (*q != ')') && (*q != '\0'); q++);
-          if (*q == '\0')
-            {
-              (void) ThrowMagickException(exception,GetMagickModule(),
-                OptionError,"UnableToParseExpression","`%s'",subexpression);
-              FxReturn(0.0);
-            }
-          for (*q='\0'; ; )
+          FxParseSubscription(subexpression,',',p,q);
+          for ( ; ; )
           {
             gamma=FxEvaluateSubexpression(fx_info,channel,x,y,p,depth+1,&sans,
               exception);
