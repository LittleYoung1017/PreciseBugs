diff --git a/gn/sksl_tests.gni b/gn/sksl_tests.gni
index 45435f0104..16e7e06339 100644
--- a/gn/sksl_tests.gni
+++ b/gn/sksl_tests.gni
@@ -81,6 +81,7 @@ sksl_error_tests = [
   "errors/DuplicateSkClockwise.sksl",
   "errors/DuplicateSymbol.rts",
   "errors/EmptyArray.rts",
+  "errors/EmptyBuffer.sksl",
   "errors/EmptyStruct.rts",
   "errors/ErrorsInDeadCode.rts",
   "errors/FloatRemainder.rts",
diff --git a/resources/sksl/BUILD.bazel b/resources/sksl/BUILD.bazel
index 71f2dea99f..16d082c9a5 100644
--- a/resources/sksl/BUILD.bazel
+++ b/resources/sksl/BUILD.bazel
@@ -242,6 +242,7 @@ skia_filegroup(
         "errors/DuplicateSkClockwise.sksl",
         "errors/DuplicateSymbol.rts",
         "errors/EmptyArray.rts",
+        "errors/EmptyBuffer.sksl",
         "errors/EmptyStruct.rts",
         "errors/ErrorsInDeadCode.rts",
         "errors/FloatRemainder.rts",
diff --git a/resources/sksl/errors/EmptyBuffer.sksl b/resources/sksl/errors/EmptyBuffer.sksl
new file mode 100644
index 0000000000..07bf3527f8
--- /dev/null
+++ b/resources/sksl/errors/EmptyBuffer.sksl
@@ -0,0 +1,5 @@
+buffer B {};
+
+/*%%*
+interface block 'B' must contain at least one field
+*%%*/
diff --git a/src/sksl/ir/SkSLVarDeclarations.cpp b/src/sksl/ir/SkSLVarDeclarations.cpp
index 4598684c4f..6c29df3951 100644
--- a/src/sksl/ir/SkSLVarDeclarations.cpp
+++ b/src/sksl/ir/SkSLVarDeclarations.cpp
@@ -8,6 +8,7 @@
 #include "src/sksl/ir/SkSLVarDeclarations.h"
 
 #include "include/core/SkSpan.h"
+#include "include/private/base/SkTo.h"
 #include "src/sksl/SkSLAnalysis.h"
 #include "src/sksl/SkSLBuiltinTypes.h"
 #include "src/sksl/SkSLCompiler.h"
@@ -23,7 +24,6 @@
 #include "src/sksl/ir/SkSLSymbolTable.h"  // IWYU pragma: keep
 #include "src/sksl/ir/SkSLType.h"
 
-#include <cstddef>
 #include <string_view>
 
 namespace SkSL {
@@ -257,9 +257,9 @@ void VarDeclaration::ErrorCheck(const Context& context,
                 // It is an error for an unsized array to appear anywhere but the last member of a
                 // "buffer" block.
                 const auto& fields = baseType->fields();
-                const size_t illegalRangeEnd =
-                        fields.size() - ((modifiers.fFlags & Modifiers::kBuffer_Flag) ? 1 : 0);
-                for (size_t i = 0; i < illegalRangeEnd; ++i) {
+                const int illegalRangeEnd = SkToInt(fields.size()) -
+                                            ((modifiers.fFlags & Modifiers::kBuffer_Flag) ? 1 : 0);
+                for (int i = 0; i < illegalRangeEnd; ++i) {
                     if (fields[i].fType->isUnsizedArray()) {
                         context.fErrors->error(
                                 fields[i].fPosition,
diff --git a/tests/sksl/errors/EmptyBuffer.glsl b/tests/sksl/errors/EmptyBuffer.glsl
new file mode 100644
index 0000000000..aaa05275c5
--- /dev/null
+++ b/tests/sksl/errors/EmptyBuffer.glsl
@@ -0,0 +1,6 @@
+### Compilation failed:
+
+error: 1: interface block 'B' must contain at least one field
+buffer B {};
+       ^
+1 error
