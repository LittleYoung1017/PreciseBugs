diff --git a/logback-core/src/main/java/ch/qos/logback/core/subst/NodeToStringTransformer.java b/logback-core/src/main/java/ch/qos/logback/core/subst/NodeToStringTransformer.java
index 71980025a..62d875b57 100755
--- a/logback-core/src/main/java/ch/qos/logback/core/subst/NodeToStringTransformer.java
+++ b/logback-core/src/main/java/ch/qos/logback/core/subst/NodeToStringTransformer.java
@@ -16,6 +16,7 @@ package ch.qos.logback.core.subst;
 import ch.qos.logback.core.CoreConstants;
 import ch.qos.logback.core.spi.PropertyContainer;
 import ch.qos.logback.core.spi.ScanException;
+import ch.qos.logback.core.subst.Node.Type;
 import ch.qos.logback.core.util.OptionHelper;
 
 import java.util.List;
@@ -145,11 +146,19 @@ public class NodeToStringTransformer {
     }
 
     private String variableNodeValue(Node variableNode) {
-        Node literalPayload = (Node) variableNode.payload;
-        if(literalPayload == null) {
+        Node payload = (Node) variableNode.payload;
+        if(payload == null) {
             return CoreConstants.EMPTY_STRING;
         }
-        return (String) literalPayload.payload;
+        
+        if(payload.type == Type.LITERAL) {
+            return (String) payload.payload;
+        }
+        
+        if(payload.type == Type.VARIABLE) {
+            return " ? " + variableNodeValue(payload);
+        }
+        throw new IllegalStateException("unreachable code");
     }
 
     private String constructRecursionErrorMessage(Stack<Node> recursionNodes) {
diff --git a/logback-core/src/test/java/ch/qos/logback/core/util/OptionHelperTest.java b/logback-core/src/test/java/ch/qos/logback/core/util/OptionHelperTest.java
index 189e6c67c..e5a653add 100755
--- a/logback-core/src/test/java/ch/qos/logback/core/util/OptionHelperTest.java
+++ b/logback-core/src/test/java/ch/qos/logback/core/util/OptionHelperTest.java
@@ -147,7 +147,7 @@ public class OptionHelperTest {
         String expectedMessage =  CIRCULAR_VARIABLE_REFERENCE_DETECTED+"${v2} --> ${v3} --> ${v4} --> ${v2}]";
         assertEquals(expectedMessage, e.getMessage());
     }
-
+    
     @Test
     public void nonCircularGraphShouldWork() throws ScanException {
         context.putProperty("A", "${B} and ${C}");
@@ -216,7 +216,17 @@ public class OptionHelperTest {
         assertEquals(expectedMessage, e.getMessage());
     }
 
-        
+    // https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=46966
+    @Test
+    public void nestedEmptyVariables() throws ScanException {
+
+        Exception e = assertThrows(Exception.class, () -> {
+            OptionHelper.substVars("${${${}}}", context);
+        });
+        String expectedMessage =  CIRCULAR_VARIABLE_REFERENCE_DETECTED+"${ ?  ? } --> ${ ? } --> ${}]";
+        assertEquals(expectedMessage, e.getMessage());
+    }
+    
     
     
     @Test
