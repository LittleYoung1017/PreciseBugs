diff --git a/src/sksl/ir/SkSLExpression.h b/src/sksl/ir/SkSLExpression.h
index cc6c88217a..77b90e9afb 100644
--- a/src/sksl/ir/SkSLExpression.h
+++ b/src/sksl/ir/SkSLExpression.h
@@ -105,9 +105,9 @@ public:
     }
 
     /**
-     * Compares this constant expression against another constant expression of the same type. It is
-     * an error to call this on non-constant expressions, or if the types of the expressions do not
-     * match.
+     * Compares this constant expression against another constant expression of the same kind. (i.e.
+     * both sides must be IntLiterals, or BoolLiterals, or Constructors, etc.) It is an error to
+     * call this on non-constant expressions, or if the kinds of the expressions do not match.
      */
     virtual bool compareConstant(const Context& context, const Expression& other) const {
         ABORT("cannot call compareConstant on this type");
diff --git a/src/sksl/ir/SkSLPrefixExpression.h b/src/sksl/ir/SkSLPrefixExpression.h
index 13842f2850..65631138e6 100644
--- a/src/sksl/ir/SkSLPrefixExpression.h
+++ b/src/sksl/ir/SkSLPrefixExpression.h
@@ -85,6 +85,16 @@ public:
         return Compiler::OperatorName(this->getOperator()) + this->operand()->description();
     }
 
+    bool compareConstant(const Context& context, const Expression& other) const override {
+        // This expression and the other expression must be of the same kind. Since the only
+        // compile-time PrefixExpression we optimize for is negation, that means we're comparing
+        // -X == -Y. The negatives should cancel out, so we can just constant-compare the inner
+        // expressions.
+        SkASSERT(this->isNegationOfCompileTimeConstant());
+        SkASSERT(other.as<PrefixExpression>().isNegationOfCompileTimeConstant());
+        return this->operand()->compareConstant(context, *other.as<PrefixExpression>().operand());
+    }
+
 private:
     Token::Kind fOperator;
     std::unique_ptr<Expression> fOperand;
diff --git a/tests/sksl/shared/VectorFolding.sksl b/tests/sksl/shared/VectorFolding.sksl
index 9354b2929a..c8c90e9f3c 100644
--- a/tests/sksl/shared/VectorFolding.sksl
+++ b/tests/sksl/shared/VectorFolding.sksl
@@ -15,6 +15,18 @@ void test_half() {
     sk_FragColor.x = half4(half3(1), 1) == half4(half2(1), 1, 0) ? 8.0 : -8.0;
     sk_FragColor.x = half2(1) != half2(1, 0) ? 9.0 : -9.0;
     sk_FragColor.x = half4(1) != half4(half2(1), half2(1)) ? 10.0 : -10.0;
+    sk_FragColor.x = half4(1) == -half4(1) ? 11.0 : -11.0;
+    sk_FragColor.x = -half4(1) == half4(1) ? 12.0 : -12.0;
+    sk_FragColor.x = -half4(1) == -half4(1) ? 13.0 : -13.0;
+    sk_FragColor.x = half4(1) != -half4(1) ? -11.0 : 11.0;
+    sk_FragColor.x = -half4(1) != half4(1) ? -12.0 : 12.0;
+    sk_FragColor.x = -half4(1) != -half4(1) ? -13.0 : 13.0;
+    sk_FragColor.x = half4(0) == -half4(1) ? 11.0 : -11.0;
+    sk_FragColor.x = -half4(0) == half4(1) ? 12.0 : -12.0;
+    sk_FragColor.x = -half4(0) == -half4(1) ? 13.0 : -13.0;
+    sk_FragColor.x = half4(0) != -half4(1) ? -11.0 : 11.0;
+    sk_FragColor.x = -half4(0) != half4(1) ? -12.0 : 12.0;
+    sk_FragColor.x = -half4(0) != -half4(1) ? -13.0 : 13.0;
     sk_FragColor = half4(half(sqrt(1))) * half4(1);
     sk_FragColor = half4(1) * half4(half(sqrt(2)));
     sk_FragColor = half4(0) * half4(half(sqrt(3)));
diff --git a/tests/sksl/shared/golden/VectorFolding.glsl b/tests/sksl/shared/golden/VectorFolding.glsl
index ccfb8c25b0..d050793522 100644
--- a/tests/sksl/shared/golden/VectorFolding.glsl
+++ b/tests/sksl/shared/golden/VectorFolding.glsl
@@ -18,6 +18,18 @@ void main() {
         sk_FragColor.x = -8.0;
         sk_FragColor.x = 9.0;
         sk_FragColor.x = -10.0;
+        sk_FragColor.x = -11.0;
+        sk_FragColor.x = -12.0;
+        sk_FragColor.x = 13.0;
+        sk_FragColor.x = -11.0;
+        sk_FragColor.x = -12.0;
+        sk_FragColor.x = 13.0;
+        sk_FragColor.x = -11.0;
+        sk_FragColor.x = -12.0;
+        sk_FragColor.x = -13.0;
+        sk_FragColor.x = -11.0;
+        sk_FragColor.x = -12.0;
+        sk_FragColor.x = -13.0;
         sk_FragColor = vec4(sqrt(1.0));
         sk_FragColor = vec4(sqrt(2.0));
         sk_FragColor = vec4(0.0);
diff --git a/tests/sksl/shared/golden/VectorFolding.metal b/tests/sksl/shared/golden/VectorFolding.metal
index 695a99cbe6..8c82294e6e 100644
--- a/tests/sksl/shared/golden/VectorFolding.metal
+++ b/tests/sksl/shared/golden/VectorFolding.metal
@@ -26,6 +26,18 @@ fragment Outputs fragmentMain(Inputs _in [[stage_in]], bool _frontFacing [[front
         _out->sk_FragColor.x = -8.0;
         _out->sk_FragColor.x = 9.0;
         _out->sk_FragColor.x = -10.0;
+        _out->sk_FragColor.x = -11.0;
+        _out->sk_FragColor.x = -12.0;
+        _out->sk_FragColor.x = 13.0;
+        _out->sk_FragColor.x = -11.0;
+        _out->sk_FragColor.x = -12.0;
+        _out->sk_FragColor.x = 13.0;
+        _out->sk_FragColor.x = -11.0;
+        _out->sk_FragColor.x = -12.0;
+        _out->sk_FragColor.x = -13.0;
+        _out->sk_FragColor.x = -11.0;
+        _out->sk_FragColor.x = -12.0;
+        _out->sk_FragColor.x = -13.0;
         _out->sk_FragColor = float4(sqrt(1.0));
         _out->sk_FragColor = float4(sqrt(2.0));
         _out->sk_FragColor = float4(0.0);
