diff --git a/autotest/gdrivers/zarr_driver.py b/autotest/gdrivers/zarr_driver.py
index 52bd2a074f..cf32ce9f06 100644
--- a/autotest/gdrivers/zarr_driver.py
+++ b/autotest/gdrivers/zarr_driver.py
@@ -2239,3 +2239,74 @@ def test_zarr_read_too_large_tile_size():
     finally:
         gdal.RmdirRecursive('/vsimem/test.zarr')
 
+
+def test_zarr_read_recursive_array_loading():
+
+    try:
+        gdal.Mkdir('/vsimem/test.zarr', 0)
+
+        j = { "zarr_format": 2 }
+        gdal.FileFromMemBuffer('/vsimem/test.zarr/.zgroup', json.dumps(j))
+
+        j = { "chunks": [1],
+              "compressor": None,
+              "dtype": '!b1',
+              "fill_value": None,
+              "filters": None,
+              "order": "C",
+              "shape": [ 1 ],
+              "zarr_format": 2
+        }
+        gdal.FileFromMemBuffer('/vsimem/test.zarr/a/.zarray', json.dumps(j))
+        gdal.FileFromMemBuffer('/vsimem/test.zarr/b/.zarray', json.dumps(j))
+
+        j = { "_ARRAY_DIMENSIONS": ["b"] }
+        gdal.FileFromMemBuffer('/vsimem/test.zarr/a/.zattrs', json.dumps(j))
+
+        j = { "_ARRAY_DIMENSIONS": ["a"] }
+        gdal.FileFromMemBuffer('/vsimem/test.zarr/b/.zattrs', json.dumps(j))
+
+        ds = gdal.OpenEx('/vsimem/test.zarr', gdal.OF_MULTIDIM_RASTER)
+        assert ds is not None
+        with gdaltest.error_handler():
+            ar = ds.GetRootGroup().OpenMDArray('a')
+            assert ar
+            assert gdal.GetLastErrorMsg() == 'Attempt at recursively loading /vsimem/test.zarr/a/.zarray'
+    finally:
+        gdal.RmdirRecursive('/vsimem/test.zarr')
+
+
+def test_zarr_read_too_deep_array_loading():
+
+    try:
+        gdal.Mkdir('/vsimem/test.zarr', 0)
+
+        j = { "zarr_format": 2 }
+        gdal.FileFromMemBuffer('/vsimem/test.zarr/.zgroup', json.dumps(j))
+
+        j = { "chunks": [1],
+              "compressor": None,
+              "dtype": '!b1',
+              "fill_value": None,
+              "filters": None,
+              "order": "C",
+              "shape": [ 1 ],
+              "zarr_format": 2
+        }
+
+        N = 33
+        for i in range(N):
+            gdal.FileFromMemBuffer('/vsimem/test.zarr/%d/.zarray' % i, json.dumps(j))
+
+        for i in range(N-1):
+            j = { "_ARRAY_DIMENSIONS": ["%d" % (i+1)] }
+            gdal.FileFromMemBuffer('/vsimem/test.zarr/%d/.zattrs' % i, json.dumps(j))
+
+        ds = gdal.OpenEx('/vsimem/test.zarr', gdal.OF_MULTIDIM_RASTER)
+        assert ds is not None
+        with gdaltest.error_handler():
+            ar = ds.GetRootGroup().OpenMDArray('0')
+            assert ar
+            assert gdal.GetLastErrorMsg() == 'Too deep call stack in LoadArray()'
+    finally:
+        gdal.RmdirRecursive('/vsimem/test.zarr')
diff --git a/gdal/frmts/zarr/zarr.h b/gdal/frmts/zarr/zarr.h
index 27b92ae8f4..5023ea6a08 100644
--- a/gdal/frmts/zarr/zarr.h
+++ b/gdal/frmts/zarr/zarr.h
@@ -36,6 +36,8 @@
 #include "memmultidim.h"
 
 #include <array>
+#include <map>
+#include <set>
 
 /************************************************************************/
 /*                            ZarrDataset                               */
@@ -286,7 +288,8 @@ public:
                                          const std::string& osZarrayFilename,
                                          const CPLJSONObject& oRoot,
                                          bool bLoadedFromZMetadata,
-                                         const CPLJSONObject& oAttributes) const;
+                                         const CPLJSONObject& oAttributes,
+                                         std::set<std::string>& oSetFilenamesInLoading) const;
     void RegisterArray(const std::shared_ptr<ZarrArray>& array) const;
 
     void SetUpdatable(bool bUpdatable) { m_bUpdatable = bUpdatable; }
diff --git a/gdal/frmts/zarr/zarr_array.cpp b/gdal/frmts/zarr/zarr_array.cpp
index 290157bfa4..22a5c2eb61 100644
--- a/gdal/frmts/zarr/zarr_array.cpp
+++ b/gdal/frmts/zarr/zarr_array.cpp
@@ -2482,8 +2482,46 @@ std::shared_ptr<ZarrArray> ZarrGroupBase::LoadArray(const std::string& osArrayNa
                                                 const std::string& osZarrayFilename,
                                                 const CPLJSONObject& oRoot,
                                                 bool bLoadedFromZMetadata,
-                                                const CPLJSONObject& oAttributesIn) const
+                                                const CPLJSONObject& oAttributesIn,
+                                                std::set<std::string>& oSetFilenamesInLoading) const
 {
+    // Prevent too deep or recursive array loading
+    if( oSetFilenamesInLoading.find(osZarrayFilename) != oSetFilenamesInLoading.end() )
+    {
+        CPLError(CE_Failure, CPLE_AppDefined,
+                 "Attempt at recursively loading %s", osZarrayFilename.c_str());
+        return nullptr;
+    }
+    if( oSetFilenamesInLoading.size() == 32 )
+    {
+        CPLError(CE_Failure, CPLE_AppDefined,
+                 "Too deep call stack in LoadArray()");
+        return nullptr;
+    }
+
+    struct SetFilenameAdder
+    {
+        std::set<std::string>& m_oSetFilenames;
+        std::string m_osFilename;
+
+        SetFilenameAdder(std::set<std::string>& oSetFilenamesIn,
+                         const std::string& osFilename):
+             m_oSetFilenames(oSetFilenamesIn),
+             m_osFilename(osFilename)
+        {
+            m_oSetFilenames.insert(osFilename);
+        }
+
+        ~SetFilenameAdder()
+        {
+            m_oSetFilenames.erase(m_osFilename);
+        }
+    };
+
+    // Add osZarrayFilename to oSetFilenamesInLoading during the scope
+    // of this function call.
+    SetFilenameAdder filenameAdder(oSetFilenamesInLoading, osZarrayFilename);
+
     const bool isZarrV2 = dynamic_cast<const ZarrGroupV2*>(this) != nullptr;
 
     if( isZarrV2 )
@@ -2636,7 +2674,7 @@ std::shared_ptr<ZarrArray> ZarrGroupBase::LoadArray(const std::string& osArrayNa
 
     const auto FindDimension = [this, &aoDims, &oAttributes, &osUnit,
                                 bLoadedFromZMetadata, &osArrayName,
-                                &osZarrayFilename,
+                                &osZarrayFilename, &oSetFilenamesInLoading,
                                 isZarrV2](
                                         const std::string& osDimName,
                                         std::shared_ptr<GDALDimension>& poDim,
@@ -2712,7 +2750,8 @@ std::shared_ptr<ZarrArray> ZarrGroupBase::LoadArray(const std::string& osArrayNa
                             osArrayFilenameDim,
                             oDoc.GetRoot(),
                             false,
-                            CPLJSONObject());
+                            CPLJSONObject(),
+                            oSetFilenamesInLoading);
                     }
                 }
                 else
diff --git a/gdal/frmts/zarr/zarr_group.cpp b/gdal/frmts/zarr/zarr_group.cpp
index 1f56d4ab35..9524fd2df7 100644
--- a/gdal/frmts/zarr/zarr_group.cpp
+++ b/gdal/frmts/zarr/zarr_group.cpp
@@ -266,7 +266,9 @@ std::shared_ptr<GDALMDArray> ZarrGroupV2::OpenMDArray(const std::string& osName,
             if( !oDoc.Load(osZarrayFilename) )
                 return nullptr;
             const auto oRoot = oDoc.GetRoot();
-            return LoadArray(osName, osZarrayFilename, oRoot, false, CPLJSONObject());
+            std::set<std::string> oSetFilenamesInLoading;
+            return LoadArray(osName, osZarrayFilename, oRoot, false,
+                             CPLJSONObject(), oSetFilenamesInLoading);
         }
     }
 
@@ -378,7 +380,9 @@ std::shared_ptr<GDALMDArray> ZarrGroupV3::OpenMDArray(const std::string& osName,
         if( !oDoc.Load(osFilename) )
             return nullptr;
         const auto oRoot = oDoc.GetRoot();
-        return LoadArray(osName, osFilename, oRoot, false, CPLJSONObject());
+        std::set<std::string> oSetFilenamesInLoading;
+        return LoadArray(osName, osFilename, oRoot, false,
+                         CPLJSONObject(), oSetFilenamesInLoading);
     }
 
     return nullptr;
@@ -506,8 +510,10 @@ void ZarrGroupV2::InitFromZMetadata(const CPLJSONObject& obj)
                                 osArrayName.c_str(), nullptr),
                 ".zarray",
                 nullptr);
+        std::set<std::string> oSetFilenamesInLoading;
         poBelongingGroup->LoadArray(
-                    osArrayName, osZarrayFilename, oArray, true, oAttributes);
+                    osArrayName, osZarrayFilename, oArray, true,
+                    oAttributes, oSetFilenamesInLoading);
     };
 
     struct ArrayDesc
diff --git a/gdal/frmts/zarr/zarrdriver.cpp b/gdal/frmts/zarr/zarrdriver.cpp
index f3a396c66e..80a7d5a93c 100644
--- a/gdal/frmts/zarr/zarrdriver.cpp
+++ b/gdal/frmts/zarr/zarrdriver.cpp
@@ -105,8 +105,9 @@ GDALDataset* ZarrDataset::OpenMultidim(const char* pszFilename,
             return nullptr;
         const auto oRoot = oDoc.GetRoot();
         const std::string osArrayName(CPLGetBasename(osFilename.c_str()));
+        std::set<std::string> oSetFilenamesInLoading;
         if( !poRG->LoadArray(osArrayName, osZarrayFilename, oRoot,
-                             false, CPLJSONObject()) )
+                             false, CPLJSONObject(), oSetFilenamesInLoading) )
             return nullptr;
 
         return poDS.release();
