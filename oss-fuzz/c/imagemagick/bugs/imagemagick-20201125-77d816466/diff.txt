diff --git a/MagickCore/effect.c b/MagickCore/effect.c
index 25ac58c6a..899a8dc2e 100644
--- a/MagickCore/effect.c
+++ b/MagickCore/effect.c
@@ -811,10 +811,10 @@ MagickExport Image *BlurImage(const Image *image,const double radius,
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
-%  BilateralFilterImage() smooths and reducees noise in an image while
+%  BilateralFilterImage() smooths and reduces noise in an image while
 %  preserving edges.
 %
-%  The format of the AdaptiveBlurImage method is:
+%  The format of the BilateralFilteImage method is:
 %
 %      Image *BilateralFilterImage(const Image *image,const double radius,
 %        const double sigma,ExceptionInfo *exception)
@@ -835,7 +835,6 @@ MagickExport Image *BilateralFilterImage(const Image *image,const double radius,
   const double sigma,ExceptionInfo *exception)
 {
 #define BilateralFilterImageTag  "Convolve/Image"
-#define MagickSigma  (fabs(sigma) < MagickEpsilon ? MagickEpsilon : sigma)
 
   CacheView
     *bilateral_view,
@@ -871,10 +870,7 @@ MagickExport Image *BilateralFilterImage(const Image *image,const double radius,
       return((Image *) NULL);
     }
   /*
-    Create a kernel.
-  */
-  /*
-    Adaptively blur image.
+    Bilateral filter image.
   */
   status=MagickTrue;
   progress=0;
diff --git a/coders/tiff.c b/coders/tiff.c
index 85d39840f..9e4e7b14a 100644
--- a/coders/tiff.c
+++ b/coders/tiff.c
@@ -1830,7 +1830,19 @@ static Image *ReadTIFFImage(const ImageInfo *image_info,
           rows_per_strip=(uint32) image->rows;
       }
     if (TIFFIsTiled(tiff) != MagickFalse)
-      method=ReadTileMethod;
+      {
+        uint32
+          columns,
+          rows;
+
+        if ((TIFFGetField(tiff,TIFFTAG_TILEWIDTH,&columns) != 1) ||
+            (TIFFGetField(tiff,TIFFTAG_TILELENGTH,&rows) != 1))
+          ThrowTIFFException(CoderError,"ImageIsNotTiled");
+        if ((AcquireMagickResource(WidthResource,columns) == MagickFalse) ||
+            (AcquireMagickResource(HeightResource,rows) == MagickFalse))
+          ThrowTIFFException(ImageError,"WidthOrHeightExceedsLimit");
+        method=ReadTileMethod;
+      }
     if (image->compression == JPEGCompression)
       method=GetJPEGMethod(image,tiff,photometric,bits_per_sample,
         samples_per_pixel);
@@ -2051,9 +2063,6 @@ static Image *ReadTIFFImage(const ImageInfo *image_info,
         if ((TIFFGetField(tiff,TIFFTAG_TILEWIDTH,&columns) != 1) ||
             (TIFFGetField(tiff,TIFFTAG_TILELENGTH,&rows) != 1))
           ThrowTIFFException(CoderError,"ImageIsNotTiled");
-        if ((AcquireMagickResource(WidthResource,columns) == MagickFalse) ||
-            (AcquireMagickResource(HeightResource,rows) == MagickFalse))
-          ThrowTIFFException(ImageError,"WidthOrHeightExceedsLimit");
         number_pixels=(MagickSizeType) columns*rows;
         if (HeapOverflowSanityCheck(rows,sizeof(*tile_pixels)) != MagickFalse)
           ThrowTIFFException(ResourceLimitError,"MemoryAllocationFailed");
