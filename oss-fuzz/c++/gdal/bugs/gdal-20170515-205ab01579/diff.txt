diff --git a/gdal/ogr/ogr_geometry.h b/gdal/ogr/ogr_geometry.h
index d08ad0212e..ccba882e70 100644
--- a/gdal/ogr/ogr_geometry.h
+++ b/gdal/ogr/ogr_geometry.h
@@ -137,12 +137,12 @@ class CPL_DLL OGRGeometry
                      int bAllowCompoundCurve,
                      OGRErr (*pfnAddCurveDirectly)(OGRGeometry* poSelf,
                                                    OGRCurve* poCurve) );
-    OGRErr       importPreambuleFromWkb( unsigned char * pabyData,
+    OGRErr       importPreambuleFromWkb( const unsigned char * pabyData,
                                          int nSize,
                                          OGRwkbByteOrder& eByteOrder,
                                          OGRwkbVariant eWkbVariant );
     OGRErr       importPreambuleOfCollectionFromWkb(
-                     unsigned char * pabyData,
+                     const unsigned char * pabyData,
                      int& nSize,
                      int& nDataOffset,
                      OGRwkbByteOrder& eByteOrder,
@@ -193,8 +193,12 @@ class CPL_DLL OGRGeometry
 
     // IWks Interface.
     virtual int WkbSize() const = 0;
-    virtual OGRErr importFromWkb( unsigned char *, int=-1,
-                                  OGRwkbVariant=wkbVariantOldOgc ) = 0;
+    OGRErr importFromWkb( unsigned char *, int=-1,
+                                  OGRwkbVariant=wkbVariantOldOgc );
+    virtual OGRErr importFromWkb( const unsigned char *,
+                                  int,
+                                  OGRwkbVariant,
+                                  int& nBytesConsumedOut ) = 0;
     virtual OGRErr exportToWkb( OGRwkbByteOrder, unsigned char *,
                                 OGRwkbVariant=wkbVariantOldOgc ) const = 0;
     virtual OGRErr importFromWkt( char ** ppszInput ) = 0;
@@ -338,8 +342,10 @@ class CPL_DLL OGRPoint : public OGRGeometry
 
     // IWks Interface
     virtual int WkbSize() const CPL_OVERRIDE;
-    virtual OGRErr importFromWkb( unsigned char *, int=-1,
-                                  OGRwkbVariant=wkbVariantOldOgc ) CPL_OVERRIDE;
+    virtual OGRErr importFromWkb( const unsigned char *,
+                                  int,
+                                  OGRwkbVariant,
+                                  int& nBytesConsumedOut ) CPL_OVERRIDE;
     virtual OGRErr exportToWkb( OGRwkbByteOrder, unsigned char *,
                                 OGRwkbVariant=wkbVariantOldOgc )
         const CPL_OVERRIDE;
@@ -523,8 +529,10 @@ class CPL_DLL OGRSimpleCurve: public OGRCurve
 
     // IWks Interface.
     virtual int WkbSize() const CPL_OVERRIDE;
-    virtual OGRErr importFromWkb( unsigned char *, int = -1,
-                                  OGRwkbVariant=wkbVariantOldOgc ) CPL_OVERRIDE;
+    virtual OGRErr importFromWkb( const unsigned char *,
+                                  int,
+                                  OGRwkbVariant,
+                                  int& nBytesConsumedOut ) CPL_OVERRIDE;
     virtual OGRErr exportToWkb( OGRwkbByteOrder, unsigned char *,
                                 OGRwkbVariant=wkbVariantOldOgc )
         const CPL_OVERRIDE;
@@ -695,7 +703,8 @@ class CPL_DLL OGRLinearRing : public OGRLineString
     // These are not IWks compatible ... just a convenience for OGRPolygon.
     virtual int _WkbSize( int _flags ) const;
     virtual OGRErr _importFromWkb( OGRwkbByteOrder, int _flags,
-                                   unsigned char *, int=-1 );
+                                   const unsigned char *, int,
+                                   int& nBytesConsumedOut );
     virtual OGRErr _exportToWkb( OGRwkbByteOrder, int _flags,
                                  unsigned char * ) const;
 
@@ -731,8 +740,10 @@ class CPL_DLL OGRLinearRing : public OGRLineString
     // for the purposes of WKB form.  These methods always fail since this
     // object can't be serialized on its own.
     virtual int WkbSize() const CPL_OVERRIDE;
-    virtual OGRErr importFromWkb( unsigned char *, int=-1,
-                                  OGRwkbVariant=wkbVariantOldOgc ) CPL_OVERRIDE;
+    virtual OGRErr importFromWkb( const unsigned char *,
+                                  int,
+                                  OGRwkbVariant,
+                                  int& nBytesConsumedOut ) CPL_OVERRIDE;
     virtual OGRErr exportToWkb( OGRwkbByteOrder, unsigned char *,
                                 OGRwkbVariant=wkbVariantOldOgc )
         const CPL_OVERRIDE;
@@ -779,8 +790,10 @@ class CPL_DLL OGRCircularString : public OGRSimpleCurve
     OGRCircularString& operator=(const OGRCircularString& other);
 
     // IWks Interface.
-    virtual OGRErr importFromWkb( unsigned char *, int = -1,
-                                  OGRwkbVariant=wkbVariantOldOgc ) CPL_OVERRIDE;
+    virtual OGRErr importFromWkb( const unsigned char *,
+                                  int,
+                                  OGRwkbVariant,
+                                  int& nBytesConsumedOut ) CPL_OVERRIDE;
     virtual OGRErr exportToWkb( OGRwkbByteOrder, unsigned char *,
                                 OGRwkbVariant=wkbVariantOldOgc )
         const CPL_OVERRIDE;
@@ -855,7 +868,7 @@ class CPL_DLL OGRCurveCollection
                                       int bNeedRealloc );
     int             WkbSize() const;
     OGRErr          importPreambuleFromWkb( OGRGeometry* poGeom,
-                                            unsigned char * pabyData,
+                                            const unsigned char * pabyData,
                                             int& nSize,
                                             int& nDataOffset,
                                             OGRwkbByteOrder& eByteOrder,
@@ -863,13 +876,13 @@ class CPL_DLL OGRCurveCollection
                                             OGRwkbVariant eWkVariant );
     OGRErr      importBodyFromWkb(
                     OGRGeometry* poGeom,
-                    unsigned char * pabyData,
+                    const unsigned char * pabyData,
                     int nSize,
-                    int nDataOffset,
                     int bAcceptCompoundCurve,
                     OGRErr (*pfnAddCurveDirectlyFromWkb)( OGRGeometry* poGeom,
                                                           OGRCurve* poCurve ),
-                                       OGRwkbVariant eWkVariant );
+                    OGRwkbVariant eWkVariant,
+                    int& nBytesConsumedOut );
     OGRErr          exportToWkt( const OGRGeometry* poGeom,
                                  char ** ppszDstText ) const;
     OGRErr          exportToWkb( const OGRGeometry* poGeom, OGRwkbByteOrder,
@@ -945,8 +958,10 @@ class CPL_DLL OGRCompoundCurve : public OGRCurve
 
     // IWks Interface
     virtual int WkbSize() const CPL_OVERRIDE;
-    virtual OGRErr importFromWkb( unsigned char *, int = -1,
-                                  OGRwkbVariant=wkbVariantOldOgc ) CPL_OVERRIDE;
+    virtual OGRErr importFromWkb( const unsigned char *,
+                                  int,
+                                  OGRwkbVariant,
+                                  int& nBytesConsumedOut ) CPL_OVERRIDE;
     virtual OGRErr exportToWkb( OGRwkbByteOrder, unsigned char *,
                                 OGRwkbVariant=wkbVariantOldOgc )
         const CPL_OVERRIDE;
@@ -1107,8 +1122,10 @@ class CPL_DLL OGRCurvePolygon : public OGRSurface
 
     // IWks Interface
     virtual int WkbSize() const CPL_OVERRIDE;
-    virtual OGRErr importFromWkb( unsigned char *, int = -1,
-                                  OGRwkbVariant=wkbVariantOldOgc ) CPL_OVERRIDE;
+    virtual OGRErr importFromWkb( const unsigned char *,
+                                  int,
+                                  OGRwkbVariant,
+                                  int& nBytesConsumedOut ) CPL_OVERRIDE;
     virtual OGRErr exportToWkb( OGRwkbByteOrder, unsigned char *,
                                 OGRwkbVariant=wkbVariantOldOgc )
         const CPL_OVERRIDE;
@@ -1213,8 +1230,10 @@ class CPL_DLL OGRPolygon : public OGRCurvePolygon
 
     // IWks Interface.
     virtual int WkbSize() const CPL_OVERRIDE;
-    virtual OGRErr importFromWkb( unsigned char *, int = -1,
-                                  OGRwkbVariant=wkbVariantOldOgc ) CPL_OVERRIDE;
+    virtual OGRErr importFromWkb( const unsigned char *,
+                                  int,
+                                  OGRwkbVariant,
+                                  int& nBytesConsumedOut ) CPL_OVERRIDE;
     virtual OGRErr exportToWkb( OGRwkbByteOrder, unsigned char *,
                                 OGRwkbVariant=wkbVariantOldOgc )
         const CPL_OVERRIDE;
@@ -1278,8 +1297,10 @@ class CPL_DLL OGRTriangle : public OGRPolygon
     virtual OGRwkbGeometryType getGeometryType() const CPL_OVERRIDE;
 
     // IWks Interface.
-    virtual OGRErr importFromWkb( unsigned char *, int = -1,
-                                  OGRwkbVariant=wkbVariantOldOgc ) CPL_OVERRIDE;
+    virtual OGRErr importFromWkb( const unsigned char *,
+                                  int,
+                                  OGRwkbVariant,
+                                  int& nBytesConsumedOut ) CPL_OVERRIDE;
 
     // New methods rewritten from OGRPolygon/OGRCurvePolygon/OGRGeometry.
     virtual OGRErr addRingDirectly( OGRCurve * poNewRing ) CPL_OVERRIDE;
@@ -1302,9 +1323,10 @@ class CPL_DLL OGRTriangle : public OGRPolygon
 
 class CPL_DLL OGRGeometryCollection : public OGRGeometry
 {
-    OGRErr      importFromWkbInternal( unsigned char * pabyData, int nSize,
+    OGRErr      importFromWkbInternal( const unsigned char * pabyData,
+                                       int nSize,
                                        int nRecLevel,
-                                       OGRwkbVariant );
+                                       OGRwkbVariant, int& nBytesConsumedOut );
     OGRErr      importFromWktInternal( char **ppszInput, int nRecLevel );
 
   protected:
@@ -1347,8 +1369,10 @@ class CPL_DLL OGRGeometryCollection : public OGRGeometry
 
     // IWks Interface
     virtual int WkbSize() const CPL_OVERRIDE;
-    virtual OGRErr importFromWkb( unsigned char *, int = -1,
-                                  OGRwkbVariant=wkbVariantOldOgc ) CPL_OVERRIDE;
+    virtual OGRErr importFromWkb( const unsigned char *,
+                                  int,
+                                  OGRwkbVariant,
+                                  int& nBytesConsumedOut ) CPL_OVERRIDE;
     virtual OGRErr exportToWkb( OGRwkbByteOrder, unsigned char *,
                                 OGRwkbVariant=wkbVariantOldOgc )
         const CPL_OVERRIDE;
@@ -1523,8 +1547,10 @@ class CPL_DLL OGRPolyhedralSurface : public OGRSurface
     virtual int WkbSize() const CPL_OVERRIDE;
     virtual const char *getGeometryName() const CPL_OVERRIDE;
     virtual OGRwkbGeometryType getGeometryType() const  CPL_OVERRIDE;
-    virtual OGRErr importFromWkb( unsigned char *, int=-1,
-                                  OGRwkbVariant=wkbVariantOldOgc ) CPL_OVERRIDE;
+    virtual OGRErr importFromWkb( const unsigned char *,
+                                  int,
+                                  OGRwkbVariant,
+                                  int& nBytesConsumedOut ) CPL_OVERRIDE;
     virtual OGRErr exportToWkb( OGRwkbByteOrder, unsigned char *,
                                 OGRwkbVariant=wkbVariantOldOgc )
         const CPL_OVERRIDE;
@@ -1743,6 +1769,13 @@ class CPL_DLL OGRGeometryFactory
     static OGRErr createFromWkb( unsigned char *, OGRSpatialReference *,
                                  OGRGeometry **, int = -1,
                                  OGRwkbVariant=wkbVariantOldOgc );
+    static OGRErr createFromWkb( const unsigned char * pabyData,
+                                 OGRSpatialReference *,
+                                 OGRGeometry **,
+                                 int nSize,
+                                 OGRwkbVariant eVariant,
+                                 int& nBytesConsumedOut );
+
     static OGRErr createFromWkt( char **, OGRSpatialReference *,
                                  OGRGeometry ** );
     static OGRErr createFromFgf( unsigned char *, OGRSpatialReference *,
diff --git a/gdal/ogr/ogr_p.h b/gdal/ogr/ogr_p.h
index 42a2bf799b..31363b8035 100644
--- a/gdal/ogr/ogr_p.h
+++ b/gdal/ogr/ogr_p.h
@@ -167,7 +167,7 @@ char CPL_DLL * OGRGeometryToHexEWKB( OGRGeometry * poGeometry, int nSRSId,
 /*                        WKB Type Handling encoding                    */
 /************************************************************************/
 
-OGRErr OGRReadWKBGeometryType( unsigned char * pabyData,
+OGRErr OGRReadWKBGeometryType( const unsigned char * pabyData,
                                OGRwkbVariant wkbVariant,
                                OGRwkbGeometryType *eGeometryType );
 
diff --git a/gdal/ogr/ogrcircularstring.cpp b/gdal/ogr/ogrcircularstring.cpp
index b0ec08bae3..7c8e8df727 100644
--- a/gdal/ogr/ogrcircularstring.cpp
+++ b/gdal/ogr/ogrcircularstring.cpp
@@ -137,12 +137,15 @@ const char * OGRCircularString::getGeometryName() const
 /*      format.                                                         */
 /************************************************************************/
 
-OGRErr OGRCircularString::importFromWkb( unsigned char * pabyData,
+OGRErr OGRCircularString::importFromWkb( const unsigned char * pabyData,
                                          int nSize,
-                                         OGRwkbVariant eWkbVariant )
+                                         OGRwkbVariant eWkbVariant,
+                                         int& nBytesConsumedOut )
 
 {
-    OGRErr eErr = OGRSimpleCurve::importFromWkb(pabyData, nSize, eWkbVariant);
+    OGRErr eErr = OGRSimpleCurve::importFromWkb(pabyData, nSize,
+                                                eWkbVariant,
+                                                nBytesConsumedOut);
     if( eErr == OGRERR_NONE )
     {
         if( !IsValidFast() )
diff --git a/gdal/ogr/ogrcompoundcurve.cpp b/gdal/ogr/ogrcompoundcurve.cpp
index cb30c9dc8c..1def6ddde4 100644
--- a/gdal/ogr/ogrcompoundcurve.cpp
+++ b/gdal/ogr/ogrcompoundcurve.cpp
@@ -148,9 +148,10 @@ OGRErr OGRCompoundCurve::addCurveDirectlyFromWkb( OGRGeometry* poSelf,
 /*                           importFromWkb()                            */
 /************************************************************************/
 
-OGRErr OGRCompoundCurve::importFromWkb( unsigned char * pabyData,
+OGRErr OGRCompoundCurve::importFromWkb( const unsigned char * pabyData,
                                         int nSize,
-                                        OGRwkbVariant eWkbVariant )
+                                        OGRwkbVariant eWkbVariant,
+                                       int& nBytesConsumedOut )
 {
     OGRwkbByteOrder eByteOrder = wkbNDR;
     int nDataOffset = 0;
@@ -160,10 +161,14 @@ OGRErr OGRCompoundCurve::importFromWkb( unsigned char * pabyData,
     if( eErr != OGRERR_NONE )
         return eErr;
 
-    return oCC.importBodyFromWkb(this, pabyData, nSize, nDataOffset,
+    eErr =  oCC.importBodyFromWkb(this, pabyData + nDataOffset, nSize,
                                  FALSE,  // bAcceptCompoundCurve
                                  addCurveDirectlyFromWkb,
-                                 eWkbVariant);
+                                 eWkbVariant,
+                                 nBytesConsumedOut);
+    if( eErr == OGRERR_NONE )
+        nBytesConsumedOut += nDataOffset;
+    return eErr;
 }
 
 /************************************************************************/
diff --git a/gdal/ogr/ogrcurvecollection.cpp b/gdal/ogr/ogrcurvecollection.cpp
index b5c85140ea..88271c81c7 100644
--- a/gdal/ogr/ogrcurvecollection.cpp
+++ b/gdal/ogr/ogrcurvecollection.cpp
@@ -213,7 +213,7 @@ OGRErr OGRCurveCollection::addCurveDirectly( OGRGeometry* poGeom,
 /************************************************************************/
 
 OGRErr OGRCurveCollection::importPreambuleFromWkb( OGRGeometry* poGeom,
-                                                   unsigned char * pabyData,
+                                                   const unsigned char * pabyData,
                                                    int& nSize,
                                                    int& nDataOffset,
                                                    OGRwkbByteOrder& eByteOrder,
@@ -249,26 +249,27 @@ OGRErr OGRCurveCollection::importPreambuleFromWkb( OGRGeometry* poGeom,
 
 OGRErr OGRCurveCollection::importBodyFromWkb(
     OGRGeometry* poGeom,
-    unsigned char * pabyData,
+    const unsigned char * pabyData,
     int nSize,
-    int nDataOffset,
     int bAcceptCompoundCurve,
     OGRErr (*pfnAddCurveDirectlyFromWkb)(OGRGeometry* poGeom,
                                          OGRCurve* poCurve),
-    OGRwkbVariant eWkbVariant )
+    OGRwkbVariant eWkbVariant,
+    int& nBytesConsumedOut )
 {
-
+    nBytesConsumedOut = -1;
 /* -------------------------------------------------------------------- */
 /*      Get the Geoms.                                                  */
 /* -------------------------------------------------------------------- */
     const int nIter = nCurveCount;
     nCurveCount = 0;
+    int nDataOffset = 0;
     for( int iGeom = 0; iGeom < nIter; iGeom++ )
     {
         OGRGeometry* poSubGeom = NULL;
 
         // Parses sub-geometry.
-        unsigned char* pabySubData = pabyData + nDataOffset;
+        const unsigned char* pabySubData = pabyData + nDataOffset;
         if( nSize < 9 && nSize != -1 )
             return OGRERR_NOT_ENOUGH_DATA;
 
@@ -278,13 +279,15 @@ OGRErr OGRCurveCollection::importBodyFromWkb(
             return OGRERR_FAILURE;
 
         OGRErr eErr = OGRERR_NONE;
+        int nSubGeomBytesConsumedOut = -1;
         if( (eSubGeomType != wkbCompoundCurve &&
              OGR_GT_IsCurve(eSubGeomType)) ||
             (bAcceptCompoundCurve && eSubGeomType == wkbCompoundCurve) )
         {
             eErr = OGRGeometryFactory::
                 createFromWkb( pabySubData, NULL,
-                               &poSubGeom, nSize, eWkbVariant );
+                               &poSubGeom, nSize, eWkbVariant,
+                               nSubGeomBytesConsumedOut );
         }
         else
         {
@@ -297,13 +300,14 @@ OGRErr OGRCurveCollection::importBodyFromWkb(
 
         if( eErr == OGRERR_NONE )
         {
-            // Do that before adding the curve to the collection, since that
-            // might change its dimensions.
-            const int nSubGeomWkbSize = poSubGeom->WkbSize();
+            CPLAssert( nSubGeomBytesConsumedOut > 0 );
             if( nSize != -1 )
-                nSize -= nSubGeomWkbSize;
+            {
+                CPLAssert( nSize >= nSubGeomBytesConsumedOut );
+                nSize -= nSubGeomBytesConsumedOut;
+            }
 
-            nDataOffset += nSubGeomWkbSize;
+            nDataOffset += nSubGeomBytesConsumedOut;
 
             OGRCurve *poCurve = dynamic_cast<OGRCurve *>(poSubGeom);
             if( poCurve == NULL )
@@ -320,6 +324,7 @@ OGRErr OGRCurveCollection::importBodyFromWkb(
         }
 
     }
+    nBytesConsumedOut = nDataOffset;
 
     return OGRERR_NONE;
 }
diff --git a/gdal/ogr/ogrcurvepolygon.cpp b/gdal/ogr/ogrcurvepolygon.cpp
index 3be106a64f..942c0342a0 100644
--- a/gdal/ogr/ogrcurvepolygon.cpp
+++ b/gdal/ogr/ogrcurvepolygon.cpp
@@ -445,11 +445,13 @@ OGRErr OGRCurvePolygon::addCurveDirectlyFromWkb( OGRGeometry* poSelf,
 /*      format.                                                         */
 /************************************************************************/
 
-OGRErr OGRCurvePolygon::importFromWkb( unsigned char * pabyData,
+OGRErr OGRCurvePolygon::importFromWkb( const unsigned char * pabyData,
                                        int nSize,
-                                       OGRwkbVariant eWkbVariant )
+                                       OGRwkbVariant eWkbVariant,
+                                       int& nBytesConsumedOut )
 
 {
+    nBytesConsumedOut = -1;
     OGRwkbByteOrder eByteOrder;
     int nDataOffset = 0;
     // coverity[tainted_data]
@@ -458,10 +460,14 @@ OGRErr OGRCurvePolygon::importFromWkb( unsigned char * pabyData,
     if( eErr != OGRERR_NONE )
         return eErr;
 
-    return oCC.importBodyFromWkb(this, pabyData, nSize, nDataOffset,
+    eErr = oCC.importBodyFromWkb(this, pabyData + nDataOffset, nSize,
                                  TRUE,  // bAcceptCompoundCurve
                                  addCurveDirectlyFromWkb,
-                                 eWkbVariant);
+                                 eWkbVariant,
+                                 nBytesConsumedOut );
+    if( eErr == OGRERR_NONE )
+        nBytesConsumedOut += nDataOffset;
+    return eErr;
 }
 
 /************************************************************************/
diff --git a/gdal/ogr/ogrgeometry.cpp b/gdal/ogr/ogrgeometry.cpp
index d09f351fa8..94eafce7e0 100644
--- a/gdal/ogr/ogrgeometry.cpp
+++ b/gdal/ogr/ogrgeometry.cpp
@@ -1358,9 +1358,44 @@ void OGR_G_GetEnvelope3D( OGRGeometryH hGeom, OGREnvelope3D *psEnvelope )
     reinterpret_cast<OGRGeometry *>(hGeom)->getEnvelope( psEnvelope );
 }
 
+
+/************************************************************************/
+/*                        importFromWkb()                               */
+/************************************************************************/
+
+/**
+ * \brief Assign geometry from well known binary data.
+ *
+ * The object must have already been instantiated as the correct derived
+ * type of geometry object to match the binaries type.  This method is used
+ * by the OGRGeometryFactory class, but not normally called by application
+ * code.
+ *
+ * This method relates to the SFCOM IWks::ImportFromWKB() method.
+ *
+ * This method is the same as the C function OGR_G_ImportFromWkb().
+ *
+ * @param pabyData the binary input data.
+ * @param nSize the size of pabyData in bytes, or -1 if not known.
+ * @param eWkbVariant if wkbVariantPostGIS1, special interpretation is
+ * done for curve geometries code
+ *
+ * @return OGRERR_NONE if all goes well, otherwise any of
+ * OGRERR_NOT_ENOUGH_DATA, OGRERR_UNSUPPORTED_GEOMETRY_TYPE, or
+ * OGRERR_CORRUPT_DATA may be returned.
+ */
+
+OGRErr OGRGeometry::importFromWkb( unsigned char * pabyData,
+                                   int nSize, OGRwkbVariant eWkbVariant )
+{
+    int nBytesConsumedOutIgnored = -1;
+    return importFromWkb( const_cast<const unsigned char*>(pabyData),
+                          nSize, eWkbVariant, nBytesConsumedOutIgnored );
+}
+
 /**
- * \fn OGRErr OGRGeometry::importFromWkb( unsigned char * pabyData,
- * int nSize, OGRwkbVariant eWkbVariant =wkbVariantOldOgc );
+ * \fn OGRErr OGRGeometry::importFromWkb( const unsigned char * pabyData,
+ * int nSize, OGRwkbVariant eWkbVariant, int& nBytesConsumedOut );
  *
  * \brief Assign geometry from well known binary data.
  *
@@ -1374,13 +1409,16 @@ void OGR_G_GetEnvelope3D( OGRGeometryH hGeom, OGREnvelope3D *psEnvelope )
  * This method is the same as the C function OGR_G_ImportFromWkb().
  *
  * @param pabyData the binary input data.
- * @param nSize the size of pabyData in bytes, or zero if not known.
+ * @param nSize the size of pabyData in bytes, or -1 if not known.
  * @param eWkbVariant if wkbVariantPostGIS1, special interpretation is
  * done for curve geometries code
+ * @param nBytesConsumedOut output parameter. Number of bytes consumed.
  *
  * @return OGRERR_NONE if all goes well, otherwise any of
  * OGRERR_NOT_ENOUGH_DATA, OGRERR_UNSUPPORTED_GEOMETRY_TYPE, or
  * OGRERR_CORRUPT_DATA may be returned.
+ * 
+ * @since GDAL 2.3
  */
 
 /************************************************************************/
@@ -1398,7 +1436,7 @@ void OGR_G_GetEnvelope3D( OGRGeometryH hGeom, OGREnvelope3D *psEnvelope )
  *
  * @param hGeom handle on the geometry to assign the well know binary data to.
  * @param pabyData the binary input data.
- * @param nSize the size of pabyData in bytes, or zero if not known.
+ * @param nSize the size of pabyData in bytes, or -1 if not known.
  *
  * @return OGRERR_NONE if all goes well, otherwise any of
  * OGRERR_NOT_ENOUGH_DATA, OGRERR_UNSUPPORTED_GEOMETRY_TYPE, or
@@ -6048,7 +6086,7 @@ char* OGRGeometryToHexEWKB( OGRGeometry * poGeometry, int nSRSId,
 /************************************************************************/
 
 //! @cond Doxygen_Suppress
-OGRErr OGRGeometry::importPreambuleFromWkb( unsigned char * pabyData,
+OGRErr OGRGeometry::importPreambuleFromWkb( const unsigned char * pabyData,
                                             int nSize,
                                             OGRwkbByteOrder& eByteOrder,
                                             OGRwkbVariant eWkbVariant )
@@ -6088,7 +6126,7 @@ OGRErr OGRGeometry::importPreambuleFromWkb( unsigned char * pabyData,
 /*      OGRCurvePolygon and OGRGeometryCollection.                      */
 /************************************************************************/
 
-OGRErr OGRGeometry::importPreambuleOfCollectionFromWkb( unsigned char * pabyData,
+OGRErr OGRGeometry::importPreambuleOfCollectionFromWkb( const unsigned char * pabyData,
                                                         int& nSize,
                                                         int& nDataOffset,
                                                         OGRwkbByteOrder& eByteOrder,
@@ -6139,7 +6177,10 @@ OGRErr OGRGeometry::importPreambuleOfCollectionFromWkb( unsigned char * pabyData
 
     nDataOffset = 9;
     if( nSize != -1 )
+    {
+        CPLAssert( nSize >= nDataOffset );
         nSize -= nDataOffset;
+    }
 
     return OGRERR_NONE;
 }
diff --git a/gdal/ogr/ogrgeometrycollection.cpp b/gdal/ogr/ogrgeometrycollection.cpp
index 36e13d92e7..b2c743e6d7 100644
--- a/gdal/ogr/ogrgeometrycollection.cpp
+++ b/gdal/ogr/ogrgeometrycollection.cpp
@@ -475,11 +475,13 @@ int OGRGeometryCollection::WkbSize() const
 /*                       importFromWkbInternal()                        */
 /************************************************************************/
 
-OGRErr OGRGeometryCollection::importFromWkbInternal( unsigned char * pabyData,
+OGRErr OGRGeometryCollection::importFromWkbInternal( const unsigned char * pabyData,
                                                      int nSize, int nRecLevel,
-                                                     OGRwkbVariant eWkbVariant )
+                                                     OGRwkbVariant eWkbVariant,
+                                                     int& nBytesConsumedOut )
 
 {
+    nBytesConsumedOut = -1;
     // Arbitrary value, but certainly large enough for reasonable use cases.
     if( nRecLevel == 32 )
     {
@@ -518,7 +520,7 @@ OGRErr OGRGeometryCollection::importFromWkbInternal( unsigned char * pabyData,
     for( int iGeom = 0; iGeom < nGeomCount; iGeom++ )
     {
         // Parses sub-geometry.
-        unsigned char* pabySubData = pabyData + nDataOffset;
+        const unsigned char* pabySubData = pabyData + nDataOffset;
         if( nSize < 9 && nSize != -1 )
             return OGRERR_NOT_ENOUGH_DATA;
 
@@ -539,6 +541,7 @@ OGRErr OGRGeometryCollection::importFromWkbInternal( unsigned char * pabyData,
         }
 
         OGRGeometry* poSubGeom = NULL;
+        int nSubGeomBytesConsumed = -1;
         if( OGR_GT_IsSubClassOf(eSubGeomType, wkbGeometryCollection) )
         {
             poSubGeom = OGRGeometryFactory::createGeometry( eSubGeomType );
@@ -547,13 +550,15 @@ OGRErr OGRGeometryCollection::importFromWkbInternal( unsigned char * pabyData,
             else
                 eErr = ((OGRGeometryCollection*)poSubGeom)->
                         importFromWkbInternal( pabySubData, nSize,
-                                               nRecLevel + 1, eWkbVariant );
+                                               nRecLevel + 1, eWkbVariant,
+                                               nSubGeomBytesConsumed );
         }
         else
         {
             eErr = OGRGeometryFactory::
                 createFromWkb( pabySubData, NULL,
-                               &poSubGeom, nSize, eWkbVariant );
+                               &poSubGeom, nSize, eWkbVariant,
+                               nSubGeomBytesConsumed );
         }
 
         if( eErr != OGRERR_NONE )
@@ -570,12 +575,16 @@ OGRErr OGRGeometryCollection::importFromWkbInternal( unsigned char * pabyData,
         if( papoGeoms[iGeom]->IsMeasured() )
             flags |= OGR_G_MEASURED;
 
-        const int nSubGeomWkbSize = papoGeoms[iGeom]->WkbSize();
+        CPLAssert( nSubGeomBytesConsumed > 0 );
         if( nSize != -1 )
-            nSize -= nSubGeomWkbSize;
+        {
+            CPLAssert( nSize >= nSubGeomBytesConsumed );
+            nSize -= nSubGeomBytesConsumed;
+        }
 
-        nDataOffset += nSubGeomWkbSize;
+        nDataOffset += nSubGeomBytesConsumed;
     }
+    nBytesConsumedOut = nDataOffset;
 
     return OGRERR_NONE;
 }
@@ -587,12 +596,14 @@ OGRErr OGRGeometryCollection::importFromWkbInternal( unsigned char * pabyData,
 /*      format.                                                         */
 /************************************************************************/
 
-OGRErr OGRGeometryCollection::importFromWkb( unsigned char * pabyData,
+OGRErr OGRGeometryCollection::importFromWkb( const unsigned char * pabyData,
                                              int nSize,
-                                             OGRwkbVariant eWkbVariant )
+                                             OGRwkbVariant eWkbVariant,
+                                             int& nBytesConsumedOut )
 
 {
-    return importFromWkbInternal(pabyData, nSize, 0, eWkbVariant);
+    return importFromWkbInternal(pabyData, nSize, 0, eWkbVariant,
+                                 nBytesConsumedOut);
 }
 
 /************************************************************************/
diff --git a/gdal/ogr/ogrgeometryfactory.cpp b/gdal/ogr/ogrgeometryfactory.cpp
index b366dbce55..666c645684 100644
--- a/gdal/ogr/ogrgeometryfactory.cpp
+++ b/gdal/ogr/ogrgeometryfactory.cpp
@@ -107,6 +107,24 @@ OGRErr OGRGeometryFactory::createFromWkb( unsigned char *pabyData,
                                           OGRwkbVariant eWkbVariant )
 
 {
+    int nBytesConsumedOutIgnored = -1;
+    return createFromWkb( const_cast<const unsigned char*>(pabyData),
+                          poSR,
+                          ppoReturn,
+                          nBytes,
+                          eWkbVariant,
+                          nBytesConsumedOutIgnored);
+}
+
+OGRErr OGRGeometryFactory::createFromWkb( const unsigned char *pabyData,
+                                          OGRSpatialReference * poSR,
+                                          OGRGeometry **ppoReturn,
+                                          int nBytes,
+                                          OGRwkbVariant eWkbVariant,
+                                          int& nBytesConsumedOut )
+
+{
+    nBytesConsumedOut = -1;
     *ppoReturn = NULL;
 
     if( nBytes < 9 && nBytes != -1 )
@@ -159,7 +177,8 @@ OGRErr OGRGeometryFactory::createFromWkb( unsigned char *pabyData,
 /* -------------------------------------------------------------------- */
 /*      Import from binary.                                             */
 /* -------------------------------------------------------------------- */
-    const OGRErr eErr = poGeom->importFromWkb( pabyData, nBytes, eWkbVariant );
+    const OGRErr eErr = poGeom->importFromWkb( pabyData, nBytes, eWkbVariant,
+                                               nBytesConsumedOut );
     if( eErr != OGRERR_NONE )
     {
         delete poGeom;
diff --git a/gdal/ogr/ogrlinearring.cpp b/gdal/ogr/ogrlinearring.cpp
index 7125f384da..0bdcb4e413 100644
--- a/gdal/ogr/ogrlinearring.cpp
+++ b/gdal/ogr/ogrlinearring.cpp
@@ -151,9 +151,10 @@ int OGRLinearRing::WkbSize() const
 /*      Disable method for this class.                                  */
 /************************************************************************/
 
-OGRErr OGRLinearRing::importFromWkb( CPL_UNUSED unsigned char *pabyData,
-                                     CPL_UNUSED int nSize,
-                                     CPL_UNUSED OGRwkbVariant eWkbVariant )
+OGRErr OGRLinearRing::importFromWkb( const unsigned char * /*pabyData*/,
+                                     int /*nSize*/,
+                                     OGRwkbVariant /*eWkbVariant*/,
+                                     int& /* nBytesConsumedOut */ )
 
 {
     return OGRERR_UNSUPPORTED_OPERATION;
@@ -182,10 +183,12 @@ OGRErr OGRLinearRing::exportToWkb( CPL_UNUSED OGRwkbByteOrder eByteOrder,
 
 //! @cond Doxygen_Suppress
 OGRErr OGRLinearRing::_importFromWkb( OGRwkbByteOrder eByteOrder, int _flags,
-                                      unsigned char * pabyData,
-                                      int nBytesAvailable )
+                                      const unsigned char * pabyData,
+                                      int nBytesAvailable,
+                                      int& nBytesConsumedOut )
 
 {
+    nBytesConsumedOut = -1;
     if( nBytesAvailable < 4 && nBytesAvailable != -1 )
         return OGRERR_NOT_ENOUGH_DATA;
 
@@ -233,6 +236,9 @@ OGRErr OGRLinearRing::_importFromWkb( OGRwkbByteOrder eByteOrder, int _flags,
     else
         RemoveM();
 
+
+    nBytesConsumedOut =  4 + nPointCount * nPointSize;
+
 /* -------------------------------------------------------------------- */
 /*      Get the vertices                                                */
 /* -------------------------------------------------------------------- */
diff --git a/gdal/ogr/ogrlinestring.cpp b/gdal/ogr/ogrlinestring.cpp
index aaffb5f085..af9b041f8b 100644
--- a/gdal/ogr/ogrlinestring.cpp
+++ b/gdal/ogr/ogrlinestring.cpp
@@ -1467,15 +1467,17 @@ void OGRSimpleCurve::addSubLineString( const OGRLineString *poOtherLine,
 /*      format.                                                         */
 /************************************************************************/
 
-OGRErr OGRSimpleCurve::importFromWkb( unsigned char * pabyData,
+OGRErr OGRSimpleCurve::importFromWkb( const unsigned char *pabyData,
                                       int nSize,
-                                      OGRwkbVariant eWkbVariant )
+                                      OGRwkbVariant eWkbVariant,
+                                      int& nBytesConsumedOut )
 
 {
     OGRwkbByteOrder     eByteOrder;
     int                 nDataOffset = 0;
     int                 nNewNumPoints = 0;
 
+    nBytesConsumedOut = -1;
     OGRErr eErr = importPreambuleOfCollectionFromWkb( pabyData,
                                                       nSize,
                                                       nDataOffset,
@@ -1505,6 +1507,10 @@ OGRErr OGRSimpleCurve::importFromWkb( unsigned char * pabyData,
     if( nPointCount < nNewNumPoints )
         return OGRERR_FAILURE;
 
+    nBytesConsumedOut = 9 + 8 * nPointCount *
+                                    (2 + ((flags & OGR_G_3D) ? 1 : 0)+
+                                         ((flags & OGR_G_MEASURED) ? 1 : 0));
+
 /* -------------------------------------------------------------------- */
 /*      Get the vertex.                                                 */
 /* -------------------------------------------------------------------- */
diff --git a/gdal/ogr/ogrpoint.cpp b/gdal/ogr/ogrpoint.cpp
index 8e0dd33bf7..7617310fde 100644
--- a/gdal/ogr/ogrpoint.cpp
+++ b/gdal/ogr/ogrpoint.cpp
@@ -295,11 +295,13 @@ int OGRPoint::WkbSize() const
 /*      format.                                                         */
 /************************************************************************/
 
-OGRErr OGRPoint::importFromWkb( unsigned char * pabyData,
+OGRErr OGRPoint::importFromWkb( const unsigned char *pabyData,
                                 int nSize,
-                                OGRwkbVariant eWkbVariant )
+                                OGRwkbVariant eWkbVariant,
+                                int& nBytesConsumedOut )
 
 {
+    nBytesConsumedOut = -1;
     OGRwkbByteOrder eByteOrder = wkbNDR;
 
     flags = 0;
@@ -320,6 +322,9 @@ OGRErr OGRPoint::importFromWkb( unsigned char * pabyData,
             return OGRERR_NOT_ENOUGH_DATA;
     }
 
+    nBytesConsumedOut = 5 + 8 * (2 + ((flags & OGR_G_3D) ? 1 : 0)+
+                                     ((flags & OGR_G_MEASURED) ? 1 : 0));
+
 /* -------------------------------------------------------------------- */
 /*      Get the vertex.                                                 */
 /* -------------------------------------------------------------------- */
diff --git a/gdal/ogr/ogrpolygon.cpp b/gdal/ogr/ogrpolygon.cpp
index 41cf1f6aa1..4823581f4f 100644
--- a/gdal/ogr/ogrpolygon.cpp
+++ b/gdal/ogr/ogrpolygon.cpp
@@ -316,11 +316,13 @@ int OGRPolygon::WkbSize() const
 /*      format.                                                         */
 /************************************************************************/
 
-OGRErr OGRPolygon::importFromWkb( unsigned char * pabyData,
+OGRErr OGRPolygon::importFromWkb( const unsigned char * pabyData,
                                   int nSize,
-                                  OGRwkbVariant eWkbVariant )
+                                  OGRwkbVariant eWkbVariant,
+                                  int& nBytesConsumedOut )
 
 {
+    nBytesConsumedOut = -1;
     OGRwkbByteOrder eByteOrder = wkbNDR;
     int nDataOffset = 0;
     // coverity[tainted_data]
@@ -336,9 +338,11 @@ OGRErr OGRPolygon::importFromWkb( unsigned char * pabyData,
     {
         OGRLinearRing* poLR = new OGRLinearRing();
         oCC.papoCurves[iRing] = poLR;
+        int nBytesConsumedRing = -1;
         eErr = poLR->_importFromWkb( eByteOrder, flags,
-                                                 pabyData + nDataOffset,
-                                                 nSize );
+                                     pabyData + nDataOffset,
+                                     nSize,
+                                     nBytesConsumedRing );
         if( eErr != OGRERR_NONE )
         {
             delete oCC.papoCurves[iRing];
@@ -346,11 +350,16 @@ OGRErr OGRPolygon::importFromWkb( unsigned char * pabyData,
             return eErr;
         }
 
+        CPLAssert( nBytesConsumedRing > 0 );
         if( nSize != -1 )
-            nSize -= poLR->_WkbSize( flags );
+        {
+            CPLAssert( nSize >= nBytesConsumedRing );
+            nSize -= nBytesConsumedRing;
+        }
 
-        nDataOffset += poLR->_WkbSize( flags );
+        nDataOffset += nBytesConsumedRing;
     }
+    nBytesConsumedOut = nDataOffset;
 
     return OGRERR_NONE;
 }
diff --git a/gdal/ogr/ogrpolyhedralsurface.cpp b/gdal/ogr/ogrpolyhedralsurface.cpp
index 148c9b7c87..3595398e7b 100644
--- a/gdal/ogr/ogrpolyhedralsurface.cpp
+++ b/gdal/ogr/ogrpolyhedralsurface.cpp
@@ -213,10 +213,12 @@ void OGRPolyhedralSurface::getEnvelope( OGREnvelope3D * psEnvelope ) const
 /*                           importFromWkb()                            */
 /************************************************************************/
 
-OGRErr OGRPolyhedralSurface::importFromWkb ( unsigned char * pabyData,
+OGRErr OGRPolyhedralSurface::importFromWkb ( const unsigned char * pabyData,
                                              int nSize,
-                                             OGRwkbVariant eWkbVariant )
+                                             OGRwkbVariant eWkbVariant,
+                                             int& nBytesConsumedOut )
 {
+    nBytesConsumedOut = -1;
     oMP.nGeomCount = 0;
     OGRwkbByteOrder eByteOrder = wkbXDR;
     int nDataOffset = 0;
@@ -246,7 +248,7 @@ OGRErr OGRPolyhedralSurface::importFromWkb ( unsigned char * pabyData,
     for( int iGeom = 0; iGeom < oMP.nGeomCount; iGeom++ )
     {
         // Parse the polygons
-        unsigned char* pabySubData = pabyData + nDataOffset;
+        const unsigned char* pabySubData = pabyData + nDataOffset;
         if( nSize < 9 && nSize != -1 )
             return OGRERR_NOT_ENOUGH_DATA;
 
@@ -265,9 +267,11 @@ OGRErr OGRPolyhedralSurface::importFromWkb ( unsigned char * pabyData,
         }
 
         OGRGeometry* poSubGeom = NULL;
+        int nSubGeomBytesConsumed = -1;
         eErr = OGRGeometryFactory::createFromWkb( pabySubData, NULL,
                                                   &poSubGeom, nSize,
-                                                  eWkbVariant );
+                                                  eWkbVariant,
+                                                  nSubGeomBytesConsumed );
 
         if( eErr != OGRERR_NONE )
         {
@@ -283,12 +287,16 @@ OGRErr OGRPolyhedralSurface::importFromWkb ( unsigned char * pabyData,
         if (oMP.papoGeoms[iGeom]->IsMeasured())
             flags |= OGR_G_MEASURED;
 
-        int nSubGeomWkbSize = oMP.papoGeoms[iGeom]->WkbSize();
+        CPLAssert( nSubGeomBytesConsumed > 0 );
         if( nSize != -1 )
-            nSize -= nSubGeomWkbSize;
+        {
+            CPLAssert( nSize >= nSubGeomBytesConsumed );
+            nSize -= nSubGeomBytesConsumed;
+        }
 
-        nDataOffset += nSubGeomWkbSize;
+        nDataOffset += nSubGeomBytesConsumed;
     }
+    nBytesConsumedOut = nDataOffset;
 
     return OGRERR_NONE;
 }
diff --git a/gdal/ogr/ogrtriangle.cpp b/gdal/ogr/ogrtriangle.cpp
index fdbcb48589..5e132f93b9 100644
--- a/gdal/ogr/ogrtriangle.cpp
+++ b/gdal/ogr/ogrtriangle.cpp
@@ -190,11 +190,13 @@ bool OGRTriangle::quickValidityCheck() const
 /*                           importFromWkb()                            */
 /************************************************************************/
 
-OGRErr OGRTriangle::importFromWkb( unsigned char *pabyData,
-                                  int nSize,
-                                  OGRwkbVariant eWkbVariant )
+OGRErr OGRTriangle::importFromWkb( const unsigned char *pabyData,
+                                   int nSize,
+                                   OGRwkbVariant eWkbVariant,
+                                   int& nBytesConsumedOut )
 {
-    OGRErr eErr = OGRPolygon::importFromWkb( pabyData, nSize, eWkbVariant );
+    OGRErr eErr = OGRPolygon::importFromWkb( pabyData, nSize, eWkbVariant,
+                                             nBytesConsumedOut );
     if( eErr != OGRERR_NONE )
         return eErr;
 
diff --git a/gdal/ogr/ogrutils.cpp b/gdal/ogr/ogrutils.cpp
index a910cb0e17..e6b19a9dae 100644
--- a/gdal/ogr/ogrutils.cpp
+++ b/gdal/ogr/ogrutils.cpp
@@ -1671,7 +1671,7 @@ OGRErr OGRCheckPermutation( int* panPermutation, int nSize )
     return eErr;
 }
 
-OGRErr OGRReadWKBGeometryType( unsigned char * pabyData,
+OGRErr OGRReadWKBGeometryType( const unsigned char * pabyData,
                                OGRwkbVariant eWkbVariant,
                                OGRwkbGeometryType *peGeometryType )
 {
