diff --git a/gn/sksl_tests.gni b/gn/sksl_tests.gni
index be938f12cb..4112a3f04f 100644
--- a/gn/sksl_tests.gni
+++ b/gn/sksl_tests.gni
@@ -115,6 +115,7 @@ sksl_error_tests = [
   "$_tests/sksl/errors/Ossfuzz26700.sksl",
   "$_tests/sksl/errors/Ossfuzz26759.sksl",
   "$_tests/sksl/errors/Ossfuzz27650.sksl",
+  "$_tests/sksl/errors/Ossfuzz27663.sksl",
   "$_tests/sksl/errors/OverflowIntLiteral.sksl",
   "$_tests/sksl/errors/OverflowUintLiteral.sksl",
   "$_tests/sksl/errors/PrivateTypes.sksl",
diff --git a/src/sksl/ir/SkSLConstructor.cpp b/src/sksl/ir/SkSLConstructor.cpp
index a57fe4c06a..53f7fd2ee3 100644
--- a/src/sksl/ir/SkSLConstructor.cpp
+++ b/src/sksl/ir/SkSLConstructor.cpp
@@ -63,13 +63,13 @@ bool Constructor::compareConstant(const Context& context, const Expression& othe
     return true;
 }
 
-template <typename resultType>
-resultType Constructor::getVecComponent(int index) const {
+template <typename ResultType>
+ResultType Constructor::getVecComponent(int index) const {
     SkASSERT(this->type().typeKind() == Type::TypeKind::kVector);
     if (this->arguments().size() == 1 &&
         this->arguments()[0]->type().typeKind() == Type::TypeKind::kScalar) {
         // This constructor just wraps a scalar. Propagate out the value.
-        if (std::is_floating_point<resultType>::value) {
+        if (std::is_floating_point<ResultType>::value) {
             return this->arguments()[0]->getConstantFloat();
         } else {
             return this->arguments()[0]->getConstantInt();
@@ -87,7 +87,7 @@ resultType Constructor::getVecComponent(int index) const {
         if (arg->type().typeKind() == Type::TypeKind::kScalar) {
             if (index == current) {
                 // We're on the proper argument, and it's a scalar; fetch it.
-                if (std::is_floating_point<resultType>::value) {
+                if (std::is_floating_point<ResultType>::value) {
                     return arg->getConstantFloat();
                 } else {
                     return arg->getConstantInt();
@@ -103,11 +103,9 @@ resultType Constructor::getVecComponent(int index) const {
                 if (current + constructor.type().columns() > index) {
                     // We've found a constructor that overlaps the proper argument. Descend into
                     // it, honoring the type.
-                    if (constructor.type().componentType().isFloat()) {
-                        return resultType(constructor.getVecComponent<SKSL_FLOAT>(index - current));
-                    } else {
-                        return resultType(constructor.getVecComponent<SKSL_INT>(index - current));
-                    }
+                    return constructor.type().componentType().isFloat()
+                              ? ResultType(constructor.getVecComponent<SKSL_FLOAT>(index - current))
+                              : ResultType(constructor.getVecComponent<SKSL_INT>(index - current));
                 }
                 break;
             }
@@ -119,15 +117,15 @@ resultType Constructor::getVecComponent(int index) const {
                     // we shouldn't see any other tokens here.
                     SkASSERT(prefix.getOperator() == Token::Kind::TK_MINUS);
 
-                    // We expect the - prefix to always be attached to a constructor.
-                    const Constructor& constructor = prefix.operand()->as<Constructor>();
-
-                    // Descend into this constructor, honoring the type.
-                    if (constructor.type().componentType().isFloat()) {
-                        return -resultType(constructor.getVecComponent<SKSL_FLOAT>(index -
-                                                                                   current));
+                    const Expression& operand = *prefix.operand();
+                    if (operand.type().typeKind() == Type::TypeKind::kVector) {
+                        return operand.type().componentType().isFloat()
+                                ? -ResultType(operand.getVecComponent<SKSL_FLOAT>(index - current))
+                                : -ResultType(operand.getVecComponent<SKSL_INT>(index - current));
                     } else {
-                        return -resultType(constructor.getVecComponent<SKSL_INT>(index - current));
+                        return operand.type().isFloat()
+                                ? -ResultType(operand.getConstantFloat())
+                                : -ResultType(operand.getConstantInt());
                     }
                 }
                 break;
diff --git a/src/sksl/ir/SkSLPrefixExpression.h b/src/sksl/ir/SkSLPrefixExpression.h
index 65631138e6..119a21b5d2 100644
--- a/src/sksl/ir/SkSLPrefixExpression.h
+++ b/src/sksl/ir/SkSLPrefixExpression.h
@@ -85,6 +85,16 @@ public:
         return Compiler::OperatorName(this->getOperator()) + this->operand()->description();
     }
 
+    int64_t getConstantInt() const override {
+        SkASSERT(this->isNegationOfCompileTimeConstant());
+        return -this->operand()->getConstantInt();
+    }
+
+    SKSL_FLOAT getConstantFloat() const override {
+        SkASSERT(this->isNegationOfCompileTimeConstant());
+        return -this->operand()->getConstantFloat();
+    }
+
     bool compareConstant(const Context& context, const Expression& other) const override {
         // This expression and the other expression must be of the same kind. Since the only
         // compile-time PrefixExpression we optimize for is negation, that means we're comparing
diff --git a/tests/sksl/errors/Ossfuzz27663.sksl b/tests/sksl/errors/Ossfuzz27663.sksl
new file mode 100644
index 0000000000..432f8639b4
--- /dev/null
+++ b/tests/sksl/errors/Ossfuzz27663.sksl
@@ -0,0 +1 @@
+void main() { sk_FragColor = float4(1) / - -half4(0); }
diff --git a/tests/sksl/errors/golden/Ossfuzz27663.glsl b/tests/sksl/errors/golden/Ossfuzz27663.glsl
new file mode 100644
index 0000000000..8cffafe221
--- /dev/null
+++ b/tests/sksl/errors/golden/Ossfuzz27663.glsl
@@ -0,0 +1,5 @@
+### Compilation failed:
+
+error: 1: division by zero
+error: 1: type mismatch: '=' cannot operate on 'half4', 'float4'
+2 errors
