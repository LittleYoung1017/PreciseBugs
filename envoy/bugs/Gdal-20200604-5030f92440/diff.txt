diff --git a/test/extensions/filters/http/common/fuzz/BUILD b/test/extensions/filters/http/common/fuzz/BUILD
index cc19fb5dfc..27f5d59038 100644
--- a/test/extensions/filters/http/common/fuzz/BUILD
+++ b/test/extensions/filters/http/common/fuzz/BUILD
@@ -36,12 +36,15 @@ envoy_cc_test_library(
         "//source/common/http:utility_lib",
         "//source/common/protobuf:utility_lib",
         "//source/extensions/filters/http:well_known_names",
+        "//source/extensions/filters/http/common:utility_lib",
         "//test/fuzz:utility_lib",
         "//test/mocks/buffer:buffer_mocks",
         "//test/mocks/http:http_mocks",
         "//test/mocks/server:server_mocks",
         "//test/proto:bookstore_proto_cc_proto",
         "@envoy_api//envoy/extensions/filters/http/grpc_json_transcoder/v3:pkg_cc_proto",
+        "@envoy_api//envoy/extensions/filters/http/squash/v3:pkg_cc_proto",
+        "@envoy_api//envoy/extensions/filters/http/tap/v3:pkg_cc_proto",
     ],
 )
 
diff --git a/test/extensions/filters/http/common/fuzz/filter_corpus/clusterfuzz-testcase-minimized-filter_fuzz_test-5143098977157120.fuzz b/test/extensions/filters/http/common/fuzz/filter_corpus/clusterfuzz-testcase-minimized-filter_fuzz_test-5143098977157120.fuzz
new file mode 100644
index 0000000000..d212ffdb4e
Binary files /dev/null and b/test/extensions/filters/http/common/fuzz/filter_corpus/clusterfuzz-testcase-minimized-filter_fuzz_test-5143098977157120.fuzz differ
diff --git a/test/extensions/filters/http/common/fuzz/filter_corpus/clusterfuzz-testcase-minimized-filter_fuzz_test-5713820013297664 b/test/extensions/filters/http/common/fuzz/filter_corpus/clusterfuzz-testcase-minimized-filter_fuzz_test-5713820013297664
new file mode 100644
index 0000000000..58adf9a302
Binary files /dev/null and b/test/extensions/filters/http/common/fuzz/filter_corpus/clusterfuzz-testcase-minimized-filter_fuzz_test-5713820013297664 differ
diff --git a/test/extensions/filters/http/common/fuzz/filter_corpus/clusterfuzz-testcase-minimized-filter_fuzz_test-5714246842449920.fuzz b/test/extensions/filters/http/common/fuzz/filter_corpus/clusterfuzz-testcase-minimized-filter_fuzz_test-5714246842449920.fuzz
new file mode 100644
index 0000000000..069f873d88
Binary files /dev/null and b/test/extensions/filters/http/common/fuzz/filter_corpus/clusterfuzz-testcase-minimized-filter_fuzz_test-5714246842449920.fuzz differ
diff --git a/test/extensions/filters/http/common/fuzz/filter_corpus/not_implemented_tap b/test/extensions/filters/http/common/fuzz/filter_corpus/not_implemented_tap
new file mode 100644
index 0000000000..0b01672488
Binary files /dev/null and b/test/extensions/filters/http/common/fuzz/filter_corpus/not_implemented_tap differ
diff --git a/test/extensions/filters/http/common/fuzz/uber_filter.cc b/test/extensions/filters/http/common/fuzz/uber_filter.cc
index 37d1a7af8a..49d8ff3bbe 100644
--- a/test/extensions/filters/http/common/fuzz/uber_filter.cc
+++ b/test/extensions/filters/http/common/fuzz/uber_filter.cc
@@ -124,7 +124,11 @@ Http::FilterHeadersStatus UberFilterFuzzer::sendHeaders(Http::StreamEncoderFilte
   }
 
   ENVOY_LOG_MISC(debug, "Encoding headers (end_stream={}):\n{} ", end_stream, response_headers_);
-  return filter->encodeHeaders(response_headers_, end_stream);
+  Http::FilterHeadersStatus status = filter->encodeHeaders(response_headers_, end_stream);
+  if (end_stream) {
+    filter->encodeComplete();
+  }
+  return status;
 }
 
 template <>
@@ -138,7 +142,11 @@ template <>
 Http::FilterDataStatus UberFilterFuzzer::sendData(Http::StreamEncoderFilter* filter,
                                                   Buffer::Instance& buffer, bool end_stream) {
   ENVOY_LOG_MISC(debug, "Encoding data (end_stream={}): {} ", end_stream, buffer.toString());
-  return filter->encodeData(buffer, end_stream);
+  Http::FilterDataStatus status = filter->encodeData(buffer, end_stream);
+  if (end_stream) {
+    filter->encodeComplete();
+  }
+  return status;
 }
 
 template <>
@@ -155,6 +163,7 @@ void UberFilterFuzzer::sendTrailers(Http::StreamEncoderFilter* filter,
   response_trailers_ = Fuzz::fromHeaders<Http::TestResponseTrailerMapImpl>(data.trailers());
   ENVOY_LOG_MISC(debug, "Encoding trailers:\n{} ", response_trailers_);
   filter->encodeTrailers(response_trailers_);
+  filter->encodeComplete();
 }
 
 void UberFilterFuzzer::accessLog(AccessLog::Instance* access_logger,
diff --git a/test/extensions/filters/http/common/fuzz/uber_per_filter.cc b/test/extensions/filters/http/common/fuzz/uber_per_filter.cc
index 50c33396c2..da4d963164 100644
--- a/test/extensions/filters/http/common/fuzz/uber_per_filter.cc
+++ b/test/extensions/filters/http/common/fuzz/uber_per_filter.cc
@@ -1,5 +1,8 @@
 #include "envoy/extensions/filters/http/grpc_json_transcoder/v3/transcoder.pb.h"
+#include "envoy/extensions/filters/http/squash/v3/squash.pb.h"
+#include "envoy/extensions/filters/http/tap/v3/tap.pb.h"
 
+#include "extensions/filters/http/common/utility.h"
 #include "extensions/filters/http/well_known_names.h"
 
 #include "test/extensions/filters/http/common/fuzz/uber_filter.h"
@@ -70,11 +73,39 @@ void UberFilterFuzzer::guideAnyProtoType(test::fuzz::HttpData* mutable_data, uin
   mutable_any->set_type_url(type_url);
 }
 
+void cleanAttachmentTemplate(Protobuf::Message* message) {
+  envoy::extensions::filters::http::squash::v3::Squash& config =
+      dynamic_cast<envoy::extensions::filters::http::squash::v3::Squash&>(*message);
+  std::string json;
+  Protobuf::util::JsonPrintOptions json_options;
+  if (!Protobuf::util::MessageToJsonString(config.attachment_template(), &json, json_options)
+           .ok()) {
+    config.clear_attachment_template();
+  }
+}
+
+void cleanTapConfig(Protobuf::Message* message) {
+  envoy::extensions::filters::http::tap::v3::Tap& config =
+      dynamic_cast<envoy::extensions::filters::http::tap::v3::Tap&>(*message);
+  if (config.common_config().config_type_case() ==
+      envoy::extensions::common::tap::v3::CommonExtensionConfig::ConfigTypeCase::kTapdsConfig) {
+    config.mutable_common_config()->mutable_static_config()->mutable_match_config()->set_any_match(
+        true);
+  }
+}
+
 void UberFilterFuzzer::cleanFuzzedConfig(absl::string_view filter_name,
                                          Protobuf::Message* message) {
+  const std::string name = Extensions::HttpFilters::Common::FilterNameUtil::canonicalFilterName(
+      std::string(filter_name));
   // Map filter name to clean-up function.
-  if (filter_name == HttpFilterNames::get().GrpcJsonTranscoder) {
+  if (name == HttpFilterNames::get().GrpcJsonTranscoder) {
     addBookstoreProtoDescriptor(message);
+  } else if (name == HttpFilterNames::get().Squash) {
+    cleanAttachmentTemplate(message);
+  } else if (name == HttpFilterNames::get().Tap) {
+    // TapDS oneof field not implemented.
+    cleanTapConfig(message);
   }
 }
 
