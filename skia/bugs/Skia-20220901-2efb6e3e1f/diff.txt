diff --git a/gn/sksl_tests.gni b/gn/sksl_tests.gni
index f0b1229c26..be3074ff5d 100644
--- a/gn/sksl_tests.gni
+++ b/gn/sksl_tests.gni
@@ -167,6 +167,7 @@ sksl_error_tests = [
   "/sksl/errors/Ossfuzz47935.sksl",
   "/sksl/errors/Ossfuzz48592.sksl",
   "/sksl/errors/Ossfuzz49558.sksl",
+  "/sksl/errors/Ossfuzz50798.sksl",
   "/sksl/errors/OverflowFloatIntrinsic.sksl",
   "/sksl/errors/OverflowFloatLiteral.rts",
   "/sksl/errors/OverflowInlinedLiteral.sksl",
diff --git a/resources/sksl/errors/Ossfuzz50798.sksl b/resources/sksl/errors/Ossfuzz50798.sksl
new file mode 100644
index 0000000000..e224b79b3d
--- /dev/null
+++ b/resources/sksl/errors/Ossfuzz50798.sksl
@@ -0,0 +1,5 @@
+int[abs(floatBitsToInt(-abs(0)))] x;
+
+/*%%*
+array size must be an integer
+*%%*/
diff --git a/src/sksl/ir/SkSLFunctionCall.cpp b/src/sksl/ir/SkSLFunctionCall.cpp
index 214b642257..475414c1f8 100644
--- a/src/sksl/ir/SkSLFunctionCall.cpp
+++ b/src/sksl/ir/SkSLFunctionCall.cpp
@@ -39,7 +39,6 @@
 
 #include <algorithm>
 #include <array>
-#include <cfloat>
 #include <cmath>
 #include <cstddef>
 #include <cstdint>
@@ -114,6 +113,8 @@ static std::unique_ptr<Expression> coalesce_n_way_vector(const Expression* arg0,
     // every component.
 
     Position pos = arg0->fPosition;
+    double minimumValue = returnType.componentType().minimumValue();
+    double maximumValue = returnType.componentType().maximumValue();
 
     const Type& vecType =          arg0->type().isVector()  ? arg0->type() :
                           (arg1 && arg1->type().isVector()) ? arg1->type() :
@@ -138,8 +139,8 @@ static std::unique_ptr<Expression> coalesce_n_way_vector(const Expression* arg0,
 
         value = coalesce(value, *arg0Value, *arg1Value);
 
-        if (value >= -FLT_MAX && value <= FLT_MAX) {
-            // This result will fit inside a float Literal.
+        if (value >= minimumValue && value <= maximumValue) {
+            // This result will fit inside the return type.
         } else {
             // The value is outside the float range or is NaN (all if-checks fail); do not optimize.
             return nullptr;
@@ -232,6 +233,8 @@ static std::unique_ptr<Expression> evaluate_n_way_intrinsic(const Context& conte
     // of scalars and compounds, scalars are interpreted as a compound containing the same value for
     // every component.
 
+    double minimumValue = returnType.componentType().minimumValue();
+    double maximumValue = returnType.componentType().maximumValue();
     int slots = returnType.slotCount();
     double array[16];
 
@@ -259,8 +262,8 @@ static std::unique_ptr<Expression> evaluate_n_way_intrinsic(const Context& conte
 
         array[index] = eval(*arg0Value, *arg1Value, *arg2Value);
 
-        if (array[index] >= -FLT_MAX && array[index] <= FLT_MAX) {
-            // This result will fit inside a float Literal.
+        if (array[index] >= minimumValue && array[index] <= maximumValue) {
+            // This result will fit inside the return type.
         } else {
             // The value is outside the float range or is NaN (all if-checks fail); do not optimize.
             return nullptr;
diff --git a/tests/sksl/errors/Ossfuzz50798.glsl b/tests/sksl/errors/Ossfuzz50798.glsl
new file mode 100644
index 0000000000..eec77900b0
--- /dev/null
+++ b/tests/sksl/errors/Ossfuzz50798.glsl
@@ -0,0 +1,6 @@
+### Compilation failed:
+
+error: 1: array size must be an integer
+int[abs(floatBitsToInt(-abs(0)))] x;
+    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+1 error
