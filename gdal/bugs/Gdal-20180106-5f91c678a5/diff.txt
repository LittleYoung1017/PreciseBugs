diff --git a/gdal/ogr/ogrsf_frmts/openfilegdb/filegdbtable.cpp b/gdal/ogr/ogrsf_frmts/openfilegdb/filegdbtable.cpp
index f89d3874ee..16265483b2 100644
--- a/gdal/ogr/ogrsf_frmts/openfilegdb/filegdbtable.cpp
+++ b/gdal/ogr/ogrsf_frmts/openfilegdb/filegdbtable.cpp
@@ -60,6 +60,17 @@ static const GUInt32 EXT_SHAPE_SEGMENT_ELLIPSE = 5;
 namespace OpenFileGDB
 {
 
+/************************************************************************/
+/*                           SanitizeScale()                            */
+/************************************************************************/
+
+static double SanitizeScale(double dfVal)
+{
+    if( dfVal == 0.0 )
+        return std::numeric_limits<double>::min(); // to prevent divide by zero
+    return dfVal;
+}
+
 /************************************************************************/
 /*                      FileGDBTablePrintError()                        */
 /************************************************************************/
@@ -980,6 +991,7 @@ int FileGDBTable::Open(const char* pszFilename,
                 READ_DOUBLE(poField->dfXOrigin);
                 READ_DOUBLE(poField->dfYOrigin);
                 READ_DOUBLE(poField->dfXYScale);
+                returnErrorIf( poField->dfXYScale == 0 );
 
                 if( poField->bHasM )
                 {
@@ -2386,9 +2398,7 @@ template <class ZSetter> int FileGDBOGRGeometryConverterImpl::ReadZArray(ZSetter
                                                       GIntBig& dz)
 {
     const int errorRetValue = FALSE;
-    double dfZScale = poGeomField->GetZScale();
-    if( dfZScale == 0 )
-        dfZScale = std::numeric_limits<double>::min(); // to prevent divide by zero
+    const double dfZScale = SanitizeScale(poGeomField->GetZScale());
     for(GUInt32 i = 0; i < nPoints; i++ )
     {
         returnErrorIf(pabyCur >= pabyEnd);
@@ -2694,14 +2704,16 @@ OGRGeometry* FileGDBOGRGeometryConverterImpl::GetAsGeometry(const OGRField* psFi
             if( bHasZ )
             {
                 ReadVarUInt64NoCheck(pabyCur, z);
-                dfZ = (z - 1) / poGeomField->GetZScale() + poGeomField->GetZOrigin();
+                const double dfZScale = SanitizeScale(poGeomField->GetZScale());
+                dfZ = (z - 1) / dfZScale + poGeomField->GetZOrigin();
                 if( bHasM )
                 {
                     GUIntBig m = 0;
                     ReadVarUInt64NoCheck(pabyCur, m);
+                    const double dfMScale =
+                        SanitizeScale(poGeomField->GetMScale());
                     const double dfM =
-                        (m - 1) /
-                        poGeomField->GetMScale() + poGeomField->GetMOrigin();
+                        (m - 1) / dfMScale + poGeomField->GetMOrigin();
                     return new OGRPoint(dfX, dfY, dfZ, dfM);
                 }
                 return new OGRPoint(dfX, dfY, dfZ);
@@ -2711,9 +2723,9 @@ OGRGeometry* FileGDBOGRGeometryConverterImpl::GetAsGeometry(const OGRField* psFi
                 OGRPoint* poPoint = new OGRPoint(dfX, dfY);
                 GUIntBig m = 0;
                 ReadVarUInt64NoCheck(pabyCur, m);
+                const double dfMScale = SanitizeScale(poGeomField->GetMScale());
                 const double dfM =
-                    (m - 1) /
-                    poGeomField->GetMScale() + poGeomField->GetMOrigin();
+                    (m - 1) / dfMScale + poGeomField->GetMOrigin();
                 poPoint->setM(dfM);
                 return poPoint;
             }
