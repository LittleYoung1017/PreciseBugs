diff --cc autotest/gdrivers/jp2metadata.py
index ea47c86876,ea47c86876..028c702e59
--- a/autotest/gdrivers/jp2metadata.py
+++ b/autotest/gdrivers/jp2metadata.py
@@@ -30,9 -30,9 +30,9 @@@
  
  import os
  
++
  from osgeo import gdal
  
--import gdaltest
  import pytest
  
  
@@@ -51,7 -51,7 +51,7 @@@ def test_jp2metadata_1()
      expected_gt = (356000.0, 0.5, 0.0, 7596000.0, 0.0, -0.5)
      for i in range(6):
          assert gt[i] == pytest.approx(expected_gt[i], abs=1e-5)
--
++    
  ###############################################################################
  # Test Pleiades imagery metadata
  
@@@ -86,7 -86,7 +86,7 @@@ def test_jp2metadata_2()
  
      assert not os.path.exists('data/jpeg2000/IMG_md_ple_R1C1.jp2.aux.xml')
  
--
++    
  ###############################################################################
  # Test reading GMLJP2 file with srsName only on the Envelope, and lots of other
  # metadata junk.  This file is also handled currently with axis reordering
@@@ -183,31 -183,31 +183,6 @@@ def test_jp2metadata_5()
  
      ds = None
  
--###############################################################################
--# Get structure of a JPEG2000 file
--
--
--def test_jp2metadata_getjpeg2000structure():
--
--    ret = gdal.GetJPEG2000StructureAsString('data/jpeg2000/byte.jp2', ['ALL=YES'])
--    assert ret is not None
--
--    ret = gdal.GetJPEG2000StructureAsString('data/jpeg2000/byte_tlm_plt.jp2', ['ALL=YES'])
--    assert ret is not None
  
--    ret = gdal.GetJPEG2000StructureAsString('data/jpeg2000/byte_one_poc.j2k', ['ALL=YES'])
--    assert ret is not None
  
--    with gdaltest.config_option('GDAL_JPEG2000_STRUCTURE_MAX_LINES', '15'):
--        gdal.ErrorReset()
--        with gdaltest.error_handler():
--            ret = gdal.GetJPEG2000StructureAsString('data/jpeg2000/byte.jp2', ['ALL=YES'])
--        assert ret is not None
--        assert gdal.GetLastErrorMsg() != ''
  
--    with gdaltest.config_option('GDAL_JPEG2000_STRUCTURE_MAX_LINES', '150'):
--        gdal.ErrorReset()
--        with gdaltest.error_handler():
--            ret = gdal.GetJPEG2000StructureAsString('data/jpeg2000/byte.jp2', ['ALL=YES'])
--        assert ret is not None
--        assert gdal.GetLastErrorMsg() != ''
diff --cc autotest/gdrivers/jp2openjpeg.py
index c603dc698b,c603dc698b..bd07771315
--- a/autotest/gdrivers/jp2openjpeg.py
+++ b/autotest/gdrivers/jp2openjpeg.py
@@@ -1676,6 -1676,6 +1676,21 @@@ def test_jp2openjpeg_42()
  
      gdal.Unlink('/vsimem/jp2openjpeg_42.jp2')
  
++###############################################################################
++# Get structure of a JPEG2000 file
++
++
++def test_jp2openjpeg_43():
++
++    ret = gdal.GetJPEG2000StructureAsString('data/jpeg2000/byte.jp2', ['ALL=YES'])
++    assert ret is not None
++
++    ret = gdal.GetJPEG2000StructureAsString('data/jpeg2000/byte_tlm_plt.jp2', ['ALL=YES'])
++    assert ret is not None
++
++    ret = gdal.GetJPEG2000StructureAsString('data/jpeg2000/byte_one_poc.j2k', ['ALL=YES'])
++    assert ret is not None
++
  ###############################################################################
  # Check a file against a OrthoimageryCoverage document
  
diff --cc gdal/gcore/gdaljp2structure.cpp
index 3b63ab878e,3b63ab878e..d653b88e36
--- a/gdal/gcore/gdaljp2structure.cpp
+++ b/gdal/gcore/gdaljp2structure.cpp
@@@ -47,15 -47,15 +47,6 @@@
  
  constexpr int knbMaxJPEG2000Components = 16384; // per the JPEG2000 standard
  
--namespace
--{
--    struct DumpContext
--    {
--        int nCurLineCount;
--        int nMaxLineCount;
--    };
--}
--
  static CPLXMLNode* GetLastChild(CPLXMLNode* psParent)
  {
      CPLXMLNode* psChild = psParent->psChild;
@@@ -64,37 -64,37 +55,10 @@@
      return psChild;
  }
  
--static CPLXMLNode* _AddError(CPLXMLNode* psParent, const char* pszErrorMsg,
--                            GIntBig nOffset = 0)
--{
--    CPLXMLNode* psError = CPLCreateXMLNode( psParent, CXT_Element, "Error" );
--    CPLAddXMLAttributeAndValue(psError, "message", pszErrorMsg );
--    if( nOffset )
--    {
--        CPLAddXMLAttributeAndValue(psError, "offset",
--                                CPLSPrintf(CPL_FRMT_GIB, nOffset )  );
--    }
--    return psError;
--}
--
--static CPLXMLNode* AddElement(CPLXMLNode* psParent,
++static void AddElement(CPLXMLNode* psParent,
                         CPLXMLNode*& psLastChild,
--                       DumpContext* psDumpContext,
                         CPLXMLNode* psNewElt)
  {
--    if( psDumpContext->nCurLineCount > psDumpContext->nMaxLineCount )
--    {
--        CPLDestroyXMLNode(psNewElt);
--
--        if( psDumpContext->nCurLineCount == psDumpContext->nMaxLineCount + 1 )
--        {
--            _AddError(psParent, "Too many lines in dump");
--            psDumpContext->nCurLineCount++;
--        }
--        return nullptr;
--    }
--    psDumpContext->nCurLineCount++;
--
      if( psLastChild == nullptr )
          psLastChild = GetLastChild(psParent);
      if( psLastChild == nullptr )
@@@ -102,21 -102,21 +66,14 @@@
      else
          psLastChild->psNext = psNewElt;
      psLastChild = psNewElt;
--    return psNewElt;
  }
  
  static void AddField(CPLXMLNode* psParent,
                       CPLXMLNode*& psLastChild,
--                     DumpContext* psDumpContext,
                       const char* pszFieldName,
                       int nFieldSize, const char* pszValue,
                       const char* pszDescription = nullptr)
  {
--    if( psDumpContext->nCurLineCount > psDumpContext->nMaxLineCount + 1 )
--    {
--        return;
--    }
--
      CPLXMLNode* psField = CPLCreateXMLElementAndValue(
                                      nullptr, "Field", pszValue );
      CPLAddXMLAttributeAndValue(psField, "name", pszFieldName );
@@@ -124,21 -124,21 +81,15 @@@
      CPLAddXMLAttributeAndValue(psField, "size", CPLSPrintf("%d", nFieldSize ) );
      if( pszDescription )
          CPLAddXMLAttributeAndValue(psField, "description", pszDescription );
--    AddElement(psParent, psLastChild, psDumpContext, psField);
++    AddElement(psParent, psLastChild, psField);
  }
  
  static void AddHexField(CPLXMLNode* psParent,
                          CPLXMLNode*& psLastChild,
--                        DumpContext* psDumpContext,
                          const char* pszFieldName,
                          int nFieldSize, const char* pszValue,
                          const char* pszDescription = nullptr)
  {
--    if( psDumpContext->nCurLineCount > psDumpContext->nMaxLineCount + 1 )
--    {
--        return;
--    }
--
      CPLXMLNode* psField = CPLCreateXMLElementAndValue(
                                      nullptr, "Field", pszValue );
      CPLAddXMLAttributeAndValue(psField, "name", pszFieldName );
@@@ -146,67 -146,67 +97,49 @@@
      CPLAddXMLAttributeAndValue(psField, "size", CPLSPrintf("%d", nFieldSize ) );
      if( pszDescription )
          CPLAddXMLAttributeAndValue(psField, "description", pszDescription );
--    AddElement(psParent, psLastChild, psDumpContext, psField);
++    AddElement(psParent, psLastChild, psField);
  }
  
  static void AddField(CPLXMLNode* psParent,
                       CPLXMLNode*& psLastChild,
--                     DumpContext* psDumpContext,
                       const char* pszFieldName, GByte nVal,
                       const char* pszDescription = nullptr)
  {
--    if( psDumpContext->nCurLineCount > psDumpContext->nMaxLineCount + 1 )
--    {
--        return;
--    }
--
      CPLXMLNode* psField = CPLCreateXMLElementAndValue(
                                  nullptr, "Field", CPLSPrintf("%d", nVal) );
      CPLAddXMLAttributeAndValue(psField, "name", pszFieldName );
      CPLAddXMLAttributeAndValue(psField, "type", "uint8" );
      if( pszDescription )
          CPLAddXMLAttributeAndValue(psField, "description", pszDescription );
--    AddElement(psParent, psLastChild, psDumpContext, psField);
++    AddElement(psParent, psLastChild, psField);
  }
  
  static void AddField(CPLXMLNode* psParent,
                       CPLXMLNode*& psLastChild,
--                     DumpContext* psDumpContext,
                       const char* pszFieldName, GUInt16 nVal,
                       const char* pszDescription = nullptr)
  {
--    if( psDumpContext->nCurLineCount > psDumpContext->nMaxLineCount + 1 )
--    {
--        return;
--    }
--
      CPLXMLNode* psField = CPLCreateXMLElementAndValue(
                                  nullptr, "Field", CPLSPrintf("%d", nVal) );
      CPLAddXMLAttributeAndValue(psField, "name", pszFieldName );
      CPLAddXMLAttributeAndValue(psField, "type", "uint16" );
      if( pszDescription )
          CPLAddXMLAttributeAndValue(psField, "description", pszDescription );
--    AddElement(psParent, psLastChild, psDumpContext, psField);
++    AddElement(psParent, psLastChild, psField);
  }
  
  static void AddField(CPLXMLNode* psParent,
                       CPLXMLNode*& psLastChild,
--                     DumpContext* psDumpContext,
                       const char* pszFieldName, GUInt32 nVal,
                       const char* pszDescription = nullptr)
  {
--    if( psDumpContext->nCurLineCount - 1 >= psDumpContext->nMaxLineCount )
--    {
--        return;
--    }
--
      CPLXMLNode* psField = CPLCreateXMLElementAndValue(
                                  nullptr, "Field", CPLSPrintf("%u", nVal) );
      CPLAddXMLAttributeAndValue(psField, "name", pszFieldName );
      CPLAddXMLAttributeAndValue(psField, "type", "uint32" );
      if( pszDescription )
          CPLAddXMLAttributeAndValue(psField, "description", pszDescription );
--    AddElement(psParent, psLastChild, psDumpContext, psField);
++    AddElement(psParent, psLastChild, psField);
  }
  
  static const char* GetInterpretationOfBPC(GByte bpc)
@@@ -235,8 -235,8 +168,7 @@@ static const char* GetStandardFieldStri
  }
  
  static void DumpGeoTIFFBox(CPLXMLNode* psBox,
--                           GDALJP2Box& oBox,
--                           DumpContext* psDumpContext)
++                           GDALJP2Box& oBox)
  {
      GIntBig nBoxDataLength = oBox.GetDataLength();
      GByte* pabyBoxData = oBox.ReadBoxData();
@@@ -264,8 -264,8 +196,6 @@@
              CPLXMLNode* psXMLVRT = CPLParseXMLString(reinterpret_cast<const char*>(pabyXML));
              if( psXMLVRT )
              {
--                ++psDumpContext->nCurLineCount;
--
                  CPLXMLNode* psXMLContentNode =
                      CPLCreateXMLNode( psBox, CXT_Element, "DecodedGeoTIFF" );
                  psXMLContentNode->psChild = psXMLVRT;
@@@ -297,8 -297,8 +227,7 @@@
      CPLFree(pabyBoxData);
  }
  
--static void DumpFTYPBox(CPLXMLNode* psBox, GDALJP2Box& oBox,
--                        DumpContext* psDumpContext)
++static void DumpFTYPBox(CPLXMLNode* psBox, GDALJP2Box& oBox)
  {
      GIntBig nBoxDataLength = oBox.GetDataLength();
      GByte* pabyBoxData = oBox.ReadBoxData();
@@@ -314,7 -314,7 +243,7 @@@
              char szBranding[5];
              memcpy(szBranding, pabyIter, 4);
              szBranding[4] = 0;
--            AddField(psDecodedContent, psLastChild, psDumpContext, "BR", 4, szBranding);
++            AddField(psDecodedContent, psLastChild, "BR", 4, szBranding);
              pabyIter += 4;
              nRemainingLength -= 4;
          }
@@@ -323,7 -323,7 +252,7 @@@
              GUInt32 nVal;
              memcpy(&nVal, pabyIter, 4);
              CPL_MSBPTR32(&nVal);
--            AddField(psDecodedContent, psLastChild, psDumpContext,  "MinV", nVal);
++            AddField(psDecodedContent, psLastChild,  "MinV", nVal);
              pabyIter += 4;
              nRemainingLength -= 4;
          }
@@@ -335,7 -335,7 +264,6 @@@
              szBranding[4] = 0;
              AddField(psDecodedContent,
                       psLastChild,
--                     psDumpContext,
                          CPLSPrintf("CL%d", nCLIndex),
                          4, szBranding);
              pabyIter += 4;
@@@ -344,7 -344,7 +272,6 @@@
          }
          if( nRemainingLength > 0 )
              AddElement( psDecodedContent, psLastChild,
--                        psDumpContext,
                  CPLCreateXMLElementAndValue(
                      nullptr, "RemainingBytes",
                      CPLSPrintf("%d", static_cast<int>(nRemainingLength) )));
@@@ -352,8 -352,8 +279,7 @@@
      CPLFree(pabyBoxData);
  }
  
--static void DumpIHDRBox(CPLXMLNode* psBox, GDALJP2Box& oBox,
--                        DumpContext* psDumpContext)
++static void DumpIHDRBox(CPLXMLNode* psBox, GDALJP2Box& oBox)
  {
      GIntBig nBoxDataLength = oBox.GetDataLength();
      GByte* pabyBoxData = oBox.ReadBoxData();
@@@ -369,8 -369,8 +295,7 @@@
              GUInt32 nVal;
              memcpy(&nVal, pabyIter, 4);
              CPL_MSBPTR32(&nVal);
--            AddField(psDecodedContent, psLastChild, psDumpContext,
--                     "HEIGHT", nVal);
++            AddField(psDecodedContent, psLastChild, "HEIGHT", nVal);
              pabyIter += 4;
              nRemainingLength -= 4;
          }
@@@ -379,8 -379,8 +304,7 @@@
              GUInt32 nVal;
              memcpy(&nVal, pabyIter, 4);
              CPL_MSBPTR32(&nVal);
--            AddField(psDecodedContent, psLastChild, psDumpContext,
--                     "WIDTH", nVal);
++            AddField(psDecodedContent, psLastChild, "WIDTH", nVal);
              pabyIter += 4;
              nRemainingLength -= 4;
          }
@@@ -389,43 -389,43 +313,37 @@@
              GUInt16 nVal;
              memcpy(&nVal, pabyIter, 2);
              CPL_MSBPTR16(&nVal);
--            AddField(psDecodedContent, psLastChild, psDumpContext,
--                     "NC", nVal);
++            AddField(psDecodedContent, psLastChild, "NC", nVal);
              pabyIter += 2;
              nRemainingLength -= 2;
          }
          if( nRemainingLength >= 1 )
          {
--            AddField(psDecodedContent, psLastChild, psDumpContext,
--                     "BPC", *pabyIter,
++            AddField(psDecodedContent, psLastChild, "BPC", *pabyIter,
                          GetInterpretationOfBPC(*pabyIter));
              pabyIter += 1;
              nRemainingLength -= 1;
          }
          if( nRemainingLength >= 1 )
          {
--            AddField(psDecodedContent, psLastChild, psDumpContext,
--                     "C", *pabyIter);
++            AddField(psDecodedContent, psLastChild, "C", *pabyIter);
              pabyIter += 1;
              nRemainingLength -= 1;
          }
          if( nRemainingLength >= 1 )
          {
--            AddField(psDecodedContent, psLastChild, psDumpContext,
--                     "UnkC", *pabyIter);
++            AddField(psDecodedContent, psLastChild, "UnkC", *pabyIter);
              pabyIter += 1;
              nRemainingLength -= 1;
          }
          if( nRemainingLength >= 1 )
          {
--            AddField(psDecodedContent, psLastChild, psDumpContext,
--                     "IPR", *pabyIter);
++            AddField(psDecodedContent, psLastChild, "IPR", *pabyIter);
              /*pabyIter += 1;*/
              nRemainingLength -= 1;
          }
          if( nRemainingLength > 0 )
              AddElement( psDecodedContent, psLastChild,
--                        psDumpContext,
                  CPLCreateXMLElementAndValue(
                      nullptr, "RemainingBytes",
                      CPLSPrintf("%d", static_cast<int>(nRemainingLength) )));
@@@ -433,8 -433,8 +351,7 @@@
      CPLFree(pabyBoxData);
  }
  
--static void DumpBPCCBox(CPLXMLNode* psBox, GDALJP2Box& oBox,
--                        DumpContext* psDumpContext)
++static void DumpBPCCBox(CPLXMLNode* psBox, GDALJP2Box& oBox)
  {
      GIntBig nBoxDataLength = oBox.GetDataLength();
      GByte* pabyBoxData = oBox.ReadBoxData();
@@@ -450,7 -450,7 +367,6 @@@
          {
              AddField(psDecodedContent,
                       psLastChild,
--                     psDumpContext,
                          CPLSPrintf("BPC%d", nBPCIndex),
                          *pabyIter,
                          GetInterpretationOfBPC(*pabyIter));
@@@ -460,7 -460,7 +376,6 @@@
          }
          if( nRemainingLength > 0 )
              AddElement( psDecodedContent, psLastChild,
--                        psDumpContext,
                  CPLCreateXMLElementAndValue(
                      nullptr, "RemainingBytes",
                      CPLSPrintf("%d", static_cast<int>(nRemainingLength) )));
@@@ -468,8 -468,8 +383,7 @@@
      CPLFree(pabyBoxData);
  }
  
--static void DumpCOLRBox(CPLXMLNode* psBox, GDALJP2Box& oBox,
--                        DumpContext* psDumpContext)
++static void DumpCOLRBox(CPLXMLNode* psBox, GDALJP2Box& oBox)
  {
      GIntBig nBoxDataLength = oBox.GetDataLength();
      GByte* pabyBoxData = oBox.ReadBoxData();
@@@ -484,7 -484,7 +398,7 @@@
          if( nRemainingLength >= 1 )
          {
              nMeth = *pabyIter;
--            AddField(psDecodedContent, psLastChild, psDumpContext, "METH", nMeth,
++            AddField(psDecodedContent, psLastChild, "METH", nMeth,
                          (nMeth == 0) ? "Enumerated Colourspace":
                          (nMeth == 1) ? "Restricted ICC profile": nullptr);
              pabyIter += 1;
@@@ -492,13 -492,13 +406,13 @@@
          }
          if( nRemainingLength >= 1 )
          {
--            AddField(psDecodedContent, psLastChild, psDumpContext, "PREC", *pabyIter);
++            AddField(psDecodedContent, psLastChild, "PREC", *pabyIter);
              pabyIter += 1;
              nRemainingLength -= 1;
          }
          if( nRemainingLength >= 1 )
          {
--            AddField(psDecodedContent, psLastChild, psDumpContext, "APPROX", *pabyIter);
++            AddField(psDecodedContent, psLastChild, "APPROX", *pabyIter);
              pabyIter += 1;
              nRemainingLength -= 1;
          }
@@@ -507,7 -507,7 +421,7 @@@
              GUInt32 nVal;
              memcpy(&nVal, pabyIter, 4);
              CPL_MSBPTR32(&nVal);
--            AddField(psDecodedContent, psLastChild, psDumpContext, "EnumCS", nVal,
++            AddField(psDecodedContent, psLastChild, "EnumCS", nVal,
                          (nVal == 16) ? "sRGB" :
                          (nVal == 17) ? "greyscale":
                          (nVal == 18) ? "sYCC" : nullptr);
@@@ -516,7 -516,7 +430,6 @@@
          }
          if( nRemainingLength > 0 )
              AddElement(psDecodedContent, psLastChild,
--                       psDumpContext,
                  CPLCreateXMLElementAndValue(
                      nullptr, "RemainingBytes",
                      CPLSPrintf("%d", static_cast<int>(nRemainingLength) )));
@@@ -524,8 -524,8 +437,7 @@@
      CPLFree(pabyBoxData);
  }
  
--static void DumpPCLRBox(CPLXMLNode* psBox, GDALJP2Box& oBox,
--                        DumpContext* psDumpContext)
++static void DumpPCLRBox(CPLXMLNode* psBox, GDALJP2Box& oBox)
  {
      GIntBig nBoxDataLength = oBox.GetDataLength();
      GByte* pabyBoxData = oBox.ReadBoxData();
@@@ -543,7 -543,7 +455,7 @@@
              memcpy(&nVal, pabyIter, 2);
              CPL_MSBPTR16(&nVal);
              NE = nVal;
--            AddField(psDecodedContent, psLastChild, psDumpContext, "NE", nVal);
++            AddField(psDecodedContent, psLastChild, "NE", nVal);
              pabyIter += 2;
              nRemainingLength -= 2;
          }
@@@ -551,7 -551,7 +463,7 @@@
          if( nRemainingLength >= 1 )
          {
              NPC = *pabyIter;
--            AddField(psDecodedContent, psLastChild, psDumpContext, "NPC", NPC);
++            AddField(psDecodedContent, psLastChild, "NPC", NPC);
              pabyIter += 1;
              nRemainingLength -= 1;
          }
@@@ -562,7 -562,7 +474,6 @@@
              {
                  b8BitOnly &= (*pabyIter <= 7);
                  AddField(psDecodedContent, psLastChild,
--                         psDumpContext,
                              CPLSPrintf("B%d", i),
                              *pabyIter,
                              GetInterpretationOfBPC(*pabyIter));
@@@ -579,7 -579,7 +490,6 @@@
                      if( nRemainingLength >= 1 )
                      {
                          AddField(psDecodedContent, psLastChild,
--                                 psDumpContext,
                                  CPLSPrintf("C_%d_%d", j, i),
                                  *pabyIter);
                          pabyIter += 1;
@@@ -590,7 -590,7 +500,6 @@@
          }
          if( nRemainingLength > 0 )
              AddElement( psDecodedContent, psLastChild,
--                        psDumpContext,
                  CPLCreateXMLElementAndValue(
                      nullptr, "RemainingBytes",
                      CPLSPrintf("%d", static_cast<int>(nRemainingLength) )));
@@@ -598,8 -598,8 +507,7 @@@
      CPLFree(pabyBoxData);
  }
  
--static void DumpCMAPBox(CPLXMLNode* psBox, GDALJP2Box& oBox,
--                        DumpContext* psDumpContext)
++static void DumpCMAPBox(CPLXMLNode* psBox, GDALJP2Box& oBox)
  {
      GIntBig nBoxDataLength = oBox.GetDataLength();
      GByte* pabyBoxData = oBox.ReadBoxData();
@@@ -616,13 -616,13 +524,13 @@@
              GUInt16 nVal;
              memcpy(&nVal, pabyIter, 2);
              CPL_MSBPTR16(&nVal);
--            AddField(psDecodedContent, psLastChild, psDumpContext,
++            AddField(psDecodedContent, psLastChild,
                          CPLSPrintf("CMP%d", nIndex),
                          nVal);
              pabyIter += 2;
              nRemainingLength -= 2;
  
--            AddField(psDecodedContent, psLastChild, psDumpContext,
++            AddField(psDecodedContent, psLastChild,
                          CPLSPrintf("MTYP%d", nIndex),
                          *pabyIter,
                          (*pabyIter == 0) ? "Direct use":
@@@ -630,7 -630,7 +538,7 @@@
              pabyIter += 1;
              nRemainingLength -= 1;
  
--            AddField(psDecodedContent, psLastChild, psDumpContext,
++            AddField(psDecodedContent, psLastChild,
                          CPLSPrintf("PCOL%d", nIndex),
                          *pabyIter);
              pabyIter += 1;
@@@ -639,7 -639,7 +547,7 @@@
              nIndex ++;
          }
          if( nRemainingLength > 0 )
--            AddElement( psDecodedContent, psLastChild, psDumpContext,
++            AddElement( psDecodedContent, psLastChild,
                  CPLCreateXMLElementAndValue(
                      nullptr, "RemainingBytes",
                      CPLSPrintf("%d", static_cast<int>(nRemainingLength) )));
@@@ -647,8 -647,8 +555,7 @@@
      CPLFree(pabyBoxData);
  }
  
--static void DumpCDEFBox(CPLXMLNode* psBox, GDALJP2Box& oBox,
--                        DumpContext* psDumpContext)
++static void DumpCDEFBox(CPLXMLNode* psBox, GDALJP2Box& oBox)
  {
      GIntBig nBoxDataLength = oBox.GetDataLength();
      GByte* pabyBoxData = oBox.ReadBoxData();
@@@ -666,7 -666,7 +573,7 @@@
              memcpy(&nVal, pabyIter, 2);
              nChannels = nVal;
              CPL_MSBPTR16(&nVal);
--            AddField(psDecodedContent, psLastChild, psDumpContext, "N", nVal);
++            AddField(psDecodedContent, psLastChild, "N", nVal);
              pabyIter += 2;
              nRemainingLength -= 2;
          }
@@@ -677,7 -677,7 +584,7 @@@
                  GUInt16 nVal;
                  memcpy(&nVal, pabyIter, 2);
                  CPL_MSBPTR16(&nVal);
--                AddField(psDecodedContent, psLastChild, psDumpContext,
++                AddField(psDecodedContent, psLastChild,
                              CPLSPrintf("Cn%d", i),
                              nVal);
                  pabyIter += 2;
@@@ -688,7 -688,7 +595,7 @@@
                  GUInt16 nVal;
                  memcpy(&nVal, pabyIter, 2);
                  CPL_MSBPTR16(&nVal);
--                AddField(psDecodedContent, psLastChild, psDumpContext,
++                AddField(psDecodedContent, psLastChild,
                              CPLSPrintf("Typ%d", i),
                              nVal,
                              (nVal == 0) ? "Colour channel":
@@@ -703,7 -703,7 +610,7 @@@
                  GUInt16 nVal;
                  memcpy(&nVal, pabyIter, 2);
                  CPL_MSBPTR16(&nVal);
--                AddField(psDecodedContent, psLastChild, psDumpContext,
++                AddField(psDecodedContent, psLastChild,
                              CPLSPrintf("Asoc%d", i),
                              nVal,
                              (nVal == 0) ? "Associated to the whole image":
@@@ -714,7 -714,7 +621,7 @@@
              }
          }
          if( nRemainingLength > 0 )
--            AddElement( psDecodedContent, psLastChild, psDumpContext,
++            AddElement( psDecodedContent, psLastChild,
                  CPLCreateXMLElementAndValue(
                      nullptr, "RemainingBytes",
                      CPLSPrintf("%d", static_cast<int>(nRemainingLength) )));
@@@ -722,8 -722,8 +629,7 @@@
      CPLFree(pabyBoxData);
  }
  
--static void DumpRESxBox(CPLXMLNode* psBox, GDALJP2Box& oBox,
--                        DumpContext* psDumpContext)
++static void DumpRESxBox(CPLXMLNode* psBox, GDALJP2Box& oBox)
  {
      GIntBig nBoxDataLength = oBox.GetDataLength();
      GByte* pabyBoxData = oBox.ReadBoxData();
@@@ -747,8 -747,8 +653,7 @@@
              memcpy(&nVal, pabyIter, 2);
              CPL_MSBPTR16(&nVal);
              nNumV = nVal;
--            AddField(psDecodedContent, psLastChild, psDumpContext,
--                     CPLSPrintf("VR%cN", chC), nVal);
++            AddField(psDecodedContent, psLastChild, CPLSPrintf("VR%cN", chC), nVal);
              pabyIter += 2;
              nRemainingLength -= 2;
          }
@@@ -758,8 -758,8 +663,7 @@@
              memcpy(&nVal, pabyIter, 2);
              CPL_MSBPTR16(&nVal);
              nDenomV = nVal;
--            AddField(psDecodedContent, psLastChild, psDumpContext,
--                     CPLSPrintf("VR%cD", chC), nVal);
++            AddField(psDecodedContent, psLastChild, CPLSPrintf("VR%cD", chC), nVal);
              pabyIter += 2;
              nRemainingLength -= 2;
          }
@@@ -769,8 -769,8 +673,7 @@@
              memcpy(&nVal, pabyIter, 2);
              CPL_MSBPTR16(&nVal);
              nNumH = nVal;
--            AddField(psDecodedContent, psLastChild, psDumpContext,
--                     CPLSPrintf("HR%cN", chC), nVal);
++            AddField(psDecodedContent, psLastChild, CPLSPrintf("HR%cN", chC), nVal);
              pabyIter += 2;
              nRemainingLength -= 2;
          }
@@@ -780,23 -780,23 +683,20 @@@
              memcpy(&nVal, pabyIter, 2);
              CPL_MSBPTR16(&nVal);
              nDenomH = nVal;
--            AddField(psDecodedContent, psLastChild, psDumpContext,
--                     CPLSPrintf("HR%cD", chC), nVal);
++            AddField(psDecodedContent, psLastChild, CPLSPrintf("HR%cD", chC), nVal);
              pabyIter += 2;
              nRemainingLength -= 2;
          }
          if( nRemainingLength >= 1 )
          {
--            AddField(psDecodedContent, psLastChild, psDumpContext,
--                     CPLSPrintf("VR%cE", chC), *pabyIter);
++            AddField(psDecodedContent, psLastChild, CPLSPrintf("VR%cE", chC), *pabyIter);
              nExpV = *pabyIter;
              pabyIter += 1;
              nRemainingLength -= 1;
          }
          if( nRemainingLength >= 1 )
          {
--            AddField(psDecodedContent, psLastChild, psDumpContext,
--                     CPLSPrintf("HR%cE", chC), *pabyIter);
++            AddField(psDecodedContent, psLastChild, CPLSPrintf("HR%cE", chC), *pabyIter);
              nExpH = *pabyIter;
              /*pabyIter += 1;*/
              nRemainingLength -= 1;
@@@ -806,16 -806,16 +706,16 @@@
              const char* pszVRes =
                  (nDenomV == 0) ? "invalid" :
                      CPLSPrintf("%.03f", 1.0 * nNumV / nDenomV * pow(10.0, nExpV));
--            AddElement(psDecodedContent, psLastChild, psDumpContext,
++            AddElement(psDecodedContent, psLastChild,
                  CPLCreateXMLElementAndValue( nullptr, "VRes", pszVRes ));
              const char* pszHRes =
                  (nDenomH == 0) ? "invalid" :
                      CPLSPrintf("%.03f", 1.0 * nNumH / nDenomH * pow(10.0, nExpH));
--            AddElement(psDecodedContent, psLastChild, psDumpContext,
++            AddElement(psDecodedContent, psLastChild,
                  CPLCreateXMLElementAndValue( nullptr, "HRes", pszHRes ));
          }
          else if( nRemainingLength > 0 )
--            AddElement(psDecodedContent, psLastChild, psDumpContext,
++            AddElement(psDecodedContent, psLastChild,
                  CPLCreateXMLElementAndValue(
                      nullptr, "RemainingBytes",
                      CPLSPrintf("%d", static_cast<int>(nRemainingLength) )));
@@@ -823,8 -823,8 +723,7 @@@
      CPLFree(pabyBoxData);
  }
  
--static void DumpRREQBox(CPLXMLNode* psBox, GDALJP2Box& oBox,
--                        DumpContext* psDumpContext)
++static void DumpRREQBox(CPLXMLNode* psBox, GDALJP2Box& oBox)
  {
      GIntBig nBoxDataLength = oBox.GetDataLength();
      GByte* pabyBoxData = oBox.ReadBoxData();
@@@ -839,7 -839,7 +738,7 @@@
          if( nRemainingLength >= 1 )
          {
              ML = *pabyIter;
--            AddField(psDecodedContent, psLastChild, psDumpContext, "ML", *pabyIter);
++            AddField(psDecodedContent, psLastChild, "ML", *pabyIter);
              pabyIter += 1;
              nRemainingLength -= 1;
          }
@@@ -852,7 -852,7 +751,7 @@@
                  pabyIter += 1;
                  nRemainingLength -= 1;
              }
--            AddHexField(psDecodedContent, psLastChild, psDumpContext, "FUAM", static_cast<int>(ML), osHex.c_str());
++            AddHexField(psDecodedContent, psLastChild, "FUAM", static_cast<int>(ML), osHex.c_str());
          }
          if( nRemainingLength >= ML )
          {
@@@ -863,7 -863,7 +762,7 @@@
                  pabyIter += 1;
                  nRemainingLength -= 1;
              }
--            AddHexField(psDecodedContent, psLastChild, psDumpContext, "DCM", static_cast<int>(ML), osHex.c_str());
++            AddHexField(psDecodedContent, psLastChild, "DCM", static_cast<int>(ML), osHex.c_str());
          }
          GUInt16 NSF = 0;
          if( nRemainingLength >= 2 )
@@@ -872,7 -872,7 +771,7 @@@
              memcpy(&nVal, pabyIter, 2);
              CPL_MSBPTR16(&nVal);
              NSF = nVal;
--            AddField(psDecodedContent, psLastChild, psDumpContext, "NSF", nVal);
++            AddField(psDecodedContent, psLastChild, "NSF", nVal);
              pabyIter += 2;
              nRemainingLength -= 2;
          }
@@@ -883,7 -883,7 +782,7 @@@
                  GUInt16 nVal;
                  memcpy(&nVal, pabyIter, 2);
                  CPL_MSBPTR16(&nVal);
--                AddField(psDecodedContent, psLastChild, psDumpContext,
++                AddField(psDecodedContent, psLastChild,
                              CPLSPrintf("SF%d", iNSF), nVal,
                              GetStandardFieldString(nVal));
                  pabyIter += 2;
@@@ -900,7 -900,7 +799,7 @@@
                      pabyIter += 1;
                      nRemainingLength -= 1;
                  }
--                AddHexField(psDecodedContent, psLastChild, psDumpContext,
++                AddHexField(psDecodedContent, psLastChild,
                              CPLSPrintf("SM%d", iNSF),
                              static_cast<int>(ML), osHex.c_str());
              }
@@@ -914,7 -914,7 +813,7 @@@
              memcpy(&nVal, pabyIter, 2);
              CPL_MSBPTR16(&nVal);
              NVF = nVal;
--            AddField(psDecodedContent, psLastChild, psDumpContext, "NVF", nVal);
++            AddField(psDecodedContent, psLastChild, "NVF", nVal);
              pabyIter += 2;
              nRemainingLength -= 2;
          }
@@@ -929,7 -929,7 +828,7 @@@
                      pabyIter += 1;
                      nRemainingLength -= 1;
                  }
--                AddHexField(psDecodedContent, psLastChild, psDumpContext,
++                AddHexField(psDecodedContent, psLastChild,
                              CPLSPrintf("VF%d", iNVF),
                              static_cast<int>(ML), osHex.c_str());
              }
@@@ -944,7 -944,7 +843,7 @@@
                      pabyIter += 1;
                      nRemainingLength -= 1;
                  }
--                AddHexField(psDecodedContent, psLastChild, psDumpContext,
++                AddHexField(psDecodedContent, psLastChild,
                              CPLSPrintf("VM%d", iNVF),
                              static_cast<int>(ML), osHex.c_str());
              }
@@@ -952,7 -952,7 +851,7 @@@
                  break;
          }
          if( nRemainingLength > 0 )
--            AddElement( psDecodedContent, psLastChild, psDumpContext,
++            AddElement( psDecodedContent, psLastChild,
                  CPLCreateXMLElementAndValue(
                      nullptr, "RemainingBytes",
                      CPLSPrintf("%d", static_cast<int>(nRemainingLength) )));
@@@ -962,7 -962,7 +861,6 @@@
  
  static CPLXMLNode* CreateMarker(CPLXMLNode* psCSBox,
                                  CPLXMLNode*& psLastChildCSBox,
--                                DumpContext* psDumpContext,
                                  const char* pszName,
                                  GIntBig nOffset, GIntBig nLength)
  {
@@@ -972,17 -972,17 +870,30 @@@
                                 CPLSPrintf(CPL_FRMT_GIB, nOffset )  );
      CPLAddXMLAttributeAndValue(psMarker, "length",
                                 CPLSPrintf(CPL_FRMT_GIB, 2 + nLength ) );
--    return AddElement( psCSBox, psLastChildCSBox, psDumpContext, psMarker );
++    AddElement( psCSBox, psLastChildCSBox, psMarker );
++    return psMarker;
++}
++
++static CPLXMLNode* _AddError(CPLXMLNode* psParent, const char* pszErrorMsg,
++                            GIntBig nOffset = 0)
++{
++    CPLXMLNode* psError = CPLCreateXMLNode( psParent, CXT_Element, "Error" );
++    CPLAddXMLAttributeAndValue(psError, "message", pszErrorMsg );
++    if( nOffset )
++    {
++        CPLAddXMLAttributeAndValue(psError, "offset",
++                                CPLSPrintf(CPL_FRMT_GIB, nOffset )  );
++    }
++    return psError;
  }
  
  
  static void AddError(CPLXMLNode* psParent,
                       CPLXMLNode*& psLastChild,
--                     DumpContext* psDumpContext,
                       const char* pszErrorMsg,
                       GIntBig nOffset = 0)
  {
--    AddElement( psParent, psLastChild, psDumpContext,
++    AddElement( psParent, psLastChild,
                  _AddError(nullptr, pszErrorMsg, nOffset) );
  }
  
@@@ -1018,16 -1018,16 +929,14 @@@ static const char* GetMarkerName(GByte 
  static CPLXMLNode* DumpJPK2CodeStream(CPLXMLNode* psBox,
                                        VSILFILE* fp,
                                        GIntBig nBoxDataOffset,
--                                      GIntBig nBoxDataLength,
--                                      DumpContext* psDumpContext)
++                                      GIntBig nBoxDataLength)
  {
      GByte abyMarker[2];
      CPLXMLNode* psCSBox = CPLCreateXMLNode( psBox, CXT_Element, "JP2KCodeStream" );
      CPLXMLNode* psLastChildCSBox = nullptr;
      if( VSIFSeekL(fp, nBoxDataOffset, SEEK_SET) != 0 )
      {
--        AddError(psCSBox, psLastChildCSBox, psDumpContext,
--                 "Cannot read codestream", 0);
++        AddError(psCSBox, psLastChildCSBox, "Cannot read codestream", 0);
          return psCSBox;
      }
      GByte* pabyMarkerData = static_cast<GByte*>(CPLMalloc(65535+1));
@@@ -1040,27 -1040,27 +949,24 @@@
                          (v == 3) ? "PCRL" :
                          (v == 4) ? "CPRL" : ""); };
  
--    while( psDumpContext->nCurLineCount <= psDumpContext->nMaxLineCount + 1 )
++    while( true )
      {
          GIntBig nOffset = static_cast<GIntBig>(VSIFTellL(fp));
          if( nOffset == nBoxDataOffset + nBoxDataLength )
              break;
          if( VSIFReadL(abyMarker, 2, 1, fp) != 1 )
          {
--            AddError(psCSBox, psLastChildCSBox, psDumpContext,
--                     "Cannot read marker", nOffset);
++            AddError(psCSBox, psLastChildCSBox, "Cannot read marker", nOffset);
              break;
          }
          if( abyMarker[0] != 0xFF )
          {
--            AddError(psCSBox, psLastChildCSBox, psDumpContext,
--                     "Not a marker", nOffset);
++            AddError(psCSBox, psLastChildCSBox, "Not a marker", nOffset);
              break;
          }
          if( abyMarker[1] == 0x4F )
          {
--            CreateMarker( psCSBox, psLastChildCSBox, psDumpContext,
--                          "SOC", nOffset, 0 );
++            CreateMarker( psCSBox, psLastChildCSBox, "SOC", nOffset, 0 );
              continue;
          }
          if( abyMarker[1] == 0x93 )
@@@ -1083,9 -1083,9 +989,7 @@@
              else if( nNextTileOffset >= nOffset + 2 )
                  nMarkerSize = nNextTileOffset - nOffset - 2;
  
--            CreateMarker( psCSBox, psLastChildCSBox, psDumpContext,
--                          "SOD",
--                          nOffset, nMarkerSize );
++            CreateMarker( psCSBox, psLastChildCSBox, "SOD", nOffset, nMarkerSize );
              if( bBreak )
                  break;
  
@@@ -1097,7 -1097,7 +1001,7 @@@
              else if( nNextTileOffset && nNextTileOffset >= nOffset + 2 )
              {
                  if( VSIFSeekL(fp, nNextTileOffset, SEEK_SET) != 0 )
--                    AddError(psCSBox, psLastChildCSBox, psDumpContext,
++                    AddError(psCSBox, psLastChildCSBox,
                               "Cannot seek to", nNextTileOffset);
                  nNextTileOffset = 0;
              }
@@@ -1105,21 -1105,21 +1009,19 @@@
              {
                  /* We have seek and check before we hit a EOC */
                  nOffset = nBoxDataOffset + nBoxDataLength - 2;
--                CreateMarker( psCSBox, psLastChildCSBox, psDumpContext,
--                              "EOC", nOffset, 0 );
++                CreateMarker( psCSBox, psLastChildCSBox, "EOC", nOffset, 0 );
              }
              continue;
          }
          if( abyMarker[1] == 0xD9 )
          {
--            CreateMarker( psCSBox, psLastChildCSBox, psDumpContext,
--                          "EOC", nOffset, 0 );
++            CreateMarker( psCSBox, psLastChildCSBox, "EOC", nOffset, 0 );
              continue;
          }
          /* Reserved markers */
          if( abyMarker[1] >= 0x30 && abyMarker[1] <= 0x3F )
          {
--            CreateMarker( psCSBox, psLastChildCSBox, psDumpContext,
++            CreateMarker( psCSBox, psLastChildCSBox,
                            CPLSPrintf("Unknown 0xFF%02X", abyMarker[1]), nOffset, 0 );
              continue;
          }
@@@ -1127,27 -1127,27 +1029,24 @@@
          GUInt16 nMarkerSize;
          if( VSIFReadL(&nMarkerSize, 2, 1, fp) != 1 )
          {
--            AddError(psCSBox, psLastChildCSBox, psDumpContext,
++            AddError(psCSBox, psLastChildCSBox,
                       CPLSPrintf("Cannot read marker size of %s", GetMarkerName(abyMarker[1])), nOffset);
              break;
          }
          CPL_MSBPTR16(&nMarkerSize);
          if( nMarkerSize < 2 )
          {
--            AddError(psCSBox, psLastChildCSBox, psDumpContext,
++            AddError(psCSBox, psLastChildCSBox,
                       CPLSPrintf("Invalid marker size of %s", GetMarkerName(abyMarker[1])), nOffset);
              break;
          }
  
          CPLXMLNode* psMarker = CreateMarker( psCSBox, psLastChildCSBox,
--                                             psDumpContext,
                          GetMarkerName(abyMarker[1]), nOffset, nMarkerSize );
--        if( !psMarker )
--            break;
          CPLXMLNode* psLastChild = nullptr;
          if( VSIFReadL(pabyMarkerData, nMarkerSize - 2, 1, fp) != 1 )
          {
--            AddError(psMarker, psLastChild, psDumpContext,
++            AddError(psMarker, psLastChild,
                       "Cannot read marker data", nOffset);
              break;
          }
@@@ -1161,14 -1161,14 +1060,13 @@@
              if( nRemainingMarkerSize >= 1 ) {
                  v = *pabyMarkerDataIter;
                  const auto comment = commentFunc ? commentFunc(v) : std::string();
--                AddField(psMarker, psLastChild, psDumpContext, name, *pabyMarkerDataIter,
++                AddField(psMarker, psLastChild, name, *pabyMarkerDataIter,
                           comment.empty() ? nullptr : comment.c_str());
                  pabyMarkerDataIter += 1;
                  nRemainingMarkerSize -= 1;
              }
              else {
--                AddError(psMarker, psLastChild, psDumpContext,
--                         CPLSPrintf("Cannot read field %s", name));
++                AddError(psMarker, psLastChild, CPLSPrintf("Cannot read field %s", name));
                  v = 0;
                  bError = true;
              }
@@@ -1182,14 -1182,14 +1080,13 @@@
                  memcpy(&v, pabyMarkerDataIter, 2);
                  CPL_MSBPTR16(&v);
                  const auto comment = commentFunc ? commentFunc(v) : std::string();
--                AddField(psMarker, psLastChild, psDumpContext, name, v,
++                AddField(psMarker, psLastChild, name, v,
                           comment.empty() ? nullptr : comment.c_str());
                  pabyMarkerDataIter += 2;
                  nRemainingMarkerSize -= 2;
              }
              else {
--                AddError(psMarker, psLastChild, psDumpContext,
--                         CPLSPrintf("Cannot read field %s", name));
++                AddError(psMarker, psLastChild, CPLSPrintf("Cannot read field %s", name));
                  v = 0;
                  bError = true;
              }
@@@ -1203,14 -1203,14 +1100,13 @@@
                  memcpy(&v, pabyMarkerDataIter, 4);
                  CPL_MSBPTR32(&v);
                  const auto comment = commentFunc ? commentFunc(v) : std::string();
--                AddField(psMarker, psLastChild, psDumpContext, name, v,
++                AddField(psMarker, psLastChild, name, v,
                           comment.empty() ? nullptr : comment.c_str());
                  pabyMarkerDataIter += 4;
                  nRemainingMarkerSize -= 4;
              }
              else {
--                AddError(psMarker, psLastChild, psDumpContext,
--                         CPLSPrintf("Cannot read field %s", name));
++                AddError(psMarker, psLastChild, CPLSPrintf("Cannot read field %s", name));
                  v = 0;
                  bError = true;
              }
@@@ -1263,7 -1263,7 +1159,7 @@@
              READ_MARKER_FIELD_UINT8("TPsot");
              READ_MARKER_FIELD_UINT8("TNsot");
              if( nRemainingMarkerSize > 0 )
--                AddElement( psMarker, psLastChild, psDumpContext,
++                AddElement( psMarker, psLastChild,
                      CPLCreateXMLElementAndValue(
                          nullptr, "RemainingBytes",
                          CPLSPrintf("%d", static_cast<int>(nRemainingMarkerSize) )));
@@@ -1323,7 -1323,7 +1219,7 @@@
                   }
               }
               if( nRemainingMarkerSize > 0 )
--                AddElement( psMarker, psLastChild, psDumpContext,
++                AddElement( psMarker, psLastChild,
                      CPLCreateXMLElementAndValue(
                          nullptr, "RemainingBytes",
                          CPLSPrintf("%d", static_cast<int>(nRemainingMarkerSize) )));
@@@ -1355,7 -1355,7 +1251,7 @@@
                  READ_MARKER_FIELD_UINT8(CPLSPrintf("YRsiz%d", i));
              }
              if( nRemainingMarkerSize > 0 )
--                AddElement( psMarker, psLastChild, psDumpContext,
++                AddElement( psMarker, psLastChild,
                      CPLCreateXMLElementAndValue(
                          nullptr, "RemainingBytes",
                          CPLSPrintf("%d", static_cast<int>(nRemainingMarkerSize) )));
@@@ -1383,13 -1383,13 +1279,12 @@@
                      osInterp += "EPH marker segments may be used";
                  else
                      osInterp += "No EPH marker segments";
--                AddField(psMarker, psLastChild, psDumpContext,
--                         "Scod", nLastVal, osInterp.c_str());
++                AddField(psMarker, psLastChild, "Scod", nLastVal, osInterp.c_str());
                  pabyMarkerDataIter += 1;
                  nRemainingMarkerSize -= 1;
              }
              else {
--                AddError(psMarker, psLastChild, psDumpContext,
++                AddError(psMarker, psLastChild,
                           CPLSPrintf("Cannot read field %s", "Scod"));
              }
              READ_MARKER_FIELD_UINT8("SGcod_Progress",  lambdaPOCType);
@@@ -1411,7 -1411,7 +1306,7 @@@
                  while( nRemainingMarkerSize >= 1 )
                  {
                      auto nLastVal = *pabyMarkerDataIter;
--                    AddField(psMarker, psLastChild, psDumpContext,
++                    AddField(psMarker, psLastChild,
                               CPLSPrintf("SPcod_Precincts%d", i), *pabyMarkerDataIter,
                               CPLSPrintf("PPx=%d PPy=%d: %dx%d",
                                          nLastVal & 0xf, nLastVal >> 4,
@@@ -1422,7 -1422,7 +1317,7 @@@
                  }
              }
              if( nRemainingMarkerSize > 0 )
--                AddElement( psMarker, psLastChild, psDumpContext,
++                AddElement( psMarker, psLastChild,
                      CPLCreateXMLElementAndValue(
                          nullptr, "RemainingBytes",
                          CPLSPrintf("%d", static_cast<int>(nRemainingMarkerSize) )));
@@@ -1445,13 -1445,13 +1340,12 @@@
                  }
                  else
                      osInterp += "Standard precincts";
--                AddField(psMarker, psLastChild, psDumpContext,
--                         "Scoc", nLastVal, osInterp.c_str());
++                AddField(psMarker, psLastChild, "Scoc", nLastVal, osInterp.c_str());
                  pabyMarkerDataIter += 1;
                  nRemainingMarkerSize -= 1;
              }
              else {
--                AddError(psMarker, psLastChild, psDumpContext,
++                AddError(psMarker, psLastChild,
                           CPLSPrintf("Cannot read field %s", "Scoc"));
              }
              READ_MARKER_FIELD_UINT8("SPcoc_NumDecompositions");
@@@ -1470,7 -1470,7 +1364,7 @@@
                  while( nRemainingMarkerSize >= 1 )
                  {
                      auto nLastVal = *pabyMarkerDataIter;
--                    AddField(psMarker, psLastChild, psDumpContext,
++                    AddField(psMarker, psLastChild,
                               CPLSPrintf("SPcoc_Precincts%d", i), *pabyMarkerDataIter,
                               CPLSPrintf("PPx=%d PPy=%d: %dx%d",
                                          nLastVal & 0xf, nLastVal >> 4,
@@@ -1481,7 -1481,7 +1375,7 @@@
                  }
              }
              if( nRemainingMarkerSize > 0 )
--                AddElement( psMarker, psLastChild, psDumpContext,
++                AddElement( psMarker, psLastChild,
                      CPLCreateXMLElementAndValue(
                          nullptr, "RemainingBytes",
                          CPLSPrintf("%d", static_cast<int>(nRemainingMarkerSize) )));
@@@ -1510,7 -1510,7 +1404,7 @@@
                  i ++;
              }
              if( nRemainingMarkerSize > 0 )
--                AddElement( psMarker, psLastChild, psDumpContext,
++                AddElement( psMarker, psLastChild,
                      CPLCreateXMLElementAndValue(
                          nullptr, "RemainingBytes",
                          CPLSPrintf("%d", static_cast<int>(nRemainingMarkerSize) )));
@@@ -1533,7 -1533,7 +1427,7 @@@
                  }
                  else
                  {
--                    AddField(psMarker, psLastChild, psDumpContext,
++                    AddField(psMarker, psLastChild,
                               CPLSPrintf("Iplt%d", i), nPacketLength);
                      nPacketLength = 0;
                      i ++;
@@@ -1543,7 -1543,7 +1437,7 @@@
              }
              if( nPacketLength != 0 )
              {
--                AddError(psMarker, psLastChild, psDumpContext,
++                AddError(psMarker, psLastChild,
                           "Incorrect PLT marker");
              }
          }
@@@ -1558,7 -1558,7 +1452,7 @@@
                   }
               }
               if( nRemainingMarkerSize > 0 )
--                AddElement( psMarker, psLastChild, psDumpContext,
++                AddElement( psMarker, psLastChild,
                      CPLCreateXMLElementAndValue(
                          nullptr, "RemainingBytes",
                          CPLSPrintf("%d", static_cast<int>(nRemainingMarkerSize) )));
@@@ -1695,7 -1695,7 +1589,7 @@@
              }
              if( nRemainingMarkerSize > 0 )
              {
--                AddElement( psMarker, psLastChild, psDumpContext,
++                AddElement( psMarker, psLastChild,
                      CPLCreateXMLElementAndValue(
                          nullptr, "RemainingBytes",
                          CPLSPrintf("%d", static_cast<int>(nRemainingMarkerSize) )));
@@@ -1718,7 -1718,7 +1612,7 @@@
              {
                  GByte abyBackup = pabyMarkerDataIter[nRemainingMarkerSize];
                  pabyMarkerDataIter[nRemainingMarkerSize] = 0;
--                AddField(psMarker, psLastChild, psDumpContext,
++                AddField(psMarker, psLastChild,
                           "COM",
                           static_cast<int>(nRemainingMarkerSize),
                           reinterpret_cast<const char*>(pabyMarkerDataIter));
@@@ -1728,7 -1728,7 +1622,7 @@@
  
          if( VSIFSeekL(fp, nOffset + 2 + nMarkerSize, SEEK_SET) != 0 )
          {
--            AddError(psCSBox, psLastChildCSBox, psDumpContext,
++            AddError(psCSBox, psLastChildCSBox,
                       "Cannot seek to next marker", nOffset + 2 + nMarkerSize);
              break;
          }
@@@ -1749,8 -1749,8 +1643,7 @@@ void GDALGetJPEG2000StructureInternal(C
                                        GDALJP2Box* poParentBox,
                                        CSLConstList papszOptions,
                                        int nRecLevel,
--                                      vsi_l_offset nFileOrParentBoxSize,
--                                      DumpContext* psDumpContext)
++                                      vsi_l_offset nFileOrParentBoxSize)
  {
      // Limit recursion to a reasonable level. I believe that in practice 2
      // should be sufficient, but just in case someone creates deeply
@@@ -1763,16 -1763,16 +1656,13 @@@
      CPLXMLNode* psLastChild = nullptr;
      if( oBox.ReadFirstChild(poParentBox) )
      {
--        while( strlen(oBox.GetType()) > 0 &&
--               psDumpContext->nCurLineCount <= psDumpContext->nMaxLineCount + 1 )
++        while( strlen(oBox.GetType()) > 0 )
          {
              GIntBig nBoxDataLength = oBox.GetDataLength();
              const char* pszBoxType = oBox.GetType();
  
              CPLXMLNode* psBox = CPLCreateXMLNode( nullptr, CXT_Element, "JP2Box" );
--            psBox = AddElement( psParent, psLastChild, psDumpContext, psBox );
--            if( !psBox )
--                break;
++            AddElement( psParent, psLastChild, psBox );
              CPLAddXMLAttributeAndValue(psBox, "name", pszBoxType );
              CPLAddXMLAttributeAndValue(psBox, "box_offset",
                                         CPLSPrintf(CPL_FRMT_GIB, oBox.GetBoxOffset() )  );
@@@ -1786,7 -1786,7 +1676,7 @@@
              if( nBoxDataLength > GINTBIG_MAX - oBox.GetDataOffset() )
              {
                  CPLXMLNode* psLastChildBox = nullptr;
--                AddError(psBox, psLastChildBox, psDumpContext, "Invalid box_length");
++                AddError(psBox, psLastChildBox, "Invalid box_length");
                  break;
              }
  
@@@ -1804,7 -1804,7 +1694,7 @@@
                   static_cast<vsi_l_offset>(nBoxDataLength) > nFileOrParentBoxSize - oBox.GetDataOffset()) )
              {
                  CPLXMLNode* psLastChildBox = nullptr;
--                AddError(psBox, psLastChildBox, psDumpContext, "Invalid box_length");
++                AddError(psBox, psLastChildBox, "Invalid box_length");
                  break;
              }
  
@@@ -1814,8 -1814,8 +1704,7 @@@
                                                   papszOptions,
                                                   nRecLevel + 1,
                                                   oBox.GetDataOffset() +
--                                                    static_cast<vsi_l_offset>(nBoxDataLength),
--                                                 psDumpContext);
++                                                    static_cast<vsi_l_offset>(nBoxDataLength));
              }
              else
              {
@@@ -1830,16 -1830,16 +1719,13 @@@
                      }
                      pszBinaryContent[2*16] = '\0';
                      CPLXMLNode* psUUIDNode =
--                                CPLCreateXMLNode( nullptr, CXT_Element, "UUID" );
++                                CPLCreateXMLNode( psBox, CXT_Element, "UUID" );
                      if( GDALJP2Metadata::IsUUID_MSI(pabyUUID) )
                          CPLAddXMLAttributeAndValue(psUUIDNode, "description", "GeoTIFF" );
                      else if( GDALJP2Metadata::IsUUID_XMP(pabyUUID) )
                          CPLAddXMLAttributeAndValue(psUUIDNode, "description", "XMP" );
                      CPLCreateXMLNode( psUUIDNode, CXT_Text, pszBinaryContent);
                      VSIFree(pszBinaryContent);
--
--                    CPLXMLNode* psLastChildBox = nullptr;
--                    AddElement( psBox, psLastChildBox, psDumpContext, psUUIDNode );
                  }
  
                  if( (CPLFetchBool(papszOptions, "BINARY_CONTENT", false) ||
@@@ -1847,7 -1847,7 +1733,7 @@@
                      strcmp(pszBoxType, "jp2c") != 0 &&
                      nBoxDataLength < 100 * 1024 )
                  {
--                    CPLXMLNode* psBinaryContent = CPLCreateXMLNode( nullptr, CXT_Element, "BinaryContent" );
++                    CPLXMLNode* psBinaryContent = CPLCreateXMLNode( psBox, CXT_Element, "BinaryContent" );
                      GByte* pabyBoxData = oBox.ReadBoxData();
                      int nBoxLength = static_cast<int>(nBoxDataLength);
                      char* pszBinaryContent = static_cast<char*>(VSIMalloc( 2 * nBoxLength + 1 ));
@@@ -1863,9 -1863,9 +1749,6 @@@
                      }
                      CPLFree(pabyBoxData);
                      VSIFree(pszBinaryContent);
--
--                    CPLXMLNode* psLastChildBox = nullptr;
--                    AddElement( psBox, psLastChildBox, psDumpContext, psBinaryContent );
                  }
  
                  if( (CPLFetchBool(papszOptions, "TEXT_CONTENT", false) ||
@@@ -1890,19 -1890,19 +1773,14 @@@
                              if( psXMLContentBox )
                              {
                                  CPLXMLNode* psXMLContentNode =
--                                    CPLCreateXMLNode( nullptr, CXT_Element, "XMLContent" );
++                                    CPLCreateXMLNode( psBox, CXT_Element, "XMLContent" );
                                  psXMLContentNode->psChild = psXMLContentBox;
--
--                                CPLXMLNode* psLastChildBox = nullptr;
--                                AddElement( psBox, psLastChildBox, psDumpContext, psXMLContentNode);
                              }
                              else
                              {
--                                auto psTextElement = CPLCreateXMLNode( nullptr, CXT_Element, "TextContent" );
--                                CPLCreateXMLNode(psTextElement, CXT_Text, pszBoxData);
--
--                                CPLXMLNode* psLastChildBox = nullptr;
--                                AddElement( psBox, psLastChildBox, psDumpContext, psTextElement);
++                                CPLCreateXMLNode(
++                                    CPLCreateXMLNode( psBox, CXT_Element, "TextContent" ),
++                                        CXT_Text, pszBoxData);
                              }
                          }
                      }
@@@ -1915,52 -1915,52 +1793,50 @@@
                          CPLFetchBool(papszOptions, "ALL", false) )
                      {
                          DumpJPK2CodeStream(psBox, fp,
--                                           oBox.GetDataOffset(),
--                                           nBoxDataLength,
--                                           psDumpContext);
++                                           oBox.GetDataOffset(), nBoxDataLength);
                      }
                  }
                  else if( strcmp(pszBoxType, "uuid") == 0 &&
                           GDALJP2Metadata::IsUUID_MSI(oBox.GetUUID()) )
                  {
--                    DumpGeoTIFFBox(psBox, oBox, psDumpContext);
++                    DumpGeoTIFFBox(psBox, oBox);
                  }
                  else if( strcmp(pszBoxType, "ftyp") == 0 )
                  {
--                    DumpFTYPBox(psBox, oBox, psDumpContext);
++                    DumpFTYPBox(psBox, oBox);
                  }
                  else if( strcmp(pszBoxType, "ihdr") == 0 )
                  {
--                    DumpIHDRBox(psBox, oBox, psDumpContext);
++                    DumpIHDRBox(psBox, oBox);
                  }
                  else if( strcmp(pszBoxType, "bpcc") == 0 )
                  {
--                    DumpBPCCBox(psBox, oBox, psDumpContext);
++                    DumpBPCCBox(psBox, oBox);
                  }
                  else if( strcmp(pszBoxType, "colr") == 0 )
                  {
--                    DumpCOLRBox(psBox, oBox, psDumpContext);
++                    DumpCOLRBox(psBox, oBox);
                  }
                  else if( strcmp(pszBoxType, "pclr") == 0 )
                  {
--                    DumpPCLRBox(psBox, oBox, psDumpContext);
++                    DumpPCLRBox(psBox, oBox);
                  }
                  else if( strcmp(pszBoxType, "cmap") == 0 )
                  {
--                    DumpCMAPBox(psBox, oBox, psDumpContext);
++                    DumpCMAPBox(psBox, oBox);
                  }
                  else if( strcmp(pszBoxType, "cdef") == 0 )
                  {
--                    DumpCDEFBox(psBox, oBox, psDumpContext);
++                    DumpCDEFBox(psBox, oBox);
                  }
                  else if( strcmp(pszBoxType, "resc") == 0 ||
                           strcmp(pszBoxType, "resd") == 0)
                  {
--                    DumpRESxBox(psBox, oBox, psDumpContext);
++                    DumpRESxBox(psBox, oBox);
                  }
                  else if( strcmp(pszBoxType, "rreq") == 0 )
                  {
--                    DumpRREQBox(psBox, oBox, psDumpContext);
++                    DumpRREQBox(psBox, oBox);
                  }
              }
  
@@@ -2008,10 -2008,10 +1884,6 @@@ CPLXMLNode* GDALGetJPEG2000Structure(co
      }
  
      CPLXMLNode* psParent = nullptr;
--    DumpContext dc;
--    dc.nCurLineCount = 0;
--    dc.nMaxLineCount = atoi(CPLGetConfigOption("GDAL_JPEG2000_STRUCTURE_MAX_LINES", "500000"));
--
      if( memcmp(abyHeader, jpc_header, sizeof(jpc_header)) == 0 )
      {
          if( CPLFetchBool(papszOptions, "CODESTREAM", false) ||
@@@ -2020,7 -2020,7 +1892,7 @@@
              if( VSIFSeekL(fp, 0, SEEK_END) == 0 )
              {
                  GIntBig nBoxDataLength = static_cast<GIntBig>(VSIFTellL(fp));
--                psParent = DumpJPK2CodeStream(nullptr, fp, 0, nBoxDataLength, &dc);
++                psParent = DumpJPK2CodeStream(nullptr, fp, 0, nBoxDataLength);
                  CPLAddXMLAttributeAndValue(psParent, "filename", pszFilename );
              }
          }
@@@ -2030,15 -2030,15 +1902,7 @@@
          psParent = CPLCreateXMLNode( nullptr, CXT_Element, "JP2File" );
          CPLAddXMLAttributeAndValue(psParent, "filename", pszFilename );
          vsi_l_offset nFileSize = 0;
--        GDALGetJPEG2000StructureInternal(psParent, fp, nullptr, papszOptions, 0, nFileSize, &dc);
--    }
--
--    if( dc.nCurLineCount > dc.nMaxLineCount )
--    {
--        CPLError(CE_Failure, CPLE_AppDefined,
--                 "Maximum number of lines in JPEG2000 structure dump reached. "
--                 "Increase GDAL_JPEG2000_STRUCTURE_MAX_LINES beyond %d.",
--                 dc.nMaxLineCount);
++        GDALGetJPEG2000StructureInternal(psParent, fp, nullptr, papszOptions, 0, nFileSize);
      }
  
      CPL_IGNORE_RET_VAL(VSIFCloseL(fp));
