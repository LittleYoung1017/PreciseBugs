diff --git a/gdal/ogr/ogr_xerces.cpp b/gdal/ogr/ogr_xerces.cpp
index 805506c9f4..a5266e05de 100644
--- a/gdal/ogr/ogr_xerces.cpp
+++ b/gdal/ogr/ogr_xerces.cpp
@@ -46,6 +46,70 @@ CPL_CVSID("$Id$")
 
 static CPLMutex* hMutex = nullptr;
 static int nCounter = 0;
+static bool bXercesWasAlreadyInitializedBeforeUs = false;
+
+
+/************************************************************************/
+/*                      OGRXercesBinInputStream                         */
+/************************************************************************/
+
+class OGRXercesBinInputStream final: public BinInputStream
+{
+    CPL_DISALLOW_COPY_ASSIGN(OGRXercesBinInputStream)
+
+    VSILFILE* fp = nullptr;
+    bool bOwnFP = false;
+    XMLCh emptyString = 0;
+
+  public:
+    explicit OGRXercesBinInputStream( VSILFILE* fpIn, bool bOwnFPIn );
+    ~OGRXercesBinInputStream() override;
+
+    XMLFilePos curPos() const override;
+    XMLSize_t readBytes(XMLByte* const toFill,
+                                const XMLSize_t maxToRead) override;
+    const XMLCh* getContentType() const override
+        { return &emptyString; }
+};
+
+/************************************************************************/
+/*                      OGRXercesNetAccessor                            */
+/************************************************************************/
+
+class OGRXercesNetAccessor final: public XMLNetAccessor
+{
+public :
+    OGRXercesNetAccessor() = default;
+
+    BinInputStream* makeNew(const XMLURL&  urlSource, const XMLNetHTTPInfo* httpInfo) override;
+    const XMLCh* getId() const override { return fgMyName; }
+
+private :
+    static const XMLCh fgMyName[];
+
+    OGRXercesNetAccessor(const OGRXercesNetAccessor&);
+    OGRXercesNetAccessor& operator=(const OGRXercesNetAccessor&);
+};
+
+
+const XMLCh OGRXercesNetAccessor::fgMyName[] = {
+    chLatin_O, chLatin_G, chLatin_R,
+    chLatin_X, chLatin_e, chLatin_r, chLatin_c, chLatin_e, chLatin_s,
+    chLatin_N, chLatin_e, chLatin_t,
+    chLatin_A, chLatin_c, chLatin_c, chLatin_e, chLatin_s,
+    chLatin_s, chLatin_o, chLatin_r,
+    chNull
+};
+
+BinInputStream* OGRXercesNetAccessor::makeNew(const XMLURL& urlSource,
+                                              const XMLNetHTTPInfo* /*httpInfo*/)
+{
+    const std::string osURL = "/vsicurl_streaming/" + transcode(urlSource.getURLText());
+    VSILFILE* fp = VSIFOpenL(osURL.c_str(), "rb");
+    if( !fp )
+        return nullptr;
+    return new OGRXercesBinInputStream(fp, true);
+}
 
 /************************************************************************/
 /*                        OGRInitializeXerces()                         */
@@ -54,25 +118,46 @@ static int nCounter = 0;
 bool OGRInitializeXerces()
 {
     CPLMutexHolderD(&hMutex);
+
     if( nCounter > 0 )
     {
         nCounter++;
         return true;
     }
 
-    try
+    if( XMLPlatformUtils::fgMemoryManager != nullptr )
     {
-        CPLDebug("OGR", "XMLPlatformUtils::Initialize()");
-        XMLPlatformUtils::Initialize();
-        nCounter ++;
+        CPLDebug("OGR", "Xerces-C already initialized before GDAL");
+        bXercesWasAlreadyInitializedBeforeUs = true;
+        nCounter = 1;
         return true;
     }
-    catch (const XMLException& toCatch)
+    else
     {
-        CPLError( CE_Failure, CPLE_AppDefined,
-                  "Exception initializing Xerces: %s",
-                  transcode(toCatch.getMessage()).c_str() );
-        return false;
+        try
+        {
+            CPLDebug("OGR", "XMLPlatformUtils::Initialize()");
+            XMLPlatformUtils::Initialize();
+
+            // Install our own network accessor instead of the default Xerces-C one
+            // This enables us in particular to honour GDAL_HTTP_TIMEOUT
+            if( CPLTestBool(CPLGetConfigOption("OGR_XERCES_USE_OGR_NET_ACCESSOR", "YES")) )
+            {
+                auto oldNetAccessor = XMLPlatformUtils::fgNetAccessor;
+                XMLPlatformUtils::fgNetAccessor = new OGRXercesNetAccessor();
+                delete oldNetAccessor;
+            }
+
+            nCounter = 1;
+            return true;
+        }
+        catch (const XMLException& toCatch)
+        {
+            CPLError( CE_Failure, CPLE_AppDefined,
+                      "Exception initializing Xerces: %s",
+                      transcode(toCatch.getMessage()).c_str() );
+            return false;
+        }
     }
 }
 
@@ -92,7 +177,8 @@ void OGRDeinitializeXerces()
     nCounter--;
     if( nCounter == 0 )
     {
-        if( CPLTestBool(CPLGetConfigOption("OGR_XERCES_TERMINATE", "YES")) )
+        if( !bXercesWasAlreadyInitializedBeforeUs &&
+            CPLTestBool(CPLGetConfigOption("OGR_XERCES_TERMINATE", "YES")) )
         {
             CPLDebug("OGR", "XMLPlatformUtils::Terminate()");
             XMLPlatformUtils::Terminate();
@@ -179,27 +265,6 @@ CPLString& transcode( const XMLCh *panXMLString, CPLString& osRet,
 }
 
 
-/************************************************************************/
-/*                      OGRXercesBinInputStream                         */
-/************************************************************************/
-class OGRXercesBinInputStream : public BinInputStream
-{
-    CPL_DISALLOW_COPY_ASSIGN(OGRXercesBinInputStream)
-
-    VSILFILE* fp;
-    XMLCh emptyString;
-
-  public:
-    explicit OGRXercesBinInputStream( VSILFILE* fp );
-    ~OGRXercesBinInputStream() override;
-
-    XMLFilePos curPos() const override;
-    XMLSize_t readBytes(XMLByte* const toFill,
-                                const XMLSize_t maxToRead) override;
-    const XMLCh* getContentType() const override
-        { return &emptyString; }
-};
-
 /************************************************************************/
 /*                       OGRXercesInputSource                           */
 /************************************************************************/
@@ -224,16 +289,20 @@ class OGRXercesInputSource : public InputSource
 /*                      OGRXercesBinInputStream()                       */
 /************************************************************************/
 
-OGRXercesBinInputStream::OGRXercesBinInputStream(VSILFILE *fpIn) :
+OGRXercesBinInputStream::OGRXercesBinInputStream(VSILFILE *fpIn, bool bOwnFPIn) :
     fp(fpIn),
-    emptyString(0)
+    bOwnFP(bOwnFPIn)
 {}
 
 /************************************************************************/
 /*                     ~OGRXercesBinInputStream()                       */
 /************************************************************************/
 
-OGRXercesBinInputStream::~OGRXercesBinInputStream() = default;
+OGRXercesBinInputStream::~OGRXercesBinInputStream()
+{
+    if( bOwnFP )
+        VSIFCloseL(fp);
+}
 
 /************************************************************************/
 /*                              curPos()                                */
@@ -261,7 +330,7 @@ XMLSize_t OGRXercesBinInputStream::readBytes(XMLByte* const toFill,
 OGRXercesInputSource::OGRXercesInputSource(VSILFILE *fp,
                                            MemoryManager *const manager) :
     InputSource(manager),
-    pBinInputStream(new OGRXercesBinInputStream(fp))
+    pBinInputStream(new OGRXercesBinInputStream(fp, false))
 {}
 
 /************************************************************************/
diff --git a/gdal/ogr/ogr_xerces_headers.h b/gdal/ogr/ogr_xerces_headers.h
index 50d770dfc0..f04e378fd4 100644
--- a/gdal/ogr/ogr_xerces_headers.h
+++ b/gdal/ogr/ogr_xerces_headers.h
@@ -33,9 +33,12 @@
 #pragma GCC system_header
 #endif
 
-#include <util/PlatformUtils.hpp>
-#include <sax/InputSource.hpp>
-#include <util/BinInputStream.hpp>
+#include <xercesc/sax/InputSource.hpp>
+#include <xercesc/util/BinInputStream.hpp>
+#include <xercesc/util/PlatformUtils.hpp>
+#include <xercesc/util/XMLNetAccessor.hpp>
+#include <xercesc/util/XMLUniDefs.hpp>
+#include <xercesc/util/XMLURL.hpp>
 
 using namespace XERCES_CPP_NAMESPACE;
 
