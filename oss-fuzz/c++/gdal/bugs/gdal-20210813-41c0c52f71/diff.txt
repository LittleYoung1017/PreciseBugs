diff --cc autotest/gcore/minixml.py
index 7e84c43841,7e84c43841..70e1475198
--- a/autotest/gcore/minixml.py
+++ b/autotest/gcore/minixml.py
@@@ -163,7 -163,7 +163,7 @@@ def test_minixml_5()
  
          assert tree is not None, ('Tree is None: "%s"' % tree)
  
--
++    
  ###############################################################################
  # Parse malformed XML.
  
@@@ -196,7 -196,7 +196,7 @@@ def test_minixml_6()
  
          assert tree is None, ('Tree is not None: "%s"' % tree)
  
--
++    
  ###############################################################################
  # Parse malformed XML.  Pass without warning, but should not pass.
  
@@@ -219,7 -219,7 +219,7 @@@ def test_minixml_7()
  
          assert tree is not None, ('Tree is None: "%s"' % tree)
  
--
++    
  ###############################################################################
  # Parse XML with too many nesting
  
@@@ -236,16 -236,16 +236,6 @@@ def test_minixml_8()
      assert gdal.GetLastErrorMsg() != '', 'expected error message'
  
  
--###############################################################################
--# Parse and serialize an XML Tree with a <?a b c d ?> processing instruction
--
--
--def test_minixml_processing_instruction():
--
--    xml = """<?a b c d?>\n<foo />\n"""
--    got_xml = gdal.SerializeXMLTree(gdal.ParseXMLString(xml))
--    assert xml == got_xml, 'serialize xml tree failed.'
--
  ###############################################################################
  # Cleanup
  
diff --cc gdal/port/cpl_minixml.cpp
index 187f5a1eda,187f5a1eda..403edd82b2
--- a/gdal/port/cpl_minixml.cpp
+++ b/gdal/port/cpl_minixml.cpp
@@@ -675,7 -675,7 +675,6 @@@ CPLXMLNode *CPLParseXMLString( const ch
  /* ==================================================================== */
      while( ReadToken( &sContext, eLastErrorType ) != TNone )
      {
--loop_beginning:
  /* -------------------------------------------------------------------- */
  /*      Create a new element.                                           */
  /* -------------------------------------------------------------------- */
@@@ -785,19 -785,19 +784,36 @@@ end_processing_close
              if( !psAttr ) break;
              AttachNode( &sContext, psAttr );
  
--            XMLTokenType nextToken = ReadToken(&sContext, eLastErrorType);
--            if( nextToken != TEqual )
++            if( ReadToken(&sContext, eLastErrorType) != TEqual )
              {
                  // Parse stuff like <?valbuddy_schematron
                  // ../wmtsSimpleGetCapabilities.sch?>
                  if( sContext.nStackSize > 0 &&
                        sContext.papsStack[sContext.nStackSize - 1]
--                              .psFirstNode->pszValue[0] == '?' )
++                              .psFirstNode->pszValue[0] == '?' &&
++                      sContext.papsStack[sContext.nStackSize - 1]
++                              .psFirstNode->psChild == psAttr )
                  {
--                    psAttr->eType = CXT_Text;
--                    if( nextToken == TNone )
--                        break;
--                    goto loop_beginning;
++                    CPLDestroyXMLNode(psAttr);
++                    sContext.papsStack[sContext.nStackSize - 1]
++                        .psFirstNode->psChild = nullptr;
++                    sContext.papsStack[sContext.nStackSize - 1].psLastChild =
++                        nullptr;
++
++                    sContext.papsStack[sContext.nStackSize - 1]
++                        .psFirstNode->pszValue = static_cast<char *>(CPLRealloc(
++                        sContext.papsStack[sContext.nStackSize - 1]
++                            .psFirstNode->pszValue,
++                        strlen(sContext.papsStack[sContext.nStackSize - 1]
++                                   .psFirstNode->pszValue) +
++                            1 + strlen(sContext.pszToken) + 1));
++                    strcat(sContext.papsStack[sContext.nStackSize - 1]
++                               .psFirstNode->pszValue,
++                           " ");
++                    strcat(sContext.papsStack[sContext.nStackSize - 1]
++                               .psFirstNode->pszValue,
++                           sContext.pszToken);
++                    continue;
                  }
  
                  eLastErrorType = CE_Failure;
@@@ -1128,6 -1128,6 +1144,8 @@@ CPLSerializeXMLNode( const CPLXMLNode *
  /* -------------------------------------------------------------------- */
      else if( psNode->eType == CXT_Element )
      {
++        bool bHasNonAttributeChildren = false;
++
          if( nIndent )
              memset( *ppszText + *pnLength, ' ', nIndent );
          *pnLength += nIndent;
@@@ -1136,104 -1136,104 +1154,78 @@@
          snprintf( *ppszText + *pnLength, *pnMaxLength - *pnLength,
                    "<%s", psNode->pszValue );
  
--        if( psNode->pszValue[0] == '?' )
++        // Serialize *all* the attribute children, regardless of order
++        CPLXMLNode *psChild = nullptr;
++        for( psChild = psNode->psChild;
++             psChild != nullptr;
++             psChild = psChild->psNext )
          {
--            for( const CPLXMLNode* psChild = psNode->psChild;
--                 psChild != nullptr;
--                 psChild = psChild->psNext )
++            if( psChild->eType == CXT_Attribute )
              {
--                if( psChild->eType == CXT_Text )
--                {
--                    *pnLength += strlen(*ppszText + *pnLength);
--                    if( !_GrowBuffer( 1 + *pnLength, ppszText, pnMaxLength ) )
--                        return false;
--                    strcat( *ppszText + *pnLength, " " );
--                }
--
                  if( !CPLSerializeXMLNode( psChild, 0, ppszText, pnLength,
                                            pnMaxLength ) )
--                {
                      return false;
--                }
              }
++            else
++                bHasNonAttributeChildren = true;
++        }
++
++        if( !bHasNonAttributeChildren )
++        {
              if( !_GrowBuffer( *pnLength + 40,
                                ppszText, pnMaxLength ) )
                  return false;
  
--            strcat( *ppszText + *pnLength, "?>\n" );
++            if( psNode->pszValue[0] == '?' )
++                strcat( *ppszText + *pnLength, "?>\n" );
++            else
++                strcat( *ppszText + *pnLength, " />\n" );
          }
          else
          {
--            bool bHasNonAttributeChildren = false;
--            // Serialize *all* the attribute children, regardless of order
--            for( const CPLXMLNode* psChild = psNode->psChild;
++            bool bJustText = true;
++
++            strcat( *ppszText + *pnLength, ">" );
++
++            for( psChild = psNode->psChild;
                   psChild != nullptr;
                   psChild = psChild->psNext )
              {
                  if( psChild->eType == CXT_Attribute )
--                {
--                    if( !CPLSerializeXMLNode( psChild, 0, ppszText, pnLength,
--                                              pnMaxLength ) )
--                        return false;
--                }
--                else
--                    bHasNonAttributeChildren = true;
--            }
--
--            if( !bHasNonAttributeChildren )
--            {
--                if( !_GrowBuffer( *pnLength + 40,
--                                  ppszText, pnMaxLength ) )
--                    return false;
--
--                strcat( *ppszText + *pnLength, " />\n" );
--            }
--            else
--            {
--                bool bJustText = true;
++                    continue;
  
--                strcat( *ppszText + *pnLength, ">" );
--
--                for( const CPLXMLNode* psChild = psNode->psChild;
--                     psChild != nullptr;
--                     psChild = psChild->psNext )
++                if( psChild->eType != CXT_Text && bJustText )
                  {
--                    if( psChild->eType == CXT_Attribute )
--                        continue;
--
--                    if( psChild->eType != CXT_Text && bJustText )
--                    {
--                        bJustText = false;
--                        *pnLength += strlen(*ppszText + *pnLength);
--                        if( !_GrowBuffer( 1 + *pnLength, ppszText, pnMaxLength ) )
--                            return false;
--                        strcat( *ppszText + *pnLength, "\n" );
--                    }
--
--                    if( !CPLSerializeXMLNode( psChild, nIndent + 2,
--                                              ppszText, pnLength,
--                                              pnMaxLength ) )
++                    bJustText = false;
++                    *pnLength += strlen(*ppszText + *pnLength);
++                    if( !_GrowBuffer( 1 + *pnLength, ppszText, pnMaxLength ) )
                          return false;
++                    strcat( *ppszText + *pnLength, "\n" );
                  }
  
--                *pnLength += strlen(*ppszText + *pnLength);
--                if( !_GrowBuffer( strlen(psNode->pszValue) +
--                                  *pnLength + 40 + nIndent,
--                                  ppszText, pnMaxLength ) )
++                if( !CPLSerializeXMLNode( psChild, nIndent + 2,
++                                          ppszText, pnLength,
++                                          pnMaxLength ) )
                      return false;
++            }
  
--                if( !bJustText )
--                {
--                    if( nIndent )
--                        memset( *ppszText + *pnLength, ' ', nIndent );
--                    *pnLength += nIndent;
--                    (*ppszText)[*pnLength] = '\0';
--                }
++            *pnLength += strlen(*ppszText + *pnLength);
++            if( !_GrowBuffer( strlen(psNode->pszValue) +
++                              *pnLength + 40 + nIndent,
++                              ppszText, pnMaxLength ) )
++                return false;
  
--                *pnLength += strlen(*ppszText + *pnLength);
--                snprintf( *ppszText + *pnLength, *pnMaxLength - *pnLength,
--                          "</%s>\n", psNode->pszValue );
++            if( !bJustText )
++            {
++                if( nIndent )
++                    memset( *ppszText + *pnLength, ' ', nIndent );
++                *pnLength += nIndent;
++                (*ppszText)[*pnLength] = '\0';
              }
++
++            *pnLength += strlen(*ppszText + *pnLength);
++            snprintf( *ppszText + *pnLength, *pnMaxLength - *pnLength,
++                      "</%s>\n", psNode->pszValue );
          }
      }
  
