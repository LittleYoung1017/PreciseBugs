diff --git a/desc/protoparse/lexer.go b/desc/protoparse/lexer.go
index e8f2cd0..faac16e 100644
--- a/desc/protoparse/lexer.go
+++ b/desc/protoparse/lexer.go
@@ -61,11 +61,6 @@ func (rr *runeReader) endMark() string {
 	return m
 }
 
-func lexError(l protoLexer, pos *SourcePos, err string) {
-	pl := l.(*protoLex)
-	_ = pl.errs.handleErrorWithPos(pos, err)
-}
-
 type protoLex struct {
 	filename string
 	input    *runeReader
@@ -382,6 +377,10 @@ func (l *protoLex) Lex(lval *protoSymType) int {
 			l.input.unreadRune(cn)
 		}
 
+		if c > 255 {
+			l.setError(lval, errors.New("invalid character"))
+			return _ERROR
+		}
 		l.setRune(lval, c)
 		return int(c)
 	}
diff --git a/desc/protoparse/parser_test.go b/desc/protoparse/parser_test.go
index 1d2a555..84252b0 100644
--- a/desc/protoparse/parser_test.go
+++ b/desc/protoparse/parser_test.go
@@ -3,6 +3,7 @@ package protoparse
 import (
 	"bytes"
 	"errors"
+	"fmt"
 	"io"
 	"io/ioutil"
 	"os"
@@ -35,6 +36,24 @@ func TestEmptyParse(t *testing.T) {
 	testutil.Eq(t, 0, len(fd[0].GetServices()))
 }
 
+func TestJunkParse(t *testing.T) {
+	// inputs that have been found in the past to cause panics by oss-fuzz
+	inputs := map[string]string{
+		"case-34232": `'';`,
+		"case-34238": `.`,
+	}
+	for name, input := range inputs {
+		protoName := fmt.Sprintf("%s.proto", name)
+		p := Parser{
+			Accessor: FileContentsFromMap(map[string]string{protoName: input}),
+		}
+		_, err := p.ParseFiles(protoName)
+		// we expect this to error... but we don't want it to panic
+		testutil.Nok(t, err, "junk input should have returned error")
+		t.Logf("error from parse: %v", err)
+	}
+}
+
 func TestSimpleParse(t *testing.T) {
 	protos := map[string]*parseResult{}
 
