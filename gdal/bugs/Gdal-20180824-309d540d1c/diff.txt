diff --git a/gdal/third_party/LercLib/Huffman.cpp b/gdal/third_party/LercLib/Huffman.cpp
index 3c19c8db70..2861de6329 100644
--- a/gdal/third_party/LercLib/Huffman.cpp
+++ b/gdal/third_party/LercLib/Huffman.cpp
@@ -190,13 +190,16 @@ bool Huffman::ReadCodeTable(const Byte** ppByte, size_t& nBytesRemainingInOut, i
   if (version < 2)    // allow forward compatibility; for updates that break old decoders increase Lerc2 version number;
     return false;
 
-  int size = intVec[1];
-  int i0 = intVec[2];
-  int i1 = intVec[3];
+  const int size = intVec[1];
+  const int i0 = intVec[2];
+  const int i1 = intVec[3];
 
   if (i0 >= i1 || i0 < 0 || size < 0 || size > (int)m_maxHistoSize)
     return false;
 
+  if (GetIndexWrapAround(i0, size) >= size || GetIndexWrapAround(i1 - 1, size) >= size)
+    return false;
+
   try
   {
     vector<unsigned int> dataVec(i1 - i0, 0);
@@ -211,9 +214,6 @@ bool Huffman::ReadCodeTable(const Byte** ppByte, size_t& nBytesRemainingInOut, i
     std::fill(m_codeTable.begin(), m_codeTable.end(),
       std::pair<unsigned short, unsigned int>((short)0, 0));
 
-    if (GetIndexWrapAround(i0, size) >= size || GetIndexWrapAround(i1 - 1, size) >= size)
-      return false;
-
     for (int i = i0; i < i1; i++)
     {
       int k = GetIndexWrapAround(i, size);
