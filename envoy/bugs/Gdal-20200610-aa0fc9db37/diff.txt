diff --git a/api/envoy/config/cluster/v3/cluster.proto b/api/envoy/config/cluster/v3/cluster.proto
index 7eb53d84c4..5817fb254f 100644
--- a/api/envoy/config/cluster/v3/cluster.proto
+++ b/api/envoy/config/cluster/v3/cluster.proto
@@ -590,7 +590,8 @@ message Cluster {
 
   // The :ref:`load balancer type <arch_overview_load_balancing_types>` to use
   // when picking a host in the cluster.
-  LbPolicy lb_policy = 6 [(validate.rules).enum = {defined_only: true}];
+  // [#comment:TODO: Remove enum constraint :ref:`LOAD_BALANCING_POLICY_CONFIG<envoy_api_enum_value_config.cluster.v3.Cluster.LbPolicy.LOAD_BALANCING_POLICY_CONFIG>` when implemented.]
+  LbPolicy lb_policy = 6 [(validate.rules).enum = {defined_only: true not_in: 7}];
 
   // Setting this is required for specifying members of
   // :ref:`STATIC<envoy_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.STATIC>`,
diff --git a/api/envoy/config/cluster/v4alpha/cluster.proto b/api/envoy/config/cluster/v4alpha/cluster.proto
index eab2f2d80f..454a9c163f 100644
--- a/api/envoy/config/cluster/v4alpha/cluster.proto
+++ b/api/envoy/config/cluster/v4alpha/cluster.proto
@@ -591,7 +591,8 @@ message Cluster {
 
   // The :ref:`load balancer type <arch_overview_load_balancing_types>` to use
   // when picking a host in the cluster.
-  LbPolicy lb_policy = 6 [(validate.rules).enum = {defined_only: true}];
+  // [#comment:TODO: Remove enum constraint :ref:`LOAD_BALANCING_POLICY_CONFIG<envoy_api_enum_value_config.cluster.v4alpha.Cluster.LbPolicy.LOAD_BALANCING_POLICY_CONFIG>` when implemented.]
+  LbPolicy lb_policy = 6 [(validate.rules).enum = {defined_only: true not_in: 7}];
 
   // Setting this is required for specifying members of
   // :ref:`STATIC<envoy_api_enum_value_config.cluster.v4alpha.Cluster.DiscoveryType.STATIC>`,
diff --git a/generated_api_shadow/envoy/config/cluster/v3/cluster.proto b/generated_api_shadow/envoy/config/cluster/v3/cluster.proto
index 8140007f68..298f874a94 100644
Binary files a/generated_api_shadow/envoy/config/cluster/v3/cluster.proto and b/generated_api_shadow/envoy/config/cluster/v3/cluster.proto differ
diff --git a/generated_api_shadow/envoy/config/cluster/v4alpha/cluster.proto b/generated_api_shadow/envoy/config/cluster/v4alpha/cluster.proto
index eab2f2d80f..454a9c163f 100644
Binary files a/generated_api_shadow/envoy/config/cluster/v4alpha/cluster.proto and b/generated_api_shadow/envoy/config/cluster/v4alpha/cluster.proto differ
diff --git a/source/extensions/filters/http/jwt_authn/matcher.cc b/source/extensions/filters/http/jwt_authn/matcher.cc
index 622d73f022..ff60faa043 100644
--- a/source/extensions/filters/http/jwt_authn/matcher.cc
+++ b/source/extensions/filters/http/jwt_authn/matcher.cc
@@ -154,6 +154,11 @@ MatcherConstPtr Matcher::create(const RequirementRule& rule) {
   case RouteMatch::PathSpecifierCase::kHiddenEnvoyDeprecatedRegex:
   case RouteMatch::PathSpecifierCase::kSafeRegex:
     return std::make_unique<RegexMatcherImpl>(rule);
+  case RouteMatch::PathSpecifierCase::kConnectMatcher:
+    // TODO: When CONNECT match support is implemented, remove the manual clean-up of CONNECT
+    // matching in the filter fuzzer implementation:
+    // //test/extensions/filters/http/common/fuzz/uber_per_filter.cc
+    NOT_IMPLEMENTED_GCOVR_EXCL_LINE;
   // path specifier is required.
   case RouteMatch::PathSpecifierCase::PATH_SPECIFIER_NOT_SET:
   default:
diff --git a/test/extensions/filters/http/common/fuzz/BUILD b/test/extensions/filters/http/common/fuzz/BUILD
index 27f5d59038..a31d186519 100644
--- a/test/extensions/filters/http/common/fuzz/BUILD
+++ b/test/extensions/filters/http/common/fuzz/BUILD
@@ -43,6 +43,7 @@ envoy_cc_test_library(
         "//test/mocks/server:server_mocks",
         "//test/proto:bookstore_proto_cc_proto",
         "@envoy_api//envoy/extensions/filters/http/grpc_json_transcoder/v3:pkg_cc_proto",
+        "@envoy_api//envoy/extensions/filters/http/jwt_authn/v3:pkg_cc_proto",
         "@envoy_api//envoy/extensions/filters/http/squash/v3:pkg_cc_proto",
         "@envoy_api//envoy/extensions/filters/http/tap/v3:pkg_cc_proto",
     ],
diff --git a/test/extensions/filters/http/common/fuzz/filter_corpus/jwt_connect b/test/extensions/filters/http/common/fuzz/filter_corpus/jwt_connect
new file mode 100644
index 0000000000..2b2d00ecda
Binary files /dev/null and b/test/extensions/filters/http/common/fuzz/filter_corpus/jwt_connect differ
diff --git a/test/extensions/filters/http/common/fuzz/uber_per_filter.cc b/test/extensions/filters/http/common/fuzz/uber_per_filter.cc
index da4d963164..c6db8b6ffe 100644
--- a/test/extensions/filters/http/common/fuzz/uber_per_filter.cc
+++ b/test/extensions/filters/http/common/fuzz/uber_per_filter.cc
@@ -1,4 +1,5 @@
 #include "envoy/extensions/filters/http/grpc_json_transcoder/v3/transcoder.pb.h"
+#include "envoy/extensions/filters/http/jwt_authn/v3/config.pb.h"
 #include "envoy/extensions/filters/http/squash/v3/squash.pb.h"
 #include "envoy/extensions/filters/http/tap/v3/tap.pb.h"
 
@@ -73,6 +74,16 @@ void UberFilterFuzzer::guideAnyProtoType(test::fuzz::HttpData* mutable_data, uin
   mutable_any->set_type_url(type_url);
 }
 
+void removeConnectMatcher(Protobuf::Message* message) {
+  envoy::extensions::filters::http::jwt_authn::v3::JwtAuthentication& config =
+      dynamic_cast<envoy::extensions::filters::http::jwt_authn::v3::JwtAuthentication&>(*message);
+  for (auto& rules : *config.mutable_rules()) {
+    if (rules.match().has_connect_matcher()) {
+      rules.mutable_match()->set_path("/");
+    }
+  }
+}
+
 void cleanAttachmentTemplate(Protobuf::Message* message) {
   envoy::extensions::filters::http::squash::v3::Squash& config =
       dynamic_cast<envoy::extensions::filters::http::squash::v3::Squash&>(*message);
@@ -99,7 +110,8 @@ void UberFilterFuzzer::cleanFuzzedConfig(absl::string_view filter_name,
   const std::string name = Extensions::HttpFilters::Common::FilterNameUtil::canonicalFilterName(
       std::string(filter_name));
   // Map filter name to clean-up function.
-  if (name == HttpFilterNames::get().GrpcJsonTranscoder) {
+  if (filter_name == HttpFilterNames::get().GrpcJsonTranscoder) {
+    // Add a valid service proto descriptor.
     addBookstoreProtoDescriptor(message);
   } else if (name == HttpFilterNames::get().Squash) {
     cleanAttachmentTemplate(message);
@@ -107,6 +119,10 @@ void UberFilterFuzzer::cleanFuzzedConfig(absl::string_view filter_name,
     // TapDS oneof field not implemented.
     cleanTapConfig(message);
   }
+  if (filter_name == HttpFilterNames::get().JwtAuthn) {
+    // Remove when connect matcher is implemented for Jwt Authentication filter.
+    removeConnectMatcher(message);
+  }
 }
 
 void UberFilterFuzzer::perFilterSetup() {
diff --git a/test/server/server_corpus/not_reached b/test/server/server_corpus/not_reached
new file mode 100644
index 0000000000..93b264ade6
Binary files /dev/null and b/test/server/server_corpus/not_reached differ
