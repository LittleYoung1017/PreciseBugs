diff --git a/autotest/gcore/data/huge-implied-number-strips.tif b/autotest/gcore/data/huge-implied-number-strips.tif
new file mode 100644
index 0000000000..1a9dfa0a43
Binary files /dev/null and b/autotest/gcore/data/huge-implied-number-strips.tif differ
diff --git a/autotest/gcore/tiff_read.py b/autotest/gcore/tiff_read.py
index 410a97bd71..3a02039201 100755
--- a/autotest/gcore/tiff_read.py
+++ b/autotest/gcore/tiff_read.py
@@ -3078,7 +3078,7 @@ def tiff_read_minimum_tiff_tags_with_warning():
 
 ###############################################################################
 
-def check_libtiff_internal_or_greater(expected_maj,expected_min,expected_micro):
+def check_libtiff_internal_or_at_least(expected_maj,expected_min,expected_micro):
 
     md = gdal.GetDriverByName('GTiff').GetMetadata()
     if md['LIBTIFF'] == 'INTERNAL':
@@ -3116,7 +3116,7 @@ def tiff_read_unknown_compression():
 
 def tiff_read_leak_ZIPSetupDecode():
 
-    if not check_libtiff_internal_or_greater(4,0,8):
+    if not check_libtiff_internal_or_at_least(4,0,8):
         return 'skip'
 
     with gdaltest.error_handler():
@@ -3130,7 +3130,7 @@ def tiff_read_leak_ZIPSetupDecode():
 
 def tiff_read_excessive_memory_TIFFFillStrip():
 
-    if not check_libtiff_internal_or_greater(4,0,8):
+    if not check_libtiff_internal_or_at_least(4,0,8):
         return 'skip'
 
     with gdaltest.error_handler():
@@ -3144,7 +3144,7 @@ def tiff_read_excessive_memory_TIFFFillStrip():
 
 def tiff_read_excessive_memory_TIFFFillStrip2():
 
-    if not check_libtiff_internal_or_greater(4,0,8):
+    if not check_libtiff_internal_or_at_least(4,0,8):
         return 'skip'
 
     with gdaltest.error_handler():
@@ -3157,7 +3157,7 @@ def tiff_read_excessive_memory_TIFFFillStrip2():
 
 def tiff_read_excessive_memory_TIFFFillTile():
 
-    if not check_libtiff_internal_or_greater(4,0,8):
+    if not check_libtiff_internal_or_at_least(4,0,8):
         return 'skip'
 
     with gdaltest.error_handler():
@@ -3170,7 +3170,7 @@ def tiff_read_excessive_memory_TIFFFillTile():
 
 def tiff_read_big_strip():
 
-    if not check_libtiff_internal_or_greater(4,0,8):
+    if not check_libtiff_internal_or_at_least(4,0,8):
         return 'skip'
 
     gdal.Translate('/vsimem/test.tif', 'data/byte.tif', options = '-co compress=lzw -outsize 10000 2000  -co blockysize=2000 -r bilinear -ot float32')
@@ -3202,7 +3202,7 @@ def tiff_read_big_strip_chunky_way():
 
 def tiff_read_big_tile():
 
-    if not check_libtiff_internal_or_greater(4,0,8):
+    if not check_libtiff_internal_or_at_least(4,0,8):
         return 'skip'
 
     gdal.Translate('/vsimem/test.tif', 'data/byte.tif', options = '-co compress=lzw -outsize 10000 2000 -co tiled=yes -co blockxsize=10000 -co blockysize=2000 -r bilinear -ot float32')
@@ -3241,6 +3241,18 @@ def tiff_read_huge_number_strips():
 
 ###############################################################################
 
+def tiff_read_huge_implied_number_strips():
+
+    if not check_libtiff_internal_or_at_least(4,0,10):
+        return 'skip'
+
+    with gdaltest.error_handler():
+        gdal.Open('data/huge-implied-number-strips.tif')
+
+    return 'success'
+
+###############################################################################
+
 def tiff_read_many_blocks():
 
     # Runs super slow on some Windows configs
@@ -3299,7 +3311,7 @@ def tiff_read_uint33():
 # Test fix for https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=1545
 def tiff_read_corrupted_deflate_singlestrip():
 
-    if not check_libtiff_internal_or_greater(4,0,8):
+    if not check_libtiff_internal_or_at_least(4,0,8):
         return 'skip'
 
     with gdaltest.error_handler():
@@ -3313,7 +3325,7 @@ def tiff_read_corrupted_deflate_singlestrip():
 
 def tiff_read_packbits_not_enough_data():
 
-    if not check_libtiff_internal_or_greater(4,0,8):
+    if not check_libtiff_internal_or_at_least(4,0,8):
         return 'skip'
 
     with gdaltest.error_handler():
@@ -3436,7 +3448,7 @@ def tiff_read_stripoffset_types():
 
 def tiff_read_progressive_jpeg_denial_of_service():
 
-    if not check_libtiff_internal_or_greater(4,0,9):
+    if not check_libtiff_internal_or_at_least(4,0,9):
         return 'skip'
 
     # Should error out with 'JPEGPreDecode:Reading this strip would require
@@ -3470,7 +3482,7 @@ def tiff_read_progressive_jpeg_denial_of_service():
 
 def tiff_read_old_style_lzw():
 
-    if not check_libtiff_internal_or_greater(4,0,8):
+    if not check_libtiff_internal_or_at_least(4,0,8):
         return 'skip'
 
     ds = gdal.Open('data/quad-lzw-old-style.tif')
@@ -3534,7 +3546,7 @@ def tiff_read_mmap_interface():
 
 def tiff_read_jpeg_too_big_last_stripe():
 
-    if not check_libtiff_internal_or_greater(4,0,9):
+    if not check_libtiff_internal_or_at_least(4,0,9):
         return 'skip'
 
     ds = gdal.Open('data/tif_jpeg_too_big_last_stripe.tif')
@@ -3728,6 +3740,7 @@ gdaltest_list.append( (tiff_read_big_strip_chunky_way) )
 gdaltest_list.append( (tiff_read_big_tile) )
 gdaltest_list.append( (tiff_read_huge_tile) )
 gdaltest_list.append( (tiff_read_huge_number_strips) )
+gdaltest_list.append( (tiff_read_huge_implied_number_strips) )
 gdaltest_list.append( (tiff_read_many_blocks) )
 gdaltest_list.append( (tiff_read_many_blocks_truncated) )
 gdaltest_list.append( (tiff_read_uint33) )
diff --git a/gdal/frmts/gtiff/geotiff.cpp b/gdal/frmts/gtiff/geotiff.cpp
index 3a4c0c05f0..25e3678929 100644
--- a/gdal/frmts/gtiff/geotiff.cpp
+++ b/gdal/frmts/gtiff/geotiff.cpp
@@ -102,9 +102,6 @@
 
 CPL_CVSID("$Id$")
 
-#if SIZEOF_VOIDP == 4
-static bool bGlobalStripIntegerOverflow = false;
-#endif
 static bool bGlobalInExternalOvr = false;
 
 // Only libtiff 4.0.4 can handle between 32768 and 65535 directories.
@@ -12159,80 +12156,6 @@ static bool GTIFFMakeBufferedStream(GDALOpenInfo* poOpenInfo)
     return true;
 }
 
-/************************************************************************/
-/*                  GTiffCheckCurrentDirIsCompatOfStripChop()           */
-/************************************************************************/
-
-static bool GTiffCheckCurrentDirIsCompatOfStripChop( TIFF* l_hTIFF,
-                                                     bool& bCandidateForStripChopReopening )
-{
-    uint32 nXSize = 0;
-    TIFFGetField( l_hTIFF, TIFFTAG_IMAGEWIDTH, &nXSize );
-
-    uint32 nYSize = 0;
-    TIFFGetField( l_hTIFF, TIFFTAG_IMAGELENGTH, &nYSize );
-
-    if( nXSize > INT_MAX || nYSize > INT_MAX )
-    {
-        return false;
-    }
-
-    uint16 l_nPlanarConfig = 0;
-    if( !TIFFGetField( l_hTIFF, TIFFTAG_PLANARCONFIG, &(l_nPlanarConfig) ) )
-        l_nPlanarConfig = PLANARCONFIG_CONTIG;
-
-    uint16 l_nCompression = 0;
-    if( !TIFFGetField( l_hTIFF, TIFFTAG_COMPRESSION, &(l_nCompression) ) )
-        l_nCompression = COMPRESSION_NONE;
-
-    uint32 l_nRowsPerStrip = 0;
-    if( !TIFFGetField( l_hTIFF, TIFFTAG_ROWSPERSTRIP, &(l_nRowsPerStrip) ) )
-        l_nRowsPerStrip = nYSize;
-
-    bool bCanReopenWithStripChop = true;
-    if( !TIFFIsTiled( l_hTIFF ) &&
-        l_nCompression == COMPRESSION_NONE &&
-        l_nRowsPerStrip >= nYSize &&
-        l_nPlanarConfig == PLANARCONFIG_CONTIG )
-    {
-        bCandidateForStripChopReopening = true;
-        if( nYSize > 10 * 1024 * 1024 )
-        {
-            uint16 l_nSamplesPerPixel = 0;
-            if( !TIFFGetField( l_hTIFF, TIFFTAG_SAMPLESPERPIXEL,
-                               &l_nSamplesPerPixel ) )
-                l_nSamplesPerPixel = 1;
-
-            uint16 l_nBitsPerSample = 0;
-            if( !TIFFGetField(l_hTIFF, TIFFTAG_BITSPERSAMPLE,
-                              &(l_nBitsPerSample)) )
-                l_nBitsPerSample = 1;
-
-            const vsi_l_offset nLineSize =
-                (l_nSamplesPerPixel * static_cast<vsi_l_offset>(nXSize) *
-                 l_nBitsPerSample + 7) / 8;
-            int nDefaultStripHeight = static_cast<int>(8192 / nLineSize);
-            if( nDefaultStripHeight == 0 ) nDefaultStripHeight = 1;
-            const vsi_l_offset nStrips = nYSize / nDefaultStripHeight;
-
-            // There is a risk of DoS due to huge amount of memory allocated in
-            // ChopUpSingleUncompressedStrip() in libtiff.
-            if( nStrips > 10 * 1024 * 1024 &&
-                !CPLTestBool(
-                    CPLGetConfigOption("GTIFF_FORCE_STRIP_CHOP", "NO")) )
-            {
-                CPLError(
-                    CE_Warning, CPLE_AppDefined,
-                    "Potential denial of service detected. Avoid using strip "
-                    "chop. Set the GTIFF_FORCE_STRIP_CHOP configuration open "
-                    "to go over this test." );
-                bCanReopenWithStripChop = false;
-            }
-        }
-    }
-    return bCanReopenWithStripChop;
-}
-
 /************************************************************************/
 /*                                Open()                                */
 /************************************************************************/
@@ -12302,27 +12225,9 @@ GDALDataset *GTiffDataset::Open( GDALOpenInfo * poOpenInfo )
     // Open and disable "strip chopping" (c option)
     TIFF *l_hTIFF =
         VSI_TIFFOpen( pszFilename,
-                      poOpenInfo->eAccess == GA_ReadOnly ? "rc" : "r+c",
+                      poOpenInfo->eAccess == GA_ReadOnly ? "r" : "r+",
                       poOpenInfo->fpL );
     CPLPopErrorHandler();
-#if SIZEOF_VOIDP == 4
-    if( l_hTIFF == nullptr )
-    {
-        // Case of one-strip file where the strip size is > 2GB (#5403).
-        if( bGlobalStripIntegerOverflow )
-        {
-            l_hTIFF =
-                VSI_TIFFOpen( pszFilename,
-                              poOpenInfo->eAccess == GA_ReadOnly ? "r" : "r+",
-                              poOpenInfo->fpL );
-            bGlobalStripIntegerOverflow = false;
-        }
-    }
-    else
-    {
-        bGlobalStripIntegerOverflow = false;
-    }
-#endif
 
     // Now emit errors and change their criticality if needed
     // We only emit failures if we didn't manage to open the file.
@@ -12359,67 +12264,6 @@ GDALDataset *GTiffDataset::Open( GDALOpenInfo * poOpenInfo )
     if( !TIFFGetField( l_hTIFF, TIFFTAG_COMPRESSION, &(l_nCompression) ) )
         l_nCompression = COMPRESSION_NONE;
 
-    bool bCandidateForStripChopReopening = false;
-    if( GTiffCheckCurrentDirIsCompatOfStripChop(l_hTIFF,
-                                    bCandidateForStripChopReopening ) &&
-        bCandidateForStripChopReopening )
-    {
-        bool bReopenWithStripChop = true;
-
-#if !defined(SUPPORTS_MORE_THAN_32768_DIRECTORIES)
-        int iDirIndex = 1;
-#endif
-        // Inspect all directories to decide if we can safely re-open in
-        // strip chop mode
-
-        toff_t nCurOffset = TIFFCurrentDirOffset(l_hTIFF);
-        bool bHasSeveralDirecotries = false;
-
-        while( !TIFFLastDirectory( l_hTIFF ) )
-        {
-            bHasSeveralDirecotries = true;
-            const CPLErr eLastErrorType = CPLGetLastErrorType();
-            const CPLErrorNum eLastErrorNo = CPLGetLastErrorNo();
-            const CPLString osLastErrorMsg(CPLGetLastErrorMsg());
-            CPLPushErrorHandler(CPLQuietErrorHandler);
-            bool bOk = TIFFReadDirectory( l_hTIFF ) != 0;
-            CPLPopErrorHandler();
-            CPLErrorSetState(eLastErrorType, eLastErrorNo, osLastErrorMsg);
-            if( !bOk )
-                break;
-
-#if !defined(SUPPORTS_MORE_THAN_32768_DIRECTORIES)
-            if( iDirIndex == 32768 )
-                break;
-#endif
-            if( !GTiffCheckCurrentDirIsCompatOfStripChop(l_hTIFF,
-                                    bCandidateForStripChopReopening) )
-            {
-                bReopenWithStripChop = false;
-                break;
-            }
-#if !defined(SUPPORTS_MORE_THAN_32768_DIRECTORIES)
-            iDirIndex ++;
-#endif
-        }
-
-        if( bReopenWithStripChop )
-        {
-            CPLDebug("GTiff", "Reopen with strip chop enabled");
-            XTIFFClose(l_hTIFF);
-            l_hTIFF =
-                VSI_TIFFOpen( pszFilename,
-                              poOpenInfo->eAccess == GA_ReadOnly ? "r" : "r+",
-                              poOpenInfo->fpL );
-            if( l_hTIFF == nullptr )
-                return nullptr;
-        }
-        else if( bHasSeveralDirecotries )
-        {
-            TIFFSetSubDirectory( l_hTIFF, nCurOffset );
-        }
-    }
-
 /* -------------------------------------------------------------------- */
 /*      Create a corresponding GDALDataset.                             */
 /* -------------------------------------------------------------------- */
@@ -18570,21 +18414,6 @@ GTiffWarningHandler(const char* module, const char* fmt, va_list ap )
 static void
 GTiffErrorHandler( const char* module, const char* fmt, va_list ap )
 {
-#if SIZEOF_VOIDP == 4
-    // Case of one-strip file where the strip size is > 2GB (#5403).
-    if( strcmp(module, "TIFFStripSize") == 0 &&
-        strstr(fmt, "Integer overflow") != nullptr )
-    {
-        bGlobalStripIntegerOverflow = true;
-        return;
-    }
-    if( bGlobalStripIntegerOverflow &&
-        strstr(fmt, "Cannot handle zero strip size") != nullptr )
-    {
-        return;
-    }
-#endif
-
 #ifdef BIGTIFF_SUPPORT
     if( strcmp(fmt, "Maximum TIFF file size exceeded") == 0 )
     {
diff --git a/gdal/frmts/gtiff/libtiff/tif_dirread.c b/gdal/frmts/gtiff/libtiff/tif_dirread.c
index 3fc0c8e0e7..1a3259c147 100644
--- a/gdal/frmts/gtiff/libtiff/tif_dirread.c
+++ b/gdal/frmts/gtiff/libtiff/tif_dirread.c
@@ -5696,6 +5696,17 @@ ChopUpSingleUncompressedStrip(TIFF* tif)
         if( nstrips == 0 )
             return;
 
+        /* If we are going to allocate a lot of memory, make sure that the */
+        /* file is as big as needed */
+        if( tif->tif_mode == O_RDONLY &&
+            nstrips > 1000000 &&
+            (tif->tif_dir.td_stripoffset[0] >= TIFFGetFileSize(tif) ||
+             tif->tif_dir.td_stripbytecount[0] >
+                    TIFFGetFileSize(tif) - tif->tif_dir.td_stripoffset[0]) )
+        {
+            return;
+        }
+
 	newcounts = (uint64*) _TIFFCheckMalloc(tif, nstrips, sizeof (uint64),
 				"for chopped \"StripByteCounts\" array");
 	newoffsets = (uint64*) _TIFFCheckMalloc(tif, nstrips, sizeof (uint64),
