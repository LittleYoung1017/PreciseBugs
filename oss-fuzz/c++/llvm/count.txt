aa0e9046c16b	d8cdd78b6c04	Tue Aug 16 16:45:39 2022 -0700	Libfuzzer fix for Ctrl + c not working with -fork and -ignore_crashes=1	commit aa0e9046c16bf27a8affbd903e2e3cad924a5217Author: Maxim Schessler <maxim.schessler@gmail.com>Date:   Mon Aug 15 11:44:06 2022 -0700    Libfuzzer fix for Ctrl + c not working with -fork and -ignore_crashes=1        In some cases running Libfuzzer in fork mode with -ignore_crashes=1 counts ctrl+c as crash and restarts.        Thread: https://github.com/google/oss-fuzz/issues/4547        Credit: Marcel Boehme <marcel.boehme@acm.org>        Reviewed By: vitalybuka        Differential Revision: https://reviews.llvm.org/D130990
03d8bc184a31	c933c2eb3346	Tue Nov 23 09:58:46 2021 -0800	[indvars] Fix lftr crash when preheader is terminated by switch	commit 03d8bc184a3129f0e519bf08ef45f0349cfa1f90Author: Philip Reames <listmail@philipreames.com>Date:   Tue Nov 23 09:57:30 2021 -0800    [indvars] Fix lftr crash when preheader is terminated by switch        This was found by oss-fuzz.  The switch will get canonicalized to a branch, but if it hasn't been when we run LFTR, we crashed on an unneeded assert.
faa019c0e38e	51ae78a6d679	Wed Nov 10 21:26:05 2021 +0100	[libc++] Fix segmentation fault in __do_put_integral	commit faa019c0e38e8cb33d7e7fee92aa548bd052939eAuthor: MarcoFalke <falke.marco@gmail.com>Date:   Wed Nov 10 20:34:31 2021 +0100    [libc++] Fix segmentation fault in __do_put_integral        6 chars are not sufficient to represent all formats for 64 bit integers.        This was accidentally introduced in commit b889cbf36635a302f5b77560f1769178f196c2c7 (https://reviews.llvm.org/D112830).        This causes failures in downstream projects, for example:        * https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=40817    * https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=40841        Differential Revision: https://reviews.llvm.org/D113600
3c06ecaa1e8d	850217686e21	Sun Oct 24 14:42:03 2021 -0700	[instcombine] Fix oss-fuzz 39934 (mul matcher can match non-instruction)	commit 3c06ecaa1e8d0267fe67c1e5c8fa5f294de2aab8Author: Philip Reames <listmail@philipreames.com>Date:   Sat Oct 23 18:07:21 2021 -0700    [instcombine] Fix oss-fuzz 39934 (mul matcher can match non-instruction)        Fixes a crash observed by oss-fuzz in 39934.  Issue at hand is that code expects a pattern match on m_Mul to imply the operand is a mul instruction, however mul constexprs are also valid here.
47215e1c6250	2098c5dfbd62	Tue Jun 29 13:31:22 2021 +0100	[LV] Fix crash when target instruction for sinking is dead.	commit 47215e1c6250298aa9db59b3b06f832fcd23be01Author: Florian Hahn <flo@fhahn.com>Date:   Tue Jun 29 11:54:52 2021 +0100    [LV] Fix crash when target instruction for sinking is dead.        This patch fixes a crash when the target instruction for sinking is    dead. In that case, no recipe is created and trying to get the recipe    for it results in a crash. To ensure all sink targets are alive, find &    use the first previous alive instruction.        Note that the case where the sink source is dead is already handled.        Found by    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=35320        Reviewed By: Ayal        Differential Revision: https://reviews.llvm.org/D104603
d95a4b950dd3	ca446e58c841	Tue May 25 12:52:22 2021 -0400	[libc++] Try to fix the oss-fuzz failure	commit d95a4b950dd38c745ef98e0f22ff22755196571dAuthor: Louis Dionne <ldionne.2@gmail.com>Date:   Tue May 25 12:52:14 2021 -0400    [libc++] Try to fix the oss-fuzz failure
423024904825	ae8a5c68523c	Tue Apr 13 10:49:42 2021 -0700	[libFuzzer] Fix MSan false positives with custom mutators.	commit 423024904825d147c69e8999537b6b813bc24999Author: Matt Morehouse <mascasa@google.com>Date:   Tue Apr 13 09:25:12 2021 -0700    [libFuzzer] Fix MSan false positives with custom mutators.        We need to unpoison parameters before calling into MSan-instrumented    user-defined mutators.        Addresses https://github.com/google/oss-fuzz/issues/4605.        Reviewed By: metzman        Differential Revision: https://reviews.llvm.org/D100355
b82b305cf94a	411673e769ac	Fri Apr 2 13:45:11 2021 +0200	[InstCombine] Fix out-of-bounds ashr(shl) optimization	commit b82b305cf94a57a7e0e72f576b85aaa136a505c3Author: Jeroen Dobbelaere <jeroen.dobbelaere@synopsys.com>Date:   Fri Apr 2 13:45:11 2021 +0200    [InstCombine] Fix out-of-bounds ashr(shl) optimization        This fixes a crash found by the oss fuzzer and reported by @fhahn.    The suggestion of @RKSimon seems to be the correct fix here. (See D91343).        The oss fuzz report can be found here: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=32759        Reviewed By: lebedev.ri        Differential Revision: https://reviews.llvm.org/D99792
4210b87020b9	34b60d8a5684	Tue Jan 26 15:30:50 2021 -0500	[libc++] Fix oss-fuzz build	commit 4210b87020b9e558f650993d6a274807083ac5f6Author: Louis Dionne <ldionne.2@gmail.com>Date:   Tue Jan 26 15:30:42 2021 -0500    [libc++] Fix oss-fuzz build
7e30989dabce	53fba9d9d303	Tue Nov 17 16:16:51 2020 +0000	[IR] ShuffleVectorInst::isIdentityWithPadding - bail on non-fixed-type vector shuffles.	commit 7e30989dabce9ddbca0cbad7a8f25fb4e756d334Author: Simon Pilgrim <llvm-dev@redking.me.uk>Date:   Tue Nov 17 16:05:03 2020 +0000    [IR] ShuffleVectorInst::isIdentityWithPadding - bail on non-fixed-type vector shuffles.        Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=27416
1d53b55e1867	75a026e93b31	Fri Nov 6 10:06:44 2020 -0500	[libc++] Try fixing the oss-fuzz build	commit 1d53b55e18670df06802c4b5df187ef014e8fe7cAuthor: Louis Dionne <ldionne@apple.com>Date:   Fri Nov 6 10:06:44 2020 -0500    [libc++] Try fixing the oss-fuzz build        See https://github.com/google/oss-fuzz/issues/4586.
0bde7c65275e	6c0dcf65e710	Tue Jul 2 12:54:48 2019 +0000	[InstCombine] Shift amount reassociation: fixup constantexpr handling (PR42484)	commit 0bde7c65275ef4fcd51bc92e1b6c280f9888b73fAuthor: Roman Lebedev <lebedev.ri@gmail.com>Date:   Tue Jul 2 12:54:48 2019 +0000    [InstCombine] Shift amount reassociation: fixup constantexpr handling (PR42484)        I was actually wondering if there was some nicer way than m_Value()+cast,    but apparently what i was really "subconsciously" thinking about    was correctness issue.        hasNoUnsignedWrap()/hasNoUnsignedWrap() exist for Instruction,    not for BinaryOperator, so let's just use m_Instruction(),    thus both avoiding a cast, and a crash.        Fixes https://bugs.llvm.org/show_bug.cgi?id=42484,          https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=15587        llvm-svn: 364915
09fb2029e542	5a4f7cf2ff3f	Wed May 22 15:53:23 2019 +0000	llvm-undname: Fix an assert-on-invalid, found by oss-fuzz	commit 09fb2029e5420e12a3f9c47d8c55b2d715df0e05Author: Nico Weber <nicolasweber@gmx.de>Date:   Wed May 22 15:53:23 2019 +0000    llvm-undname: Fix an assert-on-invalid, found by oss-fuzz        If a template parameter refers to a pointer to member, but the mangling    of that was a string literal instead of a real symbol, llvm-undname used    to crash instead of rejecting the input.        llvm-svn: 361402
8d05eb855659	bce10f159c3a	Wed Apr 24 16:09:38 2019 +0000	llvm-undname: Fix assert-on->4GiB-string-literal, found by oss-fuzz	commit 8d05eb8556590bf8fd7e820574425439aab3123bAuthor: Nico Weber <nicolasweber@gmx.de>Date:   Wed Apr 24 16:09:38 2019 +0000    llvm-undname: Fix assert-on->4GiB-string-literal, found by oss-fuzz        llvm-svn: 359109
f5c7f3ad33eb	70346d127be6	Mon Apr 22 15:05:18 2019 +0000	llvm-undname: Fix an assert-on-invalid, found by oss-fuzz	commit f5c7f3ad33eb66ee80648f0ca040b0f6e1731e0aAuthor: Nico Weber <nicolasweber@gmx.de>Date:   Mon Apr 22 15:05:18 2019 +0000    llvm-undname: Fix an assert-on-invalid, found by oss-fuzz        llvm-svn: 358891
8fc9902bbb0d	198ab6013678	Sun Apr 21 16:58:25 2019 +0000	llvm-undname: Fix stack overflow on almost-valid	commit 8fc9902bbb0d48c75fe33627641f14c9c3e09e25Author: Nico Weber <nicolasweber@gmx.de>Date:   Sun Apr 21 16:58:25 2019 +0000    llvm-undname: Fix stack overflow on almost-valid        If a unsigned with all 4 bytes non-0 was passed to outputHex(), there    were two off-by-ones in it:        - Both MaxPos and Pos left space for the final \0, which left the buffer      one byte to small. Set MaxPos to 16 instead of 15 to fix.        - The `assert(Pos >= 0);` was after a `Pos--`, move it up one line.        Since valid Unicode codepoints are <= 0x10ffff, this could never really    happen in practice.        Found by oss-fuzz.        llvm-svn: 358856
aa162682ca23	f985e3125428	Sun Apr 21 14:25:07 2019 +0000	llvm-undname: Fix stack overflow on invalid found by oss-fuzz	commit aa162682ca23907d463635534b987b4defa22d24Author: Nico Weber <nicolasweber@gmx.de>Date:   Sun Apr 21 14:25:07 2019 +0000    llvm-undname: Fix stack overflow on invalid found by oss-fuzz        llvm-svn: 358852
e145a540cc90	2c1f3ea538f2	Fri Apr 19 14:13:11 2019 +0000	llvm-undname: Attempt to fix leak-on-invalid found by oss-fuzz	commit e145a540cc906c0ee0fd9e3ab2dc463a193eb91cAuthor: Nico Weber <nicolasweber@gmx.de>Date:   Fri Apr 19 14:13:11 2019 +0000    llvm-undname: Attempt to fix leak-on-invalid found by oss-fuzz        llvm-svn: 358760
a0ac65c98f28	502cf4bd19f9	Thu Apr 18 19:52:32 2019 +0000	llvm-undname: Fix two more asserts-on-invalid, found by oss-fuzz	commit a0ac65c98f2816f42432448eb3d23d1b7df5c06cAuthor: Nico Weber <nicolasweber@gmx.de>Date:   Thu Apr 18 19:52:32 2019 +0000    llvm-undname: Fix two more asserts-on-invalid, found by oss-fuzz        llvm-svn: 358708
c035c243da36	a0a2264ef757	Tue Apr 16 14:10:34 2019 +0000	llvm-undname: Fix nullptr deref on invalid structor names in template args	commit c035c243da36e2fa867626ef8af467fdda73ac80Author: Nico Weber <nicolasweber@gmx.de>Date:   Tue Apr 16 14:10:34 2019 +0000    llvm-undname: Fix nullptr deref on invalid structor names in template args        Similar to r358421: A StructorIndentifierNode has a Class field which    is read when printing it, but if the StructorIndentifierNode appears in    a template argument then demangleFullyQualifiedSymbolName() which sets    Class isn't called. Since StructorIndentifierNodes are always leaf    names, we can just reject them as well.        Found by oss-fuzz.        llvm-svn: 358491
64041d7b9071	0e0bb0e24a0c	Mon Apr 15 16:42:44 2019 +0000	llvm-undname: Fix nullptr deref on invalid conversion operator names in template args	commit 64041d7b90714aa6f0542c64ec5bb327beecfc58Author: Nico Weber <nicolasweber@gmx.de>Date:   Mon Apr 15 16:42:44 2019 +0000    llvm-undname: Fix nullptr deref on invalid conversion operator names in template args        A ConversionOperatorIdentifierNode has a TargetType which is read when    printing it, but if the ConversionOperatorIdentifierNode appears in a    template argument there's nothing that can provide the TargetType.    Normally the COIN is a symbol (leaf) name and takes its TargetType from the    symbol's type, but in a template argument context the COIN can only be    either a non-leaf name piece or a type, and must hence be invalid.        Similar to the COIN check in demangleDeclarator().        Found by oss-fuzz.        llvm-svn: 358421
ae050d214b94	274f305a4189	Sun Apr 14 23:32:37 2019 +0000	llvm-undname: Fix oss-fuzz-foudn crash-on-invalid with incomplete special table nodes	commit ae050d214b94e05f0079c08f2f3270b66cb92000Author: Nico Weber <nicolasweber@gmx.de>Date:   Sun Apr 14 23:32:37 2019 +0000    llvm-undname: Fix oss-fuzz-foudn crash-on-invalid with incomplete special table nodes        llvm-svn: 358367
63fe2593ae55	5b92eb007b8f	Sun Apr 14 23:08:12 2019 +0000	llvm-undname: Fix another crash-on-invalid found by oss-fuzz	commit 63fe2593ae55b8d9a5fadd8636d7b206c44885a5Author: Nico Weber <nicolasweber@gmx.de>Date:   Sun Apr 14 23:08:12 2019 +0000    llvm-undname: Fix another crash-on-invalid found by oss-fuzz        llvm-svn: 358363
b6e6d3c740a4	9e27514996e7	Fri Apr 12 21:00:12 2019 +0000	[libFuzzer] Fix DataFlow.cpp logic when tracing long inputs.	commit b6e6d3c740a4b94a64ad62745a18571f1a9cb3cbAuthor: Max Moroz <mmoroz@chromium.org>Date:   Fri Apr 12 21:00:12 2019 +0000    [libFuzzer] Fix DataFlow.cpp logic when tracing long inputs.        Summary:    1. Do not create DFSan labels for the bytes which we do not trace. This is where we run out of labels at the first place.    2. When dumping the traces on the disk, make sure to offset the label identifiers by the number of the first byte in the trace range.    3. For the last label, make sure to write it at the last position of the trace bit string, as that label represents the input size, not any particular byte.        Also fixed the bug with division in python which I've introduced when migrated the scripts to Python3 (`//` is required for integral division).        Otherwise, the scripts are wasting too much time unsuccessfully trying to    collect and process traces from the long inputs. For more context, see    https://github.com/google/oss-fuzz/issues/1632#issuecomment-481761789        Reviewers: kcc        Reviewed By: kcc        Subscribers: delcypher, #sanitizers, llvm-commits        Tags: #llvm, #sanitizers        Differential Revision: https://reviews.llvm.org/D60538        llvm-svn: 358311
b4f33bbbb00a	8ec304c9fd92	Thu Apr 11 22:47:18 2019 +0000	llvm-undname: Fix crash on incomplete virtual this adjusts	commit b4f33bbbb00a3e47e14081a9be352eb6a9b917b5Author: Nico Weber <nicolasweber@gmx.de>Date:   Thu Apr 11 22:47:18 2019 +0000    llvm-undname: Fix crash on incomplete virtual this adjusts        Found by oss-fuzz.        Also remove an else-after-return, this part has no behavior change.        llvm-svn: 358237
f2d8f09d5d29	57c3d4bed3ee	Thu Apr 11 22:23:35 2019 +0000	llvm-undname: Fix crash on invalid name in a template parameter pointer to member arg	commit f2d8f09d5d293e4e7aa060e65e41bf146a689ceaAuthor: Nico Weber <nicolasweber@gmx.de>Date:   Thu Apr 11 22:23:35 2019 +0000    llvm-undname: Fix crash on invalid name in a template parameter pointer to member arg        Found by oss-fuzz.        llvm-svn: 358234
63b97d2a67b4	3a4c2192a471	Mon Apr 8 19:46:53 2019 +0000	llvm-undname: Fix more crashes and asserts on invalid inputs	commit 63b97d2a67b41c80f7059401ae6ba2d1c79fa53cAuthor: Nico Weber <nicolasweber@gmx.de>Date:   Mon Apr 8 19:46:53 2019 +0000    llvm-undname: Fix more crashes and asserts on invalid inputs        For functions whose callers don't check that enough input is present,    add checks at the start of the function that enough input is there and    set Error otherwise.        For functions that return AST objects, return nullptr instead of    incomplete AST objects with nullptr fields if an error occurred during    the function.        Introduce a new function demangleDeclarator() for the sequence    demangleFullyQualifiedSymbolName(); demangleEncodedSymbol() and    use it in the two places that had this sequence. Let this new function    check that ConversionOperatorIdentifiers have a valid TargetType.        Some of the bad inputs found by oss-fuzz, others by inspection.        Differential Revision: https://reviews.llvm.org/D60354        llvm-svn: 357936
1672581e9681	a9886f827892	Wed Apr 3 23:27:18 2019 +0000	llvm-undname: Fix a crash-on-invalid	commit 1672581e96819a4e16860145eb388af993e4ea9eAuthor: Nico Weber <nicolasweber@gmx.de>Date:   Wed Apr 3 23:27:18 2019 +0000    llvm-undname: Fix a crash-on-invalid        Found by oss-fuzz, fixes issue 13260 on oss-fuzz.        Differential Revision: https://reviews.llvm.org/D60207        llvm-svn: 357649
a9886f827892	321de48a9409	Wed Apr 3 23:23:32 2019 +0000	llvm-undame: Fix an assert-on-invalid	commit a9886f8278921a78ba6f9e15395b39e74586aba1Author: Nico Weber <nicolasweber@gmx.de>Date:   Wed Apr 3 23:23:32 2019 +0000    llvm-undame: Fix an assert-on-invalid        Found by oss-fuzz, fixes issue 12432 on os-fuzz.        Differential Revision: https://reviews.llvm.org/D60206        llvm-svn: 357648
321de48a9409	c7444ddfe579	Wed Apr 3 23:19:39 2019 +0000	llvm-undname: Fix an assert-on-invalid	commit 321de48a94096f83a4be5164bce462e6285413c7Author: Nico Weber <nicolasweber@gmx.de>Date:   Wed Apr 3 23:19:39 2019 +0000    llvm-undname: Fix an assert-on-invalid        Found by oss-fuzz, fixes issues 12428 and 12429 on oss-fuzz.        Differential Revision: https://reviews.llvm.org/D60204        llvm-svn: 357647
c7444ddfe579	c2b872549359	Wed Apr 3 23:15:56 2019 +0000	llvm-undname: Fix a crash-on-invalid	commit c7444ddfe5791bff8cfb3369df84669d0af8e800Author: Nico Weber <nicolasweber@gmx.de>Date:   Wed Apr 3 23:15:56 2019 +0000    llvm-undname: Fix a crash-on-invalid        Found by oss-fuzz, fixes issues 12435 and 12438 on oss-fuzz.        Differential Revision: https://reviews.llvm.org/D60202        llvm-svn: 357646
6ca0985aa572	bd53e768d22c	Thu Mar 7 17:50:16 2019 +0000	[InterleavedAccessAnalysis] Fix integer overflow in insertMember.	commit 6ca0985aa572f25635f28ce8385dba112d56b6e9Author: Florian Hahn <flo@fhahn.com>Date:   Thu Mar 7 17:50:16 2019 +0000    [InterleavedAccessAnalysis] Fix integer overflow in insertMember.        Without checking for integer overflow, invalid members can be added     e.g. if the calculated key overflows, becomes positive and the largest key.        This fixes          https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=7560          https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=13128          https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=13229        Reviewers: Ayal, anna, hsaito, efriedma        Reviewed By: efriedma        Differential Revision: https://reviews.llvm.org/D55538        llvm-svn: 355613
03e57521c0fc	f874607f328a	Fri Aug 17 12:25:18 2018 +0000	[DAGCombiner] extractShiftForRotate - fix out of range shift issue	commit 03e57521c0fc720b6bf7ab858f232e4d02942be4Author: Simon Pilgrim <llvm-dev@redking.me.uk>Date:   Fri Aug 17 12:25:18 2018 +0000    [DAGCombiner] extractShiftForRotate - fix out of range shift issue        Don't just check for negative shift amounts.        Fixes OSS Fuzz #9935    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=9935        llvm-svn: 340015
ee82a79041a4	b44789759b70	Mon Aug 13 12:10:09 2018 +0000	[CGP] Fix GEP issue with out of range APInt constant values not fitting in int64_t	commit ee82a79041a43dfa3e8249cc66c1dd0c9918c202Author: Simon Pilgrim <llvm-dev@redking.me.uk>Date:   Mon Aug 13 12:10:09 2018 +0000    [CGP] Fix GEP issue with out of range APInt constant values not fitting in int64_t        Test case reduced from https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=7173        llvm-svn: 339556
8511777d3a41	caacedb03e95	Wed Aug 8 16:34:03 2018 +0000	[WASM] Fix overflow when reading custom section	commit 8511777d3a41e5198a7028711754d3e9c29afddcAuthor: Jonas Devlieghere <jonas@devlieghere.com>Date:   Wed Aug 8 16:34:03 2018 +0000    [WASM] Fix overflow when reading custom section        When reading a custom WASM section, it was possible that its name    extended beyond the size of the section. This resulted in a bogus value    for the section size due to the size overflowing.        Fixes heap buffer overflow detected by OSS-fuzz:    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=8190        Differential revision: https://reviews.llvm.org/D50387        llvm-svn: 339269
256db4b799a7	a6b5e0036128	Sat Jul 28 04:06:30 2018 +0000	[demangler] Fix an oss-fuzz bug from r338138	commit 256db4b799a7c6e01d5210099f403b1bf124e2baAuthor: Erik Pilkington <erik.pilkington@gmail.com>Date:   Sat Jul 28 04:06:30 2018 +0000    [demangler] Fix an oss-fuzz bug from r338138        Stack overflow on invalid. While collapsing references, we were skipping over a    cycle check in ForwardTemplateReference leading to a stack overflow. This commit    fixes the problem by duplicating the cycle check in ReferenceType.        llvm-svn: 338190
f163bdc07ee3	11d68a619e3f	Tue May 22 09:46:55 2018 +0000	[clang-format] Fix crash in getLengthToMatchingParen	commit f163bdc07ee357753f36ecb922acd769f0df6c98Author: Krasimir Georgiev <krasimir@google.com>Date:   Tue May 22 09:46:55 2018 +0000    [clang-format] Fix crash in getLengthToMatchingParen        Summary:    Found by oss-fuzz:    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=8212        Reviewers: bkramer        Subscribers: klimek, cfe-commits        Differential Revision: https://reviews.llvm.org/D47191        llvm-svn: 332961
5b4a67af1b09	c4f5f605fdf9	Tue Apr 17 07:22:34 2018 +0000	[DAGCombiner] Fix for oss-fuzz bug	commit 5b4a67af1b09295fcb9080bc68d92f30374331fbAuthor: Gerolf Hoflehner <ghoflehner@apple.com>Date:   Tue Apr 17 07:22:34 2018 +0000    [DAGCombiner] Fix for oss-fuzz bug        llvm-svn: 330178
615e753e09ff	56f0fc4716ff	Mon Mar 26 15:34:36 2018 +0000	[demangler] Fix a bug in r328464 found by oss-fuzz.	commit 615e753e09ff4d93ef067fb221433f5cb50b3c46Author: Erik Pilkington <erik.pilkington@gmail.com>Date:   Mon Mar 26 15:34:36 2018 +0000    [demangler] Fix a bug in r328464 found by oss-fuzz.        llvm-svn: 328507
b4c85cf4a401	bbfe43418587	Mon Mar 12 14:45:08 2018 +0000	[DebugInfo] Replace unreachable with None	commit b4c85cf4a4014a52e11d3967e8a310f0d13d11b8Author: Jonas Devlieghere <jonas@devlieghere.com>Date:   Mon Mar 12 14:45:08 2018 +0000    [DebugInfo] Replace unreachable with None        Invalid user input should not trigger assertions and unreachables. We    already return an Option so we should just return None here.        Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=5532        llvm-svn: 327274
e8f1ffb50a20	8b1e93b7d617	Fri Feb 23 23:59:20 2018 +0000	[ExprConstant] Fix crash when initialize an indirect field with another field.	commit e8f1ffb50a203c3b2e1f5bb94f493ecb381a43faAuthor: Volodymyr Sapsai <vsapsai@apple.com>Date:   Fri Feb 23 23:59:20 2018 +0000    [ExprConstant] Fix crash when initialize an indirect field with another field.        When indirect field is initialized with another field, you have    MemberExpr with CXXThisExpr that corresponds to the field's immediate    anonymous parent. But 'this' was referring to the non-anonymous parent.    So when we were building LValue Designator, it was incorrect as it had    wrong starting point. Usage of such designator would cause unexpected    APValue changes and crashes.        The fix is in adjusting 'this' for indirect fields from non-anonymous    parent to the field's immediate parent.        Discovered by OSS-Fuzz:    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=4985        rdar://problem/36359187        Reviewers: rsmith, efriedma        Reviewed By: rsmith        Subscribers: cfe-commits, jkorous-apple        Differential Revision: https://reviews.llvm.org/D42498        llvm-svn: 325997
579f0b307c19	64626b344b33	Tue Feb 6 22:39:25 2018 +0000	[Lex] Fix handling numerical literals ending with \' and signed exponent.	commit 579f0b307c19efd778d221703ea7743234113535Author: Volodymyr Sapsai <vsapsai@apple.com>Date:   Tue Feb 6 22:39:25 2018 +0000    [Lex] Fix handling numerical literals ending with ' and signed exponent.        For input `0'e+1` lexer tokenized as numeric constant only `0'e`. Later    NumericLiteralParser skipped 0 and ' as digits and parsed `e+1` as valid    exponent going past the end of the token. Because it didn't mark numeric    literal as having an error, it continued parsing and tried to expandUCNs    with StringRef of length -2.        The fix is not to parse exponent when we reached the end of token.        Discovered by OSS-Fuzz:    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=4588        rdar://problem/36076719        Reviewers: rsmith, t.p.northover        Reviewed By: rsmith        Subscribers: cfe-commits, jkorous-apple        Differential Revision: https://reviews.llvm.org/D41834        llvm-svn: 324419
cbf651f7399f	1ad085b8081e	Fri Jan 5 10:03:02 2018 +0000	[DebugInfo] Don\'t crash when given invalid DWARFv5 line table prologue.	commit cbf651f7399feea9ea8495af571d67d924b8ec11Author: Jonas Devlieghere <jonas@devlieghere.com>Date:   Fri Jan 5 10:03:02 2018 +0000    [DebugInfo] Don't crash when given invalid DWARFv5 line table prologue.        This patch replaces an assertion with an explicit check for the validity    of the FORM parameters. The assertion was triggered when the DWARFv5    line table contained a zero address size.        This fixes OSS-Fuzz Issue 4644    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=4644        Differential revision: https://reviews.llvm.org/D41615        llvm-svn: 321863
fbb4bace6600	d6b165341d51	Thu Nov 30 22:15:39 2017 +0000	[msan] Fix return type of mbrtowc	commit fbb4bace6600d6738118c2a07581bd3cf2fad687Author: Vitaly Buka <vitalybuka@google.com>Date:   Thu Nov 30 22:15:39 2017 +0000    [msan] Fix return type of mbrtowc        Summary: Fixes https://github.com/google/oss-fuzz/issues/1009        Reviewers: eugenis        Subscribers: llvm-commits        Differential Revision: https://reviews.llvm.org/D40676        llvm-svn: 319484
9c3cbeea3943	c38ba6697fc8	Mon Oct 30 23:59:51 2017 +0000	[CGP] Fix crash on i96 bit multiply	commit 9c3cbeea3943dcfa096634eb94c8acc5ff8bf640Author: Philip Reames <listmail@philipreames.com>Date:   Mon Oct 30 23:59:51 2017 +0000    [CGP] Fix crash on i96 bit multiply        Issue found by llvm-isel-fuzzer on OSS fuzz, https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=3725        If anyone actually cares about > 64 bit arithmetic, there's a lot more to do in this area.  There's a bunch of obviously wrong code in the same function.  I don't have the time to fix all of them and am just using this to understand what the workflow for fixing fuzzer cases might look like.        llvm-svn: 316967
b42db1567c55	92a2635bbd23	Fri Oct 27 19:15:13 2017 +0000	Fix llvm-special-case-list-fuzzer regexp exception	commit b42db1567c55a1d00ff7ecbe9abbbfba9a7d19cbAuthor: Vlad Tsyrklevich <vlad@tsyrklevich.net>Date:   Fri Oct 27 19:15:13 2017 +0000    Fix llvm-special-case-list-fuzzer regexp exception        Summary:    Original oss-fuzz report:    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=3727 #c2        The minimized test case that causes this failure:    5b 5b 5b 3d 47 53 00 5b  3d 5d 5b 5d 0a     [[[=GS.[=][].        Note the string "=GS\x00". The failure happens because the code is    searching the string against an array of known collated names. "GS\x00"    is a hit, but since len takes into account an extra NUL byte, indexing    into cp->name[len] goes one byte past it's allocated memory. Fix this to    use a strlen(cp->name) comparison to account for NUL bytes in the input.        Reviewers: pcc        Reviewed By: pcc        Subscribers: hctim, kcc        Differential Revision: https://reviews.llvm.org/D39380        llvm-svn: 316786
35b50a83aba3	1108d072f47b	Mon Oct 23 18:04:34 2017 +0000	[wasm] readSection: Avoid reading past eof (fixes oss-fuzz #3219)	commit 35b50a83aba3a5eedd3395341b5be76600a6841cAuthor: Vedant Kumar <vsk@apple.com>Date:   Mon Oct 23 18:04:34 2017 +0000    [wasm] readSection: Avoid reading past eof (fixes oss-fuzz #3219)        A wasm file crafted with a bogus section size can trigger an ASan issue    in the DWARFObjInMemory constructor. Nip the problem in the bud when we    read the wasm section.        Found by OSS-Fuzz:    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=3219        Differential Revision: https://reviews.llvm.org/D38777        llvm-svn: 316357
80df64239593	bfcac0b4806a	Thu Aug 31 12:50:42 2017 +0000	[BinaryFormat] Fix out of bounds read.	commit 80df64239593200f9d79312fd22975457f981b58Author: Benjamin Kramer <benny.kra@googlemail.com>Date:   Thu Aug 31 12:50:42 2017 +0000    [BinaryFormat] Fix out of bounds read.        Found by OSS-FUZZ!    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=3220        llvm-svn: 312238
