diff --git a/autotest/gcore/vsifile.py b/autotest/gcore/vsifile.py
index d94617d748..98055d8e52 100755
--- a/autotest/gcore/vsifile.py
+++ b/autotest/gcore/vsifile.py
@@ -643,6 +643,15 @@ def vsifile_13():
 
     return 'success'
 
+###############################################################################
+# Check performance issue (https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=1673)
+
+def vsifile_14():
+
+    with gdaltest.error_handler():
+        gdal.VSIFOpenL('/vsitar//vsitar//vsitar//vsitar//vsitar//vsitar//vsitar//vsitar/a.tgzb.tgzc.tgzd.tgze.tgzf.tgz.h.tgz.i.tgz', 'rb')
+    return 'success'
+
 gdaltest_list = [ vsifile_1,
                   vsifile_2,
                   vsifile_3,
@@ -655,7 +664,8 @@ gdaltest_list = [ vsifile_1,
                   vsifile_10,
                   vsifile_11,
                   vsifile_12,
-                  vsifile_13 ]
+                  vsifile_13,
+                  vsifile_14 ]
 
 if __name__ == '__main__':
 
diff --git a/gdal/port/cpl_multiproc.h b/gdal/port/cpl_multiproc.h
index b085bd3b56..f997c7bcdd 100644
--- a/gdal/port/cpl_multiproc.h
+++ b/gdal/port/cpl_multiproc.h
@@ -205,7 +205,7 @@ class CPL_DLL CPLLockHolder
 #define CTLS_ERRORCONTEXT                5         /* cpl_error.cpp */
 #define CTLS_GDALDATASET_REC_PROTECT_MAP 6        /* gdaldataset.cpp */
 #define CTLS_PATHBUF                     7         /* cpl_path.cpp */
-#define CTLS_UNUSED3                     8
+#define CTLS_ABSTRACTARCHIVE_SPLIT       8         /* cpl_vsil_abstract_archive.cpp */
 #define CTLS_UNUSED4                     9
 #define CTLS_CPLSPRINTF                 10         /* cpl_string.h */
 #define CTLS_RESPONSIBLEPID             11         /* gdaldataset.cpp */
diff --git a/gdal/port/cpl_vsil_abstract_archive.cpp b/gdal/port/cpl_vsil_abstract_archive.cpp
index 52e6c8b70e..20aaea4935 100644
--- a/gdal/port/cpl_vsil_abstract_archive.cpp
+++ b/gdal/port/cpl_vsil_abstract_archive.cpp
@@ -457,6 +457,24 @@ char* VSIArchiveFilesystemHandler::SplitFilename( const char *pszFilename,
     else
         pszFilename += strlen(GetPrefix()) + 1;
 
+    // Parsing strings like /vsitar//vsitar//vsitar//vsitar//vsitar//vsitar//vsitar//vsitar/a.tgzb.tgzc.tgzd.tgze.tgzf.tgz.h.tgz.i.tgz
+    // takes a huge amount of time, so limit the number of nesting of such
+    // file systems.
+    int* pnCounter = static_cast<int*>(CPLGetTLS(CTLS_ABSTRACTARCHIVE_SPLIT));
+    if( pnCounter == NULL )
+    {
+        pnCounter = static_cast<int*>(CPLMalloc(sizeof(int)));
+        *pnCounter = 0;
+        CPLSetTLS(CTLS_ABSTRACTARCHIVE_SPLIT, pnCounter, TRUE);
+    }
+    if( *pnCounter == 3 )
+    {
+        CPLError(CE_Failure, CPLE_AppDefined,
+                 "Too deep recursion level in "
+                 "VSIArchiveFilesystemHandler::SplitFilename()");
+        return NULL;
+    }
+
     const std::vector<CPLString> oExtensions = GetExtensions();
     while( pszFilename[i] )
     {
@@ -511,6 +529,8 @@ char* VSIArchiveFilesystemHandler::SplitFilename( const char *pszFilename,
 
             if( !bArchiveFileExists )
             {
+                (*pnCounter) ++;
+
                 VSIFilesystemHandler *poFSHandler =
                     VSIFileManager::GetHandler( archiveFilename );
                 if( poFSHandler->Stat(
@@ -520,6 +540,8 @@ char* VSIArchiveFilesystemHandler::SplitFilename( const char *pszFilename,
                 {
                     bArchiveFileExists = true;
                 }
+
+                (*pnCounter) --;
             }
 
             if( bArchiveFileExists )
