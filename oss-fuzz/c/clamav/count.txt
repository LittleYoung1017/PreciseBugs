89cd0df3d	ca6b9beea	Mon Jun 12 16:08:26 2023 -0700	Fixing overread when unpacking PE files	commit 89cd0df3d7d4c2163d79056b5c0ec55c4992c8f4Author: m-sola <msola@sourcefire.com>Date:   Mon Jun 12 19:08:26 2023 -0400    Fixing overread when unpacking PE files        A buffer over-read may occur when unpacking wwpack'd PE files if the    file is very small.    This commit adds a CLI_CONTAINS buffer wrap check to ensure we aren't    reading beyond the exe buffer.        We determined that this issue is not a vulnerability.        Resolves: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=57374
4d2517ad3	c45a15e2f	Wed Apr 26 11:19:26 2023 -0700	Fix small leak in VBA parser	commit 4d2517ad3554ebd74b39fcbc46c6bc4435b4343cAuthor: Micah Snyder <micasnyd@cisco.com>Date:   Tue Apr 25 20:33:55 2023 -0700    Fix small leak in VBA parser        Fixed a leak introduced by a recent bug fix in the VBA parser.        Fixes: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=58301
ba34bc033	a08377f9c	Wed Apr 26 10:43:13 2023 -0700	Coverity and OSS-Fuzz fixes in PDF module	commit ba34bc033c32a22fefe18985e186777390c2dc1cAuthor: Micah Snyder <micasnyd@cisco.com>Date:   Wed Apr 19 16:10:16 2023 -0700    Coverity and OSS-Fuzz fixes in PDF module        Prevent double-extraction of same PDF object        Two indirect references to the same PDF object may cause it to try to    extract that object twice. This also may cause it to set the extraction    path twice, which leaks the memory from the first time.        This commit records when object extraction is attempted and prevents    doing it again. It also adds a couple extra checks to make sure that the    object path string is not leaked.        Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=58072        Also:        - Coverity-317959: Fix complaint about logically dead code. No need to      check if UE variable is NULL because we would've returned earlier if it      was NULL.        - A bunch of medium-severity coverity issues for PDF parser regarding      checking if a `pdf` pointer is NULL after dereferencing it.        - Coverity-192930: bytes_remaining was being checked twice in a row      without chainging it. Turns out we should have been changing it after      moving the `index` pointer.        - Coverity-192920: Switch to use CLI_REALLOC instead of cli_realloc2.      This is because cli_realloc2 would free `pdf->objs` on failure and we      still need it.
f79f94215	629c018f0	Mon Apr 24 11:04:41 2023 -0700	html-norm: fix memcpy negative size param	commit f79f9421504375d1f970636a891681a67c5dea2aAuthor: m-sola <msola@sourcefire.com>Date:   Mon Apr 24 14:04:41 2023 -0400    html-norm: fix memcpy negative size param        The pointer used to index an HTML file during normalization may be    rewound to an earlier location if encoded javascript (screnc) is    detected while processing the line.        If a <style>-tag was also found in the line after the screnc bytes    then the check for the size of the style-chunk will be "negative"    and would result in a massive memcpy.        This issue was introduced during 1.1 development.        This commit ensures the style chunk size may not be negative.        Resolves: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=57327
b90d11a85	4c5d5480a	Fri Mar 31 18:43:14 2023 -0700	Fix heap overflow read in javascript normalizer module	commit b90d11a854894f135ba4510cd817409253374ebcAuthor: m-sola <msola@sourcefire.com>Date:   Fri Mar 31 21:43:14 2023 -0400    Fix heap overflow read in javascript normalizer module        This buffer overflow read is not a vulnerability.        Resolves: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=54339
652b14186	d9a0f6ad8	Fri Feb 3 13:24:46 2023 -0800	Fix heap overflow read when reading PDB signatures	commit 652b1418646132cf25d9d3cd32dd03b9fd94d94dAuthor: ragusaa <54862477+ragusaa@users.noreply.github.com>Date:   Fri Feb 3 16:24:46 2023 -0500    Fix heap overflow read when reading PDB signatures        This buffer overflow read is not a vulnerability.        This commit fixes the bug by handling the case of an empty regex string.        Resolves: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=47506
d9a0f6ad8	efcc0c63c	Fri Feb 3 12:04:04 2023 -0800	Fix possible stack overflow read when parsing WDB signatures	commit d9a0f6ad871b9fd5c8fc05b72427b31559d2979eAuthor: ragusaa <54862477+ragusaa@users.noreply.github.com>Date:   Fri Feb 3 15:04:04 2023 -0500    Fix possible stack overflow read when parsing WDB signatures        While searching for the end of the character class ']', there was no    bounds checking to prevent reading past the end of the regular    expression.        This commit fixes the issue by adding length checking to regex_parsing.        Resolves: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=47780
efcc0c63c	6fb4620b6	Wed Feb 1 19:09:41 2023 -0800	Fix possible index out of bounds when loading CRB signatures	commit efcc0c63c3018a7225228809caa79575b32a9d8bAuthor: ragusaa <54862477+ragusaa@users.noreply.github.com>Date:   Wed Feb 1 22:09:41 2023 -0500    Fix possible index out of bounds when loading CRB signatures        This out of bounds issue is not a vulnerability.        This commit fixes the issue by adding string length validation to public key strings.        Resolves: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=43824
030180804	3dc50c83a	Fri Sep 16 17:55:41 2022 -0700	Fix benign overread in HTML/js-norm parser	commit 030180804bf8f5dc38d6b047e553282f4d75a36dAuthor: Micah Snyder <micasnyd@cisco.com>Date:   Tue Mar 15 17:54:26 2022 -0700    Fix benign overread in HTML/js-norm parser        Fix a possible overread in `handle_de()` where we dereference tokens    without boundchecking. The over-read does not cause a crash.        Resolves: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=44849        Also clean up very sloppy bounds checking in `match_parameters()`.    I don't have any evidence of an overflow. The code just looks sus.        Eliminated a benign warning in `cli_js_process_buffer()`.
fdf23d500	55b2eafc8	Fri Jun 10 09:11:57 2022 -0700	Fix possible 2-byte overread when adding sig pattern	commit fdf23d500a7d3987d72533c73a26788d732a2256Author: Micah Snyder <micasnyd@cisco.com>Date:   Sat Jun 4 12:08:51 2022 -0700    Fix possible 2-byte overread when adding sig pattern        It is possible to create a signature pattern that tries to add a    zero-byte matching pattern to the A-C trie. A missing check at this    stage can end up with a 2-byte overread when indexing the (empty)    pattern to make sure the bytes added to the A-C trie are static and    not both zero.        This over read issue is not a vulnerability.        This commit fixes the issue by adding a check for the pattern length.        Resolves: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=43832        Also added:    - type casts and a "fall-through" comment to silence compile warnings.    - a few additional length checks to protect against an additional 1-byte    over read.
55b2eafc8	cdeeb4239	Wed Jun 1 13:46:36 2022 -0700	Fix integer overflow/undefined behavior in NSIS parser	commit 55b2eafc847caac68581ee691b575e9755d5dc68Author: ragusaa <54862477+ragusaa@users.noreply.github.com>Date:   Wed Jun 1 16:46:36 2022 -0400    Fix integer overflow/undefined behavior in NSIS parser        Fix integer overflow in the NSIS parser        Cast int32_t to uint32_t for comparison with uint32_t, to prevent    integer overflow, as well as signed/unsigned compare warning.        Fixes: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=44493        Also address some other undefined behavior warnings:    * mpool.c: Fixed pointer overflow errors uncovered by UndefinedBehaviorSanitizer.    * matcher-ac.c: Test length to avoid passing NULLs to memcmp.
ceed5e16b	6d5d295d6	Tue May 31 16:27:24 2022 -0700	Fix possible leak when unloading databases	commit ceed5e16b70bdb8e9707481e2f2ca0d7694a41d2Author: ragusaa <54862477+ragusaa@users.noreply.github.com>Date:   Tue May 31 19:27:24 2022 -0400    Fix possible leak when unloading databases        Incorrect and unnecessary checks in the cl_engine_free() function may mean that    it fails to free phishing and bytecode structures:    - `engine->dconf->bytecode & BYTECODE_ENGINE_MASK)`    - `engine->dconf->phishing & PHISHING_CONF_ENGINE)`        Removed these checks to make sure it always frees the affected structures.        Resolves: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=43813
6d5d295d6	f7e120ad5	Tue May 31 16:15:06 2022 -0700	Fix leak when exporting pdf json metadata	commit 6d5d295d624bce28f7ca9f313a07e232305a0ad0Author: m-sola <msola@sourcefire.com>Date:   Tue May 31 19:15:06 2022 -0400    Fix leak when exporting pdf json metadata        Cleanup for the pdf->stats structure wasn't guaranteed when handling    a fatal memory error. This fix pulls stats cleanup into its own function    and handles the case where there's a fatal memory error by moving the    function call below the err: tag.        This fix also removes an extraneous call to pdf_export_json.        Resolves: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=40601
f7e120ad5	d6d7f183b	Tue May 31 13:14:26 2022 -0700	Fix benign overread during ldb database load	commit f7e120ad574fba7fa2869ae8e7ced6bd921fafa5Author: m-sola <msola@sourcefire.com>Date:   Tue May 31 16:14:26 2022 -0400    Fix benign overread during ldb database load        There is a buffer over read possible when using the "wide" sig option.    This issue is not a vulnerability.        Added bounds checking for 3-byte comparison step.        Resolves: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=43843
d6d7f183b	62bf3bea3	Fri May 27 18:02:40 2022 -0700	Fix heap over-read when loading some LDB signatures	commit d6d7f183bf9c172c0a01f92c16df0ddbf33b05ccAuthor: ragusaa <54862477+ragusaa@users.noreply.github.com>Date:   Fri May 27 21:02:40 2022 -0400    Fix heap over-read when loading some LDB signatures        There is a possible heap buffer overflow read when loading some malformed    logical signatures that use the byte-compare feature.        Previously the upper bound for loop in cli_bcomp_freemeta was hardcoded to 2.    But it's possibly for there to be less than 2 items.        This issue is not a vulnerability.        Changed "2" to "bm->comp_count" to avoid going past the end.        Fixes: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=43816
62bf3bea3	1c6746853	Fri May 27 16:51:18 2022 -0700	Fix minor leaks when loading malformed PDB signatures	commit 62bf3bea329a13d8416d72d289f72bba3e5a1933Author: ragusaa <54862477+ragusaa@users.noreply.github.com>Date:   Fri May 27 19:51:18 2022 -0400    Fix minor leaks when loading malformed PDB signatures        This commit fixes a couple of minor memory leaks that may occur when loading    malformed PDB signatures        Fixes: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=43849    Fixes: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=44115
1c6746853	3dff2e2f5	Mon May 16 18:29:25 2022 -0700	Fixed heap buffer overflow while loading signatures	commit 1c6746853f6c40407dc8a801c544e0d72313fc0fAuthor: ragusaa <54862477+ragusaa@users.noreply.github.com>Date:   Mon May 16 21:29:25 2022 -0400    Fixed heap buffer overflow while loading signatures        There is a possible overflow read when loading PDB and WDB phishing    signatures.        This issue is not a vulnerability.        Changed const char pointers to uint8_t pointers when they are to be used    with data, as well as removing asserts and adding additional error    checking.        Thank you Michał Dardas for reporting this issue.        This fix also resolves:    - https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=43845    - https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=43812    - https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=43866        This commit also fixes a minor leak of pattern matching trans nodes    that was observed when testing with the MPOOL module disabled.
d1746ba0a	1bfb0522c	Sun May 1 12:24:19 2022 -0700	Fix possible double-free in OLE2 document parser	commit d1746ba0a5e46c2580a54f1b889cea6d8369832cAuthor: Micah Snyder <micasnyd@cisco.com>Date:   Tue Jan 25 16:12:41 2022 -0800    Fix possible double-free in OLE2 document parser        If realloc() is called with size == 0, realloc() will free the pointer    and return NULL. Unless you check for this and set the pointer to NULL,    the pointer may later be free'd again after the `done:` label.        This commit fixes it by using the new CLI_REALLOC macro. CLI_REALLOC    uses `cli_realloc()` that both limits the amoutn of memory that may be    allocated and also will return NULL if you try to set size == 0, WITHOUT    free'ing the memory.        Resolves: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=44040
7b464ab88	8b2bd5836	Tue Apr 19 15:46:27 2022 -0700	Fix small leak when loading invalid FTM signatures	commit 7b464ab882fc024e4dbdf29fc912852a7ae8337fAuthor: ragusaa <54862477+ragusaa@users.noreply.github.com>Date:   Tue Apr 19 18:46:27 2022 -0400    Fix small leak when loading invalid FTM signatures        Resolves: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=43844
9d9caf396	2d99b4979	Fri Apr 1 13:39:57 2022 -0700	Fix benign 1-byte stack buffer overwrite when loading PDB/WDB regex signatures	commit 9d9caf396ad99b19a1dfa5f61cf5f73b51c6c964Author: m-sola <msola@sourcefire.com>Date:   Fri Apr 1 16:39:57 2022 -0400    Fix benign 1-byte stack buffer overwrite when loading PDB/WDB regex signatures        The check of pattern_len against FILEBUF is largely meaningless since    pattern is derived from a strchr() call against buffer (with length FILEBUFF).        This fix ensures that the relative size is checked against max buffer size    which prevents overwriting stack memory with a single null byte.        Resolves: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=45247
76dab42a3	f82492aef	Wed Mar 2 21:44:48 2022 -0700	DB load, CRB: Fix benign heap buffer overflow	commit 76dab42a3097e1108c293e89313e7d02cfc0f9d8Author: Andy Ragusa <aragusa@cisco.com>Date:   Thu Feb 10 09:28:21 2022 -0800    DB load, CRB: Fix benign heap buffer overflow        Validate the length of the crt subject before memcpying it.    This resolves a possible multibyte heap buffer overread.    We determiend that this issue is not a vulnerability.        Fixes: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=43828
74cbfc62a	b46af5e3e	Tue Feb 22 17:46:03 2022 -0800	DB load, PDB/WDB: Fix benign stack buffer overflow	commit 74cbfc62ad07698a0ae31dfed4a7560400faa696Author: ragusaa <54862477+ragusaa@users.noreply.github.com>Date:   Tue Feb 22 20:46:03 2022 -0500    DB load, PDB/WDB: Fix benign stack buffer overflow        Corrected buffer size check in the regex signature parsing code.    This resolves a possible 1-byte stack buffer overwrite (NULL byte).    We determined that this issue is not a vulnerability.        Fixes: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=43869
ae9cac876	c5b91947c	Sat Oct 30 17:13:52 2021 -0700	Fix memory leak in zip parser error handling	commit ae9cac87619e0588d09cece1456e4aaa75c30f35Author: Micah Snyder <micasnyd@cisco.com>Date:   Thu Oct 21 13:18:29 2021 -0700    Fix memory leak in zip parser error handling        The zip parser may leak a string for a zip record filename if the    the record in the central directory is the last record.        This fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=31760        It also appears that there may be a related record filename leak if an    error occured when indexing the files in the central directory header,    but I don't have any test file for this but it was an obvious fix.
c5b91947c	985f0e9d7	Sat Oct 30 17:13:52 2021 -0700	Fix leak in email parser when using gen-json option	commit c5b91947c6cf98c6048eb98994ef2db6496158e5Author: Micah Snyder <micasnyd@cisco.com>Date:   Wed Oct 20 21:10:59 2021 -0700    Fix leak in email parser when using gen-json option        The mbox.c:messageGetFilename() function returns a COPY of the filename,    which must be free()'d.    Fixes: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=31775        Also fixed and issue where the email parser may fail to finish parsing    soem multipart emails when --gen-json is enabled if messageGetJObj() or    cli_json_addowner() fail. These should be non-fatal failures. The rest    of the (broken) email should be parsed.        The email parser (mbox.c & message.c) also has a lot of assertions    instead using if()'s for error handling.        Because of the complexity of the email parser, it's unclear for many of    the assertions if they could be triggered based on user input like    scanning a malformed email. So to be safe, I've replaced all of the    assertions in this parser with error handling to fail gracefully.        Also fix formatting issues and use `stdbool.h`'s `true` instead of `TRUE`.
bc7997142	54829910d	Fri Oct 29 14:54:56 2021 -0700	OLE2: Fix benign heap buffer overflow read	commit bc7997142ae57bbb304da72f7996736618db8ae8Author: Micah Snyder <micasnyd@cisco.com>Date:   Fri Oct 8 16:56:11 2021 -0700    OLE2: Fix benign heap buffer overflow read        A heap buffer over-read may occur in the OLE2 parser if the --gen-json    option is enabled (the CL_SCAN_GENERAL_COLLECT_METADATA scan option).        The issue occurs because a string input is not checked to verify if it    is empty (zero-byte length) prior to use.        We determined that this issue is not exploitable to cause a crash or to    do anything malicious. The overflow (er... underflow?) is 1 byte before    a malloced buffer.        This commit adds checks to the function parameters in case the original    pointer itself is NULL, and to account for conversion of an empty string.        Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=39673
d1141beca	01ca0a2ed	Fri Oct 29 12:35:15 2021 -0700	Fix fmap handle_gets() page arithmetic	commit d1141becac82099de46f94f5d7a02d60cb1baf1dAuthor: Micah Snyder <micasnyd@cisco.com>Date:   Thu Oct 28 16:58:21 2021 -0700    Fix fmap handle_gets() page arithmetic        The fixes to the fmap bounds for nested (duplicate) fmaps added recently    introduced a subtle arithmetic bug that was detected by OSS-Fuzz:        ```c    scanat = m->nested_offset + *at % m->pgsz;    ```    should have been:    ```c    scanat = (m->nested_offset + *at) % m->pgsz;    ```    Without the parenthesis, `scanat` could be > `m->pgsz`, which would    overflow in the subsequent `memchr()` call.        See:    - https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=40452    - https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=40455        This commit also tightens up some of the other bounds checks done with    `CLI_ISCONTAINED()` macro so the check limits the bounds to the nested    fmap and not the original map.        In addition, I've added a `CLI_ISCONTAINED_0_TO()` macro that removes    checks when the "bigger" buffer starts at offset 0. This should silence    a bunch of (benign) warnings and medium severity Coverity issues.        There is also a possible use of an uninitialized variable    (`old_hook_lsig_matches`) in `cli_magic_scan()`.        Finally, I also removed an unecessary NULL-check on `filebase` in    `fmap_dup_to_file()` that Coverity was unhappy with.
72b4ba9a2	3573ca810	Tue Jun 22 11:34:57 2021 -0700	fuzz-27547: fix integer overflow	commit 72b4ba9a237250c6e1ac2e9947e99180bc5a3a37Author: Micah Snyder (micasnyd) <micasnyd@cisco.com>Date:   Tue Jun 22 11:34:57 2021 -0700    fuzz-27547: fix integer overflow        Fixes a minor integer overflow report by oss-fuzz in the PE petite    packed file parser.
d9f0f030f	72d438808	Fri Jun 4 16:56:10 2021 -0700	Fix debug-mode assert-crash in mail parser	commit d9f0f030fcba339ff59d9c3a97218e2952e0c962Author: Micah Snyder (micasnyd) <micasnyd@cisco.com>Date:   Fri Jun 4 16:56:10 2021 -0700    Fix debug-mode assert-crash in mail parser        The mail parser uses asserts extensively to detect error conditions.    It's lazy error handling; good for prototyping but bad for production.        Release mode builds are fine in 0.103 with autotools and visual-    studio but cmake release builds will crash because asserts are enabled    even for release.        In particular this assert(0) is a possible error condition in a    malformed mail file and should be handled properly.        This resolves:    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=31782#c2
b119d0b3e	8632035c9	Fri Jun 4 16:48:37 2021 -0700	Mach-O: Fix undefined shift found by oss-fuzz	commit b119d0b3e309917b09665f89b1323ed93334770bAuthor: Micah Snyder (micasnyd) <micasnyd@cisco.com>Date:   Fri Jun 4 16:48:37 2021 -0700    Mach-O: Fix undefined shift found by oss-fuzz        You can't 1u32 < more than 32 bits
0c1ec30f9	7a70a03ba	Tue Apr 6 10:06:04 2021 -0700	fuzz-29504: Fix null-reference in mail parser	commit 0c1ec30f9a292b0a5eca4aaaa651150aa5712d6dAuthor: Micah Snyder (micasnyd) <micasnyd@cisco.com>Date:   Tue Apr 6 10:06:04 2021 -0700    fuzz-29504: Fix null-reference in mail parser        Fix a null-dereference read in the email parser caused by improperly    re-initializing the structure used for keeping state when scanning    messages.        Fix addresses:    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=29504
790918c6b	1cc8c2dce	Tue Mar 30 23:56:24 2021 -0700	fuzz-30038: Fix leak in PNG zlib initialization	commit 790918c6becad6ca3591bf916b32647cadbe97d3Author: Micah Snyder (micasnyd) <micasnyd@cisco.com>Date:   Tue Mar 30 23:56:24 2021 -0700    fuzz-30038: Fix leak in PNG zlib initialization        Fix a memory leak caused by improperly tracking zlib stream    initalization.        Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=30038
38622da97	8db3476df	Thu Jul 16 22:51:24 2020 -0700	Fix int64 overflow check	commit 38622da97fb6fcb2d43d5676ac75cb5ac7896359Author: lutianxiong <lutianxiong@huawei.com>Date:   Tue Jun 16 11:15:10 2020 +0800    Fix int64 overflow check        Overflow check "(value >> 32)  * 10  < INT32_MAX" may not work in    certain conditions, e.g. value is 0xcccccccdbcdc9cc        Note: This fixes oss-fuzz bug 16117.
ba6467a6a	3616f1fcb	Fri Jan 31 10:52:55 2020 -0800	Fixed memory leak reported by oss-fuzz. Added checks to see if realloc succeeds before reassigning the pointers, and made this file build without warnings when compiled with -Wextra.	commit ba6467a6a6f7d749f3011c38e76573c75676e37fAuthor: Andy Ragusa (aragusa) <aragusa@cisco.com>Date:   Fri Jan 31 10:52:55 2020 -0800    Fixed memory leak reported by oss-fuzz.    Added checks to see if realloc succeeds before reassigning the pointers,    and made this file build without warnings when compiled with -Wextra.
3616f1fcb	001836545	Fri Jan 31 10:34:58 2020 -0800	Fixed memory leak reported by oss-fuzz.	commit 3616f1fcb92dbd40ac61ecea9cf3ff1c689c6349Author: Andy Ragusa (aragusa) <aragusa@cisco.com>Date:   Fri Jan 31 10:34:58 2020 -0800    Fixed memory leak reported by oss-fuzz.
d5ec8b7a0	25ed70fb4	Thu Jan 23 18:17:36 2020 -0800	oss-fuzz - 16516 - Fix egg archive memory leak.	commit d5ec8b7a0cad607ff5c7d97319022f7ee5f844e4Author: Micah Snyder (micasnyd) <micasnyd@cisco.com>Date:   Thu Jan 23 18:17:36 2020 -0800    oss-fuzz - 16516 - Fix egg archive memory leak.
e044303b5	7c9676f43	Wed Oct 2 16:08:26 2019 -0400	oss-fuzz - fixup fixes for ole2 and macho based on review	commit e044303b5f2d2da27438873a9a0924135dcd2634Author: Mickey Sola <msola@sourcefire.com>Date:   Mon Jul 1 12:42:47 2019 -0400    oss-fuzz - fixup fixes for ole2 and macho based on review
622771bd5	2603adddb	Wed Oct 2 16:08:26 2019 -0400	oss-fuzz - 13468 - fix shift of negative value when converting from unicode	commit 622771bd58e8f9f43b8c66d3340b224b48762fa0Author: Mickey Sola <msola@sourcefire.com>Date:   Tue Mar 12 14:53:19 2019 -0400    oss-fuzz - 13468 - fix shift of negative value when converting from unicode
f5574b6f4	15167db0f	Wed Oct 2 16:08:26 2019 -0400	oss-fuzz - 13509 - fix type sizes for base64 character encoding and screnc buffer tag lengths	commit f5574b6f48ae2be0807ef6c649be94200cdae567Author: Mickey Sola <msola@sourcefire.com>Date:   Tue Mar 12 11:58:01 2019 -0400    oss-fuzz - 13509 - fix type sizes for base64 character encoding and screnc buffer tag lengths
15167db0f	74a549a08	Wed Oct 2 16:08:26 2019 -0400	oss-fuzz - 13609 - fix int overflow while reading ole2 blocks	commit 15167db0f9623fa919e9ab69265404eedf84f655Author: Mickey Sola <msola@sourcefire.com>Date:   Mon Mar 11 18:18:22 2019 -0400    oss-fuzz - 13609 - fix int overflow while reading ole2 blocks
a30884058	0f128f20b	Wed Oct 2 16:08:20 2019 -0400	oss-fuzz-issue-2317: changing LIB_FUZZING_ENGINE to LIB_FUZZING_ENGINE_DEPRECATED as temporary fix.	commit a30884058c6a958832f7db32c1de53954783d3b7Author: Micah Snyder <micasnyd@cisco.com>Date:   Tue Apr 16 10:57:18 2019 -0400    oss-fuzz-issue-2317: changing LIB_FUZZING_ENGINE to LIB_FUZZING_ENGINE_DEPRECATED as temporary fix.
