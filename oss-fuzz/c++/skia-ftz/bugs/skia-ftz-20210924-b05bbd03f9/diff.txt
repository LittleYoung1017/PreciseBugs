diff --git a/resources/sksl/errors/UndefinedSymbol.sksl b/resources/sksl/errors/UndefinedSymbol.sksl
index 68becff614..54f86c26e1 100644
--- a/resources/sksl/errors/UndefinedSymbol.sksl
+++ b/resources/sksl/errors/UndefinedSymbol.sksl
@@ -1 +1,7 @@
-void main() { x = float2(1); }
+void a() { x = float2(1); }
+void b() { float w = x; }
+void c() { float w = x, y; }
+void d() { float w = x, y = z; }
+
+float e = f, g = h;
+float i = j, k;
diff --git a/resources/sksl/errors/UsingInvalidValue.sksl b/resources/sksl/errors/UsingInvalidValue.sksl
index 79dddde4bd..705b1cd437 100644
--- a/resources/sksl/errors/UsingInvalidValue.sksl
+++ b/resources/sksl/errors/UsingInvalidValue.sksl
@@ -1,4 +1,11 @@
 int func() { return 1; }
 
-void expect_constructor_invocation() { int x = int; }
-void expect_function_call()          { int x = func; }
+void expect_constructor_invocation()                   { int x = int; }
+void expect_constructor_invocation_extra_initializer() { int x, y = int; }
+void expect_function_call()                            { int x = func; }
+void expect_function_call_extra_initializer()          { int x, y = func; }
+
+int  g_expect_constructor_invocation                       = int;
+int  g_expect_constructor_invocation_extra_initializer, ix = int;
+int  g_expect_function_call                                = func;
+int  g_expect_function_call_extra_initializer,          iy = func;
diff --git a/src/sksl/SkSLDSLParser.cpp b/src/sksl/SkSLDSLParser.cpp
index 4cf8d44aae..a704855bc3 100644
--- a/src/sksl/SkSLDSLParser.cpp
+++ b/src/sksl/SkSLDSLParser.cpp
@@ -430,7 +430,9 @@ void DSLParser::globalVarDeclarationEnd(PositionInfo pos, const dsl::DSLModifier
     if (!this->parseArrayDimensions(offset, &type)) {
         return;
     }
-    this->parseInitializer(offset, &initializer);
+    if (!this->parseInitializer(offset, &initializer)) {
+        return;
+    }
     DSLGlobalVar first(mods, type, name, std::move(initializer), pos);
     Declare(first);
     AddToSymbolTable(first);
@@ -448,7 +450,8 @@ void DSLParser::globalVarDeclarationEnd(PositionInfo pos, const dsl::DSLModifier
         if (!this->parseInitializer(offset, &anotherInitializer)) {
             return;
         }
-        DSLGlobalVar next(mods, type, this->text(identifierName), std::move(anotherInitializer));
+        DSLGlobalVar next(mods, type, this->text(identifierName), std::move(anotherInitializer),
+                          this->position(offset));
         Declare(next);
         AddToSymbolTable(next, this->position(identifierName));
     }
@@ -466,7 +469,9 @@ DSLStatement DSLParser::localVarDeclarationEnd(PositionInfo pos, const dsl::DSLM
     if (!this->parseArrayDimensions(offset, &type)) {
         return {};
     }
-    this->parseInitializer(offset, &initializer);
+    if (!this->parseInitializer(offset, &initializer)) {
+        return {};
+    }
     DSLVar first(mods, type, name, std::move(initializer), pos);
     DSLStatement result = Declare(first);
     AddToSymbolTable(first);
@@ -484,7 +489,8 @@ DSLStatement DSLParser::localVarDeclarationEnd(PositionInfo pos, const dsl::DSLM
         if (!this->parseInitializer(offset, &anotherInitializer)) {
             return result;
         }
-        DSLVar next(mods, type, this->text(identifierName), std::move(anotherInitializer));
+        DSLVar next(mods, type, this->text(identifierName), std::move(anotherInitializer),
+                    this->position(offset));
         DSLWriter::AddVarDeclaration(result, next);
         AddToSymbolTable(next, this->position(identifierName));
     }
diff --git a/src/sksl/dsl/priv/DSLWriter.cpp b/src/sksl/dsl/priv/DSLWriter.cpp
index 11ad426215..5fc10abe98 100644
--- a/src/sksl/dsl/priv/DSLWriter.cpp
+++ b/src/sksl/dsl/priv/DSLWriter.cpp
@@ -138,13 +138,15 @@ void DSLWriter::AddVarDeclaration(DSLStatement& existing, DSLVar& additional) {
         SkSL::Block& block = existing.fStatement->as<Block>();
         SkASSERT(!block.isScope());
         block.children().push_back(Declare(additional).release());
-    } else {
-        SkASSERT(existing.fStatement->is<VarDeclaration>());
+    } else if (existing.fStatement->is<VarDeclaration>()) {
         StatementArray stmts;
         stmts.reserve_back(2);
         stmts.push_back(std::move(existing.fStatement));
         stmts.push_back(Declare(additional).release());
         existing.fStatement = SkSL::Block::MakeUnscoped(/*offset=*/-1, std::move(stmts));
+    } else if (existing.fStatement->isEmpty()) {
+        // If the variable declaration generated an error, we can end up with a Nop statement here.
+        existing.fStatement = Declare(additional).release();
     }
 }
 
diff --git a/tests/sksl/errors/Ossfuzz38865.glsl b/tests/sksl/errors/Ossfuzz38865.glsl
index 1b8be41048..a9745e4903 100644
--- a/tests/sksl/errors/Ossfuzz38865.glsl
+++ b/tests/sksl/errors/Ossfuzz38865.glsl
@@ -1,5 +1,4 @@
 ### Compilation failed:
 
 error: 1: expected expression, but found ''
-error: 1: expected ';', but found ''
-2 errors
+1 error
diff --git a/tests/sksl/errors/Ossfuzz38944.glsl b/tests/sksl/errors/Ossfuzz38944.glsl
index 1b8be41048..a9745e4903 100644
--- a/tests/sksl/errors/Ossfuzz38944.glsl
+++ b/tests/sksl/errors/Ossfuzz38944.glsl
@@ -1,5 +1,4 @@
 ### Compilation failed:
 
 error: 1: expected expression, but found ''
-error: 1: expected ';', but found ''
-2 errors
+1 error
diff --git a/tests/sksl/errors/UndefinedSymbol.glsl b/tests/sksl/errors/UndefinedSymbol.glsl
index 29a0a6e333..923a1790c5 100644
--- a/tests/sksl/errors/UndefinedSymbol.glsl
+++ b/tests/sksl/errors/UndefinedSymbol.glsl
@@ -1,4 +1,11 @@
 ### Compilation failed:
 
 error: 1: unknown identifier 'x'
-1 error
+error: 2: unknown identifier 'x'
+error: 3: unknown identifier 'x'
+error: 4: unknown identifier 'x'
+error: 4: unknown identifier 'z'
+error: 6: unknown identifier 'f'
+error: 6: unknown identifier 'h'
+error: 7: unknown identifier 'j'
+8 errors
diff --git a/tests/sksl/errors/UsingInvalidValue.glsl b/tests/sksl/errors/UsingInvalidValue.glsl
index dd7943fe03..7362c0e799 100644
--- a/tests/sksl/errors/UsingInvalidValue.glsl
+++ b/tests/sksl/errors/UsingInvalidValue.glsl
@@ -1,5 +1,11 @@
 ### Compilation failed:
 
 error: 3: expected '(' to begin constructor invocation
-error: 4: expected '(' to begin function call
-2 errors
+error: 4: expected '(' to begin constructor invocation
+error: 5: expected '(' to begin function call
+error: 6: expected '(' to begin function call
+error: 8: expected '(' to begin constructor invocation
+error: 9: expected '(' to begin constructor invocation
+error: 10: expected '(' to begin function call
+error: 11: expected '(' to begin function call
+8 errors
