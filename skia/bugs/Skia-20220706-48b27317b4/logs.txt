commit 48b27317b475d5c16a5f90d4d1f384a42daa0ecb
Author: John Stiles <johnstiles@google.com>
Date:   Wed Jul 6 09:38:41 2022 -0400

    Fix fuzzer-discovered error with range checks.
    
    The fuzzer managed to create a NaN using a carefully-crafted mix of
    intrinsics and constant folding. (`cosh(421)` is a very large double,
    which becomes +Inf when cast to float, which is then multiplied by 0;
    zero times infinity is NaN.)
    
    Our code which checked to see if a value is in range of an int did not
    consider NaNs and their always-false behavior, so it incorrectly
    decided that NaN was in range. This CL reverses the check so that a NaN
    will not pass, but all other values will behave the same.
    
    Followup CLs should probably also tighten up the folding/optimizer
    behavior so that NaNs/Infs are not created at all.
    
    Change-Id: Idd2b0447ebe115e00bdba63ca7ff655f6c902fc6
    Bug: oss-fuzz:48592
    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/555009
    Commit-Queue: John Stiles <johnstiles@google.com>
    Auto-Submit: John Stiles <johnstiles@google.com>
    Reviewed-by: Brian Osman <brianosman@google.com>
    Commit-Queue: Brian Osman <brianosman@google.com>
