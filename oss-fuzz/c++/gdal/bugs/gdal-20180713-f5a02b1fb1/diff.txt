diff --git a/gdal/gcore/gdaldataset.cpp b/gdal/gcore/gdaldataset.cpp
index 4cd773635e..aa2c58ccb4 100644
--- a/gdal/gcore/gdaldataset.cpp
+++ b/gdal/gcore/gdaldataset.cpp
@@ -40,6 +40,7 @@
 #include <map>
 #include <new>
 #include <string>
+#include <unordered_set>
 #include <utility>
 
 #include "cpl_conv.h"
@@ -2696,22 +2697,25 @@ GDALDatasetH CPL_STDCALL GDALOpenEx( const char *pszFilename,
     oOpenInfo.papszAllowedDrivers = papszAllowedDrivers;
 
     // Prevent infinite recursion.
+    struct AntiRecursionStruct
     {
-        int *pnRecCount =
-            static_cast<int *>(CPLGetTLS(CTLS_GDALDATASET_REC_PROTECT_MAP));
-        if( pnRecCount == nullptr )
-        {
-            pnRecCount = static_cast<int *>(CPLMalloc(sizeof(int)));
-            *pnRecCount = 0;
-            CPLSetTLS(CTLS_GDALDATASET_REC_PROTECT_MAP, pnRecCount, TRUE);
-        }
-        if( *pnRecCount == 100 )
-        {
-            CPLError(CE_Failure, CPLE_AppDefined,
-                     "GDALOpen() called with too many recursion levels");
-            return nullptr;
-        }
-        (*pnRecCount)++;
+        std::unordered_set<std::string> aosDatasetNames{};
+        int nRecLevel = 0;
+    };
+    static thread_local AntiRecursionStruct sAntiRecursion;
+    if( sAntiRecursion.nRecLevel == 100 )
+    {
+        CPLError(CE_Failure, CPLE_AppDefined,
+                    "GDALOpen() called with too many recursion levels");
+        return nullptr;
+    }
+    if( sAntiRecursion.aosDatasetNames.find(
+            std::string(pszFilename)) !=
+                sAntiRecursion.aosDatasetNames.end() )
+    {
+        CPLError(CE_Failure, CPLE_AppDefined,
+                    "GDALOpen() called with recursively");
+        return nullptr;
     }
 
     // Remove leading @ if present.
@@ -2752,6 +2756,11 @@ GDALDatasetH CPL_STDCALL GDALOpenEx( const char *pszFilename,
             (nOpenFlags & GDAL_OF_RASTER) == 0 &&
             poDriver->GetMetadataItem(GDAL_DCAP_VECTOR) == nullptr )
             continue;
+        if( poDriver->pfnOpen == nullptr &&
+            poDriver->pfnOpenWithDriverArg == nullptr )
+        {
+            continue;
+        }
 
         // Remove general OVERVIEW_LEVEL open options from list before passing
         // it to the driver, if it isn't a driver specific option already.
@@ -2787,6 +2796,9 @@ GDALDatasetH CPL_STDCALL GDALOpenEx( const char *pszFilename,
         CPLErrorReset();
 #endif
 
+        sAntiRecursion.nRecLevel ++;
+        sAntiRecursion.aosDatasetNames.insert(std::string(pszFilename));
+
         GDALDataset *poDS = nullptr;
         if ( poDriver->pfnOpen != nullptr )
         {
@@ -2800,13 +2812,9 @@ GDALDatasetH CPL_STDCALL GDALOpenEx( const char *pszFilename,
         {
             poDS = poDriver->pfnOpenWithDriverArg(poDriver, &oOpenInfo);
         }
-        else
-        {
-            CSLDestroy(papszTmpOpenOptions);
-            CSLDestroy(papszTmpOpenOptionsToValidate);
-            oOpenInfo.papszOpenOptions = papszOpenOptionsCleaned;
-            continue;
-        }
+
+        sAntiRecursion.nRecLevel --;
+        sAntiRecursion.aosDatasetNames.erase(std::string(pszFilename));
 
         CSLDestroy(papszTmpOpenOptions);
         CSLDestroy(papszTmpOpenOptionsToValidate);
@@ -2845,11 +2853,6 @@ GDALDatasetH CPL_STDCALL GDALOpenEx( const char *pszFilename,
                 poDS->AddToDatasetOpenList();
             }
 
-            int *pnRecCount =
-                static_cast<int *>(CPLGetTLS(CTLS_GDALDATASET_REC_PROTECT_MAP));
-            if( pnRecCount )
-                (*pnRecCount)--;
-
             if( nOpenFlags & GDAL_OF_SHARED )
             {
                 if (strcmp(pszFilename, poDS->GetDescription()) != 0)
@@ -2910,11 +2913,6 @@ GDALDatasetH CPL_STDCALL GDALOpenEx( const char *pszFilename,
 #else
         if( CPLGetLastErrorNo() != 0 && CPLGetLastErrorType() > CE_Warning)
         {
-            int *pnRecCount =
-                static_cast<int *>(CPLGetTLS(CTLS_GDALDATASET_REC_PROTECT_MAP));
-            if( pnRecCount )
-                (*pnRecCount)--;
-
             CSLDestroy(papszOpenOptionsCleaned);
             return nullptr;
         }
@@ -2947,11 +2945,6 @@ GDALDatasetH CPL_STDCALL GDALOpenEx( const char *pszFilename,
         }
     }
 
-    int *pnRecCount =
-        static_cast<int *>(CPLGetTLS(CTLS_GDALDATASET_REC_PROTECT_MAP));
-    if( pnRecCount )
-        (*pnRecCount)--;
-
     return nullptr;
 }
 
diff --git a/gdal/port/cpl_multiproc.h b/gdal/port/cpl_multiproc.h
index eaba6c3d7b..cf214f2082 100644
--- a/gdal/port/cpl_multiproc.h
+++ b/gdal/port/cpl_multiproc.h
@@ -207,7 +207,7 @@ class CPL_DLL CPLLockHolder
 #define CTLS_CSVTABLEPTR                 3         /* cpl_csv.cpp */
 #define CTLS_CSVDEFAULTFILENAME          4         /* cpl_csv.cpp */
 #define CTLS_ERRORCONTEXT                5         /* cpl_error.cpp */
-#define CTLS_GDALDATASET_REC_PROTECT_MAP 6        /* gdaldataset.cpp */
+/* 6: unused */
 #define CTLS_PATHBUF                     7         /* cpl_path.cpp */
 #define CTLS_ABSTRACTARCHIVE_SPLIT       8         /* cpl_vsil_abstract_archive.cpp */
 #define CTLS_UNUSED4                     9
