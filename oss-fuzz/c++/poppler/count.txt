e885124a	cd999897	Fri Jun 16 11:01:41 2023 +0200	utf8ToUtf16(): fix out-of-bounds write	commit e885124ab3b071b7fbb2f001e4a9a88b7e758605Author: Even Rouault <even.rouault@spatialys.com>Date:   Thu Jun 15 20:25:24 2023 +0200    utf8ToUtf16(): fix out-of-bounds write        Fixes a regression introduced by recent    9183da4fcb8d06360ed51f7f1131a14300008735 commit which caused the    following Valgrind error:        ```    $ valgrind utils/pdftoppm /tmp/test.pdf    ==3735668== Memcheck, a memory error detector    ==3735668== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.    ==3735668== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info    ==3735668== Command: utils/pdftoppm /tmp/test.pdf    ==3735668==    Syntax Warning: May not be a PDF file (continuing anyway)    Syntax Error: Unterminated string    ==3735668== Invalid write of size 2    ==3735668==    at 0x4A3570C: utf8ToUtf16(char const*, unsigned short*, int, int) (poppler/UTF.cc:353)    ==3735668==    by 0x4A3584C: utf8ToUtf16(char const*, int*) (poppler/UTF.cc:368)    ==3735668==    by 0x4A358D4: utf8ToUtf16WithBom(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (poppler/UTF.cc:379)    ==3735668==    by 0x49F2C97: Lexer::getObj(int) (poppler/Lexer.cc:424)    ==3735668==    by 0x4A035C2: Parser::Parser(XRef*, Stream*, bool) (poppler/Parser.cc:50)    ==3735668==    by 0x49F888B: Linearization::Linearization(BaseStream*) (poppler/Linearization.cc:28)    ==3735668==    by 0x4A06D8D: getLinearization (poppler/PDFDoc.cc:648)    ==3735668==    by 0x4A06D8D: PDFDoc::isLinearized(bool) (poppler/PDFDoc.cc:700)    ==3735668==    by 0x4A0518D: PDFDoc::getStartXRef(bool) (poppler/PDFDoc.cc:2003)    ==3735668==    by 0x4A04BB8: PDFDoc::setup(std::optional<GooString> const&, std::optional<GooString> const&, std::function<void ()> const&) (poppler/PDFDoc.cc:246)    ==3735668==    by 0x4A04AAB: PDFDoc::PDFDoc(std::unique_ptr<GooString, std::default_delete<GooString> >&&, std::optional<GooString> const&, std::optional<GooString> const&, void*, std::function<void ()> const&) (poppler/PDFDoc.cc:160)    ==3735668==    by 0x49F93EA: LocalPDFDocBuilder::buildPDFDoc(GooString const&, std::optional<GooString> const&, std::optional<GooString> const&, void*) (poppler/LocalPDFDocBuilder.cc:0)    ==3735668==    by 0x4A1FBB5: PDFDocFactory::createPDFDoc(GooString const&, std::optional<GooString> const&, std::optional<GooString> const&, void*) (poppler/PDFDocFactory.cc:62)    ==3735668==  Address 0x669cf54 is 0 bytes after a block of size 148 alloc'd    ==3735668==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)    ==3735668==    by 0x4A35815: gmalloc (goo/gmem.h:44)    ==3735668==    by 0x4A35815: gmallocn (goo/gmem.h:121)    ==3735668==    by 0x4A35815: utf8ToUtf16(char const*, int*) (poppler/UTF.cc:367)    ==3735668==    by 0x4A358D4: utf8ToUtf16WithBom(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (poppler/UTF.cc:379)    ==3735668==    by 0x49F2C97: Lexer::getObj(int) (poppler/Lexer.cc:424)    ==3735668==    by 0x4A035C2: Parser::Parser(XRef*, Stream*, bool) (poppler/Parser.cc:50)    ==3735668==    by 0x49F888B: Linearization::Linearization(BaseStream*) (poppler/Linearization.cc:28)    ==3735668==    by 0x4A06D8D: getLinearization (poppler/PDFDoc.cc:648)    ==3735668==    by 0x4A06D8D: PDFDoc::isLinearized(bool) (poppler/PDFDoc.cc:700)    ==3735668==    by 0x4A0518D: PDFDoc::getStartXRef(bool) (poppler/PDFDoc.cc:2003)    ==3735668==    by 0x4A04BB8: PDFDoc::setup(std::optional<GooString> const&, std::optional<GooString> const&, std::function<void ()> const&) (poppler/PDFDoc.cc:246)    ==3735668==    by 0x4A04AAB: PDFDoc::PDFDoc(std::unique_ptr<GooString, std::default_delete<GooString> >&&, std::optional<GooString> const&, std::optional<GooString> const&, void*, std::function<void ()> const&) (poppler/PDFDoc.cc:160)    ==3735668==    by 0x49F93EA: LocalPDFDocBuilder::buildPDFDoc(GooString const&, std::optional<GooString> const&, std::optional<GooString> const&, void*) (poppler/LocalPDFDocBuilder.cc:0)    ==3735668==    by 0x4A1FBB5: PDFDocFactory::createPDFDoc(GooString const&, std::optional<GooString> const&, std::optional<GooString> const&, void*) (poppler/PDFDocFactory.cc:62)    ```        Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=59840
ac5cc024	d5d23b3b	Sun Mar 26 23:37:42 2023 +0200	Fix leak when calling addAnnot on malformed files	commit ac5cc0244f1131687f7699115e3c1be415c55409Author: Albert Astals Cid <aacid@kde.org>Date:   Sun Mar 26 23:37:42 2023 +0200    Fix leak when calling addAnnot on malformed files        oss-fuzz/57464
78e93913	a89c3c27	Mon Aug 1 21:33:53 2022 +0200	Fix infinite recursion in broken files	commit 78e939131f868e3ea6541ee1c096d82cd548e706Author: Albert Astals Cid <aacid@kde.org>Date:   Mon Aug 1 21:33:25 2022 +0200    Fix infinite recursion in broken files        oss-fuzz/49702
cb1f2a68	8f874169	Fri Jul 29 20:59:28 2022 +0200	JBIG2Stream: Fix crash on broken files	commit cb1f2a685461b60e05d503165d05ea6c557ff277Author: Albert Astals Cid <aacid@kde.org>Date:   Fri Jul 29 20:59:28 2022 +0200    JBIG2Stream: Fix crash on broken files        oss-fuzz/49406
4139f79c	4eeb3380	Fri May 13 01:31:59 2022 +0200	TextPage::coalesce: Fix crash on broken files	commit 4139f79cf8c4e3f529570c9a300491c36f9100e8Author: Albert Astals Cid <aacid@kde.org>Date:   Fri May 13 01:31:00 2022 +0200    TextPage::coalesce: Fix crash on broken files        oss-fuzz/47350
27672cc0	09db9f0d	Sun May 8 22:46:19 2022 +0000	JBIGStream: Fix unint memory read on broken files	commit 27672cc02a6dd07849bf83a298597e083831ec49Author: Albert Astals Cid <aacid@kde.org>Date:   Wed May 4 23:25:49 2022 +0200    JBIGStream: Fix unint memory read on broken files        oss-fuzz/47224
6a4bbacb	7ff9c784	Thu Apr 14 01:23:55 2022 +0200	Fix crash in very badly damaged documents when adding a freetext annotation	commit 6a4bbacbfa0c914162ffb23cc759a9adafc9e295Author: Albert Astals Cid <aacid@kde.org>Date:   Thu Apr 14 01:23:55 2022 +0200    Fix crash in very badly damaged documents when adding a freetext annotation        oss-fuzz/46497
f51d2519	c92e079e	Thu Aug 26 07:09:13 2021 +0000	SplashOutputDev::drawImage(): Fix abort() in failed gmallocn	commit f51d2519590369107c27d0f3a078819e1df889fbAuthor: Even Rouault <even.rouault@spatialys.com>Date:   Wed Aug 25 21:52:26 2021 +0200    SplashOutputDev::drawImage(): Fix abort() in failed gmallocn        Fail following crash on reproducer test case of    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=27810        Crash stack on ``pdftoppm -png clusterfuzz-testcase-minimized-gdal_fuzzer-5753490332450816.fuzz`` is:    ```    0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50    1  0x00007ffff7746859 in __GI_abort () at abort.c:79    2  0x00007ffff7cff44e in gmallocn (count=count@entry=1073741824, size=size@entry=3, checkoverflow=checkoverflow@entry=false) at /home/even/poppler/goo/gmem.h:116    3  0x00007ffff7e584d4 in SplashOutputDev::drawImage (this=0x5555555b6b00, state=0x5555555bb360, ref=<optimized out>, str=0x5555555dc6e0, width=19, height=<optimized out>, colorMap=0x7fffffffd2c0,       interpolate=false, maskColors=0x0, inlineImg=false) at /home/even/poppler/poppler/SplashOutputDev.cc:3286    4  0x00007ffff7d764a6 in Gfx::doImage (this=this@entry=0x5555555b9460, ref=ref@entry=0x7fffffffd820, str=<optimized out>, inlineImg=inlineImg@entry=false) at /home/even/poppler/poppler/Gfx.cc:4563    5  0x00007ffff7d773ca in Gfx::opXObject (this=0x5555555b9460, args=<optimized out>, numArgs=<optimized out>) at /home/even/poppler/poppler/Gfx.cc:4105    6  0x00007ffff7d70dc7 in Gfx::go (this=this@entry=0x5555555b9460, topLevel=topLevel@entry=true) at /home/even/poppler/poppler/Gfx.cc:681      0x00007ffff7d711f5 in Gfx::display (this=this@entry=0x5555555b9460, obj=obj@entry=0x7fffffffdc00, topLevel=topLevel@entry=true) at /home/even/poppler/poppler/Gfx.cc:642    8  0x00007ffff7dd2758 in Page::displaySlice (this=0x5555555b5ff0, out=0x5555555b6b00, hDPI=<optimized out>, vDPI=<optimized out>, rotate=<optimized out>, useMediaBox=<optimized out>,       crop=<optimized out>, sliceX=<optimized out>, sliceY=0, sliceW=230, sliceH=230, printing=false, abortCheckCbk=0x0, abortCheckCbkData=0x0,       annotDisplayDecideCbk=0x55555555a110 <<lambda(Annot*, void*)>::_FUN(Annot *, void *)>, annotDisplayDecideCbkData=0x0, copyXRef=false) at /home/even/poppler/poppler/Page.cc:576    9  0x000055555555a633 in savePageSlice (doc=<optimized out>, splashOut=0x5555555b6b00, pg=1, x=<optimized out>, y=<optimized out>, w=<optimized out>, h=<optimized out>, pg_w=<optimized out>,       pg_h=<optimized out>, ppmFile=0x0) at /home/even/poppler/utils/pdftoppm.cc:288    10 0x0000555555559232 in main (argc=<optimized out>, argv=<optimized out>) at /home/even/poppler/utils/pdftoppm.cc:684    ```
eea6b4f9	5977890b	Sat Jul 10 23:59:35 2021 +0200	AnnotAppearanceBuilder::drawListBox: Fix memory leak on error condition	commit eea6b4f9caa7555009d959de51acb81037b2a465Author: Albert Astals Cid <aacid@kde.org>Date:   Sat Jul 10 23:59:35 2021 +0200    AnnotAppearanceBuilder::drawListBox: Fix memory leak on error condition        oss-fuzz/35996
2ed4cd66	d7aa275b	Wed Apr 7 00:20:40 2021 +0200	TextOutputDev: Fix crash in malformed file	commit 2ed4cd66401bc1d9683c94238e9024218d7be3baAuthor: Albert Astals Cid <aacid@kde.org>Date:   Wed Apr 7 00:14:59 2021 +0200    TextOutputDev: Fix crash in malformed file        oss-fuzz/32952
c72a1c31	2589f325	Mon Feb 8 00:02:11 2021 +0100	PSOutputDev: Fix stack overflow in broken files	commit c72a1c31b40322f660b6529e2dab077d3bf7b79bAuthor: Albert Astals Cid <aacid@kde.org>Date:   Sun Feb 7 23:47:52 2021 +0100    PSOutputDev: Fix stack overflow in broken files        oss-fuzz/29909
6fed4c9f	051cae3b	Sat Jan 16 12:33:14 2021 +0100	FoFiTrueType::cvtSfnts: Fix uninitialized memory read on broken files	commit 6fed4c9ff25fd99e164c94519128803db0593e96Author: Albert Astals Cid <aacid@kde.org>Date:   Sat Jan 16 12:31:36 2021 +0100    FoFiTrueType::cvtSfnts: Fix uninitialized memory read on broken files        Initialize maxUsedGlyph after the early check returns        oss-fuzz/29629
d776dafb	4becde57	Fri Jan 15 23:50:48 2021 +0100	Splash: fix uninitialized memory read on broken files	commit d776dafbd40e75f35d6a6fc6cb012f158ee1409dAuthor: Albert Astals Cid <aacid@kde.org>Date:   Fri Jan 15 16:41:25 2021 +0100    Splash: fix uninitialized memory read on broken files        oss-fuzz/23086
4becde57	c0f34e98	Fri Jan 15 16:08:15 2021 +0100	CCITTFaxStream: Fix uninitialized memory read in broken files	commit 4becde57a2fdfd095e400dd9ef64e64d5e94f858Author: Albert Astals Cid <aacid@kde.org>Date:   Fri Jan 15 16:08:15 2021 +0100    CCITTFaxStream: Fix uninitialized memory read in broken files        oss-fuzz/8795
548fe49f	3252bc32	Fri Jan 15 16:01:01 2021 +0100	Gfx::opSetFillRGBColor: Fix uninitialized memory read in bad files	commit 548fe49fa53ff0ff63bc1a437ab04908f866cb87Author: Albert Astals Cid <aacid@kde.org>Date:   Fri Jan 15 16:01:01 2021 +0100    Gfx::opSetFillRGBColor: Fix uninitialized memory read in bad files        Make sure colorspace doesn't need more comps than we have        oss-fuzz/29522
fec79bfc	e68410e3	Sun Jan 10 19:45:23 2021 +0100	FoFiTrueType::cvtSfnts: Fix uninitialized memory read on broken files	commit fec79bfc7ed1573a8d92ac77bcb225dd032db296Author: Albert Astals Cid <aacid@kde.org>Date:   Sun Jan 10 19:45:23 2021 +0100    FoFiTrueType::cvtSfnts: Fix uninitialized memory read on broken files        oss-fuzz/29386
2308e6fb	04035f91	Fri Jan 8 13:55:40 2021 +0100	Fix uninitialized memory read on broken files	commit 2308e6fbb6f5afa20bb59ef3378fdb63de74c436Author: Albert Astals Cid <aacid@kde.org>Date:   Fri Jan 8 13:55:40 2021 +0100    Fix uninitialized memory read on broken files        oss-fuzz/10059
562770a7	5c28b47b	Thu Jan 7 00:04:25 2021 +0100	PSOutputDev: Fix memory leak on broken files	commit 562770a741b9613b4e015b60e60d6ced1ac8926bAuthor: Albert Astals Cid <aacid@kde.org>Date:   Thu Jan 7 00:04:25 2021 +0100    PSOutputDev: Fix memory leak on broken files        oss-fuzz/29330
5c28b47b	2b822714	Wed Jan 6 12:08:39 2021 +0100	Fix leak introduced in 0e6c3ff9bb4390d2b426a4cddbb638c19811055d	commit 5c28b47bb4e89d10f82d80d3664384149f8f768dAuthor: Albert Astals Cid <aacid@kde.org>Date:   Wed Jan 6 12:08:39 2021 +0100    Fix leak introduced in 0e6c3ff9bb4390d2b426a4cddbb638c19811055d        oss-fuzz/29305
2b822714	d0497325	Wed Jan 6 00:06:37 2021 +0100	JBIG2Stream::readTextRegion: Fix yet another potential integer overflow	commit 2b82271415000e776b54f0214d564d28170d9c6bAuthor: Albert Astals Cid <aacid@kde.org>Date:   Wed Jan 6 00:06:03 2021 +0100    JBIG2Stream::readTextRegion: Fix yet another potential integer overflow        oss-fuzz/27783
6c9f9a49	d5ac5a3a	Tue Jan 5 13:11:31 2021 +0100	FoFiType1C::cvtGlyph: Fix uninitialized memory read on broken files	commit 6c9f9a491a221fb1fccfe758bc92308ff1a692d1Author: Albert Astals Cid <aacid@kde.org>Date:   Tue Jan 5 13:10:30 2021 +0100    FoFiType1C::cvtGlyph: Fix uninitialized memory read on broken files        oss-fuzz/29269
43126be5	8f599d8c	Sun Jan 3 22:34:58 2021 +0100	PSOutputDev: Fix memory leak on broken files	commit 43126be585e587f6f571a0170f0f63098b82d064Author: Albert Astals Cid <aacid@kde.org>Date:   Sun Jan 3 22:33:30 2021 +0100    PSOutputDev: Fix memory leak on broken files        oss-fuzz/29201
bc6acbff	af267b33	Sun Jan 3 19:20:45 2021 +0100	PSOutputDev: fix a few integer overflows	commit bc6acbfff6afa7d720abe7f79abe02e5a6591ef4Author: Albert Astals Cid <aacid@kde.org>Date:   Sun Jan 3 19:20:45 2021 +0100    PSOutputDev: fix a few integer overflows        Now that we have oss-fuzz coverage i guess more will be coming soon ^_^        oss-fuzz/29199
3fb0f4bd	43944093	Sun Dec 27 19:41:15 2020 +0100	Fix integer overflow with broken files	commit 3fb0f4bdff02ccd178ba9fd58c449001c8b5c0eaAuthor: Albert Astals Cid <aacid@kde.org>Date:   Sun Dec 27 19:41:15 2020 +0100    Fix integer overflow with broken files        oss-fuzz/29020
629d8aa1	1c0c2ce5	Wed Dec 23 00:01:46 2020 +0100	GfxCIDFont::GfxCIDFont: Fix Integer-overflow on broken files	commit 629d8aa142c27a36cb2cd123c8391bcfbd3f3e23Author: Albert Astals Cid <aacid@kde.org>Date:   Wed Dec 23 00:01:46 2020 +0100    GfxCIDFont::GfxCIDFont: Fix Integer-overflow on broken files        oss-fuzz/28884
c38694ae	407293bf	Thu Dec 17 18:38:28 2020 +0000	Fix integer overflow on broken files	commit c38694aed09336232757316321d2fa84c5f2bf57Author: Albert Astals Cid <aacid@kde.org>Date:   Thu Dec 17 19:36:05 2020 +0100    Fix integer overflow on broken files        oss-fuzz/28749
ac9e14b9	acf4c8e1	Sat Dec 12 18:26:39 2020 +0000	SplashOutputDev: Fix crash on broken files	commit ac9e14b9eca50ec3ff25b2cdb4c97e3728ff1f47Author: Albert Astals Cid <aacid@kde.org>Date:   Sat Dec 12 19:25:41 2020 +0100    SplashOutputDev: Fix crash on broken files        oss-fuzz/28582
751deb8a	306df53b	Sun Nov 29 00:03:26 2020 +0100	XRef::removeIndirectObject: Fix overflow of gen	commit 751deb8ae3df1bc316fa17c83ca573233586b41fAuthor: Albert Astals Cid <aacid@kde.org>Date:   Sun Nov 29 00:01:48 2020 +0100    XRef::removeIndirectObject: Fix overflow of gen        Also make the check in XRef::addIndirectObject that looks for a free and    usable entry a bit more robust (!= to <) than 65535        oss-fuzz/28032
306df53b	d8fb21b7	Sat Nov 28 20:59:25 2020 +0100	Fix abort when searching for "bad" label names	commit 306df53be898aaebdbd5cd99947e4baef54ac1ebAuthor: Albert Astals Cid <aacid@kde.org>Date:   Sat Nov 28 20:59:25 2020 +0100    Fix abort when searching for "bad" label names        Give wstring_convert a error string so it does throw an exception when    it fails        oss-fuzz/28002
c48f469c	bce14c78	Sat Nov 28 00:55:49 2020 +0100	qt5: Fix division by 0 in broken files	commit c48f469cd6755fb9fea7870d6b64aaf891cb2012Author: Albert Astals Cid <aacid@kde.org>Date:   Sat Nov 28 00:55:49 2020 +0100    qt5: Fix division by 0 in broken files        oss-fuzz/27983
bce14c78	691866a3	Sat Nov 28 00:34:52 2020 +0100	Fix crash in XRef::removeDocInfo() if Info is not a ref	commit bce14c781b8066ad7e55020e8e2ade5363856854Author: Albert Astals Cid <aacid@kde.org>Date:   Sat Nov 28 00:34:52 2020 +0100    Fix crash in XRef::removeDocInfo() if Info is not a ref        oss-fuzz/27968
c67bd3fa	3d9dab78	Thu Oct 15 14:18:56 2020 +0200	Fix uninitialized memory read on broken files	commit c67bd3fafe0cff41855b4a2fdf7a3eb98a05ea3eAuthor: Albert Astals Cid <aacid@kde.org>Date:   Thu Oct 15 14:18:56 2020 +0200    Fix uninitialized memory read on broken files        oss-fuzz/26264
c4771352	92ebc641	Sat Sep 5 21:26:37 2020 +0200	addStrokeAdjustHint(): fix crash in out-of-memory situation.	commit c47713528f770ac89c90d662aae72c7e48c9497bAuthor: Albert Astals Cid <aacid@kde.org>Date:   Sat Sep 5 21:26:37 2020 +0200    addStrokeAdjustHint(): fix crash in out-of-memory situation.        Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=25411            #0 0xf7ef8f19 in [vdso]        #1 0xf7ccdd08 in gsignal (/lib32/libc.so.6+0x2bd08)        #2 0xf7ccf206 in abort (/lib32/libc.so.6+0x2d206)        #3 0xbdb9c2e in grealloc(void*, unsigned int, bool) gdal/poppler/goo/gmem.h:85:5        #4 0xbdd9e11 in greallocn(void*, int, int, bool, bool) gdal/poppler/goo/gmem.h:171:12        #5 0xc012373 in SplashPath::addStrokeAdjustHint(int, int, int, int) gdal/poppler/splash/SplashPath.cc:211:35        #6 0xbfd156f in Splash::makeStrokePath(SplashPath*, double, bool) gdal/poppler/splash/Splash.cc:5987:34        #7 0xbfcaec2 in Splash::strokeWide(SplashPath*, double) gdal/poppler/splash/Splash.cc:2028:13        #8 0xbfc8a4d in Splash::stroke(SplashPath*) /src/gdal/poppler/splash/Splash.cc        Based on patch by Even Rouault
ebb77e7a	1460bb96	Sun Jun 21 22:05:55 2020 +0000	Fix infinite loop in broken file	commit ebb77e7a1fbb83c3ab7f9cd948d950bb5243f7c3Author: Albert Astals Cid <aacid@kde.org>Date:   Wed Jun 17 22:39:47 2020 +0200    Fix infinite loop in broken file        oss-fuzz/23515
4382264f	5c601c40	Sun Mar 22 12:32:02 2020 +0100	Fix leak in broken files	commit 4382264f1b96e6ad6c9e481e4ceae3c22dbcd2f3Author: Albert Astals Cid <aacid@kde.org>Date:   Sun Mar 22 12:32:02 2020 +0100    Fix leak in broken files        oss-fuzz/21330
69d86f90	b0a3356f	Tue Feb 19 15:20:38 2019 +0000	TextOutputDev: Fix assert in broken file	commit 69d86f90e30785a0db76d3898914de4c0782b947Author: Albert Astals Cid <aacid@kde.org>Date:   Tue Feb 19 16:18:48 2019 +0100    TextOutputDev: Fix assert in broken file        oss-fuzz/13203
f2493d53	a6427ea6	Fri Jan 25 19:49:54 2019 +0100	SampledFunction: Fix uninitialized memory read	commit f2493d53a70e10ea69bd147c48be7c8544979436Author: Albert Astals Cid <aacid@kde.org>Date:   Fri Jan 25 19:49:54 2019 +0100    SampledFunction: Fix uninitialized memory read        oss-fuzz/12608
a6427ea6	7486e499	Fri Jan 25 07:37:46 2019 +0100	Fix ofz-8438	commit a6427ea6df68eb20e1970ddaf4017ba9a04e737aAuthor: Vincent Le Garrec <legarrec.vincent@gmail.com>Date:   Fri Jan 25 07:37:46 2019 +0100    Fix ofz-8438        https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=8438
653d7437	7f87dc10	Thu Dec 27 17:53:53 2018 +0100	JBIG2Stream: Fix uninitialized memory read on broken files	commit 653d743771ed778e46be8c14cccf4fb7e2205b74Author: Albert Astals Cid <aacid@kde.org>Date:   Thu Dec 27 17:53:53 2018 +0100    JBIG2Stream: Fix uninitialized memory read on broken files        fixes oss-fuzz/12243
6e7cbc71	61fe5ae9	Sat Dec 22 11:11:59 2018 +0100	Gfx::doTilingPatternFill: Fix undefined behaviour	commit 6e7cbc713ae584d195f77845d6cafcdc80fb64abAuthor: Albert Astals Cid <aacid@kde.org>Date:   Sat Dec 22 11:11:59 2018 +0100    Gfx::doTilingPatternFill: Fix undefined behaviour        oss-fuzz/8548
c3a2c11a	d0ab87c1	Tue Nov 13 00:14:57 2018 +0100	Stream::makeFilter: Fix memory leak	commit c3a2c11a966a8e260a44716cbb0e26fa437b8f8dAuthor: Albert Astals Cid <aacid@kde.org>Date:   Sun Oct 21 11:29:44 2018 +0200    Stream::makeFilter: Fix memory leak        fixes oss-fuzz/9614
08572e1b	89fccf45	Sat Nov 3 12:21:41 2018 +0100	Parser::makeStream: Fix crash on malformed files	commit 08572e1bdca03baed694dd9828bb2b878865e669Author: Albert Astals Cid <aacid@kde.org>Date:   Sat Nov 3 12:21:41 2018 +0100    Parser::makeStream: Fix crash on malformed files        fixes oss-fuzz/11244
2d6ba9b1	a186b433	Tue Oct 30 00:11:06 2018 +0100	Fix crash if document is malformed (too wide)	commit 2d6ba9b1483cd4ae7f90d2f7ddef5a08cc3082a2Author: Albert Astals Cid <aacid@kde.org>Date:   Tue Oct 30 00:11:06 2018 +0100    Fix crash if document is malformed (too wide)        oss-fuzz/11195
8dc68b38	f162ecde	Wed Oct 17 23:08:11 2018 +0200	GfxFunctionShading::parse: Fix memory leak on broken files	commit 8dc68b38874ed1b8f61c051b9b9a5c41d6dd60c2Author: Albert Astals Cid <aacid@kde.org>Date:   Wed Oct 17 23:07:41 2018 +0200    GfxFunctionShading::parse: Fix memory leak on broken files        oss-fuzz/11020
bcfa08d0	38b54a6a	Tue Oct 9 09:36:08 2018 +0000	Fix memory leak in Catalog by tracking pages (and page refs) using std::vector and std::unique_ptr instead of manually allocating them. oss-fuzz/10119	commit bcfa08d007596876bff20dcac0ca84fee69fe56dAuthor: Adam Reichold <adam.reichold@t-online.de>Date:   Sat Sep 1 12:35:20 2018 +0200    Fix memory leak in Catalog by tracking pages (and page refs) using std::vector and std::unique_ptr instead of manually allocating them. oss-fuzz/10119
1c403665	c792e4cd	Sat Sep 22 21:17:28 2018 +0000	Fix overflow by noting that pos + length instead of just length must stay within bounds when trying to recover. oss-fuzz/8670	commit 1c403665cc7726091465f93955ff6c3af4064a49Author: Adam Reichold <adam.reichold@t-online.de>Date:   Sat Sep 22 13:22:43 2018 +0200    Fix overflow by noting that pos + length instead of just length must stay within bounds when trying to recover. oss-fuzz/8670
c792e4cd	8a675c04	Sat Sep 22 21:13:19 2018 +0000	Fix integer overflow by moving check bits-per-compoennt before mask computation. oss-fuzz/9343	commit c792e4cde92e6ece06592955068ffb579e826382Author: Adam Reichold <adam.reichold@t-online.de>Date:   Sat Sep 22 12:58:50 2018 +0200    Fix integer overflow by moving check bits-per-compoennt before mask computation. oss-fuzz/9343
ed28a561	de20e92a	Fri Aug 31 07:13:17 2018 +0000	Fix delta decoding for Type1C fonts to avoid signed integer overflow. oss-fuzz/8424	commit ed28a5612fc0bf8580ccd360ae086fc715d19b35Author: Adam Reichold <adam.reichold@t-online.de>Date:   Thu Aug 30 20:56:33 2018 +0200    Fix delta decoding for Type1C fonts to avoid signed integer overflow. oss-fuzz/8424
ad107bbb	e3a3e3fa	Thu Aug 30 18:28:50 2018 +0200	JBIG2Bitmap: Fix overflow check	commit ad107bbb8e4d8eb1a23e530d040d5b11bb8ff859Author: Albert Astals Cid <aacid@kde.org>Date:   Thu Aug 30 18:28:50 2018 +0200    JBIG2Bitmap: Fix overflow check        Fixes oss-fuzz/10113
c220ef25	b8082c67	Wed Aug 22 00:57:33 2018 +0200	Fix uninitialized memory read	commit c220ef254f326866016930ac9c1c2b430fcb11eaAuthor: Albert Astals Cid <aacid@kde.org>Date:   Wed Aug 22 00:57:33 2018 +0200    Fix uninitialized memory read        Fixes oss-fuzz/10009
1f8ab328	c1e90bb1	Thu Aug 9 00:40:14 2018 +0200	XRef::readXRef: Fix possible integer overflow	commit 1f8ab328f1440721fe7be7615a9d965a6e3d0439Author: Albert Astals Cid <aacid@kde.org>Date:   Thu Aug 9 00:40:14 2018 +0200    XRef::readXRef: Fix possible integer overflow        fixes oss-fuzz/9777
155897f3	eb1291f8	Tue Jul 17 01:05:38 2018 +0200	JBIG2Stream::readTextRegion: Fix uninitialized memory read	commit 155897f3cb88db5050b9d16dc50bfd8b660077b6Author: Albert Astals Cid <aacid@kde.org>Date:   Tue Jul 17 01:05:38 2018 +0200    JBIG2Stream::readTextRegion: Fix uninitialized memory read        fixes oss-fuzz/9381
eb1291f8	729e212f	Wed Jul 11 00:26:01 2018 +0200	GfxPatchMeshShading::getParameterizedColor: Fix uninitialized memory read	commit eb1291f86260124071e12226294631ce685eaad6Author: Albert Astals Cid <aacid@kde.org>Date:   Wed Jul 11 00:26:01 2018 +0200    GfxPatchMeshShading::getParameterizedColor: Fix uninitialized memory read        fixes oss-fuzz/9264
1b5298eb	d8346166	Mon Jul 2 21:46:10 2018 +0200	GfxUnivariateShading::getColor: Fix uninitialized memory read	commit 1b5298ebb8d76b5eee11d9cccdfffcdceb5d064bAuthor: Albert Astals Cid <aacid@kde.org>Date:   Mon Jul 2 21:46:10 2018 +0200    GfxUnivariateShading::getColor: Fix uninitialized memory read        fixes oss-fuzz/9165
5ef6a845	267228bb	Mon Jun 25 19:21:37 2018 +0200	Splash::arbitraryTransformImage: Fix uninitialized memory read	commit 5ef6a845d8872f5dbc5698260ab5e12391f01f76Author: Albert Astals Cid <aacid@kde.org>Date:   Mon Jun 25 19:21:37 2018 +0200    Splash::arbitraryTransformImage: Fix uninitialized memory read        fixes oss-fuzz/9066
e8b82c42	c0e87eda	Sun Jun 24 11:46:36 2018 +0200	ImageStream::getLine: Fix ubsan undefined shift	commit e8b82c4239da638ae77dfab07faaff33af4af1ccAuthor: Albert Astals Cid <aacid@kde.org>Date:   Sun Jun 24 11:46:36 2018 +0200    ImageStream::getLine: Fix ubsan undefined shift        I'm not totally sure this is the "correct" fix, but doesn't regress    any file on my test suite so seems one of those cases only happens    on bad files, and this helps oss-fuzz progress in its testing        Fixes oss-fuzz/8432
c0e87eda	322f8a45	Sun Jun 24 11:15:52 2018 +0200	AnnotBorder::parseDashArray: Fix correct calculation	commit c0e87eda688351b3caf222e5525f75a3190fd87cAuthor: Albert Astals Cid <aacid@kde.org>Date:   Sun Jun 24 11:15:52 2018 +0200    AnnotBorder::parseDashArray: Fix correct calculation        obj not being a num also means not correct        fixes oss-fuzz/9056
322f8a45	af4d5f31	Sat Jun 23 00:41:18 2018 +0200	GfxDeviceNColorSpace::parse: Fix leak on malformed files	commit 322f8a453664fbad65c4b998034adf8df2ac0beaAuthor: Albert Astals Cid <aacid@kde.org>Date:   Sat Jun 23 00:41:18 2018 +0200    GfxDeviceNColorSpace::parse: Fix leak on malformed files        Fixes oss-fuzz/9036
da349184	877dcec7	Fri Jun 22 16:48:11 2018 +0200	FoFiType1C::readPrivateDict: Fix potential uninitialized memory read	commit da349184c61034ac5818efe90d426de6af2c74d7Author: Albert Astals Cid <aacid@kde.org>Date:   Fri Jun 22 16:48:11 2018 +0200    FoFiType1C::readPrivateDict: Fix potential uninitialized memory read        fixes oss-fuzz/8864
37d2aa88	e4f4cbdd	Tue Jun 19 17:42:16 2018 +0200	PostScriptFunction::parseCode: Fix memory leak on malformed files	commit 37d2aa88409429397a6c8801b34213f6eded8e1eAuthor: Albert Astals Cid <aacid@kde.org>Date:   Tue Jun 19 17:42:16 2018 +0200    PostScriptFunction::parseCode: Fix memory leak on malformed files        Fixes oss-fuzz/8859
6b37df79	d6a3dc3e	Wed Jun 6 17:57:36 2018 +0200	SampledFunction: Fix divide by zero	commit 6b37df791731e40837fa1eba86ae740650431438Author: Albert Astals Cid <aacid@kde.org>Date:   Wed Jun 6 17:56:27 2018 +0200    SampledFunction: Fix divide by zero        Actual valid values are 1, 2, 4, 8, 12, 16, 24, and 32 but this check is easier        fixes oss-fuzz/8713
d6a3dc3e	599e2843	Wed Jun 6 17:46:17 2018 +0200	GfxAxialShading::parse: Fix memory leak on broken files	commit d6a3dc3ebbc97fcdd3c45028b5741f4b99fc0279Author: Albert Astals Cid <aacid@kde.org>Date:   Wed Jun 6 17:46:17 2018 +0200    GfxAxialShading::parse: Fix memory leak on broken files        fixes oss-fuzz/8742
599e2843	a231de88	Tue Jun 5 20:11:19 2018 +0200	JBIG2Stream::readSymbolDictSeg: Fix potential uninitialized memory read	commit 599e28433268ceaa933cf2a2492c81da4418e207Author: Albert Astals Cid <aacid@kde.org>Date:   Tue Jun 5 20:11:19 2018 +0200    JBIG2Stream::readSymbolDictSeg: Fix potential uninitialized memory read        fixes oss-fuzz/8748
10a3dc2a	96e7bc19	Mon May 28 17:44:34 2018 +0200	GfxState.cc: Fix undefined behaviour when compBits is 31	commit 10a3dc2a9c92349e498ea36bb342b821dcfc9d76Author: Albert Astals Cid <aacid@kde.org>Date:   Mon May 28 17:44:34 2018 +0200    GfxState.cc: Fix undefined behaviour when compBits is 31        it's a technical issue since according to spec biggest    valid value for compBits is 16, but this is simpler imho        fixes oss-fuzz/8582
18f376c0	19d3993f	Sun May 27 09:29:49 2018 +0200	FoFiType1::parse: Fix reading past font length	commit 18f376c0dff184851b3ee4c05c40b4ee2c21da8cAuthor: Albert Astals Cid <aacid@kde.org>Date:   Sun May 27 09:29:49 2018 +0200    FoFiType1::parse: Fix reading past font length        fixes oss-fuzz/8545
9a8d3324	1bc71245	Sun May 27 08:47:19 2018 +0200	Splash::fillGlyph2: fix buffer overflow	commit 9a8d33246601dbd2bea98bb3404596848f71162aAuthor: Albert Astals Cid <aacid@kde.org>Date:   Sun May 27 08:47:19 2018 +0200    Splash::fillGlyph2: fix buffer overflow        Make sure xx / 8 + 1 is not out of bounds        fixes oss-fuzz/8422
3b9d8025	0e3b18a4	Fri May 25 17:26:37 2018 +0200	Splash: Fix another potential uninitialized memory use	commit 3b9d8025dbdfcfac94ede20b05d86d177393cde7Author: Albert Astals Cid <aacid@kde.org>Date:   Fri May 25 17:26:37 2018 +0200    Splash: Fix another potential uninitialized memory use        fixes oss-fuzz/8466
0e3b18a4	c75500bf	Fri May 25 17:06:13 2018 +0200	SplashUnivariatePattern::getColor: Fix potential uninitialized memory read	commit 0e3b18a48c3907a49c51a0ceded6078a2fd790ebAuthor: Albert Astals Cid <aacid@kde.org>Date:   Fri May 25 17:06:13 2018 +0200    SplashUnivariatePattern::getColor: Fix potential uninitialized memory read        If the GfxUnivariateShading doesn't provide enough bits of color fill them with 0 as to not have random memory read        fixes oss-fuzz/8470
c758fc98	07318f38	Thu May 24 23:19:16 2018 +0200	FoFiType1::parse: Fix invalid memory access	commit c758fc980834882528eeae82568494e46d189cc5Author: Albert Astals Cid <aacid@kde.org>Date:   Thu May 24 23:19:16 2018 +0200    FoFiType1::parse: Fix invalid memory access        Make sure there's enough line left before calling strncmp        fixes oss-fuzz/8425
6b91d37a	c9650369	Thu May 24 18:22:00 2018 +0200	SplashOutputDev: Fix memory leak on malformed files	commit 6b91d37a704fb2b6fa9529d859c366c331327ab9Author: Albert Astals Cid <aacid@kde.org>Date:   Thu May 24 18:22:00 2018 +0200    SplashOutputDev: Fix memory leak on malformed files        i.e. SplashOutputDev::endTextObject is not called after SplashOutputDev::drawChar        fixes oss-fuzz/8508
f279778f	ea72a3f3	Thu May 24 13:06:00 2018 +0200	JBIG2Stream::readSymbolDictSeg: Fix potential uninitialized memory use	commit f279778fe0aca610cdecb70d0a714bbaa08b0d22Author: Albert Astals Cid <aacid@kde.org>Date:   Thu May 24 13:06:00 2018 +0200    JBIG2Stream::readSymbolDictSeg: Fix potential uninitialized memory use        fixes oss-fuzz/8468
76820f5a	ffb0daef	Thu May 24 01:12:07 2018 +0200	JBIG2Stream::readPageInfoSeg: Fix memory leak on malformed documents	commit 76820f5ab932a9ed18913bc7d1a452ddf060c133Author: Albert Astals Cid <aacid@kde.org>Date:   Thu May 24 01:12:07 2018 +0200    JBIG2Stream::readPageInfoSeg: Fix memory leak on malformed documents        fixes oss-fuzz/8463
e0fb1804	86991adb	Wed May 23 19:42:00 2018 +0200	Gfx::opSetExtGState: Fix memory leak on broken files	commit e0fb18040378659c98fedb4bdaff6a903ddd095bAuthor: Albert Astals Cid <aacid@kde.org>Date:   Wed May 23 19:40:50 2018 +0200    Gfx::opSetExtGState: Fix memory leak on broken files        doSoftMask was called just once, from opSetExtGState, but was    given the duty to delete blendingColorSpace that given doSoftMask    has various early returns is hard to do right, so i've moved    the deletion to opSetExtGState itself        fixes oss-fuzz/8431
86991adb	62c7a6a1	Wed May 23 19:35:27 2018 +0200	Gfx::doRadialShFill: Fix potential divide by zero	commit 86991adb172fd55decdc72ec6fc34d41b19beafaAuthor: Albert Astals Cid <aacid@kde.org>Date:   Wed May 23 19:35:27 2018 +0200    Gfx::doRadialShFill: Fix potential divide by zero        fixes oss-fuzz/8476
0318e166	3ca2d43b	Wed May 23 19:11:21 2018 +0200	GfxPatchMeshShading::parse: Fix memory leak on malformed documents	commit 0318e1667c7b137493f22be61b835eb914f68fa9Author: Albert Astals Cid <aacid@kde.org>Date:   Wed May 23 15:34:32 2018 +0200    GfxPatchMeshShading::parse: Fix memory leak on malformed documents        fixes oss-fuzz/8487
bf03344a	31c3832b	Tue May 22 20:36:05 2018 +0200	StandardSecurityHandler::isUnencrypted: Fix uninitialized memory use	commit bf03344ad26b1227b5052420feabe062441c02edAuthor: Albert Astals Cid <aacid@kde.org>Date:   Tue May 22 20:36:05 2018 +0200    StandardSecurityHandler::isUnencrypted: Fix uninitialized memory use        fixes oss-fuzz/8426
2c0a0b07	ace7ca3e	Tue May 22 20:15:39 2018 +0200	Gfx::doImage: Fix memory leak on malformed documents	commit 2c0a0b07fdb2c76487ca4af7b2f50da9904c6c23Author: Albert Astals Cid <aacid@kde.org>Date:   Tue May 22 20:15:39 2018 +0200    Gfx::doImage: Fix memory leak on malformed documents        fixes oss-fuzz/8452
3b8634e7	91079d4f	Tue May 22 20:07:50 2018 +0200	GfxAxialShading::getParameterRange: Fix potential divide by zero	commit 3b8634e744aa5ba3b317fd3378ba07a438826827Author: Albert Astals Cid <aacid@kde.org>Date:   Tue May 22 20:07:50 2018 +0200    GfxAxialShading::getParameterRange: Fix potential divide by zero        fixes oss-fuzz/8436
91079d4f	6169bfb1	Tue May 22 20:01:56 2018 +0200	SampledFunction: Fix potential divide by zero	commit 91079d4f482b35f190a4f2bbd9f4fb6a8ad7c2a2Author: Albert Astals Cid <aacid@kde.org>Date:   Tue May 22 20:01:56 2018 +0200    SampledFunction: Fix potential divide by zero        fixes oss-fuzz/8455
6169bfb1	0868c499	Tue May 22 19:56:34 2018 +0200	GfxState.cc: Fix potential division by zero	commit 6169bfb1ecd289a8235be0b8884a550f5d1ad926Author: Albert Astals Cid <aacid@kde.org>Date:   Tue May 22 19:56:34 2018 +0200    GfxState.cc: Fix potential division by zero        fixes oss-fuzz/8465
224dda4d	0c0c368f	Tue May 22 19:17:20 2018 +0200	Fix out of bounds write in BaseCryptStream	commit 224dda4d292a097866f109a9d2cec4b3ba78eb97Author: Albert Astals Cid <aacid@kde.org>Date:   Tue May 22 19:17:20 2018 +0200    Fix out of bounds write in BaseCryptStream        fixes oss-fuzz/8420
e7f59e39	547f19cd	Tue May 22 18:22:52 2018 +0200	Splash::scaleMaskYuXu: Fix crash on malformed files	commit e7f59e39a0aca2a8a363fc0edcf25fb5aaada7a5Author: Albert Astals Cid <aacid@kde.org>Date:   Tue May 22 18:22:29 2018 +0200    Splash::scaleMaskYuXu: Fix crash on malformed files        fixes oss-fuzz/8435    fixes oss-fuzz/8441
547f19cd	d1d8dea6	Tue May 22 18:17:58 2018 +0200	Fix crash in "generic" GlobalParams::findSystemFontFile	commit 547f19cd420f2d579d921620545e6496adb6a9fbAuthor: Albert Astals Cid <aacid@kde.org>Date:   Tue May 22 18:17:58 2018 +0200    Fix crash in "generic" GlobalParams::findSystemFontFile        Not very important since we usually either use the fontconfig or the windows one        fixes oss-fuzz/8427
d1d8dea6	127d0fe3	Tue May 22 18:15:31 2018 +0200	Fix memory leak on malformed files	commit d1d8dea64db53fb151fede27efd5fd3308820a51Author: Albert Astals Cid <aacid@kde.org>Date:   Tue May 22 18:13:19 2018 +0200    Fix memory leak on malformed files        fixes oss-fuzz/8430
