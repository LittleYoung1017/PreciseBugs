diff --git a/gn/sksl_tests.gni b/gn/sksl_tests.gni
index 342a9ba317..92a9640aa7 100644
--- a/gn/sksl_tests.gni
+++ b/gn/sksl_tests.gni
@@ -649,6 +649,7 @@ sksl_inliner_tests = [
   "/sksl/inliner/InlinerUsesTempVarForMultipleReturns.sksl",
   "/sksl/inliner/InlinerUsesTempVarForReturnsInsideBlockWithVar.sksl",
   "/sksl/inliner/InlineThreshold.sksl",
+  "/sksl/inliner/InlineUnscopedVariable.sksl",
   "/sksl/inliner/InlineWithModifiedArgument.sksl",
   "/sksl/inliner/InlineWithNestedBigCalls.sksl",
   "/sksl/inliner/InlineWithNestedCalls.sksl",
diff --git a/resources/sksl/inliner/InlineUnscopedVariable.sksl b/resources/sksl/inliner/InlineUnscopedVariable.sksl
new file mode 100644
index 0000000000..766b89be05
--- /dev/null
+++ b/resources/sksl/inliner/InlineUnscopedVariable.sksl
@@ -0,0 +1,24 @@
+uniform half4 colorGreen;
+
+void DeclareAVariable(int i) { int x; }
+
+void ForLoop2(int i) { for (int x = 0; x < 1; ++x) DeclareAVariable(i); }
+void ForLoop1(int i) { ForLoop2(i); }
+
+void IfStatement2(int i) { if (i > 0) DeclareAVariable(i); else DeclareAVariable(i); }
+void IfStatement1(int i) { IfStatement2(i); }
+
+void WhileLoop2(int i) { while (i-- > 0) DeclareAVariable(i); }
+void WhileLoop1(int i) { WhileLoop2(i); }
+
+void DoLoop2(int i) { do DeclareAVariable(i); while (i-- > 0); }
+void DoLoop1(int i) { DoLoop2(i); }
+
+half4 main(float2 coords) {
+    ForLoop1(123);
+    DoLoop1(123);
+    WhileLoop1(123);
+    IfStatement1(123);
+
+    return colorGreen;
+}
diff --git a/src/sksl/SkSLInliner.cpp b/src/sksl/SkSLInliner.cpp
index 9c04a3ade2..3f72a2a69e 100644
--- a/src/sksl/SkSLInliner.cpp
+++ b/src/sksl/SkSLInliner.cpp
@@ -246,29 +246,23 @@ void Inliner::ensureScopedBlocks(Statement* inlinedBody, Statement* parentStmt)
 
     // The inliner will create inlined function bodies as a Block containing multiple statements,
     // but no scope. Normally, this is fine, but if this block is used as the statement for a
-    // do/for/if/while, this isn't actually possible to represent textually; a scope must be added
-    // for the generated code to match the intent. In the case of Blocks nested inside other Blocks,
-    // we add the scope to the outermost block if needed. Zero-statement blocks have similar
-    // issues--if we don't represent the Block textually somehow, we run the risk of accidentally
-    // absorbing the following statement into our loop--so we also add a scope to these.
+    // do/for/if/while, the block needs to be scoped for the generated code to match the intent.
+    // In the case of Blocks nested inside other Blocks, we add the scope to the outermost block if
+    // needed.
     for (Block* nestedBlock = &block;; ) {
         if (nestedBlock->isScope()) {
             // We found an explicit scope; all is well.
             return;
         }
-        if (nestedBlock->children().size() != 1) {
-            // We found a block with multiple (or zero) statements, but no scope? Let's add a scope
-            // to the outermost block.
-            block.setBlockKind(Block::Kind::kBracedScope);
-            return;
-        }
-        if (!nestedBlock->children()[0]->is<Block>()) {
-            // This block has exactly one thing inside, and it's not another block. No need to scope
-            // it.
-            return;
+        if (nestedBlock->children().size() == 1 && nestedBlock->children()[0]->is<Block>()) {
+            // This block wraps another unscoped block; we need to go deeper.
+            nestedBlock = &nestedBlock->children()[0]->as<Block>();
+            continue;
         }
-        // We have to go deeper.
-        nestedBlock = &nestedBlock->children()[0]->as<Block>();
+        // We found a block containing real statements (not just more blocks), but no scope.
+        // Let's add a scope to the outermost block.
+        block.setBlockKind(Block::Kind::kBracedScope);
+        return;
     }
 }
 
diff --git a/tests/SkSLTest.cpp b/tests/SkSLTest.cpp
index 32a112eaaf..61e97db5d4 100644
--- a/tests/SkSLTest.cpp
+++ b/tests/SkSLTest.cpp
@@ -382,6 +382,7 @@ SKSL_TEST(CPU + GPU, kApiLevel_T, InlinerElidesTempVarForReturnsInsideBlock,
 SKSL_TEST(CPU + GPU, kApiLevel_T, InlinerUsesTempVarForMultipleReturns,             "inliner/InlinerUsesTempVarForMultipleReturns.sksl")
 SKSL_TEST(CPU + GPU, kApiLevel_T, InlinerUsesTempVarForReturnsInsideBlockWithVar,   "inliner/InlinerUsesTempVarForReturnsInsideBlockWithVar.sksl")
 SKSL_TEST(CPU + GPU, kApiLevel_T, InlineThreshold,                                  "inliner/InlineThreshold.sksl")
+SKSL_TEST(GPU_ES3,   kApiLevel_T, InlineUnscopedVariable,                           "inliner/InlineUnscopedVariable.sksl")
 SKSL_TEST(CPU + GPU, kApiLevel_T, InlineWithModifiedArgument,                       "inliner/InlineWithModifiedArgument.sksl")
 SKSL_TEST(CPU + GPU, kApiLevel_T, InlineWithNestedBigCalls,                         "inliner/InlineWithNestedBigCalls.sksl")
 SKSL_TEST(CPU + GPU, kApiLevel_T, InlineWithUnmodifiedArgument,                     "inliner/InlineWithUnmodifiedArgument.sksl")
diff --git a/tests/sksl/inliner/InlineUnscopedVariable.glsl b/tests/sksl/inliner/InlineUnscopedVariable.glsl
new file mode 100644
index 0000000000..af94b29a93
--- /dev/null
+++ b/tests/sksl/inliner/InlineUnscopedVariable.glsl
@@ -0,0 +1,14 @@
+
+out vec4 sk_FragColor;
+uniform vec4 colorGreen;
+vec4 main() {
+    for (int _13_x = 0;_13_x < 1; ++_13_x) {
+    }
+    int _15_i = 123;
+    do {
+    } while (_15_i-- > 0);
+    int _17_i = 123;
+    while (_17_i-- > 0) {
+    }
+    return colorGreen;
+}
diff --git a/tests/sksl/inliner/Ossfuzz51960.glsl b/tests/sksl/inliner/Ossfuzz51960.glsl
new file mode 100644
index 0000000000..af94b29a93
--- /dev/null
+++ b/tests/sksl/inliner/Ossfuzz51960.glsl
@@ -0,0 +1,14 @@
+
+out vec4 sk_FragColor;
+uniform vec4 colorGreen;
+vec4 main() {
+    for (int _13_x = 0;_13_x < 1; ++_13_x) {
+    }
+    int _15_i = 123;
+    do {
+    } while (_15_i-- > 0);
+    int _17_i = 123;
+    while (_17_i-- > 0) {
+    }
+    return colorGreen;
+}
