diff --git a/gdal/frmts/pcidsk/sdk/channel/cexternalchannel.cpp b/gdal/frmts/pcidsk/sdk/channel/cexternalchannel.cpp
index ce842ab88e..eff62e62b7 100644
--- a/gdal/frmts/pcidsk/sdk/channel/cexternalchannel.cpp
+++ b/gdal/frmts/pcidsk/sdk/channel/cexternalchannel.cpp
@@ -269,136 +269,144 @@ int CExternalChannel::ReadBlock( int block_index, void *buffer,
     else
         block1_ysize = 0;
 
-    if( axsize > 0 && aysize > 0 )
+    try
     {
-        MutexHolder oHolder( mutex );
-        db->ReadBlock( echannel, ablock_x + ablock_y * src_blocks_per_row, 
-                       temp_buffer, axoff, ayoff, axsize, aysize );
-                       
-        for( i_line = 0; i_line < aysize; i_line++ )
+        if( axsize > 0 && aysize > 0 )
         {
-            memcpy( ((uint8*) buffer) + i_line * xsize * pixel_size, 
-                    temp_buffer + i_line * axsize * pixel_size,
-                    axsize * pixel_size );
+            MutexHolder oHolder( mutex );
+            db->ReadBlock( echannel, ablock_x + ablock_y * src_blocks_per_row, 
+                        temp_buffer, axoff, ayoff, axsize, aysize );
+                        
+            for( i_line = 0; i_line < aysize; i_line++ )
+            {
+                memcpy( ((uint8*) buffer) + i_line * xsize * pixel_size, 
+                        temp_buffer + i_line * axsize * pixel_size,
+                        axsize * pixel_size );
+            }
         }
-    }
-    
-/* -------------------------------------------------------------------- */
-/*      read external block for top right corner of target block.       */
-/* -------------------------------------------------------------------- */
-    ttxoff = txoff + block1_xsize;
-    ttyoff = tyoff;
-    ttxsize = txsize - block1_xsize;
-    ttysize = tysize;
-    
-    ablock_x = ttxoff / src_block_width;
-    ablock_y = ttyoff / src_block_height;
+        
+    /* -------------------------------------------------------------------- */
+    /*      read external block for top right corner of target block.       */
+    /* -------------------------------------------------------------------- */
+        ttxoff = txoff + block1_xsize;
+        ttyoff = tyoff;
+        ttxsize = txsize - block1_xsize;
+        ttysize = tysize;
+        
+        ablock_x = ttxoff / src_block_width;
+        ablock_y = ttyoff / src_block_height;
 
-    axoff = ttxoff - ablock_x * src_block_width;
-    ayoff = ttyoff - ablock_y * src_block_height;
+        axoff = ttxoff - ablock_x * src_block_width;
+        ayoff = ttyoff - ablock_y * src_block_height;
 
-    if( axoff + ttxsize > src_block_width )
-        axsize = src_block_width - axoff;
-    else
-        axsize = ttxsize;
+        if( axoff + ttxsize > src_block_width )
+            axsize = src_block_width - axoff;
+        else
+            axsize = ttxsize;
 
-    if( ayoff + ttysize > src_block_height )
-        aysize = src_block_height - ayoff;
-    else
-        aysize = ttysize;
+        if( ayoff + ttysize > src_block_height )
+            aysize = src_block_height - ayoff;
+        else
+            aysize = ttysize;
 
-    if( axsize > 0 && aysize > 0 )
-    {
-        MutexHolder oHolder( mutex );
-        db->ReadBlock( echannel, ablock_x + ablock_y * src_blocks_per_row, 
-                       temp_buffer, axoff, ayoff, axsize, aysize );
-                       
-        for( i_line = 0; i_line < aysize; i_line++ )
+        if( axsize > 0 && aysize > 0 )
         {
-            memcpy( ((uint8*) buffer) 
-                    + (block1_xsize + i_line * xsize) * pixel_size, 
-                    temp_buffer + i_line * axsize * pixel_size,
-                    axsize * pixel_size );
+            MutexHolder oHolder( mutex );
+            db->ReadBlock( echannel, ablock_x + ablock_y * src_blocks_per_row, 
+                        temp_buffer, axoff, ayoff, axsize, aysize );
+                        
+            for( i_line = 0; i_line < aysize; i_line++ )
+            {
+                memcpy( ((uint8*) buffer) 
+                        + (block1_xsize + i_line * xsize) * pixel_size, 
+                        temp_buffer + i_line * axsize * pixel_size,
+                        axsize * pixel_size );
+            }
         }
-    }
-    
-/* -------------------------------------------------------------------- */
-/*      read external block for bottom left corner of target block.     */
-/* -------------------------------------------------------------------- */
-    ttxoff = txoff;
-    ttyoff = tyoff + block1_ysize;
-    ttxsize = txsize;
-    ttysize = tysize - block1_ysize;
-    
-    ablock_x = ttxoff / src_block_width;
-    ablock_y = ttyoff / src_block_height;
+        
+    /* -------------------------------------------------------------------- */
+    /*      read external block for bottom left corner of target block.     */
+    /* -------------------------------------------------------------------- */
+        ttxoff = txoff;
+        ttyoff = tyoff + block1_ysize;
+        ttxsize = txsize;
+        ttysize = tysize - block1_ysize;
+        
+        ablock_x = ttxoff / src_block_width;
+        ablock_y = ttyoff / src_block_height;
 
-    axoff = ttxoff - ablock_x * src_block_width;
-    ayoff = ttyoff - ablock_y * src_block_height;
+        axoff = ttxoff - ablock_x * src_block_width;
+        ayoff = ttyoff - ablock_y * src_block_height;
 
-    if( axoff + ttxsize > src_block_width )
-        axsize = src_block_width - axoff;
-    else
-        axsize = ttxsize;
+        if( axoff + ttxsize > src_block_width )
+            axsize = src_block_width - axoff;
+        else
+            axsize = ttxsize;
 
-    if( ayoff + ttysize > src_block_height )
-        aysize = src_block_height - ayoff;
-    else
-        aysize = ttysize;
+        if( ayoff + ttysize > src_block_height )
+            aysize = src_block_height - ayoff;
+        else
+            aysize = ttysize;
 
-    if( axsize > 0 && aysize > 0 )
-    {
-        MutexHolder oHolder( mutex );
-        db->ReadBlock( echannel, ablock_x + ablock_y * src_blocks_per_row, 
-                       temp_buffer, axoff, ayoff, axsize, aysize );
-                       
-        for( i_line = 0; i_line < aysize; i_line++ )
+        if( axsize > 0 && aysize > 0 )
         {
-            memcpy( ((uint8*) buffer) 
-                    + (i_line + block1_ysize) * xsize * pixel_size, 
-                    temp_buffer + i_line * axsize * pixel_size,
-                    axsize * pixel_size );
+            MutexHolder oHolder( mutex );
+            db->ReadBlock( echannel, ablock_x + ablock_y * src_blocks_per_row, 
+                        temp_buffer, axoff, ayoff, axsize, aysize );
+                        
+            for( i_line = 0; i_line < aysize; i_line++ )
+            {
+                memcpy( ((uint8*) buffer) 
+                        + (i_line + block1_ysize) * xsize * pixel_size, 
+                        temp_buffer + i_line * axsize * pixel_size,
+                        axsize * pixel_size );
+            }
         }
-    }
-    
-/* -------------------------------------------------------------------- */
-/*      read external block for bottom left corner of target block.     */
-/* -------------------------------------------------------------------- */
-    ttxoff = txoff + block1_xsize;
-    ttyoff = tyoff + block1_ysize;
-    ttxsize = txsize - block1_xsize;
-    ttysize = tysize - block1_ysize;
-    
-    ablock_x = ttxoff / src_block_width;
-    ablock_y = ttyoff / src_block_height;
+        
+    /* -------------------------------------------------------------------- */
+    /*      read external block for bottom left corner of target block.     */
+    /* -------------------------------------------------------------------- */
+        ttxoff = txoff + block1_xsize;
+        ttyoff = tyoff + block1_ysize;
+        ttxsize = txsize - block1_xsize;
+        ttysize = tysize - block1_ysize;
+        
+        ablock_x = ttxoff / src_block_width;
+        ablock_y = ttyoff / src_block_height;
 
-    axoff = ttxoff - ablock_x * src_block_width;
-    ayoff = ttyoff - ablock_y * src_block_height;
+        axoff = ttxoff - ablock_x * src_block_width;
+        ayoff = ttyoff - ablock_y * src_block_height;
 
-    if( axoff + ttxsize > src_block_width )
-        axsize = src_block_width - axoff;
-    else
-        axsize = ttxsize;
+        if( axoff + ttxsize > src_block_width )
+            axsize = src_block_width - axoff;
+        else
+            axsize = ttxsize;
 
-    if( ayoff + ttysize > src_block_height )
-        aysize = src_block_height - ayoff;
-    else
-        aysize = ttysize;
+        if( ayoff + ttysize > src_block_height )
+            aysize = src_block_height - ayoff;
+        else
+            aysize = ttysize;
 
-    if( axsize > 0 && aysize > 0 )
-    {
-        MutexHolder oHolder( mutex );
-        db->ReadBlock( echannel, ablock_x + ablock_y * src_blocks_per_row, 
-                       temp_buffer, axoff, ayoff, axsize, aysize );
-                       
-        for( i_line = 0; i_line < aysize; i_line++ )
+        if( axsize > 0 && aysize > 0 )
         {
-            memcpy( ((uint8*) buffer) 
-                    + (block1_xsize + (i_line + block1_ysize) * xsize) * pixel_size, 
-                    temp_buffer + i_line * axsize * pixel_size,
-                    axsize * pixel_size );
+            MutexHolder oHolder( mutex );
+            db->ReadBlock( echannel, ablock_x + ablock_y * src_blocks_per_row, 
+                        temp_buffer, axoff, ayoff, axsize, aysize );
+                        
+            for( i_line = 0; i_line < aysize; i_line++ )
+            {
+                memcpy( ((uint8*) buffer) 
+                        + (block1_xsize + (i_line + block1_ysize) * xsize) * pixel_size, 
+                        temp_buffer + i_line * axsize * pixel_size,
+                        axsize * pixel_size );
+            }
         }
     }
+    catch( ... )
+    {
+        free( temp_buffer );
+        throw;
+    }
     
     free( temp_buffer );
 
