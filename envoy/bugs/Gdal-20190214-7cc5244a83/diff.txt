diff --git a/test/common/http/codec_impl_corpus/clusterfuzz-testcase-minimized-codec_impl_fuzz_test-5635096546639872 b/test/common/http/codec_impl_corpus/clusterfuzz-testcase-minimized-codec_impl_fuzz_test-5635096546639872
index 7b40917737..134cbf68ad 100644
--- a/test/common/http/codec_impl_corpus/clusterfuzz-testcase-minimized-codec_impl_fuzz_test-5635096546639872
+++ b/test/common/http/codec_impl_corpus/clusterfuzz-testcase-minimized-codec_impl_fuzz_test-5635096546639872
@@ -58,7 +58,7 @@ actions {
 }
 actions {
   stream_action {
-    stream_id: 2
+    stream_id: 1
   }
 }
 actions {
@@ -463,7 +463,7 @@ actions {
 }
 actions {
   stream_action {
-    stream_id: 2
+    stream_id: 1
     request {
     }
   }
diff --git a/test/common/http/codec_impl_corpus/clusterfuzz-testcase-minimized-codec_impl_fuzz_test-5722972495544320 b/test/common/http/codec_impl_corpus/clusterfuzz-testcase-minimized-codec_impl_fuzz_test-5722972495544320
new file mode 100644
index 0000000000..39e1177905
--- /dev/null
+++ b/test/common/http/codec_impl_corpus/clusterfuzz-testcase-minimized-codec_impl_fuzz_test-5722972495544320
@@ -0,0 +1 @@
+actions {   new_stream {     request_headers {       headers {         key: ":method"         value: "GET"       }       headers {         key: ":path"         value: "/"       }     }   } } actions {   new_stream {   } } actions {   stream_action {     request {       trailers {       }     }   } } actions {   stream_action {     response {       headers {       }     }   } } actions {   new_stream {   } } actions {   stream_action {     response {       trailers {       }     }   } }
diff --git a/test/common/http/codec_impl_corpus/example b/test/common/http/codec_impl_corpus/example
index ac54cc2f13..897c48be43 100644
--- a/test/common/http/codec_impl_corpus/example
+++ b/test/common/http/codec_impl_corpus/example
@@ -66,7 +66,7 @@ actions {
 }
 actions {
   stream_action {
-    stream_id: 2
+    stream_id: 1
     request {
       data: 3000000
     }
@@ -74,7 +74,7 @@ actions {
 }
 actions {
   stream_action {
-    stream_id: 2
+    stream_id: 1
     request {
       data: 54
     }
@@ -83,7 +83,7 @@ actions {
 actions { quiesce_drain {} }
 actions {
   stream_action {
-    stream_id: 2
+    stream_id: 1
     request {
       data: 54
     }
@@ -91,7 +91,7 @@ actions {
 }
 actions {
   stream_action {
-    stream_id: 2
+    stream_id: 1
     response {
       headers {
         headers {
@@ -108,7 +108,7 @@ actions {
 }
 actions {
   stream_action {
-    stream_id: 2
+    stream_id: 1
     response {
       data: 5
     }
@@ -116,7 +116,7 @@ actions {
 }
 actions {
   stream_action {
-    stream_id: 2
+    stream_id: 1
     request {
       read_disable: true
     }
@@ -124,7 +124,7 @@ actions {
 }
 actions {
   stream_action {
-    stream_id: 2
+    stream_id: 1
     request {
       read_disable: false
     }
@@ -132,7 +132,7 @@ actions {
 }
 actions {
   stream_action {
-    stream_id: 2
+    stream_id: 1
     request {
       read_disable: true
     }
@@ -140,7 +140,7 @@ actions {
 }
 actions {
   stream_action {
-    stream_id: 2
+    stream_id: 1
     request {
       trailers {
         headers {
@@ -153,7 +153,7 @@ actions {
 }
 actions {
   stream_action {
-    stream_id: 2
+    stream_id: 1
     request {
       read_disable: false
     }
@@ -161,7 +161,7 @@ actions {
 }
 actions {
   stream_action {
-    stream_id: 2
+    stream_id: 1
     response {
       trailers {
         headers {
@@ -174,7 +174,7 @@ actions {
 }
 actions {
   stream_action {
-    stream_id: 2
+    stream_id: 1
     response {
       data: 2
     }
@@ -182,7 +182,7 @@ actions {
 }
 actions {
   stream_action {
-    stream_id: 2
+    stream_id: 1
     response {
       trailers {
         headers {
diff --git a/test/common/http/codec_impl_corpus/multi_stream b/test/common/http/codec_impl_corpus/multi_stream
index 26c4635386..674e826f14 100644
--- a/test/common/http/codec_impl_corpus/multi_stream
+++ b/test/common/http/codec_impl_corpus/multi_stream
@@ -176,7 +176,7 @@ actions {
 }
 actions {
   stream_action {
-    stream_id: 2
+    stream_id: 1
     request {
       data: 3000000
     }
@@ -184,7 +184,7 @@ actions {
 }
 actions {
   stream_action {
-    stream_id: 2
+    stream_id: 1
     request {
       data: 54
     }
@@ -193,7 +193,7 @@ actions {
 actions { quiesce_drain {} }
 actions {
   stream_action {
-    stream_id: 2
+    stream_id: 1
     request {
       data: 54
     }
@@ -201,7 +201,7 @@ actions {
 }
 actions {
   stream_action {
-    stream_id: 2
+    stream_id: 1
     response {
       headers {
         headers {
@@ -218,7 +218,7 @@ actions {
 }
 actions {
   stream_action {
-    stream_id: 2
+    stream_id: 1
     response {
       data: 5
       end_stream: true
diff --git a/test/common/http/codec_impl_corpus/reset_stream b/test/common/http/codec_impl_corpus/reset_stream
index 60bbc81c8a..8275a046e5 100644
--- a/test/common/http/codec_impl_corpus/reset_stream
+++ b/test/common/http/codec_impl_corpus/reset_stream
@@ -84,7 +84,7 @@ actions {
 actions { quiesce_drain {} }
 actions {
   stream_action {
-    stream_id: 2
+    stream_id: 1
     request {
       data: 3000000
     }
@@ -92,7 +92,7 @@ actions {
 }
 actions {
   stream_action {
-    stream_id: 2
+    stream_id: 1
     request {
       data: 54
     }
@@ -101,7 +101,7 @@ actions {
 actions { quiesce_drain {} }
 actions {
   stream_action {
-    stream_id: 2
+    stream_id: 1
     request {
       data: 54
     }
@@ -109,7 +109,7 @@ actions {
 }
 actions {
   stream_action {
-    stream_id: 2
+    stream_id: 1
     response {
       headers {
         headers {
@@ -126,7 +126,7 @@ actions {
 }
 actions {
   stream_action {
-    stream_id: 2
+    stream_id: 1
     response {
       data: 5
       end_stream: true
diff --git a/test/common/http/codec_impl_fuzz.proto b/test/common/http/codec_impl_fuzz.proto
index 61572b7f0e..249e38eb64 100644
--- a/test/common/http/codec_impl_fuzz.proto
+++ b/test/common/http/codec_impl_fuzz.proto
@@ -27,6 +27,7 @@ message DirectionalAction {
 }
 
 message StreamAction {
+  // Index into list of created streams (not HTTP/2 level stream ID).
   uint32 stream_id = 1;
   oneof stream_action_selector {
     DirectionalAction request = 2;
diff --git a/test/common/http/codec_impl_fuzz_test.cc b/test/common/http/codec_impl_fuzz_test.cc
index 6985340273..b33bfdfb2b 100644
--- a/test/common/http/codec_impl_fuzz_test.cc
+++ b/test/common/http/codec_impl_fuzz_test.cc
@@ -80,9 +80,11 @@ public:
   // course, it's the codecs must be robust to wire-level violations. We
   // explore these violations via MutateAction and SwapAction at the connection
   // buffer level.
-  enum class StreamState { PendingHeaders, PendingDataOrTrailers, Closed };
+  enum class StreamState : int { PendingHeaders, PendingDataOrTrailers, Closed };
 
   struct DirectionalState {
+    // The request encode and response decoder belong to the client, the
+    // response encoder and request decoder belong to the server.
     StreamEncoder* encoder_;
     NiceMock<MockStreamDecoder> decoder_;
     NiceMock<MockStreamCallbacks> stream_callbacks_;
@@ -119,27 +121,27 @@ public:
       resetStream();
     }));
     ON_CALL(request_.decoder_, decodeHeaders_(_, true)).WillByDefault(InvokeWithoutArgs([this] {
+      // The HTTP/1 codec needs this to cleanup any latent stream resources.
+      response_.encoder_->getStream().resetStream(StreamResetReason::LocalReset);
       request_.closeRemote();
     }));
     ON_CALL(request_.decoder_, decodeData(_, true)).WillByDefault(InvokeWithoutArgs([this] {
+      // The HTTP/1 codec needs this to cleanup any latent stream resources.
+      response_.encoder_->getStream().resetStream(StreamResetReason::LocalReset);
       request_.closeRemote();
     }));
     ON_CALL(request_.decoder_, decodeTrailers_(_)).WillByDefault(InvokeWithoutArgs([this] {
+      // The HTTP/1 codec needs this to cleanup any latent stream resources.
+      response_.encoder_->getStream().resetStream(StreamResetReason::LocalReset);
       request_.closeRemote();
     }));
     ON_CALL(response_.decoder_, decodeHeaders_(_, true)).WillByDefault(InvokeWithoutArgs([this] {
-      // The HTTP/1 codec needs this to cleanup any latent stream resources.
-      response_.encoder_->getStream().resetStream(StreamResetReason::LocalReset);
       response_.closeRemote();
     }));
     ON_CALL(response_.decoder_, decodeData(_, true)).WillByDefault(InvokeWithoutArgs([this] {
-      // The HTTP/1 codec needs this to cleanup any latent stream resources.
-      response_.encoder_->getStream().resetStream(StreamResetReason::LocalReset);
       response_.closeRemote();
     }));
     ON_CALL(response_.decoder_, decodeTrailers_(_)).WillByDefault(InvokeWithoutArgs([this] {
-      // The HTTP/1 codec needs this to cleanup any latent stream resources.
-      response_.encoder_->getStream().resetStream(StreamResetReason::LocalReset);
       response_.closeRemote();
     }));
     request_.encoder_->encodeHeaders(request_headers, end_stream);
@@ -246,10 +248,16 @@ public:
   void streamAction(const test::common::http::StreamAction& stream_action) {
     switch (stream_action.stream_action_selector_case()) {
     case test::common::http::StreamAction::kRequest: {
+      ENVOY_LOG_MISC(debug, "Request stream action on {} in state {} {}", stream_index_,
+                     static_cast<int>(request_.stream_state_),
+                     static_cast<int>(response_.stream_state_));
       directionalAction(request_, stream_action.request());
       break;
     }
     case test::common::http::StreamAction::kResponse: {
+      ENVOY_LOG_MISC(debug, "Response stream action on {} in state {} {}", stream_index_,
+                     static_cast<int>(request_.stream_state_),
+                     static_cast<int>(response_.stream_state_));
       directionalAction(response_, stream_action.response());
       break;
     }
@@ -257,6 +265,7 @@ public:
       // Maybe nothing is set?
       break;
     }
+    ENVOY_LOG_MISC(debug, "Stream action complete");
   }
 
   bool active() const {
@@ -428,6 +437,7 @@ void codecFuzz(const test::common::http::CodecImplFuzzTestCase& input, HttpVersi
         if (streams.empty()) {
           break;
         }
+        // Index into list of created streams (not HTTP/2 level stream ID).
         const uint32_t stream_id = stream_action.stream_id() % streams.size();
         ENVOY_LOG_MISC(trace, "action for stream index {}", stream_id);
         (*std::next(streams.begin(), stream_id))->streamAction(stream_action);
