diff --git a/source/common/buffer/buffer_impl.cc b/source/common/buffer/buffer_impl.cc
index 792fcb5341..870652362d 100644
--- a/source/common/buffer/buffer_impl.cc
+++ b/source/common/buffer/buffer_impl.cc
@@ -44,6 +44,16 @@ void OwnedImpl::add(const Instance& data) {
 }
 
 void OwnedImpl::prepend(absl::string_view data) {
+  // Prepending an empty string seems to mess up libevent internally.
+  // evbuffer_prepend doesn't have a check for empty (unlike
+  // evbuffer_prepend_buffer which does). This then results in an allocation of
+  // an empty chain, which causes problems with a following move/append. This
+  // only seems to happen the the original buffer was created via
+  // addBufferFragment(), this forces the code execution path in
+  // evbuffer_prepend related to immutable buffers.
+  if (data.size() == 0) {
+    return;
+  }
   evbuffer_prepend(buffer_.get(), data.data(), data.size());
 }
 
diff --git a/test/common/buffer/buffer_corpus/clusterfuzz-testcase-minimized-buffer_fuzz_test-5668091688648704 b/test/common/buffer/buffer_corpus/clusterfuzz-testcase-minimized-buffer_fuzz_test-5668091688648704
new file mode 100644
index 0000000000..2c1dd0c571
--- /dev/null
+++ b/test/common/buffer/buffer_corpus/clusterfuzz-testcase-minimized-buffer_fuzz_test-5668091688648704
@@ -0,0 +1 @@
+actions {   target_index: 1   read: 1 } actions {   add_buffer_fragment: 1 } actions {   prepend_string: 0 } actions {   add_string: 4 } actions {   target_index: 1   move {     length: 1   } } actions {   target_index: 1   add_buffer_fragment: 1 }
diff --git a/test/common/buffer/owned_impl_test.cc b/test/common/buffer/owned_impl_test.cc
index 9808c92db4..98d906f64a 100644
--- a/test/common/buffer/owned_impl_test.cc
+++ b/test/common/buffer/owned_impl_test.cc
@@ -186,6 +186,23 @@ TEST_F(OwnedImplTest, ToString) {
   EXPECT_EQ(absl::StrCat("Hello, world!" + long_string), buffer.toString());
 }
 
+// Regression test for oss-fuzz issue
+// https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=13263, where prepending
+// an empty buffer resulted in a corrupted libevent internal state.
+TEST_F(OwnedImplTest, PrependEmpty) {
+  Buffer::OwnedImpl buf;
+  Buffer::OwnedImpl other_buf;
+  char input[] = "foo";
+  BufferFragmentImpl frag(input, 3, nullptr);
+  buf.addBufferFragment(frag);
+  buf.prepend("");
+  other_buf.move(buf, 1);
+  buf.add("bar");
+  EXPECT_EQ("oobar", buf.toString());
+  buf.drain(5);
+  EXPECT_EQ(0, buf.length());
+}
+
 } // namespace
 } // namespace Buffer
 } // namespace Envoy
