glib-20210325-c3eb4a939	c3eb4a939	55cbc3151	Thu Mar 25 11:23:55 2021 +0000	fuzzing: Fix assertion failure in fuzz_paths.c	commit c3eb4a939be863b4ce79a657e558395ba0d559f6Author: Philip Withnall <pwithnall@endlessos.org>Date:   Thu Mar 25 11:23:55 2021 +0000    fuzzing: Fix assertion failure in fuzz_paths.c        If operating on a zero-length input, the return values of    `g_path_get_basename()` and `g_path_get_dirname()` are correctly `.`.    The assertions in the test didn’t account for this.        oss-fuzz#32454        Signed-off-by: Philip Withnall <pwithnall@endlessos.org>	32454	fuzzing/fuzz_paths.c	19
glib-20201005-a4cba7558	a4cba7558	4d00344e1	Mon Oct 5 13:53:02 2020 +0100	guri: Fix UTF-8 validation when escaping URI components	commit a4cba755816b75b5a2d821330d121e55c9be6a59Author: Philip Withnall <pwithnall@endlessos.org>Date:   Mon Oct 5 12:10:40 2020 +0100    guri: Fix UTF-8 validation when escaping URI components        The return value from `g_utf8_get_char_validated()` is a `gunichar`,    which is unsigned, so comparing it with `> 0` is always going to return    true, even for return values `(gunichar) -1` and `(gunichar) -2`, which    indicate errors.        Handle them more explicitly.        oss-fuzz#26083        Signed-off-by: Philip Withnall <pwithnall@endlessos.org>	26083	glib/guri.c;glib/tests/uri.c	420;466
glib-20200930-b43fb9cbf	b43fb9cbf	c363c3a9a	Wed Sep 30 19:39:30 2020 +0100	guri: Fix URI scope parsing	commit b43fb9cbfb033132e970f8b587d709c582dee1a0Author: Philip Withnall <pwithnall@endlessos.org>Date:   Wed Sep 30 18:52:18 2020 +0100    guri: Fix URI scope parsing        The previous parsing code could read off the end of a URI if it had an    incorrect %-escaped character in.        Fix that, and more closely implement parsing for the syntax defined in    RFC 6874, which is the amendment to RFC 3986 which specifies zone ID    syntax.        This requires reworking some network-address tests, which were    previously treating zone IDs incorrectly.        oss-fuzz#23816        Signed-off-by: Philip Withnall <pwithnall@endlessos.org>	23816	gio/tests/network-address.c;glib/guri.c;glib/tests/uri.c	40;80;337;445;462;697
glib-20200701-f9d165add	f9d165add	67ba5bfe6	Wed Jul 1 13:28:09 2020 +0100	guri: Fix buffer overrun when decoding %-encoded URI components	commit f9d165add1342ecae6cdde1b95e9ce63320768ddAuthor: Philip Withnall <withnall@endlessm.com>Date:   Wed Jul 1 11:54:05 2020 +0100    guri: Fix buffer overrun when decoding %-encoded URI components        There is a limited (1 or 2 byte) read off the end of the buffer if its    final or penultimate byte is `%` and it’s not nul-terminated after that.    If the buffer *is* nul-terminated then the first `g_ascii_isxdigit()`    call safely returns `FALSE` and the code moves on.        Fix it by adding an additional check, and some unit tests to catch the    behaviour.        This bug is present in libsoup, which `GUri` is based on, but not    exploitable due to how the external API only exposes nul-terminated    strings. See https://gitlab.gnome.org/GNOME/libsoup/-/merge_requests/126    for the fix there.        oss-fuzz#23815    oss-fuzz#23818        Signed-off-by: Philip Withnall <withnall@endlessm.com>	23815	glib/guri.c;glib/tests/uri.c	253;378;1284
glib-20190924-f4dd85628	f4dd85628	a902addf6	Tue Sep 24 18:00:53 2019 +0100	gdatetime: Fix error handling in g_date_time_new_week()	commit f4dd85628af916b58aaead3e8dd25d14d1a7cb95Author: Philip Withnall <withnall@endlessm.com>Date:   Tue Sep 24 18:00:53 2019 +0100    gdatetime: Fix error handling in g_date_time_new_week()        It was possible to pass in (for example) an invalid year to    g_date_time_new_week(), which would be passed on to g_date_time_new(),    which would (correctly) return `NULL` — but then    g_date_time_get_week_number() would try to dereference that.        Includes a test case.        oss-fuzz#17648        Signed-off-by: Philip Withnall <withnall@endlessm.com>	17648	glib/gdatetime.c;glib/tests/gdatetime.c	1241;868
glib-20190918-5c6030ef8	5c6030ef8	96c25ceba	Wed Sep 18 12:44:28 2019 +0100	gdatetime: Fix error handling in g_date_time_new_ordinal()	commit 5c6030ef8da30ef1ade25c55576c1a732d90a23aAuthor: Philip Withnall <withnall@endlessm.com>Date:   Wed Sep 18 12:42:39 2019 +0100    gdatetime: Fix error handling in g_date_time_new_ordinal()        It was possible to pass in (for example) an invalid hour to    g_date_time_new_ordinal(), which would be passed on to    g_date_time_new(), which would (correctly) return `NULL` — but then    g_date_time_new_ordinal() would try to dereference that.        Includes some test cases.        oss-fuzz#16103    oss-fuzz#17183        Signed-off-by: Philip Withnall <withnall@endlessm.com>	16103	glib/gdatetime.c;glib/tests/gdatetime.c	1220;866
glib-20190205-c927c59a8	c927c59a8	f2d51adc1	Tue Feb 5 15:50:15 2019 +0000	gvariant-parser: Fix error handling when type coalescing fails	commit c927c59a8426be62f9e9b19e40c862f88b4c17beAuthor: Philip Withnall <withnall@endlessm.com>Date:   Tue Feb 5 15:50:15 2019 +0000    gvariant-parser: Fix error handling when type coalescing fails        When parsing GVariant text format strings, we do a limited form of type    inference. The algorithm for type inference for nested array child types    is not complete, however (and making it complete, at least with a naive    implementation, would make it O(N^2), which is not worth it) and so some    text format arrays were triggering an assertion failure in the error    handling code.        Fix that by making the error handling code a little more relaxed, in the    knowledge that our type inference algorithm is not complete. See the    comment added to the code.        This includes a test case, provided by oss-fuzz.        oss-fuzz#11578        Signed-off-by: Philip Withnall <withnall@endlessm.com>	11578	glib/gvariant-parser.c;glib/tests/gvariant.c	671;705;3943
glib-20190205-0fcd5ac89	0fcd5ac89	f2d51adc1	Tue Feb 5 15:02:49 2019 +0000	gvariant-parser: Fix parsing of G_MININT* values in GVariant text format	commit 0fcd5ac89d442845254939870107cef40bafceefAuthor: Philip Withnall <withnall@endlessm.com>Date:   Tue Feb 5 13:47:25 2019 +0000    gvariant-parser: Fix parsing of G_MININT* values in GVariant text format        And add tests.        There wasn’t actually a bug on x86_64 before, but it was making use of    undefined behaviour, and hence triggering ubsan warnings. Make the code    more explicit, and avoid undefined behaviour.        oss-fuzz#12686        Signed-off-by: Philip Withnall <withnall@endlessm.com>	12686	glib/gvariant-parser.c;glib/tests/gvariant.c	1921;1931;1941;1951;4097;5068
glib-20181204-d2224b475	d2224b475	ca328615c	Tue Dec 4 12:55:21 2018 +0000	gvariant: Fix error handling for parsing Unicode escapes	commit d2224b475d20b544cf782ce046183209d419a012Author: Philip Withnall <withnall@endlessm.com>Date:   Tue Dec 4 12:55:21 2018 +0000    gvariant: Fix error handling for parsing Unicode escapes        When parsing an escaped Unicode character in a text format GVariant    string, such as '\U0001F415', the code uses g_ascii_strtoull(). This,    unexpectedly, accepts minus signs, which can cause an assertion failure    when input like '\u-FF4' is presented for parsing.        Validate that there are no leading sign characters when parsing.        This shouldn’t be considered a security bug, because the GVariant text    format parser should not be used on untrusted input.        oss-fuzz#11576        Signed-off-by: Philip Withnall <withnall@endlessm.com>	11576	glib/gvariant-parser.c;glib/tests/gvariant.c	1528;1538;1547;4039;4674
glib-20181023-eb7c9adc3	eb7c9adc3	da512adc3	Tue Oct 23 17:01:51 2018 +1300	gvariant: Fix checking arithmetic for tuple element ends	commit eb7c9adc3b2570f6b82110b52a24609d124f38deAuthor: Philip Withnall <withnall@endlessm.com>Date:   Thu Aug 16 20:12:02 2018 +0100    gvariant: Fix checking arithmetic for tuple element ends        When checking whether a serialised GVariant tuple is in normal form,    it’s possible for `offset_ptr -= offset_size` to underflow and wrap    around, resulting in gvs_read_unaligned_le() reading memory outside the    serialised GVariant bounds.        See §(Tuples) in gvariant-serialiser.c for the documentation on how    tuples are serialised. Briefly, all variable-length elements in the    tuple have an offset to their end stored in an array of offsets at the    end of the tuple. The width of each offset is in offset_size. offset_ptr    is added to the start of the serialised tuple to get the offset which is    currently being examined. The offset array is in reverse order compared    to the tuple elements, hence the subtraction.        The bug can be triggered if a tuple contains a load of variable-length    elements, each of whose length is actually zero (i.e. empty arrays).        Includes a unit test.        oss-fuzz#9801        Signed-off-by: Philip Withnall <withnall@endlessm.com>	9801	glib/gvariant-serialiser.c;glib/tests/gvariant.c	1065;4631;4692
glib-20180810-a9108f8bf	a9108f8bf	0d271223d	Fri Aug 10 10:30:13 2018 +0100	gvariant: Fix more bounds checking in GVariant text format parser	commit a9108f8bfd26da9d5054cce56c5dcd9292181240Author: Philip Withnall <withnall@endlessm.com>Date:   Fri Aug 10 10:28:06 2018 +0100    gvariant: Fix more bounds checking in GVariant text format parser        token_stream_prepare() was over-reading at the start of bytestring    literals (`b'blah'`).        Add tests for that, and for some other situations regarding bytestring    literal parsing, in order to try and get full branch coverage of that    bit of code.        oss-fuzz#9805        Signed-off-by: Philip Withnall <withnall@endlessm.com>	9805	glib/gvariant-parser.c;glib/tests/gvariant.c	197;3892
glib-20180806-2860d4b50	2860d4b50	0fba231a6	Mon Aug 6 13:36:21 2018 +0100	gbookmarkfile: Fix some more minor leaks when metadata elements are repeated	commit 2860d4b50e5401f2c15c276a8af5dd5b33bafe51Author: Philip Withnall <withnall@endlessm.com>Date:   Mon Aug 6 13:36:21 2018 +0100    gbookmarkfile: Fix some more minor leaks when metadata elements are repeated        oss-fuzz#9723        Signed-off-by: Philip Withnall <withnall@endlessm.com>	9723	glib/gbookmarkfile.c;glib/tests/Makefile.am	863;165;0
glib-20180802-6c041ff28	6c041ff28	433770b68	Thu Aug 2 11:20:15 2018 +0100	gbookmarkfile: Fix some minor leaks when metadata elements are repeated	commit 6c041ff2831e8a34b8fa06b1f14340cd843fbc0aAuthor: Philip Withnall <withnall@endlessm.com>Date:   Thu Aug 2 11:20:15 2018 +0100    gbookmarkfile: Fix some minor leaks when metadata elements are repeated        oss-fuzz#9674        Signed-off-by: Philip Withnall <withnall@endlessm.com>	9674	glib/gbookmarkfile.c;glib/tests/Makefile.am	915;964;164;0
