diff --git a/src/sksl/SkSLCompiler.cpp b/src/sksl/SkSLCompiler.cpp
index 9d4238f439..56bcddb891 100644
--- a/src/sksl/SkSLCompiler.cpp
+++ b/src/sksl/SkSLCompiler.cpp
@@ -529,7 +529,7 @@ bool is_constant(const Expression& expr, double value) {
             Constructor& c = (Constructor&) expr;
             if (c.fType.kind() == Type::kVector_Kind && c.isConstant()) {
                 for (int i = 0; i < c.fType.columns(); ++i) {
-                    if (!is_constant(c.getVecComponent(i), value)) {
+                    if (!is_constant(*c.getVecComponent(i), value)) {
                         return false;
                     }
                 }
diff --git a/src/sksl/SkSLIRGenerator.cpp b/src/sksl/SkSLIRGenerator.cpp
index b3dab81205..8d0b247273 100644
--- a/src/sksl/SkSLIRGenerator.cpp
+++ b/src/sksl/SkSLIRGenerator.cpp
@@ -1495,13 +1495,11 @@ std::unique_ptr<Expression> IRGenerator::constantFold(const Expression& left,
     }
     if (left.fType.kind() == Type::kVector_Kind && left.fType.componentType().isFloat() &&
         left.fType == right.fType) {
-        SkASSERT(left.fKind  == Expression::kConstructor_Kind);
-        SkASSERT(right.fKind == Expression::kConstructor_Kind);
         std::vector<std::unique_ptr<Expression>> args;
         #define RETURN_VEC_COMPONENTWISE_RESULT(op)                                    \
             for (int i = 0; i < left.fType.columns(); i++) {                           \
-                float value = ((Constructor&) left).getFVecComponent(i) op             \
-                              ((Constructor&) right).getFVecComponent(i);              \
+                float value = left.getFVecComponent(i) op             \
+                              right.getFVecComponent(i);              \
                 args.emplace_back(new FloatLiteral(fContext, -1, value));              \
             }                                                                          \
             return std::unique_ptr<Expression>(new Constructor(-1, left.fType,         \
diff --git a/src/sksl/ir/SkSLConstructor.h b/src/sksl/ir/SkSLConstructor.h
index 8ef1a70d9e..3db9646078 100644
--- a/src/sksl/ir/SkSLConstructor.h
+++ b/src/sksl/ir/SkSLConstructor.h
@@ -93,7 +93,7 @@ struct Constructor : public Expression {
         Constructor& c = (Constructor&) other;
         if (c.fType.kind() == Type::kVector_Kind) {
             for (int i = 0; i < fType.columns(); i++) {
-                if (!this->getVecComponent(i).compareConstant(context, c.getVecComponent(i))) {
+                if (!this->getVecComponent(i)->compareConstant(context, *c.getVecComponent(i))) {
                     return false;
                 }
             }
@@ -113,17 +113,17 @@ struct Constructor : public Expression {
         return true;
     }
 
-    const Expression& getVecComponent(int index) const {
+    const Expression* getVecComponent(int index) const {
         SkASSERT(fType.kind() == Type::kVector_Kind);
         if (fArguments.size() == 1 && fArguments[0]->fType.kind() == Type::kScalar_Kind) {
-            return *fArguments[0];
+            return fArguments[0].get();
         }
         int current = 0;
         for (const auto& arg : fArguments) {
             SkASSERT(current <= index);
             if (arg->fType.kind() == Type::kScalar_Kind) {
                 if (index == current) {
-                    return *arg;
+                    return arg.get();
                 }
                 current++;
             } else {
@@ -136,15 +136,15 @@ struct Constructor : public Expression {
         ABORT("failed to find vector component %d in %s\n", index, description().c_str());
     }
 
-    double getFVecComponent(int index) const {
-        return this->getVecComponent(index).getConstantFloat();
+    double getFVecComponent(int index) const override {
+        return this->getVecComponent(index)->getConstantFloat();
     }
 
-    int64_t getIVecComponent(int index) const {
-        return this->getVecComponent(index).getConstantInt();
+    int64_t getIVecComponent(int index) const override {
+        return this->getVecComponent(index)->getConstantInt();
     }
 
-    double getMatComponent(int col, int row) const {
+    double getMatComponent(int col, int row) const override {
         SkASSERT(this->isConstant());
         SkASSERT(fType.kind() == Type::kMatrix_Kind);
         SkASSERT(col < fType.columns() && row < fType.rows());
@@ -178,19 +178,7 @@ struct Constructor : public Expression {
                 if (arg->fType.columns() == 1) {
                     return arg->getConstantFloat();
                 } else {
-                    int index = targetIndex - currentIndex;
-                    switch (arg->fKind) {
-                        case Expression::kPrefix_Kind: {
-                            PrefixExpression& p = (PrefixExpression&) *arg;
-                            SkASSERT(p.fOperator == Token::MINUS);
-                            SkASSERT(p.fOperand->fKind == Expression::kConstructor_Kind);
-                            return -((Constructor&) *p.fOperand).getFVecComponent(index);
-                        }
-                        case Expression::kConstructor_Kind:
-                            return ((Constructor&) *arg).getFVecComponent(index);
-                        default:
-                            SkASSERT(false);
-                    }
+                    return arg->getFVecComponent(targetIndex - currentIndex);
                 }
             }
             currentIndex += arg->fType.columns();
diff --git a/src/sksl/ir/SkSLExpression.h b/src/sksl/ir/SkSLExpression.h
index 126f3a01d5..1ef5f7c918 100644
--- a/src/sksl/ir/SkSLExpression.h
+++ b/src/sksl/ir/SkSLExpression.h
@@ -107,6 +107,34 @@ struct Expression : public IRNode {
         return fType.coercionCost(target);
     }
 
+    /**
+     * For a literal vector expression, return the floating point value of the n'th vector
+     * component. It is an error to call this method on an expression which is not a literal vector.
+     */
+    virtual double getFVecComponent(int n) const {
+        SkASSERT(false);
+        return 0;
+    }
+
+    /**
+     * For a literal vector expression, return the integer value of the n'th vector component. It is
+     * an error to call this method on an expression which is not a literal vector.
+     */
+    virtual int64_t getIVecComponent(int n) const {
+        SkASSERT(false);
+        return 0;
+    }
+
+    /**
+     * For a literal matrix expression, return the floating point value of the component at
+     * [col][row]. It is an error to call this method on an expression which is not a literal
+     * matrix.
+     */
+    virtual double getMatComponent(int col, int row) const {
+        SkASSERT(false);
+        return 0;
+    }
+
     virtual std::unique_ptr<Expression> clone() const = 0;
 
     const Kind fKind;
diff --git a/src/sksl/ir/SkSLPrefixExpression.h b/src/sksl/ir/SkSLPrefixExpression.h
index 366f714fa3..26f41ef50e 100644
--- a/src/sksl/ir/SkSLPrefixExpression.h
+++ b/src/sksl/ir/SkSLPrefixExpression.h
@@ -45,6 +45,21 @@ struct PrefixExpression : public Expression {
         return nullptr;
     }
 
+    double getFVecComponent(int index) const override {
+        SkASSERT(fOperator == Token::Kind::MINUS);
+        return -fOperand->getFVecComponent(index);
+    }
+
+    int64_t getIVecComponent(int index) const override {
+        SkASSERT(fOperator == Token::Kind::MINUS);
+        return -fOperand->getIVecComponent(index);
+    }
+
+    double getMatComponent(int col, int row) const override {
+        SkASSERT(fOperator == Token::Kind::MINUS);
+        return -fOperand->getMatComponent(col, row);
+    }
+
     std::unique_ptr<Expression> clone() const override {
         return std::unique_ptr<Expression>(new PrefixExpression(fOperator, fOperand->clone()));
     }
