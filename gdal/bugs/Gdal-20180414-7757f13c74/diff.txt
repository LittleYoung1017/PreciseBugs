diff --git a/gdal/fuzzers/GNUmakefile b/gdal/fuzzers/GNUmakefile
index 21d6ce169f..56e92ab119 100644
--- a/gdal/fuzzers/GNUmakefile
+++ b/gdal/fuzzers/GNUmakefile
@@ -19,6 +19,10 @@ default:	$(OBJ:.o=.$(OBJ_EXT))
 
 clean:
 	$(RM) *.o $(O_OBJ) libFuzzingEngine.a
+	$(RM) gdal_translate_fuzzer$(EXE)
+
+gdal_translate_fuzzer$(EXE): gdal_translate_fuzzer.$(OBJ_EXT) $(DEP_LIBS)
+	$(LD) $(LDFLAGS) $(LNK_FLAGS) $(CXXFLAGS) $(GDAL_INCLUDE) gdal_translate_fuzzer.cpp fuzzingengine.cpp $(XTRAOBJ) $(CONFIG_LIBS) -o $@
 
 dummyfuzzers: fuzzingengine.o
 	$(AR) r libFuzzingEngine.a fuzzingengine.o
diff --git a/gdal/gcore/overview.cpp b/gdal/gcore/overview.cpp
index 4e08b678e3..01a04c8e57 100644
--- a/gdal/gcore/overview.cpp
+++ b/gdal/gcore/overview.cpp
@@ -690,7 +690,7 @@ GDALResampleChunk32R_Gauss( double dfXRatioDstToSrc, double dfYRatioDstToSrc,
 
 #ifdef DEBUG_OUT_OF_BOUND_ACCESS
     int* panGaussMatrixDup = static_cast<int*>(
-        CPLMalloc(sizeof(int) * nGaussMatrixDim * nGaussMatrixDim)=;
+        CPLMalloc(sizeof(int) * nGaussMatrixDim * nGaussMatrixDim));
     memcpy(panGaussMatrixDup, panGaussMatrix,
            sizeof(int) * nGaussMatrixDim * nGaussMatrixDim);
     panGaussMatrix = panGaussMatrixDup;
@@ -760,6 +760,14 @@ GDALResampleChunk32R_Gauss( double dfXRatioDstToSrc, double dfYRatioDstToSrc,
         const int iSizeY = nSrcYOff2 - nSrcYOff;
         nSrcYOff = nSrcYOff + iSizeY/2 - nGaussMatrixDim/2;
         nSrcYOff2 = nSrcYOff + nGaussMatrixDim;
+
+        if( nSrcYOff2 > nChunkBottomYOff ||
+            (dfYRatioDstToSrc > 1 && iDstLine == nOYSize-1) )
+        {
+            nSrcYOff2 = std::min(nChunkBottomYOff,
+                                 nSrcYOff + nGaussMatrixDim);
+        }
+
         int nYShiftGaussMatrix = 0;
         if(nSrcYOff < 0)
         {
@@ -767,15 +775,6 @@ GDALResampleChunk32R_Gauss( double dfXRatioDstToSrc, double dfYRatioDstToSrc,
             nSrcYOff = 0;
         }
 
-        if( nSrcYOff2 > nChunkBottomYOff ||
-            (dfYRatioDstToSrc > 1 && iDstLine == nOYSize-1) )
-        {
-            if( nChunkBottomYOff - nSrcYOff <= nGaussMatrixDim )
-            {
-                nSrcYOff2 = nChunkBottomYOff;
-            }
-        }
-
         const float * const pafSrcScanline =
             pafChunk + ((nSrcYOff-nChunkYOff) * nChunkXSize);
         GByte *pabySrcScanlineNodataMask = nullptr;
@@ -795,6 +794,14 @@ GDALResampleChunk32R_Gauss( double dfXRatioDstToSrc, double dfYRatioDstToSrc,
             const int iSizeX = nSrcXOff2 - nSrcXOff;
             nSrcXOff = nSrcXOff + iSizeX/2 - nGaussMatrixDim/2;
             nSrcXOff2 = nSrcXOff + nGaussMatrixDim;
+
+            if( nSrcXOff2 > nChunkRightXOff ||
+                (dfXRatioDstToSrc > 1 && iDstPixel == nOXSize-1) )
+            {
+                nSrcXOff2 = std::min(nChunkRightXOff,
+                                     nSrcXOff + nGaussMatrixDim);
+            }
+
             int nXShiftGaussMatrix = 0;
             if(nSrcXOff < 0)
             {
@@ -802,15 +809,6 @@ GDALResampleChunk32R_Gauss( double dfXRatioDstToSrc, double dfYRatioDstToSrc,
                 nSrcXOff = 0;
             }
 
-            if( nSrcXOff2 > nChunkRightXOff ||
-                (dfXRatioDstToSrc > 1 && iDstPixel == nOXSize-1) )
-            {
-                if( nChunkRightXOff - nSrcXOff <= nGaussMatrixDim )
-                {
-                    nSrcXOff2 = nChunkRightXOff;
-                }
-            }
-
             if( poColorTable == nullptr )
             {
                 double dfTotal = 0.0;
@@ -908,7 +906,7 @@ GDALResampleChunk32R_Gauss( double dfXRatioDstToSrc, double dfYRatioDstToSrc,
     CPLFree( pafDstScanline );
     CPLFree( aEntries );
 #ifdef DEBUG_OUT_OF_BOUND_ACCESS
-    CPLFree( panGaussMatrixNew );
+    CPLFree( panGaussMatrixDup );
 #endif
 
     return eErr;
