diff --git a/gdal/ogr/ogrsf_frmts/flatgeobuf/ogr_flatgeobuf.h b/gdal/ogr/ogrsf_frmts/flatgeobuf/ogr_flatgeobuf.h
index 0d6b6a2006..582d813645 100644
--- a/gdal/ogr/ogrsf_frmts/flatgeobuf/ogr_flatgeobuf.h
+++ b/gdal/ogr/ogrsf_frmts/flatgeobuf/ogr_flatgeobuf.h
@@ -203,6 +203,5 @@ class OGRFlatGeobufDataset final: public GDALDataset
         char** GetFileList() override;
 };
 
-
 #endif /* ndef OGR_FLATGEOBUF_H_INCLUDED */
 
diff --git a/gdal/ogr/ogrsf_frmts/flatgeobuf/packedrtree.cpp b/gdal/ogr/ogrsf_frmts/flatgeobuf/packedrtree.cpp
index a7ecaa487b..c2128e6c9a 100644
--- a/gdal/ogr/ogrsf_frmts/flatgeobuf/packedrtree.cpp
+++ b/gdal/ogr/ogrsf_frmts/flatgeobuf/packedrtree.cpp
@@ -43,12 +43,13 @@
 namespace FlatGeobuf
 {
 
-void NodeItem::expand(const NodeItem& r)
+const NodeItem &NodeItem::expand(const NodeItem &r)
 {
     if (r.minX < minX) minX = r.minX;
     if (r.minY < minY) minY = r.minY;
     if (r.maxX > maxX) maxX = r.maxX;
     if (r.maxY > maxY) maxY = r.maxY;
+    return *this;
 }
 
 NodeItem NodeItem::create(uint64_t offset)
@@ -62,7 +63,7 @@ NodeItem NodeItem::create(uint64_t offset)
     };
 }
 
-bool NodeItem::intersects(const NodeItem& r) const
+bool NodeItem::intersects(const NodeItem &r) const
 {
     if (maxX < r.minX) return false;
     if (maxY < r.minY) return false;
@@ -126,11 +127,16 @@ uint32_t hilbert(uint32_t x, uint32_t y)
     return value;
 }
 
-uint32_t hilbert(const NodeItem& r, uint32_t hilbertMax, const NodeItem& extent)
+uint32_t hilbert(const NodeItem &r, uint32_t hilbertMax, const double minX, const double minY, const double width, const double height)
 {
-    uint32_t x = static_cast<uint32_t>(floor(hilbertMax * ((r.minX + r.maxX) / 2 - extent.minX) / extent.width()));
-    uint32_t y = static_cast<uint32_t>(floor(hilbertMax * ((r.minY + r.maxY) / 2 - extent.minY) / extent.height()));
-    uint32_t v = hilbert(x, y);
+    uint32_t x = 0;
+    uint32_t y = 0;
+    uint32_t v;
+    if (width != 0.0)
+        x = static_cast<uint32_t>(floor(hilbertMax * ((r.minX + r.maxX) / 2 - minX) / width));
+    if (height != 0.0)
+        y = static_cast<uint32_t>(floor(hilbertMax * ((r.minY + r.maxY) / 2 - minY) / height));
+    v = hilbert(x, y);
     return v;
 }
 
@@ -138,42 +144,43 @@ const uint32_t hilbertMax = (1 << 16) - 1;
 
 void hilbertSort(std::vector<std::shared_ptr<Item>> &items)
 {
-    NodeItem extent = std::accumulate(items.begin(), items.end(), NodeItem::create(0), [] (NodeItem a, std::shared_ptr<Item> b) {
-        a.expand(b->nodeItem);
-        return a;
-    });
-    std::sort(items.begin(), items.end(), [&extent] (std::shared_ptr<Item> a, std::shared_ptr<Item> b) {
-        uint32_t ha = hilbert(a->nodeItem, hilbertMax, extent);
-        uint32_t hb = hilbert(b->nodeItem, hilbertMax, extent);
+    NodeItem extent = calcExtent(items);
+    const double minX = extent.minX;
+    const double minY = extent.minY;
+    const double width = extent.width();
+    const double height = extent.height();
+    std::sort(items.begin(), items.end(), [minX, minY, width, height] (std::shared_ptr<Item> a, std::shared_ptr<Item> b) {
+        uint32_t ha = hilbert(a->nodeItem, hilbertMax, minX, minY, width, height);
+        uint32_t hb = hilbert(b->nodeItem, hilbertMax, minX, minY, width, height);
         return ha > hb;
     });
 }
 
-NodeItem calcExtent(const std::vector<NodeItem> &nodes)
+void hilbertSort(std::vector<NodeItem> &items)
 {
-    NodeItem extent = std::accumulate(nodes.begin(), nodes.end(), NodeItem::create(0), [] (NodeItem a, const NodeItem& b) {
-        a.expand(b);
-        return a;
+    NodeItem extent = calcExtent(items);
+    const double minX = extent.minX;
+    const double minY = extent.minY;
+    const double width = extent.width();
+    const double height = extent.height();
+    std::sort(items.begin(), items.end(), [minX, minY, width, height] (const NodeItem &a, const NodeItem &b) {
+        uint32_t ha = hilbert(a, hilbertMax, minX, minY, width, height);
+        uint32_t hb = hilbert(b, hilbertMax, minX, minY, width, height);
+        return ha > hb;
     });
-    return extent;
 }
 
 NodeItem calcExtent(const std::vector<std::shared_ptr<Item>> &items)
 {
-    NodeItem extent = std::accumulate(items.begin(), items.end(), NodeItem::create(0), [] (NodeItem a, std::shared_ptr<Item> b) {
-        a.expand(b->nodeItem);
-        return a;
+    return std::accumulate(items.begin(), items.end(), NodeItem::create(0), [] (NodeItem &a, std::shared_ptr<Item> b) {
+        return a.expand(b->nodeItem);
     });
-    return extent;
 }
 
-void hilbertSort(std::vector<NodeItem> &items)
+NodeItem calcExtent(const std::vector<NodeItem> &nodes)
 {
-    NodeItem extent = calcExtent(items);
-    std::sort(items.begin(), items.end(), [&extent] (const NodeItem& a, const NodeItem& b) {
-        uint32_t ha = hilbert(a, hilbertMax, extent);
-        uint32_t hb = hilbert(b, hilbertMax, extent);
-        return ha > hb;
+    return std::accumulate(nodes.begin(), nodes.end(), NodeItem::create(0), [] (NodeItem &a, const NodeItem &b) {
+        return a.expand(b);
     });
 }
 
@@ -211,10 +218,8 @@ std::vector<std::pair<uint64_t, uint64_t>> PackedRTree::generateLevelBounds(cons
     // bounds per level in reversed storage order (top-down)
     std::vector<uint64_t> levelOffsets;
     n = numNodes;
-    for (auto size : levelNumNodes) {
-        levelOffsets.push_back(n - size);
-        n -= size;
-    }
+    for (auto size : levelNumNodes)
+        levelOffsets.push_back(n -= size);
     std::reverse(levelOffsets.begin(), levelOffsets.end());
     std::reverse(levelNumNodes.begin(), levelNumNodes.end());
     std::vector<std::pair<uint64_t, uint64_t>> levelBounds;
@@ -250,25 +255,23 @@ void PackedRTree::fromData(const void *data)
     }
 }
 
-PackedRTree::PackedRTree(const std::vector<std::shared_ptr<Item>> &items, const NodeItem& extent, const uint16_t nodeSize) :
+PackedRTree::PackedRTree(const std::vector<std::shared_ptr<Item>> &items, const NodeItem &extent, const uint16_t nodeSize) :
     _extent(extent),
     _numItems(items.size())
 {
     init(nodeSize);
-    for (size_t i = 0; i < _numItems; i++) {
+    for (size_t i = 0; i < _numItems; i++)
         _nodeItems[_numNodes - _numItems + i] = items[i]->nodeItem;
-    }
     generateNodes();
 }
 
-PackedRTree::PackedRTree(const std::vector<NodeItem> &nodes, const NodeItem& extent, const uint16_t nodeSize) :
+PackedRTree::PackedRTree(const std::vector<NodeItem> &nodes, const NodeItem &extent, const uint16_t nodeSize) :
     _extent(extent),
     _numItems(nodes.size())
 {
     init(nodeSize);
-    for (size_t i = 0; i < _numItems; i++) {
+    for (size_t i = 0; i < _numItems; i++)
         _nodeItems[_numNodes - _numItems + i] = nodes[i];
-    }
     generateNodes();
 }
 
@@ -310,7 +313,7 @@ std::vector<SearchResultItem> PackedRTree::search(double minX, double minY, doub
 }
 
 std::vector<SearchResultItem> PackedRTree::streamSearch(
-    const uint64_t numItems, const uint16_t nodeSize, const NodeItem& item,
+    const uint64_t numItems, const uint16_t nodeSize, const NodeItem &item,
     const std::function<void(uint8_t *, size_t, size_t)> &readNode)
 {
     auto levelBounds = generateLevelBounds(numItems, nodeSize);
diff --git a/gdal/ogr/ogrsf_frmts/flatgeobuf/packedrtree.h b/gdal/ogr/ogrsf_frmts/flatgeobuf/packedrtree.h
index 62a4b430ac..1666ac3351 100644
--- a/gdal/ogr/ogrsf_frmts/flatgeobuf/packedrtree.h
+++ b/gdal/ogr/ogrsf_frmts/flatgeobuf/packedrtree.h
@@ -46,13 +46,13 @@ struct NodeItem {
     uint64_t offset;
     double width() const { return maxX - minX; }
     double height() const { return maxY - minY; }
-    static NodeItem sum(NodeItem a, const NodeItem& b) {
+    static NodeItem sum(NodeItem a, const NodeItem &b) {
         a.expand(b);
         return a;
     }
     static NodeItem create(uint64_t offset = 0);
-    void expand(const NodeItem& r);
-    bool intersects(const NodeItem& r) const;
+    const NodeItem &expand(const NodeItem &r);
+    bool intersects(const NodeItem &r) const;
     std::vector<double> toVector();
 };
 
@@ -68,7 +68,7 @@ struct SearchResultItem {
 std::ostream& operator << (std::ostream& os, NodeItem const& value);
 
 uint32_t hilbert(uint32_t x, uint32_t y);
-uint32_t hilbert(const NodeItem& n, uint32_t hilbertMax, const NodeItem& extent);
+uint32_t hilbert(const NodeItem &n, uint32_t hilbertMax, const double minX, const double minY, const double width, const double height);
 void hilbertSort(std::vector<std::shared_ptr<Item>> &items);
 void hilbertSort(std::vector<NodeItem> &items);
 NodeItem calcExtent(const std::vector<std::shared_ptr<Item>> &items);
@@ -93,12 +93,12 @@ public:
         if (_nodeItems != nullptr)
             delete[] _nodeItems;
     }
-    PackedRTree(const std::vector<std::shared_ptr<Item>> &items, const NodeItem& extent, const uint16_t nodeSize = 16);
-    PackedRTree(const std::vector<NodeItem> &nodes, const NodeItem& extent, const uint16_t nodeSize = 16);
+    PackedRTree(const std::vector<std::shared_ptr<Item>> &items, const NodeItem &extent, const uint16_t nodeSize = 16);
+    PackedRTree(const std::vector<NodeItem> &nodes, const NodeItem &extent, const uint16_t nodeSize = 16);
     PackedRTree(const void *data, const uint64_t numItems, const uint16_t nodeSize = 16);
     std::vector<SearchResultItem> search(double minX, double minY, double maxX, double maxY) const;
     static std::vector<SearchResultItem> streamSearch(
-        const uint64_t numItems, const uint16_t nodeSize, const NodeItem& item,
+        const uint64_t numItems, const uint16_t nodeSize, const NodeItem &item,
         const std::function<void(uint8_t *, size_t, size_t)> &readNode);
     static std::vector<std::pair<uint64_t, uint64_t>> generateLevelBounds(const uint64_t numItems, const uint16_t nodeSize);
     uint64_t size() const;
