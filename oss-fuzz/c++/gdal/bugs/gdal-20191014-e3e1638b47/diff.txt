diff --git a/gdal/ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobuflayer.cpp b/gdal/ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobuflayer.cpp
index 1735132d98..f692206e57 100644
--- a/gdal/ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobuflayer.cpp
+++ b/gdal/ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobuflayer.cpp
@@ -38,13 +38,18 @@
 using namespace flatbuffers;
 using namespace FlatGeobuf;
 
-static OGRGeometry *CPLErrorInvalidPointer() {
-    CPLError(CE_Failure, CPLE_AppDefined, "Possible data corruption - unexpected nullptr");
+static std::nullptr_t CPLErrorInvalidPointer() {
+    CPLError(CE_Failure, CPLE_AppDefined, "Unexpected nullptr - possible data corruption");
     return nullptr;
 }
 
-static OGRErr CPLErrorInvalidProperties() {
-    CPLError(CE_Failure, CPLE_AppDefined, "Possible data corruption - properties buffer has invalid size");
+static std::nullptr_t CPLErrorInvalidLength() {
+    CPLError(CE_Failure, CPLE_AppDefined, "Invalid length detected - possible data corruption");
+    return nullptr;
+}
+
+static OGRErr CPLErrorInvalidSize() {
+    CPLError(CE_Failure, CPLE_AppDefined, "Invalid size detected - possible data corruption");
     return OGRERR_CORRUPT_DATA;
 }
 
@@ -246,7 +251,7 @@ void OGRFlatGeobufLayer::readColumns()
 void OGRFlatGeobufLayer::Create() {
     CPLDebug("FlatGeobuf", "Request to create %lu features", static_cast<long unsigned int>(m_featuresCount));
 
-    if (m_featuresCount > std::numeric_limits<size_t>::max() / 8) {
+    if (m_featuresCount >= std::numeric_limits<size_t>::max() / 8) {
         CPLError(CE_Failure, CPLE_AppDefined, "Too many features for this architecture");
         return;
     }
@@ -613,10 +618,10 @@ OGRErr OGRFlatGeobufLayer::parseFeature(OGRFeature *poFeature, OGRGeometry **ogr
         // size must be at least large enough to contain
         // a single column index and smallest value type
         if (size > 0 && size < (sizeof(uint16_t) + sizeof(uint8_t)))
-            return CPLErrorInvalidProperties();
+            return CPLErrorInvalidSize();
         while (offset < (size - 1)) {
             if (offset + sizeof(uint16_t) > size)
-                return CPLErrorInvalidProperties();
+                return CPLErrorInvalidSize();
             uint16_t i = *((uint16_t *)(data + offset));
             offset += sizeof(uint16_t);
             //CPLDebug("FlatGeobuf", "i: %d", i);
@@ -636,32 +641,32 @@ OGRErr OGRFlatGeobufLayer::parseFeature(OGRFeature *poFeature, OGRGeometry **ogr
             switch (type) {
                 case ColumnType::Int:
                     if (offset + sizeof(int32_t) > size)
-                        return CPLErrorInvalidProperties();
+                        return CPLErrorInvalidSize();
                     if (!isIgnored)
                         ogrField->Integer = *((int32_t *)(data + offset));
                     offset += sizeof(int32_t);
                     break;
                 case ColumnType::Long:
                     if (offset + sizeof(int64_t) > size)
-                        return CPLErrorInvalidProperties();
+                        return CPLErrorInvalidSize();
                     if (!isIgnored)
                         ogrField->Integer64 = *((int64_t *)(data + offset));
                     offset += sizeof(int64_t);
                     break;
                 case ColumnType::Double:
                     if (offset + sizeof(double) > size)
-                        return CPLErrorInvalidProperties();
+                        return CPLErrorInvalidSize();
                     if (!isIgnored)
                         ogrField->Real = *((double *)(data + offset));
                     offset += sizeof(double);
                     break;
                 case ColumnType::DateTime: {
                     if (offset + sizeof(uint32_t) > size)
-                        return CPLErrorInvalidProperties();
+                        return CPLErrorInvalidSize();
                     uint32_t len = *((uint32_t *)(data + offset));
                     offset += sizeof(uint32_t);
                     if (offset + len > size)
-                        return CPLErrorInvalidProperties();
+                        return CPLErrorInvalidSize();
                     char *str = (char *) VSIMalloc(len + 1);
                     memcpy(str, data + offset, len);
                     offset += len;
@@ -672,11 +677,11 @@ OGRErr OGRFlatGeobufLayer::parseFeature(OGRFeature *poFeature, OGRGeometry **ogr
                 }
                 case ColumnType::String: {
                     if (offset + sizeof(uint32_t) > size)
-                        return CPLErrorInvalidProperties();
+                        return CPLErrorInvalidSize();
                     uint32_t len = *((uint32_t *)(data + offset));
                     offset += sizeof(uint32_t);
                     if (offset + len > size)
-                        return CPLErrorInvalidProperties();
+                        return CPLErrorInvalidSize();
                     uint8_t *str = (uint8_t *) VSIMalloc(len + 1);
                     memcpy(str, data + offset, len);
                     offset += len;
@@ -730,6 +735,8 @@ OGRLineString *OGRFlatGeobufLayer::readLineString(const Feature *feature, uint32
 OGRMultiLineString *OGRFlatGeobufLayer::readMultiLineString(const Feature *feature)
 {
     auto ends = feature->ends();
+    if (ends == nullptr)
+        return CPLErrorInvalidPointer();
     auto mls = new OGRMultiLineString();
     uint32_t offset = 0;
     for (uint32_t i = 0; i < ends->size(); i++) {
@@ -781,12 +788,14 @@ OGRPolygon *OGRFlatGeobufLayer::readPolygon(const Feature *feature, uint32_t len
 
 OGRMultiPolygon *OGRFlatGeobufLayer::readMultiPolygon(const Feature *feature, uint32_t len)
 {
-    auto ends = feature->ends();
     auto lengths = feature->lengths();
     auto mp = new OGRMultiPolygon();
     if (lengths == nullptr || lengths->size() < 2) {
         mp->addGeometryDirectly(readPolygon(feature, len));
     } else {
+        auto ends = feature->ends();
+        if (ends == nullptr)
+            return CPLErrorInvalidPointer();
         uint32_t offset = 0;
         uint32_t roffset = 0;
         for (uint32_t i = 0; i < lengths->size(); i++) {
@@ -813,6 +822,8 @@ OGRGeometry *OGRFlatGeobufLayer::readGeometry(const Feature *feature)
     if (m_hasM && feature->m() == nullptr)
         return CPLErrorInvalidPointer();
     auto xySize = pXy->size();
+    if (xySize >= (feature_max_buffer_size / sizeof(OGRRawPoint)))
+        return CPLErrorInvalidLength();
     switch (m_geometryType) {
         case GeometryType::Point:
             return readPoint(feature);
@@ -892,7 +903,7 @@ OGRErr OGRFlatGeobufLayer::ICreateFeature(OGRFeature *poNewFeature)
             case OGRFieldType::OFTDateTime: {
                 char *str = OGRGetXMLDateTime(field);
                 size_t len = strlen(str);
-                if (len >= std::numeric_limits<uint32_t>::max()) {
+                if (len >= feature_max_buffer_size) {
                     CPLError(CE_Failure, CPLE_AppDefined, "ICreateFeature: String too long");
                     CPLFree(str);
                     return OGRERR_FAILURE;
@@ -905,7 +916,7 @@ OGRErr OGRFlatGeobufLayer::ICreateFeature(OGRFeature *poNewFeature)
             }
             case OGRFieldType::OFTString: {
                 size_t len = strlen(field->String);
-                if (len >= std::numeric_limits<uint32_t>::max()) {
+                if (len >= feature_max_buffer_size) {
                     CPLError(CE_Failure, CPLE_AppDefined, "ICreateFeature: String too long");
                     return OGRERR_FAILURE;
                 }
diff --git a/gdal/ogr/ogrsf_frmts/flatgeobuf/packedrtree.cpp b/gdal/ogr/ogrsf_frmts/flatgeobuf/packedrtree.cpp
index fbf8b2df84..d529633915 100644
--- a/gdal/ogr/ogrsf_frmts/flatgeobuf/packedrtree.cpp
+++ b/gdal/ogr/ogrsf_frmts/flatgeobuf/packedrtree.cpp
@@ -318,8 +318,9 @@ uint64_t PackedRTree::size(const uint64_t numItems, const uint16_t nodeSize)
     if (numItems == 0)
         throw std::invalid_argument("Number of items must be greater than 0");
     const uint16_t nodeSizeMin = std::min(std::max(nodeSize, static_cast<uint16_t>(2)), static_cast<uint16_t>(65535));
-    if (numItems > std::numeric_limits<uint64_t>::max() - ((numItems / nodeSizeMin) * 2))
-        throw std::overflow_error("Number of items too large");
+    // limit so that resulting size in bytes can be represented by uint64_t
+    if (numItems > static_cast<uint64_t>(1) << 56)
+        throw std::overflow_error("Number of items must be less than 2^56");
     uint64_t n = numItems;
     uint64_t numNodes = n;
     do {
