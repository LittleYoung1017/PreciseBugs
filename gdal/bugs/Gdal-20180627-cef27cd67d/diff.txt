diff --git a/gdal/ogr/ogrsf_frmts/cad/libopencad/cadheader.cpp b/gdal/ogr/ogrsf_frmts/cad/libopencad/cadheader.cpp
index 2a7ebc25d5..8d6d51c844 100644
--- a/gdal/ogr/ogrsf_frmts/cad/libopencad/cadheader.cpp
+++ b/gdal/ogr/ogrsf_frmts/cad/libopencad/cadheader.cpp
@@ -189,6 +189,7 @@ void CADHandle::addOffset( unsigned char val )
 
 long CADHandle::getAsLong( const CADHandle& ref_handle ) const
 {
+    // FIXME: Remove GDAL specific code. The library cannot compile as separate project.
     try
     {
         switch( code )
diff --git a/gdal/ogr/ogrsf_frmts/cad/libopencad/dwg/io.cpp b/gdal/ogr/ogrsf_frmts/cad/libopencad/dwg/io.cpp
index d4511ea8ff..01ecea1ad2 100644
--- a/gdal/ogr/ogrsf_frmts/cad/libopencad/dwg/io.cpp
+++ b/gdal/ogr/ogrsf_frmts/cad/libopencad/dwg/io.cpp
@@ -294,6 +294,13 @@ double CADBuffer::ReadBITDOUBLE()
 void CADBuffer::SkipBITDOUBLE()
 {
     unsigned char BITCODE = Read2B();
+    size_t nByteOffset      = m_nBitOffsetFromStart / 8;
+    const char * pDoubleFirstByte = m_pBuffer + nByteOffset;
+    if(pDoubleFirstByte + 9 > m_guard)
+    {
+        m_bEOB = true;
+        return;
+    }
 
     switch( BITCODE )
     {
@@ -845,6 +852,13 @@ void CADBuffer::SkipTV()
 void CADBuffer::SkipBITLONG()
 {
     unsigned char BITCODE = Read2B();
+    size_t nByteOffset      = m_nBitOffsetFromStart / 8;
+    const char * pLongFirstByte = m_pBuffer + nByteOffset;
+    if(pLongFirstByte + 5 > m_guard)
+    {
+        m_bEOB = true;
+        return;
+    } 
     switch( BITCODE )
     {
         case BITLONG_NORMAL:
@@ -864,6 +878,13 @@ void CADBuffer::SkipBITLONG()
 void CADBuffer::SkipBITSHORT()
 {
     unsigned char BITCODE = Read2B();
+    size_t nByteOffset      = m_nBitOffsetFromStart / 8;
+    const char * pShortFirstByte = m_pBuffer + nByteOffset;
+    if(pShortFirstByte + 4 > m_guard)
+    {
+        m_bEOB = true;
+        return;
+    }
     switch( BITCODE )
     {
         case BITSHORT_NORMAL:
@@ -882,6 +903,13 @@ void CADBuffer::SkipBITSHORT()
 
 void CADBuffer::SkipBIT()
 {
+    size_t nByteOffset      = m_nBitOffsetFromStart / 8;
+    const char * pBoolByte = m_pBuffer + nByteOffset;
+    if(pBoolByte >= m_guard)
+    {
+        m_bEOB = true;
+        return;
+    } 
     ++m_nBitOffsetFromStart;
 }
 
