diff --git a/autotest/gcore/data/1bit_2bands.tif b/autotest/gcore/data/1bit_2bands.tif
new file mode 100644
index 0000000000..de715d2a28
Binary files /dev/null and b/autotest/gcore/data/1bit_2bands.tif differ
diff --git a/autotest/gcore/tiff_read.py b/autotest/gcore/tiff_read.py
index 06dff61a1e..86f31e46df 100755
--- a/autotest/gcore/tiff_read.py
+++ b/autotest/gcore/tiff_read.py
@@ -3751,6 +3751,17 @@ def tiff_read_zstd_corrupted2():
 ###############################################################################
 
 
+def tiff_read_1bit_2bands():
+    ds = gdal.Open('data/1bit_2bands.tif')
+    cs = (ds.GetRasterBand(1).Checksum(), ds.GetRasterBand(2).Checksum())
+    if cs != (200, 824):
+        print(cs)
+        return 'fail'
+    return 'success'
+
+###############################################################################
+
+
 for item in init_list:
     ut = gdaltest.GDALTest('GTiff', item[0], item[1], item[2])
     if ut is None:
@@ -3876,6 +3887,7 @@ gdaltest_list.append((tiff_read_negative_scaley))
 gdaltest_list.append((tiff_read_zstd))
 gdaltest_list.append((tiff_read_zstd_corrupted))
 gdaltest_list.append((tiff_read_zstd_corrupted2))
+gdaltest_list.append((tiff_read_1bit_2bands))
 
 gdaltest_list.append((tiff_read_online_1))
 gdaltest_list.append((tiff_read_online_2))
diff --git a/gdal/frmts/gtiff/geotiff.cpp b/gdal/frmts/gtiff/geotiff.cpp
index 6f7cfd0bc9..c4a70a9c8e 100644
--- a/gdal/frmts/gtiff/geotiff.cpp
+++ b/gdal/frmts/gtiff/geotiff.cpp
@@ -6875,8 +6875,8 @@ CPLErr GTiffOddBitsBand::IReadBlock( int nBlockXOff, int nBlockYOff,
 /* -------------------------------------------------------------------- */
     else
     {
-        int iPixelBitSkip = 0;
-        int iBandBitOffset = 0;
+        unsigned iPixelBitSkip = 0;
+        unsigned iBandBitOffset = 0;
 
         if( poGDS->nPlanarConfig == PLANARCONFIG_CONTIG )
         {
@@ -6889,23 +6889,42 @@ CPLErr GTiffOddBitsBand::IReadBlock( int nBlockXOff, int nBlockYOff,
         }
 
         // Bits per line rounds up to next byte boundary.
-        GIntBig nBitsPerLine = static_cast<GIntBig>(nBlockXSize) * iPixelBitSkip;
+        GUIntBig nBitsPerLine = static_cast<GUIntBig>(nBlockXSize) * iPixelBitSkip;
         if( (nBitsPerLine & 7) != 0 )
             nBitsPerLine = (nBitsPerLine + 7) & (~7);
 
         const GByte * const pabyBlockBuf = poGDS->pabyBlockBuf;
-        const int nBitsPerSample = poGDS->nBitsPerSample;
-        int iPixel = 0;
+        const unsigned nBitsPerSample = poGDS->nBitsPerSample;
+        unsigned iPixel = 0;
 
-        for( int iY = 0; iY < nBlockYSize; ++iY )
+        if( nBitsPerSample == 1 && eDataType == GDT_Byte )
         {
-            GIntBig iBitOffset = iBandBitOffset + iY * nBitsPerLine;
+          for( unsigned iY = 0; iY < static_cast<unsigned>(nBlockYSize); ++iY )
+          {
+            GUIntBig iBitOffset = iBandBitOffset + iY * nBitsPerLine;
 
-            for( int iX = 0; iX < nBlockXSize; ++iX )
+            for( unsigned iX = 0; iX < static_cast<unsigned>(nBlockXSize); ++iX )
+            {
+                if( pabyBlockBuf[iBitOffset>>3] & (0x80 >>(iBitOffset & 7)) )
+                    static_cast<GByte *>(pImage)[iPixel] = 1;
+                else
+                    static_cast<GByte *>(pImage)[iPixel] = 0;
+                iBitOffset += iPixelBitSkip;
+                iPixel++;
+            }
+          }
+        }
+        else
+        {
+          for( unsigned iY = 0; iY < static_cast<unsigned>(nBlockYSize); ++iY )
+          {
+            GUIntBig iBitOffset = iBandBitOffset + iY * nBitsPerLine;
+
+            for( unsigned iX = 0; iX < static_cast<unsigned>(nBlockXSize); ++iX )
             {
-                int nOutWord = 0;
+                unsigned nOutWord = 0;
 
-                for( int iBit = 0; iBit < nBitsPerSample; ++iBit )
+                for( unsigned iBit = 0; iBit < nBitsPerSample; ++iBit )
                 {
                     if( pabyBlockBuf[iBitOffset>>3]
                         & (0x80 >>(iBitOffset & 7)) )
@@ -6934,6 +6953,7 @@ CPLErr GTiffOddBitsBand::IReadBlock( int nBlockXOff, int nBlockYOff,
                     CPLAssert(false);
                 }
             }
+          }
         }
     }
 
