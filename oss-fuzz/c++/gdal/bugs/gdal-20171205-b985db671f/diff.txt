diff --git a/autotest/gdrivers/data/corrupted-subheader.rsw b/autotest/gdrivers/data/corrupted-subheader.rsw
new file mode 100644
index 0000000000..5133674040
Binary files /dev/null and b/autotest/gdrivers/data/corrupted-subheader.rsw differ
diff --git a/autotest/gdrivers/data/cucled-1.rsw b/autotest/gdrivers/data/cucled-1.rsw
new file mode 100644
index 0000000000..d153c32bfc
Binary files /dev/null and b/autotest/gdrivers/data/cucled-1.rsw differ
diff --git a/autotest/gdrivers/data/cucled-2.rsw b/autotest/gdrivers/data/cucled-2.rsw
new file mode 100644
index 0000000000..76161600ed
Binary files /dev/null and b/autotest/gdrivers/data/cucled-2.rsw differ
diff --git a/autotest/gdrivers/data/invalid-subheader.rsw b/autotest/gdrivers/data/invalid-subheader.rsw
new file mode 100644
index 0000000000..7ba6cd1b29
Binary files /dev/null and b/autotest/gdrivers/data/invalid-subheader.rsw differ
diff --git a/autotest/gdrivers/rmf.py b/autotest/gdrivers/rmf.py
index 5d63cf3f25..76880ddf9b 100755
--- a/autotest/gdrivers/rmf.py
+++ b/autotest/gdrivers/rmf.py
@@ -46,17 +46,29 @@ def rmf_1():
 def rmf_2():
 
     tst = gdaltest.GDALTest( 'rmf', 'byte-lzw.rsw', 1, 4672 )
-    return tst.testOpen( check_gt = (440720, 60, 0, 3751320, 0, -60) )
+    with gdaltest.error_handler():
+        return tst.testOpen( check_gt = (440720, 60, 0, 3751320, 0, -60) )
 
 def rmf_3():
 
     tst = gdaltest.GDALTest( 'rmf', 'float64.mtw', 1, 4672 )
-    return tst.testOpen( check_gt = (440720, 60, 0, 3751320, 0, -60) )
+    with gdaltest.error_handler():
+        return tst.testOpen( check_gt = (440720, 60, 0, 3751320, 0, -60) )
 
 def rmf_4():
 
     tst = gdaltest.GDALTest( 'rmf', 'rgbsmall.rsw', 1, 21212 )
+    ret = tst.testOpen( check_gt = (-44.840320, 0.003432, 0,
+                                     -22.932584, 0, -0.003432) )
+    if ret != 'success':
+        return 'fail'
+
     tst = gdaltest.GDALTest( 'rmf', 'rgbsmall.rsw', 2, 21053 )
+    ret = tst.testOpen( check_gt = (-44.840320, 0.003432, 0,
+                                     -22.932584, 0, -0.003432) )
+    if ret != 'success':
+        return 'fail'
+
     tst = gdaltest.GDALTest( 'rmf', 'rgbsmall.rsw', 3, 21349 )
     return tst.testOpen( check_gt = (-44.840320, 0.003432, 0,
                                      -22.932584, 0, -0.003432) )
@@ -64,17 +76,41 @@ def rmf_4():
 def rmf_5():
 
     tst = gdaltest.GDALTest( 'rmf', 'rgbsmall-lzw.rsw', 1, 21212 )
+    with gdaltest.error_handler():
+        ret = tst.testOpen( check_gt = (-44.840320, 0.003432, 0,
+                                     -22.932584, 0, -0.003432) )
+    if ret != 'success':
+        return 'fail'
+
     tst = gdaltest.GDALTest( 'rmf', 'rgbsmall-lzw.rsw', 2, 21053 )
+    with gdaltest.error_handler():
+        ret = tst.testOpen( check_gt = (-44.840320, 0.003432, 0,
+                                     -22.932584, 0, -0.003432) )
+    if ret != 'success':
+        return 'fail'
+
     tst = gdaltest.GDALTest( 'rmf', 'rgbsmall-lzw.rsw', 3, 21349 )
-    return tst.testOpen( check_gt = (-44.840320, 0.003432, 0,
+    with gdaltest.error_handler():
+        return tst.testOpen( check_gt = (-44.840320, 0.003432, 0,
                                      -22.932584, 0, -0.003432) )
 
 def rmf_6():
 
     tst = gdaltest.GDALTest( 'rmf', 'big-endian.rsw', 1, 7782 )
+    with gdaltest.error_handler():
+        ret = tst.testOpen()
+    if ret != 'success':
+        return 'fail'
+
     tst = gdaltest.GDALTest( 'rmf', 'big-endian.rsw', 2, 8480 )
+    with gdaltest.error_handler():
+        ret = tst.testOpen()
+    if ret != 'success':
+        return 'fail'
+
     tst = gdaltest.GDALTest( 'rmf', 'big-endian.rsw', 3, 4195 )
-    return tst.testOpen()
+    with gdaltest.error_handler():
+        return tst.testOpen()
 
 ###############################################################################
 # Create simple copy and check.
@@ -107,7 +143,8 @@ def rmf_10():
 
     tst = gdaltest.GDALTest( 'rmf', 't100.mtw', 1, 6388 )
 
-    return tst.testOpen()
+    with gdaltest.error_handler():
+        return tst.testOpen()
 
 ###############################################################################
 # Overviews
@@ -128,8 +165,8 @@ def rmf_11():
         return 'fail'
 
     ovr_n = ( 0, 1, 2 )
-    ovr_size = ( 16, 64, 256 )
-    ovr_checksum = ( 3192, 51233, 32756 )
+    ovr_size = ( 256, 64, 16 )
+    ovr_checksum = ( 32756, 51233, 3192 )
 
     for i in ovr_n:
         ovr_band = band1.GetOverview(i)
@@ -145,6 +182,41 @@ def rmf_11():
 
     return 'success'
 
+###############################################################################
+# Check file open with cucled header offsets .
+
+def rmf_12a():
+
+    tst = gdaltest.GDALTest( 'rmf', 'cucled-1.rsw', 1, 4672 )
+    with gdaltest.error_handler():
+        return tst.testOpen( check_gt = (440720, 60, 0, 3751320, 0, -60) )
+
+###############################################################################
+# Check file open with cucled header offsets .
+
+def rmf_12b():
+
+    tst = gdaltest.GDALTest( 'rmf', 'cucled-2.rsw', 1, 4672 )
+    with gdaltest.error_handler():
+        return tst.testOpen( check_gt = (440720, 60, 0, 3751320, 0, -60) )
+
+###############################################################################
+# Check file open with invalid subheader marker.
+
+def rmf_12c():
+
+    tst = gdaltest.GDALTest( 'rmf', 'invalid-subheader.rsw', 1, 4672 )
+    with gdaltest.error_handler():
+        return tst.testOpen( check_gt = (440720, 60, 0, 3751320, 0, -60) )
+
+###############################################################################
+# Check file open with corrupted subheader.
+
+def rmf_12d():
+
+    tst = gdaltest.GDALTest( 'rmf', 'corrupted-subheader.rsw', 1, 4672 )
+    return tst.testOpen( check_gt = (440720, 60, 0, 3751320, 0, -60) )
+
 ###############################################################################
 
 gdaltest_list = [
@@ -158,7 +230,11 @@ gdaltest_list = [
     rmf_8,
     rmf_9,
     rmf_10,
-    rmf_11
+    rmf_11,
+    rmf_12a,
+    rmf_12b,
+    rmf_12c,
+    rmf_12d
 ]
 
 if __name__ == '__main__':
diff --git a/gdal/frmts/rmf/rmfdataset.cpp b/gdal/frmts/rmf/rmfdataset.cpp
index 02bc383a15..3f59c0b9d6 100644
--- a/gdal/frmts/rmf/rmfdataset.cpp
+++ b/gdal/frmts/rmf/rmfdataset.cpp
@@ -1149,10 +1149,30 @@ int RMFDataset::Identify( GDALOpenInfo *poOpenInfo )
 
 GDALDataset *RMFDataset::Open( GDALOpenInfo * poOpenInfo )
 {
-    return Open( poOpenInfo, NULL, 0 );
+    GDALDataset* poDS = Open( poOpenInfo, NULL, 0 );
+    if( poDS == NULL )
+    {
+        return NULL;
+    }
+
+    RMFDataset* poCurrentLayer = dynamic_cast<RMFDataset*>( poDS );
+    RMFDataset* poParent = poCurrentLayer;
+    const int   nMaxPossibleOvCount = 64;
+
+    for( int iOv = 0; iOv < nMaxPossibleOvCount && poCurrentLayer != NULL; ++iOv )
+    {
+        poCurrentLayer = poCurrentLayer->OpenOverview( poParent, poOpenInfo );
+        if( poCurrentLayer == NULL )
+            break;
+        poParent->poOvrDatasets.push_back( poCurrentLayer );
+    }
+
+    return poDS;
 }
 
-GDALDataset *RMFDataset::Open(GDALOpenInfo * poOpenInfo, RMFDataset* poParentDS, vsi_l_offset nNextHeaderOffset )
+GDALDataset *RMFDataset::Open(GDALOpenInfo * poOpenInfo,
+                              RMFDataset* poParentDS,
+                              vsi_l_offset nNextHeaderOffset )
 {
     if( !Identify(poOpenInfo) )
         return NULL;
@@ -1308,6 +1328,19 @@ do {                                                                    \
         RMF_READ_ULONG( abyHeader, poDS->sHeader.nExtHdrSize, 316 );
     }
 
+    if( poParentDS != NULL )
+    {
+        if( 0 != memcmp( poDS->sHeader.bySignature,
+                         poParentDS->sHeader.bySignature,
+                         RMF_SIGNATURE_SIZE ) )
+        {
+            CPLError( CE_Failure, CPLE_IllegalArg,
+                      "Invalid subheader signature." );
+            delete poDS;
+            return NULL;
+        }
+    }
+
 /* -------------------------------------------------------------------- */
 /*  Read the extended header.                                           */
 /* -------------------------------------------------------------------- */
@@ -1734,13 +1767,7 @@ do {                                                                    \
 /* -------------------------------------------------------------------- */
 /*      Check for overviews.                                            */
 /* -------------------------------------------------------------------- */
-    if( poParentDS == NULL )
-    {
-        poParentDS = poDS;
-    }
-
-    if( ( !poDS->OpenOverviews( poParentDS, poOpenInfo ) ) &&
-        ( nNextHeaderOffset == 0 ) )
+    if( nNextHeaderOffset == 0 && poParentDS == NULL )
     {
         poDS->oOvManager.Initialize( poDS, poOpenInfo->pszFilename );
     }
@@ -2038,16 +2065,16 @@ GUInt32 RMFDataset::GetRMFOffset( vsi_l_offset nFileOffset,
     return static_cast<GUInt32>(nFileOffset);
 }
 
-bool RMFDataset::OpenOverviews(RMFDataset* poParentDS, GDALOpenInfo* poOpenInfo)
+RMFDataset* RMFDataset::OpenOverview(RMFDataset* poParent, GDALOpenInfo* poOpenInfo)
 {
     if( sHeader.nOvrOffset == 0 )
     {
-        return false;
+        return NULL;
     }
 
-    if( poParentDS == NULL )
+    if( poParent == NULL )
     {
-        return false;
+        return NULL;
     }
 
     vsi_l_offset nSubOffset = GetFileOffset(sHeader.nOvrOffset);
@@ -2056,16 +2083,59 @@ bool RMFDataset::OpenOverviews(RMFDataset* poParentDS, GDALOpenInfo* poOpenInfo)
               "Try to open overview subfile at " CPL_FRMT_GUIB " for '%s'",
               nSubOffset, poOpenInfo->pszFilename );
 
-    GDALDataset*    poSub = (GDALDataset*)Open( poOpenInfo, poParentDS, nSubOffset );
+    if( !poParent->poOvrDatasets.empty() )
+    {
+        if( poParent->GetFileOffset( poParent->sHeader.nOvrOffset ) ==
+            nSubOffset )
+        {
+            CPLError( CE_Failure, CPLE_IllegalArg,
+                      "Recursive subdataset list is detected. "
+                      "Overview open failed." );
+            return NULL;
+        }
+
+        for( size_t n = 0; n != poParent->poOvrDatasets.size() - 1; ++n )
+        {
+            RMFDataset* poOvr( poParent->poOvrDatasets[n] );
 
-    if( poSub == NULL )
+            if( poOvr == NULL )
+                continue;
+            if( poOvr->GetFileOffset( poOvr->sHeader.nOvrOffset ) ==
+                nSubOffset )
+            {
+                CPLError( CE_Failure, CPLE_IllegalArg,
+                          "Recursive subdataset list is detected. "
+                          "Overview open failed." );
+                return NULL;
+            }
+        }
+    }
+
+    size_t nHeaderSize( RMF_HEADER_SIZE );
+    GByte * pabyNewHeader;
+    pabyNewHeader = static_cast<GByte *>( CPLRealloc(poOpenInfo->pabyHeader,
+                                                     nHeaderSize + 1) );
+    if( pabyNewHeader == NULL )
     {
-        return false;
+        CPLError( CE_Failure, CPLE_OutOfMemory,
+                  "Can't allocate buffer for overview header" );
+        return NULL;
     }
 
-    poParentDS->poOvrDatasets.push_back( poSub );
+    poOpenInfo->pabyHeader = pabyNewHeader;
+    memset( poOpenInfo->pabyHeader, 0, nHeaderSize + 1 );
+    VSIFSeekL( fp, nSubOffset, SEEK_SET );
+    poOpenInfo->nHeaderBytes = static_cast<int>( VSIFReadL( poOpenInfo->pabyHeader,
+                                                 1, nHeaderSize, fp ) );
+
+    RMFDataset* poSub = (RMFDataset*)Open( poOpenInfo, poParent, nSubOffset );
+
+    if( poSub == NULL )
+    {
+        return NULL;
+    }
 
-    return true;
+    return poSub;
 }
 
 /************************************************************************/
diff --git a/gdal/frmts/rmf/rmfdataset.h b/gdal/frmts/rmf/rmfdataset.h
index 67399fa180..6b6a202515 100644
--- a/gdal/frmts/rmf/rmfdataset.h
+++ b/gdal/frmts/rmf/rmfdataset.h
@@ -158,7 +158,7 @@ class RMFDataset : public GDALDataset
     static int      DEMDecompress( const GByte*, GUInt32, GByte*, GUInt32 );
     int             (*Decompress)( const GByte*, GUInt32, GByte*, GUInt32 );
 
-    std::vector<GDALDataset*>   poOvrDatasets;
+    std::vector<RMFDataset*>   poOvrDatasets;
 
   public:
                 RMFDataset();
@@ -178,7 +178,7 @@ class RMFDataset : public GDALDataset
 
     vsi_l_offset        GetFileOffset( GUInt32 iRMFOffset );
     GUInt32             GetRMFOffset( vsi_l_offset iFileOffset, vsi_l_offset* piNewFileOffset );
-    bool                OpenOverviews( RMFDataset* poParentDS, GDALOpenInfo* );
+    RMFDataset*         OpenOverview( RMFDataset* poParentDS, GDALOpenInfo* );
 };
 
 /************************************************************************/
