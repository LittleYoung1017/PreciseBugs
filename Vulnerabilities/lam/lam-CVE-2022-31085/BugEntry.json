{"buggy_code": ["\nAlias /lam /usr/share/ldap-account-manager\n\n<Directory /usr/share/ldap-account-manager>\n  Options +FollowSymLinks\n  AllowOverride All\n  Require all granted\n  DirectoryIndex index.html\n</Directory>\n\n<Directory /var/lib/ldap-account-manager/tmp>\n  Options -Indexes\n</Directory>\n\n<Directory /var/lib/ldap-account-manager/tmp/internal>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n<Directory /var/lib/ldap-account-manager/sess>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n<Directory /var/lib/ldap-account-manager/config>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n<Directory /usr/share/ldap-account-manager/lib>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n<Directory /usr/share/ldap-account-manager/help>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n<Directory /usr/share/ldap-account-manager/locale>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n", "location /lam {\n\tindex index.html;\n\talias /usr/share/ldap-account-manager;\n\tautoindex off;\n\n\tlocation ~ \\.php$ {\n\t\tfastcgi_split_path_info ^(.+\\.php)(/.+)$;\n\t\tfastcgi_pass unix:/var/run/php7-fpm.sock;\n\t\tfastcgi_index index.php;\n\t\tinclude fastcgi_params;\n\t\tfastcgi_param SCRIPT_FILENAME $request_filename;\n\t}\n\n\tlocation ~ /lam/(tmp/internal|sess|config|lib|help|locale) {\n\t\tdeny all;\n\t\treturn 403;\n\t}\n\n}\n", "\nAlias /lam /usr/share/ldap-account-manager\n\n<Directory /usr/share/ldap-account-manager>\n  Options +FollowSymLinks\n  AllowOverride All\n  Require all granted\n  DirectoryIndex index.html\n</Directory>\n\n<Directory /var/lib/ldap-account-manager/tmp>\n  Options -Indexes\n</Directory>\n\n<Directory /var/lib/ldap-account-manager/tmp/internal>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n<Directory /var/lib/ldap-account-manager/sess>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n<Directory /var/lib/ldap-account-manager/config>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n<Directory /usr/share/ldap-account-manager/lib>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n<Directory /usr/share/ldap-account-manager/help>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n<Directory /usr/share/ldap-account-manager/locale>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n", "location /lam {\n\tindex index.html;\n\talias /usr/share/ldap-account-manager;\n\tautoindex off;\n\n\tlocation ~ \\.php$ {\n\t\tinclude snippets/fastcgi-php.conf;\n\t\tfastcgi_pass unix:/var/run/php/php7.0-fpm.sock;\n\t\tfastcgi_param SCRIPT_FILENAME $request_filename;\n\t}\n\n\tlocation ~ /lam/(tmp/internal|sess|config|lib|help|locale) {\n\t\tdeny all;\n\t\treturn 403;\n\t}\n\n}\n", "June 2022 8.0\n  - PHP 8.1 compatibility\n  - Extended user account status and locking options\n  - Unix: added Gecos to profile editor\n  - 389ds: added hints why login failed if account is locked/deactivated/expired\n  - Removed Zarafa support (please switch to Kopano)\n  - Tree view: display binary data as base64 encoded text\n  - Tree view: better support for move operations and ordered attributes\n  - LAM Pro:\n   -> New captcha providers: hCaptcha and Friendly Captcha\n   -> PPolicy: allow to specify unlock value for \"pwdAccountLockedTime\"\n  - Fixed bugs:\n   -> Hidden account is displayed (257)\n   -> Change of RDN failed for OpenLDAP entries\n   -> Tree view issues with browser auto-completion (176)\n\n\n15.04.2022 7.9.1\n  - Fixed bugs:\n   -> Security issues in PDF editor and profile editor\n\n\n09.03.2022 7.9\n  - Tree view:\n   -> Support multiple roots (e.g. add \"cn=config\")\n   -> Added function to check password hashes against a given password\n  - Shadow: allow to set shadowLastChange in file upload\n  - Docker: upgrade OS to Debian Bullseye\n  - LAM Pro:\n   -> Support multiple TO addresses for license expiration email\n   -> Custom scripts: $INFO.debug$ wildcard prints all possible wildcards and their values\n   -> Custom scripts: extra INFO wildcards for password change options\n   -> Configuration import: allow to select self service profiles to import (168)\n  - Fixed bugs:\n   -> Tree view: check session expiration\n\n\n28.12.2021 7.8\n  - Restyling of LAM\n  - Allow to override global password policy in server profile (160)\n  - Do not print random password if sent via email (165)\n  - LAM Pro:\n   -> PowerDNS support\n   -> Device: allow multiple cn values\n  - Fixed bugs:\n   -> PDF does not contain all group members (249)\n   -> File upload issue on PHP 8 (153)\n   -> Export issue on non-Pro version (155)\n   -> Force password change for 389ds does not work on password quick change page (251)\n\n\n30.09.2021 7.7\n  - 2-factor authentication with OpenID\n  - Send proper response code on failed login\n  - LAM Pro:\n   -> OpenLDAP 2FA support for TOTP\n  ->Fixed bugs:\n   -> Issues with list filter if only one result is found (241)\n   -> Allow to sync empty list of groups in group of names user module (242)\n   -> Windows lockout duration and password maximum age computed incorrectly\n   -> Wrong status for nsAccountLock (245)\n\n\n05.07.2021 7.6\n  - Allow to store whole LAM configuration in MySQL database\n  - Docker: new options for configuration location and LAM Pro license\n  - Full PHP 8 compatibility\n  - Replaced tree view and moved it to tools menu\n  - Wildcards in edit screen support lower-case mode (e.g. \"$_firstname\")\n  - Windows: more fields can be hidden\n  - LAM Pro:\n   -> Export/Import of cron jobs\n   -> Mail server encryption type can be configured (TLS/SSL/none)\n   -> User self registration: support to define uid field to use constant or custom validation\n   -> Group of names user module: allow to sync memberships from other user\n   -> Custom fields:\n    * Support password change dialog in user edit view\n    * Added date and email validation for text fields\n    * Support password reset page for password fields\n    * New field types: LDAP date, LDAP date and time\n   -> Password self reset: fields on first page can be prefilled by URL parameter\n  - Fixed bugs:\n   -> Truncated mail text field in \"LAM Pro password mail settings\" and 2FA base URLs\n   -> 389ds: support password change and force password in one save action\n\n\n30.03.2021 7.5\n  - PHP 7.3 required\n  - PHP 8.0 compatibility (except tree view)\n  - Support copying LDAP entries from account list\n  - Account/PDF profiles: management of global templates and logos\n  - Group of names: allow filter by member/owner (#151)\n  - General information: link to groups (#152)\n  - LAM Pro:\n   -> Self registration: support binary attributes (e.g. for jpegPhoto)\n   -> Self registration: support custom mail attributes and mail from constant value (149)\n   -> Self registration: evaluate autorange at account creation (154)\n   -> MIT Kerberos: check Kerberos password policy on password change, better error handling\n   -> Self Service: new field to show user's quota values\n   -> Self Service: allow to create Unix home directory during registration\n   -> Custom type: allow for user/group/host to be able to reuse existing modules\n\n\n06.12.2020 7.4\n  - Argond2id support for password hashes (requires PHP 7.3) (#113)\n  - 2-factor authentication:\n   -> Support for Okta\n   -> WebAuthn devices can be named in Self Service and WebAuthn tool\n  - LAM Pro:\n   -> MIT Kerberos policies support\n   -> User self registration: added admin approval option and info mail for user after creation\n\n\n22.09.2020 7.3\n  - PHP 7.4 compatibility\n  - Configuration export and import\n  - Server profiles support to specify a part of the DN to hide\n  - Show password prompt when a user with expired password logs into LAM admin interface (requires PHP 7.2)\n  - Better error messages on login when account is expired/deactivated/...\n  - Personal/Windows: photo can be uploaded via webcam\n  - Windows users: group display format can be configured (cn/dn)\n  - Support PBKDF2-SHA512 password hashes\n  - LAM Pro:\n   -> Windows: new cron job to send users a summary of their managed groups\n  - Fixed bugs:\n   -> Unix groups: memberUid was not deleted correctly when forced sync with group of names is active\n\n\n01.05.2020 7.2\n  - Unix: allow to create group with same name during user creation\n  - LAM Pro:\n   -> EMail sending can be done via SMTP without local mail server\n   -> License expiration warning can be sent via email or disabled\n  - Fixed bugs:\n   -> Captcha don't show anymore in Self Service login page (213)\n   -> Unix memberships cannot be changed. This issue can also affect other membership relations.\n   -> Missing locales on Docker image\n\n\n17.03.2020 7.1\n  - PHP 7 required\n  - WebAuthn/FIDO2 support for 2-factor-authentication (requires PHP 7.2)\n  - IMAP: changed library to support latest TLS versions\n  - Personal: support display name (hidden by default in server profile)\n  - Windows users: support allowed workstations, more profile options\n  - Reactivated Polish translation\n  - LAM Pro:\n   -> PPolicy: support for password check module\n   -> Windows AD LDS support (users and groups)\n   -> User self registration: support Active Directory/Samba4\n\n\n21.12.2019 7.0\n  - Lamdaemon can be configured with directory prefix for homedirs\n  - Account list filters match on substrings instead of whole value\n  - YubiKey: support to configure multiple verification servers\n  - Windows hosts: added last password change and last login\n  - Deactivated non-maintained translations: Catalan, Czech, Hungarian, Polish and Turkish\n    Contact us if you would like to take over. Translators get LAM Pro for free (commercial use included).\n  - Docker updates\n  - Fixed bugs:\n   -> Missing CSS for Duo\n   -> Editing of DNs with comma on Windows (210)\n\n\n29.09.2019 6.9\n  - Group account types can show member+owner count in list view\n  - 2-factor authentication:\n   -> Duo support\n   -> user name attribute for privacyIDEA can be specified\n  - LAM Pro:\n   -> New self service settings for login and main page footer\n   -> Custom fields: custom labels for LDAP search select list\n  - Fixed bugs:\n   -> Configuration issue with Unix user/host module (206)\n\n\n02.07.2019 6.8\n  - Parallel editing of multiple entries in different browser tabs supported\n  - LAM supports the progressive web app standard which allows to install LAM as an icon on home screen\n  - Windows: added home drive and force password change to profile editor\n  - Unix: password management can be disabled in module settings\n  - LAM Pro:\n   -> Bind DLZ: entry table can show record data (use special attribute \"#records\" in server profile)\n   -> Self service: support legacy attribute \"email\" for password self reset and user self registration\n  - Fixed bugs:\n   -> Users: No drop-down filter box for account status (200)\n   -> Custom fields: Account type \"Groups\" not saving/deleting fields (66)\n\n\n25.03.2019 6.7\n  - Added YubiKey as 2-factor authentication provider\n  - Support logging to remote syslog server\n  - PHP 7.3 support\n  - LAM Pro:\n   -> Allow to mark text and text area fields as required\n   -> New self service fields:\n    -> Mail routing\n    -> Windows proxy addresses + mail alias\n    -> Shadow account expiration date\n    -> Unix and group of names memberships\n   -> Base URL for emails in self service can be configured in self service profile\n   -> Bind DLZ: support DNAME+XFR records and descriptions in records (requires latest LDAP schema)\n   -> Cron jobs: added Shadow account expiration notification job\n  - Fixed bugs:\n   -> Allow tree-only configurations without any other tab\n\n\n28.12.2018 6.6\n  - New import/export in tools menu\n  - YubiKey support\n  - Windows users:\n    -> Manage \"departmentNumber\" (needs to be activated via LAM server profile)\n    -> Sync group memberships from Unix and group of names\n  - LAM Pro:\n    -> Easy setting of background color in self service profile\n    -> Cron jobs: added Windows/Qmail/FreeRadius account expiration notification jobs\n    -> Bind DLZ: usability improvements and small fixes\n\n\n25.09.2018 6.5\n  - Password change possible via LDAP EXOP operation (set LDAP_EXOP as password hash, requires PHP 7.2)\n  - Support Imagick and GD\n  - Dropped support for Apache 2.2\n  - Upload: allow to overwrite existing accounts\n  - Personal: photos can be printed in PDF export\n  - Kolab updates\n  - LAM Pro:\n   -> Auto deletion of entries with dynamic directory services support (requires PHP 7.2)\n  - Fixed bugs:\n   -> Issue when changing key case of uid (#197)\n\n\n20.06.2018 6.4\n  - Imagick PHP extension required\n  - Passwords can be checked against external service (e.g. https://api.pwnedpasswords.com/range)\n  - Personal/Windows: image cropping support\n  - Better filtering of account lists\n  - Unix: Unix, Windows and group of names memberships can be synced in group selection\n  - IMAP: create mailbox via file upload\n  - PHP 7.2 support\n  - Support for \",\" in DN\n  - LAM Pro:\n   -> Better support for 389ds password expiration\n  - Fixed bugs:\n   -> Error on password reset page when custom fields is used (194)\n\n\n19.03.2018 6.3\n  - Server profile: added option if referential integrity overlay is active to skip cleanup actions\n  - Unix: several options are now specific to subaccount types (reconfiguration required!)\n  - Fixed bugs:\n   -> Security fixes (XSS vulnerabilities CVE-2018-8763 and CSRF token in URL CVE-2018-8764)\n   -> Quota for Windows groups did not work\n  - LAM Pro:\n   -> Support custom structural object classes with new custom type\n   -> Support dynamic lists\n   -> Self service login and password self reset can be secured with captcha\n\n\n04.02.2018 6.2.1\n  - Fixed bugs:\n   -> Login page not working when no server profile exists (44)\n   -> LAM Pro: Password Self Reset has issues when both security question and confirmation mail are activated.\n   -> LAM main configuration: certificate buttons do not work\n\n\n13.12.2017 6.2\n  - License changed from GPL v2 to GPL v3\n  - PHP 5.6 and Internet Explorer 11 or later required\n  - PDF export supports Chinese, Japan and Korean\n  - Account status also shows expired accounts\n  - Quota: support k/m/g/t/K/M/G/T to specify values in e.g. kB\n  - LAM Pro:\n   -> Cron jobs include better logging and support dry-run\n\n\n19.09.2017 6.1\n  - Automatically trim input fields to avoid trailing/leading spaces\n  - LAM Pro:\n   -> Custom fields: support wildcards in text fields such as $firstname\n   -> Custom fields: specify minimum/maximum count for multi-value entries\n   -> Custom fields: new type for constant values\n  - Fixed bugs:\n   -> Password modify page reports error on password change when posixAccount is present for users\n   -> Nginx configuration files did not include \"fastcgi_param SCRIPT_FILENAME $request_filename;\" (193)\n\n\n20.07.2017 6.0.1\n  - Fixed bugs:\n   -> Configuration file fills up with empty values\n   -> Tool visibility settings\n\n\n26.06.2017 6.0\n  - Support multiple configurations for same account type\n  - PHP 7.1 compatibility\n  - Courier users and mail aliases\n  - Windows: Support unlocking of users with too many failed login attempts\n  - Samba 3: added account expiration date to PDF fields\n  - LAM Pro:\n   -> Custom fields: can be used for file upload\n   -> Custom fields: new selection list type that gets options from LDAP search\n   -> Kopano support\n\n\n15.03.2017 5.7\n  - 2-factor authentication for admin login and self service with privacyIDEA\n  - PDF files use DejaVu serif font for better readability and more supported characters (e.g. Cyrillic)\n  - Windows users: the department option now uses attribute \"department\" instead of \"departmentNumber\"\n  - Updated Debian dependencies\n  - Fixed bugs:\n   -> Comparison issue prevents saving of values (185)\n\n\n18.12.2016 5.6\n  - New mechanism to replace wildcards in user edit screen. Personal/Unix support more wildcards like \"$firstname\".\n  - Windows: added support for pager, otherPager, mobile, otherMobile, company and proxyAddresses (disabled by default in server profile)\n  - Mail routing: enable for groups and allow to add/remove the extension\n  - LAM Pro:\n   -> Password self reset: support for up to 3 security questions\n   -> 389ds: new wildcards for custom scripts: $INFO.389lockingStatusChange$ and $INFO.389deactivationStatusChange$\n   -> Custom scripts: custom button label supported for manual scripts\n\n\n10.09.2016 5.5\n  - Windows: allow to show effective members of a group\n  - Lamdaemon: support SSH key authentication\n  - LAM Pro:\n   -> Group of names/members + roles: allow to show effective members of a group\n   -> Cron jobs:\n     * Move or delete expired accounts (Shadow, Windows, qmail, FreeRadius)\n     * 389ds: added job to notify before password expires\n   -> 389ds: manage password expiration time with module \"Account locking\"\n  - Fixed bugs:\n   -> PHP 7 issues on edit page\n\n\n21.06.2016 5.4\n  - Unix: support magic numbers for UIDs/GIDs (e.g. 389 server DNA plugin)\n  - Samba 3: support for Samba password history (RFE 133)\n  - LAM Pro:\n   -> New module for 389ds unlocking and account (de)activation\n   -> Self registration: support for Google reCAPTCHA\n   -> Password notification jobs support CC and BCC\n   -> Self Service: Samba 3 supports password history and minimum age check\n\n\n21.03.2016 5.3\n  - Requires PHP 5.4.0 or higher\n  - PHP 7 support\n  - Windows: support management of fax number\n  - Login can show display name instead of server URL\n  - Personal/Unix: support K5KEY hash type for smbk5pwd\n  - New NIS netgroup module for hosts\n  - Puppet: autocompletion for classes and variables, allow to enforce list of possible classes\n  - Fixed bugs:\n   -> Autoload errors in tree view\n   -> Set correct content type on JSON requests (174)\n  - LAM Pro:\n   -> Support for LDAP views based on nsview object class\n   -> Password notification jobs support to print expiration date in email\n   -> PPolicy password notification job takes pwdExpireWarning into account\n   -> Custom fields: support calendar fields\n   -> Zarafa contacts: allow to create contacts without Unix extension\n   -> Added options for password rest page to server profile\n\n\n15.12.2015 5.2\n  - Windows: support for additional attributes (jpegPhoto, title, carLicense,\n    employeeNumber, employeeType, businessCategory, departmentNumber, ou, o, manager)\n  - SSH public key: added possibility to add/remove SSH extension\n  - MIT Kerberos: set krbExtraData for new accounts\n  - IMAP: allow to specify initial folders to create\n  - LAM Pro:\n   -> Users: allow to manage IP addresses with ipHost module\n   -> Self Service: added time zone setting in self service profile\n   -> Shadow: added job to notify before Shadow password expires\n   -> Windows: added job to notify before Windows password expires\n\n\n31.08.2015 5.1\n  - IMAP: support Windows users\n  - SSH public key: check uploaded files if in right format\n  - LAM Pro:\n   -> Self Service optimized also for mobile devices\n   -> MySQL support for cron jobs\n   -> Self registration: support auto-numbering for attributes (e.g. to create Unix accounts)\n\n\n30.06.2015 5.0\n  - Microsoft IE 8 no longer supported\n  - Security: added CSRF protection\n  - NIS net groups: user module to manage NIS net groups on user page\n  - Zarafa users: allow to change display format of \"Send As\"\n  - User list: support to filter by account status\n  - Lamdaemon: update group of home directory if user's primary group changes\n  - Personal: allow to add ou=addressbook subentry for users (RFE 117)\n  - Unix: support auto-UID/GID with msSFU30DomainInfo\n  - Windows groups: support editing of member of\n  - Central time zone setting in server profile\n  - LAM Pro:\n   -> Cron job to notify users before password expires (PPolicy)\n   -> Password Self Reset: added 389 Directory Server schema file\n   -> Support for groupOfMembers (RFE 121)\n   -> Rfc2307bis Unix groups: added option to force syncing with group of names\n\n\n31.03.2015 4.9\n  - Requires PHP 5.3.2 or higher\n  - Templates for server profiles\n  - Unix/Personal: support SASL as password hash type\n  - PDF export: added option to print primary group members\n  - Use HTTP_X_REAL_IP/HTTP_X_FORWARDED_FOR to log IP addresses (RFE 120)\n  - LAM Pro:\n   -> Personal: support image file size limit and cropping (requires php-imagick) in self service\n   -> Password self reset: allow to enter custom security questions (RFE 115)\n   -> Unix groups (rfc2307bis): allow to sync members from group of (unique) names (RFE 116)\n   -> Self Service: support password change with old password (requires PHP >= 5.4.26)\n  - Fixed bugs:\n   -> Self Service shows password reuse error after password change was required\n\n\n16.12.2014 4.8\n  - Active Directory: support paged result as workaround for size limit exceeded\n  - FreeRadius: support dialupAccess and radiusProfileDn\n  - Usability improvements\n  - LAM Pro:\n   -> Self service: added option if referrals should be followed\n  - fixed bugs:\n   -> missing LDAP_DEREF_NEVER in some cases (169)\n\n\n07.10.2014 4.7.1\n  - fixed bugs:\n   -> Blank page and \"User tried to access entry of type ...\" log message when DN suffix does not exactly match case in LDAP\n\n\n28.09.2014 4.7\n  - Nginx webserver support\n  - DHCP: support pooling of IP ranges (RFE 107)\n  - Personal: support pager attribute (hidden by default)\n  - Renamed config/lam.conf_sample to lam.conf.sample and config.cfg_sample to config.cfg.sample\n  - LAM Pro:\n   -> Password dialog: preset alternate email address with backup email address (RFE 111)\n\n\n12.06.2014 4.6\n  - Unix groups: allow to disable membership management\n  - Extended LAM's internal password policies\n  - Lamdaemon: move home directory on server if changed\n  - Password policy check during typing\n  - LAM Pro:\n   -> Password self reset and user self registration support to set a header text\n   -> Sudo roles: support latest schema\n   -> Bind DLZ: automatic PTR management (disabled by default) and better formatting of e.g. TTL values\n\n\n18.03.2014 4.5\n  - IMAP: allow dynamic admin user names by replacing wildcards with LDAP attributes\n  - Personal: allow to set fields read-only\n  - NIS mail aliases can be managed on user page\n  - Added option to server profile if referrals should be followed (fixes problems with Samba 4 and AD)\n  - Windows user/group: NIS support (msSFU30NisDomain, msSFU30Name)\n  - LAM Pro:\n   -> Allow to set single account types read-only\n   -> Support for organizationalRole entries\n   -> Separate IP restriction list for self service\n   -> Bind DLZ: support TXT/SRV records\n   -> Self Service: added language selection\n   -> Password self reset: support backup email address\n   -> Custom fields: support help texts\n   -> Support for Oracle databases (orclNetService) (RFE 104)\n  - fixed bugs:\n   -> PDF export for multiple entries does not work (163)\n   -> Personal: fixed photo upload if Imagick is not installed (161)\n   -> Use account filters for Unix membership management (165)\n\n\n18.12.2013 4.4\n  - PyKota support: users, groups, printers, billing codes\n  - Kolab shared folder support\n  - New tool \"Multi edit\" allows LDAP operations on a large number of entries (e.g. adding attributes)\n  - Allow to set a custom label for each account type\n  - Unix: switch also additional membership if primary group is changed (RFE 108)\n  - Windows: fixed user name handling, sAMAccountName now optional\n  - Apache 2.4 support (requires Apache \"version\" module)\n  - Added Turkish, Ukrainian and US English translation\n  - LAM Pro:\n   -> Bind DLZ support\n   -> Samba/Shadow: display password change date in self service\n   -> Custom fields: support custom label and icon, auto-completion\n   -> User self registration: support constant attribute values\n   -> Self service: allow to set custom field labels\n  - Fixed bugs:\n   -> Format of photo in Personal tab (158)\n\n\n25.09.2013 4.3\n  - Custom SSL CA certificates can be setup in LAM main configuration\n  - Unix user and group support for Samba 4\n  - Samba 3 groups: support local members\n  - Kolab: support group accounts and allowed senders/receivers for users\n  - SSH public key: support file upload and self service enhancements (RFE 101)\n  - DHCP: support more options (RFE 99)\n  - LAM Pro:\n   -> PPolicy: check password history for password reuse\n   -> Custom fields: read-only fields for admin interface and file upload for binary data\n   -> Custom scripts: support user self registration\n   -> Password self reset: Samba 3 sync, identification with login attribute, Samba 4 support\n  - Fixed bugs:\n   -> Custom fields: auto-adding object classes via profile editor fixed\n   -> PHP 5.5 compatibility\n   -> Lamdaemon: do not show message if home directory to delete was not found (154)\n\n\n18.06.2013 4.2.1\n  - Fixed bugs:\n   -> Unix: suggested user name must be lower case\n   -> Quota: profile editor does not work in some cases\n\n\n04.06.2013 4.2\n  - Samba 4 support: users, groups, hosts\n  - Unix: allow to change format for suggested user name\n  - LAM Pro:\n   -> Zarafa support for Samba 4\n   -> allow to hide buttons to create/delete entries for each account type\n   -> Password self reset: support new identification methods: user, email, user or email, employee number\n   -> Custom fields: support PDF, profiles and multi-value text fields\n   -> Personal: support password mail sending in file upload\n\n\n19.03.2013 4.1\n  - Updated EDU person module (RFE 3599128)\n  - Personal: allow management of user certificates (RFE 1753030)\n  - Unix: Support Samba Unix Id pool for automatic UID/GID generation\n  - DHCP: support separated dhcpServer and dhcpService entries\n  - LAM Pro:\n   -> Support Qmail groups\n  - Fixed bugs:\n   -> changed user and group size limits (3601649)\n\n\n06.01.2013 4.0.1\n  - support additional LDAP filters for account types\n  - allow to hide account types (that are required by other account types)\n  - fixed bugs:\n   -> missing directories config/pdf and config/profiles on fresh installations\n\n\n17.12.2012 4.0\n  - account profiles and PDF structures are now bound to server profile\n  - IMAP: support \"/\" as path separator (RFE 3575692)\n  - show server profile name on config pages (RFE 3579768)\n  - LAM Pro:\n   -> Custom fields for admin interface\n   -> MIT Kerberos support\n   -> Qmail user support\n\n\n25.09.2012 3.9\n  - Kolab 2.4 support\n  - Puppet support\n  - LAM Pro\n   -> support RFC2307bis automount entries\n   -> read-only fields in self service\n  - fixed bugs\n   -> Hidden tools are still shown on the \"Tools\" page (3546092)\n\n\n19.07.2012 3.8\n  - quick (un)lock for users\n  - allow to disable tools\n  - LAM Pro:\n   -> Custom fields module allows to manage custom LDAP attributes in Self Service\n   -> Self service now supports user self registration\n   -> Separate group of names module for users allows to manage memberships if Unix module is not used (RFE 3504429)\n   -> Named object module for groups (used for rfc2307bis schema)\n   -> Password change page allows account (un)locking\n   -> Allow to send password mails on user edit page\n   -> Custom scripts: supports manual scripts that can be run from account edit pages\n   -> Zarafa 7.1 support (proxy URL for servers)\n  - fixed bugs\n   -> Asterisk extensions with same name (3528288)\n\n\n25.03.2012 3.7\n  - Login: support bind user for login search\n  - Personal: added labeledURI and cosmetic changes, description is now multi-valued (RFE 3446363)\n  - Asterisk extensions: group extension entries by name and context\n  - File upload:\n   -> support custom scripts postCreate (LAM Pro)\n   -> PDF export\n  - New translation: Slovakian\n  - removed phpGroupWare support (project no longer exists)\n  - Use new password after self password change (RFE 3446350)\n  - LAM Pro:\n   -> Password self reset can send password confirmation and notification mails\n   -> Zarafa archiver support\n   -> Heimdal Kerberos support\n  - Fixed bugs:\n   -> DHCP: error message not displayed properly (3441975)\n   -> Profile loading not possible if required fields are not filled (3444948)\n   -> Tree view: unable to add object class (3446037)\n   -> Edit page: unable to move accounts to different OU\n   -> Self Service: support forced password changes (PPolicy) (3483907)\n   -> XSS security patch (3496624)\n\n\n23.11.2011 3.6.1\n  - LAM Pro: fixed password reset function\n\n\n22.11.2011 3.6\n  - support HTTP authentication for admin pages and self service\n  - new modules\n   -> authorizedServiceObject\n   -> FreeRadius\n  - LAM Pro\n   -> added password self reset feature\n   -> Zarafa 7 support\n   -> Zarafa support for dynamic groups, address lists and contacts\n   -> Unix: group of names can be managed on user edit page\n  - Fixed bugs:\n   -> Unix: check for upper-case characters in user name (3416180)\n\n\n09.08.2011 3.5.0\n  - New modules:\n   -> \"General information\": shows internal data about accounts (e.g. creation time)\n   -> \"Quota\": manage filesystem quota inside LDAP (Linux DiskQuota) (RFE 1811449)\n  - Personal: New attributes o, employeeNumber, initials\n  - Unix: Support to create home directories on multiple servers and also for existing users\n  - Server information shows data from cn=monitor\n  - Lots of small improvements\n  - LAM Pro:\n   -> Automount: allow to create automount maps\n   -> Password policy: allow to (un)lock accounts\n  - Fixed bugs:\n   -> Owner attribute is multi-valued (3300727)\n\n2011-04-25 3.4.0\n  - IMAP mailboxes:\n   -> support to read user name from uid attribute\n   -> added quota management\n  - Personal: added additional options for account profiles\n  - Mail aliases: sort recipients (RFE 3170336)\n  - Asterisk: support all attributes (can be disabled in configuration)\n  - Samba 3/Shadow: allow to sync expiration date (RFE 3147751)\n  - LAM Pro:\n   -> support automount entries\n   -> Zarafa groups: allow combination with group of names\n   -> enhanced wildcards for custom scripts\n   -> Group of (unique) names: allow members to be optional\n  - Fixed bugs:\n   -> Renaming of default profile (3183920)\n   -> Profile editor: fixed problems with multi select\n\n\n12.02.2011 3.3.0\n  - additional usability enhancements\n  - new IMAP module (\"Mailbox (imapAccess)\") allows to create/delete user mailboxes\n  - LAM Pro: enhanced Zarafa to support users and groups for \"Send as\" (new configuration option)\n  - PDF export: higher resolution for logos\n  - reduced number of LDAP queries\n  - lamdaemon: support journaled quotas\n  - Fixed bugs:\n   -> ignore comment lines in shells file (3107124)\n   -> home directory creation on file upload\n\n\n28.10.2010 3.2.0\n  - large usability enhancements\n  - Shadow: allow to force password change when maximum password age is set\n  - DHCP: renamed module \"Fixed IPs\" to \"Hosts\", IP is now optional (3038797)\n  - PHP version 5.2.4 or higher required\n  - LAM Pro:\n   -> Zarafa support (user, group, server)\n   -> Password policy: allow to force password change (RFE 3026940)\n   -> Password reset page: mail subject, text and from address can be set in server profile\n   -> Self service: Asterisk (voicemail) password synchronisation\n  - Fixed bugs:\n   -> Email check did not include \"+\" (3033605)\n   -> Tab index on login page (3042622)\n\n\n04.07.2010 3.1.1\n  - LAM Pro: fix for user self service\n\n\n25.06.2010 3.1.0\n  - usability improvements\n  - Asterisk voicemail support\n  - new hosts module for user accounts to define valid login workstations (replaces inetOrgPerson schema hack) (2951116)\n  - PDF editor: descriptive fields\n  - lamdaemon:\n   -> sudo entry needs to be changed to \".../lamdaemon.pl *\"\n   -> replaced PHP SSH2 with phpseclib\n  - LAM Pro\n   -> custom scripts: new options to hide executed commands and define if output is HTML or plain text\n   -> support sudo entry management (object class sudoRole)\n  - fixed bugs:\n   -> Asterisk password handling (patch 2979728)\n   -> Samba domain SID check (2994528)\n   -> language selection at login (2996335)\n\n\n24.03.2010 3.0.0\n  - support to remove extension from an existing account: shadowAccount, sambaSamAccount, eduPerson\n  - file upload: allow to select account modules for upload\n  - removed frames\n  - Unix: automatic user name generation from first and last name (2492675)\n  - LAM Pro:\n   -> support OpenLDAP password policies (ppolicy)\n   -> manage host IP addresses (ipHost)\n  - fixed bugs:\n   -> Multi-delete not working (2931458)\n   -> Samba: can/must change password needs to be read from domain policy (2919236)\n   -> DNs which include \"#\" are not editable/deletable (2931461)\n   -> fixed configure/Makefile\n   -> Asterisk input fields and authentication realm (patch 2971792)\n\n\n16.12.2009 2.9.0\n  - Asterisk support\n  - new tool: server information\n  - consolidated LAM documentation in new manual (docs/manual/index.html)\n\t- DHCP: add host name to fixed IPs (RFE 2898948)\n\t- LAM Pro:\n\t -> enabled custom scripts for self service\n\t -> support for nisObject object class\n  - fixed bugs:\n\t -> unable to edit accounts with DNs that contain spaces next to a comma (2889473)\n\t -> login method \"LDAP search\" has problems if LDAP server is down (2889414)\n\t -> filter in account lists did not support non-ASCII letters\n\t -> alias handling (2901248)\n\t -> DHCP range check (2903267)\n\n\n28.10.2009 2.8.0\n  - ability to hide fields: inetOrgPerson, sambaSamAccount\n\t- compatibility with PHP 5.3\n\t- one central button to change passwords on account pages\n\t- removed support for Samba 2 accounts\n\t- removed lamdaemonOld script\n\n\n05.08.2009 2.7.0\n  - LAM Pro: allow to execute custom scripts\n  - log client IP at login attempt\n  - added separate configuration option to enable/disable TLS encryption\n  - Samba 3: allow to disable LM hashes (on by default) (RFE 2657140)\n  - DHCP: added description field and reordered fixed IP input fields\n  - fixed bugs:\n    * added additional check for creating home directories (2798489)\n\t\t* support memcache for session storage (2811505)\n\n\n08.04.2009 2.6.0\n  - support NIS netgroups\n  - support EDU person accounts (RFE 1413731)\n  - Personal: support departmentNumber attribute\n  - DHCP: allow file upload\n  - added config option to search LAM login users in LDAP (RFE 2494249)\n  - help messages are displayed as tooltips\n  - LAM Pro:\n   -> add businessCategory to self service (RFE 2494246)\n   -> allow to customize page headers and use custom CSS styles\n\n\n21.01.2009 2.5.0\n  - LAM Pro:\n   -> supports rfc2307bis schema for Unix groups (RFE 2111694)\n   -> added alias management (object classes alias + uidObject) (RFE 1912779)\n  - Shadow: module is now optional when creating new accounts\n  - Kolab:\n   -> account extension is now optional\n   -> can be used without Unix module\n   -> self service uses no extra LDAP suffix but uses global setting\n  - DHCP:\n   -> several bugfixes\n   -> added PDF support\n   -> support multiple Netbios name servers (RFE 2180179)\n  - Samba 3:\n   -> self service sets attribute \"sambaPwdLastSet\" on password change (LAM Pro)\n   -> password timestamps can be updated on password reset page (LAM Pro)\n   -> option to force password change on next login\n   -> profile options for time when the user can/must change the password\n\n\n15.10.2008 2.4.0\n  - added DHCP management (donated by Siedl networks GmbH)\n  - requires PHP 5.1.2\n  - MHash dependendy replaced by Hash\n  - save last selected server profile from login page\n  - lamdaemon: allow to specify SSH port\n  - lamdaemon: added Syslog logging\n  - Unix: added profile options for lamdaemon\n  - LAM Pro: password reset page is able to unlock Samba accounts and sets shadowLastChange\n  - fixed bugs:\n    * problems with DN containing ( and ) (2059740)\n    * problem with gecos field in file upload (2103936)\n\n\n30.04.2008 2.3.0\n  - added Polish translation\n  - support phpGroupWare accounts\n  - password policies\n  - redesigned PDF editor\n  - show mail addresses as link in account list\n  - Unix: allow primary group members to be added as memberUid\n  - Kolab: support LAM Pro self service\n  - LAM Pro: new account type for groupOf(Unique)Names\n  - fixed bugs:\n   -> XHTML headers should be removed (1912736)\n\n\n23.01.2008 2.2.0\n  - account lists:\n   -> allow to switch sorting\n   -> added separate configuration page and store settings in cookies\n   -> list size can now be set individually for each account type on the list configuration page\n   -> new PDF buttons\n  - use suffix from account list as default for new accounts (patch 1823583)\n  - Security: passwords in configuration files are now saved as hash values\n  - improved design\n  - style fixes for Internet Explorer users\n  - Unix: allow to set host passwords (RFE 1754069)\n  - Unix: allow to generate random passwords for users\n  - Samba 3 groups: Samba part is now optional\n  - Personal: add object classes person and organizationalPerson for new accounts (RFE 1830033)\n  - new LDAP schema check on tests page\n  - LAM Pro:\n   -> added possibility for deskside support to reset passwords at account list page\n   -> access levels (read only, change passwords, write access) for server profiles\n\n\n07.11.2007 2.1.0\n  - tabular design for account pages\n  - show DN on account pages\n  - Samba 3: made Samba account optional\n  - Samba 3: manages now terminal server settings\n  - fixed bugs:\n   -> LAM Pro: UTF-8 characters are invalid displayed on configuration page (1788752)\n   -> LAM works again on PHP 5.1.x (1792447)\n   -> Quota: managing group quotas does not work (1811728)\n   -> Samba 3 domains: lockout users after bad logon attempts must allow 0 - 999 (1814578)\n\n\n08.08.2007 2.0.0\n  - new translations: Chinese (Simplified), Czech and Portuguese\n  - usability improvements\n  - LDAP accounts including child entries can now be moved\n  - group list can show primary members (RFE 1517679 and patch 1722460)\n  - more translated example texts (RFE 1702140)\n  - inetOrgPerson: now manages homePhone, roomNumber, businessCategory\n  - posixAccount: allow to create home directories in file upload (RFE 1665034)\n  - account lists: display buttons on top and bottom (RFE 1702136)\n  - fixed bugs:\n   -> OU editor: help images (1702132)\n   -> config editor: extra space (1702269)\n   -> fixed some inconsistent help entries (1694863)\n   -> user list: refreshing GID translation did not work (1719168)\n   -> allow uid as RDN attribute for inetOrgPerson (1740499)\n   -> PHP Warning: mcrypt_decrypt(): The IV parameter must be ... (1742543)\n   -> uid attribute no longer required for InetOrgPerson (1757215)\n\n\n28.03.2007 1.3.0\n  - improved design\n  - user list can now display jpegPhoto attributes\n  - lamdaemon: support for multiple servers\n  - LAM Pro: users may change their photos (jpegPhoto)\n  - fixed bugs:\n   -> ShadowAccount: PDF entry for expire date was wrong (1658868)\n   -> Samba groups: fixed help entry (patch 1664542)\n   -> Debian package did not include lamdaemonOld.pl (1660493)\n   -> NIS mail aliases: allow more characters in alias name (1674198)\n   -> fixed syntax errors in some .htaccess files\n   -> security fix: HTML special characters in LDAP data were not escaped\n\n  Developers:\n    API changes:\n    - added listPrintTableCellContent() to class lamList\n    - added listPrintAdditionalOptions() to class lamList\n    - added preModifyActions() to class baseModule\n    - added postModifyActions() to class baseModule\n    - added preDeleteActions() to class baseModule\n    - added postDeleteActions() to class baseModule\n\n\n24.01.2007 1.2.0\n  - Samba 3: better handling of date values\n  - Samba 3: Handling of locked accounts (RFE 1609076)\n  - LAM Pro: modules can define configuration settings (Unix: password hashing)\n  - LAM Pro: management of groupOfNames and groupOfUniqueNames entries (RFE 875482)\n  - fixed bugs:\n   -> Lamdaemon test did not work on PHP 4\n   -> InetOrgPerson: Problems with error messages (1628799)\n\n  Developers:\n    API changes:\n    - removed get_configDescription() from module interface\n    - added functions to handle configuration settings for LAM Pro\n\n\n01.11.2006 1.1.1\n   - Lamdaemon: added test page (Tools -> Tests -> Lamdaemon test)\n   - LAM Pro: Samba passwords can now be synchronized with Unix password\n   - Shadow account: better management of expiration date\n   - fixed bugs:\n    -> Unix: password hashing problem (1562426)\n    -> Unix: No error message for wrong UID numbers in file upload\n    -> Filters in account lists get lost when sorting the table\n\n\n20.09.2006 1.1.0\n   - Lamdaemon now uses the SSH implementation from PECL which is much more stable\n   - Samba 2/3: \"Use Unix password\" now on by default (1517678)\n\n  Developers:\n    API changes:\n    - removed $post parameters from module functions (delete_attributes(),\n      process_...(), display_html_...()). Use $_POST instead.\n    - process_...() functions: returned messages are no longer grouped\n      (e.g. return: array(array('INFO', 'headline', 'text'), array('INFO', 'headline2', 'text2')))\n\n\n10.08.2006 1.0.4\n   - added Russian translation\n   - Samba 3: added policies for domain objects\n   - inetLocalMailRecipient: print warning if local address is already in use\n\n\n05.07.2006 1.0.3\n   - fixed bugs:\n    -> Kolab: fixed problem with message about missing password\n    -> Unix groups: fixed auto GID\n    -> Unix users/groups: fixed silent unlocking of passwords\n    -> Unix users/groups: removed invalid password option\n    -> Shadow: account expiration date was incorrect in some time zones\n    -> User list: fixed problems when deleting users and translated GIDs are activated (1503367)\n\n\n24.05.2006 1.0.2\n   - security enhancements: session timeout, logging, host restrictions\n   - handle LDAP attribute aliases correctly\n   - fixed bugs:\n    -> PDF creation bug when GID translation is activated (1477111)\n    -> allow \"@\" in passwords (1477878)\n    -> Samba 2/3: fixed NT hashes\n    -> fixed handling of multi-value attributes (e.g. in inetLocalMailRecipient)\n\n\n12.04.2006 1.0.1\n   - LAM can now be installed with \"configure\" and \"make install\"\n   - added workaround for misspelled object classes (e.g. sambaSAMAccount by smbldap-tools)\n   - Unix: merged password hash settings for Unix users and groups\n   - Samba 3: added Windows group to profile options\n   - security: LAM checks the session id and client IP\n   - fixed bugs:\n    -> Samba 3: hash values were wrong in some rare cases (1440021)\n    -> Samba 3: re-added time zone selection for logon hours (1407761)\n    -> Unix: call of unknown function (1450464)\n\n\n01.03.2006 1.0.0\n   - new architecture with support for more account types\n   - new translations: Traditional Chinese, Dutch\n   - fixed bugs:\n    -> Samba groups: editing of special groups fixed\n    -> changed check for mail addresses (patch 1403922)\n    -> fixed JPG upload when MCrypt is enabled\n    -> fixed login problems for AD servers\n    -> improved sorting of account lists\n    -> fixed language setting in default configuration profile\n    -> fixed PHP5 warnings (getdate() and mktime())\n    -> error messages in Samba domain module (1437425)\n    -> fixed expired passwords with shadowAccount module\n    -> added lamdaemon.pl compatibility and security patches by Tim Rice\n\n\n08.02.2006 1.0.rc2\n   - new translation: Dutch\n   - fixed bugs:\n    -> changed check for mail addresses (patch 1403922)\n    -> fixed JPG upload when MCrypt is enabled\n    -> fixed login problems for AD servers\n\n\n09.01.2006 1.0.rc1\n   - new architecture with support for more account types\n   - new translation: Traditional Chinese\n   - fixed bugs:\n    -> Samba groups: editing of special groups fixed\n\n\n14.12.2005 0.5.3\n   - accounts are now deleted with subentries\n   - big update for Italian translation\n   - inetOrgPerson: support jpegPhoto images\n   - less restrictive input checks\n   - fixed bugs:\n    -> fixed problems with case-insensitive DNs\n    -> file upload did not work when max_execution_time=0 (1367957)\n    -> posixGroup: fixed help entries\n\n\n16.11.2005 0.5.2\n   - New module for SSH public keys\n   - check file permissions on login page\n   - fixed bugs:\n    -> creation of home directories did not work\n    -> allow spaces in profile names (1333058)\n    -> fixed problem with magic_quotes_gpc in profile editor (1333069)\n    -> inetOrgPerson: deletion of postal address and fax number now works\n\n\n19.10.2005 0.5.1\n   - Samba 3: added support for account expiration\n   - fixed bugs:\n    -> automatic UID/GID assignment did not fully work\n    -> PDF: additional groups for Unix users\n    -> inetOrgPerson: fixed mobile number\n    -> Samba 2/3: passwords fixed for file uploads (1311561)\n    -> Samba 3: fixed logon hours (patch 1311915)\n    -> Samba 3: loading of domain setting from profile did not work\n    -> Quota: profile settings fixed\n    -> reduced memory usage\n\n\n28.09.2005 0.5.0\n   - Samba 2/3: added display name in account pages\n   - fixed bugs:\n    -> fixed error message when creating new accounts with shadowAccount\n    -> added missing help entries on main account page\n    -> Samba 2/3: fixed settings for password expiration, no password and deactivated account\n    -> changing of RDN caused problems in some cases\n\n\n08.09.2005 0.5.rc3\n   - INFO messages no longer prevent changing to subpages of a module\n   - fixed bugs:\n    -> buttons on account page are better sorted\n    -> account module: some problems solved when used for user accounts\n    -> nisMailAlias: fixed missing RDN possibility\n    -> fixed conflicts when accounts were built with other base modules\n    -> Samba 2/3: setting allowed workstations failed\n    -> magic_quotes_gpc = Off prevented editing of accounts\n    -> fixed help links on Samba and Unix pages\n\n\n18.08.2005 0.5.rc2\n   - allow user accounts based only on \"account\" module\n   - inetOrgPerson: allow setting a password if posixAccount is not active\n   - fixed bugs:\n    -> removed Blowfish encryption (bad performance)\n    -> Kolab now complains if no user password is set\n\n\n08.08.2005 0.5.rc1\n   - Kolab 2 support\n   - added manager and post office box for inetOrgPerson\n   - Samba 3: added support for logon hours\n   - Samba 3: added sambaSID as possible RDN attribute\n   - improved error handling in profile editor\n   - now quotas can be set on CSV upload\n   - new logo\n   - fixed bugs:\n    -> several fixes for PHP5\n    -> fixes for PDF editor and output\n    -> password changing in tree view did not work\n    -> fixed changing of group memberships for users\n\n\n28.07.2005 0.4.10\n  - PHP5 compatibility added\n\n\n30.06.2005 0.5.alpha2\n   - added documentation about schemas\n   - PDF now uses UTF-8 fonts\n   - added possibility to create plain inetOrgPerson accounts\n   - fixed bugs:\n    -> set DN suffix and RDN on profile loading\n    -> several fixes for PDF editor\n    -> creating Samba hosts now works\n\n\n11.05.2005 0.5.alpha1\n  - new modular architecture\n   -> possibility to create Unix-only accounts\n   -> plugins for more objectClasses planned\n   -> enhanced PDF output\n   -> enhanced file upload\n   -> enhanced editor for account profiles\n   -> dynamic configuration options (based on modules)\n  - all pages in UTF-8\n  - added developer documentation\n  - PHPDoc formatted comments\n  - new plugin for managing MAC addresses (RFE 926017)\n  - new plugin for managing NIS mail aliases (RFE 1050036)\n  - new plugin for managing mail routing with inetLocalMailRecipient (RFE 1092137)\n  - schema browser\n  - tree view\n\n\n09.03.2005 0.4.9\n  - fixed bugs:\n      fixed error messages when moving an user account\n      fixed problem with special group SIDs\n      lamdaemon.pl security fix\n\n\n26.01.2005 0.4.8\n  - allow \"%\" at the beginning of Samba home/profile path (1107998)\n  - fixed bugs:\n      fixed IE fix ;-)\n      no more warnings for profiles with no additional groups set\n\n\n19.12.2004 0.4.7\n  - added \"*.exe\" to Samba logon script regex (1081715)\n  - fixed bugs:\n      fixed doctype of main frame\n      removed syntax check for LDAP suffixes\n      fixed IE bug at login\n      fixed encoding in HTTP header\n      passwords with \"'\" are now handled correctly at login (1081460)\n      fixed Samba flags if multiple hosts were created\n      updated .htaccess files to be compatible with newer Apache versions\n\n\n26.05.2004 0.4.6\n  - fixed bugs:\n      password hashes were not disabled correctly\n      street was copied to postal code on modify (938502)\n      underscore was not allowed for host names (934445)\n      deleting postal address or facsimile number failed (948616)\n      TLS error handling (958497)\n      smaller fixes on personal settings page\n\n\n21.03.2004 0.4.5\n  - added French translation\n  - fixed bugs:\n      StatusMessages with additional variables did not work\n      Samba hosts had unnecessary objectClass shadowAccount (910084)\n      Samba host passwords were still wrong\n      LAM had problems with non-standard spelled object classes (907636)\n      Perl scripts did not work if Perl is not installed in /usr/bin/perl (913554)\n      problems when cn!=uid (915041)\n      home directories were not deleted by lamdaemon.pl (913552)\n\n\n29.02.2004 0.4.4 (stable)\n  - fixed bugs:\n      plain posix groups could not be used as Samba 3 primary group\n      if magic_quotes_gpc in php.ini is was set to \"Off\", several pages did not work\n      some smaller bugs in mass upload\n      Samba hash values for hosts were not correct\n      Unix passwords could be disabled but not re-enabled\n      fixed problem with eval() in status.inc (894433)\n\n\n08.02.2004 0.4.3\n  - new login layout\n  - added Hungarian and Japanese translations\n  - fixed bugs:\n      Samba passwords were sometimes empty for new users (892272)\n      links in list views may not work with web servers other than Apache\n\n\n21.01.2004 0.4.2\n  - added config wizard\n  - MHash is only needed for PHP < 4.3\n  - use Blowfish for encryption instead of MCrypt\n\n\n29.12.2003 0.4.1\n\n  - better error handling at login\n  - support spaces in DNs\n  - PDF text for users\n  - create missing OUs recursively\n  - fixed bugs:\n      SMD5 passwords were wrong\n      primaryGroupSID wrong if SID has no relation to Algorithmic RID Base\n      Samba 2 accounts could not be created\n\n\n29.10.2003 0.4 (Beta1)\n\n  - improved design\n  - improved documentation\n  - Fixed possible error which could delete entries if objectclass didn't fit\n  - Fixed many samba 3.0 related bugs, most related to SIDs\n  - edit group members directly\n  - support for several password hashes (CRYPT/SHA/SSHA/MD5/SMD5/PLAIN)\n  - PDF output for groups and hosts\n\n\n31.08.2003 0.3 (Alpha 3)\n\n  - Samba 3 support\n  - manage Samba 3 domains\n  - multiple configuration files\n  - PDF output\n  - better mass creation\n\n\n04.07.2003 0.2 (Alpha 2)\n\n  - support for multiple OUs + OU-Editor\n  - account creation via file upload\n  - profile editor\n  - experimental Samba 3 support\n  - fixed a lot of bugs\n\n\n23.05.2003 0.1 (Alpha 1)\n\n  Initial release\n", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE book PUBLIC \"-//OASIS//DTD DocBook XML V4.5//EN\"\n\"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\">\n<chapter id=\"a_configuration\">\n  <title>Configuration</title>\n\n  <para>After you <link linkend=\"a_installation\">installed</link> LAM you can\n  configure it to fit your needs. The complete configuration can be done\n  inside the application. There is no need to edit configuration files.</para>\n\n  <para>Please point you browser to the location where you installed LAM. E.g.\n  for Debian/RPM this is http://yourServer/lam. If you installed LAM via the\n  tar.bz2 then this may vary. You should see the following page:</para>\n\n  <screenshot>\n    <mediaobject>\n      <imageobject>\n        <imagedata fileref=\"images/login.png\"/>\n      </imageobject>\n    </mediaobject>\n  </screenshot>\n\n  <para>If you see an error message then you might need to install an\n  additional PHP extension. Please follow the instructions and reload the page\n  afterwards.</para>\n\n  <para>Now you are ready to configure LAM. Click on the \"LAM configuration\"\n  link to proceed.</para>\n\n  <screenshot>\n    <mediaobject>\n      <imageobject>\n        <imagedata fileref=\"images/configOverview.png\"/>\n      </imageobject>\n    </mediaobject>\n  </screenshot>\n\n  <para>Here you can change LAM's general settings, setup server profiles for\n  your LDAP server(s) and configure the <link linkend=\"a_selfService\">self\n  service</link> (LAM Pro). You should start with the general settings and\n  then setup a server profile.</para>\n\n  <section id=\"generalSettings\">\n    <title>General settings</title>\n\n    <para>After selecting \"Edit general settings\" you will need to enter the\n    <link linkend=\"a_configPasswords\">master configuration password</link>.\n    The default password for new installations is \"lam\". Now you can edit the\n    general settings.</para>\n\n    <section>\n      <title>Configuration Database</title>\n\n      <para>This defines where LAM should store the configuration settings. By\n      default, local file system is used. If you have installed the PHP PDO\n      extension incl. MySQL then you can also select MySQL here. This will\n      then store all data (server profiles, account profiles, PDF structures,\n      ...) in the database.</para>\n\n      <para>Exceptions:</para>\n\n      <itemizedlist>\n        <listitem>\n          <para>Configuration storage options</para>\n        </listitem>\n\n        <listitem>\n          <para>LAM Pro license</para>\n        </listitem>\n\n        <listitem>\n          <para>CA certificates</para>\n        </listitem>\n      </itemizedlist>\n\n      <para>This is very useful when running LAM cloud native e.g. inside\n      Docker.</para>\n\n      <screenshot>\n        <graphic fileref=\"images/configGeneral9.png\"/>\n      </screenshot>\n    </section>\n\n    <section>\n      <title>License (LAM Pro only)</title>\n\n      <para>This is only required when you run LAM Pro. Please enter the\n      license key from your <ulink\n      url=\"https://www.ldap-account-manager.org/lamcms/user/me\">customer\n      profile</ulink>. In case you have purchased multiple licenses please\n      only enter one license key block per installation.</para>\n\n      <para>When you entered the license key then the license details can be\n      seen on LAM configuration overview page.</para>\n\n      <para>By default, LAM Pro will show a warning message on the login page\n      3 weeks before expiration. You can disable this here and/or send out an\n      email instead.</para>\n\n      <screenshot>\n        <mediaobject>\n          <imageobject>\n            <imagedata fileref=\"images/configGeneral7.png\"/>\n          </imageobject>\n        </mediaobject>\n      </screenshot>\n    </section>\n\n    <section>\n      <title>Security settings</title>\n\n      <para>Here you can set a time period after which inactive sessions are\n      automatically invalidated. The selected value represents minutes of\n      inactivity.</para>\n\n      <para>You may also set a list of IP addresses which are allowed to\n      access LAM. The IPs can be specified as full IP (e.g. 123.123.123.123)\n      or with the \"*\" wildcard (e.g. 123.123.123.*). Users which try to access\n      LAM via an untrusted IP only get blank pages. There is a separate field\n      for LAM Pro self service.</para>\n\n      <para id=\"sessionEncryption\">Session encryption will encrypt sensitive\n      data like passwords in your session files. This is only available when\n      PHP <ulink\n      url=\"http://php.net/manual/en/book.openssl.php\">OpenSSL</ulink> is\n      active. This adds extra security but also costs performance. If you\n      manage a large directory you might want to disable this and take other\n      actions to secure your LAM server.</para>\n\n      <screenshot>\n        <mediaobject>\n          <imageobject>\n            <imagedata fileref=\"images/configGeneral1.png\"/>\n          </imageobject>\n        </mediaobject>\n      </screenshot>\n\n      <para id=\"conf_sslCert\"><emphasis role=\"bold\">SSL certificate\n      setup:</emphasis></para>\n\n      <para>By default, LAM uses the CA certificates that are preinstalled on\n      your system. This will work if you connect via SSL/TLS to an LDAP server\n      that uses a certificate signed by a well-known CA. In case you use your\n      own CA (e.g. company internal CA) you can import the CA certificates\n      here.</para>\n\n      <para>Please note that this can affect other web applications on the\n      same server if they require different certificates. There seem to be\n      problems on Debian systems and you may also need to restart Apache. In\n      case of any problems please delete the uploaded certificates and use the\n      <link linkend=\"ssl_certSystem\">system setup</link>.</para>\n\n      <para>You can either upload a DER/PEM formatted certificate file or\n      import the certificates directly from an LDAP server that is available\n      with LDAP+SSL (ldaps://). LAM will automatically override system\n      certificates if at least one certificate is uploaded/imported.</para>\n\n      <para>The whole certificate list can be downloaded in PEM format. You\n      can also delete single certificates from the list.</para>\n\n      <para>Please note that you might need to restart your webserver if you\n      do any changes to this configuration.</para>\n\n      <screenshot>\n        <mediaobject>\n          <imageobject>\n            <imagedata fileref=\"images/configGeneral4.png\"/>\n          </imageobject>\n        </mediaobject>\n      </screenshot>\n    </section>\n\n    <section>\n      <title>Password policy</title>\n\n      <para>This allows you to specify a central password policy for LAM. The\n      policy is valid for all password fields inside LAM admin (excluding tree\n      view) and LAM self service. Configuration passwords do not need to\n      follow this policy.</para>\n\n      <screenshot>\n        <mediaobject>\n          <imageobject>\n            <imagedata fileref=\"images/configGeneral2.png\"/>\n          </imageobject>\n        </mediaobject>\n      </screenshot>\n\n      <para>You can set the minimum password length and also the complexity of\n      the passwords.</para>\n\n      <para><emphasis role=\"bold\">External password check</emphasis></para>\n\n      <para>Please note that this option is only displayed if you have\n      installed the PHP Curl extension for your web server.</para>\n\n      <para>This will validate passwords using an external service. LAM\n      supports the protocol used by <ulink\n      url=\"https://haveibeenpwned.com/API/v2#SearchingPwnedPasswordsByRange\">Have\n      I been Pwned</ulink>. You can use the service directly or setup any\n      custom service with the same API. If the service reports an error LAM\n      will log an error message and the password will be accepted.</para>\n\n      <para>Example URL:\n      https://api.pwnedpasswords.com/range/{SHA1PREFIX}</para>\n\n      <para>LAM will build a SHA1 hash of the password and send parts of it to\n      the service.</para>\n\n      <para>The configured URL must contain the wildcard \"{SHA1PREFIX}\" which\n      will be replaced with the 5 character hash prefix. The service must then\n      return a list of text lines in the format \"&lt;hash\n      suffix&gt;:&lt;number&gt;\".</para>\n\n      <para>\"&lt;hash suffix&gt;\" needs to be the suffix of a known insecure\n      password. The \"&lt;number&gt;\" can be any numeric value and will be\n      ignored by LAM.</para>\n\n      <para>Example:</para>\n\n      <para>Password hash: 21BD10018A45C4D1DEF81644B54AB7F969B88D65</para>\n\n      <para>Hash prefix sent to service: 21BD1</para>\n\n      <para>Returned line: 0018A45C4D1DEF81644B54AB7F969B88D65:1</para>\n\n      <para>This will reject the password.</para>\n    </section>\n\n    <section id=\"conf_logging\">\n      <title>Logging</title>\n\n      <para>LAM can log events (e.g. user logins). You can use e.g. system\n      logging (syslog for Unix, event viewer for Windows) or log to a separate\n      file. Please note that LAM may log sensitive data (e.g. passwords) at\n      log level \"Debug\". Production systems should be set to \"Warning\" or\n      \"Error\".</para>\n\n      <para>The PHP error reporting is only for developers. By default LAM\n      does not show PHP notice messages in the web pages. You can select to\n      use the php.ini setting here or printing all errors and notices.</para>\n\n      <para>Log destinations:</para>\n\n      <itemizedlist>\n        <listitem>\n          <para>File: all messages will be written to the given file. LAM will\n          create it if not yet existing.</para>\n        </listitem>\n\n        <listitem>\n          <para>Syslog: uses local system logging (syslog for Unix, event\n          viewer for Windows)</para>\n        </listitem>\n\n        <listitem>\n          <para>Remote: sends log messages to a remote server that supports\n          the Unix <ulink url=\"https://www.rsyslog.com/\">remote\n          Syslogd</ulink> protocol. Please enter destination as \"server:port\",\n          e.g. \"myserver:123\".</para>\n        </listitem>\n\n        <listitem>\n          <para>No logging: disabled logging</para>\n        </listitem>\n      </itemizedlist>\n\n      <screenshot>\n        <mediaobject>\n          <imageobject>\n            <imagedata fileref=\"images/configGeneral3.png\"/>\n          </imageobject>\n        </mediaobject>\n      </screenshot>\n    </section>\n\n    <section id=\"mailSetup\">\n      <title>Mail options (LAM Pro)</title>\n\n      <para>Here you can configure the mail server settings. If you do not set\n      a mail server then LAM will try to use a locally installed one (e.g.\n      postfix, exim, sendmail).</para>\n\n      <para>SMTP setup:</para>\n\n      <para>Mail server: enter name + port separated by \":\". E.g. \"server:25\"\n      will use \"server\" on port 25.</para>\n\n      <para>User name: enter the user name if your SMTP server requires\n      authentication</para>\n\n      <para>Password: enter the password for the user above</para>\n\n      <para>Encryption protocol: Use TLS when unsure. SSL is only for older\n      servers and deprecated. The no encryption setting should not be used for\n      production installations.</para>\n\n      <screenshot>\n        <mediaobject>\n          <imageobject>\n            <imagedata fileref=\"images/configGeneral6.png\"/>\n          </imageobject>\n        </mediaobject>\n      </screenshot>\n    </section>\n\n    <section id=\"confmain_webauthn\">\n      <title>WebAuthn/FIDO2 devices</title>\n\n      <para>See the <link linkend=\"a_webauthn\">WebAuthn/FIDO2 appendix</link>\n      for an overview about WebAuthn/FIDO2 in LAM.</para>\n\n      <para>Here you can delete any webauthn device registrations. This\n      section is only shown if at least one device is registered.</para>\n\n      <para>Enter a part of the user's DN in the input box and perform a\n      search. LAM will show users and devices that match the search. You can\n      then delete a device registration. If the user has no more registered\n      devices then LAM will ask for registration on next login.</para>\n\n      <para>Note: You cannot add any device here. This can only be done by the\n      user during login, <link linkend=\"tool_webauthn\">webauthn tool</link> or\n      self service.</para>\n\n      <para><screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/configGeneral8.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot></para>\n    </section>\n\n    <section>\n      <title>Change master password</title>\n\n      <para>If you would like to change the master configuration password then\n      enter a new password here.</para>\n\n      <screenshot>\n        <mediaobject>\n          <imageobject>\n            <imagedata fileref=\"images/configGeneral5.png\"/>\n          </imageobject>\n        </mediaobject>\n      </screenshot>\n    </section>\n  </section>\n\n  <section id=\"serverProfiles\">\n    <title>Server profiles</title>\n\n    <para>The server profiles store information about your LDAP server (e.g.\n    host name) and what kind of accounts (e.g. users and groups) you would\n    like to manage. There is no limit on the number of server profiles. See\n    the <link linkend=\"confTypicalScenarios\">typical scenarios</link> about\n    how to structure your server profiles.</para>\n\n    <section>\n      <title>Manage server profiles</title>\n\n      <para>Select \"Manage server profiles\" to open the profile management\n      page.</para>\n\n      <screenshot>\n        <mediaobject>\n          <imageobject>\n            <imagedata fileref=\"images/configProfiles1.png\"/>\n          </imageobject>\n        </mediaobject>\n      </screenshot>\n\n      <para>Here you can create, rename and delete server profiles. The <link\n      linkend=\"a_configPasswords\">passwords</link> of your server profiles can\n      also be reset.</para>\n\n      <para>You may also specify the default server profile. This is the\n      server profile which is preselected at the login page. It also specifies\n      the language of the login and configuration pages.</para>\n\n      <para><emphasis role=\"bold\">Templates for new server\n      profiles</emphasis></para>\n\n      <para>You can create a new server profile based on one of the built-in\n      templates or any existing profile. Of course, the account types and\n      selected modules can be changed after you created your profile.</para>\n\n      <para>Built-in templates:</para>\n\n      <itemizedlist>\n        <listitem>\n          <para>addressbook: simple profile for user management with\n          inetOrgPerson object class</para>\n        </listitem>\n\n        <listitem>\n          <para>samba3: Samba 3 users, groups, hosts and domains</para>\n        </listitem>\n\n        <listitem>\n          <para>unix: Unix users and groups (posixAccount/Group)</para>\n        </listitem>\n\n        <listitem>\n          <para>windows_samba4: Active Directory user, group and host\n          management</para>\n        </listitem>\n      </itemizedlist>\n\n      <screenshot>\n        <mediaobject>\n          <imageobject>\n            <imagedata fileref=\"images/configProfiles2.png\"/>\n          </imageobject>\n        </mediaobject>\n      </screenshot>\n\n      <para>All operations on the profile management page require that you\n      authenticate yourself with the <link\n      linkend=\"a_configPasswords\">configuration master password</link>.</para>\n    </section>\n\n    <section>\n      <title>Editing a server profile</title>\n\n      <para>Please select you server profile and enter its password to edit a\n      server profile.</para>\n\n      <screenshot>\n        <mediaobject>\n          <imageobject>\n            <imagedata fileref=\"images/configProfiles3.png\"/>\n          </imageobject>\n        </mediaobject>\n      </screenshot>\n\n      <para>Each server profile contains the following information:</para>\n\n      <itemizedlist>\n        <listitem>\n          <para><emphasis role=\"bold\">General settings:</emphasis> general\n          settings about your LDAP server (e.g. host name and security\n          settings)</para>\n        </listitem>\n\n        <listitem>\n          <para><emphasis role=\"bold\">Account types:</emphasis> list of\n          account types (e.g. users and groups) that you would like to manage\n          and type specific settings (e.g. LDAP suffix)</para>\n        </listitem>\n\n        <listitem>\n          <para><emphasis role=\"bold\">Modules:</emphasis> list of modules\n          which define what account aspects (e.g. Unix, Samba, Kolab) you\n          would like to manage</para>\n        </listitem>\n\n        <listitem>\n          <para><emphasis role=\"bold\">Module settings:</emphasis> settings\n          which are specific for the selected account modules on the page\n          before</para>\n        </listitem>\n      </itemizedlist>\n\n      <section id=\"general_settings\">\n        <title>General settings</title>\n\n        <para>Here you can specify the LDAP server and some security\n        settings.</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/configProfiles4.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para>The server address of your LDAP server can be a DNS name or an\n        IP address. Use ldap:// for unencrypted LDAP connections or TLS\n        encrypted connections. LDAP+SSL (LDAPS) encrypted connections are\n        specified with ldaps://. The port value is optional. TLS cannot be\n        combined with ldaps://.</para>\n\n        <para>Hint: If you use a master/slave setup with referrals then point\n        LAM to your master server. Due to bugs in the underlying LDAP\n        libraries pointing to a slave might cause issues on write\n        operations.</para>\n\n        <para>LAM includes an LDAP browser which allows direct modification of\n        LDAP entries. If you would like to use it then enter the LDAP suffix\n        at \"Tree suffix\".</para>\n\n        <para>The search limit is used to reduce the number of search results\n        which are returned by your LDAP server.</para>\n\n        <para>The access level specifies if LAM should allow to modify LDAP\n        entries. This feature is only available in LAM Pro. LAM non-Pro\n        releases use write access. See <link\n        linkend=\"a_accessLevelPasswordReset\">this page</link> for details on\n        the different access levels.</para>\n\n        <para><emphasis role=\"bold\">Advanced options</emphasis></para>\n\n        <para>Display name: Sometimes, you may not want to display the server\n        address on the login page. In this case you can setup a display name\n        here (e.g. \"Production\").</para>\n\n        <para>Follow referrals: By default LAM will not follow LDAP referrals.\n        This is ok for most installations. If you use LDAP referrals please\n        activate the referral option in advanced settings.</para>\n\n        <para>Paged results: Paged results should be activated only if you\n        encounter any problems regarding size limits on Active Directory. LAM\n        will then query LDAP to return results in chunks of 999\n        entries.</para>\n\n        <para>Referential integrity overlay: Activate this checkbox if you\n        have any server side extension for referential integrity in place. In\n        this case the server will cleanup references to LDAP entries that are\n        deleted.</para>\n\n        <para>The following actions are skipped in this case:</para>\n\n        <itemizedlist>\n          <listitem>\n            <para>Users: group of (unique) names: memberships are not deleted\n            when user is deleted</para>\n          </listitem>\n\n          <listitem>\n            <para>Users: organizational roles: role assignments are not\n            deleted when user is deleted</para>\n          </listitem>\n\n          <listitem>\n            <para>Groups: groupOf(Unique)Names: memberships are not deleted\n            when group is deleted</para>\n          </listitem>\n        </itemizedlist>\n\n        <para>Hide password prompt for expired password: Hides the password\n        prompt when a user with expired password logs into LAM.</para>\n\n        <literallayout>\n</literallayout>\n\n        <para>LAM is translated to many different languages. Here you can\n        select the default language for this server profile. The language\n        setting may be overridden at the LAM login page.</para>\n\n        <para>Please also set your time zone here.</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/configProfiles5.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para>LAM can manage user home directories and quotas with an external\n        script. You can specify the home directory server and where the script\n        is located. The default rights for new home directories can be set,\n        too.</para>\n\n        <para><emphasis role=\"bold\">Note:</emphasis> This requires lamdaemon\n        to be installed on the remote server. This comes as separate package\n        for DEB/RPM. See <link linkend=\"a_lamdaemon\">here</link>.</para>\n\n        <para>Script server format:</para>\n\n        <itemizedlist>\n          <listitem>\n            <para>\"server\": \"server\" is the DNS name of your script\n            server</para>\n          </listitem>\n\n          <listitem>\n            <para>\"server:NAME\": NAME is the display name of this\n            server</para>\n          </listitem>\n\n          <listitem>\n            <para>\"server:NAME:/prefix\": /prefix is the directory prefix for\n            all operations. E.g. creating a home directory \"/home/user\" would\n            create \"/prefix/home/user\" then.</para>\n          </listitem>\n        </itemizedlist>\n\n        <para>You can provide a fixed user name. If you leave the field empty\n        then LAM will use your current account (the account you used to login\n        to LAM).</para>\n\n        <para>There are two possibilities to connect to your home\n        directory/quota server:</para>\n\n        <itemizedlist>\n          <listitem>\n            <para>SSH key (recommended): Please generate a SSH key pair and\n            provide the location to the <emphasis\n            role=\"bold\">private</emphasis> key file. If the key is protected\n            by a password you can also specify it here.</para>\n          </listitem>\n\n          <listitem>\n            <para>Password: If you do not set a SSH key then LAM will try to\n            connect with your current account (the password you used to login\n            to LAM).</para>\n          </listitem>\n        </itemizedlist>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/configProfiles6.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para id=\"profile_mail\">LAM Pro users may directly set passwords from\n        list view. You can configure if it should be possible to set specific\n        passwords and showing password on screen is allowed.</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/configProfiles10.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para>LAM Pro users can send out changed passwords to their users.\n        Here you can specify the options for these mails.</para>\n\n        <para>If you select \"Allow alternate address\" then password mails can\n        be sent to any address (e.g. a secondary address if the user account\n        is also bound to the mailbox).</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/configProfiles9.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para>LAM supports two methods for login:</para>\n\n        <itemizedlist>\n          <listitem>\n            <para>Fixed list</para>\n          </listitem>\n\n          <listitem>\n            <para>LDAP search</para>\n          </listitem>\n        </itemizedlist>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/configProfiles8.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para>The first one is to specify a fixed list of LDAP DNs that are\n        allowed to login. Please enter one DN per line.</para>\n\n        <para>The second one is to let LAM search for the DN in your\n        directory. E.g. if a user logs in with the user name \"joe\" then LAM\n        will do an LDAP search for this user name. When it finds a matching DN\n        then it will use this to authenticate the user. The wildcard \"%USER%\"\n        will be replaced by \"joe\" in this example. This way you can provide\n        login by user name, email address or other LDAP attributes.</para>\n\n        <para>Additionally, you can enable HTTP authentication when using\n        \"LDAP search\". This way the web server is responsible to authenticate\n        your users. LAM will use the given user name + password for the LDAP\n        login. You can also configure this to setup advanced login\n        restrictions (e.g. require group memberships for login). To setup HTTP\n        authentication in Apache please see this <ulink\n        url=\"http://httpd.apache.org/docs/2.2/howto/auth.html\">link</ulink>\n        and an example for LDAP authentication <link lang=\"\"\n        linkend=\"apache_http_auth\">here</link>.</para>\n\n        <para><emphasis role=\"bold\">Hint:</emphasis> LDAP search with group\n        membership check can be done with either <link\n        linkend=\"apache_http_auth\">HTTP authentication</link> or LDAP overlays\n        like <ulink\n        url=\"http://www.openldap.org/doc/admin24/overlays.html\">\"memberOf\"</ulink>\n        or <ulink\n        url=\"http://www.openldap.org/doc/admin24/overlays.html\">\"Dynamic\n        lists\"</ulink>. Dynamic lists allow to insert virtual attributes to\n        your user entries. These can then be used for the LDAP filter (e.g.\n        \"(&amp;(uid=%USER%)(memberof=cn=admins,ou=groups,dc=company,dc=com))\").</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/configProfiles7.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para><emphasis role=\"bold\">Global password policy\n        override</emphasis></para>\n\n        <para>This allows you to override some password policy options of\n        LAM's global password policy (LAM main configuration). You can\n        increase and decrease the values of the global policy.</para>\n\n        <screenshot>\n          <graphic fileref=\"images/configProfiles14.png\"/>\n        </screenshot>\n\n        <para id=\"conf_serverprofile_2fa\"><emphasis role=\"bold\">2-factor\n        authentication</emphasis></para>\n\n        <para>LAM supports 2-factor authentication for your users. This means\n        the user will not only authenticate by user+password but also with\n        e.g. a token generated by a mobile device. This adds more security\n        because the token is generated on a physically separated device\n        (typically mobile phone).</para>\n\n        <screenshot>\n          <graphic fileref=\"images/configProfiles11.png\"/>\n        </screenshot>\n\n        <para>The token is validated by a second application. LAM currently\n        supports:</para>\n\n        <itemizedlist>\n          <listitem>\n            <para><ulink\n            url=\"https://www.privacyidea.org/\">privacyIdea</ulink></para>\n          </listitem>\n\n          <listitem>\n            <para><ulink url=\"https://www.yubico.com/\">YubiKey</ulink></para>\n          </listitem>\n\n          <listitem>\n            <para><ulink url=\"https://duo.com/\">Duo</ulink></para>\n          </listitem>\n\n          <listitem>\n            <para><ulink\n            url=\"https://webauthn.io/\">WebAuthn/FIDO2</ulink></para>\n          </listitem>\n\n          <listitem>\n            <para><ulink url=\"https://www.okta.com/\">Okta</ulink></para>\n          </listitem>\n\n          <listitem>\n            <para><ulink url=\"https://openid.net/\">OpenID</ulink></para>\n          </listitem>\n        </itemizedlist>\n\n        <para>Configuration options:</para>\n\n        <para><emphasis role=\"bold\">privacyIDEA</emphasis></para>\n\n        <itemizedlist>\n          <listitem>\n            <para>Base URL: please enter the URL of your privacyIDEA\n            instance</para>\n          </listitem>\n\n          <listitem>\n            <para>User name attribute: please enter the LDAP attribute name\n            that contains the user ID (e.g. \"uid\").</para>\n          </listitem>\n\n          <listitem>\n            <para>Optional: By default LAM will enforce to use a token and\n            reject users that did not setup one. You can set this check to\n            optional. But if a user has setup a token then this will always be\n            required.</para>\n          </listitem>\n\n          <listitem>\n            <para>Disable certificate check: This should be used on\n            development instances only. It skips the certificate check when\n            connecting to verification server.</para>\n          </listitem>\n        </itemizedlist>\n\n        <para>Please note that LAM needs to authenticate to privacyIdea with\n        the user's user name and password WITHOUT second factor. This is\n        needed to get the list of tokens that are setup for the user. You can\n        setup a separate policy (scope: authentication) for LAM inside\n        privacyIdea that has IP restriction (\"Client\" setting) to LAM's server\n        IP and an action \"otppin\" \"none\".</para>\n\n        <para><emphasis role=\"bold\">YubiKey</emphasis></para>\n\n        <itemizedlist>\n          <listitem>\n            <para>Base URLs: please enter the URL(s) of your YubiKey\n            verification server(s). If you run a custom verification API such\n            as yubiserver then enter its URL (e.g.\n            http://www.example.com:8000/wsapi/2.0/verify). The URL needs to\n            end with \"/wsapi/2.0/verify\". For YubiKey cloud these are\n            \"https://api.yubico.com/wsapi/2.0/verify\",\n            \"https://api2.yubico.com/wsapi/2.0/verify\",\n            \"https://api3.yubico.com/wsapi/2.0/verify\",\n            \"https://api4.yubico.com/wsapi/2.0/verify\" and\n            \"https://api5.yubico.com/wsapi/2.0/verify\". Enter one URL per\n            line.</para>\n          </listitem>\n\n          <listitem>\n            <para>Client id: this is only required for YubiKey cloud. You can\n            register here: https://upgrade.yubico.com/getapikey/</para>\n          </listitem>\n\n          <listitem>\n            <para>Secret key: this is only required for YubiKey cloud. You can\n            register here: https://upgrade.yubico.com/getapikey/</para>\n          </listitem>\n\n          <listitem>\n            <para>Optional: By default LAM will enforce to use a token and\n            reject users that did not setup one. You can set this check to\n            optional. But if a user has setup a token then this will always be\n            required.</para>\n          </listitem>\n\n          <listitem>\n            <para>Disable certificate check: This should be used on\n            development instances only. It skips the certificate check when\n            connecting to verification server.</para>\n          </listitem>\n        </itemizedlist>\n\n        <para><emphasis role=\"bold\">Duo</emphasis></para>\n\n        <para>This requires to register a new \"Web SDK\" application in your\n        Duo admin panel.</para>\n\n        <itemizedlist>\n          <listitem>\n            <para>User name attribute: please enter the LDAP attribute name\n            that contains the user ID (e.g. \"uid\").</para>\n          </listitem>\n\n          <listitem>\n            <para>Base URL: please enter the API-URL of your Duo instance\n            (e.g. api-12345.duosecurity.com).</para>\n          </listitem>\n\n          <listitem>\n            <para>Client id: please enter your integration key.</para>\n          </listitem>\n\n          <listitem>\n            <para>Secret key: please enter your secret key.</para>\n          </listitem>\n        </itemizedlist>\n\n        <para><emphasis role=\"bold\">WebAuthn/FIDO2</emphasis></para>\n\n        <para>See the <link linkend=\"a_webauthn\">WebAuthn/FIDO2\n        appendix</link> for an overview about WebAuthn/FIDO2 in LAM.</para>\n\n        <para>Users will be asked to register a device during login if no\n        device is setup.</para>\n\n        <itemizedlist>\n          <listitem>\n            <para>Domain: Please enter the WebAuthn domain. This is the public\n            domain of the web server (e.g. \"example.com\"). Do not include\n            protocol or port. Browsers will reject authentication if the\n            domain does not match the web server domain.</para>\n          </listitem>\n\n          <listitem>\n            <para>Optional: By default LAM will enforce to use a 2FA device\n            and reject users that do not setup one. You can set this check to\n            optional. But if a user has setup a device then this will always\n            be required.</para>\n          </listitem>\n        </itemizedlist>\n\n        <para><emphasis role=\"bold\">Okta</emphasis></para>\n\n        <para>This requires to register a new application of type\n        \"Web\".</para>\n\n        <para>There, you will need to configure LAM's 2-factor URLs as \"Login\n        redirect URIs\" in the new application. They are\n        \"https://YOURDOMAIN/lam/templates/login2Factor.php\" for admin\n        interface and\n        \"https://YOURDOMAIN/lam/templates/selfService/selfService2Factor.php\"\n        for self service. You will get an error message during login with the\n        URL to configure in case it was wrong.</para>\n\n        <para>On \"Sign On\" tab you need to add a rule that prompts for the\n        factor.</para>\n\n        <para>LAM options:</para>\n\n        <itemizedlist>\n          <listitem>\n            <para>User name attribute: please enter the LDAP attribute name\n            that contains the user ID (e.g. \"mail\").</para>\n          </listitem>\n\n          <listitem>\n            <para>Base URL: please enter the URL of your Okta domain (e.g.\n            https://mydomain.okta.com)</para>\n          </listitem>\n\n          <listitem>\n            <para>Client id: please enter your application client id.</para>\n          </listitem>\n\n          <listitem>\n            <para>Secret key: please enter your application secret key.</para>\n          </listitem>\n        </itemizedlist>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/okta1.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para><emphasis role=\"bold\">OpenID</emphasis></para>\n\n        <para>This will use an OpenID server as 2nd factor for\n        authentication.</para>\n\n        <para>LAM options:</para>\n\n        <itemizedlist>\n          <listitem>\n            <para>User name attribute: please enter the LDAP attribute name\n            that contains the user ID (e.g. \"uid\").</para>\n          </listitem>\n\n          <listitem>\n            <para>Base URL: please enter the URL of your OpenID client URL.\n            The URL is the one before the\n            \"/.well-known/openid-configuration\".</para>\n          </listitem>\n\n          <listitem>\n            <para>Client id: please enter your application client id.</para>\n          </listitem>\n\n          <listitem>\n            <para>Secret key: please enter your application secret key.</para>\n          </listitem>\n        </itemizedlist>\n\n        <para>KeyCloack example configuration:</para>\n\n        <para>Create a new client, select \"openid-connect\" protocol and enter\n        a client ID. Root URL can be left empty.</para>\n\n        <screenshot>\n          <graphic fileref=\"images/openid1.png\"/>\n        </screenshot>\n\n        <para>Now choose access type \"confidential\" and enter the valid\n        redirect URLs. They are\n        \"https://YOURDOMAIN/lam/templates/login2Factor.php\" for admin\n        interface and\n        \"https://YOURDOMAIN/lam/templates/selfService/selfService2Factor.php\"\n        for self service. You will get an error message during login in case\n        it was wrong. Then save the configuration.</para>\n\n        <para>Next, switch to tab \"Credentials\" to get the client\n        secret.</para>\n\n        <screenshot>\n          <graphic fileref=\"images/openid2.png\"/>\n        </screenshot>\n\n        <para>Example configuration values:</para>\n\n        <itemizedlist>\n          <listitem>\n            <para>User name: uid</para>\n          </listitem>\n\n          <listitem>\n            <para>Base URL: http://openidserver/auth/realms/master</para>\n          </listitem>\n\n          <listitem>\n            <para>Client id: demo</para>\n          </listitem>\n\n          <listitem>\n            <para>Secret key: 59bdf504-b76e-4138-8421-ef662b2c6c83</para>\n          </listitem>\n        </itemizedlist>\n\n        <para><emphasis role=\"bold\">Login</emphasis></para>\n\n        <para>After logging in with user + password LAM will ask for the 2nd\n        factor. If the user has setup multiple factors then he can choose one\n        of them.</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/configProfiles12.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para><emphasis role=\"bold\">Password</emphasis></para>\n\n        <para>You may also change the password of this server profile. Please\n        just enter the new password in both password fields.</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/configProfiles13.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n      </section>\n\n      <section>\n        <title>Account types</title>\n\n        <para>LAM supports to manage various types of LDAP entries (e.g.\n        users, groups, DHCP entries, ...). On this page you can select which\n        types of entries you want to manage with LAM.</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/configTypes1.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para>The section at the top shows a list of possible types. You can\n        activate them by simply clicking on the plus sign next to it.</para>\n\n        <para>Each account type has the following options:</para>\n\n        <itemizedlist>\n          <listitem>\n            <para><emphasis role=\"bold\">LDAP suffix:</emphasis> the LDAP\n            suffix where entries of this type should be managed</para>\n          </listitem>\n\n          <listitem>\n            <para><emphasis role=\"bold\">List attributes:</emphasis> a list of\n            attributes which are shown in the account lists</para>\n          </listitem>\n\n          <listitem>\n            <para><emphasis role=\"bold\">Additional LDAP filter:</emphasis> LAM\n            will automatically detect the right LDAP entries for each account\n            type. This can be used to further limit the number of visible\n            entries (e.g. if you want to manage only some specific groups).\n            You can use \"@@LOGIN_DN@@\" as wildcard (e.g.\n            \"(owner=@@LOGIN_DN@@)\"). It will be replaced by the DN of the user\n            who is logged in.</para>\n          </listitem>\n\n          <listitem>\n            <para><emphasis role=\"bold\">Hidden:</emphasis> This is used to\n            hide account types that should not be displayed but are required\n            by other account types. E.g. you can hide the Samba domains\n            account type and still assign domains when you edit your\n            users.</para>\n          </listitem>\n\n          <listitem>\n            <para><emphasis role=\"bold\">Read-only (LAM Pro only):</emphasis>\n            This allows to set a single account type to read-only mode. Please\n            note that this is a restriction on functional level (e.g. group\n            memberships can be changed on user page even if groups are\n            read-only) and is no replacement for setting up proper ACLs on\n            your LDAP server.</para>\n          </listitem>\n\n          <listitem>\n            <para><emphasis role=\"bold\">Custom label:</emphasis> Here you can\n            set a custom label for the account types. Use this if the standard\n            label does not fit for you (e.g. enter \"Servers\" for\n            hosts).</para>\n          </listitem>\n\n          <listitem>\n            <para><emphasis role=\"bold\">No new entries (LAM Pro\n            only):</emphasis> Use this if you want to prevent that new\n            accounts of this type are created by your users. The GUI will hide\n            buttons to create new entries and also disable file upload for\n            this type.</para>\n          </listitem>\n\n          <listitem>\n            <para><emphasis role=\"bold\">Disallow delete (LAM Pro\n            only):</emphasis> Use this if you want to prevent that accounts of\n            this type are deleted by your users.</para>\n          </listitem>\n        </itemizedlist>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/configTypes2.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para>On the next page you can specify in detail what extensions\n        should be enabled for each account type.</para>\n      </section>\n\n      <section>\n        <title>Modules</title>\n\n        <para>The modules specify the active extensions for each account type.\n        E.g. here you can setup if your user entries should be address book\n        entries only or also support Unix or Samba.</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/configModules1.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para>Each account type needs a so called \"base module\". This is the\n        basement for all LDAP entries of this type. Usually, it provides the\n        structural object class for the LDAP entries. There must be exactly\n        one active base module for each account type.</para>\n\n        <para>Furthermore, there may be any number of additional active\n        account modules. E.g. you may select \"Personal\" as base module and\n        Unix + Samba as additional modules.</para>\n      </section>\n\n      <section>\n        <title>Module settings</title>\n\n        <para>Depending on the activated account modules there may be\n        additional configuration options available. They can be found on the\n        \"Module settings\" tab. E.g. the Personal account module allows to hide\n        several input fields and the Unix module requires to specify ranges\n        for UID numbers.</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/configSettings1.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n      </section>\n    </section>\n\n    <section>\n      <title>Cron jobs (LAM Pro)</title>\n\n      <para>LAM Pro can execute common tasks via cron job. This can be used to\n      e.g. notify your users before their passwords expire.</para>\n\n      <section>\n        <title>LDAP and database configuration</title>\n\n        <para>Please add the LDAP bind user and password for all jobs. This\n        LDAP account will be used to perform all LDAP read and write\n        operations.</para>\n\n        <para>Next, select the database type where LAM should store job\n        related data. Supported databases are SQLite and MySQL.</para>\n\n        <para><emphasis role=\"bold\">SQLite</emphasis></para>\n\n        <para>This is a simple file based database. It needs no special\n        database server. The database file will be located next to the server\n        profile in config directory.</para>\n\n        <para>You will need to install the SQLite PDO module for PHP\n        (pdo_sqlite.so). For Debian this is located in package\n        php5-sqlite.</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/jobs1.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para><emphasis role=\"bold\">MySQL</emphasis></para>\n\n        <para>This will store all job data in an external MySQL\n        database.</para>\n\n        <para>You will need to install the MySQL PDO module for PHP\n        (pdo_mysql.so). For Debian this is located in package\n        php5-mysql.</para>\n\n        <para>Steps to create a MySQL database and user:</para>\n\n        <literallayout># login\nmysql -u root -p\n# create a database\nmysql&gt; create database lam_cron;\n#\nmysql&gt; CREATE USER 'lam_cron'@'%' IDENTIFIED BY 'password';\nmysql&gt; CREATE USER 'lam_cron'@'localhost' IDENTIFIED BY 'password';\n# grant access for new user\nmysql&gt; GRANT ALL PRIVILEGES ON lam_cron.* TO 'lam_cron'@'%';\nmysql&gt; GRANT ALL PRIVILEGES ON lam_cron.* TO 'lam_cron'@'localhost';\n</literallayout>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/jobs3.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para><literallayout>\n</literallayout><emphasis role=\"bold\">Test your settings</emphasis></para>\n\n        <para>After the LDAP and database settings are done you can test your\n        settings.</para>\n\n        <para><emphasis role=\"bold\">Cron entry</emphasis></para>\n\n        <para>LAM also prints the crontab line that you need to run the\n        configured jobs on a daily basis. The command must be run as the same\n        user as your webserver is running. You are free to change the starting\n        time of the script or run it more often.</para>\n\n        <para>Dry-run: You can perform a dry-run of the job. This will not\n        perform any actions but only print what would be done. For this please\n        put \"--dryRun\" at the end of the command. E.g.:</para>\n\n        <literallayout>  /usr/share/ldap-account-manager/lib/cron.sh lam 123456789 --dryRun</literallayout>\n\n        <para/>\n      </section>\n\n      <section>\n        <title>Adding jobs</title>\n\n        <para>To add a new job just click on the \"Add job\" button and select\n        the job type you need. The list of available jobs depends on your\n        active account modules. E.g. the PPolicy job will only be available if\n        you activated PPolicy user module.</para>\n\n        <para>Depending on the job type jobs may be added multiple times with\n        different configurations. For descriptions about the available job\n        types see next chapters.</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/jobs2.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para>Available jobs:</para>\n\n        <itemizedlist>\n          <listitem>\n            <para><link linkend=\"job_ppolicy_password_expire\">PPolicy: Notify\n            users about password expiration</link></para>\n          </listitem>\n\n          <listitem>\n            <para><link linkend=\"job_389_password_expire\">389ds: Notify users\n            about password expiration</link></para>\n          </listitem>\n\n          <listitem>\n            <para><link linkend=\"job_shadow_password_expire\">Shadow: Notify\n            users about password expiration</link></para>\n          </listitem>\n\n          <listitem>\n            <para><link linkend=\"job_shadow_move_expired\">Shadow: Delete or\n            move expired accounts</link></para>\n          </listitem>\n\n          <listitem>\n            <para><link linkend=\"job_shadow_account_expiration_note\">Shadow:\n            Notify users about account expiration</link></para>\n          </listitem>\n\n          <listitem>\n            <para><link linkend=\"job_windows_password_expire\">Windows: Notify\n            users about password expiration</link></para>\n          </listitem>\n\n          <listitem>\n            <para><link linkend=\"job_windows_account_expiration_note\">Windows:\n            Notify users about account expiration</link></para>\n          </listitem>\n\n          <listitem>\n            <para><link linkend=\"job_windows_move_expired\">Windows: Delete or\n            move expired accounts</link></para>\n          </listitem>\n\n          <listitem>\n            <para><link linkend=\"job_windows_notify_groups\">Windows: Notify\n            users about their managed groups</link></para>\n          </listitem>\n\n          <listitem>\n            <para><link linkend=\"job_freeradius_move_expired\">FreeRadius:\n            Delete or move expired accounts</link></para>\n          </listitem>\n\n          <listitem>\n            <para><link\n            linkend=\"job_freeradius_account_expiration_notification\">FreeRadius:\n            Notify users about account expiration</link></para>\n          </listitem>\n\n          <listitem>\n            <para><link linkend=\"job_qmail_move_expired\">Qmail: Delete or move\n            expired accounts</link></para>\n          </listitem>\n\n          <listitem>\n            <para><link linkend=\"job_qmail_account_expire_notify\">Qmail:\n            Notify users about account expiration</link></para>\n          </listitem>\n        </itemizedlist>\n\n        <section id=\"job_ppolicy_password_expire\">\n          <title>PPolicy: Notify users about password expiration</title>\n\n          <para>This will send your users an email reminder before their\n          password expires.</para>\n\n          <para>You need to activate the PPolicy module for users to be able\n          to add this job. The job can be added multiple times (e.g. to send a\n          second warning at a later time).</para>\n\n          <para>LAM calculates the expiration date based on the last password\n          change and the assigned password policy (or the default policy)\n          using attributes pwdMaxAge and pwdExpireWarning.</para>\n\n          <para>Examples:</para>\n\n          <para>Warning time (pwdExpireWarning) = 14 days, notification period\n          = 10: LAM will send out the email 24 days before the password\n          expires</para>\n\n          <para>Warning time (pwdExpireWarning) = 14 days, notification period\n          = 0: LAM will send out the email 14 days before the password\n          expires</para>\n\n          <para>No warning time (pwdExpireWarning), notification period = 10:\n          LAM will send out the email 10 days before the password\n          expires</para>\n\n          <screenshot>\n            <mediaobject>\n              <imageobject>\n                <imagedata fileref=\"images/jobs_ppolicy1.png\"/>\n              </imageobject>\n            </mediaobject>\n          </screenshot>\n\n          <table>\n            <title>Options</title>\n\n            <tgroup cols=\"2\">\n              <tbody>\n                <row>\n                  <entry><emphasis role=\"bold\">Option</emphasis></entry>\n\n                  <entry><emphasis role=\"bold\">Description</emphasis></entry>\n                </row>\n\n                <row>\n                  <entry>From address</entry>\n\n                  <entry>The email address to set as FROM.</entry>\n                </row>\n\n                <row>\n                  <entry>Reply-to address</entry>\n\n                  <entry>Optional Reply-to address for email.</entry>\n                </row>\n\n                <row>\n                  <entry>CC address</entry>\n\n                  <entry>Optional CC mail address.</entry>\n                </row>\n\n                <row>\n                  <entry>BCC address</entry>\n\n                  <entry>Optional BCC mail address.</entry>\n                </row>\n\n                <row>\n                  <entry>Subject</entry>\n\n                  <entry>The email subject line. Supports wildcards, see\n                  below.</entry>\n                </row>\n\n                <row>\n                  <entry>Text</entry>\n\n                  <entry>The email body text. Supports wildcards, see\n                  below.</entry>\n                </row>\n\n                <row>\n                  <entry>Notification period</entry>\n\n                  <entry>Number of days to notify before password\n                  expires.</entry>\n                </row>\n\n                <row>\n                  <entry>Default password policy</entry>\n\n                  <entry>Default PPolicy password policy entry (object class\n                  \"pwdPolicy\").</entry>\n                </row>\n              </tbody>\n            </tgroup>\n          </table>\n\n          <para>Wildcards:</para>\n\n          <para>You can enter LDAP attributes as wildcards in the form\n          @@ATTRIBUTE_NAME@@. E.g. to add the user's common name use \"@@cn@@\".\n          For the common name it would be \"@@cn@@\".</para>\n\n          <para>There are also two special wildcards for the expiration date.\n          @@EXPIRE_DATE_DDMMYYYY@@ will print the date as e.g. \"31.12.2016\".\n          @@EXPIRE_DATE_YYYYMMDD@@ will print the date as e.g.\n          \"2016-12-31\".</para>\n        </section>\n\n        <section id=\"job_389_password_expire\">\n          <title>389ds: Notify users about password expiration</title>\n\n          <para>This will send your users an email reminder before their\n          password expires.</para>\n\n          <para>You need to activate the Account Locking module for users to\n          be able to add this job. The job can be added multiple times (e.g.\n          to send a second warning at a later time).</para>\n\n          <para>LAM calculates the expiration date based on the attribute\n          passwordExpirationTime.</para>\n\n          <screenshot>\n            <mediaobject>\n              <imageobject>\n                <imagedata fileref=\"images/jobs_389dsPasswordMail1.png\"/>\n              </imageobject>\n            </mediaobject>\n          </screenshot>\n\n          <para><table>\n              <title>Options</title>\n\n              <tgroup cols=\"2\">\n                <tbody>\n                  <row>\n                    <entry><emphasis role=\"bold\">Option</emphasis></entry>\n\n                    <entry><emphasis\n                    role=\"bold\">Description</emphasis></entry>\n                  </row>\n\n                  <row>\n                    <entry>From address</entry>\n\n                    <entry>The email address to set as FROM.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Reply-to address</entry>\n\n                    <entry>Optional Reply-to address for email.</entry>\n                  </row>\n\n                  <row>\n                    <entry>CC address</entry>\n\n                    <entry>Optional CC mail address.</entry>\n                  </row>\n\n                  <row>\n                    <entry>BCC address</entry>\n\n                    <entry>Optional BCC mail address.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Subject</entry>\n\n                    <entry>The email subject line. Supports wildcards, see\n                    below.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Text</entry>\n\n                    <entry>The email body text. Supports wildcards, see\n                    below.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Notification period</entry>\n\n                    <entry>Number of days to notify before password\n                    expires.</entry>\n                  </row>\n                </tbody>\n              </tgroup>\n            </table></para>\n\n          <para>Wildcards:</para>\n\n          <para>You can enter LDAP attributes as wildcards in the form\n          @@ATTRIBUTE_NAME@@. E.g. to add the user's common name use \"@@cn@@\".\n          For the common name it would be \"@@cn@@\".</para>\n\n          <para>There are also two special wildcards for the expiration date.\n          @@EXPIRE_DATE_DDMMYYYY@@ will print the date as e.g. \"31.12.2016\".\n          @@EXPIRE_DATE_YYYYMMDD@@ will print the date as e.g.\n          \"2016-12-31\".</para>\n        </section>\n\n        <section id=\"job_shadow_password_expire\">\n          <title>Shadow: Notify users about password expiration</title>\n\n          <para>This will send your users an email reminder before their\n          password expires.</para>\n\n          <para>You need to activate the Shadow module for users to be able to\n          add this job. The job can be added multiple times (e.g. to send a\n          second warning at a later time).</para>\n\n          <para>LAM calculates the expiration date based on the last password\n          change, the password warning time (attribute \"shadowWarning\") and\n          the specified notification period.</para>\n\n          <para>Examples:</para>\n\n          <para>Warning time = 14, notification period = 10: LAM will send out\n          the email 24 days before the password expires</para>\n\n          <para>Warning time = 14, notification period = 0: LAM will send out\n          the email 14 days before the password expires</para>\n\n          <screenshot>\n            <mediaobject>\n              <imageobject>\n                <imagedata fileref=\"images/jobs_shadow1.png\"/>\n              </imageobject>\n            </mediaobject>\n          </screenshot>\n\n          <table>\n            <title>Options</title>\n\n            <tgroup cols=\"2\">\n              <tbody>\n                <row>\n                  <entry><emphasis role=\"bold\">Option</emphasis></entry>\n\n                  <entry><emphasis role=\"bold\">Description</emphasis></entry>\n                </row>\n\n                <row>\n                  <entry>From address</entry>\n\n                  <entry>The email address to set as FROM.</entry>\n                </row>\n\n                <row>\n                  <entry>Reply-to address</entry>\n\n                  <entry>Optional Reply-to address for email.</entry>\n                </row>\n\n                <row>\n                  <entry>CC address</entry>\n\n                  <entry>Optional CC mail address.</entry>\n                </row>\n\n                <row>\n                  <entry>BCC address</entry>\n\n                  <entry>Optional BCC mail address.</entry>\n                </row>\n\n                <row>\n                  <entry>Subject</entry>\n\n                  <entry>The email subject line. Supports wildcards, see\n                  below.</entry>\n                </row>\n\n                <row>\n                  <entry>Text</entry>\n\n                  <entry>The email body text. Supports wildcards, see\n                  below.</entry>\n                </row>\n\n                <row>\n                  <entry>Notification period</entry>\n\n                  <entry>Number of days to notify before password\n                  expires.</entry>\n                </row>\n              </tbody>\n            </tgroup>\n          </table>\n\n          <para>Wildcards:</para>\n\n          <para>You can enter LDAP attributes as wildcards in the form\n          @@ATTRIBUTE_NAME@@. E.g. to add the user's common name use \"@@cn@@\".\n          For the common name it would be \"@@cn@@\".</para>\n\n          <para>There are also two special wildcards for the expiration date.\n          @@EXPIRE_DATE_DDMMYYYY@@ will print the date as e.g. \"31.12.2016\".\n          @@EXPIRE_DATE_YYYYMMDD@@ will print the date as e.g.\n          \"2016-12-31\".</para>\n        </section>\n\n        <section id=\"job_shadow_move_expired\">\n          <title>Shadow: Delete or move expired accounts</title>\n\n          <para>You can automatically delete or move expired accounts. The job\n          checks Shadow account expiration dates (not password expiration\n          dates).</para>\n\n          <screenshot>\n            <mediaobject>\n              <imageobject>\n                <imagedata fileref=\"images/jobs_shadow2.png\"/>\n              </imageobject>\n            </mediaobject>\n          </screenshot>\n\n          <table>\n            <title>Options</title>\n\n            <tgroup cols=\"2\">\n              <tbody>\n                <row>\n                  <entry><emphasis role=\"bold\">Option</emphasis></entry>\n\n                  <entry><emphasis role=\"bold\">Description</emphasis></entry>\n                </row>\n\n                <row>\n                  <entry>Delay</entry>\n\n                  <entry>Number of days to wait after the account is\n                  expired.</entry>\n                </row>\n\n                <row>\n                  <entry>Action</entry>\n\n                  <entry>Delete or move accounts</entry>\n                </row>\n\n                <row>\n                  <entry>Target DN</entry>\n\n                  <entry>Move only: specifies the DN where accounts are\n                  moved</entry>\n                </row>\n              </tbody>\n            </tgroup>\n          </table>\n        </section>\n\n        <section id=\"job_shadow_account_expiration_note\">\n          <title>Shadow: Notify users about account expiration</title>\n\n          <para>This will send your users an email reminder before their whole\n          account expires.</para>\n\n          <para>You need to activate the Shadow module for users to be able to\n          add this job. The job can be added multiple times (e.g. to send a\n          second warning at a later time).</para>\n\n          <screenshot>\n            <graphic fileref=\"images/jobs_shadow3.png\"/>\n          </screenshot>\n\n          <para><table>\n              <title>Options</title>\n\n              <tgroup cols=\"2\">\n                <tbody>\n                  <row>\n                    <entry><emphasis role=\"bold\">Option</emphasis></entry>\n\n                    <entry><emphasis\n                    role=\"bold\">Description</emphasis></entry>\n                  </row>\n\n                  <row>\n                    <entry>From address</entry>\n\n                    <entry>The email address to set as FROM.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Reply-to address</entry>\n\n                    <entry>Optional Reply-to address for email.</entry>\n                  </row>\n\n                  <row>\n                    <entry>CC address</entry>\n\n                    <entry>Optional CC mail address.</entry>\n                  </row>\n\n                  <row>\n                    <entry>BCC address</entry>\n\n                    <entry>Optional BCC mail address.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Subject</entry>\n\n                    <entry>The email subject line. Supports wildcards, see\n                    below.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Text</entry>\n\n                    <entry>The email body text. Supports wildcards, see\n                    below.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Notification period</entry>\n\n                    <entry>Number of days to notify before account\n                    expires.</entry>\n                  </row>\n                </tbody>\n              </tgroup>\n            </table>Wildcards:</para>\n\n          <para>You can enter LDAP attributes as wildcards in the form\n          @@ATTRIBUTE_NAME@@. E.g. to add the user's common name use \"@@cn@@\".\n          For the common name it would be \"@@cn@@\".</para>\n\n          <para>There are also two special wildcards for the expiration date.\n          @@EXPIRE_DATE_DDMMYYYY@@ will print the date as e.g. \"31.12.2016\".\n          @@EXPIRE_DATE_YYYYMMDD@@ will print the date as e.g.\n          \"2016-12-31\".</para>\n        </section>\n\n        <section id=\"job_windows_password_expire\">\n          <title>Windows: Notify users about password expiration</title>\n\n          <para>This will send your users an email reminder before their\n          password expires.</para>\n\n          <para>You need to activate the Windows module for users to be able\n          to add this job. The job can be added multiple times (e.g. to send a\n          second warning at a later time).</para>\n\n          <para>LAM calculates the expiration date based on the last password\n          change and the domain policy.</para>\n\n          <screenshot>\n            <mediaobject>\n              <imageobject>\n                <imagedata fileref=\"images/jobs_windows1.png\"/>\n              </imageobject>\n            </mediaobject>\n          </screenshot>\n\n          <table>\n            <title>Options</title>\n\n            <tgroup cols=\"2\">\n              <tbody>\n                <row>\n                  <entry><emphasis role=\"bold\">Option</emphasis></entry>\n\n                  <entry><emphasis role=\"bold\">Description</emphasis></entry>\n                </row>\n\n                <row>\n                  <entry>From address</entry>\n\n                  <entry>The email address to set as FROM.</entry>\n                </row>\n\n                <row>\n                  <entry>Reply-to address</entry>\n\n                  <entry>Optional Reply-to address for email.</entry>\n                </row>\n\n                <row>\n                  <entry>CC address</entry>\n\n                  <entry>Optional CC mail address.</entry>\n                </row>\n\n                <row>\n                  <entry>BCC address</entry>\n\n                  <entry>Optional BCC mail address.</entry>\n                </row>\n\n                <row>\n                  <entry>Subject</entry>\n\n                  <entry>The email subject line. Supports wildcards, see\n                  below.</entry>\n                </row>\n\n                <row>\n                  <entry>Text</entry>\n\n                  <entry>The email body text. Supports wildcards, see\n                  below.</entry>\n                </row>\n\n                <row>\n                  <entry>Notification period</entry>\n\n                  <entry>Number of days to notify before password\n                  expires.</entry>\n                </row>\n              </tbody>\n            </tgroup>\n          </table>\n\n          <para>Wildcards:</para>\n\n          <para>You can enter LDAP attributes as wildcards in the form\n          @@ATTRIBUTE_NAME@@. E.g. to add the user's common name use \"@@cn@@\".\n          For the common name it would be \"@@cn@@\".</para>\n\n          <para>There are also two special wildcards for the expiration date.\n          @@EXPIRE_DATE_DDMMYYYY@@ will print the date as e.g. \"31.12.2016\".\n          @@EXPIRE_DATE_YYYYMMDD@@ will print the date as e.g.\n          \"2016-12-31\".</para>\n        </section>\n\n        <section id=\"job_windows_account_expiration_note\">\n          <title>Windows: Notify users about account expiration</title>\n\n          <para>This will send your users an email reminder before their whole\n          account expires.</para>\n\n          <para>You need to activate the Windows module for users to be able\n          to add this job. The job can be added multiple times (e.g. to send a\n          second warning at a later time).</para>\n\n          <screenshot>\n            <graphic fileref=\"images/jobs_windowsAccountExpiration.png\"/>\n          </screenshot>\n\n          <para><table>\n              <title>Options</title>\n\n              <tgroup cols=\"2\">\n                <tbody>\n                  <row>\n                    <entry><emphasis role=\"bold\">Option</emphasis></entry>\n\n                    <entry><emphasis\n                    role=\"bold\">Description</emphasis></entry>\n                  </row>\n\n                  <row>\n                    <entry>From address</entry>\n\n                    <entry>The email address to set as FROM.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Reply-to address</entry>\n\n                    <entry>Optional Reply-to address for email.</entry>\n                  </row>\n\n                  <row>\n                    <entry>CC address</entry>\n\n                    <entry>Optional CC mail address.</entry>\n                  </row>\n\n                  <row>\n                    <entry>BCC address</entry>\n\n                    <entry>Optional BCC mail address.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Subject</entry>\n\n                    <entry>The email subject line. Supports wildcards, see\n                    below.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Text</entry>\n\n                    <entry>The email body text. Supports wildcards, see\n                    below.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Notification period</entry>\n\n                    <entry>Number of days to notify before account\n                    expires.</entry>\n                  </row>\n                </tbody>\n              </tgroup>\n            </table>Wildcards:</para>\n\n          <para>You can enter LDAP attributes as wildcards in the form\n          @@ATTRIBUTE_NAME@@. E.g. to add the user's common name use \"@@cn@@\".\n          For the common name it would be \"@@cn@@\".</para>\n\n          <para>There are also two special wildcards for the expiration date.\n          @@EXPIRE_DATE_DDMMYYYY@@ will print the date as e.g. \"31.12.2016\".\n          @@EXPIRE_DATE_YYYYMMDD@@ will print the date as e.g.\n          \"2016-12-31\".</para>\n        </section>\n\n        <section id=\"job_windows_move_expired\">\n          <title>Windows: Delete or move expired accounts</title>\n\n          <para>You can automatically delete or move expired accounts.</para>\n\n          <screenshot>\n            <mediaobject>\n              <imageobject>\n                <imagedata fileref=\"images/jobs_windowsCleanup.png\"/>\n              </imageobject>\n            </mediaobject>\n          </screenshot>\n\n          <table>\n            <title>Options</title>\n\n            <tgroup cols=\"2\">\n              <tbody>\n                <row>\n                  <entry><emphasis role=\"bold\">Option</emphasis></entry>\n\n                  <entry><emphasis role=\"bold\">Description</emphasis></entry>\n                </row>\n\n                <row>\n                  <entry>Delay</entry>\n\n                  <entry>Number of days to wait after the account is\n                  expired.</entry>\n                </row>\n\n                <row>\n                  <entry>Action</entry>\n\n                  <entry>Delete or move accounts</entry>\n                </row>\n\n                <row>\n                  <entry>Target DN</entry>\n\n                  <entry>Move only: specifies the DN where accounts are\n                  moved</entry>\n                </row>\n              </tbody>\n            </tgroup>\n          </table>\n        </section>\n\n        <section id=\"job_windows_notify_groups\">\n          <title>Windows: Notify users about their managed groups</title>\n\n          <para>This will send your users an email with the groups they\n          manage. This also includes a list of users in these groups. The\n          users and groups are searched using the user+group account types\n          that are specified in server profile.</para>\n\n          <para>You need to activate the Windows module for users to be able\n          to add this job. The job can be added multiple times.</para>\n\n          <screenshot>\n            <graphic fileref=\"images/jobs_windowsNotifyGroups.png\"/>\n          </screenshot>\n\n          <para><table>\n              <title>Options</title>\n\n              <tgroup cols=\"2\">\n                <tbody>\n                  <row>\n                    <entry><emphasis role=\"bold\">Option</emphasis></entry>\n\n                    <entry><emphasis\n                    role=\"bold\">Description</emphasis></entry>\n                  </row>\n\n                  <row>\n                    <entry>From address</entry>\n\n                    <entry>The email address to set as FROM.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Reply-to address</entry>\n\n                    <entry>Optional Reply-to address for email.</entry>\n                  </row>\n\n                  <row>\n                    <entry>CC address</entry>\n\n                    <entry>Optional CC mail address.</entry>\n                  </row>\n\n                  <row>\n                    <entry>BCC address</entry>\n\n                    <entry>Optional BCC mail address.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Subject</entry>\n\n                    <entry>The email subject line. Supports wildcards, see\n                    below.</entry>\n                  </row>\n\n                  <row>\n                    <entry>HTML format</entry>\n\n                    <entry>Send email as HTML instead of plain text.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Text</entry>\n\n                    <entry>The email body text. Supports wildcards, see\n                    below.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Period</entry>\n\n                    <entry>Defines how often the mail is sent (e.g.\n                    quarterly).</entry>\n                  </row>\n                </tbody>\n              </tgroup>\n            </table>Wildcards:</para>\n\n          <para>You can enter LDAP attributes as wildcards in the form\n          @@ATTRIBUTE_NAME@@. E.g. to add the user's common name use \"@@cn@@\".\n          For the common name it would be \"@@cn@@\".</para>\n\n          <para>Use the wildcard \"@@LAM_MANAGED_GROUPS@@\" to insert the group\n          listing. This wildcard is mandatory.</para>\n        </section>\n\n        <section id=\"job_freeradius_move_expired\">\n          <title>FreeRadius: Delete or move expired accounts</title>\n\n          <para>You can automatically delete or move expired accounts.</para>\n\n          <screenshot>\n            <mediaobject>\n              <imageobject>\n                <imagedata fileref=\"images/jobs_freeRadiusCleanup.png\"/>\n              </imageobject>\n            </mediaobject>\n          </screenshot>\n\n          <table>\n            <title>Options</title>\n\n            <tgroup cols=\"2\">\n              <tbody>\n                <row>\n                  <entry><emphasis role=\"bold\">Option</emphasis></entry>\n\n                  <entry><emphasis role=\"bold\">Description</emphasis></entry>\n                </row>\n\n                <row>\n                  <entry>Delay</entry>\n\n                  <entry>Number of days to wait after the account is\n                  expired.</entry>\n                </row>\n\n                <row>\n                  <entry>Action</entry>\n\n                  <entry>Delete or move accounts</entry>\n                </row>\n\n                <row>\n                  <entry>Target DN</entry>\n\n                  <entry>Move only: specifies the DN where accounts are\n                  moved</entry>\n                </row>\n              </tbody>\n            </tgroup>\n          </table>\n        </section>\n\n        <section id=\"job_freeradius_account_expiration_notification\">\n          <title>FreeRadius: Notify users about account expiration</title>\n\n          <para>This will send your users an email reminder before their\n          FreeRadius account expires.</para>\n\n          <para>You need to activate the FreeRadius module for users to be\n          able to add this job. The job can be added multiple times (e.g. to\n          send a second warning at a later time).</para>\n\n          <screenshot>\n            <graphic fileref=\"images/jobs_freeradiusAccountExpiration.png\"/>\n          </screenshot>\n\n          <para><table>\n              <title>Options</title>\n\n              <tgroup cols=\"2\">\n                <tbody>\n                  <row>\n                    <entry><emphasis role=\"bold\">Option</emphasis></entry>\n\n                    <entry><emphasis\n                    role=\"bold\">Description</emphasis></entry>\n                  </row>\n\n                  <row>\n                    <entry>From address</entry>\n\n                    <entry>The email address to set as FROM.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Reply-to address</entry>\n\n                    <entry>Optional Reply-to address for email.</entry>\n                  </row>\n\n                  <row>\n                    <entry>CC address</entry>\n\n                    <entry>Optional CC mail address.</entry>\n                  </row>\n\n                  <row>\n                    <entry>BCC address</entry>\n\n                    <entry>Optional BCC mail address.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Subject</entry>\n\n                    <entry>The email subject line. Supports wildcards, see\n                    below.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Text</entry>\n\n                    <entry>The email body text. Supports wildcards, see\n                    below.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Notification period</entry>\n\n                    <entry>Number of days to notify before account\n                    expires.</entry>\n                  </row>\n                </tbody>\n              </tgroup>\n            </table>Wildcards:</para>\n\n          <para>You can enter LDAP attributes as wildcards in the form\n          @@ATTRIBUTE_NAME@@. E.g. to add the user's common name use \"@@cn@@\".\n          For the common name it would be \"@@cn@@\".</para>\n\n          <para>There are also two special wildcards for the expiration date.\n          @@EXPIRE_DATE_DDMMYYYY@@ will print the date as e.g. \"31.12.2016\".\n          @@EXPIRE_DATE_YYYYMMDD@@ will print the date as e.g.\n          \"2016-12-31\".</para>\n        </section>\n\n        <section id=\"job_qmail_move_expired\">\n          <title>Qmail: Delete or move expired accounts</title>\n\n          <para>You can automatically delete or move expired accounts. The job\n          reads the qmail deletion date of user accounts.</para>\n\n          <screenshot>\n            <mediaobject>\n              <imageobject>\n                <imagedata fileref=\"images/jobs_qmailCleanup1.png\"/>\n              </imageobject>\n            </mediaobject>\n          </screenshot>\n\n          <table>\n            <title>Options</title>\n\n            <tgroup cols=\"2\">\n              <tbody>\n                <row>\n                  <entry><emphasis role=\"bold\">Option</emphasis></entry>\n\n                  <entry><emphasis role=\"bold\">Description</emphasis></entry>\n                </row>\n\n                <row>\n                  <entry>Delay</entry>\n\n                  <entry>Number of days to wait after the account is\n                  expired.</entry>\n                </row>\n\n                <row>\n                  <entry>Action</entry>\n\n                  <entry>Delete or move accounts</entry>\n                </row>\n\n                <row>\n                  <entry>Target DN</entry>\n\n                  <entry>Move only: specifies the DN where accounts are\n                  moved</entry>\n                </row>\n              </tbody>\n            </tgroup>\n          </table>\n        </section>\n\n        <section id=\"job_qmail_account_expire_notify\">\n          <title>Qmail: Notify users about account expiration</title>\n\n          <para>This will send your users an email reminder before their Qmail\n          account expires.</para>\n\n          <para>You need to activate the Qmail module for users to be able to\n          add this job. The job can be added multiple times (e.g. to send a\n          second warning at a later time).</para>\n\n          <screenshot>\n            <graphic fileref=\"images/jobs_qmailAccountExpiration.png\"/>\n          </screenshot>\n\n          <para><table>\n              <title>Options</title>\n\n              <tgroup cols=\"2\">\n                <tbody>\n                  <row>\n                    <entry><emphasis role=\"bold\">Option</emphasis></entry>\n\n                    <entry><emphasis\n                    role=\"bold\">Description</emphasis></entry>\n                  </row>\n\n                  <row>\n                    <entry>From address</entry>\n\n                    <entry>The email address to set as FROM.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Reply-to address</entry>\n\n                    <entry>Optional Reply-to address for email.</entry>\n                  </row>\n\n                  <row>\n                    <entry>CC address</entry>\n\n                    <entry>Optional CC mail address.</entry>\n                  </row>\n\n                  <row>\n                    <entry>BCC address</entry>\n\n                    <entry>Optional BCC mail address.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Subject</entry>\n\n                    <entry>The email subject line. Supports wildcards, see\n                    below.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Text</entry>\n\n                    <entry>The email body text. Supports wildcards, see\n                    below.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Notification period</entry>\n\n                    <entry>Number of days to notify before account\n                    expires.</entry>\n                  </row>\n                </tbody>\n              </tgroup>\n            </table>Wildcards:</para>\n\n          <para>You can enter LDAP attributes as wildcards in the form\n          @@ATTRIBUTE_NAME@@. E.g. to add the user's common name use \"@@cn@@\".\n          For the common name it would be \"@@cn@@\".</para>\n\n          <para>There are also two special wildcards for the expiration date.\n          @@EXPIRE_DATE_DDMMYYYY@@ will print the date as e.g. \"31.12.2016\".\n          @@EXPIRE_DATE_YYYYMMDD@@ will print the date as e.g.\n          \"2016-12-31\".</para>\n        </section>\n      </section>\n\n      <section>\n        <title>Job history</title>\n\n        <para>This will show the list of all executed job runs and their\n        result.</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/jobs4.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n      </section>\n    </section>\n\n    <section id=\"confTypicalScenarios\">\n      <title>Typical scenarios</title>\n\n      <para>This is a list of typical scenarios how your LDAP environment may\n      look like and how to structure the server profiles for it.</para>\n\n      <section>\n        <title>Simple: One LDAP directory managed by a small group of\n        admins</title>\n\n        <para>This is the easiest and most common scenario. You want to manage\n        a single LDAP server and there is only one or a few admins. In this\n        case just create one server profile and you are done. The admins may\n        be either specified as a fixed list or by using an LDAP search at\n        login time.</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/LDAPStructuresSimple.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n      </section>\n\n      <section>\n        <title>Advanced: One LDAP server which is managed by different admin\n        groups</title>\n\n        <para>Large organisations may have one big LDAP directory for all\n        user/group accounts. But the users are managed by different groups of\n        admins (e.g. departments, locations, subsidiaries, ...). The users are\n        typically divided into organisational units in the LDAP tree. Admins\n        may only manage the users in their part of the tree.</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/LDAPStructuresAdvanced.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para>In this situation it is recommended to create one server profile\n        for each admin group (e.g. department). Setup the LDAP suffixes in the\n        server profiles to point to the needed organisational units. E.g. use\n        ou=people,ou=department1,dc=company,dc=com or\n        ou=department1,ou=people,dc=company,dc=com as LDAP suffix for users.\n        Do the same for groups, hosts, ... This way each admin group will only\n        see its own users. You may want to use LDAP search for the LAM login\n        in this scenario. This will prevent that you need to update a server\n        profile if the number of admins changes.</para>\n\n        <para><emphasis role=\"bold\">Attention:</emphasis> LAM's feature to\n        automatically find free UIDs/GIDs for new users/groups will not work\n        in this case. LAM uses the user/group suffix to search for already\n        assigned UIDs/GIDs. As an alternative you can specify different\n        UID/GID ranges for each department. Then the UIDs/GIDs will stay\n        unique for the whole directory.</para>\n      </section>\n\n      <section>\n        <title>Multiple LDAP servers</title>\n\n        <para>You can manage as many LDAP servers with LAM as you wish. This\n        scenario is similar to the advanced scenario above. Just create one\n        server profile for each LDAP server.</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/LDAPStructuresMultiServer.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n      </section>\n\n      <section>\n        <title>Single LDAP directory with lots of users (&gt;10 000)</title>\n\n        <para>LAM was tested to work with 10 000 users. If you have a lot more\n        users then you have basically two options.</para>\n\n        <itemizedlist>\n          <listitem>\n            <para>Divide your LDAP tree in organisational units: This is\n            usually the best performing option. Put your accounts in several\n            organisational units and setup LAM as in the advanced scenario\n            above.</para>\n          </listitem>\n\n          <listitem>\n            <para>Increase memory limit: Increase the memory_limit parameter\n            in your php.ini. This will allow LAM to read more entries. But\n            this will slow down the response times of LAM.</para>\n          </listitem>\n        </itemizedlist>\n      </section>\n    </section>\n  </section>\n\n  <section>\n    <title>Self Service (LAM Pro)</title>\n\n    <para>See <link linkend=\"a_selfService\">Self Service\n    chapter</link>.</para>\n  </section>\n\n  <section>\n    <title>Import and export configuration</title>\n\n    <para>Here you can export and import LAM's whole configuration. You can\n    use this to backup the configuration or migrate from one server to\n    another.</para>\n\n    <para>You will need to login with the configuration master password to use\n    this feature.</para>\n\n    <screenshot>\n      <graphic fileref=\"images/confImportExport1.png\"/>\n    </screenshot>\n\n    <para><emphasis role=\"bold\">Export</emphasis></para>\n\n    <para>This will dump the whole configuration to one big single file. It is\n    not possible to dump only parts of the configuration. During import you\n    can select what exactly to import.</para>\n\n    <para><emphasis role=\"bold\">Import</emphasis></para>\n\n    <para>Please select the import file first and submit. LAM will then\n    present you possible import data. You can select what to import using the\n    checkboxes.</para>\n\n    <para>Please note that LAM will not delete e.g. server profiles that are\n    not in the import file.</para>\n\n    <para>Example: You have profile1+profile2 in your LAM installation and\n    profile2+profile3 in your import file. When you select to import all\n    server profiles then profile1 stays untouched, profile2 will be\n    overwritten and profile3 will be added.</para>\n\n    <screenshot>\n      <graphic fileref=\"images/confImportExport2.png\"/>\n    </screenshot>\n  </section>\n</chapter>\n", "<?php\nnamespace LAM\\HELP;\nuse \\LAM\\TYPES\\TypeManager;\n/*\n\n  This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)\n  Copyright (C) 2003 - 2006 Michael Duergner\n                2003 - 2022 Roland Gruber\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n\n  LDAP Account Manager help topics.\n*/\n\n/**\n * LDAP Account Manager help entries.\n *\n * @author Michael Duergner\n * @author Roland Gruber\n * @package Help\n */\n\n// generate help entry for translated list attributes\n$entry206Example = \"\";\nif (isset($_SESSION['conf_config'])) {\n\t$typeManager = new TypeManager($_SESSION['conf_config']);\n\t$types = $typeManager->getConfiguredTypes();\n\tforeach ($types as $type) {\n\t\t$entry206Example .= \"<b>\" . $type->getAlias() . \":</b><br>\\n\";\n\t\t$descriptions = $type->getBaseType()->getListAttributeDescriptions();\n\t\t$attributes = array_keys($descriptions);\n\t\tfor ($a = 0; $a < sizeof($attributes); $a++) {\n\t\t\t$entry206Example .= \"#\" . $attributes[$a] . \": \" . $descriptions[$attributes[$a]];\n\t\t\tif ($a < (sizeof($attributes) - 1)) {\n\t\t\t\t$entry206Example .= \", \";\n\t\t\t}\n\t\t}\n\t\t$entry206Example .= \"<br><br>\";\n\t}\n}\n\n$helpArray = array (\n\t\t\t\t// 200 - 299\n\t\t\t\t// configuration wizard\n\t\t\t\t// configuration login\n\t\t\t\t// config profile management\n\t\t\t\t\"200\" => array (\"Headline\" => _(\"Login\"),\n\t\t\t\t\t\"Text\" => _(\"Please enter the configuration password. This is NOT your LDAP password. It is stored in your .conf-file. If this is the first time you log in, enter \\\"lam\\\".\")),\n\t\t\t\t\"201\" => array (\"Headline\" => _(\"Server address\"),\n\t\t\t\t\t\"Text\" => _(\"This is the server address of your LDAP server. Use ldap:// for unencrypted LDAP connections or TLS encrypted connections. LDAP+SSL (LDAPS) encrypted connections are specified with ldaps://. The port value is optional.\") .\n\t\t\t\t\t\t\" \" . _(\"TLS cannot be combined with ldaps://.\") .\n\t\t\t\t\t\t\"<br><br><b> \" .\n\t\t\t\t\t\t_(\"Examples\") .\n\t\t\t\t\t\t\":</b><br><br> \" .\n\t\t\t\t\t\t_(\"ldap://localhost:389 connects to localhost using a standard LDAP connection on port 389\") .\n\t\t\t\t\t\t\"<br> \" .\n\t\t\t\t\t\t_(\"ldaps://ldap.domain.com connects to ldap.domain.com using an encrypted LDAP connection.\") .\n\t\t\t\t\t\t\"<br><br><br><b> \" .\n\t\t\t\t\t\t_(\"Note\") .\n\t\t\t\t\t\t\":</b><br><br>\" .\n\t\t\t\t\t\t_(\"When using ldaps:// or TLS be sure to use exactly the same IP/domain name as in your certificate!\")),\n\t\t\t\t\"202\" => array (\"Headline\" => _(\"LDAP suffix\"),\n\t\t\t\t\t\"Text\" => _(\"This is the suffix of the LDAP tree from where to search for LDAP entries. Only entries in this subtree will be displayed in the account list. When creating a new account this will be the DN where it is saved.\") .\n\t\t\t\t\t\t\"<br><br><b>\".\n\t\t\t\t\t\t_(\"Example\").\n\t\t\t\t\t\t\":</b><br><br>\".\n\t\t\t\t\t\t_(\"ou=People,dc=yourcompany,dc=com will read and store all accounts in this subtree.\")),\n\t\t\t\t\"203\" => array (\"Headline\" => _(\"Tree suffix\"),\n\t\t\t\t\t\"Text\" => _(\"This is the suffix for the LDAP tree viewer.\") . ' ' . _(\"Multiple values are separated by semicolon.\") .\n\t\t\t\t\t\t\"<br><br><b>\" .\n\t\t\t\t\t\t_(\"Example\") .\n\t\t\t\t\t\t\":</b><br><br>\" .\n\t\t\t\t\t\t_(\"dc=yourcompany,dc=com\") . '<br>' .\n\t\t\t\t\t\t_('dc=yourcompany,dc=com;cn=config')),\n\t\t\t\t\"204\" => array (\"Headline\" => _(\"SSL certificate\"),\n\t\t\t\t\t\"Text\" => _(\"This is only needed for TLS/SSL connections. By default, LAM will use the certificate authorities installed on your system. If you have a private CA in your company you can upload your CA certificates here and override the system certificates.\")),\n\t\t\t\t\"205\" => array (\"Headline\" => _(\"Follow referrals\"),\n\t\t\t\t\t\"Text\" => _(\"Specifies if LAM should automatically follow referrals. Activate if you use referrals in your LDAP directory.\")),\n\t\t\t\t\"206\" => array (\"Headline\" => _(\"List attributes\"),\n\t\t\t\t\t\"Text\" => _(\"This is the list of attributes to show in the account list. The entries can either be predefined values, \\\"#attribute\\\", or individual ones, \\\"attribute:description\\\". Several entries are separated by semicolons.\") .\n\t\t\t\t\t\t\"<br><br><br><big><b>\" .\n\t\t\t\t\t\t_(\"Example\") . \": </b></big>#homeDirectory;#uid;#uidNumber;#gidNumber;mail:Mail address<br><br>\" .\n\t\t\t\t\t\t\"<big><b>\" . _(\"Predefined values\") . \":</b></big><br><br>\" . $entry206Example),\n\t\t\t\t\"207\" => array (\"Headline\" => _(\"Valid users\"),\n\t\t\t\t\t\"Text\" => _(\"This is a list of valid DN entries of all users that are allowed to login to LDAP Account Manager. Please enter one DN per line.\") .\n\t\t\t\t\t\t\"<br><br><b>\" .\n\t\t\t\t\t\t_(\"Example\") .\n\t\t\t\t\t\t\": </b><br>cn=admin,dc=yourdomain,dc=org<br>cn=manager,dc=yourdomain,dc=org\"),\n\t\t\t\t\"208\" => array (\"Headline\" => _(\"Maximum list entries\"),\n\t\t\t\t\t\"Text\" => _(\"This is the number of rows to show in the account list. If more entries are found the list will be split into several pages.\")),\n\t\t\t\t\"209\" => array (\"Headline\" => _(\"Default language\"),\n\t\t\t\t\t\"Text\" => _(\"This defines the language of the login window and sets this language as the default language. Users can change the language at login.\")),\n\t\t\t\t\"210\" => array (\"Headline\" => _(\"Script path\"),\n\t\t\t\t\t\"Text\" => _(\"This is the absolute path to an external script for setting quotas and creating home directories.\")),\n\t\t\t\t\"211\" => array (\"Headline\" => _(\"Enforce language\"),\n\t\t\t\t\t\"Text\" => _(\"If enabled then the default language will be enforced and cannot be chosen by the user.\")),\n\t\t\t\t\"212\" => array (\"Headline\" => _(\"Change password\"),\n\t\t\t\t\t\"Text\" => _(\"If you want to change the current preferences password, please enter it here.\")),\n\t\t\t\t\"213\" => array (\"Headline\" => _('Time zone'),\n\t\t\t\t\t\"Text\" => _('Please select your local time zone.')),\n\t\t\t\t\"214\" => array (\"Headline\" => _(\"Cache timeout\"),\n\t\t\t\t\t\"Text\" => _(\"This is the time in minutes which LAM caches its LDAP searches. Shorter times will stress LDAP more but decrease the possibility that changes are not identified.\")),\n\t\t\t\t\"215\" => array (\"Headline\" => _(\"Access level\"),\n\t\t\t\t\t\"Text\" => _(\"You can specify if LAM allows full write access, password changes or only read access.\")),\n\t\t\t\t\"217\" => array (\"Headline\" => _(\"Account types and modules\"),\n\t\t\t\t\t\"Text\" => _(\"Here you can select which plugins you want to use for account management.\") . \"<br><br>\"\n\t\t\t\t\t\t. _(\"Account types define which sorts of LDAP entries (e.g. users and groups) should be managed. The account modules define which properties (e.g. Unix and Samba) can be edited.\")),\n\t\t\t\t\"218\" => array (\"Headline\" => _(\"Script servers\"),\n\t\t\t\t\t\"Text\" => _(\"This is a list of the servers where the lamdaemon scripts are stored. LDAP Account Manager will make a SSH connection to the servers with the user name and password provided at login. Multiple servers are separated by semicolons. You can append a descriptive name after a colon.\") . \"<br>\"\n\t\t\t\t\t\t. _(\"If your server runs on another port then add a comma and the port number after the server.\") . \"<br><br>\"\n\t\t\t\t\t\t. _(\"Examples\") . \": <br><b>my.server.name<br>127.0.0.1:LOCAL;192.168.0.2,12345:Servername<br>my.server.name:SERVER:/prefix</b>\"),\n\t\t\t\t\"219\" => array (\"Headline\" => _(\"Rights for the home directory\"),\n\t\t\t\t\t\"Text\" => _(\"This defines the rights for the home directories which are created by lamdaemon.\")),\n\t\t\t\t\"220\" => array (\"Headline\" => _(\"Login method\"),\n\t\t\t\t\t\"Text\" => _(\"The number of users who may login to LAM is restricted. This can be either a fixed list of DNs or LAM can search LDAP to find a DN which matches the given user name.\")),\n\t\t\t\t\"221\" => array (\"Headline\" => _(\"LDAP search\"),\n\t\t\t\t\t\"Text\" => _(\"Please enter the LDAP suffix where LAM should start to search for users. The LDAP filter needs to match the given user name to exactly one DN. The value \\\"%USER%\\\" will be replaced by the user name from the login page.\")),\n\t\t\t\t\"222\" => array (\"Headline\" => _(\"LDAP search limit\"),\n\t\t\t\t\t\"Text\" => _(\"Here you can set a limit for LDAP searches. This will restrict the number of results for LDAP searches. Please use this if LAM's LDAP queries produce too much load.\")),\n\t\t\t\t\"223\" => array (\"Headline\" => _(\"HTTP authentication\"),\n\t\t\t\t\t\"Text\" => _(\"If enabled then LAM will use user and password that is provided by the web server via HTTP authentication.\")),\n\t\t\t\t\"224\" => array (\"Headline\" => _(\"Bind user and password\"),\n\t\t\t\t\t\"Text\" => _(\"Here you can specify the DN and password of the bind user that will be used for the LDAP search. This is required if your LDAP server does not allow anonymous access.\")),\n\t\t\t\t\"225\" => array (\"Headline\" => _('Base URL'),\n\t\t\t\t\t\"Text\" => _(\"Please enter the base URL of your webserver (e.g. https://www.example.com). This is used to generate links in emails.\")),\n\t\t\t\t\"230\" => array (\"Headline\" => _(\"Profile management\") . \" - \" . _(\"Add profile\"),\n\t\t\t\t\t\"Text\" => _(\"Please enter the name of the new profile and the password to change its settings. Profile names may contain letters, numbers and -/_.\")),\n\t\t\t\t\"231\" => array (\"Headline\" => _(\"Profile management\") . \" - \" . _(\"Rename profile\"),\n\t\t\t\t\t\"Text\" => _(\"Please enter the new name of the profile. The name may contain letters, numbers and -/_.\")),\n\t\t\t\t\"232\" => array (\"Headline\" => _(\"Profile management\") . \" - \" . _(\"Delete profile\"),\n\t\t\t\t\t\"Text\" => _(\"This will delete the selected profile.\")),\n\t\t\t\t\"233\" => array (\"Headline\" => _(\"Profile management\") . \" - \" . _(\"Set profile password\"),\n\t\t\t\t\t\"Text\" => _(\"This changes the password of the selected profile.\")),\n\t\t\t\t\"234\" => array (\"Headline\" => _(\"Profile management\") . \" - \" . _(\"Change default profile\"),\n\t\t\t\t\t\"Text\" => _(\"This changes the profile which is selected by default at login.\")),\n\t\t\t\t\"235\" => array (\"Headline\" => _(\"Change master password\"),\n\t\t\t\t\t\"Text\" => _(\"If you want to change your master configuration password, please enter it here.\")),\n\t\t\t\t\"236\" => array (\"Headline\" => _(\"Master password\"),\n\t\t\t\t\t\"Text\" => _(\"Please enter the master configuration password. This is NOT your LDAP password. It is stored in your config.cfg file. If this is the first time you log in, enter \\\"lam\\\".\")),\n\t\t\t\t\"237\" => array (\"Headline\" => _(\"Base module\"),\n\t\t\t\t\t\"Text\" => _(\"Every account type needs exactly one base module. This module provides a structural object class.\")),\n\t\t\t\t\"238\" => array (\"Headline\" => _(\"Session timeout\"),\n\t\t\t\t\t\"Text\" => _(\"This is the time (in minutes) of inactivity after which a user is automatically logged off.\")),\n\t\t\t\t\"239\" => array (\"Headline\" => _(\"Log level\"),\n\t\t\t\t\t\"Text\" => _(\"Please select your preferred log level. Messages with a lower level will not be logged.\")),\n\t\t\t\t\"240\" => array (\"Headline\" => _(\"Log destination\"),\n\t\t\t\t\t\"Text\" => _(\"Here you can select where LAM should save its log messages. System logging will go to Syslog on Unix systems and event log on Windows. You can also select an extra file.\")),\n\t\t\t\t\"241\" => array (\"Headline\" => _(\"Allowed hosts\"),\n\t\t\t\t\t\"Text\" => _(\"This is a list of IP addresses from hosts who may access LAM. You can use \\\"*\\\" as wildcard (e.g. 192.168.0.*).\")),\n\t\t\t\t\"242\" => array (\"Headline\" => _(\"Password policy\"),\n\t\t\t\t\t\"Text\" => _(\"Here you can specify minimum requirements for passwords. The character classes are: lowercase, uppercase, numeric and symbols.\")),\n\t\t\t\t\"244\" => array (\"Headline\" => _('PHP error reporting'),\n\t\t\t\t\t\"Text\" => _('Defines if the PHP error reporting setting from php.ini is used or the setting preferred by LAM (\"E_ALL & ~E_NOTICE\"). If you do not develop LAM modules please use the default. This will prevent displaying messages that are useful only for developers.')),\n\t\t\t\t\"245\" => array (\"Headline\" => _('Encrypt session'),\n\t\t\t\t\t\"Text\" => _('Encrypts sensitive data like passwords in your session. This requires the PHP OpenSSL extension.')),\n\t\t\t\t\"246\" => array (\"Headline\" => _('Number of rules that must match'),\n\t\t\t\t\t\"Text\" => _('Specifies the number of above password rules that must be fulfilled.')),\n\t\t\t\t\"247\" => array (\"Headline\" => _('Password must not contain user name'),\n\t\t\t\t\t\"Text\" => _('Specifies if the password must not contain the user name.')),\n\t\t\t\t\"248\" => array (\"Headline\" => _('Password must not contain part of user/first/last name'),\n\t\t\t\t\t\"Text\" => _('Specifies if the password must not contain 3 or more characters of the user/first/last name.')),\n\t\t\t\t\"249\" => array (\"Headline\" => _('External password check'),\n\t\t\t\t\t\"Text\" => _('Please specify the URL (e.g. \"https://api.pwnedpasswords.com/range/{SHA1PREFIX}\") of your external password check.')),\n\t\t\t\t\"250\" => array (\"Headline\" => _(\"Filter\"),\n\t\t\t\t\t\"Text\" => _(\"Here you can input simple filter expressions (e.g. 'value' or 'v*'). The filter is case-insensitive.\")),\n\t\t\t\t\"251\" => array (\"Headline\" => _(\"Remote server\"),\n\t\t\t\t\t\"Text\" => _(\"Please enter the syslog remote server in format \\\"server:port\\\".\")),\n\t\t\t\t\"252\" => array (\"Headline\" => _(\"User DN\"),\n\t\t\t\t\t\"Text\" => _(\"Please enter a part of the user's DN to search for registered devices.\")),\n\t\t\t\t\"253\" => array (\"Headline\" => _(\"Mail server\"),\n\t\t\t\t\t\"Text\" => _(\"Please enter the server name and port of your SMTP server (e.g. localhost:25). If this setting is left empty then LAM will try to use a locally installed mail server.\")),\n\t\t\t\t\"254\" => array (\"Headline\" => _(\"User name\"),\n\t\t\t\t\t\"Text\" => _(\"SMTP user name\")),\n\t\t\t\t\"255\" => array (\"Headline\" => _(\"Password\"),\n\t\t\t\t\t\"Text\" => _(\"SMTP password\")),\n\t\t\t\t\"256\" => array (\"Headline\" => _(\"Encryption protocol\"),\n\t\t\t\t\t\"Text\" => _(\"Please select if the connection should be encrypted via TLS, SSL or not at all.\")),\n\t\t\t\t\"260\" => array (\"Headline\" => _(\"Additional LDAP filter\"),\n\t\t\t\t\t\"Text\" => _('Use this to enter an additional LDAP filter (e.g. \"(cn!=admin)\") to reduce the number of visible elements for this account type.')\n\t\t\t\t\t\t. ' ' . _('You can use the wildcard @@LOGIN_DN@@ which will be substituted with the DN of the user who is currently logged in to LAM.')\n\t\t\t\t\t\t. ' ' . _('By default, LAM will show all accounts that match the selected account modules.')),\n\t\t\t\t\"261\" => array (\"Headline\" => _(\"Hidden\"),\n\t\t\t\t\t\"Text\" => _('Hidden account types will not show up in LAM. This is useful if you want to display e.g. only groups but still need to manage their members.')),\n\t\t\t\t\"262\" => array (\"Headline\" => _(\"No new entries\"),\n\t\t\t\t\t\"Text\" => _('If checked then the user will not be able to create new entries of this account type.')),\n\t\t\t\t\"263\" => array (\"Headline\" => _(\"Disallow delete\"),\n\t\t\t\t\t\"Text\" => _('If checked then the user will not be able to delete entries of this account type.')),\n\t\t\t\t\"264\" => array (\"Headline\" => _('Custom label'),\n\t\t\t\t\t\"Text\" => _('Here you can overwrite the display name for this account type.')),\n\t\t\t\t\"265\" => array (\"Headline\" => _('Read-only'),\n\t\t\t\t\t\"Text\" => _('Sets this account type to read-only.')),\n\t\t\t\t\"266\" => array (\"Headline\" => _(\"Paged results\"),\n\t\t\t\t\t\"Text\" => _(\"This is a workaround for Active Directory. Enable it if you get messages about size limit exceeded.\")),\n\t\t\t\t\"267\" => array (\"Headline\" => _('Template'),\n\t\t\t\t\t\"Text\" => _('Please select the template for the new server profile. You can either select an existing server profile or use one of the built-in templates.')),\n\t\t\t\t\"268\" => array (\"Headline\" => _('Display name'),\n\t\t\t\t\t\"Text\" => _('This name is shown on the login page as server name. Defaults to server address if empty.')),\n\t\t\t\t\"269\" => array (\"Headline\" => _('Referential integrity overlay'),\n\t\t\t\t\t\"Text\" => _('Activate this checkbox if you have any server side extension for referential integrity in place. LAM will then skip cleanup tasks like deletion of group memberships on account deletion.')),\n\t\t\t\t\"270\" => array (\"Headline\" => _('Bind user and password'),\n\t\t\t\t\t\"Text\" => _('Please enter the DN and password to use for all jobs.')),\n\t\t\t\t\"271\" => array (\"Headline\" => _('Database type'),\n\t\t\t\t\t\"Text\" => _('Please select the type of database to use for job data.')),\n\t\t\t\t\"272\" => array (\"Headline\" => _('Cron configuration'),\n\t\t\t\t\t\"Text\" => _('Please add this line to your webserver\\'s crontab.')),\n\t\t\t\t\"273\" => array (\"Headline\" => _('Database host'),\n\t\t\t\t\t\"Text\" => _('Enter the host name of your database server.')),\n\t\t\t\t\"274\" => array (\"Headline\" => _('Database port'),\n\t\t\t\t\t\"Text\" => _('Enter the port number of your database server. The default port will be used if empty.')),\n\t\t\t\t\"275\" => array (\"Headline\" => _('Database user and password'),\n\t\t\t\t\t\"Text\" => _('Please enter the user name and password to connect to the database.')),\n\t\t\t\t\"276\" => array (\"Headline\" => _('Database name'),\n\t\t\t\t\t\"Text\" => _('This is the database name on the server.')),\n\t\t\t\t'280' => array (\"Headline\" => _('Allow setting specific passwords'),\n\t\t\t\t\t\"Text\" => _('Allows to set a specific password via input field.')),\n\t\t\t\t'281' => array (\"Headline\" => _('Allow to display password on screen'),\n\t\t\t\t\t\"Text\" => _('Allows to display a randomly generated password on screen.')),\n\t\t\t\t'282' => array (\"Headline\" => _('Default password output'),\n\t\t\t\t\t\"Text\" => _('Default method to output a random password.')),\n\t\t\t\t'283' => array (\"Headline\" => _('Force password change by default'),\n\t\t\t\t\t\"Text\" => _('Enforce password change on next login by default.')),\n\t\t\t\t'284' => array (\"Headline\" => _('User name'),\n\t\t\t\t\t\"Text\" => _('User name for SSH connection to lamdaemon server. If empty the user name of the person who is logged into LAM will be used.')),\n\t\t\t\t'285' => array (\"Headline\" => _('SSH key file'),\n\t\t\t\t\t\"Text\" => _('Path to SSH key file to connect to lamdaemon server.') . ' ' . _('If empty then password authentication with the person\\'s password who is logged into LAM will be used.')),\n\t\t\t\t'285a' => array (\"Headline\" => _('SSH key file'),\n\t\t\t\t\t\"Text\" => _('Path to SSH key file to connect to lamdaemon server.')),\n\t\t\t\t'286' => array (\"Headline\" => _('SSH key password'),\n\t\t\t\t\t\"Text\" => _('Password to unlock SSH key file.')),\n\t\t\t\t'287' => array (\"Headline\" => _('Licence'),\n\t\t\t\t\t\"Text\" => _('Please enter your licence key.')),\n\t\t\t\t'288' => array (\"Headline\" => _('Expiration warning'),\n\t\t\t\t\t\"Text\" => _('Please select how to be warned before your licence expires.')),\n\t\t\t\t'289' => array (\"Headline\" => _('From address'),\n\t\t\t\t\t\"Text\" => _('This email address will be set as sender address of the mails.')),\n\t\t\t\t'290' => array (\"Headline\" => _('TO address'),\n\t\t\t\t\t\"Text\" => _('This email address will be set as TO address for the mails.') . ' '\n\t\t\t\t\t\t. _(\"Multiple values are separated by semicolon.\")),\n\t\t\t\t\"291\" => array (\"Headline\" => _('Hide password prompt for expired password'),\n\t\t\t\t\t\"Text\" => _('Hides the password prompt when a user with expired password logs into LAM.')),\n\t\t\t\t\"292\" => array (\"Headline\" => _('DN part to hide'),\n\t\t\t\t\t\"Text\" => _('Hides the given part of the DN when displaying a DN. E.g. if you set this to \"dc=example,dc=com\" then \"ou=department,dc=example,dc=com\" will be displayed as \"ou=department\". Use this if you have very long DNs.')),\n\t\t\t\t\"293\" => array (\"Headline\" => _('Database type'),\n\t\t\t\t\t\"Text\" => _('Please select the type of database to use for all configuration data. Please install PHP MySQL PDO extension for MySQL support.')),\n\t\t\t\t// 300 - 399\n\t\t\t\t// profile/PDF editor, file upload\n\t\t\t\t\"301\" => array (\"Headline\" => _(\"RDN identifier\"),\n\t\t\t\t\t\"Text\" => _(\"This is the identifier for the relative DN value. It must be one of the given allowed LDAP attributes (e.g. user accounts usually use \\\"uid\\\" while groups use \\\"cn\\\").\")),\n\t\t\t\t\"302\" => array (\"Headline\" => _(\"Overwrite\"),\n\t\t\t\t\t\"Text\" => _(\"Set to true to overwrite an existing LDAP entry.\")),\n\t\t\t\t\"360\" => array (\"Headline\" => _(\"Profile name\"),\n\t\t\t\t\t\"Text\" => _(\"Name under which the profile will be saved. If a profile with the same name exists, it will be overwritten.\")),\n\t\t\t\t\"361\" => array (\"Headline\" => _(\"DN suffix\"),\n\t\t\t\t\t\"Text\" => _(\"The account will be saved under this LDAP suffix.\")),\n\t\t\t\t\"362\" => array (\"Headline\" => _(\"Import profiles\"),\n\t\t\t\t\t\"Text\" => _(\"Here you can import account profiles from other server profiles (overwrite existing).\")),\n\t\t\t\t\"363\" => array (\"Headline\" => _(\"Export profile\"),\n\t\t\t\t\t\"Text\" => _(\"Here you can export account profiles to other server profiles (overwrite existing). You may also export a profile to the global templates. In this case it will always be copied to all server profiles that do not yet have a profile with this name.\")),\n\t\t\t\t\"364\" => array (\"Headline\" => _(\"Global templates\"),\n\t\t\t\t\t\"Text\" => _(\"Global templates will always be copied to all server profiles that do not yet have a profile with this name.\")),\n\t\t\t\t\"365\" => array (\"Headline\" => _(\"Global template logos\"),\n\t\t\t\t\t\"Text\" => _(\"Global template logos will always be copied to all server profiles that do not yet have a logo with this name.\")),\n\t\t\t\t// 400 - 499\n\t\t\t\t// account pages\n\t\t\t\t\"400\" => array (\"Headline\" => _(\"DN suffix\") . '/' . _(\"RDN identifier\"),\n\t\t\t\t\t\"Text\" => _(\"The account will be saved under this LDAP suffix.\") . '<br><br>' . _(\"This is the identifier for the relative DN value. It must be one of the given allowed LDAP attributes (e.g. user accounts usually use \\\"uid\\\" while groups use \\\"cn\\\").\")),\n\t\t\t\t\"401\" => array (\"Headline\" => _(\"Load profile\"),\n\t\t\t\t\t\"Text\" => _(\"Here you can load an account profile to set default settings for your account. The \\\"default\\\" profile is automatically loaded for new accounts.\")),\n\t\t\t\t\"403\" => array (\"Headline\" => _(\"Create PDF file\"),\n\t\t\t\t\t\"Text\" => _(\"Here you can select a PDF structure and export the account to a PDF file.\")),\n\t\t\t\t\"404\" => array (\"Headline\" => _(\"Password\"),\n\t\t\t\t\t\"Text\" => _(\"Please enter the password which you want to set for this account. You may also generate a random password (12 characters) which will be displayed on your screen.\")),\n\t\t\t\t\"405\" => array (\"Headline\" => _(\"PDF structure\"),\n\t\t\t\t\t\"Text\" => _(\"The PDF structure defines what information is exported as PDF file and how the pages are structured. You can manage the PDF structures in the PDF editor (under \\\"Tools\\\").\")),\n\t\t\t\t\"406\" => array (\"Headline\" => _(\"Force password change\"),\n\t\t\t\t\t\"Text\" => _(\"If you set this option then the user has to change his password at the next login.\")),\n\t\t\t\t\"407\" => array (\"Headline\" => _(\"Send via mail\"),\n\t\t\t\t\t\"Text\" => _(\"Sends the password to the user via mail. Please edit your LAM server profile to setup the mail settings.\")),\n\t\t\t\t\"408\" => array (\"Headline\" => _(\"Import PDF structures\"),\n\t\t\t\t\t\"Text\" => _(\"Here you can import PDF structures from other server profiles (overwrite existing).\")),\n\t\t\t\t\"409\" => array (\"Headline\" => _(\"Export PDF structure\"),\n\t\t\t\t\t\"Text\" => _(\"Here you can export PDF structures to other server profiles (overwrite existing). You may also export a structure to the global templates. In this case it will always be copied to all server profiles that do not yet have a structure with this name.\")),\n\t\t\t\t\"410\" => array (\"Headline\" => _(\"Alternate recipient\"),\n\t\t\t\t\t\"Text\" => _(\"Here you can enter an alternative mail address for the password. To use the user's primary email address please leave the field blank.\")),\n\t\t\t\t\"411\" => array (\"Headline\" => _(\"Font\"),\n\t\t\t\t\t\"Text\" => _(\"Please select the font for the PDF file. Dejavu will work on all systems but does not support e.g. Chinese and Japanese. The other fonts require that an appropriate font is installed on the system where the PDF is opened.\")),\n\t\t\t\t// 500 - 599\n\t\t\t\t// LAM Pro\n\t\t\t\t\"501\" => array (\"Headline\" => _(\"LDAP suffix\"),\n\t\t\t\t\t\"Text\" => _(\"LAM will search for accounts in this part of the LDAP tree.\")),\n\t\t\t\t\"502\" => array (\"Headline\" => _(\"LDAP user and password\"),\n\t\t\t\t\t\"Text\" => _(\"LAM will use this LDAP DN and password to search for accounts. It is sufficient to specify an account with read rights. If nothing is inserted then LAM will try to connect anonymously.\")),\n\t\t\t\t\"503\" => array (\"Headline\" => _(\"LDAP search attribute\"),\n\t\t\t\t\t\"Text\" => _(\"This is needed to find the LDAP DNs of your user accounts. E.g. if you use \\\"uid\\\" and your user inputs \\\"miller\\\" then LAM will search for an account with uid=miller.\")),\n\t\t\t\t\"504\" => array (\"Headline\" => _(\"Login attribute label\"),\n\t\t\t\t\t\"Text\" => _(\"This text should shortly describe your selected LDAP search attribute (e.g. email or user name).\")),\n\t\t\t\t\"505\" => array (\"Headline\" => _(\"Login caption\"),\n\t\t\t\t\t\"Text\" => _(\"This text is displayed on top of the self service login page. You can also input HTML code here.\")),\n\t\t\t\t\"506\" => array (\"Headline\" => _(\"Main page caption\"),\n\t\t\t\t\t\"Text\" => _(\"This text is displayed on top of the self service main page. You can also input HTML code here.\")),\n\t\t\t\t\"507\" => array (\"Headline\" => _(\"Add new group\"),\n\t\t\t\t\t\"Text\" => _(\"Adds a new group element to the list of self service options. Use this to structure the input fields.\")),\n\t\t\t\t\"508\" => array (\"Headline\" => _(\"Add input field\"),\n\t\t\t\t\t\"Text\" => _(\"Adds a new self service option to the selected group element.\")),\n\t\t\t\t\"509\" => array (\"Headline\" => _(\"Page header\"),\n\t\t\t\t\t\"Text\" => _(\"This HTML code will be placed on top of all self service pages. E.g. you can use this to place your custom logo. Any HTML code is permitted.\")),\n\t\t\t\t\"510\" => array (\"Headline\" => _(\"Additional CSS links\"),\n\t\t\t\t\t\"Text\" => _(\"Here you can specify additional CSS links to change the layout of the self service pages. This is useful to adapt them to your corporate design. Please enter one link per line.\")),\n\t\t\t\t\"511\" => array (\"Headline\" => _(\"Password field label\"),\n\t\t\t\t\t\"Text\" => _('This text is placed as label for the password field on the login page. LAM will use \"Password\" if you do not enter any text.')),\n\t\t\t\t\"512\" => array (\"Headline\" => _(\"Additional LDAP filter\"),\n\t\t\t\t\t\"Text\" => _('Use this to enter an additional LDAP filter (e.g. \"(objectClass=passwordSelfReset)\") to reduce the number of accounts who may use self service.')),\n\t\t\t\t\"513\" => array (\"Headline\" => _('Use for all operations'),\n\t\t\t\t\t\"Text\" => _('By default, all modifications are done as the user that authenticated in self service. If active then LAM will use the connection user for all LDAP modifications and searches.')),\n\t\t\t\t\"514\" => array (\"Headline\" => _('2-factor authentication'),\n\t\t\t\t\t\"Text\" => _('You can enable 2-factor authentication here (e.g. via mobile device).')),\n\t\t\t\t\"515\" => array (\"Headline\" => _('Base URL'),\n\t\t\t\t\t\"Text\" => _('URL of external 2-factor authentication service.')),\n\t\t\t\t\"515a\" => array (\"Headline\" => _('Base URLs'),\n\t\t\t\t\t\"Text\" => _('URLs of external 2-factor authentication service. Enter one per line.')),\n\t\t\t\t\"516\" => array (\"Headline\" => _('Disable certificate check'),\n\t\t\t\t\t\"Text\" => _('This will disable the check of the SSL certificates for the 2-factor authentication service. Not recommended for production usage.')),\n\t\t\t\t\"517\" => array (\"Headline\" => _('Label'),\n\t\t\t\t\t\"Text\" => _('Use this to overwrite the default label for the 2-factor input field. Default is \"PIN+Token\".')),\n\t\t\t\t\"518\" => array (\"Headline\" => _('Caption'),\n\t\t\t\t\t\"Text\" => _('This text is displayed on top of the 2-factor page. You can also input HTML code here.')),\n\t\t\t\t\"519\" => array (\"Headline\" => _('Optional'),\n\t\t\t\t\t\"Text\" => _('If checked then also users who did not setup a second factor are able to login.')),\n\t\t\t\t\"520\" => array (\"Headline\" => _(\"Generate random password\"),\n\t\t\t\t\t\"Text\" => _(\"This will set a random password and display it on the screen or send it to the user via mail. Please edit your LAM server profile to setup the mail settings.\")),\n\t\t\t\t\"521\" => array (\"Headline\" => _('Captcha'),\n\t\t\t\t\t\"Text\" => _('Please enter the site and secret/API key you got from your captcha provider.')),\n\t\t\t\t\"522\" => array (\"Headline\" => _('Secure login'),\n\t\t\t\t\t\"Text\" => _('Protect the self service login with a captcha.')),\n\t\t\t\t\"523\" => array (\"Headline\" => _('Base color'),\n\t\t\t\t\t\"Text\" => _('Background color for self service pages.')),\n\t\t\t\t\"524\" => array (\"Headline\" => _('Client id'),\n\t\t\t\t\t\"Text\" => _('Please enter your client id for the verification API.')),\n\t\t\t\t\"525\" => array (\"Headline\" => _('Secret key'),\n\t\t\t\t\t\"Text\" => _('Please enter your secret key for the verification API.')),\n\t\t\t\t\"526\" => array (\"Headline\" => _('Login footer'),\n\t\t\t\t\t\"Text\" => _('This text is displayed as footer on the self service login page.')),\n\t\t\t\t\"527\" => array (\"Headline\" => _('Main page footer'),\n\t\t\t\t\t\"Text\" => _('This text is displayed as footer on the self service main page.')),\n\t\t\t\t\"528\" => array (\"Headline\" => _('User name attribute'),\n\t\t\t\t\t\"Text\" => _('The attribute (e.g. \"uid\") that contains the user name for the 2-factor service.')),\n\t\t\t\t\"529\" => array (\"Headline\" => _('Domain'),\n\t\t\t\t\t\"Text\" => _('Please enter the WebAuthn domain. This is the public domain of the webserver (e.g. \"example.com\"). Do not include protocol or port.')),\n\t\t\t\t\"550\" => array (\"Headline\" => _(\"From address\"),\n\t\t\t\t\t\"Text\" => _(\"This email address will be set as sender address of all password mails. If empty the system default (php.ini) will be used.\")),\n\t\t\t\t\"551\" => array (\"Headline\" => _(\"Subject\"),\n\t\t\t\t\t\"Text\" => _('The subject of all password mails.')),\n\t\t\t\t\"552\" => array (\"Headline\" => _(\"Text\"),\n\t\t\t\t\t\"Text\" => _('The mail text of all password mails.') .\n\t\t\t\t\t\t'<br><br><b>' . _('Format') . ': </b><ul>' .\n\t\t\t\t\t\t'<li>' . _('You can use wildcards for LDAP attributes in the form @@attribute@@ (e.g. @@uid@@ for the user name).') . '</li>' .\n\t\t\t\t\t\t'<li>' . _('The wildcard for the new password is @@newPassword@@.') . '</li>'),\n\t\t\t\t\"553\" => array (\"Headline\" => _(\"HTML format\"),\n\t\t\t\t\t\"Text\" => _('Specifies if the mail should be sent as text or HTML.')),\n\t\t\t\t\"554\" => array (\"Headline\" => _(\"Reply-to address\"),\n\t\t\t\t\t\"Text\" => _(\"This email address will be set as reply-to address of all password mails.\")),\n\t\t\t\t\"555\" => array (\"Headline\" => _(\"Allow alternate address\"),\n\t\t\t\t\t\"Text\" => _('Specifies if password mails may be sent to mail addresses other than the user\\'s LDAP mail address.')),\n\t\t\t\t'556' => array(\n\t\t\t\t\t\"Headline\" => _('To address'),\n\t\t\t\t\t\"Text\" => _('This email address will be set as To address of all mails.')\n\t\t\t\t),\n\t\t\t\t'557' => array(\n\t\t\t\t\t\"Headline\" => _('To address'),\n\t\t\t\t\t\"Text\" => _('This email address will be set as To address of all mails.') . ' '\n\t\t\t\t\t\t. _('Multiple values are separated by comma.')\n\t\t\t\t),\n\t\t\t\t// 600 - 699\n\t\t\t\t// OU-editor, domain page\n\t\t\t\t\"601\" => array (\"Headline\" => _(\"OU-Editor\") . \" - \" . _(\"New organisational unit\"),\n\t\t\t\t\t\"Text\" => _(\"This will create a new organisational unit under the selected one.\")),\n\t\t\t\t\"602\" => array (\"Headline\" => _(\"OU-Editor\") . \" - \" . _(\"Delete organisational unit\"),\n\t\t\t\t\t\"Text\" => _(\"This will delete the selected organisational unit. The OU has to be empty.\")),\n\t\t\t\t// 700 - 749\n\t\t\t\t// multi edit tool\n\t\t\t\t\"700\" => array (\"Headline\" => _('LDAP suffix'),\n\t\t\t\t\t\"Text\" => _('Please select the suffix where changes should be done.')),\n\t\t\t\t\"701\" => array (\"Headline\" => _('LDAP filter'),\n\t\t\t\t\t\"Text\" => _('Use this to enter an additional LDAP filter (e.g. \"(cn!=admin)\") to reduce the number of entries to modify.')),\n\t\t\t\t\"702\" => array (\"Headline\" => _('Operations'),\n\t\t\t\t\t\"Text\" => _('Please specify which attributes should be changed. The modify operation will also add an value if the attribute does not yet exist. To delete all values of an attribute please leave the value field empty.')),\n\t\t\t\t// 750 - 799\n\t\t\t\t// import/export\n\t\t\t\t\"750\" => array (\"Headline\" => _('LDIF data'),\n\t\t\t\t\t\"Text\" => _('The input data must be formatted in LDIF format.')),\n\t\t\t\t\"751\" => array (\"Headline\" => _('Base DN'),\n\t\t\t\t\t\"Text\" => _('The export will read entries of this DN.')),\n\t\t\t\t\"752\" => array (\"Headline\" => _('Search filter'),\n\t\t\t\t\t\"Text\" => _('Please enter an LDAP filter to specify the exported entries.')),\n\t\t\t\t\"753\" => array (\"Headline\" => _('Attributes'),\n\t\t\t\t\t\"Text\" => _('Please enter a comma separated list of attributes to export. Using \"*\" will export all attributes.')),\n\t\t\t\t\"754\" => array (\"Headline\" => _('Include system attributes'),\n\t\t\t\t\t\"Text\" => _('Activate this option to export internal attributes that are not visible by default.')),\n\t\t\t\t// 800 - 899\n\t\t\t\t// jobs\n\t\t\t\t'800' => array(\n\t\t\t\t\t\"Headline\" => _('From address'),\n\t\t\t\t\t\"Text\" => _('This email address will be set as sender address of the mails.')\n\t\t\t\t),\n\t\t\t\t'801' => array(\n\t\t\t\t\t\"Headline\" => _('Reply-to address'),\n\t\t\t\t\t\"Text\" => _('This email address will be set as reply-to address of all mails.')\n\t\t\t\t),\n\t\t\t\t'802' => array(\n\t\t\t\t\t\"Headline\" => _('Subject'),\n\t\t\t\t\t\"Text\" => _('The subject of all mails.')\n\t\t\t\t),\n\t\t\t\t'803' => array(\n\t\t\t\t\t\"Headline\" => _('Text'),\n\t\t\t\t\t\"Text\" => _('The mail text of all mails.') .\n\t\t\t\t\t\t\t_('You can use wildcards for LDAP attributes in the form @@attribute@@ (e.g. @@uid@@ for the user name).')\n\t\t\t\t\t\t\t. ' ' . _('The expiration date can be added with @@EXPIRE_DATE_DDMMYYYY@@ or @@EXPIRE_DATE_YYYYMMDD@@.')\n\t\t\t\t),\n\t\t\t\t'804' => array(\n\t\t\t\t\t\"Headline\" => _('Notification period'),\n\t\t\t\t\t\"Text\" => _('Please enter the number of days before password expiration to send out the email.')\n\t\t\t\t),\n\t\t\t\t'805' => array(\n\t\t\t\t\t\"Headline\" => _('CC address'),\n\t\t\t\t\t\"Text\" => _('This email address will be set as CC address of all mails.')\n\t\t\t\t),\n\t\t\t\t'806' => array(\n\t\t\t\t\t\"Headline\" => _('BCC address'),\n\t\t\t\t\t\"Text\" => _('This email address will be set as BCC address of all mails.')\n\t\t\t\t),\n\t\t\t\t'807' => array(\n\t\t\t\t\t\"Headline\" => _('Delay'),\n\t\t\t\t\t\"Text\" => _('Delay this action by a number of days after account expiry.')\n\t\t\t\t),\n\t\t\t\t'808' => array(\n\t\t\t\t\t\"Headline\" => _('Action'),\n\t\t\t\t\t\"Text\" => _('You can delete or move expired accounts.')\n\t\t\t\t),\n\t\t\t\t'809' => array(\n\t\t\t\t\t\"Headline\" => _('Target DN'),\n\t\t\t\t\t\"Text\" => _('The expired accounts will be moved to this DN.')\n\t\t\t\t),\n\t\t\t\t'810' => array(\n\t\t\t\t\t\"Headline\" => _('Text'),\n\t\t\t\t\t\"Text\" => _('The mail text of all mails.') .\n\t\t\t\t\t\t_('You can use wildcards for LDAP attributes in the form @@attribute@@ (e.g. @@uid@@ for the user name).')\n\t\t\t\t\t\t. ' ' . _('The managed groups need to be added with @@LAM_MANAGED_GROUPS@@.')\n\t\t\t\t),\n\t\t\t\t'811' => array(\n\t\t\t\t\t\"Headline\" => _('Period'),\n\t\t\t\t\t\"Text\" => _('This defines how often the email is sent (e.g. each month).')\n\t\t\t\t),\n);\n\n/* This is a sample help entry. Just copy this line an modify the values between the [] brackets.\n\n\t\"[HelpNumber]\" => array (\"Headline\" => _(\"[Headline]\"), \"Text\" => _(\"[Text]\"), \"SeeAlso\" => array('link' => \"[SeeAlso link]\", 'text' => '[link text]')),\n\t\"999\" => array (\"Headline\" => _(\"This is a sample entry\"), \"Text\" => _(\"Sample text\"), \"SeeAlso\" => array('link' => \"http://www.ldap-account-manager.org/\", 'text' => 'Project page')),\n\n\n\n\tSyntax:\n\t=======\n\n\t\tHelpNumber: numeric value\n\t\tHeadline: topic of help entry\n\t\tText: help text (ext = FALSE)\n\t\tSeeAlso: URL to additional information (ext = FALSE, optional)\n\t\tLink: relative URL to external help page (ext = TRUE)\n*/\n", "<?php\n/*\n\n  This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)\n  Copyright (C) 2003 - 2006  Tilo Lutz\n                2009 - 2022  Roland Gruber\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n*/\n\n/**\n* This provides several helper function for the account modules.\n*\n* @author Tilo Lutz\n* @author Roland Gruber\n*\n* @package lib\n*/\n\nuse LAM\\PLUGINS\\EXTRA_INVALID_CREDENTIALS\\ExtraInvalidCredentials;\n\n\n/**\n* This function will return all values from $array without values of $values.\n*\n* @param array $values list of values which should be removed\n* @param array $array list of original values\n* @return array list of remaining values\n*/\nfunction array_delete($values, $array) {\n\t// Loop for every entry and check if it should be removed\n\tif (is_array($array)) {\n\t\t$return = array();\n\t\tforeach ($array as $array_value) {\n\t\t\tif (!@in_array($array_value, $values)) {\n\t\t\t\t$return[] = $array_value;\n\t\t\t}\n\t\t}\n\t\treturn $return;\n\t}\n\treturn array();\n}\n\n\n/**\n * Checks if a string exists in an array, ignoring case.\n *\n * @param String $needle search string\n * @param array $haystack array\n */\nfunction in_array_ignore_case($needle, $haystack) {\n    if (!is_array($haystack)) {\n        return false;\n    }\n    if (!is_string($needle)) {\n        return false;\n    }\n    foreach ($haystack as $element) {\n        if( is_string( $element ) && 0 == strcasecmp( $needle, $element ) ) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n* This function will return the days from 1.1.1970 until now.\n*\n* @return number of days\n*/\nfunction getdays() {\n\t$days = time() / 86400;\n\tsettype($days, 'integer');\n\treturn $days;\n}\n\n/**\n* Takes a list of Samba flags and creates the corresponding flag string.\n*\n* @param array $input is an array of Samba flags (e.g. X or D)\n* @return string Samba flag string\n*/\nfunction smbflag($input) {\n\t// Start character\n\t$flag = \"[\";\n\t// Add Options\n\tif ($input['W']) {\n\t\t$flag .= \"W\";\n\t}\n\telse {\n\t\t$flag .= \"U\";\n\t}\n\tif ($input['D']) {\n\t\t$flag .= \"D\";\n\t}\n\tif ($input['X']) {\n\t\t$flag .= \"X\";\n\t}\n\tif ($input['N']) {\n\t\t$flag .= \"N\";\n\t}\n\tif ($input['S']) {\n\t\t$flag .= \"S\";\n\t}\n\tif ($input['H']) {\n\t\t$flag .= \"H\";\n\t}\n\t// Expand string to fixed length\n\t$flag = str_pad($flag, 12);\n\t// End character\n\treturn $flag . \"]\";\n}\n\n/**\n* Generates the LM hash of a password.\n*\n* @param string password original password\n* @return string password hash\n*/\nfunction lmPassword($password) {\n\t// Needed to calculate Samba passwords\n\tinclude_once(__DIR__ . \"/createntlm.inc\");\n\t// get hash\n\t$hash = new smbHash();\n\treturn $hash->lmhash($password);\n}\n\n/**\n* Generates the NT hash of a password.\n*\n* @param string password original password\n* @return string password hash\n*/\nfunction ntPassword($password) {\n\t// Needed to calculate Samba passwords\n\tinclude_once(__DIR__ . \"/createntlm.inc\");\n\t// get hash\n\t$hash = new smbHash();\n\treturn $hash->nthash($password);\n}\n\n\n/**\n* Returns the hash value of a plain text password.\n* @see getSupportedHashTypes()\n*\n* @param string $password the password string\n* @param boolean $enabled marks the hash as enabled/disabled (e.g. by prefixing \"!\")\n* @param string $hashType password hash type (CRYPT, CRYPT-SHA512, SHA, SSHA, MD5, SMD5, PLAIN, K5KEY)\n* @return string the password hash\n*/\nfunction pwd_hash($password, $enabled = true, $hashType = 'SSHA') {\n\t// check for empty password\n\tif (! $password || ($password == \"\")) {\n\t\treturn \"\";\n\t}\n\tswitch ($hashType) {\n\t\tcase 'CRYPT':\n\t\t\t$hash = \"{CRYPT}\" . crypt($password, generateSalt(2));\n\t\t\tbreak;\n\t\tcase 'CRYPT-SHA512':\n\t\t\t$hash = \"{CRYPT}\" . crypt($password, '$6$' . generateSalt(16));\n\t\t\tbreak;\n\t\tcase 'PBKDF2-SHA512':\n\t\t\t$iterations = 200000;\n\t\t\tif (function_exists('openssl_pbkdf2')) {\n\t\t\t\t$salt = openssl_random_pseudo_bytes(16);\n\t\t\t\t$hashBinary = openssl_pbkdf2($password, $salt, 64, $iterations, 'sha512');\n\t\t\t\t$hash = \"{PBKDF2-SHA512}${iterations}\" . '$' . base64_encode($salt) . '$' . base64_encode($hashBinary);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$salt = generateSalt(16);\n\t\t\t\t$hashBinary = hex2bin(hash_pbkdf2('sha512', $password, $salt, $iterations));\n\t\t\t\t$hash = \"{PBKDF2-SHA512}${iterations}\" . '$' . base64_encode($salt) . '$' . base64_encode($hashBinary);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'MD5':\n\t\t\t$hash = \"{MD5}\" . base64_encode(hex2bin(md5($password)));\n\t\t\tbreak;\n\t\tcase 'SMD5':\n\t\t\t$salt = generateSalt(4);\n\t\t\t$hash = \"{SMD5}\" . base64_encode(hex2bin(md5($password . $salt)) . $salt);\n\t\t\tbreak;\n\t\tcase 'SHA':\n\t\t\t$hash = \"{SHA}\" . base64_encode(hex2bin(sha1($password)));\n\t\t\tbreak;\n\t\tcase 'PLAIN':\n\t\t\t$hash = $password;\n\t\t\tbreak;\n\t\tcase 'K5KEY':\n\t\t\t$hash = '{K5KEY}';\n\t\t\tbreak;\n\t\tcase 'ARGON2ID':\n\t\t\t$threads = max(4, PASSWORD_ARGON2_DEFAULT_THREADS);\n\t\t\t$hash = \"{ARGON2}\" . password_hash($password, PASSWORD_ARGON2ID, array('threads' => $threads));\n\t\t\tbreak;\n\t\tcase 'SSHA':\n\t\tdefault: // use SSHA if the setting is invalid\n\t\t\t$salt = generateSalt(4);\n\t\t\t$hash = \"{SSHA}\" . base64_encode(hex2bin(sha1($password . $salt)) . $salt);\n\t\t\tbreak;\n\t}\n\t// enable/disable password\n\tif (!$enabled) {\n\t\treturn pwd_disable($hash);\n\t}\n\treturn $hash;\n}\n\n/**\n * Returns the hash type of the given password hash.\n * This will return PLAIN if no supported hash type was found.\n *\n * @param string|null $hash password hash\n * @return string type (e.g. SSHA)\n */\nfunction getHashType(?string $hash): string {\n\tif (empty($hash)) {\n\t\treturn 'PLAIN';\n\t}\n\t$matches = array();\n\tif (!preg_match('/\\\\{([A-Z0-9-]+)\\\\}.+/', $hash, $matches)) {\n\t\treturn 'PLAIN';\n\t}\n\t$type = $matches[1];\n\tif ($type === 'ARGON2') {\n\t\treturn 'ARGON2ID';\n\t}\n\tif (in_array($type, getSupportedHashTypes())) {\n\t\treturn $type;\n\t}\n\treturn 'PLAIN';\n}\n\n/**\n * Returns the list of supported hash types (e.g. SSHA).\n *\n * @return array hash types\n */\nfunction getSupportedHashTypes() {\n\t$hashes = array('CRYPT', 'CRYPT-SHA512', 'SHA', 'SSHA', 'MD5', 'SMD5', 'PLAIN', 'SASL', 'K5KEY', 'LDAP_EXOP', 'ARGON2ID');\n\tif (function_exists('openssl_pbkdf2') || function_exists('hash_pbkdf2')) {\n\t\t$hashes[] = 'PBKDF2-SHA512';\n\t}\n\treturn $hashes;\n}\n\n/**\n* Calculates a password salt of the given length.\n*\n* @param int $len salt length\n* @return String the salt string\n*\n*/\nfunction generateSalt($len) {\n\t$chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890./';\n\t$salt = '';\n\tfor ($i = 0; $i < $len; $i++) {\n\t\t$pos = abs(getRandomNumber() % strlen($chars));\n\t\t$salt .= $chars[$pos];\n\t}\n\treturn $salt;\n}\n\n/**\n* Marks an password hash as enabled and returns the new hash string\n*\n* @param string $hash hash value to enable\n* @return string enabled password hash\n*/\nfunction pwd_enable($hash) {\n\t// check if password is disabled (old wrong LAM method)\n\tif ((substr($hash, 0, 2) == \"!{\") || (substr($hash, 0, 2) == \"*{\")) {\n\t\treturn substr($hash, 1, strlen($hash));\n\t}\n\t// check for \"!\" or \"*\" at beginning of password hash\n\telse {\n\t\tif (substr($hash, 0, 1) == \"{\") {\n\t\t\t$pos = strpos($hash, \"}\");\n\t\t\tif ((substr($hash, $pos + 1, 1) == \"!\") || (substr($hash, $pos + 1, 1) == \"*\")) {\n\t\t\t\t// enable hash\n\t\t\t\treturn substr($hash, 0, $pos + 1) . substr($hash, $pos + 2, strlen($hash));\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn $hash;  // not disabled\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn $hash;  // password is plain text\n\t\t}\n\t}\n}\n\n/**\n* Marks an password hash as disabled and returns the new hash string\n*\n* @param string $hash hash value to disable\n* @return string disabled hash value\n*/\nfunction pwd_disable($hash) {\n\t// check if password is disabled (old wrong LAM method)\n\tif ((substr($hash, 0, 2) == \"!{\") || (substr($hash, 0, 2) == \"*{\")) {\n\t\treturn $hash;\n\t}\n\t// check for \"!\" or \"*\" at beginning of password hash\n\telse {\n\t\tif (substr($hash, 0, 1) == \"{\") {\n\t\t\t$pos = strpos($hash, \"}\");\n\t\t\tif ((substr($hash, $pos + 1, 1) == \"!\") || (substr($hash, $pos + 1, 1) == \"*\")) {\n\t\t\t\t// hash already disabled\n\t\t\t\treturn $hash;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn substr($hash, 0, $pos + 1) . \"!\" . substr($hash, $pos + 1, strlen($hash));  // not disabled\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn $hash;  // password is plain text\n\t\t}\n\t}\n}\n\n/**\n * Checks if a Unix password can be locked.\n * This checks if the password is not plain text but e.g. contains {SSHA}.\n *\n * @param String $password password value\n * @return boolean can be locked\n */\nfunction pwd_is_lockable($password) {\n\tif (($password == null) || (strlen($password) < 5)) {\n\t\treturn false;\n\t}\n\t// SASL is not lockable\n\tif (strpos($password, '{SASL}') === 0) {\n\t\treturn false;\n\t}\n\treturn ((substr($password, 0, 1) == \"{\") || (substr($password, 1, 1) == \"{\")) && (strpos($password, \"}\") > 3);\n}\n\n/**\n* Checks if a password hash is enabled/disabled\n*\n* @param string $hash password hash to check\n* @return boolean true if the password is marked as enabled\n*/\nfunction pwd_is_enabled($hash) {\n\t// disabled passwords have a \"!\" or \"*\" at the beginning (old wrong LAM method)\n\tif ((substr($hash, 0, 2) == \"!{\") || (substr($hash, 0, 2) == \"*{\")) {\n\t\treturn false;\n\t}\n\tif (substr($hash, 0, 1) == \"{\") {\n\t\t$pos = strrpos($hash, \"}\");\n\t\t// check if hash starts with \"!\" or \"*\"\n\t\treturn ((substr($hash, $pos + 1, 1) !== \"!\") && (substr($hash, $pos + 1, 1) !== \"*\"));\n\t}\n\telse {\n\t\treturn true;\n\t}\n}\n\n/**\n * Generates a random password with 12 digits by default.\n *\n * @param int $length length of password (defaults to 12)\n * @return String password\n */\nfunction generateRandomPassword($length = 12) {\n\t$list = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.-_';\n\t$password = '';\n\t$minLength = $_SESSION['cfgMain']->passwordMinLength;\n\tif ($minLength > $length) {\n\t\t$length = $minLength;\n\t}\n\tfor ($x = 0; $x < 10000; $x++) {\n\t\t$password = '';\n\t\tfor ($i = 0; $i < $length; $i++) {\n\t\t\t$rand = abs(getRandomNumber() % 65);\n\t\t\t$password .= $list[$rand];\n\t\t}\n\t\tif (checkPasswordStrength($password, null, null) === true) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $password;\n}\n\n/**\n * Checks if the given password matches the crypto hash.\n *\n * @param String type hash type (must be one of getSupportedHashTypes())\n * @param string $hash password hash value\n * @param string $password plain text password to check\n * @return bool hash matches\n * @see getSupportedHashTypes()\n */\nfunction checkPasswordHash($type, $hash, $password) {\n\tswitch ($type) {\n\t\tcase 'SSHA':\n\t\t\t$bin = base64_decode($hash);\n\t\t\t$salt = substr($bin, 20);\n\t\t\t$pwdHash = base64_encode(hex2bin(sha1($password . $salt)) . $salt);\n\t\t\treturn (strcmp($hash, $pwdHash) == 0);\n\t\tcase 'SHA':\n\t\t\treturn (strcmp($hash, base64_encode(hex2bin(sha1($password)))) == 0);\n\t\tcase 'SMD5':\n\t\t\t$bin = base64_decode($hash);\n\t\t\t$salt = substr($bin, 16);\n\t\t\t$pwdHash = base64_encode(hex2bin(md5($password . $salt)) . $salt);\n\t\t\treturn (strcmp($hash, $pwdHash) == 0);\n\t\tcase 'MD5':\n\t\t\treturn (strcmp($hash, base64_encode(hex2bin(md5($password)))) == 0);\n\t\tcase 'CRYPT':\n\t\t\t$parts = explode('$', $hash);\n\t\t\tif (sizeof($parts) === 1) {\n\t\t\t\t$salt = substr($hash, 0, 2);\n\t\t\t\t$pwdHash = crypt($password, $salt);\n\t\t\t\treturn (strcmp($hash, $pwdHash) == 0);\n\t\t\t}\n\t\t\tif (sizeof($parts) === 4) {\n\t\t\t\t$version = $parts[1];\n\t\t\t\t$salt = $parts[2];\n\t\t\t\t$pwdHash = crypt($password, '$' . $version . '$' . $salt);\n\t\t\t\treturn (strcmp($hash, $pwdHash) == 0);\n\t\t\t}\n\t\t\telseif (sizeof($parts) === 5) {\n\t\t\t\t$version = $parts[1];\n\t\t\t\t$rounds = $parts[2];\n\t\t\t\t$salt = $parts[3];\n\t\t\t\t$pwdHash = crypt($password, '$' . $version . '$' . $rounds . '$' . $salt);\n\t\t\t\treturn (strcmp($hash, $pwdHash) == 0);\n\t\t\t}\n\t\t\treturn false;\n\t\tcase 'ARGON2ID':\n\t\t\treturn password_verify($password, $hash);\n\t\tcase 'PLAIN':\n\t\t\treturn $password === $hash;\n\t\tdefault:\n\t\t\treturn false;\n\t}\n}\n\n/**\n * Returns the number of character classes in a password.\n *\n * @param string $password password\n * @return int number of classes\n */\nfunction getNumberOfCharacterClasses($password) : int {\n\tif (($password === null) || ($password === '')) {\n\t\treturn 0;\n\t}\n\t$classesCount = 0;\n\tif (preg_match(\"/[a-z]/\", $password)) {\n\t\t$classesCount++;\n\t}\n\tif (preg_match(\"/[A-Z]/\", $password)) {\n\t\t$classesCount++;\n\t}\n\tif (preg_match(\"/[0-9]/\", $password)) {\n\t\t$classesCount++;\n\t}\n\tif (preg_match(\"/[^a-z0-9]/i\", $password)) {\n\t\t$classesCount++;\n\t}\n\treturn $classesCount;\n}\n\n/**\n* Returns an array with all Samba 3 domain entries under the given suffix\n*\n* @param handle LDAP handle (if null then $_SESSION['ldap']->server() is used)\n* @param String $suffix LDAP suffix to search (if null then $_SESSION['config']->get_Suffix('smbDomain') is used)\n* @return array list of samba3domain objects\n*/\nfunction search_domains($server = null, $suffix = null) {\n\tif ($suffix == null) {\n\t\t$suffix = $_SESSION['config']->get_Suffix('smbDomain');\n\t}\n\t$ret = array();\n\t$attr = array(\"DN\", \"sambaDomainName\", \"sambaSID\", \"sambaNextRid\", \"sambaNextGroupRid\",\n\t\t\"sambaNextUserRid\", \"sambaAlgorithmicRidBase\", 'sambaMinPwdAge', 'sambaMaxPwdAge',\n\t\t'sambaPwdHistoryLength'\n\t);\n\tif ($server == null) {\n\t\t$server = $_SESSION['ldap']->server();\n\t}\n\t$filter = '(objectclass=sambaDomain)';\n\t$units = searchLDAPPaged($server, $suffix, $filter, $attr, false, 0);\n\t// extract attributes\n\tfor ($i = 0; $i < sizeof($units); $i++) {\n\t\t$ret[$i] = new samba3domain();\n\t\t$ret[$i]->dn = $units[$i]['dn'];\n\t\t$ret[$i]->name = $units[$i]['sambadomainname'][0];\n\t\t$ret[$i]->SID = $units[$i]['sambasid'][0];\n\t\tif (isset($units[$i]['sambanextrid'][0])) {\n\t\t\t$ret[$i]->nextRID = $units[$i]['sambanextrid'][0];\n\t\t}\n\t\tif (isset($units[$i]['sambanextgrouprid'][0])) {\n\t\t\t$ret[$i]->nextGroupRID = $units[$i]['sambanextgrouprid'][0];\n\t\t}\n\t\tif (isset($units[$i]['sambanextuserrid'][0])) {\n\t\t\t$ret[$i]->nextUserRID = $units[$i]['sambanextuserrid'][0];\n\t\t}\n\t\tif (isset($units[$i]['sambaalgorithmicridbase'][0])) {\n\t\t\t$ret[$i]->RIDbase = $units[$i]['sambaalgorithmicridbase'][0];\n\t\t}\n\t\tif (isset($units[$i]['sambaminpwdage'][0])) {\n\t\t\t$ret[$i]->minPwdAge = $units[$i]['sambaminpwdage'][0];\n\t\t}\n\t\tif (isset($units[$i]['sambamaxpwdage'][0])) {\n\t\t\t$ret[$i]->maxPwdAge = $units[$i]['sambamaxpwdage'][0];\n\t\t}\n\t\tif (isset($units[$i]['sambapwdhistorylength'][0])) {\n\t\t\t$ret[$i]->pwdHistoryLength = $units[$i]['sambapwdhistorylength'][0];\n\t\t}\n\t}\n\treturn $ret;\n}\n\n/**\n* Represents a Samba 3 domain entry\n*\n* @package modules\n*/\nclass samba3domain {\n\n\t/** DN */\n\tpublic $dn;\n\n\t/** Domain name */\n\tpublic $name;\n\n\t/** Domain SID */\n\tpublic $SID;\n\n\t/** Next RID */\n\tpublic $nextRID;\n\n\t/** Next user RID */\n\tpublic $nextUserRID;\n\n\t/** Next group RID */\n\tpublic $nextGroupRID;\n\n\t/** RID base to calculate RIDs, default 1000 */\n\tpublic $RIDbase = 1000;\n\n\t/** seconds after the password can be changed */\n\tpublic $minPwdAge;\n\n\t/** seconds after the password must be changed */\n\tpublic $maxPwdAge;\n\n\t/** password history length */\n\tpublic $pwdHistoryLength;\n}\n\n/**\n* Checks if a given value matches the selected regular expression.\n*\n* @param string $argument value to check\n* @param string $regexp pattern name\n* @return boolean true if matches, otherwise false\n*/\nfunction get_preg($argument, $regexp) {\n\t// First we check \"positive\" cases\n\t$pregexpr = '';\n\tswitch ($regexp) {\n\t\tcase 'password':\n\t\t\t\t\t$pregexpr = '/^([[:alnum:]\\\\^\\\\ \\\\|\\\\#\\\\*\\\\,\\\\.\\\\;\\\\:\\\\_\\\\+\\\\!\\\\%\\\\&\\\\/\\\\?\\\\{\\\\(\\\\)\\\\}\\\\[\\\\]\\\\$\u00a7\u00b0@=-])*$/u';\n\t\t\t\t\tbreak;\n\t\tcase 'groupname':\t// all letters, numbers, space and ._- are allowed characters\n\t\tcase 'username':\n\t\tcase 'hostname':\n\t\t\t\t\t$pregexpr = '/^([[:alnum:]%#@\\\\.\\\\ \\\\_\\\\$-])+$/u';\n\t\t\t\t\tbreak;\n\t\tcase 'krbUserName':\n\t\t\t\t\t$pregexpr = '/^([[:alnum:]#@\\\\/\\\\.\\\\ \\\\_\\\\$-])+$/u';\n\t\t\t\t\tbreak;\n\t\tcase 'hostObject':\n\t\t\t\t\t$pregexpr = '/^[!]?([[:alnum:]@\\\\.\\\\ \\\\_\\\\$\\\\*-])+$/u';\n\t\t\t\t\tbreak;\n\t\tcase 'usernameList':\t// comma separated list of user names\n\t\tcase 'groupnameList':\t// comma separated list of group names\n\t\t\t\t\t$pregexpr = '/^([[:alnum:]%#@\\\\.\\\\ \\\\_-])+(,([[:alnum:]%#@\\\\.\\\\ \\\\_-])+)*$/u';\n\t\t\t\t\tbreak;\n\t\tcase 'realname':\t// Allow all but \\, <, >, =, $, ?\n\t\tcase 'cn':\n\t\t\t\t\t$pregexpr = '/^[^\\\\\\<>=\\\\$\\\\?]+(\\\\$)?$/';\n\t\t\t\t\tbreak;\n\t\tcase \"telephone\":\t// Allow letters, numbers, space, brackets, /-+.\n\t\t\t\t\t$pregexpr = '/^(\\\\+)*([0-9a-zA-Z\\\\.\\\\ \\\\(\\\\)\\\\/-])*$/';\n\t\t\t\t\tbreak;\n\t\tcase \"email\":\n\t\t\t\t\t$pregexpr = '/^([0-9a-zA-Z\\'!~#+*%\\\\$\\\\/\\\\._-])+[@]([0-9a-zA-Z-])+([.]([0-9a-zA-Z-])+)*$/';\n\t\t\t\t\tbreak;\n\t\tcase \"emailWithName\":\n\t\t\t\t\t$pregexpr = '/^([[:alnum:] \\'!~#+*%\\\\$\\\\(\\\\)_-])+ <([0-9a-zA-Z\\'!~#+*%\\\\$\\\\/\\\\._-])+[@]([0-9a-zA-Z-])+([.]([0-9a-zA-Z-])+)*>$/u';\n\t\t\t\t\tbreak;\n\t\tcase \"mailLocalAddress\":\n\t\t\t\t\t$pregexpr = '/^([0-9a-zA-Z+\\\\/\\\\._-])+([@]([0-9a-zA-Z-])+([.]([0-9a-zA-Z-])+)*)?$/';\n\t\t\t\t\tbreak;\n\t\tcase 'kolabEmailPrefix':\n\t\t\t\t\t$pregexpr = '/^([-])?([0-9a-zA-Z+\\\\/\\\\._-])*([@]([0-9a-zA-Z\\\\.-])*)?$/';\n\t\t\t\t\tbreak;\n\t\tcase \"postalAddress\":\t// Allow all but \\, <, >, =, ?\n\t\t\t\t\t$pregexpr = '/^[^\\\\\\<>=\\\\?]*$/';\n\t\t\t\t\tbreak;\n\t\tcase \"postalCode\":\t// Allow all but \\, <, >, =, ?\n\t\tcase \"street\":\n\t\tcase \"title\":\n\t\tcase \"employeeType\":\n\t\tcase \"businessCategory\":\n\t\t\t\t\t$pregexpr = '/^[^\\\\\\<>=\\\\$\\\\?]*$/';\n\t\t\t\t\tbreak;\n\t\tcase \"homeDirectory\":\t\t// Homapath, /path/......\n\t\tcase \"filePath\":\n\t\t\t\t\t$pregexpr = '/^([\\/]([[:alnum:]@\\\\$\\\\.\\\\ \\\\_-])+)+(\\/)?$/u';\n\t\t\t\t\tbreak;\n\t\tcase \"digit\":\t\t// Normal number\n\t\t\t\t\t$pregexpr = '/^[[:digit:]]*$/';\n\t\t\t\t\tbreak;\n\t\tcase \"float\":\t\t// float value\n\t\t\t\t\t$pregexpr = '/^[[:digit:]]+(\\\\.[[:digit:]]+)?$/';\n\t\t\t\t\tbreak;\n\t\tcase \"UNC\":\t\t\t// UNC Path, e.g. \\\\server\\share\\folder\\...\n\t\t\t\t\t$pregexpr = '/^((([\\\\\\][\\\\\\])|(%))([a-zA-Z0-9@%\\\\.-])+)([\\\\\\]([[:alnum:]@%\\\\.\\\\$\\\\ \\\\_-])+)+$/u';\n\t\t\t\t\tbreak;\n\t\tcase \"logonscript\":\t// path to login-script. normal unix file\n\t\t\t\t\t$pregexpr = '/^(([\\/\\\\\\])*([[:alnum:]%\\\\.\\\\ \\\\$\\\\_-])+([\\/\\\\\\]([[:alnum:]%\\\\.\\\\ \\\\$\\\\_-])+)*((\\\\.bat)|(\\\\.cmd)|(\\\\.exe)|(\\\\.vbs)))*$/u';\n\t\t\t\t\tbreak;\n\t\tcase \"workstations\":\t// comma separated list with windows-hosts\n\t\t\t\t\t$pregexpr = '/^(([a-zA-Z0-9\\\\.\\\\_-])+(,[a-zA-Z0-9\\\\.\\\\_-])*)*$/';\n\t\t\t\t\tbreak;\n\t\tcase \"domainname\":\t\t// Windows Domainname\n\t\t\t\t\t$pregexpr = '/^([A-Za-z0-9\\\\.\\\\_-])+$/';\n\t\t\t\t\tbreak;\n\t\tcase \"unixhost\":\t\t// Unix hosts\n\t\t\t\t\t$pregexpr = '/^([a-z0-9,\\\\.\\\\*_-])*$/';\n\t\t\t\t\tbreak;\n\t\tcase 'digit2':\t\t\t// Same as digit but also -1\n\t\t\t\t\t$pregexpr = '/^(([-][1])|([[:digit:]]*))$/';\n\t\t\t\t\tbreak;\n\t\tcase 'gecos':\n\t\t\t\t\t$pregexpr = '/^[[:alnum:] \\\\._-]+([,][[:alnum:] \\\\._-]+)*$/u';\n\t\t\t\t\tbreak;\n\t\tcase 'macAddress':\n\t\t\t\t\t$pregexpr = '/^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$/';\n\t\t\t\t\tbreak;\n\t\tcase 'date':\t\t\t// 31-12-2012\n\t\t\t\t\t$pregexpr = '/^((0?[1-9])|([1-2][0-9])|30|31)\\\\-((0?[1-9])|(1[0-2]))\\\\-[1-3][0-9][0-9][0-9]$/';\n\t\t\t\t\tbreak;\n\t\tcase 'date2':\n\t\t\t\t\t$pregexpr = '/^((0[1-9])|([1-2][0-9])|30|31)\\\\.((0[1-9])|(1[0-2]))\\\\.[1-3][0-9][0-9][0-9]$/';\n\t\t\t\t\tbreak;\n\t\tcase 'dateTime':\n\t\t\t\t\t$pregexpr = '/^[1-3][0-9][0-9][0-9]\\\\-((0[1-9])|(1[0-2]))\\\\-((0[1-9])|([1-2][0-9])|30|31) ((0[0-9])|([1][0-9])|20|21|22|23):((0[0-9])|([1-5][0-9])):((0[0-9])|([1-5][0-9]))$/';\n\t\t\t\t\tbreak;\n\t\tcase 'sambaLogonHours':\n\t\t\t\t\t$pregexpr = '/^[0-9a-fA-F]{42}$/';\n\t\t\t\t\tbreak;\n\t\tcase 'DNSname':\n\t\t\t\t\t$pregexpr = '/^[0-9a-zA-Z_-]+(\\\\.[0-9a-zA-Z_-]+)*$/';\n\t\t\t\t\tbreak;\n\t\tcase 'nis_alias':\n\t\t\t\t\t$pregexpr = '/^([[:alnum:]@\\\\.\\\\ \\\\_-])+$/u';\n\t\t\t\t\tbreak;\n\t\tcase 'nis_recipient':\n\t\t\t\t\t$pregexpr = '/^([[:alnum:]+@\\\\.\\\\ \\\\_-])+$/u';\n\t\t\t\t\tbreak;\n\t\tcase 'country':\t// Allow all letters and space\n\t\t\t\t\t$pregexpr = '/^[[:alpha:]]([[:alpha:] ])+$/u';\n\t\t\t\t\tbreak;\n\t\tcase 'dn':\t// LDAP DN\n\t\t\t\t\t$pregexpr = '/^([^=,]+=[^=,]+)(,([^=,]+=[^=,]+))*$/';\n\t\t\t\t\tbreak;\n\t\tcase 'domainSID': // Samba domain SID\n\t\t\t\t\t$pregexpr = \"/^S\\\\-[0-9]\\\\-[0-9]\\\\-[0-9]{2,2}\\\\-[0-9]+\\\\-[0-9]+\\\\-[0-9]+$/\";\n\t\t\t\t\tbreak;\n\t\tcase 'ip': // IP address\n\t\t\t\t\t$pregexpr = '/^[0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}$/';\n\t\t\t\t\tbreak;\n\t\tcase 'ip6': // IPv6 address (only basic check)\n\t\t\t\t\t$pregexpr = '/^[0-9a-f:]+$/i';\n\t\t\t\t\tbreak;\n\t\tcase 'ascii': // ASCII\n\t\t\t\t\t$pregexpr = '/^[' . chr(1) . '-' . chr(128) . ']*$/';\n\t\t\t\t\tbreak;\n\t\tcase 'objectClass':\n\t\t\t\t\t$pregexpr = '/^[[:alnum:]_-]+$/';\n\t\t\t\t\tbreak;\n\t\tcase 'quotaNumber':\n\t\t\t\t\t$pregexpr = '/^[[:digit:]]+[KMGTkmgt]?$/';\n\t\t\t\t\tbreak;\n\t\tcase 'hostAndPort':\n\t\t\t\t\t$pregexpr = '/^[[:alnum:]\\\\._-]+:[[:digit:]]+$/';\n\t\t\t\t\tbreak;\n\t\tcase 'ldapDateAndTime':\n\t\t\t\t\t$pregexpr = '/^[0-9]{14}Z$/';\n\t\t\t\t\tbreak;\n\t}\n\tif (($pregexpr != '') && preg_match($pregexpr, $argument)) {\n\t\treturn true;\n\t}\n\t// Now we check \"negative\" cases, characters which are not allowed\n\t$pregexpr = '';\n\tswitch ($regexp) {\n\t\tcase \"!lower\":\n\t\t\t$pregexpr = '/[[:lower:]]/';\n\t\t\tbreak;\n\t\tcase \"!upper\":\n\t\t\t$pregexpr = '/[[:upper:]]/';\n\t\t\tbreak;\n\t\tcase \"!digit\":\n\t\t\t$pregexpr = '/[[:digit:]]/';\n\t\t\tbreak;\n\t}\n\tif (($pregexpr != '') && !preg_match($pregexpr, $argument)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n/**\n * Converts the comma escaping from Windows to OpenLDAP style.\n *\n * @param string $dn DN\n * @return string DN\n */\nfunction convertCommaEscaping($dn) {\n\treturn str_replace(\n\t\tarray('\\\\,'),\n\t\tarray('\\\\2C'),\n\t\t$dn);\n}\n\n/**\n * Connects to an LDAP server using the given URL.\n *\n * @param string $serverURL URL\n */\nfunction connectToLDAP($serverURL, $startTLS) {\n\t$server = ldap_connect($serverURL);\n\tif ($server === false) {\n\t\treturn null;\n\t}\n\tif (defined('LDAP_OPT_X_TLS_CACERTFILE')) {\n\t\t$cfgMain = new LAMCfgMain();\n\t\t$certificates = $cfgMain->getSSLCaCertificates();\n\t\tif (!empty($certificates)) {\n\t\t\tldap_set_option($server, LDAP_OPT_X_TLS_CACERTFILE, $cfgMain->getSSLCaCertPath());\n\t\t}\n\t}\n\t// use LDAPv3\n\tldap_set_option($server, LDAP_OPT_PROTOCOL_VERSION, 3);\n\t// start TLS if possible\n\tif ($startTLS) {\n\t\tldap_start_tls($server);\n\t\tif (ldap_errno($server) != 0) {\n\t\t\tldap_close($server);\n\t\t\tlogNewMessage(LOG_ERR, 'Unable to start TLS encryption. Please check if your server certificate is valid and if the LDAP server supports TLS at all.');\n\t\t\treturn null;\n\t\t}\n\t}\n\treturn $server;\n}\n\n/**\n * This will search the given LDAP suffix for all entries which have the given attribute.\n *\n * @param String $name attribute name (may be null)\n * @param String $value attribute value\n * @param String $objectClass object class (may be null)\n * @param array $attributes list of attributes to return\n * @param array $scopes account types\n * @return array list of found entries\n */\nfunction searchLDAPByAttribute($name, $value, $objectClass, $attributes, $scopes) {\n\t$return = array();\n\t// build filter\n\t$filter = '';\n\t$filterParts = array();\n\tif ($name != null) {\n\t\t$filterParts[] = '(' . $name . '=' . ldap_escape($value, '*', LDAP_ESCAPE_FILTER) . ')';\n\t}\n\tif ($objectClass != null) {\n\t\t$filterParts[] = '(objectClass=' . $objectClass . ')';\n\t}\n\tif (sizeof($filterParts) == 1) {\n\t\t$filter = $filterParts[0];\n\t}\n\telseif (sizeof($filterParts) > 1) {\n\t\t$filter = '(& ' . implode(' ', $filterParts) . ')';\n\t}\n\t$typeManager = new \\LAM\\TYPES\\TypeManager();\n\t$activeTypes = $typeManager->getConfiguredTypes();\n\tforeach ($activeTypes as $type) {\n\t\tif (!in_array($type->getScope(), $scopes)) {\n\t\t\tcontinue;  // skip non-active account types\n\t\t}\n\t\t// search LDAP\n\t\t$entries = searchLDAPPaged($_SESSION['ldap']->server(), $type->getSuffix(),\n\t\t\t\t\t$filter, $attributes, 0, $_SESSION['config']->get_searchLimit());\n\t\tif (ldap_errno($_SESSION['ldap']->server()) == 4) {\n\t\t\tlogNewMessage(LOG_WARNING, 'LDAP size limit exceeded. Please increase the limit on your server.');\n\t\t}\n\t\t$return = array_merge($return, $entries);\n\t}\n\treturn $return;\n}\n\n/**\n * This will search the given LDAP suffix for all entries which match the given filter.\n *\n * @param String $filter\n * @param array $attributes list of attributes to return\n * @param array $scopes account types\n * @param boolean $attrsOnly get only attributes but no values (default: false)\n * @return array list of found entries\n */\nfunction searchLDAPByFilter($filter, $attributes, $scopes, $attrsOnly = false) {\n\t$return = array();\n\t$readAttributesOnly = 0;\n\tif ($attrsOnly) {\n\t\t$readAttributesOnly = 1;\n\t}\n\t$typeManager = new \\LAM\\TYPES\\TypeManager();\n\t$types = $typeManager->getConfiguredTypesForScopes($scopes);\n\tforeach ($types as $type) {\n\t\t$additionalFilter = $type->getAdditionalLdapFilter();\n\t\tif (!empty($additionalFilter)) {\n\t\t\tif (strpos($additionalFilter, '(') !== 0) {\n\t\t\t\t$additionalFilter = '(' . $additionalFilter . ')';\n\t\t\t}\n\t\t\tif (strpos($filter, '(') !== 0) {\n\t\t\t\t$filter = '(' . $filter . ')';\n\t\t\t}\n\t\t\t$filter = '(&' . $additionalFilter . $filter . ')';\n\t\t}\n\t\t// search LDAP\n\t\t$entries = searchLDAPPaged($_SESSION['ldap']->server(), $type->getSuffix(),\n\t\t\t\t\t$filter, $attributes, $readAttributesOnly, $_SESSION['config']->get_searchLimit());\n\t\tif (ldap_errno($_SESSION['ldap']->server()) == 4) {\n\t\t\tlogNewMessage(LOG_WARNING, 'LDAP size limit exceeded. Please increase the limit on your server.');\n\t\t}\n\t\t$return = array_merge($return, $entries);\n\t}\n\treturn $return;\n}\n\n/**\n * Runs an LDAP search.\n *\n * @param String $suffix LDAP suffix\n * @param String $filter filter\n * @param array $attributes list of attributes to return\n * @param int $limit result limit\n * @return array list of found entries\n */\nfunction searchLDAP($suffix, $filter, $attributes, $limit = -1) {\n\tif ($limit === -1) {\n\t\t$limit = !empty($_SESSION['config']) ? $_SESSION['config']->get_searchLimit() : 0;\n\t}\n\t$return = searchLDAPPaged(getLDAPServerHandle(), $suffix, $filter, $attributes,\n\t\t\t\t0, $limit);\n\tif (ldap_errno(getLDAPServerHandle()) == 4) {\n\t\tlogNewMessage(LOG_WARNING, 'LDAP size limit exceeded. Please increase the limit on your server.');\n\t}\n\treturn $return;\n}\n\n/**\n * Returns the LDAP server handle.\n *\n * @return handle LDAP handle\n */\nfunction getLDAPServerHandle() {\n\tif (!empty($_SESSION['ldap'])) {\n\t\t// admin pages\n\t\treturn $_SESSION['ldap']->server();\n\t}\n\telse {\n\t\t// self service\n\t\treturn $_SESSION['ldapHandle'];\n\t}\n}\n\n/**\n * Runs an LDAP search and uses paging if configured.\n *\n * @param handle $server LDAP connection handle\n * @param String $dn DN\n * @param String $filter filter\n * @param array $attributes attribute list\n * @param boolean $attrsOnly return only attribute names\n * @param int $limit size limit\n * @return array results\n */\nfunction searchLDAPPaged($server, $dn, $filter, $attributes, $attrsOnly, $limit) {\n\tif (empty($_SESSION['config']) || ($_SESSION['config']->getPagedResults() !== 'true')) {\n\t\t$sr = @ldap_search($server, $dn, $filter, $attributes, $attrsOnly, $limit, 0, LDAP_DEREF_NEVER);\n\t\tif ($sr) {\n\t\t\t$entries = ldap_get_entries($server, $sr);\n\t\t\tif (!$entries) {\n\t\t\t\treturn array();\n\t\t\t}\n\t\t\tcleanLDAPResult($entries);\n\t\t\treturn $entries;\n\t\t}\n\t\telse {\n\t\t\treturn array();\n\t\t}\n\t}\n\t$pageSize = 999;\n\t$cookie = '';\n\t$controls = array(\n\t\tarray(\n\t\t\t'oid' => LDAP_CONTROL_PAGEDRESULTS,\n\t\t\t'size' => $pageSize,\n\t\t\t'cookie' => $cookie)\n\t);\n\t$return = array();\n\tdo {\n\t\t$sr  = @ldap_search($server, $dn, $filter, $attributes, $attrsOnly, $limit,\n\t\t\t0, LDAP_DEREF_NEVER, $controls);\n\t\tif (!$sr) {\n\t\t\tbreak;\n\t\t}\n\t\t$entries = ldap_get_entries($server, $sr);\n\t\tif (!$entries) {\n\t\t\tbreak;\n\t\t}\n\t\t$return = array_merge($return, $entries);\n\t}\n\twhile ($cookie !== null && $cookie != '');\n\tcleanLDAPResult($return);\n\treturn $return;\n}\n\n/**\n * Returns the given DN.\n *\n * @param String $dn DN\n * @param array $attributes list of attributes to fetch\n * @param handle $handle LDAP handle (optional for admin interface pages)\n * @return array attributes or null if not found\n */\nfunction ldapGetDN($dn, $attributes = array('dn'), $handle = null) {\n\tif ($handle == null) {\n\t\t$handle = getLDAPServerHandle();\n\t}\n\t$return = null;\n\t$sr = @ldap_read($handle, $dn, 'objectClass=*', $attributes, 0, 0, 0, LDAP_DEREF_NEVER);\n\tif ($sr) {\n\t\t$entries = ldap_get_entries($handle, $sr);\n\t\tif ($entries) {\n\t\t\tcleanLDAPResult($entries);\n\t\t\t$return = $entries[0];\n\t\t}\n\t\t@ldap_free_result($sr);\n\t}\n\treturn $return;\n}\n\n/**\n * Returns the DN and children of a given DN.\n *\n * @param String $dn DN\n * @param String $filter LDAP filter\n * @param array $attributes list of attributes to fetch\n * @param handle $handle LDAP handle (optional for admin interface pages)\n * @param int $limit result limit\n * @return array attributes or null if not found\n */\nfunction ldapListDN($dn, $filter = '(objectclass=*)', $attributes = array('dn'), $handle = null, $limit = -1) {\n\tif ($limit === -1) {\n\t\t$limit = !empty($_SESSION['config']) ? $_SESSION['config']->get_searchLimit() : 0;\n\t}\n\tif ($handle == null) {\n\t\t$handle = $_SESSION['ldap']->server();\n\t}\n\t$return = null;\n\t$sr = @ldap_list($handle, $dn, $filter, $attributes, 0, $limit, 0, LDAP_DEREF_NEVER);\n\tif ($sr) {\n\t\t$entries = ldap_get_entries($handle, $sr);\n\t\tif ($entries) {\n\t\t\tcleanLDAPResult($entries);\n\t\t\t$return = $entries;\n\t\t}\n\t\t@ldap_free_result($sr);\n\t}\n\treturn $return;\n}\n\n/**\n* Deletes a DN and all child entries.\n*\n* @param string $dn DN to delete\n* @param boolean $recursive recursive delete also child entries\n* @return array error messages\n*/\nfunction deleteDN($dn, $recursive) {\n\t$errors = array();\n\tif (($dn == null) || ($dn == '')) {\n\t\t$errors[] = array('ERROR', _('Entry does not exist'));\n\t\treturn $errors;\n\t}\n\tif ($recursive) {\n\t\t$sr = @ldap_list($_SESSION['ldap']->server(), $dn, 'objectClass=*', array('dn'), 0, 0, 0, LDAP_DEREF_NEVER);\n\t\tif ($sr) {\n\t\t\t$entries = ldap_get_entries($_SESSION['ldap']->server(), $sr);\n\t\t\tcleanLDAPResult($entries);\n\t\t\tfor ($i = 0; $i < sizeof($entries); $i++) {\n\t\t\t\t// delete recursively\n\t\t\t\t$subErrors = deleteDN($entries[$i]['dn'], $recursive);\n\t\t\t\tfor ($e = 0; $e < sizeof($subErrors); $e++) {\n\t\t\t\t\t$errors[] = $subErrors[$e];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t$errors[] = array ('ERROR', sprintf(_('Was unable to delete DN: %s.'), $dn), getDefaultLDAPErrorString($_SESSION['ldap']->server()));\n\t\t\treturn $errors;\n\t\t}\n\t}\n\t// delete parent DN\n\t$success = @ldap_delete($_SESSION['ldap']->server(), $dn);\n\tif (!$success) {\n\t\tlogNewMessage(LOG_ERR, 'Unable to delete DN: ' . $dn . ' (' . ldap_error($_SESSION['ldap']->server()) . ').');\n\t\t$errors[] = array ('ERROR', sprintf(_('Was unable to delete DN: %s.'), $dn), getDefaultLDAPErrorString($_SESSION['ldap']->server()));\n\t}\n\telse {\n\t\tlogNewMessage(LOG_NOTICE, 'Deleted DN: ' . $dn);\n\t}\n\treturn $errors;\n}\n\n/**\n * Performs a recursive copy from old DN under target DN.\n *\n * @param string $oldDn old DN to copy\n * @param string $targetDn copy nodes under this DN\n * @throws LAMException error on copy\n */\nfunction copyDnRecursive(string $oldDn, string $targetDn): void {\n\t$oldRdn = extractRDN($oldDn);\n\t$newDn = $oldRdn . ',' . $targetDn;\n\tlogNewMessage(LOG_DEBUG, 'Copy DN ' . $oldDn . ' to ' . $newDn);\n\t$attributes = ldapGetDN($oldDn, array('*'));\n\tif (empty($attributes)) {\n\t\tlogNewMessage(LOG_ERR, sprintf(_(\"Unable to read %s.\"), unescapeLdapSpecialCharacters($oldDn)));\n\t\tthrow new LAMException(sprintf(_(\"Unable to read %s.\"), htmlspecialchars(unescapeLdapSpecialCharacters($oldDn))));\n\t}\n\tunset($attributes['dn']);\n\t$systemAttributesToSkip = array('iscriticalsystemobject', 'primarygroupid', 'samaccounttype', 'objectsid');\n\tforeach ($systemAttributesToSkip as $systemAttributeToSkip) {\n\t\tif (isset($attributes[$systemAttributeToSkip])) {\n\t\t\tunset($attributes[$systemAttributeToSkip]);\n\t\t}\n\t}\n\t$success = ldap_add($_SESSION['ldap']->server(), $newDn, $attributes);\n\tif (!$success) {\n\t\tlogNewMessage(LOG_ERR, sprintf(_('Was unable to create DN: %s.'), unescapeLdapSpecialCharacters($oldDn)) . ' ' .\n\t\t\tgetExtendedLDAPErrorMessage($_SESSION['ldap']->server()));\n\t\tthrow new LAMException(sprintf(_('Was unable to create DN: %s.'), htmlspecialchars(unescapeLdapSpecialCharacters($oldDn))),\n\t\t\tgetExtendedLDAPErrorMessage($_SESSION['ldap']->server()));\n\t}\n\t$children = ldapListDN($oldDn);\n\tforeach ($children as $child) {\n\t\tcopyDnRecursive($child['dn'], $newDn);\n\t}\n}\n\n/**\n * Moves an LDAP entry.\n *\n * @param string $oldDn old DN\n * @param string $targetDn target container DN\n * @throws LAMException error during move\n */\nfunction moveDn(string $oldDn, string $targetDn): void {\n\t$deleteOldRdn = $_SESSION['ldap']->isActiveDirectory();\n\t$rdn = extractRDN($oldDn);\n\t$success = ldap_rename($_SESSION['ldap']->server(), $oldDn, $rdn, $targetDn, $deleteOldRdn);\n\tif (!$success) {\n\t\tthrow new LAMException(sprintf(_('Was unable to rename DN: %s.'), $oldDn), getDefaultLDAPErrorString($_SESSION['ldap']->server()));\n\t}\n}\n\n/**\n * Returns the parameters for a StatusMessage of the last LDAP search.\n *\n * @return array parameters for StatusMessage or null if all was ok\n */\nfunction getLastLDAPError() {\n\t$errorNumber = ldap_errno($_SESSION[\"ldap\"]->server());\n\tswitch ($errorNumber) {\n\t\t// all ok\n\t\tcase 0:\n\t\t\treturn null;\n\t\t\tbreak;\n\t\t// size limit exceeded\n\t\tcase 4:\n\t\t\t$error = array(\"WARN\", _(\"LDAP sizelimit exceeded, not all entries are shown.\"));\n\t\t\tif ($_SESSION['config']->get_searchLimit() == 0) {\n\t\t\t\t// server limit exceeded\n\t\t\t\t$error[] = _(\"See the manual for instructions to solve this problem.\");\n\t\t\t}\n\t\t\treturn $error;\n\t\t\tbreak;\n\t\t// other errors\n\t\tdefault:\n\t\t\treturn array(\"ERROR\", _(\"LDAP search failed! Please check your preferences.\"), ldap_error($_SESSION[\"ldap\"]->server()));\n\t\tbreak;\n\t}\n}\n\n/**\n * Cleans the result of an LDAP search.\n * This will remove all 'count' entries and also all numeric array keys.\n *\n * @param array $entries LDAP entries in format $entries[entry number][attribute name][attribute values]\n */\nfunction cleanLDAPResult(&$entries) {\n\tif (isset($entries['count'])) {\n\t\tunset($entries['count']);\n\t}\n\t// iterate over all results\n\t$count = sizeof($entries);\n\tfor ($e = 0; $e < $count; $e++) {\n\t\t// remove 'count' entries and numerical entries\n\t\tfor ($i = 0; $i < $entries[$e]['count']; $i++) {\n\t\t\tif (isset($entries[$e][$i])) {\n\t\t\t\tunset($entries[$e][$i]);\n\t\t\t}\n\t\t}\n\t\tunset($entries[$e]['count']);\n\t\t$attrNames = array_keys($entries[$e]);\n\t\t$attrCount = sizeof($attrNames);\n\t\tfor ($i = 0; $i < $attrCount; $i++) {\n\t\t\tif (is_array($entries[$e][$attrNames[$i]])) {\n\t\t\t\tunset($entries[$e][$attrNames[$i]]['count']);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Transforms a DN into a more user friendly format.\n * E.g. \"dc=company,dc=de\" is transformed to \"company > de\".\n *\n * @param String $dn DN\n * @return String transformed DN\n */\nfunction getAbstractDN($dn) {\n\tif ($dn == '') {\n\t\treturn '';\n\t}\n\t$dn = str_replace('\\\\,', '\\\\2C', $dn);\n\tif (!empty($_SESSION['config']) && !empty($_SESSION['config']->getHideDnPart())) {\n\t\t$partToCut = ',' . $_SESSION['config']->getHideDnPart();\n\t\t$dn = str_replace($partToCut, '', $dn);\n\t}\n\t$parts = explode(',', $dn);\n\tfor ($i = 0; $i < sizeof($parts); $i++) {\n\t\t$subparts = explode('=', $parts[$i]);\n\t\tif (sizeof($subparts) == 2) {\n\t\t\t$parts[$i] = $subparts[1];\n\t\t}\n\t}\n\t$abstractDn = implode(' > ', $parts);\n\treturn unescapeLdapSpecialCharacters($abstractDn);\n}\n\n/**\n * Unescapes LDAP special characters for readability.\n *\n * @param string $dn escaped DN\n * @return string unescaped DN\n */\nfunction unescapeLdapSpecialCharacters(string $dn): string {\n\treturn preg_replace_callback('/\\\\\\([0-9A-Fa-f]{2})/', 'unescapeLdapSpecialCharactersCallback', $dn);\n}\n\n/**\n * Callback function for unescaping DN.\n *\n * @param array $matches HEX value that was found\n * @return string unescaped string\n */\nfunction unescapeLdapSpecialCharactersCallback(array $matches): string {\n\treturn chr(hexdec($matches[1]));\n}\n\n/**\n* Helper function to sort DNs.\n*\n* @param string $a first argument to compare\n* @param string $b second argument to compare\n* @return integer 0 if equal, 1 if $a is greater, -1 if $b is greater\n*/\nfunction compareDN($a, $b) {\n\t// split DNs\n\t$array_a = explode(\",\", strtolower($a));\n\t$array_b = explode(\",\", strtolower($b));\n\t$len_a = sizeof($array_a);\n\t$len_b = sizeof($array_b);\n\t// check how many parts to compare\n\t$len = min($len_a, $len_b);\n\t// compare from last part on\n\tfor ($i = 0; $i < $len; $i++) {\n\t\t// get parts to compare\n\t\t$part_a = $array_a[$len_a - $i - 1];\n\t\t$part_a = explode('=', $part_a);\n\t\t$part_a = isset($part_a[1]) ? $part_a[1] : $part_a[0];\n\t\t$part_b = $array_b[$len_b - $i - 1];\n\t\t$part_b = explode('=', $part_b);\n\t\t$part_b = isset($part_b[1]) ? $part_b[1] : $part_b[0];\n\t\t// compare parts\n\t\tif ($part_a == $part_b) { // part is identical\n\t\t\tif ($i == ($len - 1)) {\n\t\t\t\treturn $len_a <=> $len_b;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn strnatcasecmp($part_a, $part_b);\n\t\t}\n\t}\n\treturn -1;\n}\n\n/**\n * Formats an LDAP time string (e.g. from createTimestamp).\n *\n * @param String $time LDAP time value\n * @return String formatted time\n */\nfunction formatLDAPTimestamp($time) {\n\t$dateTime = parseLDAPTimestamp($time);\n\treturn $dateTime->format('d.m.Y H:i:s');\n}\n\n/**\n * Parses an LDAP time stamp and returns a DateTime in current time zone.\n *\n * @param String $time LDAP time value\n * @return DateTime time\n */\nfunction parseLDAPTimestamp($time) {\n\t// Windows format:  20140118093807.0Z\n\t// OpenLDAP format: 20140118093807Z\n\t// cut off \"Z\"\n\t$timeNumbers = substr($time, 0, -1);\n\t// for Windows cut off \".0\"\n\tif (strpos($timeNumbers, '.') == (strlen($timeNumbers) - 2)) {\n\t\t$timeNumbers = substr($timeNumbers, 0, -2);\n\t}\n\t$dateTime = DateTime::createFromFormat('YmdHis', $timeNumbers, new DateTimeZone('UTC'));\n\t$dateTime->setTimezone(getTimeZone());\n\treturn $dateTime;\n}\n\n/**\n * Simple function to obfuscate strings.\n *\n * @param String $text text to obfuscate\n */\nfunction obfuscateText($text) {\n\tif (($text == null) || ($text == '')) {\n\t\treturn $text;\n\t}\n\treturn str_rot13(base64_encode('LAM_OBFUSCATE:'.$text));\n}\n\n/**\n * Simple function to deobfuscate strings.\n *\n * @param String $text text to deobfuscate\n */\nfunction deobfuscateText($text) {\n\tif (($text == null) || ($text == '')) {\n\t\treturn $text;\n\t}\n\tif (!isObfuscatedText($text)) {\n\t\treturn $text;\n\t}\n\treturn str_replace('LAM_OBFUSCATE:', '', base64_decode(str_rot13($text)));\n}\n\n/**\n * Checks if the given text is obfuscated.\n *\n * @param String $text text to check\n * @return boolean obfuscated or not\n */\nfunction isObfuscatedText($text) {\n\tif (($text == null) || ($text == '')) {\n\t\treturn false;\n\t}\n\t$deob = base64_decode(str_rot13($text));\n\treturn (strpos($deob, 'LAM_OBFUSCATE:') === 0);\n}\n\n/**\n * Extracts the RDN attribute name from a given DN.\n *\n * @param String $dn DN\n * @return String RDN attribute name\n */\nfunction extractRDNAttribute($dn) {\n\t$rdn = extractRDN($dn);\n\tif (empty($rdn)) {\n\t\treturn null;\n\t}\n\t$parts = explode(\"=\", $rdn);\n\treturn $parts[0];\n}\n\n/**\n * Extracts the RDN attribute value from a given DN.\n *\n * @param String $dn DN\n * @return String RDN attribute value\n */\nfunction extractRDNValue($dn) {\n\t$rdn = extractRDN($dn);\n\tif (empty($rdn)) {\n\t\treturn null;\n\t}\n\t$parts = explode(\"=\", $rdn);\n\treturn $parts[1];\n}\n\n/**\n * Extracts the RDN part of the DN.\n *\n * @param string|null $dn DN\n * @return string|null RDN part\n */\nfunction extractRDN(?string $dn): ?string {\n\tif (empty($dn)) {\n\t\treturn null;\n\t}\n\t$dn = convertCommaEscaping($dn);\n\t$parts = ldap_explode_dn($dn, 0);\n\tif (empty($parts[0])) {\n\t\treturn null;\n\t}\n\t$rdn = unescapeLdapSpecialCharacters($parts[0]);\n\t$rdn = str_replace(',', '\\\\2C', $rdn);\n\treturn $rdn;\n}\n\n/**\n * Extracts the DN suffix from a given DN.\n * E.g. ou=people,dc=test,dc=com will result in dc=test,dc=com.\n *\n * @param String $dn DN\n * @return String DN suffix\n */\nfunction extractDNSuffix($dn) {\n\tif ($dn == null) {\n\t\treturn null;\n\t}\n\t$dn = convertCommaEscaping($dn);\n\t$parts = ldap_explode_dn($dn, 0);\n\tif ($parts === false) {\n\t\treturn null;\n\t}\n\tunset($parts['count']);\n\tarray_shift($parts);\n\tfor ($i = 0; $i < sizeof($parts); $i++) {\n\t\t$parts[$i] = unescapeLdapSpecialCharacters($parts[$i]);\n\t\t$parts[$i] = str_replace(',', '\\\\2C', $parts[$i]);\n\t}\n\treturn implode(',', $parts);\n}\n\n/**\n * Sends the password mail.\n *\n * @param String $pwd new password\n * @param array $user LDAP attributes of user\n * @param String $recipient recipient address (optional, $user['mail'][0] used by default)\n * @return array list of arrays that can be used to create status messages\n */\nfunction sendPasswordMail($pwd, $user, $recipient = null) {\n\t$user = array_change_key_case($user, CASE_LOWER);\n\t// read mail data\n\t$mailTo = null;\n\tif (!empty($recipient)) {\n\t\t$mailTo = $recipient;\n\t}\n\telseif (!empty($user['mail'][0])) {\n\t\t$mailTo = $user['mail'][0];\n\t}\n\tif (empty($mailTo)) {\n\t\tlogNewMessage(LOG_ERR, 'Unable to send password mail, no TO address set.');\n\t\treturn array(\n\t\t\tarray('ERROR', _('Unable to send mail!'))\n\t\t);\n\t}\n\t$mailFrom = $_SESSION['config']->getLamProMailFrom();\n\t$mailReplyTo = $_SESSION['config']->getLamProMailReplyTo();\n\t$mailSubject = $_SESSION['config']->getLamProMailSubject();\n\t$mailText = $_SESSION['config']->getLamProMailText();\n\t$mailIsHTML = $_SESSION['config']->getLamProMailIsHTML();\n\t$subject = $mailSubject;\n\t$body = $mailText;\n\t$body = str_replace('@@newPassword@@', $pwd, $body);\n\t$results = array();\n\t$found = preg_match('/\\@\\@[^\\@]+\\@\\@/', $body, $results);\n\twhile ($found == 1) {\n\t\t$attr = str_replace('@', '', $results[0]);\n\t\t$value = '';\n\t\tif (isset($user[strtolower($attr)][0])) {\n\t\t\tif (is_array($user[strtolower($attr)])) {\n\t\t\t\t$value = $user[strtolower($attr)][0];\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$value = $user[strtolower($attr)];\n\t\t\t}\n\t\t}\n\t\t$body = str_replace('@@' . $attr . '@@', $value, $body);\n\t\t$found = preg_match('/\\@\\@[^\\@]+\\@\\@/', $body, $results);\n\t}\n\t$success = sendEMail($mailTo, $subject, $body, $mailFrom, ($mailIsHTML == 'true'), $mailReplyTo);\n\tif ($success) {\n\t\tlogNewMessage(LOG_DEBUG, 'Sent password mail to ' . $mailTo);\n\t\treturn array(\n\t\t\tarray('INFO', sprintf(_('Mail successfully sent to %s.'), htmlspecialchars($mailTo)))\n\t\t);\n\t}\n\telse {\n\t\tlogNewMessage(LOG_ERR, 'Unable to send password mail to ' . htmlspecialchars($mailTo));\n\t\treturn array(\n\t\t\tarray('ERROR', _('Unable to send mail!'))\n\t\t);\n\t}\n}\n\n/**\n * Sends out an email.\n *\n * @param String|array $to TO address\n * @param String $subject email subject\n * @param String $text mail body (with \\r\\n EOL)\n * @param String $from FROM address\n * @param bool $isHTML HTML format\n * @param String $replyTo REPLY-TO address (optional)\n * @param String $cc CC address (optional)\n * @param String $bcc BCC address (optional)\n */\nfunction sendEMail($to, $subject, $text, $from, $isHTML, $replyTo = null, $cc = null, $bcc = null) {\n\tinclude_once __DIR__ . '/3rdParty/composer/autoload.php';\n\t$returnPath = empty($replyTo) ? $from : $replyTo;\n\t$returnPathParsed = PHPMailer\\PHPMailer\\PHPMailer::parseAddresses($returnPath);\n\tlogNewMessage(LOG_DEBUG, \"Send mail to \" . print_r($to, true) . \"\\n\" . $text);\n\t$mailer = new PHPMailer\\PHPMailer\\PHPMailer(true);\n\ttry {\n\t\t$cfgMain = $_SESSION['cfgMain'];\n\t\tif (!empty($cfgMain->mailServer)) {\n\t\t\t$mailer->isSMTP();\n\t\t\t$serverParts = explode(':', $cfgMain->mailServer);\n\t\t\t$mailer->Host = $serverParts[0];\n\t\t\t$mailer->Port = $serverParts[1];\n\t\t\tif (!empty($cfgMain->mailUser)) {\n\t\t\t\t$mailer->SMTPAuth = true;\n\t\t\t\t$mailer->Username = $cfgMain->mailUser;\n\t\t\t\t$mailer->Password = $cfgMain->mailPassword;\n\t\t\t\t$mailEncryption = $cfgMain->mailEncryption;\n\t\t\t\tif (empty($mailEncryption) || ($mailEncryption === LAMCfgMain::SMTP_TLS)) {\n\t\t\t\t\t$mailer->SMTPSecure = PHPMailer\\PHPMailer\\PHPMailer::ENCRYPTION_STARTTLS;\n\t\t\t\t}\n\t\t\t\telseif ($mailEncryption === LAMCfgMain::SMTP_SSL) {\n\t\t\t\t\t$mailer->SMTPSecure = PHPMailer\\PHPMailer\\PHPMailer::ENCRYPTION_SMTPS;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$mailer->SMTPAutoTLS = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$mailer->CharSet = PHPMailer\\PHPMailer\\PHPMailer::CHARSET_UTF8;\n\t\tif (is_array($to)) {\n\t\t\tforeach ($to as $toAddress) {\n\t\t\t\t$mailer->addAddress($toAddress);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t$mailer->addAddress($to);\n\t\t}\n\t\t$mailer->Subject = $subject;\n\t\t$mailer->Body = $text;\n\t\t$mailer->Sender = $returnPathParsed[0]['address'];\n\t\t$fromParsed = PHPMailer\\PHPMailer\\PHPMailer::parseAddresses($from);\n\t\t$mailer->setFrom($fromParsed[0]['address'], $fromParsed[0]['name']);\n\t\t$mailer->isHTML($isHTML);\n\t\tif (!empty($replyTo)) {\n\t\t\t$replyToParsed = PHPMailer\\PHPMailer\\PHPMailer::parseAddresses($replyTo);\n\t\t\t$mailer->addReplyTo($replyToParsed[0]['address'], $replyToParsed[0]['name']);\n\t\t}\n\t\tif (!empty($cc)) {\n\t\t\t$ccParsed = PHPMailer\\PHPMailer\\PHPMailer::parseAddresses($cc);\n\t\t\t$mailer->addCC($ccParsed[0]['address'], $ccParsed[0]['name']);\n\t\t}\n\t\tif (!empty($bcc)) {\n\t\t\t$bccParsed = PHPMailer\\PHPMailer\\PHPMailer::parseAddresses($bcc);\n\t\t\t$mailer->addBCC($bccParsed[0]['address'], $bccParsed[0]['name']);\n\t\t}\n\t\t$mailer->XMailer = 'LDAP Account Manager';\n\t\t$mailSentOk = $mailer->send();\n\t\tif (!$mailSentOk) {\n\t\t\tlogNewMessage(LOG_ERR, 'Mail sending failed: ' . $mailer->ErrorInfo);\n\t\t}\n\t\telse {\n\t\t\tlogNewMessage(LOG_DEBUG, 'Mail sent');\n\t\t}\n\t\treturn $mailSentOk;\n\t}\n\tcatch (Exception $e) {\n\t\tlogNewMessage(LOG_ERR, 'Mail sending failed: ' . $e->getMessage());\n\t\treturn false;\n\t}\n}\n\n/**\n * Checks if an email address is safe for use on commandline\n *\n * @param $address email address\n * @return bool is safe\n */\nfunction isCommandlineSafeEmailAddress($address) {\n\t$cmdEscaped = escapeshellcmd($address);\n\t$argEscaped = escapeshellarg($address);\n\tif (($address !== $cmdEscaped) || (\"'$address'\" !== $argEscaped)) {\n\t\treturn false;\n\t}\n\t$addressLength = strlen($address);\n\t$allowedSpecialChars = array('@', '_', '-', '.');\n\tfor ($i = 0; $i < $addressLength; $i++) {\n\t\t$char = $address[$i];\n\t\tif (!ctype_alnum($char) && !in_array($char, $allowedSpecialChars)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n * Caches module objects.\n * This improves performance if the same module does not need to be created multiple times (calling get_metaData() each time).\n *\n * @author Roland Gruber\n */\nclass moduleCache {\n\n\t/** module cache (\"name:scope\" => module) */\n\tprivate static $cache = array();\n\n\t/**\n\t * Returns a new/cached module with the given name and scope.\n\t *\n\t * @param String $name module name\n\t * @param String $scope module scope (e.g. user)\n\t */\n\tpublic static function getModule($name, $scope) {\n\t\tif (isset(self::$cache[$name . ':' . $scope])) {\n\t\t\treturn self::$cache[$name . ':' . $scope];\n\t\t}\n\t\telse {\n\t\t\tif (!class_exists($name)) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tself::$cache[$name . ':' . $scope] = new $name($scope);\n\t\t\treturn self::$cache[$name . ':' . $scope];\n\t\t}\n\t}\n\n}\n\n/**\n * Returns a random number.\n *\n * @return int random number\n */\nfunction getRandomNumber() {\n\tif (function_exists('openssl_random_pseudo_bytes')) {\n\t\treturn abs(hexdec(bin2hex(openssl_random_pseudo_bytes(5))));\n\t}\n\treturn abs(mt_rand());\n}\n\n/**\n * Connects to the LDAP server and extracts the certificates.\n *\n * @param String $server server name\n * @param String $port server port\n * @return mixed false on error and certificate if extracted successfully\n */\nfunction getLDAPSSLCertificate($server, $port) {\n\t$stream = @stream_context_create(array(\"ssl\" => array(\"capture_peer_cert_chain\" => true, \"verify_peer\" => false, \"allow_self_signed\" => true)));\n\tif (!$stream) {\n\t\treturn false;\n\t}\n\t$client = @stream_socket_client('ssl://' . $server . ':' . $port, $errno, $errstr, 30, STREAM_CLIENT_CONNECT, $stream);\n\tif (!$client) {\n\t\treturn false;\n\t}\n\t$context = stream_context_get_params($client);\n\tif (!isset($context['options']['ssl']['peer_certificate_chain'])) {\n\t\treturn false;\n\t}\n\t$finalPEM = '';\n\tfor ($i = 0; $i < sizeof($context['options']['ssl']['peer_certificate_chain']); $i++) {\n\t\t$cert = $context['options']['ssl']['peer_certificate_chain'][$i];\n\t\t$pemData = null;\n\t\t$pemResult = @openssl_x509_export($cert, $pemData);\n\t\tif ($pemResult) {\n\t\t\t$finalPEM .= $pemData;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $finalPEM;\n}\n\n/**\n * Returns the extended LDAP error message if any.\n *\n * @param handle $server LDAP server handle\n * @return String error message\n */\nfunction getExtendedLDAPErrorMessage($server) {\n\t$ldapMsg = null;\n\tldap_get_option($server, LDAP_OPT_ERROR_STRING, $ldapMsg);\n\tif (empty($ldapMsg)) {\n\t\treturn ldap_error($server);\n\t}\n\treturn $ldapMsg;\n}\n\n/**\n * Returns the default error message to display on the web page.\n * HTML special characters are already escaped.\n *\n * @param handle $server LDAP server handle\n * @return String error message\n */\nfunction getDefaultLDAPErrorString($server) {\n\t$extError = htmlspecialchars(getExtendedLDAPErrorMessage($server));\n\t// Active Directory message translations\n\tif (strpos($extError, 'DSID') !== false) {\n\t\tif (strpos($extError, '5003') !== false) {\n\t\t\tlogNewMessage(LOG_DEBUG, 'Password change failed because of ' . $extError);\n\t\t\t$extError = _('Your password does not meet the password strength qualifications. Please retry with another one.');\n\t\t}\n\t\telseif (strpos($extError, 'data 530,') !== false) {\n\t\t\tlogNewMessage(LOG_DEBUG, 'Login failed because of ' . $extError);\n\t\t\t$extError = _('Logon not permitted at this time');\n\t\t}\n\t\telseif (strpos($extError, 'data 532,') !== false) {\n\t\t\tlogNewMessage(LOG_DEBUG, 'Login failed because of ' . $extError);\n\t\t\t$extError = _('Password expired');\n\t\t}\n\t\telseif (strpos($extError, 'data 533,') !== false) {\n\t\t\tlogNewMessage(LOG_DEBUG, 'Login failed because of ' . $extError);\n\t\t\t$extError = _('Account is deactivated');\n\t\t}\n\t\telseif (strpos($extError, 'data 701,') !== false) {\n\t\t\tlogNewMessage(LOG_DEBUG, 'Login failed because of ' . $extError);\n\t\t\t$extError = _('Account is expired');\n\t\t}\n\t\telseif (strpos($extError, 'data 773,') !== false) {\n\t\t\tlogNewMessage(LOG_DEBUG, 'Login failed because of ' . $extError);\n\t\t\t$extError = _('Password change required');\n\t\t}\n\t\telseif (strpos($extError, 'data 775,') !== false) {\n\t\t\tlogNewMessage(LOG_DEBUG, 'Login failed because of ' . $extError);\n\t\t\t$extError = _('Account is locked');\n\t\t}\n\t}\n\t$genericErrorMessage = ldap_error($server);\n\t$message = _('LDAP error, server says:') . ' ' . $genericErrorMessage;\n\tif (!empty($extError) && ($genericErrorMessage != $extError)) {\n\t\t$message .= ' - ' . $extError;\n\t}\n\treturn $message;\n}\n\n/**\n * Tries to get additional information why invalid credentials was returned. E.g. account is locked.\n *\n * @param handle $ldap LDAP object to connect for getting extra data\n * @param string $userDn failed DN\n * @return string extra message\n */\nfunction getExtraInvalidCredentialsMessage($ldap, $userDn) {\n\tinclude_once __DIR__ . '/plugins/extendedInvalidCredentials/ExtraInvalidCredentials.inc';\n\t$extraInvalidCredentials = new ExtraInvalidCredentials();\n\treturn $extraInvalidCredentials->getExtraMessage($ldap, $userDn);\n}\n\n/**\n * Returns the URL under which the page was loaded.\n * This includes any GET parameters set.\n *\n * @param $baseUrl base URL (e.g. http://www.example.com)\n * @return String URL\n */\nfunction getCallingURL($baseUrl = '') {\n\t$url = null;\n\tif (!empty($baseUrl) && !empty($_SERVER['REQUEST_URI'])) {\n\t\t$url = $baseUrl . $_SERVER['REQUEST_URI'];\n\t}\n\telseif (!empty($_SERVER['REQUEST_URI']) && !empty($_SERVER['HTTP_HOST'])) {\n\t\t$proto = 'http://';\n\t\tif (!empty($_SERVER['HTTPS']) && ($_SERVER['HTTPS'] != 'off')) {\n\t\t\t$proto = 'https://';\n\t\t}\n\t\t$url = $proto . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];\n\t}\n\telseif (!empty($_SERVER['HTTP_REFERER'])) {\n\t\t$url = $_SERVER['HTTP_REFERER'];\n\t}\n\treturn $url;\n}\n\n/**\n * Returns the offset in hours from configured time zone to GMT.\n *\n * @return int offset\n */\nfunction getTimeZoneOffsetHours() {\n\t$dtz = getTimeZone();\n\treturn round($dtz->getOffset(new DateTime('UTC')) / 3600);\n}\n\n/**\n * Returns the configured time zone.\n *\n * @return DateTimeZone time zone\n */\nfunction getTimeZone() {\n\t$timeZoneName = 'UTC';\n\tif (!empty($_SESSION['config'])) {\n\t\t$timeZoneName = $_SESSION['config']->getTimeZone();\n\t}\n\telseif (!empty($_SESSION['selfServiceProfile']->timeZone)) {\n\t\t$timeZoneName = $_SESSION['selfServiceProfile']->timeZone;\n\t}\n\treturn new DateTimeZone($timeZoneName);\n}\n\n/**\n * Returns the current time in formatted form.\n *\n * @param unknown $format format to use (e.g. 'Y-m-d H:i:s')\n */\nfunction getFormattedTime($format) {\n\t$time = new DateTime('now', getTimeZone());\n\treturn $time->format($format);\n}\n\n/**\n * Formats a number of seconds to a more human readable format with minutes, hours, etc.\n * E.g. 70 seconds will return 1m10s.\n *\n * @param int $numSeconds number of seconds\n * @return String formatted number\n */\nfunction formatSecondsToShortFormat($numSeconds) {\n\tif (($numSeconds === '0') || ($numSeconds === 0)) {\n\t\treturn '0';\n\t}\n\tif (empty($numSeconds)) {\n\t\treturn '';\n\t}\n\tif (!is_numeric($numSeconds)) {\n\t\treturn $numSeconds;\n\t}\n\t$years = '';\n\tif ($numSeconds >= 31536000) {\n\t\t$years = floor($numSeconds / 31536000);\n\t\t$numSeconds = $numSeconds - ($years * 31536000);\n\t\t$years .= 'y';\n\t}\n\t$seconds = $numSeconds % 60;\n\t$seconds = ($seconds == 0) ? '' : $seconds . 's';\n\t$minutes = floor(($numSeconds % 3600) / 60);\n\t$minutes = ($minutes == 0) ? '' : $minutes . 'm';\n\t$hours = floor(($numSeconds % 86400) / 3600);\n\t$hours = ($hours == 0) ? '' : $hours . 'h';\n\t$days = floor(($numSeconds % 604800) / 86400);\n\t$days = ($days == 0) ? '' : $days . 'd';\n\t$weeks = floor($numSeconds / 604800);\n\t$weeks = ($weeks == 0) ? '' : $weeks . 'w';\n\treturn $years . $weeks . $days . $hours . $minutes . $seconds;\n}\n\n/**\n * Unformats text like 1m10s back to number of seconds.\n *\n * @param String $text formatted text\n * @return int number of seconds\n */\nfunction unformatShortFormatToSeconds($text) {\n\tif (empty($text)) {\n\t\treturn $text;\n\t}\n\t$matches = array();\n\tif (preg_match('/^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?$/', $text, $matches)) {\n\t\t$newValue = 0;\n\t\tif (!empty($matches[2])) {\n\t\t\t$newValue += $matches[2] * 31536000;\n\t\t}\n\t\tif (!empty($matches[4])) {\n\t\t\t$newValue += $matches[4] * 604800;\n\t\t}\n\t\tif (!empty($matches[6])) {\n\t\t\t$newValue += $matches[6] * 86400;\n\t\t}\n\t\tif (!empty($matches[8])) {\n\t\t\t$newValue += $matches[8] * 3600;\n\t\t}\n\t\tif (!empty($matches[10])) {\n\t\t\t$newValue += $matches[10] * 60;\n\t\t}\n\t\tif (!empty($matches[12])) {\n\t\t\t$newValue += $matches[12];\n\t\t}\n\t\treturn $newValue;\n\t}\n\treturn $text;\n}\n\n/**\n * Checks if the user is logged in. Stops script execution if not.\n *\n * @param boolean $check2ndFactor check if the 2nd factor was provided if required\n */\nfunction enforceUserIsLoggedIn($check2ndFactor = true) {\n\tif ((!isset($_SESSION['loggedIn']) || ($_SESSION['loggedIn'] !== true)) && empty($_SESSION['selfService_clientPassword'])) {\n\t\tlogNewMessage(LOG_WARNING, 'Detected unauthorized access to page that requires login: ' . $_SERVER[\"SCRIPT_FILENAME\"]);\n\t\tdie();\n\t}\n\tif ($check2ndFactor && isset($_SESSION['2factorRequired'])) {\n\t\tlogNewMessage(LOG_WARNING, 'Detected unauthorized access to page that requires login (2nd factor not provided): ' . $_SERVER[\"SCRIPT_FILENAME\"]);\n\t\tdie();\n\t}\n}\n\n/**\n * Prints the content of the header part.\n *\n * @param string $title page title\n * @param string $prefix prefix to LAM main folder (e.g. \"..\")\n */\nfunction printHeaderContents($title, $prefix) {\n\techo '<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">';\n\techo '<title>';\n\techo $title;\n\techo \"</title>\\n\";\n\t// include CSS files\n\t$cssDirName = dirname(__FILE__) . '/../style';\n\t$cssDir = dir($cssDirName);\n\t$cssFiles = array();\n\t$cssEntry = $cssDir->read();\n\twhile ($cssEntry !== false) {\n\t\tif (substr($cssEntry, strlen($cssEntry) - 4, 4) == '.css') {\n\t\t\t$cssFiles[] = $cssEntry;\n\t\t}\n\t\t$cssEntry = $cssDir->read();\n\t}\n\tsort($cssFiles);\n\tforeach ($cssFiles as $cssEntry) {\n\t\techo \"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"$prefix/style/$cssEntry\\\">\\n\";\n\t}\n\techo '<link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"' . $prefix . '/graphics/favicon.ico\">';\n\techo '<link rel=\"icon\" href=\"' . $prefix . '/graphics/logo136.png\">';\n}\n\n/**\n * Prints script tags for all LAM JS files.\n *\n * @param string $prefix prefix to LAM main folder (e.g. \"..\")\n */\nfunction printJsIncludes($prefix) {\n\t$jsDirName = dirname(__FILE__) . '/../templates/lib';\n\t$jsDir = dir($jsDirName);\n\t$jsFiles = array();\n\t$jsEntry = $jsDir->read();\n\twhile ($jsEntry !== false) {\n\t\tif ((substr($jsEntry, strlen($jsEntry) - 3, 3) == '.js') || (substr($jsEntry, strlen($jsEntry) - 4, 4) == '.php')) {\n\t\t\t$jsFiles[] = $jsEntry;\n\t\t}\n\t\t$jsEntry = $jsDir->read();\n\t}\n\tsort($jsFiles);\n\tforeach ($jsFiles as $jsEntry) {\n\t\techo \"<script type=\\\"text/javascript\\\" src=\\\"$prefix/templates/lib/\" . $jsEntry . \"\\\"></script>\\n\";\n\t}\n}\n\n/**\n * Converts an UTF-8 string to UTF16LE.\n *\n * @param string $input UTF-8 value\n */\nfunction convertUtf8ToUtf16Le($input) {\n\tif (($input == null) || (strlen($input) == 0)) {\n\t\treturn $input;\n\t}\n\t$output = iconv('UTF-8', 'UTF-16LE', $input);\n\tif (($output === false) || ($output == '')) {\n\t\t$output = mb_convert_encoding($input, 'UTF-8', 'UTF-16LE');\n\t}\n\treturn $output;\n}\n\n/**\n * Returns the text with LAM and its version for header area.\n *\n * @return string LAM version text\n */\nfunction getLAMVersionText() {\n\t$text = 'LDAP Account Manager';\n\tif (isLAMProVersion()) {\n\t\t$text .= ' Pro';\n\t}\n\treturn $text . ' - ' . LAMVersion();\n}\n\n/**\n * Returns if the given release is a developer version.\n *\n * @param string version\n * @return bool is developer version\n */\nfunction isDeveloperVersion($version) {\n\treturn strpos($version, 'DEV') !== false;\n}\n\n/**\n * LAM exception with title and message.\n *\n * @author Roland Gruber\n */\nclass LAMException extends Exception {\n\n\tprivate $title;\n\t\n\tprivate $ldapErrorCode;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param string $title title\n\t * @param string $message message (optional)\n\t * @param Exception $cause (optional)\n\t * @param int $ldapErrorCode original LDAP error code\n\t */\n\tpublic function __construct($title, $message = null, $cause = null, $ldapErrorCode = null) {\n\t\tparent::__construct($message, null, $cause);\n\t\t$this->title = $title;\n\t\t$this->ldapErrorCode = $ldapErrorCode;\n\t}\n\n\t/**\n\t * Returns the message title.\n\t *\n\t * @return string title\n\t */\n\tpublic function getTitle() {\n\t\treturn $this->title;\n\t}\n\n\t/**\n\t * Returns the original LDAP error code.\n\t *\n\t * @return int error code\n\t */\n\tpublic function getLdapErrorCode() {\n\t\treturn $this->ldapErrorCode;\n\t}\n\n}\n", "<?php\nuse \\LAM\\LIB\\TWO_FACTOR\\TwoFactorProviderService;\nuse LAM\\PDF\\PdfStructurePersistenceManager;\nuse LAM\\PERSISTENCE\\ConfigurationDatabase;\nuse LAM\\PROFILES\\AccountProfilePersistenceManager;\nuse \\LAM\\REMOTE\\RemoteServerConfiguration;\nuse LAM\\TYPES\\TypeManager;\nuse function LAM\\PERSISTENCE\\dbTableExists;\n\n/*\n\n  This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)\n  Copyright (C) 2003 - 2022  Roland Gruber\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n\n*/\n\n/**\n* This file includes functions to manage the configuration files.\n*\n* @package configuration\n* @author Roland Gruber\n* @author Thomas Manninger\n*/\n\n/** persistence */\ninclude_once 'persistence.inc';\n/** Used to print messages. */\ninclude_once \"status.inc\";\n/** Used to get module information. */\ninclude_once \"modules.inc\";\n/** Used to get type information. */\ninclude_once \"types.inc\";\n/** 2-factor */\ninclude_once '2factor.inc';\n\n/**\n * Sets the environment variables for custom SSL CA certificates.\n */\nfunction setSSLCaCert() {\n\t$config = null;\n\tif (isset($_SESSION['cfgMain'])) {\n\t\t$config = $_SESSION['cfgMain'];\n\t}\n\telse {\n\t\t$config = new LAMCfgMain();\n\t}\n\t// set SSL certificate if set\n\t$sslCaPath = $config->getSSLCaCertPath();\n\tif ($sslCaPath != null) {\n\t\tputenv('LDAPTLS_CACERT=' . $sslCaPath);\n\t\tputenv('TLS_CACERT=' . $sslCaPath);\n\t}\n}\n\n/**\n* Sets language settings for automatic translation\n*/\nfunction setlanguage() {\n\t$code = 'en_GB.utf8';\n\t$fallbackCode = 'en_GB.UTF-8';\n\t$encoding = 'UTF-8';\n\tif (!isset($_SESSION['language'])) {\n\t\t$_SESSION['language'] = \"en_GB.utf8\";\n\t}\n\t$possibleLanguages = getLanguages();\n\tforeach ($possibleLanguages as $lang) {\n\t\tif ($lang->code == $_SESSION['language']) {\n\t\t\t$code = $lang->code;\n\t\t\t$fallbackCode = str_replace('utf8', 'UTF-8', $code);\n\t\t\t$encoding = $lang->encoding;\n\t\t\tbreak;\n\t\t}\n\t}\n\tputenv(\"LANG=$code\");  // e.g. LANG=de_DE\n\tputenv(\"LC_ALL=$code\");\n\tputenv(\"LC_LANG=$code\");\n\tputenv(\"LC_LANGUAGE=$code\");\n\t$setLocaleResult = setlocale(LC_ALL, array($code, $fallbackCode));  // set LC_ALL\n\tif ($setLocaleResult === false) {\n\t\tlogNewMessage(LOG_WARNING, \"Unable to set locale, check if 'locale -a' returns $code\");\n\t}\n\t$locdir = substr(__FILE__, 0, strlen(__FILE__) - 15) . \"/locale\";  // set path to translations\n\tbindtextdomain(\"messages\", $locdir);\n\t$bindTextResult = bind_textdomain_codeset(\"messages\", $encoding);\n\tif (!is_string($bindTextResult)) {\n\t\tlogNewMessage(LOG_WARNING, \"Unable to bind text domain, check if 'locale -a' returns $code\");\n\t}\n\t$textDomainResult = textdomain(\"messages\");\n\tif (!is_string($textDomainResult)) {\n\t\tlogNewMessage(LOG_WARNING, \"Unable to set text domain, check if 'locale -a' returns $code\");\n\t}\n\theader(\"Content-type: text/html; charset=\" . $encoding, true);\n}\n\n/**\n * Checks whether a specific flag in the rights string is set.\n *\n * @param string $right read, write or execute\n * @param string $target owner, group or other\n * @param string $chmod the chmod rights\n *\n * @return true, if the chmod $right for $target were set\n */\nfunction checkChmod($right, $target, $chmod) {\n\t$right_arr = array(\"read\",\"write\",\"execute\");\n\t$target_arr = array(\"owner\",\"group\",\"other\");\n\n\t// Check, if $right and $target has right parameters\n\tif (!in_array($right, $right_arr) ||!in_array($target, $target_arr)) {\n\t\treturn false;\n\t}\n\n\t$chmod_num = -1;\n\t// owner:\n\tif ($target == \"owner\") {\n\t\t$chmod_num = 0;\n\t}\n\tif ($target == \"group\") {\n\t\t$chmod_num = 1;\n\t}\n\tif ($target == \"other\") {\n\t\t$chmod_num = 2;\n\t}\n\n\t// Cut the number from the chmod:\n\t$chmod_num = $chmod[$chmod_num];\n\n\t// Now check, if the chmod_num can be right with the $right\n\t// What numbers allow \"read\"\n\t$read = array(4,5,6,7);\n\t// What numbers allow \"write\"\n\t$write = array(2,3,6,7);\n\t// What numbers allow \"execute\"\n\t$execute = array(1,3,5,7);\n\tif ((($right == \"read\") && in_array($chmod_num, $read))\n\t\t\t|| (($right == \"write\") && in_array($chmod_num, $write))\n\t\t\t|| (($right == \"execute\") && in_array($chmod_num, $execute))) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n/**\n* Returns the version number of this LAM installation.\n* Format: <major version>.<minor version>.<patch level>\n* <br> Major/minor version are always numbers, patch level may contain letters for unofficial releases only (e.g. 0.5.alpha1).\n*\n* @return string version number\n*/\nfunction LAMVersion() {\n\t$file = substr(__FILE__, 0, strlen(__FILE__) - 15) . \"/VERSION\";\n\tif (is_readable($file)) {\n\t\t$handle = fopen($file, \"r\");\n\t\tif (!feof($handle)) {\n\t\t\treturn trim(fgets($handle, 20));\n\t\t}\n\t}\n\t// file was not readable\n\treturn '0.0.unknown';\n}\n\n/**\n * Extracts config options from HTTP POST data.\n *\n * @param array $confTypes array (option name => type (e.g. multiselect))\n * @return array list of config options (name => array(values))\n */\nfunction extractConfigOptionsFromPOST($confTypes) {\n\t$options = array();\n\tforeach ($confTypes as $element => $type) {\n\t\t// text fields\n\t\tif ($type == \"text\") {\n\t\t\t$options[$element] = array($_POST[$element]);\n\t\t}\n\t\t// text fields\n\t\telseif ($type == \"text_obfuscated\") {\n\t\t\t$options[$element] = array(obfuscateText($_POST[$element]));\n\t\t}\n\t\t// hidden fields\n\t\telseif ($type == \"hidden\") {\n\t\t\t$options[$element] = array($_POST[$element]);\n\t\t}\n\t\t// checkboxes\n\t\telseif ($type == \"checkbox\") {\n\t\t\tif (isset($_POST[$element]) && ($_POST[$element] == \"on\")) {\n\t\t\t\t$options[$element] = array('true');\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$options[$element] = array('false');\n\t\t\t}\n\t\t}\n\t\t// dropdownbox\n\t\telseif ($type == \"select\") {\n\t\t\t$options[$element] = array($_POST[$element]);\n\t\t}\n\t\t// multiselect\n\t\telseif ($type == \"multiselect\") {\n\t\t\t$options[$element] = $_POST[$element];  // value is already an array\n\t\t}\n\t\t// textarea\n\t\telseif ($type == \"textarea\") {\n\t\t\t$options[$element] = explode(\"\\r\\n\", $_POST[$element]);\n\t\t}\n\t}\n\treturn $options;\n}\n\n\n/**\n* Prints a meta refresh page\n*\n* @param string $page the URL of the target page\n*/\nfunction metaRefresh($page) {\n\tif (!headers_sent()) {\n\t\theader('Location: ' . $page);\n\t\treturn;\n\t}\n\tif (isset($_SESSION['header'])) {\n\t\techo $_SESSION['header'];\n\t}\n\telse {\n\t\techo '<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">';\n\t\techo \"<html><head>\\n\";\n\t}\n\techo \"<meta http-equiv=\\\"refresh\\\" content=\\\"0; URL=\" . $page . \"\\\">\\n\";\n\techo \"<title></title>\\n\";\n\techo \"</head>\\n\";\n\techo \"<body>\\n\";\n\t// print link if refresh does not work\n\techo \"<p>\\n\";\n\techo \"<a href=\\\"\" . $page . \"\\\">\" . _(\"Click here if you are not directed to the next page.\") . \"</a>\\n\";\n\techo \"</p>\\n\";\n\techo \"</body>\\n\";\n\techo \"</html>\\n\";\n}\n\n/**\n * Checks if the given account type is hidden.\n *\n * @param String $type account type (e.g. user)\n * @return boolean is hidden\n */\nfunction isAccountTypeHidden($type) {\n\t$typeSettings = $_SESSION['config']->get_typeSettings();\n\treturn isset($typeSettings['hidden_' . $type]) && ($typeSettings['hidden_' . $type]);\n}\n\n/**\n * Returns a list of all supported languages.\n *\n * @return LAMLanguage[] languages\n */\nfunction getLanguages() {\n\t$languages = array();\n\t// loading available languages from language.conf file\n\t$languagefile = dirname(__FILE__) . \"/../config/language\";\n\tif(is_file($languagefile)) {\n\t\t$file = fopen($languagefile, \"r\");\n\t\twhile(!feof($file)) {\n\t\t\t$line = fgets($file, 1024);\n\t\t\tif($line == \"\" || $line == \"\\n\" || $line[0] == \"#\") {\n\t\t\t\tcontinue; // ignore comment and empty lines\n\t\t\t}\n\t\t\t$value = explode(\":\", $line);\n\t\t\t$languages[] = new LAMLanguage($value[0], $value[1], $value[2]);\n\t\t}\n\t\tfclose($file);\n\t}\n\treturn $languages;\n}\n\n/**\n * Represents a supported language.\n *\n * @package configuration\n */\nclass LAMLanguage {\n\t/** language code (e.g. en_GB.utf8) */\n\tpublic $code;\n\t/** character encoding (e.g. UTF-8) */\n\tpublic $encoding;\n\t/** description for GUI */\n\tpublic $description;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param String $code language code (e.g. en_GB.utf8)\n\t * @param String $encoding character encoding (e.g. UTF-8)\n\t * @param String $description description for GUI\n\t */\n\tpublic function __construct($code, $encoding, $description) {\n\t\t$this->code = $code;\n\t\t$this->encoding = $encoding;\n\t\t$this->description = $description;\n\t}\n\n}\n\n/**\n * Manages the persistence of server profiles.\n */\nclass ServerProfilePersistenceManager {\n\n\t/**\n\t * @var ServerProfilePersistenceStrategy\n\t */\n\tprivate $strategy;\n\n\tpublic function __construct() {\n\t\t$configDb = new ConfigurationDatabase(new LAMCfgMain());\n\t\tif ($configDb->useRemoteDb()) {\n\t\t\t$this->strategy = new ServerProfilePersistenceStrategyPdo($configDb->getPdo());\n\t\t}\n\t\telse {\n\t\t\t$this->strategy = new ServerProfilePersistenceStrategyFiles();\n\t\t}\n\t}\n\n\t/**\n\t * Returns a lis of available server profiles.\n\t *\n\t * @return string[] list of server profile names\n\t * @throws LAMException error listing profiles\n\t */\n\tpublic function getProfiles() : array {\n\t\treturn $this->strategy->getProfiles();\n\t}\n\n\t/**\n\t * Loads the given server profile\n\t *\n\t * @param string $name profile name\n\t * @return LAMConfig profile\n\t * @throws LAMException error loading profile\n\t */\n\tpublic function loadProfile(string $name) : LAMConfig {\n\t\t$config = $this->strategy->loadProfile($name);\n\t\t$config->setName($name);\n\t\treturn $config;\n\t}\n\n\t/**\n\t * Saves a server profile.\n\t *\n\t * @param LAMConfig $profile profile\n\t * @param $name profile name\n\t * @throws LAMException error saving profile\n\t */\n\tpublic function saveProfile(LAMConfig $profile, $name) : void {\n\t\t$this->strategy->saveProfile($profile, $name);\n\t}\n\n\t/**\n\t * Returns an array of string with all available configuration templates (without .sample.conf)\n\t *\n\t * @return array template names\n\t */\n\tfunction getConfigTemplates() : array {\n\t\t$dir = dir(__DIR__ . \"/../config\");\n\t\t$ret = array();\n\t\t$pos = 0;\n\t\twhile ($entry = $dir->read()){\n\t\t\t$ext = substr($entry, strlen($entry)-12, 12);\n\t\t\t$name = substr($entry, 0, strlen($entry) - 12);\n\t\t\t// check if extension is right, add to profile list\n\t\t\tif ($ext == \".sample.conf\") {\n\t\t\t\t$ret[$pos] = $name;\n\t\t\t\t$pos ++;\n\t\t\t}\n\t\t}\n\t\tsort($ret);\n\t\treturn $ret;\n\t}\n\n\t/**\n\t * Creates a new server profile using a template/existing profile.\n\t *\n\t * @param string $name profile name\n\t * @param string $templateName template name\n\t * @param string $password new profile password\n\t * @throws LAMException error saving profile\n\t */\n\tpublic function createProfileFromTemplate(string $name, string $templateName, string $password) : void {\n\t\tif (!LAMConfig::isValidName($name) || !preg_match(\"/^[a-z0-9\\\\._-]+$/i\", $templateName) || in_array($name, $this->getProfiles())) {\n\t\t\tthrow new LAMException(_(\"Profile name is invalid!\"));\n\t\t}\n\t\t$copyFromTemplate = true;\n\t\t$existingTemplateNames = $this->getConfigTemplates();\n\t\tif (strpos($templateName, '.sample') !== false) {\n\t\t\t$templateNameShort = str_replace('.sample', '', $templateName);\n\t\t\tif (!in_array($templateNameShort, $existingTemplateNames)) {\n\t\t\t\tthrow new LAMException(_(\"Profile name is invalid!\"));\n\t\t\t}\n\t\t\t// built-in templates are loaded via file system\n\t\t\t$filesStrategy = new ServerProfilePersistenceStrategyFiles();\n\t\t\t$config = $filesStrategy->loadProfile($templateName);\n\t\t}\n\t\telse {\n\t\t\t$copyFromTemplate = false;\n\t\t\t$config = $this->loadProfile($templateName);\n\t\t}\n\t\t$config->set_Passwd($password);\n\t\t$this->saveProfile($config, $name);\n\t\t$accountProfilePersistenceManager = new AccountProfilePersistenceManager();\n\t\t$pdfStructurePersistenceManager = new PdfStructurePersistenceManager();\n\t\tif (!$copyFromTemplate) {\n\t\t\t$typeManager = new TypeManager($config);\n\t\t\tforeach ($typeManager->getConfiguredTypes() as $type) {\n\t\t\t\t$profilesToCopy = $accountProfilePersistenceManager->getAccountProfileNames($type->getId(), $templateName);\n\t\t\t\tforeach ($profilesToCopy as $profileToCopy) {\n\t\t\t\t\t$profile = $accountProfilePersistenceManager->loadAccountProfile($type->getId(), $profileToCopy, $templateName);\n\t\t\t\t\t$accountProfilePersistenceManager->writeAccountProfile($type->getId(), $profileToCopy, $name, $profile);\n\t\t\t\t}\n\t\t\t\t$structuresToCopy = $pdfStructurePersistenceManager->getPDFStructures($templateName, $type->getId());\n\t\t\t\tforeach ($structuresToCopy as $structureToCopy) {\n\t\t\t\t\t$structure = $pdfStructurePersistenceManager->readPdfStructure($templateName, $type->getId(), $structureToCopy);\n\t\t\t\t\t$pdfStructurePersistenceManager->savePdfStructure($name, $type->getId(), $structureToCopy, $structure);\n\t\t\t\t}\n\t\t\t\t$logosToCopy = $pdfStructurePersistenceManager->getPdfLogos($templateName);\n\t\t\t\tforeach ($logosToCopy as $logoToCopy) {\n\t\t\t\t\t$binary = $pdfStructurePersistenceManager->getPdfLogoBinary($templateName, $logoToCopy->getName());\n\t\t\t\t\t$pdfStructurePersistenceManager->savePdfLogo($name, $logoToCopy->getName(), $binary);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$accountProfilePersistenceManager->installAccountProfileTemplates($name);\n\t\t$pdfStructurePersistenceManager->installPDFTemplates($name);\n\t}\n\n\t/**\n\t * Renames an existing server profile.\n\t *\n\t * @param string $oldName old profile name\n\t * @param string $newName new profile name\n\t * @throws LAMException error during rename\n\t */\n\tpublic function renameProfile(string $oldName, string $newName) : void {\n\t\t$this->strategy->renameProfile($oldName, $newName);\n\t\t// update default profile setting if needed\n\t\t$mainConfig = new LAMCfgMain();\n\t\tif ($mainConfig->default == $oldName) {\n\t\t\t$mainConfig->default = $newName;\n\t\t\t$mainConfig->save();\n\t\t}\n\t}\n\n\t/**\n\t * Deletes a server profile.\n\t *\n\t * @param string $name profile name\n\t * @throws LAMException error deleting profile\n\t */\n\tpublic function deleteProfile(string $name) : void {\n\t\t$this->strategy->deleteProfile($name);\n\t}\n\n\t/**\n\t * Returns if the configuration is writable.\n\t *\n\t * @param string $name profile name\n\t * @return bool is writable\n\t */\n\tpublic function isWritable(string $name) : bool {\n\t\treturn $this->strategy->isWritable($name);\n\t}\n\n}\n\n/**\n * Interface to store server profiles.\n */\ninterface ServerProfilePersistenceStrategy {\n\n\t/**\n\t * Returns a lis of available server profiles.\n\t *\n\t * @return string[] list of server profile names\n\t * @throws LAMException error listing profiles\n\t */\n\tpublic function getProfiles() : array;\n\n\t/**\n\t * Loads the given server profile\n\t *\n\t * @param string $name profile name\n\t * @return LAMConfig profile\n\t * @throws LAMException error loading profile\n\t */\n\tpublic function loadProfile(string $name) : LAMConfig;\n\n\t/**\n\t * Saves a server profile.\n\t *\n\t * @param LAMConfig $profile profile\n\t * @param string $name profile name\n\t * @throws LAMException error saving profile\n\t */\n\tpublic function saveProfile(LAMConfig $profile, string $name) : void;\n\n\t/**\n\t * Renames an existing server profile.\n\t *\n\t * @param string $oldName old profile name\n\t * @param string $newName new profile name\n\t * @throws LAMException error saving profile\n\t */\n\tpublic function renameProfile(string $oldName, string $newName) : void;\n\n\t/**\n\t * Deletes a server profile.\n\t *\n\t * @param string $name profile name\n\t * @throws LAMException error deleting profile\n\t */\n\tpublic function deleteProfile(string $name) : void;\n\n\t/**\n\t * Returns if the configuration is writable.\n\t *\n\t * @param string $name profile name\n\t * @return bool is writable\n\t */\n\tpublic function isWritable(string $name) : bool;\n\n}\n\n/**\n * Uses local file system to store server profiles.\n */\nclass ServerProfilePersistenceStrategyFiles implements ServerProfilePersistenceStrategy {\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getProfiles(): array {\n\t\t$dirName = __DIR__ . \"/../config\";\n\t\t$dir = dir($dirName);\n\t\t$ret = array();\n\t\twhile ($entry = $dir->read()) {\n\t\t\t$ext = substr($entry, strlen($entry) - 5, 5);\n\t\t\t$name = substr($entry, 0, strlen($entry) - 5);\n\t\t\t// check if extension is right, add to profile list\n\t\t\tif (($ext == \".conf\") && (strpos($name, '.sample') === false) && is_readable($dirName . '/' . $entry)) {\n\t\t\t\t$ret[] = $name;\n\t\t\t}\n\t\t}\n\t\tsort($ret);\n\t\treturn $ret;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function loadProfile(string $name): LAMConfig {\n\t\t$config = new LAMConfig();\n\t\t$reflectionConfig = new ReflectionObject($config);\n\t\t$confFilePath = $this->getPath($name);\n\t\tif (!is_file($confFilePath)) {\n\t\t\tthrow new LAMException(_('Unable to read file.'));\n\t\t}\n\t\t$file = @fopen($confFilePath, \"r\");\n\t\tif (!$file) {\n\t\t\tthrow new LAMException(_('Unable to read file.'));\n\t\t}\n\t\t$moduleSettings = array();\n\t\t$typeSettings = array();\n\t\t$toolSettings = array();\n\t\t$jobSettings = array();\n\t\twhile (!feof($file)) {\n\t\t\t$line = fgets($file, 1000000);\n\t\t\t$line = trim($line);  // remove spaces at the beginning and end\n\t\t\tif (($line == \"\")||($line[0] == \"#\")) {\n\t\t\t\tcontinue; // ignore comments and empty lines\n\t\t\t}\n\t\t\t// search keywords\n\t\t\t$parts = explode(': ', $line);\n\t\t\t$keyword = $parts[0];\n\t\t\t$startIndex = strlen($keyword) + 2;\n\t\t\tif (sizeof($parts) == 1) {\n\t\t\t\t// empty global settings\n\t\t\t\ttry {\n\t\t\t\t\t$property = $reflectionConfig->getProperty($keyword);\n\t\t\t\t\t$property->setAccessible(true);\n\t\t\t\t\t$property->setValue($config, '');\n\t\t\t\t} catch (ReflectionException $e) {\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif ((sizeof($parts) > 1) && !in_array($keyword, array('modules', 'types', 'tools', 'jobs'))) {\n\t\t\t\t// global setting with value\n\t\t\t\ttry {\n\t\t\t\t\t$property = $reflectionConfig->getProperty($keyword);\n\t\t\t\t\t$property->setAccessible(true);\n\t\t\t\t\t$property->setValue($config, substr($line, $startIndex));\n\t\t\t\t} catch (ReflectionException $e) {\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$subKeyword = $parts[1];\n\t\t\t\t$startIndex = $startIndex + strlen($subKeyword) + 2;\n\t\t\t\t$option = substr($line, $startIndex);\n\t\t\t\tif (empty($option)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// module settings\n\t\t\t\tif ($keyword == 'modules') {\n\t\t\t\t\t$moduleSettings[$subKeyword] = explode(LAMConfig::LINE_SEPARATOR, $option);\n\t\t\t\t}\n\t\t\t\t// type settings\n\t\t\t\tif ($keyword == 'types') {\n\t\t\t\t\t$typeSettings[$subKeyword] = $option;\n\t\t\t\t}\n\t\t\t\t// tool settings\n\t\t\t\tif ($keyword == 'tools') {\n\t\t\t\t\t$toolSettings[$subKeyword] = $option;\n\t\t\t\t}\n\t\t\t\t// job settings\n\t\t\t\tif ($keyword == 'jobs') {\n\t\t\t\t\t$jobSettings[$subKeyword] = explode(LAMConfig::LINE_SEPARATOR, $option);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfclose($file);\n\t\t$config->set_moduleSettings($moduleSettings);\n\t\t$config->set_typeSettings($typeSettings);\n\t\t$config->setToolSettings($toolSettings);\n\t\t$config->setJobSettings($jobSettings);\n\t\t$config->removeInvalidTypes();\n\t\t$config->removeInvalidModules();\n\t\treturn $config;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function saveProfile(LAMConfig $profile, string $name): void {\n\t\t$confFile = $this->getPath($name);\n\t\tif (!file_exists($confFile)) {\n\t\t\t$newFile = fopen($confFile, 'wb');\n\t\t\tfclose($newFile);\n\t\t}\n\t\tif (is_file($confFile) && is_readable($confFile)) {\n\t\t\t$file_array = array();\n\t\t\t$file_array[] = \"\\n\" . \"ServerURL: \" . $profile->get_ServerURL() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"serverDisplayName: \" . $profile->getServerDisplayName() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"useTLS: \" . $profile->getUseTLS() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"followReferrals: \" . $profile->getFollowReferrals() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"pagedResults: \" . $profile->getPagedResults() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"referentialIntegrityOverlay: \" . $profile->getReferentialIntegrityOverlay() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"hidePasswordPromptForExpiredPasswords: \" . $profile->getHidePasswordPromptForExpiredPasswords() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"Passwd: \" . $profile->getPasswd() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"Admins: \" . $profile->get_Adminstring() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"defaultLanguage: \" . $profile->get_defaultLanguage() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"timeZone: \" . $profile->getTimeZone() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"scriptPath: \" . $profile->get_scriptPath() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"scriptServer: \" . $profile->get_scriptServers() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"scriptRights: \" . $profile->get_scriptRights() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"scriptUserName: \" . $profile->getScriptUserName() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"scriptSSHKey: \" . $profile->getScriptSSHKey() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"scriptSSHKeyPassword: \" . $profile->getScriptSSHKeyPassword() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"searchLimit: \" . $profile->get_searchLimit() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"activeTypes: \" . $profile->getActiveTypesString() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"accessLevel: \" . $profile->getAccessLevel() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"loginMethod: \" . $profile->getLoginMethod() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"loginSearchSuffix: \" . $profile->getLoginSearchSuffix() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"loginSearchFilter: \" . $profile->getLoginSearchFilter() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"loginSearchDN: \" . $profile->getLoginSearchDN() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"loginSearchPassword: \" . $profile->getLoginSearchPassword() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"httpAuthentication: \" . $profile->getHttpAuthentication() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"lamProMailFrom: \" . $profile->getLamProMailFrom() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"lamProMailReplyTo: \" . $profile->getLamProMailReplyTo() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"lamProMailSubject: \" . $profile->getLamProMailSubject() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"lamProMailIsHTML: \" . $profile->getLamProMailIsHTML() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"lamProMailAllowAlternateAddress: \" . $profile->getLamProMailAllowAlternateAddress() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"lamProMailText: \" . $profile->getLamProMailTextRaw() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"jobsBindPassword: \" . $profile->getJobsBindPassword() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"jobsBindUser: \" . $profile->getJobsBindUser() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"jobsDatabase: \" . $profile->getJobsDatabase() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"jobsDBHost: \" . $profile->getJobsDBHost() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"jobsDBPort: \" . $profile->getJobsDBPort() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"jobsDBUser: \" . $profile->getJobsDBUser() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"jobsDBPassword: \" . $profile->getJobsDBPassword() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"jobsDBName: \" . $profile->getJobsDBName() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"jobToken: \" . $profile->getJobToken() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"pwdResetAllowSpecificPassword: \" . $profile->getPwdResetAllowSpecificPassword() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"pwdResetAllowScreenPassword: \" . $profile->getPwdResetAllowScreenPassword() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"pwdResetForcePasswordChange: \" . $profile->getPwdResetForcePasswordChange() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"pwdResetDefaultPasswordOutput: \" . $profile->getPwdResetDefaultPasswordOutput() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"twoFactorAuthentication: \" . $profile->getTwoFactorAuthentication() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"twoFactorAuthenticationURL: \" . $profile->getTwoFactorAuthenticationURLRaw() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"twoFactorAuthenticationClientId: \" . $profile->getTwoFactorAuthenticationClientId() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"twoFactorAuthenticationSecretKey: \" . $profile->getTwoFactorAuthenticationSecretKey() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"twoFactorAuthenticationDomain: \" . $profile->getTwoFactorAuthenticationDomain() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"twoFactorAuthenticationInsecure: \" . $profile->getTwoFactorAuthenticationInsecure() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"twoFactorAuthenticationLabel: \" . $profile->getTwoFactorAuthenticationLabel() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"twoFactorAuthenticationOptional: \" . $profile->getTwoFactorAuthenticationOptional() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"twoFactorAuthenticationCaption: \" . $profile->getTwoFactorAuthenticationCaption() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"twoFactorAuthenticationAttribute: \" . $profile->getTwoFactorAuthenticationAttribute() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"hideDnPart: \" . $profile->getHideDnPart() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"pwdPolicyMinLength: \" . $profile->getPwdPolicyMinLength() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"pwdPolicyMinLowercase: \" . $profile->getPwdPolicyMinLowercase() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"pwdPolicyMinUppercase: \" . $profile->getPwdPolicyMinUppercase() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"pwdPolicyMinNumeric: \" . $profile->getPwdPolicyMinNumeric() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"pwdPolicyMinSymbolic: \" . $profile->getPwdPolicyMinSymbolic() . \"\\n\";\n\t\t\t// module settings\n\t\t\t$moduleSettings = $profile->get_moduleSettings();\n\t\t\tforeach ($moduleSettings as $moduleSettingKey => $moduleSettingValue) {\n\t\t\t\t$file_array[] = \"modules: \" . $moduleSettingKey . \": \" . implode(LAMConfig::LINE_SEPARATOR, $moduleSettingValue) . \"\\n\";\n\t\t\t}\n\t\t\t// type settings\n\t\t\t$typeSettings = $profile->get_typeSettings();\n\t\t\tforeach ($typeSettings as $typeSettingKey => $typeSettingValue) {\n\t\t\t\t$file_array[] = \"types: \" . $typeSettingKey . \": \" . $typeSettingValue . \"\\n\";\n\t\t\t}\n\t\t\t// tool settings\n\t\t\t$toolSettings = $profile->getToolSettings();\n\t\t\tforeach ($toolSettings as $toolSettingKey => $toolSettingValue) {\n\t\t\t\t$file_array[] = \"tools: \" . $toolSettingKey . \": \" . $toolSettingValue . \"\\n\";\n\t\t\t}\n\t\t\t// job settings\n\t\t\t$jobSettings = $profile->getJobSettings();\n\t\t\tforeach ($jobSettings as $jobSettingKey => $jobSettingValue) {\n\t\t\t\t$file_array[] = \"jobs: \" . $jobSettingKey . \": \" . implode(LAMConfig::LINE_SEPARATOR, $jobSettingValue) . \"\\n\";\n\t\t\t}\n\t\t\t$file = @fopen($confFile, \"w\");\n\t\t\tif ($file) {\n\t\t\t\tforeach ($file_array as $line) {\n\t\t\t\t\tfputs($file, $line);\n\t\t\t\t}\n\t\t\t\tfclose($file);\n\t\t\t\t@chmod($confFile, 0600);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new LAMException(_('Unable to save server profile.'), $name);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function renameProfile(string $oldName, string $newName): void {\n\t\t$existingProfileNames = $this->getProfiles();\n\t\tif (!LAMConfig::isValidName($oldName)\n\t\t\t|| !LAMConfig::isValidName($newName)\n\t\t\t|| in_array($newName, $existingProfileNames)) {\n\t\t\tthrow new LAMException(_(\"Profile name is invalid!\"));\n\t\t}\n\t\tif (rename(\"../../config/\" . $oldName . \".conf\", \"../../config/\" . $newName . \".conf\")) {\n\t\t\t// rename pdf and profiles folder\n\t\t\trename(\"../../config/profiles/\" . $oldName, \"../../config/profiles/\" . $newName);\n\t\t\trename(\"../../config/pdf/\" . $oldName, \"../../config/pdf/\" . $newName);\n\t\t\t// rename sqlite database if any\n\t\t\tif (file_exists(\"../../config/\" . $oldName . \".sqlite\")) {\n\t\t\t\trename(\"../../config/\" . $oldName . \".sqlite\", \"../../config/\" . $newName . \".sqlite\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow new LAMException(_(\"Could not rename file!\"));\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function deleteProfile(string $name): void {\n\t\tif (!LAMConfig::isValidName($name)) {\n\t\t\tthrow new LAMException(_(\"Unable to delete profile!\"));\n\t\t}\n\t\t$dir = __DIR__ . \"/../config/\";\n\t\t// delete account profiles and PDF structures\n\t\t$subDirs = array($dir . 'pdf/' . $name . '/logos', $dir . 'pdf/' . $name, $dir . 'profiles/' . $name);\n\t\tfor ($i = 0; $i < sizeof($subDirs); $i++) {\n\t\t\tif (is_dir($subDirs[$i]) && is_readable($subDirs[$i])) {\n\t\t\t\t$dirHandle = @opendir($subDirs[$i]);\n\t\t\t\twhile (false !== ($path = readdir($dirHandle))) {\n\t\t\t\t\tif (($path != '.')  && ($path != '..') && !@unlink($subDirs[$i] . '/' . $path)) {\n\t\t\t\t\t\tlogNewMessage(LOG_ERR, 'Unable to delete ' . $subDirs[$i] . '/' . $path);\n\t\t\t\t\t\tthrow new LAMException(_(\"Unable to delete profile!\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t@closedir($dirHandle);\n\t\t\t\tif (!@rmdir($subDirs[$i])) {\n\t\t\t\t\tlogNewMessage(LOG_ERR, 'Unable to delete ' . $subDirs[$i]);\n\t\t\t\t\tthrow new LAMException(_(\"Unable to delete profile!\"));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// delete config file\n\t\t$confFile = $dir . $name . \".conf\";\n\t\tif (!@unlink($confFile)) {\n\t\t\tlogNewMessage(LOG_ERR, 'Unable to delete ' . $confFile);\n\t\t\tthrow new LAMException(_(\"Unable to delete profile!\"));\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function isWritable(string $name): bool {\n\t\treturn is_writeable($this->getPath($name));\n\t}\n\n\t/**\n\t * Returns the path to the config file.\n\t *\n\t * @param string $name profile name\n\t * @return string path on filesystem\n\t */\n\tprivate function getPath(string $name) : string {\n\t\treturn __DIR__ . \"/../config/\" . $name . \".conf\";\n\t}\n\n}\n\n/**\n * Stores server profiles in a database.\n */\nclass ServerProfilePersistenceStrategyPdo implements ServerProfilePersistenceStrategy {\n\n\tconst TABLE_NAME = 'server_profiles';\n\n\t/**\n\t * @var PDO\n\t */\n\tprivate $pdo;\n\n\t/**\n\t * Constructor\n\t * \n\t * @param PDO $pdo PDO\n\t */\n\tpublic function __construct(PDO $pdo) {\n\t\t$this->pdo = $pdo;\n\t\t$this->checkSchema();\n\t}\n\n\t/**\n\t * Checks if the schema has latest version.\n\t */\n\tprivate function checkSchema() : void {\n\t\tif (!dbTableExists($this->pdo, self::TABLE_NAME)) {\n\t\t\t$this->createInitialSchema();\n\t\t}\n\t}\n\n\t/**\n\t * Creates the initial schema.\n\t */\n\tpublic function createInitialSchema() : void {\n\t\tlogNewMessage(LOG_DEBUG, 'Creating database table ' . self::TABLE_NAME);\n\t\t$sql = 'create table ' . self::TABLE_NAME . '('\n\t\t\t. 'name VARCHAR(300) NOT NULL,'\n\t\t\t. 'data TEXT NOT NULL,'\n\t\t\t. 'PRIMARY KEY(name)'\n\t\t\t. ');';\n\t\t$this->pdo->exec($sql);\n\t\t$sql = 'insert into ' . ConfigurationDatabase::TABLE_SCHEMA_VERSIONS . ' (name, version) VALUES (\"server_profiles\", 1);';\n\t\t$this->pdo->exec($sql);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getProfiles(): array {\n\t\t$statement = $this->pdo->prepare(\"SELECT name FROM \" . self::TABLE_NAME);\n\t\t$statement->execute();\n\t\t$results = $statement->fetchAll();\n\t\t$profiles = array();\n\t\tforeach ($results as $result) {\n\t\t\t$profiles[] = $result['name'];\n\t\t}\n\t\treturn $profiles;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function loadProfile(string $name): LAMConfig {\n\t\t$statement = $this->pdo->prepare(\"SELECT data FROM \" . self::TABLE_NAME . \" WHERE name = ?\");\n\t\t$statement->execute(array($name));\n\t\t$results = $statement->fetchAll();\n\t\tif (empty($results)) {\n\t\t\tlogNewMessage(LOG_ERR, 'Server profile not found: ' . $name);\n\t\t\tthrow new LAMException(_(\"Unable to load profile!\"), $name);\n\t\t}\n\t\t$data = json_decode($results[0]['data'], true);\n\t\t$config = new LAMConfig();\n\t\t$config->importData($data);\n\t\treturn $config;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function saveProfile(LAMConfig $profile, string $name): void {\n\t\t$data = json_encode($profile->exportData());\n\t\t$statement = $this->pdo->prepare(\"SELECT data FROM \" . self::TABLE_NAME . \" WHERE name = ?\");\n\t\t$statement->execute(array($name));\n\t\t$results = $statement->fetchAll();\n\t\tif (empty($results)) {\n\t\t\t$statement = $this->pdo->prepare(\"INSERT INTO \" . self::TABLE_NAME . \" (name, data) VALUES (?, ?)\");\n\t\t\t$statement->execute(array($name, $data));\n\t\t}\n\t\telse {\n\t\t\t$statement = $this->pdo->prepare(\"UPDATE \" . self::TABLE_NAME . \" SET data = ? WHERE name = ?\");\n\t\t\t$statement->execute(array($data, $name));\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function renameProfile(string $oldName, string $newName): void {\n\t\t$statement = $this->pdo->prepare(\"UPDATE \" . self::TABLE_NAME . \" SET name = ? WHERE name = ?\");\n\t\t$statement->execute(array($newName, $oldName));\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function deleteProfile(string $name): void {\n\t\t$statement = $this->pdo->prepare(\"DELETE FROM \" . self::TABLE_NAME . \" WHERE name = ?\");\n\t\t$statement->execute(array($name));\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function isWritable(string $name): bool {\n\t\treturn true;\n\t}\n}\n\n/**\n* This class manages conf files.\n*\n* @package configuration\n*/\nclass LAMConfig {\n\n\t/* access levels */\n\tconst ACCESS_ALL = 100;\n\tconst ACCESS_PASSWORD_CHANGE = 20;\n\tconst ACCESS_READ_ONLY = 0;\n\n\t/* login method: predefined list or LDAP search */\n\tconst LOGIN_LIST = 'list';\n\tconst LOGIN_SEARCH = 'search';\n\n\t/** line separator */\n\tconst LINE_SEPARATOR = '+::+';\n\n\t/** show password on screen by default */\n\tconst PWDRESET_DEFAULT_SCREEN = 1;\n\t/** send password via email by default */\n\tconst PWDRESET_DEFAULT_MAIL = 2;\n\t/** show password on screen and send via email by default */\n\tconst PWDRESET_DEFAULT_BOTH = 3;\n\n\t/** Server address (e.g. ldap://127.0.0.1:389) */\n\tprivate $ServerURL;\n\n\t/** Display name of LDAP server */\n\tprivate $serverDisplayName;\n\n\t/** enables/disables TLS encryption */\n\tprivate $useTLS;\n\n\t/** automatically follow referrals */\n\tprivate $followReferrals = 'false';\n\n\t/** use paged results */\n\tprivate $pagedResults = 'false';\n\n\t/** overlay for referential integrity is activated */\n\tprivate $referentialIntegrityOverlay = 'false';\n\n\t/** hide password prompt for expired passwords */\n\tprivate $hidePasswordPromptForExpiredPasswords = 'false';\n\n\t/** Array of string: users with admin rights */\n\tprivate $Admins;\n\n\t/** Password to edit preferences */\n\tprivate $Passwd;\n\n\t/** Default language */\n\tprivate $defaultLanguage;\n\t/** time zone */\n\tprivate $timeZone = 'Europe/London';\n\n\t/** module settings */\n\tprivate $moduleSettings = array();\n\n\t/** type settings */\n\tprivate $typeSettings = array();\n\n\t/** tool settings */\n\tprivate $toolSettings = array();\n\n\t/**\n\t* Path to external lamdaemon script on server where it is executed\n\t*\n\t* This is used for managing quota and home directories.\n\t* optional setting, may not be defined\n\t*/\n\tprivate $scriptPath;\n\n\t/**\n\t * The rights for the home directory\n\t */\n\tprivate $scriptRights = '750';\n\n\t/**\n\t* Servers where lamdaemon script is executed\n\t*\n\t* This is used for managing quota and home directories.\n\t* optional setting, may not be defined\n\t*/\n\tprivate $scriptServer;\n\n\t/**\n\t * user name for lamdaemon\n\t */\n\tprivate $scriptUserName;\n\n\t/**\n\t * File name of SSH key for lamdaemon.\n\t */\n\tprivate $scriptSSHKey;\n\n\t/**\n\t * Password for lamdaemon SSH key.\n\t */\n\tprivate $scriptSSHKeyPassword;\n\n\t/** LDAP search limit */\n\tprivate $searchLimit = 0;\n\n\t/** Active account types */\n\tprivate $activeTypes = \"\";\n\n\t/** Name of configuration file */\n\tprivate $name;\n\n\t/** access level */\n\tprivate $accessLevel = LAMconfig::ACCESS_ALL;\n\n\t/** login method */\n\tprivate $loginMethod = LAMconfig::LOGIN_LIST;\n\n\t/** search suffix for login */\n\tprivate $loginSearchSuffix = 'dc=yourdomain,dc=org';\n\n\t/** search filter for login */\n\tprivate $loginSearchFilter = 'uid=%USER%';\n\n\t/** bind user for login search */\n\tprivate $loginSearchDN = '';\n\n\t/** bind password for login search */\n\tprivate $loginSearchPassword = '';\n\n\t/** specifies if HTTP authentication should be used */\n\tprivate $httpAuthentication = 'false';\n\n\t/** email address for sender of password reset mails */\n\tprivate $lamProMailFrom = '';\n\t/** reply-to email address for password reset mails */\n\tprivate $lamProMailReplyTo = '';\n\t/** subject for password reset mails */\n\tprivate $lamProMailSubject = '';\n\t/** treat password reset mail body as HTML */\n\tprivate $lamProMailIsHTML = 'false';\n\t/** allow sending mails to an alternative address */\n\tprivate $lamProMailAllowAlternateAddress = 'true';\n\t/** mail body for password reset mails */\n\tprivate $lamProMailText = '';\n\n\t/** password reset page: allow to set a specific password */\n\tprivate $pwdResetAllowSpecificPassword = 'true';\n\t/** password reset page: allow to show password on screen */\n\tprivate $pwdResetAllowScreenPassword = 'true';\n\t/** password reset page: force password change by default */\n\tprivate $pwdResetForcePasswordChange = 'true';\n\t/** password reset page: default selection for password output\n\t * PWDRESET_DEFAULT_SCREEN, PWDRESET_DEFAULT_MAIL, PWDRESET_DEFAULT_BOTH */\n\tprivate $pwdResetDefaultPasswordOutput = LAMconfig::PWDRESET_DEFAULT_MAIL;\n\n\t/** LDAP user for jobs */\n\tprivate $jobsBindUser = null;\n\t/** LDAP password for jobs */\n\tprivate $jobsBindPassword = null;\n\t/** database type for jobs */\n\tprivate $jobsDatabase = null;\n\t/** host of job database */\n\tprivate $jobsDBHost = null;\n\t/** port of job database */\n\tprivate $jobsDBPort = null;\n\t/** user of job database */\n\tprivate $jobsDBUser = null;\n\t/** password of job database */\n\tprivate $jobsDBPassword = null;\n\t/** name of job database */\n\tprivate $jobsDBName = null;\n\t/** random job token */\n\tprivate $jobToken = null;\n\t/** job configuration */\n\tprivate $jobSettings = array();\n\n\tprivate $twoFactorAuthentication = TwoFactorProviderService::TWO_FACTOR_NONE;\n\tprivate $twoFactorAuthenticationURL = 'https://localhost';\n\tprivate $twoFactorAuthenticationClientId = null;\n\tprivate $twoFactorAuthenticationSecretKey = null;\n\tprivate $twoFactorAuthenticationDomain = null;\n\tprivate $twoFactorAuthenticationInsecure = false;\n\tprivate $twoFactorAuthenticationLabel = null;\n\tprivate $twoFactorAuthenticationOptional = false;\n\tprivate $twoFactorAuthenticationCaption = '';\n\tprivate $twoFactorAuthenticationAttribute = '';\n\n\tprivate $hideDnPart = '';\n\n\tprivate $pwdPolicyMinLength = '';\n\tprivate $pwdPolicyMinLowercase = '';\n\tprivate $pwdPolicyMinUppercase = '';\n\tprivate $pwdPolicyMinNumeric = '';\n\tprivate $pwdPolicyMinSymbolic = '';\n\n\t/** List of all settings in config file */\n\tprivate $settings = array(\"ServerURL\", \"useTLS\", \"followReferrals\", 'pagedResults', \"Passwd\", \"Admins\",\n\t\t\"defaultLanguage\", \"scriptPath\", \"scriptServer\", \"scriptRights\", 'serverDisplayName',\n\t\t\"modules\", \"activeTypes\", \"types\", \"tools\", \"accessLevel\", 'loginMethod', 'loginSearchSuffix',\n\t\t'loginSearchFilter', 'searchLimit', 'lamProMailFrom', 'lamProMailReplyTo', 'lamProMailSubject',\n\t\t'lamProMailText', 'lamProMailIsHTML', 'lamProMailAllowAlternateAddress', 'httpAuthentication', 'loginSearchDN',\n\t\t'loginSearchPassword', 'timeZone', 'jobsBindUser', 'jobsBindPassword', 'jobsDatabase', 'jobToken', 'jobs',\n\t\t'jobsDBHost', 'jobsDBPort', 'jobsDBUser', 'jobsDBPassword', 'jobsDBName', 'pwdResetAllowSpecificPassword',\n\t\t'pwdResetAllowScreenPassword', 'pwdResetForcePasswordChange', 'pwdResetDefaultPasswordOutput',\n\t\t'scriptUserName', 'scriptSSHKey', 'scriptSSHKeyPassword', 'twoFactorAuthentication', 'twoFactorAuthenticationURL',\n\t\t'twoFactorAuthenticationInsecure', 'twoFactorAuthenticationLabel', 'twoFactorAuthenticationOptional',\n\t\t'twoFactorAuthenticationCaption', 'twoFactorAuthenticationClientId', 'twoFactorAuthenticationSecretKey',\n\t\t'twoFactorAuthenticationDomain', 'twoFactorAuthenticationAttribute', 'referentialIntegrityOverlay',\n\t\t'hidePasswordPromptForExpiredPasswords', 'hideDnPart', 'pwdPolicyMinLength', 'pwdPolicyMinLowercase',\n\t\t'pwdPolicyMinUppercase', 'pwdPolicyMinNumeric', 'pwdPolicyMinSymbolic'\n\t);\n\n\t/**\n\t * Returns the server profile data.\n\t *\n\t * @return array data\n\t */\n\tpublic function exportData() {\n\t\t$data = array();\n\t\t$settingsToIgnore = array('modules', 'types', 'tools', 'jobs');\n\t\tforeach ($this->settings as $setting) {\n\t\t\tif (in_array($setting, $settingsToIgnore)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$data[$setting] = $this->$setting;\n\t\t}\n\t\t$data['typeSettings'] = $this->typeSettings;\n\t\t$data['moduleSettings'] = $this->moduleSettings;\n\t\t$data['toolSettings'] = $this->toolSettings;\n\t\t$data['jobSettings'] = $this->jobSettings;\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Imports server profile data.\n\t *\n\t * @param array $data config data\n\t * @throws LAMException import error\n\t */\n\tpublic function importData($data) {\n\t\t$settingsToIgnore = array('modules', 'types', 'tools', 'jobs', 'typeSettings',\n\t\t\t'moduleSettings', 'toolSettings', 'jobSettings');\n\t\tforeach ($data as $dataKey => $dataValue) {\n\t\t\tif (in_array($dataKey, $settingsToIgnore)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!in_array($dataKey, $this->settings)) {\n\t\t\t\tlogNewMessage(LOG_WARNING, 'Ignored setting during import: ' . $dataKey);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!(($dataValue === null) || is_array($dataValue) || is_string($dataValue) || is_int($dataValue) || is_bool($dataValue))) {\n\t\t\t\tthrow new LAMException('Invalid import data type for ' . htmlspecialchars($dataKey) . ': ' . gettype($dataValue));\n\t\t\t}\n\t\t\t$this->$dataKey = $dataValue;\n\t\t}\n\t\t$typeSettingsData = !empty($data['typeSettings']) && is_array($data['typeSettings']) ? $data['typeSettings'] : array();\n\t\t$this->typeSettings = $typeSettingsData;\n\t\t$moduleSettingsData = !empty($data['moduleSettings']) && is_array($data['moduleSettings']) ? $data['moduleSettings'] : array();\n\t\t$this->moduleSettings = $moduleSettingsData;\n\t\t$toolSettingsData = !empty($data['toolSettings']) && is_array($data['toolSettings']) ? $data['toolSettings'] : array();\n\t\t$this->toolSettings = $toolSettingsData;\n\t\t$jobSettingsData = !empty($data['jobSettings']) && is_array($data['jobSettings']) ? $data['jobSettings'] : array();\n\t\t$this->jobSettings = $jobSettingsData;\n\t}\n\n\t/**\n\t * Removes any non-existing types from the configuration.\n\t */\n\tpublic function removeInvalidTypes() {\n\t\t$allTypes = LAM\\TYPES\\getTypes();\n\t\t$activeTypes = $this->get_ActiveTypes();\n\t\tfor ($i = 0; $i < sizeof($activeTypes); $i++) {\n\t\t\tif (!in_array(\\LAM\\TYPES\\getScopeFromTypeId($activeTypes[$i]), $allTypes)) {\n\t\t\t\tunset($activeTypes[$i]);\n\t\t\t}\n\t\t}\n\t\t$activeTypes = array_values($activeTypes);\n\t\t$this->set_ActiveTypes($activeTypes);\n\t}\n\n\t/**\n\t * Removes any non-existing modules from the configuration.\n\t */\n\tpublic function removeInvalidModules() {\n\t\t$types = $this->get_ActiveTypes();\n\t\t$availableByScope = array();\n\t\tforeach ($types as $type) {\n\t\t\t$scope = \\LAM\\TYPES\\getScopeFromTypeId($type);\n\t\t\t$moduleVar = \"modules_\" . $type;\n\t\t\tif (isset($this->typeSettings[$moduleVar])){\n\t\t\t\t$modules = explode(\",\", $this->typeSettings[$moduleVar]);\n\t\t\t\tif (empty($availableByScope[$scope])) {\n\t\t\t\t\t$availableByScope[$scope] = getAvailableModules($scope);\n\t\t\t\t}\n\t\t\t\t$available = $availableByScope[$scope];\n\t\t\t\t// only return available modules\n\t\t\t\t$ret = array();\n\t\t\t\tfor ($i = 0; $i < sizeof($modules); $i++) {\n\t\t\t\t\tif (in_array($modules[$i], $available)) {\n\t\t\t\t\t\t$ret[] = $modules[$i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$this->typeSettings[$moduleVar] = implode(\",\", $ret);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the given server profile name is valid.\n\t *\n\t * @param string $name server profile name\n\t * @return bool is valid\n\t */\n\tpublic static function isValidName(string $name) : bool {\n\t\treturn preg_match(\"/^[a-z0-9_-]+$/i\", $name);\n\t}\n\n\t/**\n\t * Returns the name of the config file\n\t *\n\t * @return string name\n\t */\n\tpublic function getName() : string {\n\t\treturn $this->name;\n\t}\n\n\t/**\n\t * Sets the name of the config file\n\t *\n\t * @param string $name name\n\t */\n\tpublic function setName(string $name) : void {\n\t\t$this->name = $name;\n\t}\n\n\t// functions to read/write preferences\n\n\t/**\n\t* Returns the server address as string\n\t*\n\t* @return string server address\n\t*/\n\tpublic function get_ServerURL() {\n\t\treturn $this->ServerURL;\n\t}\n\n\t/**\n\t* Sets the server address\n\t*\n\t* @param string $value new server address\n\t* @return boolean true if $value has correct format\n\t*/\n\tpublic function set_ServerURL($value) {\n\t\tif (is_string($value)) {\n\t\t\t$this->ServerURL = $value;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t* Returns the server display name. Defaults to server URL if empty display name.\n\t*\n\t* @return string server display name\n\t*/\n\tpublic function getServerDisplayNameGUI() {\n\t\tif (empty($this->serverDisplayName)) {\n\t\t\treturn $this->ServerURL;\n\t\t}\n\t\treturn $this->serverDisplayName;\n\t}\n\n\t/**\n\t* Returns the server display name.\n\t*\n\t* @return string server display name\n\t*/\n\tpublic function getServerDisplayName() {\n\t\treturn $this->serverDisplayName;\n\t}\n\n\t/**\n\t* Sets the server display name\n\t*\n\t* @param string $value new server display name\n\t* @return boolean true if $value has correct format\n\t*/\n\tpublic function setServerDisplayName($value) {\n\t\tif (is_string($value)) {\n\t\t\t$this->serverDisplayName = $value;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns if TLS is activated.\n\t *\n\t * @return String yes or no\n\t */\n\tpublic function getUseTLS() {\n\t\treturn $this->useTLS;\n\t}\n\n\t/**\n\t * Sets if TLS is activated.\n\t *\n\t * @param String $useTLS yes or no\n\t * @return boolean true if $useTLS has correct format\n\t */\n\tpublic function setUseTLS($useTLS) {\n\t\tif (($useTLS == \"yes\") || ($useTLS == \"no\")) {\n\t\t\t$this->useTLS = $useTLS;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns if referrals should be followed.\n\t *\n\t * @return String true or false\n\t */\n\tpublic function getFollowReferrals() {\n\t\treturn $this->followReferrals;\n\t}\n\n\t/**\n\t * Sets if referrals should be followed.\n\t *\n\t * @param String $followReferrals true or false\n\t */\n\tpublic function setFollowReferrals($followReferrals) {\n\t\t$this->followReferrals = $followReferrals;\n\t}\n\n\t/**\n\t * Returns if paged results should be used.\n\t *\n\t * @return String true or false\n\t */\n\tpublic function getPagedResults() {\n\t\treturn $this->pagedResults;\n\t}\n\n\t/**\n\t * Sets if paged results should be used.\n\t *\n\t * @param String $pagedResults true or false\n\t */\n\tpublic function setPagedResults($pagedResults) {\n\t\t$this->pagedResults = $pagedResults;\n\t}\n\n\t/**\n\t * Returns if referential integrity overlay is in place.\n\t *\n\t * @return String true or false\n\t */\n\tpublic function getReferentialIntegrityOverlay() {\n\t\treturn $this->referentialIntegrityOverlay;\n\t}\n\n\t/**\n\t * Sets if referential integrity overlay is in place.\n\t *\n\t * @param String $referentialIntegrityOverlay true or false\n\t */\n\tpublic function setReferentialIntegrityOverlay($referentialIntegrityOverlay) {\n\t\t$this->referentialIntegrityOverlay = $referentialIntegrityOverlay;\n\t}\n\n\t/**\n\t * Returns if referential integrity overlay is in place.\n\t *\n\t * @return bool overlay in place\n\t */\n\tpublic function isReferentialIntegrityOverlayActive() {\n\t\treturn $this->referentialIntegrityOverlay === 'true';\n\t}\n\n\t/**\n\t * Hide password prompt for expired passwords.\n\t *\n\t * @return String true or false\n\t */\n\tpublic function getHidePasswordPromptForExpiredPasswords() {\n\t\treturn $this->hidePasswordPromptForExpiredPasswords;\n\t}\n\n\t/**\n\t * Sets if password prompt for expired passwords is hidden.\n\t *\n\t * @param String $hidePasswordPromptForExpiredPasswords true or false\n\t */\n\tpublic function setHidePasswordPromptForExpiredPasswords($hidePasswordPromptForExpiredPasswords) {\n\t\t$this->hidePasswordPromptForExpiredPasswords = $hidePasswordPromptForExpiredPasswords;\n\t}\n\n\t/**\n\t * Hide password prompt for expired passwords.\n\t *\n\t * @return bool is hidden\n\t */\n\tpublic function isHidePasswordPromptForExpiredPasswords() {\n\t\treturn $this->hidePasswordPromptForExpiredPasswords === 'true';\n\t}\n\n\t/**\n\t* Returns an array of string with all admin names\n\t*\n\t* @return array the admin names\n\t*/\n\tpublic function get_Admins() {\n\t\treturn explode(\";\", $this->Admins);\n\t}\n\n\t/**\n\t* Returns all admin users separated by semicolons\n\t*\n\t* @return string the admin string\n\t*/\n\tpublic function get_Adminstring() {\n\t\treturn $this->Admins;\n\t}\n\n\t/**\n\t* Sets the admin string\n\t*\n\t* @param string $value new admin string that contains all admin users separated by semicolons\n\t* @return boolean true if $value has correct format\n\t*/\n\tpublic function set_Adminstring($value) {\n\t\tif (is_string($value) &&\n\t\t\tpreg_match(\"/^[^;]+(;[^;]+)*$/\", $value)) {\n\t\t\t$this->Admins = $value;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Checks if the given password matches.\n\t *\n\t * @param String $password\n\t * @return boolean true, if matches\n\t */\n\tpublic function check_Passwd($password) {\n\t\tif (strpos($this->Passwd, \"{SSHA}\") === 0) {\n\t\t\t$value = substr($this->Passwd, strlen(\"{SSHA}\"));\n\t\t\t$parts = explode(\" \", $value);\n\t\t\t$salt = base64_decode($parts[1]);\n\t\t\t$hash = \"{SSHA}\" . base64_encode(hex2bin(sha1($password . $salt))) . \" \" . base64_encode($salt);\n\t\t\treturn ($hash === $this->Passwd);\n\t\t}\n\t\telseif (strpos($this->Passwd, \"{CRYPT-SHA512}\") === 0) {\n\t\t\t$value = substr($this->Passwd, strlen(\"{CRYPT-SHA512}\"));\n\t\t\t$parts = explode(\" \", $value);\n\t\t\t$salt = base64_decode($parts[1]);\n\t\t\treturn ($this->hashPassword($password, $salt) === $this->Passwd);\n\t\t}\n\t\telse {\n\t\t\t// old nonhashed password\n\t\t\treturn ($password === $this->Passwd);\n\t\t}\n\t}\n\n\t/**\n\t* Sets the preferences wizard password\n\t*\n\t* @param string $value new password\n\t* @return boolean true if $value has correct format\n\t*/\n\tpublic function set_Passwd($value) {\n\t\tif (is_string($value)) {\n\t\t\t$this->Passwd = $this->hashPassword($value, generateSalt(16));\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the password hash.\n\t *\n\t * @return string password hash\n\t */\n\tpublic function getPasswd() {\n\t\treturn $this->Passwd;\n\t}\n\n\t/**\n\t * Returns the hashed password.\n\t *\n\t * @param String $password password\n\t * @param String $salt salt\n\t * @return String hash value\n\t */\n\tprivate function hashPassword($password, $salt) {\n\t\treturn \"{CRYPT-SHA512}\" . crypt($password, '$6$' . $salt) . \" \" . base64_encode($salt);\n\t}\n\n\t/**\n\t* Returns the LDAP suffix for the given account type\n\t*\n\t* @param string $typeId account type\n\t* @return string the LDAP suffix\n\t*/\n\tpublic function get_Suffix($typeId) {\n\t\treturn $this->typeSettings['suffix_' . $typeId];\n\t}\n\n\t/**\n\t* Sets the LDAP suffix where accounts are saved\n\t*\n\t* @param string $scope account type\n\t* @param string $value new LDAP suffix\n\t* @return boolean true if $value has correct format\n\t*/\n\tpublic function set_Suffix($scope, $value) {\n\t\tif (!$value) {\n\t\t\t$value = \"\";\n\t\t}\n\t\telseif (!is_string($value)) {\n\t\t\treturn false;\n\t\t}\n\t\t$this->typeSettings['suffix_' . $scope] = $value;\n\t\treturn true;\n\t}\n\n\t/**\n\t* Returns the list of attributes to show in user list\n\t*\n\t* @param string $scope account type\n\t* @return string the attribute list\n\t*/\n\tpublic function get_listAttributes($scope) {\n\t\treturn $this->typeSettings['attr_' . $scope];\n\t}\n\n\t/**\n\t* Sets the list of attributes to show in user list\n\t*\n\t* @param string $value new attribute string\n\t* @param string $scope account type\n\t* @return boolean true if $value has correct format\n\t*/\n\tpublic function set_listAttributes($value, $scope) {\n\t\tif (is_string($value) && preg_match(\"/^((#[^:;]+)|([^:;]*:[^:;]+))(;((#[^:;]+)|([^:;]*:[^:;]+)))*$/\", $value)) {\n\t\t\t$this->typeSettings['attr_' . $scope] = $value;\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t* Returns the default language string\n\t*\n\t* @return string default language\n\t*/\n\tpublic function get_defaultLanguage() {\n\t\treturn $this->defaultLanguage;\n\t}\n\n\t/**\n\t* Sets the default language string\n\t*\n\t* @param string $value new default language\n\t* @return boolean true if $value has correct format\n\t*/\n\tpublic function set_defaultLanguage($value) {\n\t\tif (is_string($value)) {\n\t\t\t$this->defaultLanguage = $value;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t* Returns the time zone name.\n\t*\n\t* @return string time zone\n\t*/\n\tpublic function getTimeZone() {\n\t\treturn ($this->timeZone == null) ? 'Europe/London' : $this->timeZone;\n\t}\n\n\t/**\n\t* Sets the time zone name.\n\t*\n\t* @param string $value new time zone\n\t* @return boolean true if $value has correct format\n\t*/\n\tpublic function setTimeZone($value) {\n\t\tif (is_string($value)) {\n\t\t\t$this->timeZone = $value;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t* Returns the path to the external script\n\t*\n\t* @return string script path\n\t*/\n\tpublic function get_scriptPath() {\n\t\treturn $this->scriptPath;\n\t}\n\n\t/**\n\t* Sets the path to the external script\n\t*\n\t* @param string $value new script path\n\t* @return boolean true if $value has correct format\n\t*/\n\tpublic function set_scriptPath($value) {\n\t\tif (!$value) {\n\t\t\t$this->scriptPath = \"\"; // optional parameter\n\t\t}\n\t\telseif (is_string($value) && preg_match(\"/^\\\\/([a-z0-9_-])+(\\\\/([a-z0-9_\\\\.-])+)+$/i\", $value)) {\n\t\t\t$this->scriptPath = $value;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t* Returns the servers of the external script as a Array\n\t*\n\t* @return string script servers\n\t*/\n\tpublic function get_scriptServers() {\n\t    return $this->scriptServer;\n\t}\n\n\t/**\n\t * Returns the list of configureed servers.\n\t *\n\t * @return RemoteServerConfiguration[] servers\n\t */\n\tpublic function getConfiguredScriptServers() {\n\t\treturn LAMConfig::parseConfiguredScriptServers($this->scriptServer, $this->get_scriptPath(),\n\t\t\t$this->getScriptUserName(), $this->getScriptSSHKey(), $this->getScriptSSHKeyPassword());\n\t}\n\n\t/**\n\t * Parses the configured server config.\n\t *\n\t * @param string $value configured value\n\t * @param string $scriptPath script path\n\t * @param string $userName user name\n\t * @param string $sshKey SSH key path\n\t * @param string $sshKeyPassword SSH key password\n\t * @return RemoteServerConfiguration[] configurations\n\t */\n\tpublic static function parseConfiguredScriptServers($value, $scriptPath, $userName, $sshKey, $sshKeyPassword) : array {\n\t\t$servers = array();\n\t\tif (empty($value)) {\n\t\t\treturn $servers;\n\t\t}\n\t\t$serverChunks = explode(';', $value);\n\t\tforeach ($serverChunks as $serverChunk) {\n\t\t\tif (empty($serverChunk)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$serverSettings = explode(':', $serverChunk);\n\t\t\t$serverName = $serverSettings[0];\n\t\t\t$serverLabel = isset($serverSettings[1]) ? $serverSettings[1] : null;\n\t\t\t$serverHomedirPrefix = isset($serverSettings[2]) ? $serverSettings[2] : null;\n\t\t\t$servers[] = new RemoteServerConfiguration($serverName, $serverLabel, $serverHomedirPrefix, $scriptPath, $userName, $sshKey, $sshKeyPassword);\n\t\t}\n\t\treturn $servers;\n\t}\n\n\t/**\n\t * Returns the script server object for the given name.\n\t *\n\t * @param string $serverName server name\n\t * @return RemoteServerConfiguration server\n\t */\n\tpublic function getScriptServerByName($serverName) {\n\t\t$serverList = $this->getConfiguredScriptServers();\n\t\tforeach ($serverList as $server) {\n\t\t\tif ($serverName === $server->getServer()) {\n\t\t\t\treturn $server;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t* Sets the servers of the external script\n\t*\n\t* @param string $value new script servers\n\t* @return boolean true if $value has correct format\n\t*/\n\tpublic function set_scriptServers($value) {\n\t\t$parsedValue = LAMConfig::parseScriptServerValue($value);\n\t\tif ($parsedValue === false) {\n\t\t\treturn false;\n\t\t}\n\t\t$this->scriptServer = $parsedValue;\n\t\treturn true;\n\t}\n\n\t/**\n\t * Parses the script server value from input field.\n\t *\n\t * @param $value input field value\n\t * @return string|false value to store in configuration\n\t */\n\tpublic static function parseScriptServerValue($value) {\n\t\tif (!$value) {\n\t\t\treturn \"\"; // optional parameter\n\t\t}\n\t\t// Explode the value to an array\n\t\t$array_string = explode(\";\", $value);\n\t\tif (count($array_string) > 0) {\n\t\t\t// Check all IPs in the exploded Array\n\t\t\t$valid_ips = array();\n\t\t\tforeach($array_string as $arr_value) {\n\t\t\t\t// Explode name and IP, if a name exists\n\t\t\t\tif (preg_match(\"/:/\", $arr_value)) {\n\t\t\t\t\t$arr_value_explode = explode(\":\", $arr_value);\n\t\t\t\t\t$servername = $arr_value_explode[0];\n\t\t\t\t\t$label = $arr_value_explode[1];\n\t\t\t\t\t$homedirPrefix = isset($arr_value_explode[2]) ? $arr_value_explode[2] : '';\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$servername = $arr_value;\n\t\t\t\t\t$label = '';\n\t\t\t\t\t$homedirPrefix = '';\n\t\t\t\t}\n\t\t\t\tif (isset($servername) && is_string($servername) && preg_match(\"/^[a-z0-9-]+(\\\\.[a-z0-9-]+)*(,[0-9]+)?$/i\", $servername)) {\n\t\t\t\t\t$serverData = array($servername);\n\t\t\t\t\tif (!empty($label)) {\n\t\t\t\t\t\t$serverData[] = $label;\n\t\t\t\t\t}\n\t\t\t\t\tif (!empty($homedirPrefix)) {\n\t\t\t\t\t\t$serverData[] = $homedirPrefix;\n\t\t\t\t\t}\n\t\t\t\t\t$serverChunk = implode(':', $serverData);\n\t\t\t\t\t$valid_ips[] = $serverChunk;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// wrong format\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check that the array is not empty\n\t\t\tif (!empty($array_string)) {\n\t\t\t\treturn implode(\";\", $valid_ips);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// The array is empty, there was no valid IP\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the chmod value for new home directories.\n\t *\n\t * @return string rights\n\t */\n\tpublic function get_scriptRights() {\n\t\tif (!isset($this->scriptRights)) {\n\t\t\treturn '755';\n\t\t}\n\t\treturn $this->scriptRights;\n\t}\n\n\t/**\n\t* Sets the rights for the home directory.\n\t*\n\t* @param string $chmod the rights\n\t* @return boolean true if values has correct format\n\t*/\n\tpublic function set_scriptRights($chmod) {\n\t\t// check if the chmod is correct:\n\t\tif ($chmod > 0 && $chmod <=777) {\n\t\t    $this->scriptRights=$chmod;\n\t\t    return true;\n\t\t}\n\t\telse {\n\t\t    return false;\n\t\t}\n\t}\n\n\t/**\n\t* Returns the path to lamdamon SSH key.\n\t*\n\t* @return string key path\n\t*/\n\tpublic function getScriptSSHKey() {\n\t\treturn $this->scriptSSHKey;\n\t}\n\n\t/**\n\t* Sets the path to lamdamon SSH key.\n\t*\n\t* @param string $value key path\n\t*/\n\tpublic function setScriptSSHKey($value) {\n\t\t$this->scriptSSHKey = $value;\n\t}\n\n\t/**\n\t* Returns the password for the lamdamon SSH key.\n\t*\n\t* @return string password\n\t*/\n\tpublic function getScriptSSHKeyPassword() {\n\t\treturn deobfuscateText($this->scriptSSHKeyPassword);\n\t}\n\n\t/**\n\t* Sets the password for the lamdamon SSH key.\n\t*\n\t* @param string $value password\n\t*/\n\tpublic function setScriptSSHKeyPassword($value) {\n\t\t$this->scriptSSHKeyPassword = obfuscateText($value);\n\t}\n\n\t/**\n\t* Returns the lamdaemon user name.\n\t*\n\t* @return string user name\n\t*/\n\tpublic function getScriptUserName() {\n\t\treturn $this->scriptUserName;\n\t}\n\n\t/**\n\t* Sets the lamdaemon user name.\n\t*\n\t* @param string $value user name\n\t*/\n\tpublic function setScriptUserName($value) {\n\t\t$this->scriptUserName = $value;\n\t}\n\n\t/**\n\t* Returns the LDAP search limit.\n\t*\n\t* @return integer search limit\n\t*/\n\tpublic function get_searchLimit() {\n\t\treturn $this->searchLimit;\n\t}\n\n\t/**\n\t* Sets the LDAP search limit.\n\t*\n\t* @param integer $value new search limit\n\t* @return boolean true if $value has correct format\n\t*/\n\tpublic function set_searchLimit($value) {\n\t\tif (is_numeric($value) && ($value > -1)) {\n\t\t\t$this->searchLimit = $value;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t* Returns an array of all selected account modules\n\t*\n\t* @param string $scope account type\n\t* @return array user modules\n\t*/\n\tpublic function get_AccountModules($scope) {\n\t\tif (isset($this->typeSettings[\"modules_\" . $scope])) {\n\t\t\t$modulesTmp = explode(\",\", $this->typeSettings[\"modules_\" . $scope]);\n\t\t\t$modules = array();\n\t\t\tforeach ($modulesTmp as $mod) {\n\t\t\t\tif (trim($mod) != '') {\n\t\t\t\t\t$modules[] = $mod;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $modules;\n\t\t}\n\t\telse {\n\t\t\treturn array();\n\t\t}\n\t}\n\n\t/**\n\t* Sets the selected account modules\n\t*\n\t* @param array $modules array with module names (not aliases!)\n\t* @param string $scope account type\n\t* @return boolean true if $modules has correct format\n\t*/\n\tpublic function set_AccountModules($modules, $scope) {\n\t\tif (!is_array($modules)) {\n\t\t\treturn false;\n\t\t}\n\t\t// check module names\n\t\t$available = getAvailableModules($scope);\n\t\tfor ($i = 0; $i < sizeof($modules); $i++) {\n\t\t\tif (! in_array($modules[$i], $available)) return false;\n\t\t}\n\t\t// check depends/conflicts\n\t\tif (check_module_conflicts($modules, getModulesDependencies($scope))) {\n\t\t\treturn false;\n\t\t}\n\t\tif (check_module_depends($modules, getModulesDependencies($scope))) {\n\t\t\treturn false;\n\t\t}\n\t\t$this->typeSettings[\"modules_\" . $scope] = implode(\",\", $modules);\n\t\treturn true;\n\t}\n\n\t/**\n\t* Sets the settings for the account modules.\n\t*\n\t* @param array $settings list of module setting array(name => value)\n\t* @return boolean true if $settings has correct format\n\t*/\n\tpublic function set_moduleSettings($settings) {\n\t\tif (!is_array($settings)) {\n\t\t\treturn false;\n\t\t}\n\t\t$this->moduleSettings = $settings;\n\t\treturn true;\n\t}\n\n\t/**\n\t* Returns a list of saved module settings\n\t*\n\t* @return array list of settings: array(name => value)\n\t*/\n\tpublic function get_moduleSettings() {\n\t\treturn $this->moduleSettings;\n\t}\n\n\t/**\n\t* Returns a list of active account types.\n\t*\n\t* @return string[] list of types\n\t*/\n\tpublic function get_ActiveTypes() {\n\t\tif (($this->activeTypes == '') || !isset($this->activeTypes)) {\n\t\t\treturn array();\n\t\t}\n\t\telse {\n\t\t\treturn explode(\",\", $this->activeTypes);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a list of active account types as string.\n\t *\n\t * @return string list of types\n\t */\n\tpublic function getActiveTypesString() {\n\t\treturn $this->activeTypes;\n\t}\n\n\t/**\n\t* Sets the list of active types.\n\t*\n\t* @param string[] list of types\n\t*/\n\tpublic function set_ActiveTypes($types) {\n\t\t$this->activeTypes = implode(\",\", $types);\n\t}\n\n\t/**\n\t* Sets the settings for the account types.\n\t*\n\t* @param array $settings list of type setting array(name => value)\n\t* @return boolean true if $settings has correct format\n\t*/\n\tpublic function set_typeSettings($settings) {\n\t\tif (!is_array($settings)) {\n\t\t\treturn false;\n\t\t}\n\t\t$this->typeSettings = $settings;\n\t\treturn true;\n\t}\n\n\t/**\n\t* Returns a list of saved type settings\n\t*\n\t* @return array list of settings: array(name => value)\n\t*/\n\tpublic function get_typeSettings() {\n\t\treturn $this->typeSettings;\n\t}\n\n\t/**\n\t * Returns the tool settings.\n\t *\n\t * @return array $toolSettings tool settings\n\t */\n\tpublic function getToolSettings() {\n\t\treturn $this->toolSettings;\n\t}\n\n\t/**\n\t * Sets the tool settings.\n\t *\n\t * @param array $toolSettings tool settings\n\t * @return boolean true if ok\n\t */\n\tpublic function setToolSettings($toolSettings) {\n\t\tif (!is_array($toolSettings)) {\n\t\t\treturn false;\n\t\t}\n\t\t$this->toolSettings = $toolSettings;\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks if the given tool is activated.\n\t *\n\t * @param string $toolName tool name\n\t * @return bool is active\n\t */\n\tpublic function isToolActive(string $toolName): bool {\n\t\treturn !isset($this->toolSettings['tool_hide_' . $toolName]) || ($this->toolSettings['tool_hide_' . $toolName] !== 'true');\n\t}\n\n\t/**\n\t * Returns the access level for this profile.\n\t *\n\t * @return int level\n\t */\n\tpublic function getAccessLevel() {\n\t\treturn $this->accessLevel;\n\t}\n\n\t/**\n\t * Sets the access level for this profile.\n\t *\n\t * @param int $level level\n\t */\n\tpublic function setAccessLevel($level) {\n\t\t$this->accessLevel = $level;\n\t}\n\n\t/**\n\t * Returns the login method.\n\t *\n\t * @return String login method\n\t * @see LAMconfig::LOGIN_LIST\n\t * @see LAMconfig::LOGIN_SEARCH\n\t */\n\tpublic function getLoginMethod() {\n\t\treturn $this->loginMethod;\n\t}\n\n\t/**\n\t * Sets the login method.\n\t *\n\t * @param String $loginMethod\n\t */\n\tpublic function setLoginMethod($loginMethod) {\n\t\t$this->loginMethod = $loginMethod;\n\t}\n\n\t/**\n\t * Returns the login search filter.\n\t *\n\t * @return String search filter\n\t */\n\tpublic function getLoginSearchFilter() {\n\t\treturn $this->loginSearchFilter;\n\t}\n\n\t/**\n\t * Sets the login search filter.\n\t *\n\t * @param String $loginSearchFilter search filter\n\t */\n\tpublic function setLoginSearchFilter($loginSearchFilter) {\n\t\t$this->loginSearchFilter = $loginSearchFilter;\n\t}\n\n\t/**\n\t * Returns the login search suffix.\n\t *\n\t * @return String suffix\n\t */\n\tpublic function getLoginSearchSuffix() {\n\t\treturn $this->loginSearchSuffix;\n\t}\n\n\t/**\n\t * Sets the login search suffix.\n\t *\n\t * @param String $loginSearchSuffix suffix\n\t */\n\tpublic function setLoginSearchSuffix($loginSearchSuffix) {\n\t\t$this->loginSearchSuffix = $loginSearchSuffix;\n\t}\n\n\t/**\n\t * Sets the DN for the login search bind user.\n\t *\n\t * @param String $loginSearchDN DN\n\t * @return boolean true if DN is valid\n\t */\n\tpublic function setLoginSearchDN($loginSearchDN) {\n\t\t$this->loginSearchDN = $loginSearchDN;\n\t\tif (($loginSearchDN == '') || get_preg($loginSearchDN, 'dn')) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns the DN for the login search bind user.\n\t *\n\t * @return String DN\n\t */\n\tpublic function getLoginSearchDN() {\n\t\treturn $this->loginSearchDN;\n\t}\n\n\t/**\n\t * Sets the password for the login search bind user.\n\t *\n\t * @param String $loginSearchPassword password\n\t */\n\tpublic function setLoginSearchPassword($loginSearchPassword) {\n\t\t$this->loginSearchPassword = obfuscateText($loginSearchPassword);\n\t}\n\n\t/**\n\t * Returns the password for the login search bind user.\n\t *\n\t * @return String password\n\t */\n\tpublic function getLoginSearchPassword() {\n\t\treturn deobfuscateText($this->loginSearchPassword);\n\t}\n\n\t/**\n\t * Returns if HTTP authentication should be used.\n\t *\n\t * @return String $httpAuthentication use HTTP authentication ('true' or 'false')\n\t */\n\tpublic function getHttpAuthentication() {\n\t\treturn $this->httpAuthentication;\n\t}\n\n\t/**\n\t * Specifies if HTTP authentication should be used.\n\t *\n\t * @param String $httpAuthentication use HTTP authentication ('true' or 'false')\n\t */\n\tpublic function setHttpAuthentication($httpAuthentication) {\n\t\t$this->httpAuthentication = $httpAuthentication;\n\t}\n\n\t/**\n\t * Returns the sender address for password reset mails.\n\t *\n\t * @return String mail address\n\t */\n\tpublic function getLamProMailFrom() {\n\t\treturn $this->lamProMailFrom;\n\t}\n\n\t/**\n\t * Sets the sender address for password reset mails.\n\t *\n\t * @param String $lamProMailFrom mail address\n\t * @return boolean true if address is valid\n\t */\n\tpublic function setLamProMailFrom($lamProMailFrom) {\n\t\t$this->lamProMailFrom = $lamProMailFrom;\n\t\tif (($lamProMailFrom != '') && !get_preg($lamProMailFrom, 'email') && !get_preg($lamProMailFrom, 'emailWithName')) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns the reply-to address for password reset mails.\n\t *\n\t * @return String mail address\n\t */\n\tpublic function getLamProMailReplyTo() {\n\t\treturn $this->lamProMailReplyTo;\n\t}\n\n\t/**\n\t * Sets the reply-to address for password reset mails.\n\t *\n\t * @param String $lamProMailReplyTo mail address\n\t * @return boolean true if address is valid\n\t */\n\tpublic function setLamProMailReplyTo($lamProMailReplyTo) {\n\t\t$this->lamProMailReplyTo = $lamProMailReplyTo;\n\t\tif (($lamProMailReplyTo != '') && !get_preg($lamProMailReplyTo, 'email') && !get_preg($lamProMailReplyTo, 'emailWithName')) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns the subject for password reset mails.\n\t *\n\t * @return String subject\n\t */\n\tpublic function getLamProMailSubject() {\n\t\treturn $this->lamProMailSubject;\n\t}\n\n\t/**\n\t * Sets the subject for password reset mails.\n\t *\n\t * @param String $lamProMailSubject subject\n\t */\n\tpublic function setLamProMailSubject($lamProMailSubject) {\n\t\t$this->lamProMailSubject = $lamProMailSubject;\n\t}\n\n\t/**\n\t * Returns if the password reset mail content should be treated as HTML.\n\t *\n\t * @return boolean HTML or text\n\t */\n\tpublic function getLamProMailIsHTML() {\n\t\treturn $this->lamProMailIsHTML;\n\t}\n\n\t/**\n\t * Sets if the password reset mail content should be treated as HTML.\n\t *\n\t * @param boolean $lamProMailIsHTML true if HTML\n\t */\n\tpublic function setLamProMailIsHTML($lamProMailIsHTML) {\n\t\t$this->lamProMailIsHTML = $lamProMailIsHTML;\n\t}\n\n\t/**\n\t * Returns if sending to an alternate address is allowed.\n\t *\n\t * @return boolean alternate address allowed\n\t */\n\tpublic function getLamProMailAllowAlternateAddress() {\n\t\treturn $this->lamProMailAllowAlternateAddress;\n\t}\n\n\t/**\n\t * Sets if sending to an alternate address is allowed.\n\t *\n\t * @param boolean $lamProMailAllowAlternateAddress alternate address allowed\n\t */\n\tpublic function setLamProMailAllowAlternateAddress($lamProMailAllowAlternateAddress) {\n\t\t$this->lamProMailAllowAlternateAddress = $lamProMailAllowAlternateAddress;\n\t}\n\n\t/**\n\t * Returns the mail body for password reset mails.\n\t *\n\t * @return String body\n\t */\n\tpublic function getLamProMailText() {\n\t\treturn implode(\"\\r\\n\", explode(LAMConfig::LINE_SEPARATOR, $this->lamProMailText));\n\t}\n\n\t/**\n\t * Returns the mail body for password reset mails without formatting.\n\t *\n\t * @return String body\n\t */\n\tpublic function getLamProMailTextRaw() {\n\t\treturn $this->lamProMailText;\n\t}\n\n\t/**\n\t * Sets the mail body for password reset mails.\n\t *\n\t * @param String $lamProMailText body\n\t */\n\tpublic function setLamProMailText($lamProMailText) {\n\t\t$this->lamProMailText = implode(LAMConfig::LINE_SEPARATOR, explode(\"\\r\\n\", $lamProMailText));\n\t}\n\n\t/**\n\t * Returns the bind user for jobs.\n\t *\n\t * @return String $jobsBindUser bind user\n\t */\n\tpublic function getJobsBindUser() {\n\t\treturn $this->jobsBindUser;\n\t}\n\n\t/**\n\t * Sets the bind user for jobs.\n\t *\n\t * @param String $jobsBindUser bind user\n\t */\n\tpublic function setJobsBindUser($jobsBindUser) {\n\t\t$this->jobsBindUser = $jobsBindUser;\n\t}\n\n\t/**\n\t * Returns the bind password for jobs.\n\t *\n\t * @return String $jobsBindPassword password\n\t */\n\tpublic function getJobsBindPassword() {\n\t\treturn $this->jobsBindPassword;\n\t}\n\n\t/**\n\t * Sets the bind password for jobs.\n\t *\n\t * @param String $jobsBindPassword password\n\t */\n\tpublic function setJobsBindPassword($jobsBindPassword) {\n\t\t$this->jobsBindPassword = $jobsBindPassword;\n\t}\n\n\t/**\n\t * Returns the database type for jobs.\n\t *\n\t * @return String $jobsDatabase database type\n\t */\n\tpublic function getJobsDatabase() {\n\t\tif (empty($this->jobsDatabase)) {\n\t\t\treturn 'SQLite';\n\t\t}\n\t\treturn $this->jobsDatabase;\n\t}\n\n\t/**\n\t * Sets the database type for jobs.\n\t *\n\t * @param String $jobsDatabase database type\n\t */\n\tpublic function setJobsDatabase($jobsDatabase) {\n\t\t$this->jobsDatabase = $jobsDatabase;\n\t}\n\n\t/**\n\t * Returns the host.\n\t *\n\t * @return String host\n\t */\n\tpublic function getJobsDBHost() {\n\t\treturn $this->jobsDBHost;\n\t}\n\n\t/**\n\t * Sets the host.\n\t *\n\t * @param String $jobsDBHost host\n\t */\n\tpublic function setJobsDBHost($jobsDBHost) {\n\t\t$this->jobsDBHost = $jobsDBHost;\n\t}\n\n\t/**\n\t * Returns the port.\n\t *\n\t * @return String port\n\t */\n\tpublic function getJobsDBPort() {\n\t\treturn $this->jobsDBPort;\n\t}\n\n\t/**\n\t * Sets the port.\n\t *\n\t * @param int $jobsDBPort port\n\t */\n\tpublic function setJobsDBPort($jobsDBPort) {\n\t\t$this->jobsDBPort = $jobsDBPort;\n\t}\n\n\t/**\n\t * Returns the DB user.\n\t *\n\t * @return String user name\n\t */\n\tpublic function getJobsDBUser() {\n\t\treturn $this->jobsDBUser;\n\t}\n\n\t/**\n\t * Sets the DB user.\n\t *\n\t * @param String $jobsDBUser user name\n\t */\n\tpublic function setJobsDBUser($jobsDBUser) {\n\t\t$this->jobsDBUser = $jobsDBUser;\n\t}\n\n\t/**\n\t * Returns the DB password.\n\t *\n\t * @return String password\n\t */\n\tpublic function getJobsDBPassword() {\n\t\treturn $this->jobsDBPassword;\n\t}\n\n\t/**\n\t * Sets the DB password.\n\t *\n\t * @param String $jobsDBPassword password\n\t */\n\tpublic function setJobsDBPassword($jobsDBPassword) {\n\t\t$this->jobsDBPassword = $jobsDBPassword;\n\t}\n\n\t/**\n\t * Returns the database name.\n\t *\n\t * @return String DB name\n\t */\n\tpublic function getJobsDBName() {\n\t\treturn $this->jobsDBName;\n\t}\n\n\t/**\n\t * Sets the database name\n\t *\n\t * @param String $jobsDBName DB name\n\t */\n\tpublic function setJobsDBName($jobsDBName) {\n\t\t$this->jobsDBName = $jobsDBName;\n\t}\n\n\t/**\n\t* Sets the settings for the jobs.\n\t*\n\t* @param array $settings list of job settings array(name => value)\n\t* @return boolean true if $settings has correct format\n\t*/\n\tpublic function setJobSettings($settings) {\n\t\tif (!is_array($settings)) {\n\t\t\treturn false;\n\t\t}\n\t\t$this->jobSettings = $settings;\n\t\treturn true;\n\t}\n\n\t/**\n\t* Returns a list of saved job settings.\n\t*\n\t* @return array list of settings: array(name => value)\n\t*/\n\tpublic function getJobSettings() {\n\t\treturn $this->jobSettings;\n\t}\n\n\t/**\n\t * Returns the job token.\n\t *\n\t * @return String job token\n\t */\n\tpublic function getJobToken() {\n\t\tif (empty($this->jobToken)) {\n\t\t\t$this->jobToken = getRandomNumber();\n\t\t}\n\t\treturn $this->jobToken;\n\t}\n\n\t/**\n\t * Returns if setting a specific password is allowed on password reset page.\n\t *\n\t * @return String 'true' or 'false'\n\t */\n\tpublic function getPwdResetAllowSpecificPassword() {\n\t\treturn $this->pwdResetAllowSpecificPassword;\n\t}\n\n\t/**\n\t * Sets if setting a specific password is allowed on password reset page.\n\t *\n\t * @param String $pwdResetAllowSpecificPassword 'true' or 'false'\n\t */\n\tpublic function setPwdResetAllowSpecificPassword($pwdResetAllowSpecificPassword) {\n\t\t$this->pwdResetAllowSpecificPassword = $pwdResetAllowSpecificPassword;\n\t}\n\n\t/**\n\t * Returns if displaying password on screen is allowed on password reset page.\n\t *\n\t * @return String 'true' or 'false'\n\t */\n\tpublic function getPwdResetAllowScreenPassword() {\n\t\treturn $this->pwdResetAllowScreenPassword;\n\t}\n\n\t/**\n\t * Sets if displaying password on screen is allowed on password reset page.\n\t *\n\t * @param String $pwdResetAllowScreenPassword 'true' or 'false'\n\t */\n\tpublic function setPwdResetAllowScreenPassword($pwdResetAllowScreenPassword) {\n\t\t$this->pwdResetAllowScreenPassword = $pwdResetAllowScreenPassword;\n\t}\n\n\t/**\n\t * Returns if force password change is set by default on password reset page.\n\t *\n\t * @return String 'true' or 'false'\n\t */\n\tpublic function getPwdResetForcePasswordChange() {\n\t\treturn $this->pwdResetForcePasswordChange;\n\t}\n\n\t/**\n\t * Sets if force password change is set by default on password reset page.\n\t *\n\t * @param String $pwdResetForcePasswordChange 'true' or 'false'\n\t */\n\tpublic function setPwdResetForcePasswordChange($pwdResetForcePasswordChange) {\n\t\t$this->pwdResetForcePasswordChange = $pwdResetForcePasswordChange;\n\t}\n\n\t/**\n\t * Returns default password output method on password reset page.\n\t *\n\t * @return integer LAMConfig::PWDRESET_DEFAULT_SCREEN/PWDRESET_DEFAULT_MAIL/PWDRESET_DEFAULT_BOTH\n\t */\n\tpublic function getPwdResetDefaultPasswordOutput() {\n\t\treturn $this->pwdResetDefaultPasswordOutput;\n\t}\n\n\t/**\n\t * Sets default password output method on password reset page.\n\t *\n\t * @param integer $pwdResetDefaultPasswordOutput LAMConfig::PWDRESET_DEFAULT_SCREEN/PWDRESET_DEFAULT_MAIL/PWDRESET_DEFAULT_BOTH\n\t */\n\tpublic function setPwdResetDefaultPasswordOutput($pwdResetDefaultPasswordOutput) {\n\t\t$this->pwdResetDefaultPasswordOutput = $pwdResetDefaultPasswordOutput;\n\t}\n\t/**\n\t * Returns the authentication type.\n\t *\n\t * @return string $twoFactorAuthentication authentication type\n\t */\n\tpublic function getTwoFactorAuthentication() {\n\t\tif (empty($this->twoFactorAuthentication)) {\n\t\t\treturn TwoFactorProviderService::TWO_FACTOR_NONE;\n\t\t}\n\t\treturn $this->twoFactorAuthentication;\n\t}\n\n\t/**\n\t * Sets the authentication type.\n\t *\n\t * @param string $twoFactorAuthentication authentication type\n\t */\n\tpublic function setTwoFactorAuthentication($twoFactorAuthentication) {\n\t\t$this->twoFactorAuthentication = $twoFactorAuthentication;\n\t}\n\n\t/**\n\t * Returns the authentication URL.\n\t *\n\t * @return string authentication URL\n\t */\n\tpublic function getTwoFactorAuthenticationURL() {\n\t\treturn implode(\"\\r\\n\", explode(LAMConfig::LINE_SEPARATOR, $this->twoFactorAuthenticationURL));\n\t}\n\n\t/**\n\t * Returns the authentication URL without formatting.\n\t *\n\t * @return string authentication URL\n\t */\n\tpublic function getTwoFactorAuthenticationURLRaw() {\n\t\treturn $this->twoFactorAuthenticationURL;\n\t}\n\n\t/**\n\t * Sets the authentication URL.\n\t *\n\t * @param string $twoFactorAuthenticationURL authentication URL\n\t */\n\tpublic function setTwoFactorAuthenticationURL($twoFactorAuthenticationURL) {\n\t\t$this->twoFactorAuthenticationURL = implode(LAMConfig::LINE_SEPARATOR, explode(\"\\r\\n\", $twoFactorAuthenticationURL));\n\t}\n\n\t/**\n\t * Sets the client id.\n\t *\n\t * @param string $clientId client id\n\t */\n\tpublic function setTwoFactorAuthenticationClientId($clientId) {\n\t\t$this->twoFactorAuthenticationClientId = $clientId;\n\t}\n\n\t/**\n\t * Returns the client id.\n\t *\n\t * @return string client id\n\t */\n\tpublic function getTwoFactorAuthenticationClientId() {\n\t\treturn $this->twoFactorAuthenticationClientId;\n\t}\n\n\t/**\n\t * Sets the secret key.\n\t *\n\t * @param string $secretKey secret key\n\t */\n\tpublic function setTwoFactorAuthenticationSecretKey($secretKey) {\n\t\t$this->twoFactorAuthenticationSecretKey = $secretKey;\n\t}\n\n\t/**\n\t * Returns the secret key.\n\t *\n\t * @return string secret key\n\t */\n\tpublic function getTwoFactorAuthenticationSecretKey() {\n\t\treturn $this->twoFactorAuthenticationSecretKey;\n\t}\n\n\t/**\n\t * Sets the domain.\n\t *\n\t * @param string $domain domain\n\t */\n\tpublic function setTwoFactorAuthenticationDomain($domain) {\n\t\t$this->twoFactorAuthenticationDomain = $domain;\n\t}\n\n\t/**\n\t * Returns the domain.\n\t *\n\t * @return string domain\n\t */\n\tpublic function getTwoFactorAuthenticationDomain() {\n\t\treturn $this->twoFactorAuthenticationDomain;\n\t}\n\n\t/**\n\t * Returns if SSL certificate verification is turned off.\n\t *\n\t * @return bool SSL certificate verification is turned off\n\t */\n\tpublic function getTwoFactorAuthenticationInsecure() {\n\t\treturn $this->twoFactorAuthenticationInsecure;\n\t}\n\n\t/**\n\t * Sets if SSL certificate verification is turned off.\n\t *\n\t * @param boolean $twoFactorAuthenticationInsecure SSL certificate verification is turned off\n\t */\n\tpublic function setTwoFactorAuthenticationInsecure($twoFactorAuthenticationInsecure) {\n\t\t$this->twoFactorAuthenticationInsecure = $twoFactorAuthenticationInsecure;\n\t}\n\n\t/**\n\t * Returns the authentication label.\n\t *\n\t * @return string authentication label\n\t */\n\tpublic function getTwoFactorAuthenticationLabel() {\n\t\treturn $this->twoFactorAuthenticationLabel;\n\t}\n\n\t/**\n\t * Sets the authentication label.\n\t *\n\t * @param string $twoFactorAuthenticationLabel authentication label\n\t */\n\tpublic function setTwoFactorAuthenticationLabel($twoFactorAuthenticationLabel) {\n\t\t$this->twoFactorAuthenticationLabel = $twoFactorAuthenticationLabel;\n\t}\n\n\t/**\n\t * Returns if 2nd factor is optional.\n\t *\n\t * @return bool 2nd factor is optional\n\t */\n\tpublic function getTwoFactorAuthenticationOptional() {\n\t\treturn boolval($this->twoFactorAuthenticationOptional);\n\t}\n\n\t/**\n\t * Sets if 2nd factor is optional.\n\t *\n\t * @param boolean $twoFactorAuthenticationOptional 2nd factor is optional\n\t */\n\tpublic function setTwoFactorAuthenticationOptional($twoFactorAuthenticationOptional) {\n\t\t$this->twoFactorAuthenticationOptional = $twoFactorAuthenticationOptional;\n\t}\n\n\t/**\n\t * Returns the caption HTML.\n\t *\n\t * @return string caption HTML\n\t */\n\tpublic function getTwoFactorAuthenticationCaption() {\n\t\treturn $this->twoFactorAuthenticationCaption;\n\t}\n\n\t/**\n\t * Sets the caption HTML.\n\t *\n\t * @param string $twoFactorAuthenticationCaption caption HTML\n\t */\n\tpublic function setTwoFactorAuthenticationCaption($twoFactorAuthenticationCaption) {\n\t\t$this->twoFactorAuthenticationCaption = $twoFactorAuthenticationCaption;\n\t}\n\n\t/**\n\t * Returns the user attribute.\n\t *\n\t * @return string user attribute\n\t */\n\tpublic function getTwoFactorAuthenticationAttribute() {\n\t\tif (empty($this->twoFactorAuthenticationAttribute)) {\n\t\t\treturn 'uid';\n\t\t}\n\t\treturn $this->twoFactorAuthenticationAttribute;\n\t}\n\n\t/**\n\t * Sets the user attribute.\n\t *\n\t * @param string $twoFactorAuthenticationAttribute user attribute\n\t */\n\tpublic function setTwoFactorAuthenticationAttribute($twoFactorAuthenticationAttribute) {\n\t\t$this->twoFactorAuthenticationAttribute = $twoFactorAuthenticationAttribute;\n\t}\n\n\t/**\n\t * Returns the DN part to hide.\n\t *\n\t * @return string DN part\n\t */\n\tpublic function getHideDnPart() {\n\t\treturn $this->hideDnPart;\n\t}\n\n\t/**\n\t * Sets the DN part to hide.\n\t *\n\t * @param string $hideDnPart DN part\n\t */\n\tpublic function setHideDnPart($hideDnPart) {\n\t\t$this->hideDnPart = $hideDnPart;\n\t}\n\n\t/**\n\t * Returns the minimum password length.\n\t *\n\t * @return string minimum length\n\t */\n\tpublic function getPwdPolicyMinLength() {\n\t\treturn $this->pwdPolicyMinLength;\n\t}\n\n\t/**\n\t * Sets the minimum password length.\n\t *\n\t * @param string $pwdPolicyMinLength minimum length\n\t */\n\tpublic function setPwdPolicyMinLength($pwdPolicyMinLength) {\n\t\t$this->pwdPolicyMinLength = $pwdPolicyMinLength;\n\t}\n\n\t/**\n\t * Returns the minimum of lowercase characters.\n\t *\n\t * @return string minimum\n\t */\n\tpublic function getpwdPolicyMinLowercase() {\n\t\treturn $this->pwdPolicyMinLowercase;\n\t}\n\n\t/**\n\t * Sets the minimum of lowercase characters.\n\t *\n\t * @param string $pwdPolicyMinLowercase minimum\n\t */\n\tpublic function setPwdPolicyMinLowercase($pwdPolicyMinLowercase) {\n\t\t$this->pwdPolicyMinLowercase = $pwdPolicyMinLowercase;\n\t}\n\n\t/**\n\t * Returns the minimum of uppercase characters.\n\t *\n\t * @return string minimum\n\t */\n\tpublic function getPwdPolicyMinUppercase() {\n\t\treturn $this->pwdPolicyMinUppercase;\n\t}\n\n\t/**\n\t * Sets the minimum of uppercase characters.\n\t *\n\t * @param string $pwdPolicyMinUppercase minimum\n\t */\n\tpublic function setPwdPolicyMinUppercase($pwdPolicyMinUppercase) {\n\t\t$this->pwdPolicyMinUppercase = $pwdPolicyMinUppercase;\n\t}\n\n\t/**\n\t * Returns the minimum of numeric characters.\n\t *\n\t * @return string minimum\n\t */\n\tpublic function getPwdPolicyMinNumeric() {\n\t\treturn $this->pwdPolicyMinNumeric;\n\t}\n\n\t/**\n\t * Sets the minimum of numeric characters.\n\t *\n\t * @param string $pwdPolicyMinNumeric minimum\n\t */\n\tpublic function setPwdPolicyMinNumeric($pwdPolicyMinNumeric) {\n\t\t$this->pwdPolicyMinNumeric = $pwdPolicyMinNumeric;\n\t}\n\n\t/**\n\t * Returns the minimum of symbolic characters.\n\t *\n\t * @return string minimum\n\t */\n\tpublic function getPwdPolicyMinSymbolic() {\n\t\treturn $this->pwdPolicyMinSymbolic;\n\t}\n\n\t/**\n\t * Sets the minimum of symbolic characters.\n\t *\n\t * @param string $pwdPolicyMinSymbolic minimum\n\t */\n\tpublic function setPwdPolicyMinSymbolic($pwdPolicyMinSymbolic) {\n\t\t$this->pwdPolicyMinSymbolic = $pwdPolicyMinSymbolic;\n\t}\n\n}\n\n\n/**\n* This class manages config.cfg.\n*\n* @package configuration\n*/\nclass LAMCfgMain {\n\n\t/** PHP error reporting setting as E_ALL & ~E_NOTICE */\n\tconst ERROR_REPORTING_DEFAULT = 'default';\n\t/** PHP error reporting setting from php.ini */\n\tconst ERROR_REPORTING_SYSTEM = 'system';\n\t/** PHP error reporting setting as E_ALL | E_STRICT */\n\tconst ERROR_REPORTING_ALL = 'all';\n\n\t/** send license warnings via email */\n\tconst LICENSE_WARNING_EMAIL = 'email';\n\t/** display license warnings on screen */\n\tconst LICENSE_WARNING_SCREEN = 'screen';\n\t/** send license warnings via email + display on screen */\n\tconst LICENSE_WARNING_ALL = 'all';\n\t/** no license warning */\n\tconst LICENSE_WARNING_NONE = 'none';\n\n\t/** SSL encryption for mail sending */\n\tconst SMTP_SSL = 'SSL';\n\t/** TLS encryption for mail sending */\n\tconst SMTP_TLS = 'TLS';\n\t/** No encryption for mail sending */\n\tconst SMTP_NONE = 'NONE';\n\n\t/** store configuration on local file system */\n\tconst DATABASE_FILE_SYSTEM = 'files';\n\t/** store configuration in MySQL database */\n\tconst DATABASE_MYSQL = 'mysql';\n\n\t/** Default profile */\n\tpublic $default;\n\n\t/** Password to change config.cfg */\n\tprivate $password;\n\n\t/** Time of inactivity before session times out (minutes) */\n\tpublic $sessionTimeout;\n\n\t/** log level */\n\tpublic $logLevel;\n\n\t/** log destination (\"SYSLOG\":syslog, \"/...\":file, \"NONE\":none, \"REMOTE\":server:port) */\n\tpublic $logDestination;\n\n\t/** list of hosts which may access LAM */\n\tpublic $allowedHosts;\n\n\t/** list of hosts which may access LAM Pro self service */\n\tpublic $allowedHostsSelfService;\n\n\t/** session encryption */\n\tpublic $encryptSession;\n\n\t/** minimum length for passwords */\n\tpublic $passwordMinLength = 0;\n\n\t/** minimum uppercase characters */\n\tpublic $passwordMinUpper = 0;\n\n\t/** minimum lowercase characters */\n\tpublic $passwordMinLower = 0;\n\n\t/** minimum numeric characters */\n\tpublic $passwordMinNumeric = 0;\n\n\t/** minimum symbol characters */\n\tpublic $passwordMinSymbol = 0;\n\n\t/** minimum character classes (upper, lower, numeric, symbols) */\n\tpublic $passwordMinClasses = 0;\n\n\t/** number of password rules that must match (-1 = all) */\n\tpublic $checkedRulesCount = -1;\n\n\t/** password may contain the user name */\n\tpublic $passwordMustNotContainUser = 'false';\n\n\t/** password may contain more than 2 characters of user/first/last name */\n\tpublic $passwordMustNotContain3Chars = 'false';\n\n\t/** external URL for password checking (e.g. https://domain.com/url/{SHA1}) */\n\tpublic $externalPwdCheckUrl = null;\n\n\t/** path to config file */\n\tprivate $conffile;\n\n\t/** uploaded SSL certificate that is stored to disk on save() */\n\tprivate $uploadedSSLCaCert = null;\n\n\t/** SSL certificate should be deleted on save() */\n\tprivate $delSSLCaCert = false;\n\n\t/** error reporting */\n\tpublic $errorReporting = self::ERROR_REPORTING_DEFAULT;\n\n\t/** license data */\n\tprivate $license = '';\n\n\t/** license warning email from address */\n\tpublic $licenseEmailFrom = '';\n\n\t/** license warning email TO address(es) separated by \";\" */\n\tpublic $licenseEmailTo = '';\n\n\t/** license warning email was last sent for this expiration date */\n\tpublic $licenseEmailDateSent = '';\n\n\t/** type of license warning (email/screen/both/none) */\n\tpublic $licenseWarningType = '';\n\n\t/** mail server (server:port) */\n\tpublic $mailServer = '';\n\n\t/** mail server user */\n\tpublic $mailUser = '';\n\n\t/** mail server password */\n\tpublic $mailPassword = '';\n\n\t/**\n\t * @var string encryption type for SMTP connection\n\t */\n\tpublic $mailEncryption = '';\n\n\t/** database type */\n\tpublic $configDatabaseType = self::DATABASE_FILE_SYSTEM;\n\n\t/** database server name */\n\tpublic $configDatabaseServer = '';\n\n\t/** database port */\n\tpublic $configDatabasePort = '';\n\n\t/** database name */\n\tpublic $configDatabaseName = '';\n\n\t/** database user */\n\tpublic $configDatabaseUser = '';\n\n\t/** database password */\n\tpublic $configDatabasePassword = '';\n\n\t/** list of data fields to save in config file */\n\tprivate $settings = array(\"password\", \"default\", \"sessionTimeout\",\n\t\t\"logLevel\", \"logDestination\", \"allowedHosts\", \"passwordMinLength\",\n\t\t\"passwordMinUpper\", \"passwordMinLower\", \"passwordMinNumeric\",\n\t\t\"passwordMinClasses\", \"passwordMinSymbol\", 'checkedRulesCount',\n\t\t'passwordMustNotContainUser', 'passwordMustNotContain3Chars',\n\t\t'externalPwdCheckUrl',\n\t\t'errorReporting', 'encryptSession', 'allowedHostsSelfService',\n\t\t'license', 'licenseEmailFrom', 'licenseEmailTo', 'licenseWarningType', 'licenseEmailDateSent',\n\t\t'mailServer', 'mailUser', 'mailPassword', 'mailEncryption', 'configDatabaseType',\n\t\t'configDatabaseServer', 'configDatabasePort', 'configDatabaseName', 'configDatabaseUser',\n\t\t'configDatabasePassword'\n\t);\n\n\t/** persistence settings are always stored on local file system */\n\tprivate $persistenceSettings = array(\n\t\t'configDatabaseType', 'configDatabaseServer',\n\t\t'configDatabasePort', 'configDatabaseName', 'configDatabaseUser',\n\t\t'configDatabasePassword', 'license'\n\t);\n\n\t/**\n\t * Loads preferences from config file\n\t *\n\t * @param string $fileName file path for config file\n\t */\n\tfunction __construct($fileName = null) {\n\t\tif ($fileName === null) {\n\t\t\t$this->conffile = __DIR__ . \"/../config/config.cfg\";\n\t\t}\n\t\telse {\n\t\t\t$this->conffile = $fileName;\n\t\t}\n\t\t// set default values\n\t\t$this->sessionTimeout = 30;\n\t\t$this->logLevel = LOG_NOTICE;\n\t\t$this->logDestination = \"SYSLOG\";\n\t\t$this->allowedHosts = \"\";\n\t\t$this->allowedHostsSelfService = '';\n\t\t$this->encryptSession = 'true';\n\t\ttry {\n\t\t\t$this->reload();\n\t\t} catch (LAMException $e) {\n\t\t\tsyslog(LOG_ERR, 'Error loading main config: ' . $e->getTitle() . ' ' . $e->getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * Exports the configuration data.\n\t *\n\t * @return array config data\n\t */\n\tpublic function exportData($skipPersistenceSettings = false): array {\n\t\t$data = array();\n\t\tforeach ($this->settings as $setting) {\n\t\t\tif ($skipPersistenceSettings && in_array($setting, $this->persistenceSettings)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$data[$setting] = $this->$setting;\n\t\t}\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Imports configuration data.\n\t *\n\t * @param array $data config data\n\t * @throws LAMException import error\n\t */\n\tpublic function importData($data) {\n\t\tforeach ($data as $dataKey => $dataValue) {\n\t\t\tif (!in_array($dataKey, $this->settings)) {\n\t\t\t\tlogNewMessage(LOG_WARNING, 'Ignored setting during import: ' . $dataKey);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!(($dataValue === null) || is_array($dataValue) || is_string($dataValue) || is_int($dataValue) || is_bool($dataValue))) {\n\t\t\t\tthrow new LAMException('Invalid import data type for ' . htmlspecialchars($dataKey) . ': ' . gettype($dataValue));\n\t\t\t}\n\t\t\t$this->$dataKey = $dataValue;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the content of the server certificates file\n\t *\n\t * @return null|string certificates\n\t */\n\tpublic function exportCertificates() {\n\t\t$fileName = $this->getSSLCaCertPath();\n\t\tif ($fileName === null) {\n\t\t\treturn null;\n\t\t}\n\t\t$content = null;\n\t\t$handle = @fopen($fileName, \"r\");\n\t\tif ($handle) {\n\t\t\t$content = fread($handle, 10000000);\n\t\t\tfclose($handle);\n\t\t}\n\t\treturn $content;\n\t}\n\n\t/**\n\t * Imports the server certificates.\n\t *\n\t * @param null|string $certsContent certificates\n\t * @throws LAMException write to file failed\n\t */\n\tpublic function importCertificates($certsContent) {\n\t\t$fileName = $this->getSSLCaCertPath();\n\t\tif (empty($certsContent)) {\n\t\t\tif ($fileName !== null) {\n\t\t\t\tunlink($fileName);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\t$fileName = $this->getInternalSSLCaCertFileName();\n\t\t$handle = @fopen($fileName, \"wb\");\n\t\tif ($handle) {\n\t\t\tfputs($handle, $certsContent);\n\t\t\tfclose($handle);\n\t\t\t@chmod($fileName, 0600);\n\t\t}\n\t\telse {\n\t\t\tthrow new LAMException(printf(_('Unable to write file %s.'), $fileName));\n\t\t}\n\t}\n\n\t/**\n\t * Reloads preferences from config file config.cfg\n\t *\n\t * @throws LAMException error reading config\n\t */\n\tprivate function reload() : void {\n\t\tif (is_file($this->conffile)) {\n\t\t\t$file = @fopen($this->conffile, \"r\");\n\t\t\tif (!$file) {\n\t\t\t\tthrow new LAMException(_('The config file is not readable.'));\n\t\t\t}\n\t\t\twhile (!feof($file)) {\n\t\t\t\t$line = fgets($file, 1024);\n\t\t\t\t$line = trim($line);  // remove spaces at the beginning and end\n\t\t\t\tif (($line == \"\")||($line[0] == \"#\")) {\n\t\t\t\t\tcontinue; // ignore comments\n\t\t\t\t}\n\t\t\t\t// search keywords\n\t\t\t\tfor ($i = 0; $i < sizeof($this->settings); $i++) {\n\t\t\t\t\t$keyword = $this->settings[$i];\n\t\t\t\t\t$keylen = strlen($keyword);\n\t\t\t\t\tif (strtolower(substr($line, 0, $keylen + 2)) == strtolower($keyword . \": \")) {\n\t\t\t\t\t\t$this->$keyword = substr($line, $keylen + 2, strlen($line) - $keylen - 2);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfclose($file);\n\t\t}\n\t\tif ($this->configDatabaseType === self::DATABASE_MYSQL) {\n\t\t\t$this->loadFromDb();\n\t\t}\n\t}\n\n\t/**\n\t * Loads the settings from the database.\n\t * Persistence settings are ignored as they must be on local file system.\n\t *\n\t * @return bool true when ok\n\t * @throws LAMException error reading config\n\t */\n\tprivate function loadFromDb() : void {\n\t\t$configDb = new ConfigurationDatabase($this);\n\t\ttry {\n\t\t\t$pdo = $configDb->getPdo();\n\t\t\t$result = $pdo->query(\"SELECT value FROM \" . ConfigurationDatabase::TABLE_MAIN_CONFIG . ' WHERE name=\\'config\\'');\n\t\t\tif ($result === false) {\n\t\t\t\tsyslog(LOG_ERR, 'Main configuration table query failed.');\n\t\t\t\tthrow new LAMException(_('Unable to connect to configuration database.'));\n\t\t\t}\n\t\t\t$data = $result->fetchAll();\n\t\t\tif (empty($data)) {\n\t\t\t\tsyslog(LOG_ERR, 'Main configuration table is empty.');\n\t\t\t\tthrow new LAMException(_('Unable to connect to configuration database.'));\n\t\t\t}\n\t\t\t$jsonData = json_decode($data[0]['value'], true);\n\t\t\tforeach ($this->persistenceSettings as $persistenceSetting) {\n\t\t\t\tif (isset($jsonData[$persistenceSetting])) {\n\t\t\t\t\tunset($jsonData[$persistenceSetting]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->importData($jsonData);\n\t\t}\n\t\tcatch (PDOException $e) {\n\t\t\tsyslog(LOG_ERR, 'Unable to read main config: ' . $e->getMessage());\n\t\t\tthrow new LAMException(_('Unable to connect to configuration database.'));\n\t\t}\n\t\tcatch (LAMException $e) {\n\t\t\tsyslog(LOG_ERR, 'Unable to import main config: ' . $e->getMessage());\n\t\t\tthrow new LAMException(_('Unable to connect to configuration database.'));\n\t\t}\n\t}\n\n\t/**\n\t * Saves the configuration to the persistence layer.\n\t */\n\tpublic function save() {\n\t\tif ($this->configDatabaseType === self::DATABASE_MYSQL) {\n\t\t\t$this->saveLocal(true);\n\t\t\t$this->saveDb();\n\t\t}\n\t\telse {\n\t\t\t$this->saveLocal(false);\n\t\t}\n\t\t// store SSL certificate\n\t\tif ($this->uploadedSSLCaCert != null) {\n\t\t\t$sslPath = $this->getInternalSSLCaCertFileName();\n\t\t\t$file = @fopen($sslPath, \"w\");\n\t\t\tif ($file) {\n\t\t\t\tfputs($file, $this->uploadedSSLCaCert);\n\t\t\t\tfclose($file);\n\t\t\t\t@chmod($sslPath, 0600);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tStatusMessage(\"ERROR\", _(\"Cannot write certificate file. Please check the permissions of config/serverCerts.pem.\"));\n\t\t\t}\n\t\t}\n\t\t// delete SSL certificate\n\t\tif ($this->delSSLCaCert === true) {\n\t\t\t$sslPath = $this->getInternalSSLCaCertFileName();\n\t\t\t$result = @unlink($sslPath);\n\t\t\tif (!$result) {\n\t\t\t\tStatusMessage(\"ERROR\", _(\"Cannot write certificate file. Please check the permissions of config/serverCerts.pem.\"));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Saves the config data to the database.\n\t */\n\tprivate function saveDb() : void {\n\t\t$configDb = new ConfigurationDatabase($this);\n\t\t$pdo = $configDb->getPdo();\n\t\t$json = json_encode($this->exportData(true));\n\t\t$nameKey = 'config';\n\t\t$pdo->beginTransaction();\n\t\t// remove existing data\n\t\t$sql = 'delete from ' . ConfigurationDatabase::TABLE_MAIN_CONFIG . ' where name = \"' . $nameKey . '\";';\n\t\t$pdo->exec($sql);\n\t\t// new data\n\t\t$stmt = $pdo->prepare('insert into ' . ConfigurationDatabase::TABLE_MAIN_CONFIG . ' (name, value) VALUES (?, ?)');\n\t\t$stmt->execute(array($nameKey, $json));\n\t\t$pdo->commit();\n\t}\n\n\t/**\n\t * Saves preferences to config file config.cfg\n\t *\n\t * @param bool $persistenceOnly store only persistence related data\n\t */\n\tpublic function saveLocal(bool $persistenceOnly) : void {\n\t\tif (is_file($this->conffile)) {\n\t\t\t$file = fopen($this->conffile, \"r\");\n\t\t\t$file_array = array();\n\t\t\t// read config file\n\t\t\twhile (!feof($file)) {\n\t\t\t\t$configLine = fgets($file, 1024);\n\t\t\t\tif (($configLine === false) || ($configLine === \"\") || ($configLine === \"\\n\") || ($configLine[0] == \"#\")) {\n\t\t\t\t\tcontinue; // ignore comments and empty lines\n\t\t\t\t}\n\t\t\t\tarray_push($file_array, $configLine);\n\t\t\t}\n\t\t\tfclose($file);\n\t\t\t// generate new configuration file\n\t\t\t$saved = array();\n\t\t\tfor ($i = 0; $i < sizeof($file_array); $i++) {\n\t\t\t\t$line = trim($file_array[$i]);\n\t\t\t\tif (($line == \"\")||($line[0] == \"#\")) {\n\t\t\t\t\tcontinue; // ignore comments and empty lines\n\t\t\t\t}\n\t\t\t\t// search keywords\n\t\t\t\tfor ($k = 0; $k < sizeof($this->settings); $k++) {\n\t\t\t\t\t$keyword = $this->settings[$k];\n\t\t\t\t\tif ($persistenceOnly && !in_array($keyword, $this->persistenceSettings)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t$keylen = strlen($keyword);\n\t\t\t\t\tif (strtolower(substr($line, 0, $keylen + 1)) == strtolower($keyword . \":\")) {\n\t\t\t\t\t\t$file_array[$i] = $keyword . \": \" . $this->$keyword . \"\\n\";\n\t\t\t\t\t\t$saved[] = $keyword;\t// mark keyword as saved\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!$persistenceOnly) {\n\t\t\t// check if we have to add new entries (e.g. if user upgraded LAM and has an old config file)\n\t\t\tif (!in_array(\"password\", $saved)) {\n\t\t\t\tarray_push($file_array, \"password: \" . $this->password . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"default\", $saved)) {\n\t\t\t\tarray_push($file_array, \"default: \" . $this->default . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"sessionTimeout\", $saved)) {\n\t\t\t\tarray_push($file_array, \"sessionTimeout: \" . $this->sessionTimeout . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"logLevel\", $saved)) {\n\t\t\t\tarray_push($file_array, \"logLevel: \" . $this->logLevel . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"logDestination\", $saved)) {\n\t\t\t\tarray_push($file_array, \"logDestination: \" . $this->logDestination . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"allowedHosts\", $saved)) {\n\t\t\t\tarray_push($file_array, \"allowedHosts: \" . $this->allowedHosts . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"allowedHostsSelfService\", $saved)) {\n\t\t\t\tarray_push($file_array, \"allowedHostsSelfService: \" . $this->allowedHostsSelfService . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"encryptSession\", $saved)) {\n\t\t\t\tarray_push($file_array, \"encryptSession: \" . $this->encryptSession . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"passwordMinLength\", $saved)) {\n\t\t\t\tarray_push($file_array, \"passwordMinLength: \" . $this->passwordMinLength . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"passwordMinUpper\", $saved)) {\n\t\t\t\tarray_push($file_array, \"passwordMinUpper: \" . $this->passwordMinUpper . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"passwordMinLower\", $saved)) {\n\t\t\t\tarray_push($file_array, \"passwordMinLower: \" . $this->passwordMinLower . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"passwordMinNumeric\", $saved)) {\n\t\t\t\tarray_push($file_array, \"passwordMinNumeric: \" . $this->passwordMinNumeric . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"passwordMinSymbol\", $saved)) {\n\t\t\t\tarray_push($file_array, \"passwordMinSymbol: \" . $this->passwordMinSymbol . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"passwordMinClasses\", $saved)) {\n\t\t\t\tarray_push($file_array, \"passwordMinClasses: \" . $this->passwordMinClasses . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"checkedRulesCount\", $saved)) {\n\t\t\t\tarray_push($file_array, \"checkedRulesCount: \" . $this->checkedRulesCount . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"passwordMustNotContain3Chars\", $saved)) {\n\t\t\t\tarray_push($file_array, \"passwordMustNotContain3Chars: \" . $this->passwordMustNotContain3Chars . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"passwordMustNotContainUser\", $saved)) {\n\t\t\t\tarray_push($file_array, \"passwordMustNotContainUser: \" . $this->passwordMustNotContainUser . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"externalPwdCheckUrl\", $saved)) {\n\t\t\t\tarray_push($file_array, \"externalPwdCheckUrl: \" . $this->externalPwdCheckUrl . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"errorReporting\", $saved)) {\n\t\t\t\tarray_push($file_array, \"errorReporting: \" . $this->errorReporting . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"license\", $saved)) {\n\t\t\t\tarray_push($file_array, \"license: \" . $this->license . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"licenseEmailFrom\", $saved)) {\n\t\t\t\tarray_push($file_array, \"licenseEmailFrom: \" . $this->licenseEmailFrom . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"licenseEmailTo\", $saved)) {\n\t\t\t\tarray_push($file_array, \"licenseEmailTo: \" . $this->licenseEmailTo . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"licenseEmailDateSent\", $saved)) {\n\t\t\t\tarray_push($file_array, \"licenseEmailDateSent: \" . $this->licenseEmailDateSent . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"licenseWarningType\", $saved)) {\n\t\t\t\tarray_push($file_array, \"licenseWarningType: \" . $this->licenseWarningType . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"mailServer\", $saved)) {\n\t\t\t\tarray_push($file_array, \"mailServer: \" . $this->mailServer . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"mailUser\", $saved)) {\n\t\t\t\tarray_push($file_array, \"mailUser: \" . $this->mailUser . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"mailPassword\", $saved)) {\n\t\t\t\tarray_push($file_array, \"mailPassword: \" . $this->mailPassword . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"mailEncryption\", $saved)) {\n\t\t\t\tarray_push($file_array, \"mailEncryption: \" . $this->mailEncryption . \"\\n\");\n\t\t\t}\n\t\t}\n\t\tif (!in_array(\"configDatabaseType\", $saved)) {\n\t\t\tarray_push($file_array, \"configDatabaseType: \" . $this->configDatabaseType . \"\\n\");\n\t\t}\n\t\tif (!in_array(\"configDatabaseServer\", $saved)) {\n\t\t\tarray_push($file_array, \"configDatabaseServer: \" . $this->configDatabaseServer . \"\\n\");\n\t\t}\n\t\tif (!in_array(\"configDatabasePort\", $saved)) {\n\t\t\tarray_push($file_array, \"configDatabasePort: \" . $this->configDatabasePort . \"\\n\");\n\t\t}\n\t\tif (!in_array(\"configDatabaseName\", $saved)) {\n\t\t\tarray_push($file_array, \"configDatabaseName: \" . $this->configDatabaseName . \"\\n\");\n\t\t}\n\t\tif (!in_array(\"configDatabaseUser\", $saved)) {\n\t\t\tarray_push($file_array, \"configDatabaseUser: \" . $this->configDatabaseUser . \"\\n\");\n\t\t}\n\t\tif (!in_array(\"configDatabasePassword\", $saved)) {\n\t\t\tarray_push($file_array, \"configDatabasePassword: \" . $this->configDatabasePassword . \"\\n\");\n\t\t}\n\n\t\t$file = @fopen($this->conffile, \"w\");\n\t\tif ($file) {\n\t\t\tfor ($i = 0; $i < sizeof($file_array); $i++) {\n\t\t\t\tfputs($file, $file_array[$i]);\n\t\t\t}\n\t\t\tfclose($file);\n\t\t}\n\t\telse {\n\t\t\tStatusMessage(\"ERROR\", \"\", _(\"Cannot open config file!\") . \" (\" . $this->conffile . \")\");\n\t\t}\n\t}\n\n\t/**\n\t * Sets a new config password.\n\t *\n\t * @param String $password new password\n\t */\n\tpublic function setPassword($password) {\n\t\t$this->password = $this->hashPassword($password, generateSalt(16));\n\t}\n\n\t/**\n\t * Checks if the given password matches.\n\t *\n\t * @param String $password password\n\t * @return boolean true, if password matches\n\t */\n\tpublic function checkPassword($password) {\n\t\tif (strpos($this->password, \"{SSHA}\") === 0) {\n\t\t\t$value = substr($this->password, strlen(\"{SSHA}\"));\n\t\t\t$parts = explode(\" \", $value);\n\t\t\t$salt = base64_decode($parts[1]);\n\t\t\t$hash = \"{SSHA}\" . base64_encode(hex2bin(sha1($password . $salt))) . \" \" . base64_encode($salt);\n\t\t\treturn ($hash === $this->password);\n\t\t}\n\t\telseif (strpos($this->password, \"{CRYPT-SHA512}\") === 0) {\n\t\t\t$value = substr($this->password, strlen(\"{CRYPT-SHA512}\"));\n\t\t\t$parts = explode(\" \", $value);\n\t\t\t$salt = base64_decode($parts[1]);\n\t\t\treturn ($this->hashPassword($password, $salt) === $this->password);\n\t\t}\n\t\telse {\n\t\t\t// old nonhashed password\n\t\t\treturn ($password === $this->password);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the hashed password.\n\t *\n\t * @param String $password password\n\t * @param String $salt salt\n\t * @return String hash value\n\t */\n\tprivate function hashPassword($password, $salt) {\n\t\treturn \"{CRYPT-SHA512}\" . crypt($password, '$6$' . $salt) . \" \" . base64_encode($salt);\n\t}\n\n\t/**\n\t * Returns if the configuration file is writable.\n\t *\n\t * @return boolean writable\n\t */\n\tpublic function isWritable() : bool {\n\t\treturn is_writeable($this->conffile);\n\t}\n\n\t/**\n\t * Returns if the configuration file is existing.\n\t *\n\t * @return boolean exists\n\t */\n\tpublic function isConfigFileExisting() {\n\t\treturn file_exists($this->conffile);\n\t}\n\n\t/**\n\t * Tries to copy the config file from sample config.\n\t *\n\t * @return boolean copied\n\t */\n\tpublic function installSampleConfig() {\n\t\t$samplePath = dirname(dirname(__FILE__)) . '/config/config.cfg.sample';\n\t\treturn file_exists($samplePath) && copy($samplePath, $this->conffile);\n\t}\n\n\t/**\n\t * Returns the path to the SSL CA certificate file that overrides the system certificates.\n\t *\n\t * @return String path to certificate file or null if certificate is not overridden\n\t */\n\tpublic function getSSLCaCertPath() {\n\t\t$path = $this->getInternalSSLCaCertFileName();\n\t\tif (file_exists($path)) {\n\t\t\treturn $path;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the file name that will be used internally to store the CA file.\n\t *\n\t * @return String file name\n\t */\n\tprivate function getInternalSSLCaCertFileName() {\n\t\treturn dirname(__FILE__) . '/../config/serverCerts.pem';\n\t}\n\n\t/**\n\t * Uploads a new SSL CA cert.\n\t *\n\t * @param String $cert file content in DER/PEM format\n\t * @return mixed TRUE if format is correct, error message if file is not accepted\n\t */\n\tpublic function uploadSSLCaCert($cert) {\n\t\tif (strpos($cert, '-----BEGIN CERTIFICATE-----') === false) {\n\t\t\t$pem = @chunk_split(@base64_encode($cert), 64, \"\\n\");\n\t\t\t$cert = \"-----BEGIN CERTIFICATE-----\\n\" . $pem . \"-----END CERTIFICATE-----\\n\";\n\t\t}\n\t\telse {\n\t\t\t// remove any junk before first \"-----BEGIN CERTIFICATE-----\"\n\t\t\t$pos = strpos($cert, '-----BEGIN CERTIFICATE-----');\n\t\t\t$cert = substr($cert, $pos);\n\t\t}\n\t\t$pemData = @openssl_x509_parse($cert);\n\t\tif ($pemData === false) {\n\t\t\treturn _('Please provide a file in DER or PEM format.');\n\t\t}\n\t\t$existingCerts = $this->getSSLCaCertificateContent();\n\t\tif (!empty($existingCerts)) {\n\t\t\t// merge with existing certificates\n\t\t\t$existingList = $this->splitSSLCaCertificateContent($existingCerts);\n\t\t\t$newList = $this->splitSSLCaCertificateContent($cert);\n\t\t\t$this->uploadedSSLCaCert = implode(\"\\n\", array_unique(array_merge($existingList, $newList)));\n\t\t}\n\t\telse {\n\t\t\t$this->uploadedSSLCaCert = $cert;\n\t\t}\n\t\t$this->delSSLCaCert = false;\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns the name of a temporary file in tmp that contains the SSL certificate.\n\t * The file contains either the stored data in serverCerts or the uploaded data.\n\t *\n\t * @return String file name or null if no certificate was set\n\t */\n\tpublic function getSSLCaCertTempFileName() {\n\t\tif ($this->delSSLCaCert) {\n\t\t\treturn null;\n\t\t}\n\t\t// get certificate data\n\t\t$content = $this->getSSLCaCertificateContent();\n\t\tif ($content == null) {\n\t\t\treturn null;\n\t\t}\n\t\t// write to temp file\n\t\t$fileName = time() . getRandomNumber() . '.pem';\n\t\t$path = dirname(__FILE__) . '/../tmp/' . $fileName;\n\t\t$handle = @fopen($path, \"wb\");\n\t\t@chmod($path, 0600);\n\t\tif ($handle) {\n\t\t\t$content = fputs($handle, $content);\n\t\t\tfclose($handle);\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t\treturn $fileName;\n\t}\n\n\t/**\n\t * Marks a single or all SSL CA certificate files for deletion.\n\t * The changes take effect on save().\n\t *\n\t * @param int $index certificate index, null deletes all certificates (default: null)\n\t */\n\tpublic function deleteSSLCaCert($index = null) {\n\t\tif ($index == null) {\n\t\t\t// delete all\n\t\t\t$this->delSSLCaCert = true;\n\t\t\treturn;\n\t\t}\n\t\t$content = $this->getSSLCaCertificateContent();\n\t\t$list = $this->splitSSLCaCertificateContent($content);\n\t\tunset($list[$index]);\n\t\tif (sizeof($list) < 1) {\n\t\t\t$this->delSSLCaCert = true;\n\t\t\t$this->uploadedSSLCaCert = null;\n\t\t}\n\t\telse {\n\t\t\t$this->uploadedSSLCaCert = implode(\"\\n\", $list);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a list of all CA certificates.\n\t *\n\t * @return array list of certificates as output of openssl_x509_parse()\n\t */\n\tpublic function getSSLCaCertificates() {\n\t\tif ($this->delSSLCaCert) {\n\t\t\treturn array();\n\t\t}\n\t\t$content = $this->getSSLCaCertificateContent();\n\t\tif (empty($content)) {\n\t\t\treturn array();\n\t\t}\n\t\t$list = $this->splitSSLCaCertificateContent($content);\n\t\tfor ($i = 0; $i < sizeof($list); $i++) {\n\t\t\t$list[$i] = @openssl_x509_parse($list[$i]);\n\t\t}\n\t\treturn $list;\n\t}\n\n\t/**\n\t * Returns the content of the certificate file or uploaded data.\n\t *\n\t * @return String null or certificate content\n\t */\n\tprivate function getSSLCaCertificateContent() {\n\t\t$content = null;\n\t\tif ($this->delSSLCaCert) {\n\t\t\treturn null;\n\t\t}\n\t\tif ($this->uploadedSSLCaCert != null) {\n\t\t\t$content = $this->uploadedSSLCaCert;\n\t\t}\n\t\telseif ($this->getSSLCaCertPath() != null) {\n\t\t\t$path = $this->getSSLCaCertPath();\n\t\t\t$handle = @fopen($path, \"r\");\n\t\t\tif ($handle) {\n\t\t\t\t$content = fread($handle, 10000000);\n\t\t\t\tfclose($handle);\n\t\t\t}\n\t\t}\n\t\treturn $content;\n\t}\n\n\t/**\n\t * Splits the certificate content into single PEM data chunks.\n\t *\n\t * @param String $content PEM file content\n\t * @return array one element for each certificate chunk\n\t */\n\tprivate function splitSSLCaCertificateContent($content) {\n\t\tif (empty($content)) {\n\t\t\treturn array();\n\t\t}\n\t\t$content = str_replace(\"\\n\\n\", \"\\n\", $content);\n\t\tif (empty($content)) {\n\t\t\treturn array();\n\t\t}\n\t\tif (!(strpos($content, '-----BEGIN CERTIFICATE-----') === 0)) {\n\t\t\treturn array();\n\t\t}\n\t\t$lines = explode(\"\\n\", $content);\n\t\t$list = array();\n\t\t$pos = -1;\n\t\tforeach ($lines as $line) {\n\t\t\tif (strpos($line, '-----BEGIN CERTIFICATE-----') === 0) {\n\t\t\t\t$pos++;\n\t\t\t}\n\t\t\tif (!isset($list[$pos])) {\n\t\t\t\t$list[$pos] = '';\n\t\t\t}\n\t\t\t$list[$pos] .= $line . \"\\n\";\n\t\t}\n\t\treturn $list;\n\t}\n\n\t/**\n\t * Returns the license key as multiple lines.\n\t *\n\t * @return String license\n\t */\n\tpublic function getLicenseLines() {\n\t\treturn explode(LAMConfig::LINE_SEPARATOR, $this->license);\n\t}\n\n\t/**\n\t * Sets the license key as multiple lines.\n\t *\n\t * @param String[] $licenseLines license lines\n\t */\n\tpublic function setLicenseLines($licenseLines) {\n\t\t$this->license = implode(LAMConfig::LINE_SEPARATOR, $licenseLines);\n\t}\n\n\t/**\n\t * Returns the license warning type (screen/email/both/none).\n\t *\n\t * @return string warning type\n\t */\n\tpublic function getLicenseWarningType() {\n\t\tif (empty($this->licenseWarningType)) {\n\t\t\treturn self::LICENSE_WARNING_SCREEN;\n\t\t}\n\t\treturn $this->licenseWarningType;\n\t}\n\n\t/**\n\t * Returns if the license warning should be shown on screen.\n\t *\n\t * @return bool show on screen\n\t */\n\tpublic function showLicenseWarningOnScreen() {\n\t\t$type = $this->getLicenseWarningType();\n\t\treturn ($type === self::LICENSE_WARNING_ALL) || ($type === self::LICENSE_WARNING_SCREEN);\n\t}\n\n\t/**\n\t * Returns if the license warning should be sent via email.\n\t *\n\t * @return bool send via email\n\t */\n\tpublic function sendLicenseWarningByEmail() {\n\t\t$type = $this->getLicenseWarningType();\n\t\treturn ($type === self::LICENSE_WARNING_ALL) || ($type === self::LICENSE_WARNING_EMAIL);\n\t}\n\n\t/**\n\t * Returns if the license warning was already sent.\n\t *\n\t * @param int $timeStamp time stamp\n\t */\n\tpublic function wasLicenseWarningSent($timeStamp) {\n\t\tif (empty($this->licenseEmailDateSent)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn $timeStamp == $this->licenseEmailDateSent;\n\t}\n\n}\n", "<?php\n\nuse LAM\\PDF\\PdfStructurePersistenceManager;\nuse LAM\\PROFILES\\AccountProfilePersistenceManager;\nuse LAM\\TYPES\\ConfiguredType;\nuse \\LAM\\TYPES\\TypeManager;\n/*\n\n  This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)\n  Copyright (C) 2003 - 2022  Roland Gruber\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n\n*/\n\n/**\n* Interface between modules and other parts of LAM.\n*\n* @package modules\n* @author Tilo Lutz\n* @author Michael Duergner\n* @author Roland Gruber\n*/\n\n/** self service functions */\ninclude_once(__DIR__ . \"/selfService.inc\");\nif (isLAMProVersion()) {\n\t/** job interface */\n\tinclude_once(__DIR__ . \"/jobs.inc\");\n}\n/** some helper functions */\ninclude_once(__DIR__ . \"/account.inc\");\n/** parent class of account modules */\ninclude_once(__DIR__ . \"/baseModule.inc\");\n/** access to LDAP server */\ninclude_once(__DIR__ . \"/ldap.inc\");\n/** remote functions */\ninclude_once(__DIR__ . \"/remote.inc\");\n/** security functions */\ninclude_once(__DIR__ . \"/security.inc\");\n/** meta HTML classes */\ninclude_once(__DIR__ . \"/html.inc\");\n\n/**\n* This includes all module files.\n*/\n$modulesINC_dirname = substr(__FILE__, 0, strlen(__FILE__) - 12) . \"/modules\";\n$modulesINC_dir = dir($modulesINC_dirname);\n// get module names.\nwhile ($entry = $modulesINC_dir->read()) {\n\tif ((substr($entry, strlen($entry) - 4, 4) == '.inc') && is_file($modulesINC_dirname . '/'.$entry)) {\n\t\tinclude_once($modulesINC_dirname . '/'.$entry);\n\t}\n}\n\n/**\n* Returns the alias name of a module\n*\n* @param string $name the module name\n* @param string $scope the account type (\"user\", \"group\", \"host\")\n* @return string|null alias name\n*/\nfunction getModuleAlias($name, $scope) {\n\t$module = moduleCache::getModule($name, $scope);\n\tif ($module === null) {\n\t\treturn null;\n\t}\n\treturn $module->get_alias();\n}\n\n/**\n* Returns true if the module is a base module\n*\n* @param string $name the module name\n* @param string $scope the account type (\"user\", \"group\", \"host\")\n* @return boolean true if base module\n*/\nfunction is_base_module($name, $scope) {\n\t$module = moduleCache::getModule($name, $scope);\n\treturn $module->is_base_module();\n}\n\n/**\n* Returns the LDAP filter used by the account lists\n*\n* @param string $typeId the account type (\"user\", \"group\", \"host\")\n* @return string LDAP filter\n*/\nfunction get_ldap_filter($typeId) {\n\t$typeManager = new \\LAM\\TYPES\\TypeManager();\n\t$type = $typeManager->getConfiguredType($typeId);\n\t$mods = $_SESSION['config']->get_AccountModules($typeId);\n\t$filters = array('or' => array(), 'and' => array());\n\t$orFilter = '';\n\tfor ($i = 0; $i < sizeof($mods); $i++) {\n\t\t$module = moduleCache::getModule($mods[$i], $type->getScope());\n\t\t$modinfo = $module->get_ldap_filter($typeId);\n\t\tif (isset($modinfo['or'])) {\n\t\t\t$filters['or'][] = $modinfo['or'];\n\t\t}\n\t\tif (isset($modinfo['and'])) {\n\t\t\t$filters['and'][] = $modinfo['and'];\n\t\t}\n\t}\n\t// build OR filter\n\tif (sizeof($filters['or']) == 1) {\n\t\t$orFilter = $filters['or'][0];\n\t}\n\telseif (sizeof($filters['or']) > 1) {\n\t\t$orFilter = \"(|\" . implode(\"\", $filters['or']) . \")\";\n\t}\n\t// add built OR filter to AND filters\n\tif (!empty($orFilter)) {\n\t\t$filters['and'][] = $orFilter;\n\t}\n\t// add type filter\n\t$typeSettings = $_SESSION['config']->get_typeSettings();\n\tif (isset($typeSettings['filter_' . $typeId]) && ($typeSettings['filter_' . $typeId] != '')) {\n\t\tif (strpos($typeSettings['filter_' . $typeId], '(') === 0) {\n\t\t\t$filters['and'][] = $typeSettings['filter_' . $typeId];\n\t\t}\n\t\telse {\n\t\t\t$filters['and'][] = '(' . $typeSettings['filter_' . $typeId] . ')';\n\t\t}\n\t}\n\t// collapse AND filters\n\t$finalFilter = '';\n\tif (sizeof($filters['and']) < 2) {\n\t\t$finalFilter = $filters['and'][0];\n\t}\n\telse {\n\t\t$finalFilter = \"(&\" . implode(\"\", $filters['and']) . \")\";\n\t}\n\t$loginData = $_SESSION['ldap']->getUserName();\n\treturn str_replace('@@LOGIN_DN@@', $loginData, $finalFilter);\n}\n\n/**\n* Returns a list of LDAP attributes which can be used to form the RDN.\n*\n* The list is already sorted by the priority given by the nodules.\n*\n* @param string $typeId account type (user, group, host)\n* @param array $selectedModules return only RDN attributes of these modules\n* @return array list of LDAP attributes\n*/\nfunction getRDNAttributes($typeId, $selectedModules=null) {\n\t$mods = $_SESSION['config']->get_AccountModules($typeId);\n\tif ($selectedModules != null) {\n\t\t$mods = $selectedModules;\n\t}\n\t$return = array();\n\t$attrs_low = array();\n\t$attrs_normal = array();\n\t$attrs_high = array();\n\tfor ($i = 0; $i < sizeof($mods); $i++) {\n\t\t// get list of attributes\n\t\t$module = moduleCache::getModule($mods[$i], \\LAM\\TYPES\\getScopeFromTypeId($typeId));\n\t\t$attrs = $module->get_RDNAttributes($typeId);\n\t\t$keys = array_keys($attrs);\n\t\t// sort attributes\n\t\tfor ($k = 0; $k < sizeof($keys); $k++) {\n\t\t\tswitch ($attrs[$keys[$k]]) {\n\t\t\t\tcase \"low\":\n\t\t\t\t\t$attrs_low[] = $keys[$k];\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"normal\":\n\t\t\t\t\t$attrs_normal[] = $keys[$k];\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"high\":\n\t\t\t\t\t$attrs_high[] = $keys[$k];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t$attrs_low[] = $keys[$k];\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t// merge arrays\n\t$return = array_values(array_unique($attrs_high));\n\tfor ($i = 0; $i < sizeof($attrs_normal); $i++) {\n\t\tif (!in_array($attrs_normal[$i], $return)) {\n\t\t\t$return[] = $attrs_normal[$i];\n\t\t}\n\t}\n\tfor ($i = 0; $i < sizeof($attrs_low); $i++) {\n\t\tif (!in_array($attrs_low[$i], $return)) {\n\t\t\t$return[] = $attrs_low[$i];\n\t\t}\n\t}\n\treturn $return;\n}\n\n/**\n* Returns a hash array (module name => dependencies) of all module dependencies\n*\n* \"dependencies\" contains an array with two sub arrays: depends, conflicts\n* <br>The elements of \"depends\" are either module names or an array of module names (OR-case).\n* <br>The elements of conflicts are module names.\n*\n* @param string $scope the account type (user, group, host)\n* @return array dependencies\n*/\nfunction getModulesDependencies($scope) {\n\t$mods = getAvailableModules($scope);\n\tfor ($i = 0; $i < sizeof($mods); $i++) {\n\t\t$module = moduleCache::getModule($mods[$i], $scope);\n\t\t$return[$mods[$i]] = $module->get_dependencies();\n\t}\n\treturn $return;\n}\n\n\n/**\n* Checks if there are missing dependencies between modules.\n*\n* @param array $selected selected module names\n* @param array $deps module dependencies\n* @return mixed false if no missing dependency was found,\n* otherwise an array of array(selected module, depending module) if missing dependencies were found\n*/\nfunction check_module_depends($selected, $deps) {\n\t$ret = array();\n\tfor ($m = 0; $m < sizeof($selected); $m++) {  // check selected modules\n\t\tfor ($i = 0; $i < sizeof($deps[$selected[$m]]['depends']); $i++) {  // check dependencies of module\n\t\t\t// check if we have OR-combined modules\n\t\t\tif (is_array($deps[$selected[$m]]['depends'][$i])) {\n\t\t\t\t// one of the elements is needed\n\t\t\t\t$found = false;\n\t\t\t\t$depends = $deps[$selected[$m]]['depends'][$i];\n\t\t\t\tfor ($d = 0; $d < sizeof($depends); $d++) {\n\t\t\t\t\tif (in_array($depends[$d], $selected)) {\n\t\t\t\t\t\t$found = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (! $found) {\n\t\t\t\t\t// missing dependency, add to return value\n\t\t\t\t\t$ret[] = array($selected[$m], implode(\" || \", $depends));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// single dependency\n\t\t\t\tif (! in_array($deps[$selected[$m]]['depends'][$i], $selected)) {\n\t\t\t\t\t// missing dependency, add to return value\n\t\t\t\t\t$ret[] = array($selected[$m], $deps[$selected[$m]]['depends'][$i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (sizeof($ret) > 0) {\n\t\treturn $ret;\n\t}\n\treturn false;\n}\n\n/**\n* Checks if there are conflicts between modules\n*\n* @param array $selected selected module names\n* @param array $deps module dependencies\n* @return boolean false if no conflict was found,\n* otherwise an array of array(selected module, conflicting module) if conflicts were found\n*/\nfunction check_module_conflicts($selected, $deps) {\n\t$ret = array();\n\tfor ($m = 0; $m < sizeof($selected); $m++) {\n\t\tfor ($i = 0; $i < sizeof($deps[$selected[$m]]['conflicts']); $i++) {\n\t\t\tif (in_array($deps[$selected[$m]]['conflicts'][$i], $selected)) {\n\t\t\t\t$ret[] = array($selected[$m], $deps[$selected[$m]]['conflicts'][$i]);\n\t\t\t}\n\t\t}\n\t}\n\tif (sizeof($ret) > 0) {\n\t\treturn $ret;\n\t}\n\treturn false;\n}\n\n/**\n* Returns an array with all available user module names\n*\n* @param string $scope account type (user, group, host)\n* @param boolean $mustSupportAdminInterface module must support LAM admin interface (default: false)\n* @return array list of possible modules\n*/\nfunction getAvailableModules($scope, $mustSupportAdminInterface = false) {\n\t$dirname = substr(__FILE__, 0, strlen(__FILE__) - 12) . \"/modules\";\n\t$dir = dir($dirname);\n\t$return = array();\n\t// get module names.\n\twhile ($entry = $dir->read()) {\n\t\tif ((substr($entry, strlen($entry) - 4, 4) == '.inc') && is_file($dirname . '/'.$entry)) {\n\t\t\t$entry = substr($entry, 0, strpos($entry, '.'));\n\t\t\t$temp = moduleCache::getModule($entry, $scope);\n\t\t\tif ($mustSupportAdminInterface && !$temp->supportsAdminInterface()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif ($temp->can_manage()) {\n\t\t\t\t$return[] = $entry;\n\t\t\t}\n\t\t}\n\t}\n\treturn $return;\n}\n\n/**\n* Returns the elements for the profile page.\n*\n* @param string $typeId account type (user, group, host)\n* @return array profile elements\n*/\nfunction getProfileOptions($typeId) {\n\t$typeManager = new TypeManager();\n\t$type = $typeManager->getConfiguredType($typeId);\n\t$mods = $type->getModules();\n\t$return = array();\n\tfor ($i = 0; $i < sizeof($mods); $i++) {\n\t\t$module = moduleCache::getModule($mods[$i], $type->getScope());\n\t\t$return[$mods[$i]] = $module->get_profileOptions($typeId);\n\t}\n\treturn $return;\n}\n\n/**\n* Checks if the profile options are valid\n*\n* @param string $typeId account type (user, group, host)\n* @param array $options hash array containing all options (name => array(...))\n* @return array list of error messages\n*/\nfunction checkProfileOptions($typeId, $options) {\n\t$typeManager = new TypeManager();\n\t$type = $typeManager->getConfiguredType($typeId);\n\t$mods = $type->getModules();\n\t$return = array();\n\tfor ($i = 0; $i < sizeof($mods); $i++) {\n\t\t$module = moduleCache::getModule($mods[$i], $type->getScope());\n\t\t$temp = $module->check_profileOptions($options, $type->getId());\n\t\t$return = array_merge($return, $temp);\n\t}\n\treturn $return;\n}\n\n/**\n* Returns a hash array (module name => elements) of all module options for the configuration page.\n*\n* @param array $scopes hash array (module name => array(account types))\n* @return array configuration options\n*/\nfunction getConfigOptions($scopes) {\n\t$return = array();\n\t$modules = array_keys($scopes);\n\tfor ($i = 0; $i < sizeof($modules); $i++) {\n\t\t$m = moduleCache::getModule($modules[$i], 'none');\n\t\t$return[$modules[$i]] = $m->get_configOptions($scopes[$modules[$i]], $scopes);\n\t}\n\treturn $return;\n}\n\n/**\n* Checks if the configuration options are valid\n*\n* @param array $scopes hash array (module name => array(account type ids))\n* @param array $options hash array containing all options (name => array(...))\n* @return array list of error messages\n*/\nfunction checkConfigOptions($scopes, &$options) {\n\t$return = array();\n\t$modules = array_keys($scopes);\n\tfor ($i = 0; $i < sizeof($modules); $i++) {\n\t\t$m = moduleCache::getModule($modules[$i], 'none');\n\t\t$errors = $m->check_configOptions($scopes[$modules[$i]], $options);\n\t\tif (isset($errors) && is_array($errors)) {\n\t\t\t$return = array_merge($return, $errors);\n\t\t}\n\t}\n\treturn $return;\n}\n\n/**\n* Returns a help entry from an account module.\n*\n* @param string $module module name\n* @param string $helpID help identifier\n* @param string $scope account type\n* @return array help entry\n*/\nfunction getHelp($module,$helpID,$scope='') {\n\tglobal $helpArray;\n\tif (!isset($module) || ($module == '') || ($module == 'main')) {\n\t\t$helpPath = \"../help/help.inc\";\n\t\tif (is_file(\"../../help/help.inc\")) {\n\t\t\t$helpPath = \"../../help/help.inc\";\n\t\t}\n\t\tif (!isset($helpArray)) {\n\t\t\tinclude_once($helpPath);\n\t\t}\n\t\treturn $helpArray[$helpID];\n\t}\n\tif (empty($scope)) {\n\t\t$scope = 'none';\n\t}\n\t$moduleObject = moduleCache::getModule($module, $scope);\n\treturn $moduleObject->get_help($helpID);\n}\n\n/**\n* Returns a list of available PDF entries.\n*\n* @param string $typeId account type (user, group, host)\n* @return array PDF entries (field ID => field label)\n*/\nfunction getAvailablePDFFields($typeId) {\n\t$typeManager = new TypeManager();\n\t$_SESSION['pdfContainer'] = new accountContainer($typeManager->getConfiguredType($typeId), 'pdfContainer');\n\t$_SESSION['pdfContainer']->initModules();\n\t$mods = $_SESSION['pdfContainer']->getAccountModules();\n\t$return = array();\n\tforeach ($mods as $module) {\n\t\t$fields = $module->get_pdfFields($typeId);\n\t\t$moduleName = get_class($module);\n\t\t$return[$moduleName] = array();\n\t\tif (is_array($fields)) {\n\t\t\tforeach ($fields as $fieldID => $fieldLabel) {\n\t\t\t\tif (is_integer($fieldID)) {\n\t\t\t\t\t// support old PDF field list which did not contain a label\n\t\t\t\t\t$return[$moduleName][$fieldLabel] = $fieldLabel;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$return[$moduleName][$fieldID] = $fieldLabel;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t$return['main'] = array('dn' => _('DN'));\n\tunset($_SESSION['pdfContainer']);\n\treturn $return;\n}\n\n/**\n* Returns an array containing all input columns for the file upload.\n*\n* Syntax:\n* <br> array(\n* <br>  string: name,  // fixed non-translated name which is used as column name (should be of format: <module name>_<column name>)\n* <br>  string: description,  // short descriptive name\n* <br>  string: help,  // help ID\n* <br>  string: example,  // example value\n* <br>  boolean: required  // true, if user must set a value for this column\n* <br> )\n*\n* @param ConfiguredType $type account type\n* @param array $selectedModules selected account modules\n* @return array column list\n*/\nfunction getUploadColumns(&$type, $selectedModules) {\n\t$return = array();\n\tfor ($i = 0; $i < sizeof($selectedModules); $i++) {\n\t\t$module = moduleCache::getModule($selectedModules[$i], $type->getScope());\n\t\t$return[$selectedModules[$i]] = $module->get_uploadColumns($selectedModules, $type);\n\t}\n\treturn $return;\n}\n\n/**\n* This function builds the LDAP accounts for the file upload.\n*\n* If there are problems status messages will be printed automatically.\n*\n* @param ConfiguredType $type account type\n* @param array $data array containing one account in each element\n* @param array $ids array(<column_name> => <column number>)\n* @param array $selectedModules selected account modules\n* @param htmlResponsiveRow $container HTML container\n* @return mixed array including accounts or false if there were errors\n*/\nfunction buildUploadAccounts($type, $data, $ids, $selectedModules, htmlResponsiveRow $container) {\n\t// build module order\n\t$unOrdered = $selectedModules;\n\t$ordered = array();\n\t$predepends = array();\n\t// get dependencies\n\tfor ($i = 0; $i < sizeof($unOrdered); $i++) {\n\t\t$mod = moduleCache::getModule($unOrdered[$i], $type->getScope());\n\t\t$predepends[$unOrdered[$i]] = $mod->get_uploadPreDepends();\n\t}\n\t// first all modules without predepends can be ordered\n\tfor ($i = 0; $i < sizeof($unOrdered); $i++) {\n\t\tif (sizeof($predepends[$unOrdered[$i]]) == 0) {\n\t\t\t$ordered[] = $unOrdered[$i];\n\t\t\tunset($unOrdered[$i]);\n\t\t\t$unOrdered = array_values($unOrdered);\n\t\t\t$i--;\n\t\t}\n\t}\n\t$unOrdered = array_values($unOrdered);  // fix indexes\n\t// now add all modules with fulfilled dependencies until all are in order\n\twhile (sizeof($unOrdered) > 0) {\n\t\t$newRound = false;\n\t\tfor ($i = 0; $i < sizeof($unOrdered); $i++) {\n\t\t\t$deps = $predepends[$unOrdered[$i]];\n\t\t\t$depends = false;\n\t\t\tfor ($d = 0; $d < sizeof($deps); $d++) {\n\t\t\t\tif (in_array($deps[$d], $unOrdered)) {\n\t\t\t\t\t$depends = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!$depends) {  // add to order if dependencies are fulfilled\n\t\t\t\t$ordered[] = $unOrdered[$i];\n\t\t\t\tunset($unOrdered[$i]);\n\t\t\t\t$unOrdered = array_values($unOrdered);\n\t\t\t\t$newRound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($newRound) {\n\t\t\tcontinue;\n\t\t}\n\t\t// this point should never be reached, LAM was unable to find a correct module order\n\t\t$container->add(new htmlStatusMessage(\"ERROR\", \"Internal Error: Unable to find correct module order.\"), 12);\n\t\treturn false;\n\t}\n\t// give raw data to modules\n\t$errors = array();\n\t$partialAccounts = array();\n\tforeach ($data as $i => $dataRow) {\n\t\t$partialAccounts[$i]['objectClass'] = array();\n\t}\n\t$stopUpload = false;\n\tfor ($i = 0; $i < sizeof($ordered); $i++) {\n\t\t$module = new $ordered[$i]($type->getScope());\n\t\t$moduleErrors = $module->build_uploadAccounts($data, $ids, $partialAccounts, $selectedModules, $type);\n\t\tif (sizeof($moduleErrors) > 0) {\n\t\t\t$errors = array_merge($errors, $moduleErrors);\n\t\t\tforeach ($moduleErrors as $error) {\n\t\t\t\tif ($error[0] == 'ERROR') {\n\t\t\t\t\tarray_unshift($errors, array(\"INFO\", _(\"Displayed account numbers start at \\\"0\\\". Add 2 to get the row in your spreadsheet.\"), \"\"));\n\t\t\t\t\t$errors[] = array(\"ERROR\", _(\"Upload was stopped after errors in %s module!\"), \"\", array($module->get_alias()));\n\t\t\t\t\t// skip other modules if error was found\n\t\t\t\t\t$stopUpload = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ($stopUpload) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (sizeof($errors) > 0) {\n\t\tfor ($i = 0; (($i < sizeof($errors)) && ($i < 50)); $i++) {\n\t\t\t$text = empty($errors[$i][2]) ? null : $errors[$i][2];\n\t\t\t$values = empty($errors[$i][3]) ? null : $errors[$i][3];\n\t\t\t$container->add(new htmlStatusMessage($errors[$i][0], $errors[$i][1], $text, $values), 12);\n\t\t}\n\t}\n\tif ($stopUpload) {\n\t\treturn false;\n\t}\n\treturn $partialAccounts;\n}\n\n/**\n * Runs any actions that need to be done before an LDAP entry is created.\n *\n * @param ConfiguredType $type account type\n * @param array $selectedModules list of selected account modules\n * @param array $attributes LDAP attributes of this entry (attributes are provided as reference, handle modifications of $attributes with care)\n * @return array array which contains status messages. Each entry is an array containing the status message parameters.\n */\nfunction doUploadPreActions($type, $selectedModules, $attributes) {\n\t$messages = array();\n\tfor ($i = 0; $i < sizeof($selectedModules); $i++) {\n\t\t$activeModule = $selectedModules[$i];\n\t\t$module = moduleCache::getModule($activeModule, $type->getScope());\n\t\t$messages = array_merge($messages, $module->doUploadPreActions($attributes, $type));\n\t}\n\treturn $messages;\n}\n\n/**\n* This function executes one post upload action.\n*\n* @param ConfiguredType $type account type\n* @param array $data array containing one account in each element\n* @param array $ids array(<column_name> => <column number>)\n* @param array $failed list of accounts which were not created successfully\n* @param array $selectedModules list of selected account modules\n* @param array $accounts list of LDAP entries\n* @return array current status\n* <br> array (\n* <br>  'status' => 'finished' | 'inProgress'\n* <br>  'module' => <name of active module>\n* <br>  'progress' => 0..100\n* <br>  'errors' => array (<array of parameters for StatusMessage>)\n* <br> )\n*/\nfunction doUploadPostActions($type, &$data, $ids, $failed, $selectedModules, &$accounts) {\n\t// check if function is called the first time\n\tif (! isset($_SESSION['mass_postActions']['remainingModules'])) {\n\t\t// make list of remaining modules\n\t\t$moduleList = $selectedModules;\n\t\t$_SESSION['mass_postActions']['remainingModules'] = $moduleList;\n\t}\n\t$activeModule = $_SESSION['mass_postActions']['remainingModules'][0];\n\t// initialize temporary variable\n\tif (!isset($_SESSION['mass_postActions'][$activeModule])) {\n\t\t$_SESSION['mass_postActions'][$activeModule] = array();\n\t}\n\t// let first module do one post action\n\t$module = moduleCache::getModule($activeModule, $type->getScope());\n\t$return = $module->doUploadPostActions($data, $ids, $failed, $_SESSION['mass_postActions'][$activeModule], $accounts, $selectedModules, $type);\n\t// remove active module from list if already finished\n\tif ($return['status'] == 'finished') {\n\t\tunset($_SESSION['mass_postActions']['remainingModules'][0]);\n\t\t$_SESSION['mass_postActions']['remainingModules'] = array_values($_SESSION['mass_postActions']['remainingModules']);\n\t}\n\t// update status and return back to upload page\n\t$return['module'] = $activeModule;\n\tif (sizeof($_SESSION['mass_postActions']['remainingModules']) > 0) {\n\t\t$return['status'] = 'inProgress';\n\t}\n\telse {\n\t\t$return['status'] = 'finished';\n\t}\n\treturn $return;\n}\n\n/**\n* Returns true if the module is a base module\n*\n* @return array required extensions\n*/\nfunction getRequiredExtensions() {\n\t$extList = array();\n\t$typeManager = new \\LAM\\TYPES\\TypeManager();\n\t$types = $typeManager->getConfiguredTypes();\n\tforeach ($types as $type) {\n\t\t$mods = $_SESSION['config']->get_AccountModules($type->getId());\n\t\tfor ($m = 0; $m < sizeof($mods); $m++) {\n\t\t\t$module = moduleCache::getModule($mods[$m], $type->getScope());\n\t\t\t$ext = $module->getRequiredExtensions();\n\t\t\tfor ($e = 0; $e < sizeof($ext); $e++) {\n\t\t\t\tif (!in_array($ext[$e], $extList)) {\n\t\t\t\t\t$extList[] = $ext[$e];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn $extList;\n}\n\n/**\n* Takes a list of meta-HTML elements and prints the equivalent HTML output.\n*\n* The modules are not allowed to display HTML code directly but return\n* meta HTML code. This allows to have a common design for all module pages.\n*\n* @param string $module Name of account module\n* @param mixed $input htmlElement or array of htmlElement elements\n* @param array $values List of values which override the defaults in $input (name => value)\n* @param boolean $restricted If true then no buttons will be displayed\n* @param integer $tabindex Start value of tabulator index for input fields\n* @param string $scope Account type\n* @return array List of input field names and their type (name => type)\n*/\nfunction parseHtml($module, $input, $values, $restricted, &$tabindex, $scope) {\n\tif ($input instanceof htmlElement) {\n\t\treturn $input->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t}\n\tif (is_array($input) && (sizeof($input) > 0)) {\n\t\t$return = array();\n\t\tfor ($i = 0; $i < sizeof($input); $i++) {\n\t\t\t$return = array_merge($return, $input[$i]->generateHTML($module, $input, $values, $restricted, $tabindex, $scope));\n\t\t}\n\t\treturn $return;\n\t}\n\treturn array();\n}\n\n/**\n * Helper function to sort descriptive options in parseHTML().\n * It compares the second entries of two arrays.\n *\n * @param array $a first array\n * @param array $b second array\n * @return integer compare result\n */\nfunction lamCompareDescriptiveOptions(&$a, &$b) {\n\t// check parameters\n\tif (!is_array($a) || !isset($a[1]) || !is_array($b) || !isset($b[1])) {\n\t\treturn 0;\n\t}\n\treturn strnatcasecmp($a[1], $b[1]);\n}\n\n/**\n * Prints a LAM help link.\n *\n * @param array $entry help entry\n * @param String $number help number\n * @param String $module module name\n * @param String $scope account scope\n * @param array $classes CSS classes\n */\nfunction printHelpLink($entry, $number, $module = '', $scope = '', $classes = array()) {\n\t$helpPath = \"../\";\n\tif (is_file(\"./help.php\")) {\n\t\t$helpPath = \"\";\n\t}\n\t$title = $entry['Headline'];\n\t$message = $entry['Text'];\n\tif (isset($entry['attr'])) {\n\t\t$message .= '<br><br><hr class=\"dotted\">' . _('Technical name') . ': <i>' . $entry['attr'] . '</i>';\n\t}\n\t// replace special characters\n\t$message = htmlspecialchars($message);\n\t$title = htmlspecialchars($title);\n\t$selfServiceOption = '';\n\tif (isSelfService()) {\n\t\t$selfServiceOption = '&amp;selfService=1';\n\t}\n\techo \"<a class=\\\"margin2 \" . implode(\" \", $classes) . \"\\\" href=\\\"\" . $helpPath . \"help.php?module=$module&amp;HelpNumber=\". $number . \"&amp;scope=\" . $scope . $selfServiceOption . \"\\\" \";\n\t\techo \"target=\\\"help\\\">\";\n\t\techo \"<img helptitle=\\\"\" . $title . \"\\\" helpdata=\\\"\" . $message . \"\\\" class=\\\"align-middle help-icon\\\" src=\\\"../${helpPath}graphics/help.svg\\\" alt=\\\"\" . _('Help') . \"\\\" width=\\\"16px\\\" height=\\\"16px\\\">\";\n\techo \"</a>\";\n}\n\n\n/**\n* This class includes all modules and attributes of an account.\n*\n* @package modules\n*/\nclass accountContainer {\n\n\t/**\n\t* Constructor\n\t*\n\t* @param ConfiguredType $type account type\n\t* @param string $base key in $_SESSION where this object is saved\n\t*/\n\tfunction __construct($type, $base) {\n\t\tif (!($type instanceof ConfiguredType)) {\n\t\t\ttrigger_error('Argument of accountContainer must be ConfiguredType.', E_USER_ERROR);\n\t\t}\n\t\tif (!is_string($base)) {\n\t\t\ttrigger_error('Argument of accountContainer must be string.', E_USER_ERROR);\n\t\t}\n\t\t$this->type = $type;\n\t\t$this->base = $base;\n\t\t// Set startpage\n\t\t$this->current_page=0;\n\t\t$this->subpage='attributes';\n\t\t$this->isNewAccount = false;\n\t\treturn 0;\n\t}\n\n\t/**\n\t* Array of all used attributes\n\t* Syntax is attribute => array ( objectClass => MUST or MAY, ...)\n\t*/\n\tpublic $attributes;\n\n\t/**\n\t* This variale stores the account type.\n\t* Currently \"user\", \"group\" and \"host\" are supported.\n\t*/\n\tprivate $type;\n\n\t/** This is an array with all module objects\n\t *\n\t *  @var baseModule[] modules\n\t */\n\tprivate $module;\n\n\t/** DN suffix of the account */\n\tpublic $dnSuffix;\n\n\t/** DN of account when it was loaded */\n\tpublic $dn_orig;\n\n\t/** RDN attribute of this account */\n\tpublic $rdn;\n\n\t/** DN of saved account */\n\tpublic $finalDN;\n\n\t/** original LDAP attributes when account was loaded from LDAP */\n\tpublic $attributes_orig;\n\n\t/** Module order */\n\tprivate $order;\n\n\t/** Name of accountContainer variable in session */\n\tprivate $base;\n\n\t/** This variable stores the page number of the currently displayed page */\n\tprivate $current_page = 0;\n\n\t/** This variable is set to the pagename of a subpage if it should be displayed */\n\tprivate $subpage;\n\n\t/** True if this is a newly created account */\n\tpublic $isNewAccount;\n\n\t/** name of last loaded account profile */\n\tprivate $lastLoadedProfile = '';\n\n\t/** cache for existing OUs */\n\tprivate $cachedOUs = null;\n\n\t/** main title in title bar */\n\tprivate $titleBarTitle = null;\n\t/** subtitle in title bar */\n\tprivate $titleBarSubtitle = null;\n\t/** send password via mail */\n\tprivate $sendPasswordViaMail = null;\n\t/** send password via mail to this alternate address */\n\tprivate $sendPasswordViaMailAlternateAddress = null;\n\n\t/**\n\t * @var array additional attributes for pre/post actions\n\t */\n\tprivate $extraInfoAttributes = array();\n\n\n\t/**\n\t * Returns the account module with the given class name\n\t *\n\t * @param string $name class name (e.g. posixAccount)\n\t * @return baseModule account module\n\t */\n\tpublic function getAccountModule($name) {\n\t\tif (isset($this->module[$name])) {\n\t\t\treturn $this->module[$name];\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the included account modules.\n\t *\n\t * @return baseModule[] modules\n\t */\n\tpublic function getAccountModules() {\n\t\treturn $this->module;\n\t}\n\n\t/**\n\t* Returns the account type of this object (e.g. user, group, host).\n\t*\n\t* @return ConfiguredType account type\n\t*/\n\tpublic function get_type() {\n\t\treturn $this->type;\n\t}\n\n\t/**\n\t * Returns the session edit key for this container.\n\t *\n\t * @return string key\n\t */\n\tpublic function getEditKey() {\n\t\treturn $this->base;\n\t}\n\n\t/**\n\t* This function is called when the user clicks on any button on the account pages.\n\t* It prints the HTML code of each account page.\n\t*/\n\tpublic function continue_main() {\n\t\t$oldPage = $this->current_page;\n\t\t$oldSubpage = $this->subpage;\n\t\t$result = array();\n\t\t$errorsOccurred = false;\n\t\t$typeObject = $this->type->getBaseType();\n\t\t$profileLoaded = $this->loadProfileIfRequested();\n\t\tif ($this->subpage == '') {\n\t\t\t$this->subpage='attributes';\n\t\t}\n\t\tif (isset($_POST['accountContainerReset'])) {\n\t\t\t$result = $this->load_account($this->dn_orig);\n\t\t}\n\t\telseif (isset($_POST['accountContainerDelete'])) {\n\t\t\tmetaRefresh(\"../lists/deletelink.php?type=\" . $this->type->getId() . \"&DN='\" . rawurlencode($this->dn_orig) . \"'\");\n\t\t\tunset($_SESSION[$this->base]);\n\t\t\texit();\n\t\t}\n\t\telseif (!$profileLoaded) {\n\t\t\t// change dn suffix\n\t\t\tif (isset($_GET['suffix']) && ($_GET['suffix'] != '') && ($this->dnSuffix == null)) {\n\t\t\t\t$this->dnSuffix = $_GET['suffix'];\n\t\t\t}\n\t\t\tif (isset($_POST['accountContainerSuffix']) && ($_POST['accountContainerSuffix'] != '')) {\n\t\t\t\t$this->dnSuffix = $_POST['accountContainerSuffix'];\n\t\t\t}\n\t\t\t// change RDN\n\t\t\tif (isset($_POST['accountContainerRDN'])) {\n\t\t\t\t$this->rdn = $_POST['accountContainerRDN'];\n\t\t\t}\n\t\t\t// create another account\n\t\t\tif (isset($_POST['accountContainerCreateAgain'])) {\n\t\t\t\t// open fresh account page\n\t\t\t\tunset($_SESSION[$this->base]);\n\t\t\t\tmetaRefresh(\"edit.php?type=\" . $this->type->getId() . \"&suffix=\" . $this->dnSuffix);\n\t\t\t\texit();\n\t\t\t}\n\t\t\t// reedit account\n\t\t\tif (isset($_POST['accountContainerBackToEdit'])) {\n\t\t\t\t// open fresh account page\n\t\t\t\tunset($_SESSION[$this->base]);\n\t\t\t\tmetaRefresh(\"edit.php?type=\" . $this->type->getId() . \"&DN=\" . urlencode($this->finalDN));\n\t\t\t\texit();\n\t\t\t}\n\t\t\t// back to account list\n\t\t\tif (isset($_POST['accountContainerBackToList'])) {\n\t\t\t\t// Return to account list\n\t\t\t\tunset($_SESSION[$this->base]);\n\t\t\t\tmetaRefresh(\"../lists/list.php?type=\" . $this->type->getId() . '&accountEditBack=true');\n\t\t\t\texit;\n\t\t\t}\n\t\t\t// create PDF file\n\t\t\tif (isset($_POST['accountContainerCreatePDF'])) {\n\t\t\t\tmetaRefresh('../lists/list.php?printPDF=1&type=' . $this->type->getId() . \"&refresh=true&PDFSessionID=\" . $this->base);\n\t\t\t\texit;\n\t\t\t}\n\t\t\t// module actions\n\t\t\tif ((sizeof($_POST) > 0) && checkIfWriteAccessIsAllowed($this->type->getId())) {\n\t\t\t\t$result = call_user_func(array(&$this->module[$this->order[$this->current_page]], 'process_'.$this->subpage));\n\t\t\t\tif (is_array($result)) {  // messages were returned, check for errors\n\t\t\t\t\tfor ($i = 0; $i < sizeof($result); $i++) {\n\t\t\t\t\t\tif ($result[$i][0] == 'ERROR') {\n\t\t\t\t\t\t\t$errorsOccurred = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$this->sortModules();\n\t\t\t}\n\t\t\t// run type post actions\n\t\t\t$typeObject->runEditPagePostAction($this);\n\t\t\t// save account\n\t\t\tif (!$errorsOccurred && isset($_POST['accountContainerSaveAccount'])) {\n\t\t\t\t// check if all modules are complete\n\t\t\t\t$modules = array_keys($this->module);\n\t\t\t\t$incompleteModules = array();\n\t\t\t\tforeach ($modules as $module) {\n\t\t\t\t\tif (!$this->module[$module]->module_complete()) {\n\t\t\t\t\t\t$incompleteModules[] = $this->module[$module]->get_alias();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (sizeof($incompleteModules) > 0) {\n\t\t\t\t\t$result[] = array('INFO', _('Some required information is missing'),\n\t\t\t\t\t\tsprintf(_('Please set up all required attributes on page: %s'), implode(\", \", $incompleteModules)));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// save account\n\t\t\t\t\t$saveMessages = $this->save_account();\n\t\t\t\t\t$saveOk = true;\n\t\t\t\t\tfor ($i = 0; $i < sizeof($saveMessages); $i++) {\n\t\t\t\t\t\tif ($saveMessages[$i][0] == 'ERROR') {\n\t\t\t\t\t\t\t$saveOk = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!$saveOk) {\n\t\t\t\t\t\t$result = $saveMessages;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$this->printSuccessPage($saveMessages);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// change to next page\n\t\tif (is_array($result)) {  // messages were returned, check for errors\n\t\t\tfor ($i = 0; $i < sizeof($result); $i++) {\n\t\t\t\tif ($result[$i][0] == 'ERROR') {\n\t\t\t\t\t$errorsOccurred = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!$errorsOccurred) {\n\t\t\t// go to subpage of current module\n\t\t\t$postKeys = array_keys($_POST);\n\t\t\tfor ($p = 0; $p < sizeof($postKeys); $p++) {\n\t\t\t\tif (is_string($postKeys[$p]) && (strpos($postKeys[$p], 'form_subpage_' . $this->order[$this->current_page]) === 0)) {\n\t\t\t\t\t$temp = substr($postKeys[$p], strlen($this->order[$this->current_page]) + 14);\n\t\t\t\t\t$temp = explode('_', $temp);\n\t\t\t\t\tif (sizeof($temp) == 2) {\n\t\t\t\t\t\t$this->subpage = $temp[0];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor ($i=0; $i<count($this->order); $i++ ) {\n\t\t\t\tif (isset($_POST['form_main_'.$this->order[$i]])) {\n\t\t\t\t\tif ($this->module[$this->order[$i]]->module_ready()) {\n\t\t\t\t\t\t$this->current_page = $i;\n\t\t\t\t\t\t$this->subpage='attributes';\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tStatusMessage('ERROR', _('The module %s is not yet ready.'),\n\t\t\t\t\t\t\t_('Please enter the account information on the other pages first.'),\n\t\t\t\t\t\t\tarray($this->module[$this->order[$i]]->get_alias()));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ($profileLoaded) {\n\t\t\t$profileName = $_POST['accountContainerSelectLoadProfile'];\n\t\t\t$result[] = array('INFO', _('Profile \"%s\" loaded.'), '<div class=\"hidden lam-dialog-msg\" id=\"lam-make-default-profile-dlg\">' . _('Setting saved') . '</div>' .\n\t\t\t\t'<a href=\"#\" id=\"lam-make-default-profile\" data-name=\"%s\" data-typeid=\"%s\" data-ok=\"%s\">' . _('Click here to make this your default profile.') . '</a>', array($profileName, $profileName, $this->get_type()->getId(), _('Ok')));\n\t\t}\n\t\t// update titles\n\t\t$this->titleBarTitle = $typeObject->getTitleBarTitle($this);\n\t\t$this->titleBarSubtitle = $typeObject->getTitleBarSubtitle($this);\n\t\t// prints a module content page\n\t\t$this->printModuleContent($result);\n\t\tif (!$errorsOccurred && ($oldPage == $this->current_page) && ($oldSubpage == $this->subpage)\n\t\t\t&& isset($_POST['scrollPositionTop']) && isset($_POST['scrollPositionLeft'])) {\n\t\t\t// scroll to last position\n\t\t\techo '<script type=\"text/javascript\">\n\t\t\t\tjQuery(document).ready(function() {\n\t\t\t\t\tjQuery(window).scrollTop(' . $_POST['scrollPositionTop'] . ');\n\t\t\t\t\tjQuery(window).scrollLeft('. $_POST['scrollPositionLeft'] . ');\n\t\t\t});\n\t\t\t</script>';\n\t\t}\n\t\t$this->printPageFooter();\n\t}\n\n\t/**\n\t * Prints the content part provided by the current module.\n\t *\n\t * @param array $result list of messages\n\t */\n\tprivate function printModuleContent($result) {\n\t\t$tabindex = 1;\n\t\t$this->printPageHeader();\n\t\t$this->printPasswordPromt();\n\t\t// display error messages\n\t\tif (is_array($result)) {\n\t\t\tfor ($i=0; $i<sizeof($result); $i++) {\n\t\t\t\tcall_user_func_array(\"StatusMessage\", $result[$i]);\n\t\t\t}\n\t\t}\n\t\techo '<div id=\"passwordMessageArea\"></div>';\n\t\techo \"<table border=0 width=\\\"100%\\\" style=\\\"border-collapse: collapse;\\\">\\n\";\n\t\tif (checkIfWriteAccessIsAllowed($this->type->getId())) {\n\t\t\techo \"<tr><td style=\\\"padding: 5px 0px 0px 0px;\\\">\\n\";\n\t\t\t$this->printCommonControls($tabindex);\n\t\t\techo \"</td></tr>\\n\";\n\t\t}\n\t\techo \"<tr valign=\\\"top\\\"><td style=\\\"padding: 15px;\\\">\";\n\t\t// print title bar\n\t\t$titleBarContainer = new htmlResponsiveRow();\n\t\t$titleBarContainer->setCSSClasses(array('maxrow'));\n\t\t$titleBarTitleText = new htmlOutputText($this->titleBarTitle, false);\n\t\t$titleBarContainer->add(new htmlDiv(null, $titleBarTitleText, array('titleBarTitle', 'text-left')), 12, 12, 4);\n\t\t$titleBarSubtitleText = new htmlOutputText($this->titleBarSubtitle, false);\n\t\t$titleBarContainer->add(new htmlDiv(null, $titleBarSubtitleText, array('titleBarSubtitle', 'responsiveLabel')), 12, 12, 8);\n\t\t$titleBarSuffixRdn = new htmlResponsiveRow();\n\t\t$titleBarSuffixRdn->add(new htmlHorizontalLine(), 12);\n\t\t// suffix\n\t\t$suffixList = array();\n\t\tforeach ($this->getOUs() as $suffix) {\n\t\t\t$suffixList[getAbstractDN($suffix)] = $suffix;\n\t\t}\n\t\tif (!($this->dnSuffix == '') && !in_array_ignore_case($this->dnSuffix, $this->getOUs())) {\n\t\t\t$suffixList[getAbstractDN($this->dnSuffix)] = $this->dnSuffix;\n\t\t}\n\t\t$selectedSuffix = array($this->dnSuffix);\n\t\t$suffixSelect = new htmlResponsiveSelect('accountContainerSuffix', $suffixList, $selectedSuffix, _('Suffix'));\n\t\t$suffixSelect->setHasDescriptiveElements(true);\n\t\t$suffixSelect->setRightToLeftTextDirection(true);\n\t\t$suffixSelect->setShortLabel();\n\t\t$suffixSelect->setSortElements(false);\n\t\t$titleBarSuffixRdn->add($suffixSelect, 12, 12, 7);\n\t\t// RDN selection\n\t\t$rdnlist = getRDNAttributes($this->type->getId());\n\t\t$rdnSelect = new htmlResponsiveSelect('accountContainerRDN', $rdnlist, array($this->rdn), _('RDN identifier'), '400');\n\t\t$rdnSelect->setShortLabel();\n\t\t$titleBarSuffixRdn->add($rdnSelect, 12, 12, 5);\n\t\t$titleBarContainer->add($titleBarSuffixRdn, 12);\n\n\t\t$titleBarDiv = new htmlDiv(null, $titleBarContainer, array('titleBar', 'ui-corner-top'));\n\t\tparseHtml(null, $titleBarDiv, array(), false, $tabindex, $this->type->getScope());\n\n\t\techo '<div id=\"lamVerticalTabs\" class=\"ui-tabs ui-widget ui-widget-content ui-corner-bottom ui-helper-clearfix\">';\n\t\techo '<table class=\"fullwidth\">';\n\t\t\techo '<tr><td style=\"vertical-align: top;\">';\n\t\t\t// tab menu\n\t\t\t$this->printModuleTabs();\n\t\t\techo '</td><td style=\"vertical-align: top;\" width=\"100%\">';\n\t\t\techo \"<div class=\\\"ui-tabs-panel ui-widget-content ui-corner-bottom fullwidth module-content-row\\\">\\n\";\n\t\t\t// content area\n\t\t\t// display html-code from modules\n\t\t\t$return = call_user_func(array($this->module[$this->order[$this->current_page]], 'display_html_'.$this->subpage));\n\t\t\t$y = 5000;\n\t\t\tparseHtml($this->order[$this->current_page], $return, array(), false, $y, $this->type->getScope());\n\t\t\techo \"</div>\\n\";\n\t\t\techo '</td>';\n\t\t\techo '</tr>';\n\t\techo '</table>';\n\t\techo \"</div>\\n\";\n\t\techo \"</td></tr>\\n\";\n\t\t// Display rest of html-page\n\t\techo \"</table>\\n\";\n\t}\n\n\t/**\n\t * Prints the input fields of the central password service.\n\t */\n\tprivate function printPasswordPromt() {\n\t\techo \"<div id=\\\"passwordDialog\\\" class=\\\"hidden\\\">\\n\";\n\t\techo '<div id=\"passwordDialogMessageArea\"></div>';\n\t\t$printContainer = false;\n\t\t$container = new htmlTable();\n\t\t// password fields\n\t\t$container->addElement(new htmlOutputText(_('Password')));\n\t\t$pwdInput1 = new htmlInputField('newPassword1');\n\t\t$pwdInput1->setIsPassword(true, true);\n\t\t$container->addElement($pwdInput1);\n\t\t$container->addElement(new htmlHelpLink('404'), true);\n\t\t$container->addElement(new htmlOutputText(_('Repeat password')));\n\t\t$pwdInput2 = new htmlInputField('newPassword2');\n\t\t$pwdInput2->setIsPassword(true);\n\t\t$pwdInput2->setSameValueFieldID('newPassword1');\n\t\t$container->addElement($pwdInput2, true);\n\t\t// print force password change option\n\t\t$forceChangeSupported = array();\n\t\tforeach ($this->module as $name => $module) {\n\t\t\tif (($module instanceof passwordService) && $module->supportsForcePasswordChange()) {\n\t\t\t\t$forceChangeSupported[] = $module;\n\t\t\t}\n\t\t}\n\t\tif (!empty($forceChangeSupported)) {\n\t\t\t$container->addElement(new htmlOutputText(_('Force password change')));\n\t\t\t$forcePwdGroup = new htmlGroup();\n\t\t\t$forcePwdGroup->addElement(new htmlInputCheckbox('lamForcePasswordChange', false));\n\t\t\t$forcePwdGroup->addElement(new htmlSpacer('1rem', null));\n\t\t\tforeach ($forceChangeSupported as $module) {\n\t\t\t\t$forcePwdGroup->addElement(new htmlImage('../../graphics/' . $module->getIcon(), '16px', '16px', $module->get_alias(), $module->get_alias()));\n\t\t\t\t$forcePwdGroup->addElement(new htmlSpacer('0.1rem', null));\n\t\t\t}\n\t\t\t$container->addElement($forcePwdGroup);\n\t\t\t$container->addElement(new htmlHelpLink('406'), true);\n\t\t}\n\t\tif (isLAMProVersion() && (isset($this->attributes_orig['mail'][0]) || $this->anyModuleManagesMail())) {\n\t\t\t$pwdMailCheckbox = new htmlTableExtendedInputCheckbox('lamPasswordChangeSendMail', false, _('Send via mail'));\n\t\t\t$pwdMailCheckbox->setTableRowsToShow(array('lamPasswordChangeSendMailAddress'));\n\t\t\t$container->addElement($pwdMailCheckbox);\n\t\t\t$container->addElement(new htmlHelpLink('407'), true);\n\t\t\tif ($_SESSION['config']->getLamProMailAllowAlternateAddress() != 'false') {\n\t\t\t\t$alternateMail = '';\n\t\t\t\t$pwdResetModule = $this->getAccountModule('passwordSelfReset');\n\t\t\t\tif (!empty($pwdResetModule)) {\n\t\t\t\t\t$backupMail = $pwdResetModule->getBackupEmail();\n\t\t\t\t\tif (!empty($backupMail)) {\n\t\t\t\t\t\t$alternateMail = $pwdResetModule->getBackupEmail();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$container->addElement(new htmlTableExtendedInputField(_('Alternate recipient'), 'lamPasswordChangeSendMailAddress', $alternateMail, '410'));\n\t\t\t}\n\t\t}\n\t\t$container->addElement(new htmlSpacer(null, '10px'), true);\n\t\t// password modules\n\t\t$moduleContainer = new htmlTable();\n\t\tforeach ($this->module as $name => $module) {\n\t\t\tif (($module instanceof passwordService) && $module->managesPasswordAttributes()) {\n\t\t\t\t$printContainer = true;\n\t\t\t\t$buttonImage = $module->getIcon();\n\t\t\t\tif ($buttonImage != null) {\n\t\t\t\t\tif (!(strpos($buttonImage, 'http') === 0) && !(strpos($buttonImage, '/') === 0)) {\n\t\t\t\t\t\t$buttonImage = '../../graphics/' . $buttonImage;\n\t\t\t\t\t}\n\t\t\t\t\t$moduleContainer->addElement(new htmlImage($buttonImage, null, null, getModuleAlias($name, $this->type->getScope())));\n\t\t\t\t}\n\t\t\t\t$moduleContainer->addElement(new htmlTableExtendedInputCheckbox('password_cb_' . $name, true, getModuleAlias($name, $this->type->getScope()), null, false));\n\t\t\t\t$moduleContainer->addElement(new htmlSpacer('10px', null));\n\t\t\t}\n\t\t}\n\t\t$moduleContainer->colspan = 5;\n\t\t$container->addElement($moduleContainer, true);\n\t\t// generate HTML\n\t\t$tabindex = 2000;\n\t\tif ($printContainer) {\n\t\t\tparseHtml(null, $container, array(), false, $tabindex, $this->type->getScope());\n\t\t}\n\t\techo \"</div>\\n\";\n\t}\n\n\t/**\n\t * Sets the new password in all selected account modules.\n\t *\n\t * @param array $input input parameters\n\t */\n\tpublic function setNewPassword($input) {\n\t\t$password1 = $input['password1'];\n\t\t$password2 = $input['password2'];\n\t\t$random = $input['random'] === 'true';\n\t\t$modules = array();\n\t\tforeach ($input['modules'] as $moduleName) {\n\t\t\t$moduleName = str_replace('password_cb_', '', $moduleName);\n\t\t\tif (array_key_exists($moduleName, $this->module)) {\n\t\t\t\t$modules[] = $moduleName;\n\t\t\t}\n\t\t}\n\t\t$return = array(\n\t\t\t'messages' => '',\n\t\t\t'errorsOccurred' => 'false'\n\t\t);\n\t\t$sendMail = false;\n\t\tif (isset($input['sendMail']) && ($input['sendMail'] == 'true')) {\n\t\t\t$sendMail = true;\n\t\t}\n\t\tif ($random) {\n\t\t\t$password1 = generateRandomPassword();\n\t\t\tif (!$sendMail) {\n\t\t\t\t$return['messages'] .= StatusMessage('INFO', _('The password was set to:') . ' ' . htmlspecialchars($password1), '', array(), true);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// check if passwords match\n\t\t\tif ($password1 != $password2) {\n\t\t\t\t$return['messages'] .= StatusMessage('ERROR', _('Passwords are different!'), '', array(), true);\n\t\t\t\t$return['errorsOccurred'] = 'true';\n\t\t\t}\n\t\t\t// check passsword strength\n\t\t\t$pwdPolicyResult = checkPasswordStrength($password1, null, null);\n\t\t\tif ($pwdPolicyResult !== true) {\n\t\t\t\t$return['messages'] .= StatusMessage('ERROR', $pwdPolicyResult, '', array(), true);\n\t\t\t\t$return['errorsOccurred'] = 'true';\n\t\t\t}\n\t\t}\n\t\t$forcePasswordChange = false;\n\t\tif (isset($input['forcePasswordChange']) && ($input['forcePasswordChange'] == 'true')) {\n\t\t\t$forcePasswordChange = true;\n\t\t}\n\t\t$return['forcePasswordChange'] = $forcePasswordChange;\n\t\tif ($return['errorsOccurred'] == 'false') {\n\t\t\t// set new password\n\t\t\tforeach ($this->module as $module) {\n\t\t\t\tif ($module instanceof passwordService) {\n\t\t\t\t\t$messages = $module->passwordChangeRequested($password1, $modules, $forcePasswordChange);\n\t\t\t\t\tfor ($m = 0; $m < sizeof($messages); $m++) {\n\t\t\t\t\t\tif ($messages[$m][0] == 'ERROR') {\n\t\t\t\t\t\t\t$return['errorsOccurred'] = 'true';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (sizeof($messages[$m]) == 2) {\n\t\t\t\t\t\t\t$return['messages'] .= StatusMessage($messages[$m][0], $messages[$m][1], '', array(), true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telseif (sizeof($messages[$m]) == 3) {\n\t\t\t\t\t\t\t$return['messages'] .= StatusMessage($messages[$m][0], $messages[$m][1], $messages[$m][2], array(), true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telseif (sizeof($messages[$m]) == 4) {\n\t\t\t\t\t\t\t$return['messages'] .= StatusMessage($messages[$m][0], $messages[$m][1], $messages[$m][2], $messages[$m][3], true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (isLAMProVersion() && $sendMail) {\n\t\t\t$this->sendPasswordViaMail = $password1;\n\t\t\tif (($_SESSION['config']->getLamProMailAllowAlternateAddress() != 'false') && !empty($input['sendMailAlternateAddress'])) {\n\t\t\t\tif (!get_preg($input['sendMailAlternateAddress'], 'email')) {\n\t\t\t\t\t$return['messages'] .= StatusMessage('ERROR', _('Alternate recipient'), _('Please enter a valid email address!'), array(), true);\n\t\t\t\t\t$return['errorsOccurred'] = 'true';\n\t\t\t\t}\n\t\t\t\t$this->sendPasswordViaMailAlternateAddress = $input['sendMailAlternateAddress'];\n\t\t\t}\n\t\t}\n\t\tif ($return['errorsOccurred'] == 'false') {\n\t\t\t$return['messages'] .= StatusMessage('INFO', _('The new password will be stored in the directory after you save this account.'), '', array(), true);\n\t\t\t$this->extraInfoAttributes['INFO.passwordUpdated'] = 'yes';\n\t\t\t$this->extraInfoAttributes['INFO.forcePasswordChange'] = $forcePasswordChange ? 'yes' : 'no';\n\t\t\t$this->extraInfoAttributes['INFO.passwordChangeModules'] = implode(', ', $modules);\n\t\t\t$this->extraInfoAttributes['INFO.passwordChangeType'] = $random ? 'random' : 'manual';\n\t\t\t$this->extraInfoAttributes['INFO.sendPasswordViaEmail'] = $sendMail ? 'yes' : 'no';\n\t\t\tif (!empty($input['sendMailAlternateAddress'])) {\n\t\t\t\t$this->extraInfoAttributes['INFO.sendPasswordAlternateAddress'] = $input['sendMailAlternateAddress'];\n\t\t\t}\n\t\t}\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Returns if any module manages the mail attribute.\n\t *\n\t * @return boolean mail is managed\n\t */\n\tprivate function anyModuleManagesMail() {\n\t\tforeach ($this->module as $mod) {\n\t\t\tif (in_array('mail', $mod->getManagedAttributes($this->get_type()->getId()))) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Prints common controls like the save button and the ou selection.\n\t *\n\t * @param int $tabindex tabindex for GUI elements\n\t */\n\tprivate function printCommonControls(&$tabindex) {\n\t\t$row = new htmlResponsiveRow();\n\t\t$row->setCSSClasses(array('maxrow'));\n\t\t$leftButtonGroup = new htmlGroup();\n\t\t$leftButtonGroup->alignment = htmlElement::ALIGN_LEFT;\n\t\t// save button\n\t\t$saveButton = new htmlButton('accountContainerSaveAccount', _('Save'));\n\t\t$saveButton->setCSSClasses(array('fullwidth-mobile-only lam-primary'));\n\t\t$leftButtonGroup->addElement($saveButton);\n\t\t$leftButtonGroup->addElement(new htmlSpacer('1px', null));\n\t\t// set password button\n\t\tif ($this->showSetPasswordButton()) {\n\t\t\t$leftButtonGroup->addElement(new htmlSpacer('15px', null));\n\t\t\t$passwordButton = new htmlButton('accountContainerPassword', _('Set password'));\n\t\t\t$passwordButton->setCSSClasses(array('fullwidth-mobile-only lam-secondary'));\n\t\t\t$passwordButton->setOnClick('passwordShowChangeDialog(\\'' . _('Set password') . '\\', \\'' . _('Ok') . '\\', \\''\n\t\t\t\t. _('Cancel') . '\\', \\'' . _('Set random password') . '\\', \\'../misc/ajax.php?function=passwordChange&editKey=' . htmlspecialchars($this->base) . '\\',\\''\n\t\t\t\t. getSecurityTokenName() . '\\',\\'' . getSecurityTokenValue() . '\\');');\n\t\t\t$leftButtonGroup->addElement($passwordButton);\n\t\t}\n\t\t// delete button\n\t\tif (!$this->isNewAccount && checkIfDeleteEntriesIsAllowed($this->get_type()->getId())) {\n\t\t\t$leftButtonGroup->addElement(new htmlSpacer('15px', null));\n\t\t\t$deleteButton = new htmlButton('accountContainerDelete', _('Delete'));\n\t\t\t$deleteButton->setCSSClasses(array('fullwidth-mobile-only lam-danger'));\n\t\t\t$leftButtonGroup->addElement($deleteButton);\n\t\t}\n\t\t$leftButtonGroup->addElement(new htmlSpacer('15px', null));\n\t\t// reset button\n\t\tif (!$this->isNewAccount) {\n\t\t\t$resetButton = new htmlButton('accountContainerReset', _('Reset changes'));\n\t\t\t$resetButton->setCSSClasses(array('fullwidth-mobile-only'));\n\t\t\t$leftButtonGroup->addElement($resetButton);\n\t\t}\n\t\t$type = $this->type->getBaseType();\n\t\t$backToListButton = new htmlButton('accountContainerBackToList', $type->LABEL_BACK_TO_ACCOUNT_LIST);\n\t\t$backToListButton->setCSSClasses(array('fullwidth-mobile-only'));\n\t\t$leftButtonGroup->addElement($backToListButton);\n\t\t$row->add($leftButtonGroup, 12, 9);\n\n\t\t$rightGroup = new htmlGroup();\n\t\t// profile selection\n\t\t$accountProfilePersistenceManager = new AccountProfilePersistenceManager();\n\t\t$profilelist = $accountProfilePersistenceManager->getAccountProfileNames($this->type->getId(), $_SESSION['config']->getName());\n\t\tif (sizeof($profilelist) > 0) {\n\t\t\t$profilesSelect = new htmlSelect('accountContainerSelectLoadProfile', $profilelist, array($this->lastLoadedProfile));\n\t\t\t$profilesSelect->setCSSClasses(array('auto-width'));\n\t\t\t$rightGroup->addElement($profilesSelect);\n\t\t\t$profileButton = new htmlButton('accountContainerLoadProfile', _('Load profile'));\n\t\t\tif (!$this->isNewAccount) {\n\t\t\t\t$profileButton->setType('submit');\n\t\t\t\t$profileButton->setOnClick('confirmOrStopProcessing(\\'' . _('This may overwrite existing values with profile data. Continue?') . '\\', event);');\n\t\t\t}\n\t\t\t$rightGroup->addElement($profileButton);\n\t\t\t$rightGroup->addElement(new htmlSpacer('1px', null));\n\t\t\t$rightGroup->addElement(new htmlHelpLink('401'));\n\t\t}\n\t\t$row->add($rightGroup, 12, 3, 3, 'text-right');\n\n\t\tparseHtml(null, $row, array(), false, $tabindex, $this->type->getScope());\n\t}\n\n\t/**\n\t * Returns if the page should show a button to set the password.\n\t *\n\t * @return boolean show or hide button\n\t */\n\tprivate function showSetPasswordButton() {\n\t\tforeach ($this->module as $module) {\n\t\t\tif (($module instanceof passwordService) && $module->managesPasswordAttributes()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Prints the header of the account pages.\n\t */\n\tprivate function printPageHeader() {\n\t\tif (!empty($_POST)) {\n\t\t\tvalidateSecurityToken();\n\t\t}\n\t\tinclude '../../lib/adminHeader.inc';\n\t\techo '<script type=\"text/javascript\">\n\t\t\t\tjQuery(document).ready(function() {\n\t\t\t\t\tjQuery(\"#inputForm\").validationEngine({promptPosition: \"topLeft\", addFailureCssClassToField: \"lam-input-error\", autoHidePrompt: true, autoHideDelay: 5000});\n\t\t\t\t});\n\t\t\t</script>';\n\t\techo \"<form id=\\\"inputForm\\\" enctype=\\\"multipart/form-data\\\" action=\\\"edit.php?editKey=\" . htmlspecialchars($this->base) . \"\\\" method=\\\"post\\\" onSubmit=\\\"saveScrollPosition('inputForm')\\\" autocomplete=\\\"off\\\">\\n\";\n\t\techo '<input type=\"hidden\" name=\"' . getSecurityTokenName() . '\" value=\"' . getSecurityTokenValue() . '\">';\n\t}\n\n\t/**\n\t * Prints the footer of the account pages.\n\t */\n\tprivate function printPageFooter() {\n\t\techo \"</form>\\n\";\n\t\tinclude '../../lib/adminFooter.inc';\n\t}\n\n\t/**\n\t * Prints the HTML code to notify the user about the successful saving.\n\t *\n\t * @param array $messages array which contains status messages. Each entry is an array containing the status message parameters.\n\t */\n\tprivate function printSuccessPage($messages) {\n\t\t$this->printPageHeader();\n\t\t// Show success message\n\t\tif ($this->dn_orig == '') {\n\t\t\t$text = _(\"Account was created successfully.\");\n\t\t}\n\t\telse {\n\t\t\t$text = _(\"Account was modified successfully.\");\n\t\t}\n\t\techo \"<div smallPaddingContent\\\">\";\n\n\t\t$container = new htmlResponsiveRow();\n\t\t$container->addVerticalSpacer('2rem');\n\t\t// show messages\n\t\tfor ($i = 0; $i < sizeof($messages); $i++) {\n\t\t\tif (sizeof($messages[$i]) == 2) {\n\t\t\t\t$message = new htmlStatusMessage($messages[$i][0], $messages[$i][1]);\n\t\t\t\t$container->add($message);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$message = new htmlStatusMessage($messages[$i][0], $messages[$i][1], $messages[$i][2]);\n\t\t\t\t$container->add($message);\n\t\t\t}\n\t\t}\n\t\t$message = new htmlStatusMessage('INFO', _('LDAP operation successful.'), $text);\n\t\t$container->add($message);\n\t\t$container->addVerticalSpacer('2rem');\n\n\t\t$type = $this->type->getBaseType();\n\t\t$buttonGroup = new htmlGroup();\n\t\t$backToListButton = new htmlButton('accountContainerBackToList', $type->LABEL_BACK_TO_ACCOUNT_LIST);\n\t\t$backToListButton->setCSSClasses(array('lam-primary fullwidth-mobile-only'));\n\t\t$buttonGroup->addElement($backToListButton);\n\t\t$buttonGroup->addElement(new htmlSpacer('1rem', null));\n\t\tif (checkIfNewEntriesAreAllowed($this->type->getId())) {\n\t\t\t$createButton = new htmlButton('accountContainerCreateAgain', $type->LABEL_CREATE_ANOTHER_ACCOUNT);\n\t\t\t$createButton->setCSSClasses(array('lam-secondary fullwidth-mobile-only'));\n\t\t\t$buttonGroup->addElement($createButton);\n\t\t\t$buttonGroup->addElement(new htmlSpacer('0.5rem', null));\n\t\t}\n\t\t$pdfStructurePersistenceManager = new PdfStructurePersistenceManager();\n\t\t$pdfStructures = $pdfStructurePersistenceManager->getPDFStructures($_SESSION['config']->getName(), $this->type->getId());\n\t\tif ($pdfStructures) {\n\t\t\t$pdfButton = new htmlButton('accountContainerCreatePDF', _('Create PDF file'));\n\t\t\t$pdfButton->setCSSClasses(array('lam-secondary fullwidth-mobile-only'));\n\t\t\t$buttonGroup->addElement($pdfButton);\n\t\t\t$buttonGroup->addElement(new htmlSpacer('1rem', null));\n\t\t}\n\t\t$backToEditButton = new htmlButton('accountContainerBackToEdit', _('Edit again'));\n\t\t$backToEditButton->setCSSClasses(array('fullwidth-mobile-only'));\n\t\t$buttonGroup->addElement($backToEditButton);\n\t\t$container->add($buttonGroup);\n\n\t\t$tabindex = 1;\n\t\tparseHtml(null, $container, array(), false, $tabindex, $this->type->getScope());\n\n\t\techo \"</div>\\n\";\n\t\t$this->printPageFooter();\n\t}\n\n\t/**\n\t * Checks if the user requested to load a profile.\n\t *\n\t * @return boolean true, if profile was loaded\n\t */\n\tprivate function loadProfileIfRequested() {\n\t\tif (isset($_POST['accountContainerLoadProfile']) && isset($_POST['accountContainerSelectLoadProfile'])) {\n\t\t\t$accountProfilePersistenceManager = new AccountProfilePersistenceManager();\n\t\t\t$profile = $accountProfilePersistenceManager->loadAccountProfile($this->type->getId(), $_POST['accountContainerSelectLoadProfile'], $_SESSION['config']->getName());\n\t\t\t$this->lastLoadedProfile = $_POST['accountContainerSelectLoadProfile'];\n\t\t\t// pass profile to each module\n\t\t\t$modules = array_keys($this->module);\n\t\t\tforeach ($modules as $module) {\n\t\t\t\t$this->module[$module]->load_profile($profile);\n\t\t\t}\n\t\t\tif (isset($profile['ldap_rdn'][0])\n\t\t\t\t\t&& in_array($profile['ldap_rdn'][0], getRDNAttributes($this->type->getId()))) {\n\t\t\t\t$this->rdn = $profile['ldap_rdn'][0];\n\t\t\t}\n\t\t\tif (isset($profile['ldap_suffix'][0]) && ($profile['ldap_suffix'][0] != '-')) {\n\t\t\t\t$this->dnSuffix = $profile['ldap_suffix'][0];\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Prints the HTML code of the module tabs.\n\t */\n\tprivate function printModuleTabs() {\n\t\t// $x is used to count up tabindex\n\t\t$x=1;\n\t\techo '<ul class=\"ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all\">';\n\t\t// Loop for each module\n\t\tfor ($i = 0; $i < count($this->order); $i++) {\n\t\t\t$buttonStatus = $this->module[$this->order[$i]]->getButtonStatus();\n\t\t\t$alias = $this->module[$this->order[$i]]->get_alias();\n\t\t\t// skip hidden buttons\n\t\t\tif ($buttonStatus == 'hidden') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$buttonImage = $this->module[$this->order[$i]]->getIcon();\n\t\t\t$activatedClass = '';\n\t\t\tif ($this->order[$this->current_page] == $this->order[$i]) {\n\t\t\t\t$activatedClass = ' lam-tabs-selected';\n\t\t\t}\n\t\t\t// print button\n\t\t\techo '<li class=\"ui-state-default ui-corner-left' . $activatedClass . '\">';\n\t\t\techo \"<button class=\\\"lam-account-type\\\" name=\\\"form_main_\".$this->order[$i].\"\\\"\";\n\t\t\techo \" tabindex=$x\";\n\t\t\tif ($buttonStatus == 'disabled') {\n\t\t\t\techo \" disabled\";\n\t\t\t}\n\t\t\techo ' onmouseover=\"jQuery(this).addClass(\\'tabs-hover\\');\" onmouseout=\"jQuery(this).removeClass(\\'tabs-hover\\');\">';\n\t\t\tif ($buttonImage != null) {\n\t\t\t\tif (!(strpos($buttonImage, 'http') === 0) && !(strpos($buttonImage, '/') === 0)) {\n\t\t\t\t\t$buttonImage = '../../graphics/' . $buttonImage;\n\t\t\t\t}\n\t\t\t\techo \"<img height=32 width=32 class=\\\"align-middle\\\" style=\\\"padding: 3px;\\\" alt=\\\"\\\" src=\\\"$buttonImage\\\">&nbsp;\";\n\t\t\t}\n\t\t\techo '<span class=\"hide-on-mobile\">';\n\t\t\techo $alias;\n\t\t\techo '<span>';\n\t\t\techo \"&nbsp;</button>\\n\";\n\t\t\techo \"</li>\\n\";\n\t\t\t$x++;\n\t\t}\n\t\techo '</ul>';\n\t}\n\n\t/**\n\t* This function checks which LDAP attributes have changed while the account was edited.\n\t*\n\t* @param array $attributes list of current LDAP attributes\n\t* @param array $orig list of old attributes when account was loaded\n\t* @return array an array which can be passed to $this->saveAccount()\n\t*/\n\tfunction save_module_attributes($attributes, $orig) {\n\t\t$return = array();\n\t\t$toadd = array();\n\t\t$tomodify = array();\n\t\t$torem = array();\n\t\t$notchanged = array();\n\t\t// get list of all attributes\n\t\t$attr_names = array_keys($attributes);\n\t\t$orig_names = array_keys($orig);\n\t\t// find deleted attributes (in $orig but no longer in $attributes)\n\t\tforeach ($orig_names as $i => $value) {\n\t\t\tif (!isset($attributes[$value])) {\n\t\t\t\t$torem[$value] = $orig[$value];\n\t\t\t}\n\t\t}\n\t\t// find changed attributes\n\t\tforeach ($attr_names as $i => $name) {\n\t\t\t// find deleted attributes\n\t\t\tif (isset($orig[$name]) && is_array($orig[$name])) {\n\t\t\t\tforeach ($orig[$name] as $value) {\n\t\t\t\t\tif (is_array($attributes[$name])) {\n\t\t\t\t\t\tif (!in_array($value, $attributes[$name], true)\n\t\t\t\t\t\t\t\t&& ($value !== null)\n\t\t\t\t\t\t\t\t&& ($value !== '')) {\n\t\t\t\t\t\t\t$torem[$name][] = $value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telseif (($value !== null) && ($value !== '')) {\n\t\t\t\t\t\t$torem[$name][] = $value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// find new attributes\n\t\t\tif (isset($attributes[$name]) && is_array($attributes[$name])) {\n\t\t\t\tforeach ($attributes[$name] as $value) {\n\t\t\t\t\tif (isset($orig[$name]) && is_array($orig[$name])) {\n\t\t\t\t\t\tif (!in_array($value, $orig[$name], true)\n\t\t\t\t\t\t\t\t&& ($value !== null)\n\t\t\t\t\t\t\t\t&& ($value !== ''))\n\t\t\t\t\t\t\t$toadd[$name][] = $value;\n\t\t\t\t\t}\n\t\t\t\t\telseif (($value !== null) && ($value !== '')) {\n\t\t\t\t\t\t$toadd[$name][] = $value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// find unchanged attributes\n\t\t\tif (isset($orig[$name]) && is_array($orig[$name]) && is_array($attributes[$name])) {\n\t\t\t\tforeach ($attributes[$name] as $value) {\n\t\t\t\t\tif (($value !== null) && ($value !== '') && in_array($value, $orig[$name], true)) {\n\t\t\t\t\t\t$notchanged[$name][] = $value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// create modify with add and remove\n\t\t$attributes2 = array_keys($toadd);\n\t\tfor ($i=0; $i<count($attributes2); $i++) {\n\t\t\tif (isset($torem[$attributes2[$i]]) && (count($toadd[$attributes2[$i]]) > 0) && (count($torem[$attributes2[$i]]) > 0)) {\n\t\t\t\t// found attribute which should be modified\n\t\t\t\t$tomodify[$attributes2[$i]] = $toadd[$attributes2[$i]];\n\t\t\t\t// merge unchanged values\n\t\t\t\tif (isset($notchanged[$attributes2[$i]])) {\n\t\t\t\t\t$tomodify[$attributes2[$i]] = array_merge($tomodify[$attributes2[$i]], $notchanged[$attributes2[$i]]);\n\t\t\t\t\tunset($notchanged[$attributes2[$i]]);\n\t\t\t\t}\n\t\t\t\t// remove old add and remove commands\n\t\t\t\tunset($toadd[$attributes2[$i]]);\n\t\t\t\tunset($torem[$attributes2[$i]]);\n\t\t\t}\n\t\t}\n\t\tif (count($toadd) > 0) {\n\t\t\t$return[$this->dn_orig]['add'] = $toadd;\n\t\t}\n\t\tif (count($torem) > 0) {\n\t\t\t$return[$this->dn_orig]['remove'] = $torem;\n\t\t}\n\t\tif (count($tomodify) > 0) {\n\t\t\t$return[$this->dn_orig]['modify'] = $tomodify;\n\t\t}\n\t\tif (count($notchanged) > 0) {\n\t\t\t$return[$this->dn_orig]['notchanged'] = $notchanged;\n\t\t}\n\t\treturn $return;\n\t}\n\n\t/**\n\t* Loads an LDAP account with the given DN.\n\t*\n\t* @param string $dn the DN of the account\n\t* @param array $infoAttributes list of additional informational attributes that are added to the LDAP attributes\n\t* E.g. this is used to inject the clear text password in the file upload. Informational attribute names must start with \"INFO.\".\n\t* @return array error messages\n\t*/\n\tfunction load_account($dn, $infoAttributes = array()) {\n\t\tlogNewMessage(LOG_DEBUG, \"Edit account \" . $dn);\n\t\t$this->extraInfoAttributes['INFO.isNewAccount'] = 'no';\n\t\t$this->extraInfoAttributes['INFO.passwordUpdated'] = 'no';\n\t\t$this->extraInfoAttributes['INFO.passwordChangeType'] = 'none';\n\t\t$this->module = array();\n\t\t$modules = $_SESSION['config']->get_AccountModules($this->type->getId());\n\t\t$filter = 'objectClass=*';\n\t\t$searchAttrs = array('*', '+');\n\t\tforeach ($modules as $module) {\n\t\t\t$modTmp = new $module($this->type->getScope());\n\t\t\t$searchAttrs = array_merge($searchAttrs, $modTmp->getManagedHiddenAttributes($this->type->getId()));\n\t\t}\n\t\t$result = @ldap_read($_SESSION['ldap']->server(), $dn, $filter, $searchAttrs, 0, 0, 0, LDAP_DEREF_NEVER);\n\t\tif (!$result) {\n\t\t\treturn array(array(\"ERROR\", _(\"Unable to load LDAP entry:\") . \" \" . htmlspecialchars($dn), getDefaultLDAPErrorString($_SESSION['ldap']->server())));\n\t\t}\n\t\t$entry = @ldap_first_entry($_SESSION['ldap']->server(), $result);\n\t\tif (!$entry) {\n\t\t\treturn array(array(\"ERROR\", _(\"Unable to load LDAP entry:\") . \" \" . htmlspecialchars($dn), getDefaultLDAPErrorString($_SESSION['ldap']->server())));\n\t\t}\n\t\t$this->dnSuffix = extractDNSuffix($dn);\n\t\t$this->dn_orig = $dn;\n\t\t// extract RDN\n\t\t$this->rdn = extractRDNAttribute($dn);\n\t\t$attr = ldap_get_attributes($_SESSION['ldap']->server(), $entry);\n\t\t$attr = array($attr);\n\t\tcleanLDAPResult($attr);\n\t\t$attr = $attr[0];\n\t\t// fix spelling errors\n\t\t$attr = $this->fixLDAPAttributes($attr, $modules);\n\t\t// get binary attributes\n\t\t$binaryAttr = array('jpegPhoto');\n\t\tfor ($i = 0; $i < sizeof($binaryAttr); $i++) {\n\t\t\tif (isset($attr[$binaryAttr[$i]][0])) {\n\t\t\t\t$binData = ldap_get_values_len($_SESSION['ldap']->server(), $entry, $binaryAttr[$i]);\n\t\t\t\tunset($binData['count']);\n\t\t\t\t$attr[$binaryAttr[$i]] = $binData;\n\t\t\t}\n\t\t}\n\t\t// add informational attributes\n\t\t$attr = array_merge($attr, $infoAttributes);\n\t\t// save original attributes\n\t\t$this->attributes_orig = $attr;\n\n\t\tforeach ($modules as $module) {\n\t\t\tif (!isset($this->module[$module])) {\n\t\t\t\t$this->module[$module] = new $module($this->type->getScope());\n\t\t\t\t$this->module[$module]->init($this->base);\n\t\t\t}\n\t\t\t$this->module[$module]->load_attributes($attr);\n\t\t}\n\n\t\t// sort module buttons\n\t\t$this->sortModules();\n\t\t// get titles\n\t\t$typeObject = $this->type->getBaseType();\n\t\t$this->titleBarTitle = $typeObject->getTitleBarTitle($this);\n\t\t$this->titleBarSubtitle = $typeObject->getTitleBarSubtitle($this);\n\t\treturn array();\n\t}\n\n\t/**\n\t * Fixes spelling errors in the attribute names.\n\t *\n\t * @param array $attributes LDAP attributes\n\t * @param array $modules list of active modules\n\t * @return array fixed attributes\n\t */\n\tfunction fixLDAPAttributes($attributes, $modules) {\n\t\tif (!is_array($attributes)) {\n\t\t\treturn $attributes;\n\t\t}\n\t\t$keys = array_keys($attributes);\n\t\t// get correct object class names, aliases and attributes\n\t\t$objectClasses = array();\n\t\t$aliases = array();\n\t\t$ldapAttributesTemp = array();\n\t\tforeach ($modules as $module) {\n\t\t\t$moduleObj = moduleCache::getModule($module, $this->type->getScope());\n\t\t\t$objectClasses = array_merge($objectClasses, $moduleObj->getManagedObjectClasses($this->type->getId()));\n\t\t\t$aliases = array_merge($aliases, $moduleObj->getLDAPAliases($this->type->getId()));\n\t\t\t$ldapAttributesTemp = array_merge($ldapAttributesTemp,\n\t\t\t\t$moduleObj->getManagedAttributes($this->type->getId()),\n\t\t\t\t$moduleObj->getManagedHiddenAttributes($this->type->getId()));\n\t\t}\n\t\t// build lower case attribute names\n\t\t$ldapAttributes = array();\n\t\tfor ($i = 0; $i < sizeof($ldapAttributesTemp); $i++) {\n\t\t\t$ldapAttributes[strtolower($ldapAttributesTemp[$i])] = $ldapAttributesTemp[$i];\n\t\t\tunset($ldapAttributes[$i]);\n\t\t}\n\t\t$ldapAttributesKeys = array_keys($ldapAttributes);\n\t\t// convert alias names to lower case (for easier comparison)\n\t\t$aliasKeys = array_keys($aliases);\n\t\tfor ($i = 0; $i < sizeof($aliasKeys); $i++) {\n\t\t\tif ($aliasKeys[$i] != strtolower($aliasKeys[$i])) {\n\t\t\t\t$aliases[strtolower($aliasKeys[$i])] = $aliases[$aliasKeys[$i]];\n\t\t\t\tunset($aliases[$aliasKeys[$i]]);\n\t\t\t\t$aliasKeys[$i] = strtolower($aliasKeys[$i]);\n\t\t\t}\n\t\t}\n\t\t// fix object classes and attributes\n\t\tfor ($i = 0; $i < sizeof($keys); $i++) {\n\t\t\t// check object classes\n\t\t\tif (strtolower($keys[$i]) == 'objectclass') {\n\t\t\t\t// fix object class attribute\n\t\t\t\tif ($keys[$i] != 'objectClass') {\n\t\t\t\t\t$temp = $attributes[$keys[$i]];\n\t\t\t\t\tunset($attributes[$keys[$i]]);\n\t\t\t\t\t$attributes['objectClass'] = $temp;\n\t\t\t\t}\n\t\t\t\t// fix object classes\n\t\t\t\tfor ($attrClass = 0; $attrClass < sizeof($attributes['objectClass']); $attrClass++) {\n\t\t\t\t\tfor ($modClass = 0; $modClass < sizeof($objectClasses); $modClass++) {\n\t\t\t\t\t\tif (strtolower($attributes['objectClass'][$attrClass]) == strtolower($objectClasses[$modClass])) {\n\t\t\t\t\t\t\tif ($attributes['objectClass'][$attrClass] != $objectClasses[$modClass]) {\n\t\t\t\t\t\t\t\tunset($attributes['objectClass'][$attrClass]);\n\t\t\t\t\t\t\t\t$attributes['objectClass'][] = $objectClasses[$modClass];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// fix aliases\n\t\t\t\tif (in_array(strtolower($keys[$i]), $aliasKeys)) {\n\t\t\t\t\t$attributes[$aliases[strtolower($keys[$i])]] = $attributes[$keys[$i]];\n\t\t\t\t\tunset($attributes[$keys[$i]]);\n\t\t\t\t}\n\t\t\t\t// fix attribute names\n\t\t\t\telseif (in_array(strtolower($keys[$i]), $ldapAttributesKeys)) {\n\t\t\t\t\tif ($keys[$i] != $ldapAttributes[strtolower($keys[$i])]) {\n\t\t\t\t\t\t$attributes[$ldapAttributes[strtolower($keys[$i])]] = $attributes[$keys[$i]];\n\t\t\t\t\t\tunset($attributes[$keys[$i]]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $attributes;\n\t}\n\n\t/**\n\t* This function will prepare the object for a new account.\n\t*/\n\tpublic function new_account() {\n\t\tlogNewMessage(LOG_DEBUG, \"New account with type \" . $this->type->getId());\n\t\t$this->isNewAccount = true;\n\t\t$this->lastLoadedProfile = 'default';\n\t\t$this->initModules();\n\t\t$this->extraInfoAttributes['INFO.isNewAccount'] = 'yes';\n\t\t$this->extraInfoAttributes['INFO.passwordUpdated'] = 'no';\n\t\t// sort module buttons\n\t\t$this->sortModules();\n\t\t$profileName = 'default';\n\t\t$profileCookieKey = 'defaultProfile_' . $this->get_type()->getId();\n\t\ttry {\n\t\t\t$accountProfilePersistenceManager = new AccountProfilePersistenceManager();\n\t\t\tif (!empty($_COOKIE[$profileCookieKey])) {\n\t\t\t\t$cookieProfileName = $_COOKIE[$profileCookieKey];\n\t\t\t\tif ($accountProfilePersistenceManager->isAccountProfileExisting($this->get_type()->getId(), $cookieProfileName, $_SESSION['config']->getName())) {\n\t\t\t\t\t$profileName = $cookieProfileName;\n\t\t\t\t\t$this->lastLoadedProfile = $cookieProfileName;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$profile = $accountProfilePersistenceManager->loadAccountProfile($this->type->getId(), $profileName, $_SESSION['config']->getName());\n\t\t\t// pass profile to each module\n\t\t\t$modules = array_keys($this->module);\n\t\t\tforeach ($modules as $module) {\n\t\t\t\t$this->module[$module]->load_profile($profile);\n\t\t\t}\n\t\t\tif (isset($profile['ldap_rdn'][0]) && in_array($profile['ldap_rdn'][0], getRDNAttributes($this->type->getId()))) {\n\t\t\t\t$this->rdn = $profile['ldap_rdn'][0];\n\t\t\t}\n\t\t\tif (isset($profile['ldap_suffix'][0]) && ($profile['ldap_suffix'][0] != '-')) {\n\t\t\t\t$this->dnSuffix = $profile['ldap_suffix'][0];\n\t\t\t}\n\t\t}\n\t\tcatch (LAMException $e) {\n\t\t\tlogNewMessage(LOG_ERR, $e->getTitle());\n\t\t}\n\t\t// get titles\n\t\t$typeObject = $this->type->getBaseType();\n\t\t$this->titleBarTitle = $typeObject->getTitleBarTitle($this);\n\t\t$this->titleBarSubtitle = $typeObject->getTitleBarSubtitle($this);\n\t\treturn 0;\n\t}\n\n\t/**\n\t * Copies the data from the given account to this one.\n\t *\n\t * @param string $copyDn DN to copy from\n\t */\n\tpublic function copyFromExistingAccount(string $copyDn) : void {\n\t\t$copyData = ldapGetDN($copyDn, array('*', '+'));\n\t\t$modules = $_SESSION['config']->get_AccountModules($this->type->getId());\n\t\t$copyData = $this->fixLDAPAttributes($copyData, $modules);\n\t\tforeach ($this->module as $accountModule) {\n\t\t\t$accountModule->loadAttributesFromAccountCopy($copyData);\n\t\t}\n\t}\n\n\t/**\n\t * Creates the account modules and initializes them.\n\t */\n\tpublic function initModules() {\n\t\t$modules = $_SESSION['config']->get_AccountModules($this->type->getId());\n\t\tforeach ($modules as $module) {\n\t\t\t$this->module[$module] = new $module($this->type->getScope());\n\t\t\t$this->module[$module]->init($this->base);\n\t\t}\n\t}\n\n\t/**\n\t* This function will save an account to the LDAP database.\n\t*\n\t* @return array list of status messages\n\t*/\n\tprivate function save_account() {\n\t\tif (!checkIfWriteAccessIsAllowed($this->type->getId())) {\n\t\t\tdie();\n\t\t}\n\t\t$this->finalDN = $this->dn_orig;\n\t\t$errors = array();\n\t\t$module = array_keys($this->module);\n\t\t$attributes = array();\n\t\t// load attributes\n\t\tforeach ($module as $singlemodule) {\n\t\t\t// load changes\n\t\t\t$temp = $this->module[$singlemodule]->save_attributes();\n\t\t\tif (!is_array($temp)) {\n\t\t\t\t$temp = array();\n\t\t\t}\n\t\t\t// merge changes\n\t\t\t$DNs = array_keys($temp);\n\t\t\tif (is_array($temp)) {\n\t\t\t\t$attributes = array_merge_recursive($temp, $attributes);\n\t\t\t}\n\t\t\tfor ($i = 0; $i < count($DNs); $i++) {\n\t\t\t\t$ops = array_keys($temp[$DNs[$i]]);\n\t\t\t\tfor ($j=0; $j<count($ops); $j++) {\n\t\t\t\t\t$attrs = array_keys($temp[$DNs[$i]][$ops[$j]]);\n\t\t\t\t\tfor ($k=0; $k<count($attrs); $k++) {\n\t\t\t\t\t\t$attributes[$DNs[$i]][$ops[$j]][$attrs[$k]] = array_values(array_unique($attributes[$DNs[$i]][$ops[$j]][$attrs[$k]]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// build DN for new accounts and change it for existing ones if needed\n\t\tif (isset($attributes[$this->dn_orig]['modify'][$this->rdn][0])) {\n\t\t\t$this->finalDN = $this->rdn . '=' . ldap_escape($attributes[$this->dn_orig]['modify'][$this->rdn][0], '', LDAP_ESCAPE_DN) . ',' . $this->dnSuffix;\n\t\t\tif ($this->dn_orig != $this->finalDN) {\n\t\t\t\t$attributes[$this->finalDN] = $attributes[$this->dn_orig];\n\t\t\t\tunset($attributes[$this->dn_orig]);\n\t\t\t}\n\t\t}\n\t\telseif (isset($attributes[$this->dn_orig]['add'][$this->rdn][0])) {\n\t\t\t$this->finalDN = $this->rdn . '=' . ldap_escape($attributes[$this->dn_orig]['add'][$this->rdn][0], '', LDAP_ESCAPE_DN) . ',' . $this->dnSuffix;\n\t\t\tif ($this->dn_orig != $this->finalDN) {\n\t\t\t\t$attributes[$this->finalDN] = $attributes[$this->dn_orig];\n\t\t\t\tunset($attributes[$this->dn_orig]);\n\t\t\t}\n\t\t}\n\t\telseif (isset($attributes[$this->dn_orig]['remove'][$this->rdn][0]) && isset($attributes[$this->dn_orig]['notchanged'][$this->rdn][0])) {\n\t\t\t$this->finalDN = $this->rdn . '=' . ldap_escape($attributes[$this->dn_orig]['notchanged'][$this->rdn][0], '', LDAP_ESCAPE_DN) . ',' . $this->dnSuffix;\n\t\t\tif ($this->dn_orig != $this->finalDN) {\n\t\t\t\t$attributes[$this->finalDN] = $attributes[$this->dn_orig];\n\t\t\t\tunset($attributes[$this->dn_orig]);\n\t\t\t}\n\t\t}\n\t\telseif (!$this->isNewAccount && (($this->dnSuffix != extractDNSuffix($this->dn_orig)) || ($this->rdn != extractRDNAttribute($this->dn_orig)))) {\n\t\t\t$this->finalDN = $this->rdn . '=' . ldap_escape($attributes[$this->dn_orig]['notchanged'][$this->rdn][0], '', LDAP_ESCAPE_DN) . ',' . $this->dnSuffix;\n\t\t\t$attributes[$this->finalDN] = $attributes[$this->dn_orig];\n\t\t\tunset($attributes[$this->dn_orig]);\n\t\t}\n\t\t// remove pwdAccountLockedTime attribute change if also userPassword is changed (PPolicy will remove this attribute itself)\n\t\tif (isset($attributes[$this->finalDN]['modify']['userpassword']) || isset($attributes[$this->finalDN]['remove']['userpassword'])) {\n\t\t\tif (isset($attributes[$this->finalDN]['modify']['pwdAccountLockedTime'])) {\n\t\t\t\tunset($attributes[$this->finalDN]['modify']['pwdAccountLockedTime']);\n\t\t\t}\n\t\t\tif (isset($attributes[$this->finalDN]['remove']['pwdAccountLockedTime'])) {\n\t\t\t\tunset($attributes[$this->finalDN]['remove']['pwdAccountLockedTime']);\n\t\t\t}\n\t\t}\n\t\t// pre modify actions\n\t\t$prePostModifyAttributes = $this->extraInfoAttributes;\n\t\tif (isset($attributes[$this->finalDN]) && is_array($attributes[$this->finalDN])) {\n\t\t\tif (isset($attributes[$this->finalDN]['notchanged'])) {\n\t\t\t\t$prePostModifyAttributes = array_merge($prePostModifyAttributes, $attributes[$this->finalDN]['notchanged']);\n\t\t\t}\n\t\t\tif (isset($attributes[$this->finalDN]['modify'])) {\n\t\t\t\tforeach ($attributes[$this->finalDN]['modify'] as $key => $value) {\n\t\t\t\t\t$prePostModifyAttributes[$key] = &$attributes[$this->finalDN]['modify'][$key];\n\t\t\t\t}\n\t\t\t\tforeach ($attributes[$this->finalDN]['modify'] as $key => $value) {\n\t\t\t\t\t$prePostModifyAttributes['MOD.' . $key] = $value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isset($attributes[$this->finalDN]['add'])) {\n\t\t\t\tforeach ($attributes[$this->finalDN]['add'] as $key => $value) {\n\t\t\t\t\t$prePostModifyAttributes[$key] = &$attributes[$this->finalDN]['add'][$key];\n\t\t\t\t}\n\t\t\t\tforeach ($attributes[$this->finalDN]['add'] as $key => $value) {\n\t\t\t\t\t$prePostModifyAttributes['NEW.' . $key] = $value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isset($attributes[$this->finalDN]['remove'])) {\n\t\t\t\tforeach ($attributes[$this->finalDN]['remove'] as $key => $value) {\n\t\t\t\t\t$prePostModifyAttributes['DEL.' . $key] = $value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isset($attributes[$this->finalDN]['info'])) {\n\t\t\t\tforeach ($attributes[$this->finalDN]['info'] as $key => $value) {\n\t\t\t\t\t$prePostModifyAttributes['INFO.' . $key] = $value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!$this->isNewAccount) {\n\t\t\tforeach ($this->attributes_orig as $key => $value) {\n\t\t\t\t$prePostModifyAttributes['ORIG.' . $key] = $value;\n\t\t\t}\n\t\t\t$prePostModifyAttributes['ORIG.dn'][0] = $this->dn_orig;\n\t\t}\n\t\t$prePostModifyAttributes['dn'][0] = $this->finalDN;\n\t\tif (!$this->isNewAccount && ($this->finalDN != $this->dn_orig)) {\n\t\t\t$prePostModifyAttributes['MOD.dn'][0] = $this->finalDN;\n\t\t}\n\t\tlogNewMessage(LOG_DEBUG, 'Edit page pre/postModify attributes: ' . print_r($prePostModifyAttributes, true));\n\t\t$preModifyOk = true;\n\t\tforeach ($module as $singlemodule) {\n\t\t\t$preModifyMessages = $this->module[$singlemodule]->preModifyActions($this->isNewAccount, $prePostModifyAttributes);\n\t\t\t$errors = array_merge($errors, $preModifyMessages);\n\t\t\tfor ($i = 0; $i < sizeof($preModifyMessages); $i++) {\n\t\t\t\tif ($preModifyMessages[$i][0] == 'ERROR') {\n\t\t\t\t\t$preModifyOk = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!$preModifyOk) {\n\t\t\t$errors[] = array('ERROR', _('The operation was stopped because of the above errors.'));\n\t\t\treturn $errors;\n\t\t}\n\t\t// Set to true if an real error has happened\n\t\t$stopprocessing = false;\n\t\t$finalDnLower = strtolower($this->finalDN);\n\t\t$dnOrigLower = strtolower($this->dn_orig);\n\t\tif (($finalDnLower !== $dnOrigLower) && (unescapeLdapSpecialCharacters($finalDnLower) !== unescapeLdapSpecialCharacters($dnOrigLower))) {\n\t\t\t// move existing DN\n\t\t\tif ($this->dn_orig != '') {\n\t\t\t\t$removeOldRDN = $_SESSION['ldap']->isActiveDirectory();\n\t\t\t\tif (isset($attributes[$this->finalDN]['modify'])) {\n\t\t\t\t\t$attributes[$this->finalDN]['modify'] = array_change_key_case($attributes[$this->finalDN]['modify'], CASE_LOWER);\n\t\t\t\t}\n\t\t\t\t$rdnAttr = strtolower(extractRDNAttribute($this->finalDN));\n\t\t\t\tif (isset($attributes[$this->finalDN]['modify'][$rdnAttr])\n\t\t\t\t\t\t&& (sizeof($attributes[$this->finalDN]['modify'][$rdnAttr]) == 1)\n\t\t\t\t\t\t&& (($attributes[$this->finalDN]['modify'][$rdnAttr][0] == extractRDNValue($this->finalDN))\n\t\t\t\t\t\t\t|| (unescapeLdapSpecialCharacters($attributes[$this->finalDN]['modify'][$rdnAttr][0]) == unescapeLdapSpecialCharacters(extractRDNValue($this->finalDN))))) {\n\t\t\t\t\t// remove old RDN if attribute is single valued\n\t\t\t\t\t$removeOldRDN = true;\n\t\t\t\t\tunset($attributes[$this->finalDN]['modify'][extractRDNAttribute($this->finalDN)]);\n\t\t\t\t}\n\t\t\t\tlogNewMessage(LOG_DEBUG, 'Rename ' . $this->dn_orig . ' to ' . $this->finalDN);\n\t\t\t\t$success = ldap_rename($_SESSION['ldap']->server(), $this->dn_orig, $this->getRDN($this->finalDN), $this->getParentDN($this->finalDN), $removeOldRDN);\n\t\t\t\tif ($success) {\n\t\t\t\t\tlogNewMessage(LOG_NOTICE, 'Renamed DN ' . $this->dn_orig . \" to \" . $this->finalDN);\n\t\t\t\t\t// do not add attribute value as new one if added via rename operation\n\t\t\t\t\tif (!empty($attributes[$this->finalDN]['add'][$rdnAttr]) && in_array(extractRDNValue($this->finalDN), $attributes[$this->finalDN]['add'][$rdnAttr])) {\n\t\t\t\t\t\t$attributes[$this->finalDN]['add'][$rdnAttr] = array_delete(array(extractRDNValue($this->finalDN)), $attributes[$this->finalDN]['add'][$rdnAttr]);\n\t\t\t\t\t\tif (empty($attributes[$this->finalDN]['add'][$rdnAttr])) {\n\t\t\t\t\t\t\tunset($attributes[$this->finalDN]['add'][$rdnAttr]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlogNewMessage(LOG_ERR, 'Unable to rename DN: ' . $this->dn_orig . ' (' . ldap_error($_SESSION['ldap']->server()) . '). '\n\t\t\t\t\t\t. getExtendedLDAPErrorMessage($_SESSION['ldap']->server()));\n\t\t\t\t\t$errors[] = array('ERROR', sprintf(_('Was unable to rename DN: %s.'), $this->dn_orig), getDefaultLDAPErrorString($_SESSION['ldap']->server()));\n\t\t\t\t\t$stopprocessing = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// create complete new dn\n\t\t\telse {\n\t\t\t\t$attr = array();\n\t\t\t\tif (isset($attributes[$this->finalDN]['add']) && is_array($attributes[$this->finalDN]['add'])) {\n\t\t\t\t\t$attr = array_merge_recursive($attr, $attributes[$this->finalDN]['add']);\n\t\t\t\t}\n\t\t\t\tif (isset($attributes[$this->finalDN]['notchanged']) && is_array($attributes[$this->finalDN]['notchanged'])) {\n\t\t\t\t\t$attr = array_merge_recursive($attr, $attributes[$this->finalDN]['notchanged']);\n\t\t\t\t}\n\t\t\t\tif (isset($attributes[$this->finalDN]['modify']) && is_array($attributes[$this->finalDN]['modify'])) {\n\t\t\t\t\t$attr = array_merge_recursive($attr, $attributes[$this->finalDN]['modify']);\n\t\t\t\t}\n\t\t\t\t$success = @ldap_add($_SESSION['ldap']->server(), $this->finalDN, $attr);\n\t\t\t\tif (!$success) {\n\t\t\t\t\tlogNewMessage(LOG_ERR, 'Unable to create DN: ' . $this->finalDN . ' (' . ldap_error($_SESSION['ldap']->server()) . '). '\n\t\t\t\t\t\t. getExtendedLDAPErrorMessage($_SESSION['ldap']->server()));\n\t\t\t\t\t$errors[] = array('ERROR', sprintf(_('Was unable to create DN: %s.'), $this->finalDN), getDefaultLDAPErrorString($_SESSION['ldap']->server()));\n\t\t\t\t\t$stopprocessing = true;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlogNewMessage(LOG_NOTICE, 'Created DN: ' . $this->finalDN);\n\t\t\t\t}\n\t\t\t\tunset($attributes[$this->finalDN]);\n\t\t\t}\n\t\t}\n\t\t$DNs = array_keys($attributes);\n\t\tfor ($i=0; $i<count($DNs); $i++) {\n\t\t\tif (!$stopprocessing) {\n\t\t\t\tlogNewMessage(LOG_DEBUG, 'Attribute changes for ' . $DNs[$i] . \":\\n\" . print_r($attributes[$DNs[$i]], true));\n\t\t\t\t// modify attributes\n\t\t\t\tif (!empty($attributes[$DNs[$i]]['modify']) && !$stopprocessing) {\n\t\t\t\t\t$success = @ldap_mod_replace($_SESSION['ldap']->server(), $DNs[$i], $attributes[$DNs[$i]]['modify']);\n\t\t\t\t\tif (!$success) {\n\t\t\t\t\t\tlogNewMessage(LOG_ERR, 'Unable to modify attributes of DN: ' . $DNs[$i] . ' (' . ldap_error($_SESSION['ldap']->server()) . '). '\n\t\t\t\t\t\t\t. getExtendedLDAPErrorMessage($_SESSION['ldap']->server()));\n\t\t\t\t\t\tlogNewMessage(LOG_DEBUG, print_r($attributes[$DNs[$i]]['modify'], true));\n\t\t\t\t\t\t$errors[] = array('ERROR', sprintf(_('Was unable to modify attributes of DN: %s.'), $DNs[$i]), getDefaultLDAPErrorString($_SESSION['ldap']->server()));\n\t\t\t\t\t\t$stopprocessing = true;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tlogNewMessage(LOG_NOTICE, 'Modified DN: ' . $DNs[$i]);\n\t\t\t\t\t\t// check if the password of the currently logged in user was changed\n\t\t\t\t\t\t$lamAdmin = $_SESSION['ldap']->getUserName();\n\t\t\t\t\t\tif ((strtolower($DNs[$i]) == strtolower($lamAdmin)) && isset($attributes[$DNs[$i]]['info']['userPasswordClearText'][0])) {\n\t\t\t\t\t\t\t$_SESSION['ldap']->tryAndApplyNewPassword($attributes[$DNs[$i]]['info']['userPasswordClearText'][0]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// add attributes\n\t\t\t\tif (!empty($attributes[$DNs[$i]]['add']) && !$stopprocessing) {\n\t\t\t\t\t$success = @ldap_mod_add($_SESSION['ldap']->server(), $DNs[$i], $attributes[$DNs[$i]]['add']);\n\t\t\t\t\tif (!$success) {\n\t\t\t\t\t\tlogNewMessage(LOG_ERR, 'Unable to add attributes to DN: ' . $DNs[$i] . ' (' . ldap_error($_SESSION['ldap']->server()) . '). '\n\t\t\t\t\t\t\t. getExtendedLDAPErrorMessage($_SESSION['ldap']->server()));\n\t\t\t\t\t\t$errors[] = array('ERROR', sprintf(_('Was unable to add attributes to DN: %s.'), $DNs[$i]), getDefaultLDAPErrorString($_SESSION['ldap']->server()));\n\t\t\t\t\t\t$stopprocessing = true;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tlogNewMessage(LOG_NOTICE, 'Modified DN: ' . $DNs[$i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// remove attributes\n\t\t\t\tif (!empty($attributes[$DNs[$i]]['remove']) && !$stopprocessing) {\n\t\t\t\t\t$success = @ldap_mod_del($_SESSION['ldap']->server(), $DNs[$i], $attributes[$DNs[$i]]['remove']);\n\t\t\t\t\tif (!$success) {\n\t\t\t\t\t\tlogNewMessage(LOG_ERR, 'Unable to delete attributes from DN: ' . $DNs[$i] . ' (' . ldap_error($_SESSION['ldap']->server()) . '). '\n\t\t\t\t\t\t\t. getExtendedLDAPErrorMessage($_SESSION['ldap']->server()));\n\t\t\t\t\t\t$errors[] = array('ERROR', sprintf(_('Was unable to remove attributes from DN: %s.'), $DNs[$i]), getDefaultLDAPErrorString($_SESSION['ldap']->server()));\n\t\t\t\t\t\t$stopprocessing = true;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tlogNewMessage(LOG_NOTICE, 'Modified DN: ' . $DNs[$i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// send password mail\n\t\tif (!$stopprocessing && isLAMProVersion() && ($this->sendPasswordViaMail != null)) {\n\t\t\t$mailMessages = sendPasswordMail($this->sendPasswordViaMail, $prePostModifyAttributes, $this->sendPasswordViaMailAlternateAddress);\n\t\t\tif (sizeof($mailMessages) > 0) {\n\t\t\t\t$errors = array_merge($errors, $mailMessages);\n\t\t\t}\n\t\t\t$this->sendPasswordViaMail = null;\n\t\t\t$this->sendPasswordViaMailAlternateAddress = null;\n\t\t}\n\t\tif (!$stopprocessing) {\n\t\t\t// post modify actions\n\t\t\tforeach ($module as $singlemodule) {\n\t\t\t\t$postMessages = $this->module[$singlemodule]->postModifyActions($this->isNewAccount, $prePostModifyAttributes);\n\t\t\t\t$errors = array_merge($errors, $postMessages);\n\t\t\t}\n\t\t}\n\t\treturn $errors;\n\t}\n\n\t/**\n\t * Defines if the LDAP entry has only virtual child entries. This is the case for e.g. LDAP views.\n\t *\n\t * @return boolean has only virtual children\n\t */\n\tpublic function hasOnlyVirtualChildren() {\n\t\tforeach ($this->module as $module) {\n\t\t\tif ($module->hasOnlyVirtualChildren()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns a list of possible PDF entries for this account.\n\t *\n\t * @param array $pdfKeys list of PDF keys that are included in document\n\t * @param string $typeId type id (user, group, host)\n\t * @return PDFEntry[] list of key => PDFEntry\n\t */\n\tfunction get_pdfEntries($pdfKeys, $typeId) {\n\t\t$return = array();\n\t\twhile(($current = current($this->module)) != null) {\n\t\t\t$return = array_merge($return,$current->get_pdfEntries($pdfKeys, $typeId));\n\t\t\tnext($this->module);\n\t\t}\n\t\t$dn = $this->dn_orig;\n\t\tif (isset($this->finalDN)) {\n\t\t\t$dn = $this->finalDN;\n\t\t}\n\t\treturn array_merge($return,array('main_dn' => array(new \\LAM\\PDF\\PDFLabelValue(_('DN'), $dn))));\n\t}\n\n\t/**\n\t* Sorts the module buttons for the account page.\n\t*/\n\tfunction sortModules() {\n\t\t$order = array();\n\t\t$modules = array_keys($this->module);\n\t\t$depModules = array();\n\t\tif (isset($this->order)) {\n\t\t\t$currentPage = $this->order[$this->current_page];\n\t\t}\n\t\tfor ($i = 0; $i < sizeof($modules); $i++) {\n\t\t\t// insert waiting modules\n\t\t\tfor ($w = 0; $w < sizeof($depModules); $w++) {\n\t\t\t\t$dependencies = $this->module[$depModules[$w]]->get_dependencies($this->type->getScope());\n\t\t\t\t$dependencies = $dependencies['depends'];\n\t\t\t\t$everything_found = true;\n\t\t\t\tfor ($d = 0; $d < sizeof($dependencies); $d++) {\n\t\t\t\t\tif (!in_array($dependencies[$d], $order)) {\n\t\t\t\t\t\t$everything_found = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// inser after depending module\n\t\t\t\tif ($everything_found) {\n\t\t\t\t\t$order[] = $depModules[$w];\n\t\t\t\t\tunset($depModules[$w]);\n\t\t\t\t\t$depModules = array_values($depModules);\n\t\t\t\t\t$w--;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// check next module\n\t\t\t$dependencies = $this->module[$modules[$i]]->get_dependencies($this->type->getScope());\n\t\t\tif (is_array($dependencies['depends'])) {\n\t\t\t\t$everything_found = true;\n\t\t\t\t$dependencies = $dependencies['depends'];\n\t\t\t\tfor ($d = 0; $d < sizeof($dependencies); $d++) {\n\t\t\t\t\tif (is_array($dependencies[$d])) { // or-combined dependencies\n\t\t\t\t\t\t$noneFound = true;\n\t\t\t\t\t\tforeach ($dependencies[$d] as $or) {\n\t\t\t\t\t\t\tif (in_array($or, $order)) {\n\t\t\t\t\t\t\t\t$noneFound = false;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($noneFound) {\n\t\t\t\t\t\t\t$everything_found = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telseif (!in_array($dependencies[$d], $order)) { // single dependency\n\t\t\t\t\t\t$everything_found = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// remove module if dependencies are not satisfied\n\t\t\t\tif (!$everything_found) {\n\t\t\t\t\t$depModules[] = $modules[$i];\n\t\t\t\t\tunset($modules[$i]);\n\t\t\t\t\t$modules = array_values($modules);\n\t\t\t\t\t$i--;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$order[] = $modules[$i];\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$order[] = $modules[$i];\n\t\t\t}\n\t\t}\n\t\t// add modules which could not be sorted (e.g. because of cyclic dependencies)\n\t\tif (sizeof($depModules) > 0) {\n\t\t\tfor ($i = 0; $i < sizeof($depModules); $i++) {\n\t\t\t\t$order[] = $depModules[$i];\n\t\t\t}\n\t\t}\n\t\t// move disabled modules to end\n\t\t$activeModules = array();\n\t\t$passiveModules = array();\n\t\tfor ($i = 0; $i < sizeof($order); $i++) {\n\t\t\tif ($this->module[$order[$i]]->getButtonStatus() == 'enabled') {\n\t\t\t\t$activeModules[] = $order[$i];\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$passiveModules[] = $order[$i];\n\t\t\t}\n\t\t}\n\t\t$this->order = array_merge($activeModules, $passiveModules);\n\t\t// check if ordering changed and current page number must be updated\n\t\tif (isset($currentPage) && ($currentPage != $this->order[$this->current_page])) {\n\t\t\t$this->current_page = array_search($currentPage, $this->order);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the RDN part of a given DN.\n\t *\n\t * @param String $dn DN\n\t * @return String RDN\n\t */\n\tfunction getRDN($dn) {\n\t\tif (($dn == \"\") || ($dn == null)) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn substr($dn, 0, strpos($dn, \",\"));\n\t}\n\n\t/**\n\t * Returns the parent DN of a given DN.\n\t *\n\t * @param String $dn DN\n\t * @return String DN\n\t */\n\tfunction getParentDN($dn) {\n\t\tif (($dn == \"\") || ($dn == null)) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn substr($dn, strpos($dn, \",\") + 1);\n\t}\n\n\t/**\n\t * Returns a list of OUs that exist for this account type.\n\t *\n\t * @return array OU list\n\t */\n\tpublic function getOUs() {\n\t\tif ($this->cachedOUs != null) {\n\t\t\treturn $this->cachedOUs;\n\t\t}\n\t\t$this->cachedOUs = $this->type->getSuffixList();\n\t\treturn $this->cachedOUs;\n\t}\n\n\t/**\n\t * Returns the account status.\n\t *\n\t * @return AccountStatus status\n\t */\n\tpublic function getAccountStatus(): AccountStatus {\n\t\t$details = array();\n\t\tforeach ($this->module as $name => $module) {\n\t\t\tif (($module instanceof AccountStatusProvider)) {\n\t\t\t\t$details = array_merge($details, $module->getAccountStatusDetails());\n\t\t\t}\n\t\t}\n\t\treturn new AccountStatus($details);\n\t}\n\n\t/**\n\t * Replaces POST data with wildcard values from modules.\n\t *\n\t * @param array $keyPrefixes POST keys as full name or prefix (e.g. \"key\" matches \"key1\")\n\t */\n\tpublic function replaceWildcardsInPOST($keyPrefixes) {\n\t\t$replacements = array();\n\t\tforeach ($this->module as $module) {\n\t\t\t$replacements = array_merge($replacements, $module->getWildCardReplacements());\n\t\t}\n\t\twhile (true) {\n\t\t\tif (!$this->replaceWildcards($replacements, $keyPrefixes, $_POST)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Replaces wildcards in an array.\n\t *\n\t * @param array $replacements replacements (key => value)\n\t * @param array $keyPrefixes prefixes of $data array keys that should be replaced\n\t * @param array $data data array\n\t * @return boolean replacement done\n\t */\n\tprivate function replaceWildcards($replacements, $keyPrefixes, &$data) {\n\t\t$found = false;\n\t\tforeach ($data as $key => $value) {\n\t\t\tforeach ($keyPrefixes as $keyPrefix) {\n\t\t\t\tif (strpos($key, $keyPrefix) === 0) {\n\t\t\t\t\t$found = $this->doReplace($replacements, $data[$key]) || $found;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $found;\n\t}\n\n\t/**\n\t * Replaces wildcards in a value.\n\t *\n\t * @param array $replacements replacements (key => value)\n\t * @param String $value value to perform replacements\n\t * @return boolean replacement done\n\t */\n\tprivate function doReplace($replacements, &$value) {\n\t\t$found = false;\n\t\tforeach ($replacements as $replKey => $replValue) {\n\t\t\t$searchString = '$' . $replKey;\n\t\t\tif (strpos($value, $searchString) !== false) {\n\t\t\t\t$found = true;\n\t\t\t\t$value = str_replace($searchString, $replValue, $value);\n\t\t\t}\n\t\t\t$searchString = '$_' . $replKey;\n\t\t\tif (strpos($value, $searchString) !== false) {\n\t\t\t\t$found = true;\n\t\t\t\t$value = str_replace($searchString, strtolower($replValue), $value);\n\t\t\t}\n\t\t}\n\t\treturn $found;\n\t}\n\n\t/**\n\t* Encrypts sensitive data before storing in session.\n\t*\n\t* @return array list of attributes which are serialized\n\t*/\n\tfunction __sleep() {\n\t\t// encrypt data\n\t\t$this->attributes = lamEncrypt(serialize($this->attributes));\n\t\t$this->attributes_orig = lamEncrypt(serialize($this->attributes_orig));\n\t\t$this->module = lamEncrypt(serialize($this->module));\n\t\t// save all attributes\n\t\treturn array_keys(get_object_vars($this));\n\t}\n\n\t/**\n\t* Decrypts sensitive data after accountContainer was loaded from session.\n\t*/\n\tfunction __wakeup() {\n\t\t// decrypt data\n\t\t$this->attributes = unserialize(lamDecrypt($this->attributes));\n\t\t$this->attributes_orig = unserialize(lamDecrypt($this->attributes_orig));\n\t\t$this->module = unserialize(lamDecrypt($this->module));\n\t}\n\n}\n\n/**\n * This interface needs to be implemented by all account modules which manage passwords.\n * It allows LAM to provide central password changes.\n *\n * @package modules\n */\ninterface passwordService {\n\n\t/**\n\t * This method specifies if a module manages password attributes. The module alias will\n\t * then appear as option in the GUI.\n\t * <br>If the module only wants to get notified about password changes then return false.\n\t *\n\t * @return boolean true if this module manages password attributes\n\t */\n\tpublic function managesPasswordAttributes();\n\n\t/**\n\t * Specifies if this module supports to force that a user must change his password on next login.\n\t *\n\t * @return boolean force password change supported\n\t */\n\tpublic function supportsForcePasswordChange();\n\n\t/**\n\t * This function is called whenever the password should be changed. Account modules\n\t * must change their password attributes only if the modules list contains their module name.\n\t *\n\t * @param String $password new password\n\t * @param array $modules list of modules for which the password should be changed\n\t * @param boolean $forcePasswordChange force the user to change his password at next login\n\t * @return array list of error messages if any as parameter array for StatusMessage\n\t *               e.g. return array(array('ERROR', 'Password change failed.'))\n\t */\n\tpublic function passwordChangeRequested($password, $modules, $forcePasswordChange);\n\n\t/**\n\t * Specifies if the module support password quick change for the current account.\n\t *\n\t * @return bool password quick change page supported\n\t */\n\tpublic function supportsPasswordQuickChangePage(): bool;\n\n\t/**\n\t * Adds account details such as first/last name for the current account.\n\t *\n\t * @param htmlResponsiveRow $row row where to add content\n\t */\n\tpublic function addPasswordQuickChangeAccountDetails(htmlResponsiveRow $row): void;\n\n\t/**\n\t * Returns a list of password quick change options.\n\t *\n\t * @return PasswordQuickChangeOption[] options\n\t */\n\tpublic function getPasswordQuickChangeOptions(): array;\n\n\t/**\n\t * Returns a list of LDAP attribute changes to perform.\n\t *\n\t * @param string $password new password\n\t * @return array LDAP attribute values (attr_name => array(attr_value))\n\t * @throws LAMException error getting changes\n\t */\n\tpublic function getPasswordQuickChangeChanges(string $password): array;\n\n\t/**\n\t * Returns the user name if known to be validated for password strength.\n\t *\n\t * @return string|null user name\n\t */\n\tpublic function getPasswordQuickChangePasswordStrengthUserName(): ?string;\n\n\t/**\n\t * Returns additional attribute values to check when password strength is validated.\n\t *\n\t * @return array attribute values\n\t */\n\tpublic function getPasswordQuickChangePasswordStrengthAttributes(): array;\n\n\t/**\n\t * Returns if the password is not same as an old password from history.\n\t *\n\t * @param string $password new password\n\t * @return bool is in history\n\t */\n\tpublic function getPasswordQuickChangeIsPasswordInHistory(string $password): bool;\n\n}\n\n/**\n * Option for the password quick change page.\n */\nclass PasswordQuickChangeOption {\n\n\tpublic $label;\n\n\tpublic $id;\n\n\tpublic $preSelected;\n\n\t/**\n\t * PasswordQuickChangeOption constructor.\n\t * @param string $id unique id for this option\n\t * @param string $label descriptive label\n\t * @param bool $preSelected is preselected\n\t */\n\tpublic function __construct(string $id, string $label, bool $preSelected = true) {\n\t\t$this->label = $label;\n\t\t$this->id = $id;\n\t\t$this->preSelected = $preSelected;\n\t}\n\n}\n\n/**\n * Provides module information about the status of an LDAP account.\n */\ninterface AccountStatusProvider {\n\n\t/**\n\t * Returns the list of account status detail lines.\n\t *\n\t * @param ConfiguredType $type\n\t * @param array|null $attributes LDAP attributes (use account container attributes if not provided)\n\t * @return AccountStatusDetails[] status details\n\t */\n\tpublic function getAccountStatusDetails(ConfiguredType $type, ?array &$attributes): array;\n\n\t/**\n\t * Returns the list of LDAP attributes that must be read to get the account status.\n\t *\n\t * @param ConfiguredType $type type\n\t * @return array attribute names\n\t */\n\tpublic function getAccountStatusRequiredAttributes(ConfiguredType $type): array;\n\n\t/**\n\t * Returns a list of options how the account could be locked.\n\t *\n\t * @param ConfiguredType $type type\n\t * @param array|null $attributes LDAP attributes\n\t * @return AccountStatusDetails[] lock options\n\t */\n\tpublic function getAccountStatusPossibleLockOptions(ConfiguredType $type, ?array &$attributes): array;\n\n\t/**\n\t * Locks the account with the given lock IDs.\n\t *\n\t * @param ConfiguredType $type type\n\t * @param array|null $attributes LDAP attributes\n\t * @param array $lockIds IDs from AccountStatusDetails\n\t * @throws LAMException error during locking\n\t */\n\tpublic function accountStatusPerformLock(ConfiguredType $type, ?array &$attributes, array $lockIds): void;\n\n\t/**\n\t * Unlocks the account with the given lock IDs.\n\t *\n\t * @param ConfiguredType $type type\n\t * @param array|null $attributes LDAP attributes\n\t * @param array $lockIds IDs from AccountStatusDetails\n\t */\n\tpublic function accountStatusPerformUnlock(ConfiguredType $type, ?array &$attributes, array $lockIds): void;\n\n}\n\n/**\n * Provides the complete information about the status of an LDAP account.\n */\nclass AccountStatus {\n\n\t/** @var AccountStatusDetails[] list of details */\n\tprivate $details;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param AccountStatusDetails[] $details details\n\t */\n\tpublic function __construct(array $details) {\n\t\t$this->details = $details;\n\t}\n\n\t/**\n\t * Creates the account status from the given type and LDAP attributes.\n\t *\n\t * @param ConfiguredType $type type\n\t * @param array $attributes LDAP attributes\n\t * @return AccountStatus status\n\t */\n\tpublic static function fromAttributes(ConfiguredType $type, array $attributes): AccountStatus {\n\t\t$modules = $_SESSION['config']->get_AccountModules($type->getId());\n\t\t$details = array();\n\t\tforeach ($modules as $module) {\n\t\t\t$interfaces = class_implements($module);\n\t\t\tif (!in_array('AccountStatusProvider', $interfaces)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$moduleObject = moduleCache::getModule($module, $type->getScope());\n\t\t\t$details = array_merge($details, $moduleObject->getAccountStatusDetails($type, $attributes));\n\t\t}\n\t\treturn new AccountStatus($details);\n\t}\n\n\t/**\n\t * Creates the lockable account status from the given type and LDAP attributes.\n\t *\n\t * @param ConfiguredType $type type\n\t * @param array $attributes LDAP attributes\n\t * @return AccountStatus lockable status\n\t */\n\tpublic static function lockableFromAttributes(ConfiguredType $type, array $attributes): AccountStatus {\n\t\t$modules = $_SESSION['config']->get_AccountModules($type->getId());\n\t\t$details = array();\n\t\tforeach ($modules as $module) {\n\t\t\t$interfaces = class_implements($module);\n\t\t\tif (!in_array('AccountStatusProvider', $interfaces)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$moduleObject = moduleCache::getModule($module, $type->getScope());\n\t\t\t$details = array_merge($details, $moduleObject->getAccountStatusPossibleLockOptions($type, $attributes));\n\t\t}\n\t\treturn new AccountStatus($details);\n\t}\n\n\t/**\n\t * Returns the account details.\n\t *\n\t * @return AccountStatusDetails[] details\n\t */\n\tpublic function getDetails(): array {\n\t\treturn $this->details;\n\t}\n\n\t/**\n\t * Returns if the account/password is fully expired (e.g. login no longer possible without password change).\n\t *\n\t * @return bool is expired\n\t */\n\tpublic function isExpired(): bool {\n\t\tforeach ($this->details as $detail) {\n\t\t\tif ($detail->isExpired()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns if the account/password is partially expired (e.g. a single application is expired).\n\t *\n\t * @return bool is expired\n\t */\n\tpublic function isPartiallyExpired(): bool {\n\t\tforeach ($this->details as $detail) {\n\t\t\tif ($detail->isPartiallyExpired()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns if the account is fully locked (login no longer possible).\n\t *\n\t * @return bool is locked\n\t */\n\tpublic function isLocked(): bool {\n\t\tforeach ($this->details as $detail) {\n\t\t\tif ($detail->isLocked()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns if the account is partially locked (e.g. a single application is locked).\n\t *\n\t * @return bool is locked\n\t */\n\tpublic function isPartiallyLocked(): bool {\n\t\tforeach ($this->details as $detail) {\n\t\t\tif ($detail->isPartiallyLocked()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n}\n\nclass AccountStatusDetails {\n\n\tprivate $details;\n\tprivate $id;\n\tprivate $expired = false;\n\tprivate $partiallyExpired = false;\n\tprivate $locked = false;\n\tprivate $partiallyLocked = false;\n\tprivate $icon;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param string $details details message\n\t * @param string $id ID for reference\n\t * @param string $icon icon name\n\t */\n\tpublic function __construct(string $details, string $id, string $icon) {\n\t\t$this->details = $details;\n\t\t$this->id = $id;\n\t\t$this->icon = $icon;\n\t}\n\n\t/**\n\t * Creates a new expired status entry.\n\t *\n\t * @param string $details details message\n\t * @param string $id ID for reference\n\t * @param string $icon icon name\n\t * @return AccountStatusDetails status entry\n\t */\n\tpublic static function newExpired(string $details, string $id, ?string $icon = null): AccountStatusDetails {\n\t\tif ($icon === null) {\n\t\t\t$icon = 'expired.svg';\n\t\t}\n\t\t$details = new AccountStatusDetails($details, $id, $icon);\n\t\t$details->expired = true;\n\t\treturn $details;\n\t}\n\n\t/**\n\t * Creates a new partially expired status entry.\n\t *\n\t * @param string $details details message\n\t * @param string $id ID for reference\n\t * @param string $icon icon name\n\t * @return AccountStatusDetails status entry\n\t */\n\tpublic static function newPartiallyExpired(string $details, string $id, ?string $icon = null): AccountStatusDetails {\n\t\tif ($icon === null) {\n\t\t\t$icon = 'expired.svg';\n\t\t}\n\t\t$details = new AccountStatusDetails($details, $id, $icon);\n\t\t$details->partiallyExpired = true;\n\t\treturn $details;\n\t}\n\n\t/**\n\t * Creates a new locked status entry.\n\t *\n\t * @param string $details details message\n\t * @param string $id ID for reference\n\t * @param string $icon icon name\n\t * @return AccountStatusDetails status entry\n\t */\n\tpublic static function newLocked(string $details, string $id, ?string $icon = null): AccountStatusDetails {\n\t\tif ($icon === null) {\n\t\t\t$icon = 'locked.svg';\n\t\t}\n\t\t$details = new AccountStatusDetails($details, $id, $icon);\n\t\t$details->locked = true;\n\t\treturn $details;\n\t}\n\n\t/**\n\t * Creates a new partially locked status entry.\n\t *\n\t * @param string $details details message\n\t * @param string $id ID for reference\n\t * @param string $icon icon name\n\t * @return AccountStatusDetails status entry\n\t */\n\tpublic static function newPartiallyLocked(string $details, string $id, ?string $icon = null): AccountStatusDetails {\n\t\tif ($icon === null) {\n\t\t\t$icon = 'partiallyLocked.svg';\n\t\t}\n\t\t$details = new AccountStatusDetails($details, $id, $icon);\n\t\t$details->partiallyLocked = true;\n\t\treturn $details;\n\t}\n\n\t/**\n\t * Returns if the account/password is fully expired (e.g. login no longer possible without password change).\n\t *\n\t * @return bool is expired\n\t */\n\tpublic function isExpired(): bool {\n\t\treturn $this->expired;\n\t}\n\n\t/**\n\t * Returns if the account/password is partially expired (e.g. a single application is expired).\n\t *\n\t * @return bool is expired\n\t */\n\tpublic function isPartiallyExpired(): bool {\n\t\treturn $this->partiallyExpired;\n\t}\n\n\t/**\n\t * Returns if the account is fully locked (login no longer possible).\n\t *\n\t * @return bool is locked\n\t */\n\tpublic function isLocked(): bool {\n\t\treturn $this->locked;\n\t}\n\n\t/**\n\t * Returns if the account is partially locked (e.g. a single application is locked).\n\t *\n\t * @return bool is locked\n\t */\n\tpublic function isPartiallyLocked(): bool {\n\t\treturn $this->partiallyLocked;\n\t}\n\n\t/**\n\t * Returns the icon name.\n\t *\n\t * @return string icon name\n\t */\n\tpublic function getIcon(): string {\n\t\treturn $this->icon;\n\t}\n\n\t/**\n\t * Returns the details.\n\t *\n\t * @return string details\n\t */\n\tpublic function getDetails(): string {\n\t\treturn $this->details;\n\t}\n\n\t/**\n\t * Returns the id.\n\t *\n\t * @return string id\n\t */\n\tpublic function getId(): string {\n\t\treturn $this->id;\n\t}\n\n}\n\n", "<?php\n\nuse \\LAM\\TYPES\\TypeManager;\nuse LAM\\ImageUtils\\ImageManipulationFactory;\nuse LAM\\TYPES\\ConfiguredType;\n\n/*\n\n  This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)\n  Copyright (C) 2003 - 2006  Tilo Lutz\n                2005 - 2022  Roland Gruber\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\n/**\n* Manages the attributes of object class inetOrgPerson.\n*\n* @package modules\n* @author Tilo Lutz\n* @author Roland Gruber\n* @author Michael Duergner\n*/\n\n/**\n* This module manages LDAP attributes of the object class inetOrgPerson (e.g. name and address).\n*\n* @package modules\n*/\nclass inetOrgPerson extends baseModule implements passwordService,AccountStatusProvider {\n\n\t/**\n\t * ID for locked password status.\n\t */\n\tconst STATUS_PASSWORD_LOCKED = \"INETORG_PERSON_PASSWORD_LOCKED\";\n\n\t/** clear text password */\n\tprivate $clearTextPassword = null;\n\t/** cache for departments */\n\tprivate $departmentCache = null;\n\t/** organization cache */\n\tprivate $oCache = null;\n\t/** organizational unit cache */\n\tprivate $ouCache = null;\n\t/** title cache */\n\tprivate $titleCache = null;\n\t/** employee type cache */\n\tprivate $employeeTypeCache = null;\n\t/** business category cache */\n\tprivate $businessCategoryCache = null;\n\t/** cache for email duplication checks */\n\tprivate $emailCheckCache = array();\n\n\t/** session variable for existing user certificates in self service */\n\tconst SESS_CERTIFICATES_LIST = 'inetOrgPerson_certificatesList';\n\t/** session variable for existing user certificates in self service */\n\tconst SESS_PHOTO = 'inetOrgPerson_jpegPhoto';\n\n\t/**\n\t* This function fills the message array.\n\t**/\n\tfunction load_Messages() {\n\t\t$this->messages['givenName'][0] = array('ERROR', _('First name'), _('First name contains invalid characters!'));\n\t\t$this->messages['givenName'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_firstName', _('First name contains invalid characters!'));\n\t\t$this->messages['lastname'][0] = array('ERROR', _('Last name'), _('Last name contains invalid characters or is empty!'));\n\t\t$this->messages['lastname'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_lastName', _('Last name contains invalid characters or is empty!'));\n\t\t$this->messages['telephoneNumber'][0] = array('ERROR', _('Telephone number'), _('Please enter a valid telephone number!'));\n\t\t$this->messages['telephoneNumber'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_telephone', _('Please enter a valid telephone number!'));\n\t\t$this->messages['homePhone'][0] = array('ERROR', _('Home telephone number'), _('Please enter a valid telephone number!'));\n\t\t$this->messages['homePhone'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_homePhone', _('Please enter a valid telephone number!'));\n\t\t$this->messages['mobile'][0] = array('ERROR', _('Mobile number'), _('Please enter a valid mobile number!'));\n\t\t$this->messages['mobileTelephone'][1] = array('ERROR', _('Account %s:') . \" inetOrgPerson_mobile\", _('Please enter a valid mobile number!'));\n\t\t$this->messages['facsimileTelephoneNumber'][0] = array('ERROR', _('Fax number'), _('Please enter a valid fax number!'));\n\t\t$this->messages['facsimileNumber'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_fax', _('Please enter a valid fax number!'));\n\t\t$this->messages['pager'][0] = array('ERROR', _('Pager'), _('Please enter a valid telephone number!'));\n\t\t$this->messages['pager'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_pager', _('Please enter a valid telephone number!'));\n\t\t$this->messages['mail'][0] = array('ERROR', _('Email address'), _('Please enter a valid email address!'));\n\t\t$this->messages['mail'][1] = array('WARN', _('Email address'), _('Email \"%s\" already in use.'));\n\t\t$this->messages['mail'][2] = array('WARN', _('Account %s:') . ' inetOrgPerson_email', _('Email \"%s\" already in use.'));\n\t\t$this->messages['email'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_email', _('Please enter a valid email address!'));\n\t\t$this->messages['street'][0] = array('ERROR', _('Street'), _('Please enter a valid street name!'));\n\t\t$this->messages['street'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_street', _('Please enter a valid street name!'));\n\t\t$this->messages['postalAddress'][0] = array('ERROR', _('Postal address'), _('Please enter a valid postal address!'));\n\t\t$this->messages['postalAddress'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_address', _('Please enter a valid postal address!'));\n\t\t$this->messages['registeredAddress'][0] = array('ERROR', _('Registered address'), _('Please enter a valid registered address.'));\n\t\t$this->messages['registeredAddress'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_registeredAddress', _('Please enter a valid registered address.'));\n\t\t$this->messages['postalCode'][0] = array('ERROR', _('Postal code'), _('Please enter a valid postal code!'));\n\t\t$this->messages['postalCode'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_postalCode', _('Please enter a valid postal code!'));\n\t\t$this->messages['title'][0] = array('ERROR', _('Job title'), _('Please enter a valid job title!'));\n\t\t$this->messages['title'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_title', _('Please enter a valid job title!'));\n\t\t$this->messages['employeeType'][0] = array('ERROR', _('Employee type'), _('Please enter a valid employee type!'));\n\t\t$this->messages['employeeType'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_type', _('Please enter a valid employee type!'));\n\t\t$this->messages['cn'][0] = array('ERROR', _('Common name'), _('Please enter a valid common name!'));\n\t\t$this->messages['cn'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_cn', _('Please enter a valid common name!'));\n\t\t$this->messages['uid'][0] = array('ERROR', _('User name'), _('User name contains invalid characters. Valid characters are: a-z, A-Z, 0-9 and .-_ !'));\n\t\t$this->messages['uid'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_userName', _('User name contains invalid characters. Valid characters are: a-z, A-Z, 0-9 and .-_ !'));\n\t\t$this->messages['uid'][3] = array('WARN', _('Account %s:') . ' inetOrgPerson_userName', _('User name already exists!'));\n\t\t$this->messages['manager'][0] = array('ERROR', _('Account %s:') . ' inetOrgPerson_manager', _('This is not a valid DN!'));\n\t\t$this->messages['file'][0] = array('ERROR', _('No file selected.'));\n\t\t$this->messages['file'][2] = array('ERROR', _('Unable to process this file.'));\n\t\t$this->messages['file'][3] = array('ERROR', _('File is too large. Maximum allowed size is %s kB.'));\n\t\t$this->messages['businessCategory'][0] = array('ERROR', _('Business category'), _('Please enter a valid business category!'));\n\t\t$this->messages['businessCategory'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_businessCategory', _('Please enter a valid business category!'));\n\t\t$this->messages['userPassword'][0] = array('ERROR', _('Account %s:') . ' posixAccount_password', _('Password contains invalid characters. Valid characters are:') . ' a-z, A-Z, 0-9 and #*,.;:_-+!%&/|?{[()]}=@$ \u00a7\u00b0!');\n\t\t$this->messages['sendPasswordMail'][0] = array('ERROR', _('Account %s:') . ' inetOrgPerson_sendPasswordMail', _('This value can only be \"true\" or \"false\".'));\n\t}\n\n\t/**\n\t* Returns true if this module can manage accounts of the current type, otherwise false.\n\t*\n\t* @return boolean true if module fits\n\t*/\n\tpublic function can_manage() {\n\t\treturn in_array($this->get_scope(), array('user'));\n\t}\n\n\t/**\n\t* Returns meta data that is interpreted by parent class\n\t*\n\t* @return array array with meta data\n\t*\n\t* @see baseModule::get_metaData()\n\t*/\n\tfunction get_metaData() {\n\t\t$return = array();\n\t\t// icon\n\t\t$return['icon'] = 'user.svg';\n\t\t// alias name\n\t\t$return[\"alias\"] = _('Personal');\n\t\t// this is a base module\n\t\t$return[\"is_base\"] = true;\n\t\t// RDN attribute\n\t\t$return[\"RDN\"] = array(\"cn\" => \"normal\", 'uid' => 'low');\n\t\t// LDAP filter\n\t\t$return[\"ldap_filter\"] = array('or' => \"(objectClass=inetOrgPerson)\");\n\t\t// module dependencies\n\t\t$return['dependencies'] = array('depends' => array(), 'conflicts' => array());\n\t\t// managed object classes\n\t\t$return['objectClasses'] = array('inetOrgPerson');\n\t\t// LDAP aliases\n\t\t$return['LDAPaliases'] = array('commonName' => 'cn', 'surname' => 'sn', 'streetAddress' => 'street',\n\t\t\t'fax' => 'facsimileTelephoneNumber', 'gn' => 'givenName', 'userid' => 'uid', 'rfc822Mailbox' => 'mail',\n\t\t\t'mobileTelephoneNumber' => 'mobile', 'organizationName' => 'o', 'organizationalUnitName' => 'ou');\n\t\t// managed attributes\n\t\t$return['attributes'] = array('uid', 'employeeType', 'givenName', 'jpegPhoto', 'mail', 'manager', 'mobile',\n\t\t\t'title', 'telephoneNumber', 'facsimileTelephoneNumber', 'street', 'postOfficeBox', 'postalCode', 'postalAddress',\n\t\t\t'sn', 'userpassword', 'description', 'homePhone', 'pager', 'roomNumber', 'businessCategory', 'l', 'st',\n\t\t\t'physicalDeliveryOfficeName', 'carLicense', 'departmentNumber', 'o', 'employeeNumber', 'initials',\n\t\t\t'registeredAddress', 'labeledURI', 'ou', 'userCertificate;binary', 'INFO.userPasswordClearText');\n\t\t// self service search attributes\n\t\t$return['selfServiceSearchAttributes'] = array('uid', 'mail', 'cn', 'surname', 'givenName', 'employeeNumber');\n\t\t// self service field settings\n\t\t$return['selfServiceFieldSettings'] = array('firstName' => _('First name'), 'lastName' => _('Last name'),\n\t\t\t'mail' => _('Email address'), 'telephoneNumber' => _('Telephone number'), 'mobile' => _('Mobile number'),\n\t\t\t'faxNumber' => _('Fax number'), 'street' => _('Street'), 'postalAddress' => _('Postal address'), 'registeredAddress' => _('Registered address'),\n\t\t\t'postalCode' => _('Postal code'), 'postOfficeBox' => _('Post office box'), 'jpegPhoto' => _('Photo'),\n\t\t\t'homePhone' => _('Home telephone number'), 'pager' => _('Pager'), 'roomNumber' => _('Room number'), 'carLicense' => _('Car license'),\n\t\t\t'location' => _('Location'), 'state' => _('State'), 'officeName' => _('Office name'), 'businessCategory' => _('Business category'),\n\t\t\t'departmentNumber' => _('Department'), 'initials' => _('Initials'), 'title' => _('Job title'), 'labeledURI' => _('Web site'),\n\t\t\t'userCertificate' => _('User certificates'), 'o' => _('Organisation'), 'ou' => _('Organisational unit'), 'description' => _('Description'),\n\t\t\t'uid' => _('User name'), 'displayName' => _('Display name'));\n\t\t// possible self service read-only fields\n\t\t$return['selfServiceReadOnlyFields'] = array('firstName', 'lastName', 'mail', 'telephoneNumber', 'mobile', 'faxNumber', 'pager', 'street',\n\t\t\t'postalAddress', 'registeredAddress', 'postalCode', 'postOfficeBox', 'jpegPhoto', 'homePhone', 'roomNumber', 'carLicense',\n\t\t\t'location', 'state', 'officeName', 'businessCategory', 'departmentNumber', 'initials', 'title', 'labeledURI', 'userCertificate',\n\t\t\t'o', 'ou', 'description', 'uid', 'displayName');\n\t\t// profile checks and mappings\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideInitials')) {\n\t\t\t$return['profile_mappings']['inetOrgPerson_initials'] = 'initials';\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideDescription')) {\n\t\t\t$return['profile_mappings']['inetOrgPerson_description'] = 'description';\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideJobTitle')) {\n\t\t\t$return['profile_checks']['inetOrgPerson_title'] = array(\n\t\t\t\t'type' => 'ext_preg',\n\t\t\t\t'regex' => 'title',\n\t\t\t\t'error_message' => $this->messages['title'][0]);\n\t\t\t$return['profile_mappings']['inetOrgPerson_title'] = 'title';\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEmployeeType')) {\n\t\t\t$return['profile_checks']['inetOrgPerson_employeeType'] = array(\n\t\t\t\t'type' => 'ext_preg',\n\t\t\t\t'regex' => 'employeeType',\n\t\t\t\t'error_message' => $this->messages['employeeType'][0]);\n\t\t\t$return['profile_mappings']['inetOrgPerson_employeeType'] = 'employeeType';\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideBusinessCategory')) {\n\t\t    $return['profile_checks']['inetOrgPerson_businessCategory'] = array(\n\t\t    \t'type' => 'ext_preg',\n\t\t    \t'regex' => 'businessCategory',\n\t\t    \t'error_message' => $this->messages['businessCategory'][0]);\n\t\t    $return['profile_mappings']['inetOrgPerson_businessCategory'] = 'businessCategory';\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideStreet')) {\n\t\t\t$return['profile_checks']['inetOrgPerson_street'] = array(\n\t\t\t\t'type' => 'ext_preg',\n\t\t\t\t'regex' => 'street',\n\t\t\t\t'error_message' => $this->messages['street'][0]);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalCode')) {\n\t\t\t$return['profile_checks']['inetOrgPerson_postalCode'] = array(\n\t\t\t\t'type' => 'ext_preg',\n\t\t\t\t'regex' => 'postalCode',\n\t\t\t\t'error_message' => $this->messages['postalCode'][0]);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalAddress')) {\n\t\t\t$return['profile_checks']['inetOrgPerson_postalAddress'] = array(\n\t\t\t\t'type' => 'ext_preg',\n\t\t\t\t'regex' => 'postalAddress',\n\t\t\t\t'error_message' => $this->messages['postalAddress'][0]);\n\t\t\t$return['profile_mappings']['inetOrgPerson_postalAddress'] = 'postalAddress';\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideRegisteredAddress')) {\n\t\t\t$return['profile_checks']['inetOrgPerson_registeredAddress'] = array(\n\t\t\t\t'type' => 'ext_preg',\n\t\t\t\t'regex' => 'postalAddress',\n\t\t\t\t'error_message' => $this->messages['registeredAddress'][0]);\n\t\t\t$return['profile_mappings']['inetOrgPerson_registeredAddress'] = 'registeredAddress';\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideOfficeName')) {\n\t\t\t$return['profile_mappings']['inetOrgPerson_physicalDeliveryOfficeName'] = 'physicalDeliveryOfficeName';\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideRoomNumber')) {\n\t\t\t$return['profile_mappings']['inetOrgPerson_roomNumber'] = 'roomNumber';\n\t\t}\n\t\t// upload fields\n\t\t$return['upload_columns'] = array(\n\t\t\tarray(\n\t\t\t\t'name' => 'inetOrgPerson_firstName',\n\t\t\t\t'description' => _('First name'),\n\t\t\t\t'help' => 'givenName',\n\t\t\t\t'example' => _('Steve')\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'name' => 'inetOrgPerson_lastName',\n\t\t\t\t'description' => _('Last name'),\n\t\t\t\t'help' => 'sn',\n\t\t\t\t'example' => _('Miller'),\n\t\t\t\t'required' => true\n\t\t\t)\n\t\t);\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideInitials')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_initials',\n\t\t\t\t'description' => _('Initials'),\n\t\t\t\t'help' => 'initials',\n\t\t\t\t'example' => 'A.B.'\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideDescription')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_description',\n\t\t\t\t'description' => _('Description'),\n\t\t\t\t'help' => 'description',\n\t\t\t\t'example' => _('Temp, contract till December')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideJobTitle')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_title',\n\t\t\t\t'description' => _('Job title'),\n\t\t\t\t'help' => 'titleList',\n\t\t\t\t'example' => _('President')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEmployeeNumber')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_employeeNumber',\n\t\t\t\t'description' => _('Employee number'),\n\t\t\t\t'help' => 'employeeNumber',\n\t\t\t\t'example' => '123456'\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEmployeeType')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_type',\n\t\t\t\t'description' => _('Employee type'),\n\t\t\t\t'help' => 'employeeType',\n\t\t\t\t'example' => _('Temp')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideManager')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_manager',\n\t\t\t\t'description' => _('Manager'),\n\t\t\t\t'help' => 'managerList',\n\t\t\t\t'example' => _('uid=smiller,ou=People,dc=company,dc=com')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideBusinessCategory')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_businessCategory',\n\t\t\t\t'description' => _('Business category'),\n\t\t\t\t'help' => 'businessCategoryList',\n\t\t\t\t'example' => _('Administration')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideStreet')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_street',\n\t\t\t\t'description' => _('Street'),\n\t\t\t\t'help' => 'streetList',\n\t\t\t\t'example' => _('Mystreetname 42')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalCode')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_postalCode',\n\t\t\t\t'description' => _('Postal code'),\n\t\t\t\t'help' => 'postalCodeList',\n\t\t\t\t'example' => _('GB-12345')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalAddress')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_address',\n\t\t\t\t'description' => _('Postal address'),\n\t\t\t\t'help' => 'postalAddress',\n\t\t\t\t'example' => _('MyCity')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideRegisteredAddress')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_registeredAddress',\n\t\t\t\t'description' => _('Registered address'),\n\t\t\t\t'help' => 'registeredAddress',\n\t\t\t\t'example' => _('MyCity')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostOfficeBox')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_postOfficeBox',\n\t\t\t\t'description' => _('Post office box'),\n\t\t\t\t'help' => 'postOfficeBoxList',\n\t\t\t\t'example' => _('12345')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideTelephoneNumber')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_telephone',\n\t\t\t\t'description' => _('Telephone number'),\n\t\t\t\t'help' => 'telephoneNumberList',\n\t\t\t\t'example' => _('123-123-1234')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideHomeTelephoneNumber')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_homePhone',\n\t\t\t\t'description' => _('Home telephone number'),\n\t\t\t\t'help' => 'homePhoneList',\n\t\t\t\t'example' => _('123-124-1234')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideMobileNumber')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_mobile',\n\t\t\t\t'description' => _('Mobile number'),\n\t\t\t\t'help' => 'mobileTelephoneNumberList',\n\t\t\t\t'example' => _('123-123-1235')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideFaxNumber')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_fax',\n\t\t\t\t'description' => _('Fax number'),\n\t\t\t\t'help' => 'facsimileTelephoneNumberList',\n\t\t\t\t'example' => _('123-123-1236')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePager', true)) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_pager',\n\t\t\t\t'description' => _('Pager'),\n\t\t\t\t'help' => 'pagerList',\n\t\t\t\t'example' => _('123-123-1236')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEMailAddress')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_email',\n\t\t\t\t'description' => _('Email address'),\n\t\t\t\t'help' => 'mailList',\n\t\t\t\t'example' => _('user@company.com')\n\t\t\t);\n\t\t\tif (isLAMProVersion()) {\n\t\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t\t'name' => 'inetOrgPerson_sendPasswordMail',\n\t\t\t\t\t'description' => _('Send password via mail'),\n\t\t\t\t\t'help' => 'mailPassword',\n\t\t\t\t\t'values' => 'true, false',\n\t\t\t\t\t'default' => 'false',\n\t\t\t\t\t'example' => 'false'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideLabeledURI')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_labeledURI',\n\t\t\t\t'description' => _('Web site'),\n\t\t\t\t'help' => 'labeledURIList',\n\t\t\t\t'example' => _('http://www.company.com')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideRoomNumber')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_roomNumber',\n\t\t\t\t'description' => _('Room number'),\n\t\t\t\t'help' => 'roomNumber',\n\t\t\t\t'example' => 'A 2.24'\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideDepartments')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_departmentNumber',\n\t\t\t\t'description' => _('Department'),\n\t\t\t\t'help' => 'departmentNumberList',\n\t\t\t\t'example' => _('Administration')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideOu')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_ou',\n\t\t\t\t'description' => _('Organisational unit'),\n\t\t\t\t'help' => 'ouList',\n\t\t\t\t'example' => _('Administration')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideO')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_o',\n\t\t\t\t'description' => _('Organisation'),\n\t\t\t\t'help' => 'oList',\n\t\t\t\t'example' => _('YourCompany')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideLocation')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_l',\n\t\t\t\t'description' => _('Location'),\n\t\t\t\t'help' => 'lList',\n\t\t\t\t'example' => _('MyCity')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideState')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_st',\n\t\t\t\t'description' => _('State'),\n\t\t\t\t'help' => 'stList',\n\t\t\t\t'example' => _('New York')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideCarLicense')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_carLicense',\n\t\t\t\t'description' => _('Car license'),\n\t\t\t\t'help' => 'carLicense',\n\t\t\t\t'example' => _('yes')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideOfficeName')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_physicalDeliveryOfficeName',\n\t\t\t\t'description' => _('Office name'),\n\t\t\t\t'help' => 'physicalDeliveryOfficeNameList',\n\t\t\t\t'example' => _('YourCompany')\n\t\t\t);\n\t\t}\n\t\t// available PDF fields\n\t\t$return['PDF_fields'] = array(\n\t\t\t'givenName' => _('First name'),\n\t\t\t'sn' => _('Last name')\n\t\t);\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideDescription')) {\n\t\t\t$return['PDF_fields']['description'] = _('Description');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideStreet')) {\n\t\t\t$return['PDF_fields']['street'] = _('Street');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostOfficeBox')) {\n\t\t\t$return['PDF_fields']['postOfficeBox'] = _('Post office box');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalCode')) {\n\t\t\t$return['PDF_fields']['postalCode'] = _('Postal code');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideLocation')) {\n\t\t\t$return['PDF_fields']['location'] = _('Location');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideState')) {\n\t\t\t$return['PDF_fields']['state'] = _('State');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalAddress')) {\n\t\t\t$return['PDF_fields']['postalAddress'] = _('Postal address');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideRegisteredAddress')) {\n\t\t\t$return['PDF_fields']['registeredAddress'] = _('Registered address');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideOfficeName')) {\n\t\t\t$return['PDF_fields']['officeName'] = _('Office name');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideRoomNumber')) {\n\t\t\t$return['PDF_fields']['roomNumber'] = _('Room number');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideTelephoneNumber')) {\n\t\t\t$return['PDF_fields']['telephoneNumber'] = _('Telephone number');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideHomeTelephoneNumber')) {\n\t\t\t$return['PDF_fields']['homePhone'] = _('Home telephone number');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideMobileNumber')) {\n\t\t\t$return['PDF_fields']['mobileTelephoneNumber'] = _('Mobile number');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideFaxNumber')) {\n\t\t\t$return['PDF_fields']['facsimileTelephoneNumber'] = _('Fax number');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePager', true)) {\n\t\t\t$return['PDF_fields']['pager'] = _('Pager');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEMailAddress')) {\n\t\t\t$return['PDF_fields']['mail'] = _('Email address');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideLabeledURI')) {\n\t\t\t$return['PDF_fields']['labeledURI'] = _('Web site');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideJobTitle')) {\n\t\t\t$return['PDF_fields']['title'] = _('Job title');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideCarLicense')) {\n\t\t\t$return['PDF_fields']['carLicense'] = _('Car license');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEmployeeType')) {\n\t\t\t$return['PDF_fields']['employeeType'] = _('Employee type');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideBusinessCategory')) {\n\t\t\t$return['PDF_fields']['businessCategory'] = _('Business category');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideDepartments')) {\n\t\t\t$return['PDF_fields']['departmentNumber'] = _('Department');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideManager')) {\n\t\t\t$return['PDF_fields']['manager'] = _('Manager');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideO')) {\n\t\t\t$return['PDF_fields']['o'] = _('Organisation');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideOu')) {\n\t\t\t$return['PDF_fields']['ou'] = _('Organisational unit');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEmployeeNumber')) {\n\t\t\t$return['PDF_fields']['employeeNumber'] = _('Employee number');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideInitials')) {\n\t\t\t$return['PDF_fields']['initials'] = _('Initials');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidejpegPhoto')) {\n\t\t\t$return['PDF_fields']['jpegPhoto'] = _('Photo');\n\t\t}\n\t\t// help Entries\n\t\t$return['help'] = array (\n\t\t\t'description' => array (\n\t\t\t\t\"Headline\" => _(\"Description\"), 'attr' => 'description',\n\t\t\t\t\"Text\" => _(\"User description. If left empty sur- and give name will be used.\")\n\t\t\t),\n\t\t\t'title' => array (\n\t\t\t\t\"Headline\" => _(\"Job title\"), 'attr' => 'title',\n\t\t\t\t\"Text\" => _(\"Job title of user: President, department manager, ...\")\n\t\t\t),\n\t\t\t'titleList' => array (\n\t\t\t\t\"Headline\" => _(\"Job title\"), 'attr' => 'title',\n\t\t\t\t\"Text\" => _(\"Job title of user: President, department manager, ...\") . ' ' . _(\"Multiple values are separated by semicolon.\")\n\t\t\t),\n\t\t\t'givenName' => array (\n\t\t\t\t\"Headline\" => _(\"First name\"), 'attr' => 'givenName',\n\t\t\t\t\"Text\" => _(\"First name of user. Only letters, - and spaces are allowed.\")\n\t\t\t),\n\t\t\t'sn' => array (\n\t\t\t\t\"Headline\" => _(\"Last name\"), 'attr' => 'sn',\n\t\t\t\t\"Text\" => _(\"Last name of user. Only letters, - and spaces are allowed.\")\n\t\t\t),\n\t\t\t'employeeType' => array (\n\t\t\t\t\"Headline\" => _(\"Employee type\"), 'attr' => 'employeeType',\n\t\t\t\t\"Text\" => _(\"Employee type: Contractor, Employee, Intern, Temp, External, ...\")\n\t\t\t),\n\t\t\t'manager' => array (\n\t\t\t\t\"Headline\" => _(\"Manager\"), 'attr' => 'manager',\n\t\t\t\t\"Text\" => _(\"This is the LDAP DN of the user's manager. Use this property to represent hierarchies in your company.\")\n\t\t\t),\n\t\t\t'managerList' => array (\n\t\t\t\t\"Headline\" => _(\"Manager\"), 'attr' => 'manager',\n\t\t\t\t\"Text\" => _(\"This is the LDAP DN of the user's manager. Use this property to represent hierarchies in your company.\") . ' ' . _(\"Multiple values are separated by semicolon.\")\n\t\t\t),\n\t\t\t'street' => array (\n\t\t\t\t\"Headline\" => _(\"Street\"), 'attr' => 'street',\n\t\t\t\t\"Text\" => _(\"The street name of the user's address.\")\n\t\t\t),\n\t\t\t'streetList' => array (\n\t\t\t\t\"Headline\" => _(\"Street\"), 'attr' => 'street',\n\t\t\t\t\"Text\" => _(\"The street name of the user's address.\") . ' ' . _(\"Multiple values are separated by semicolon.\")\n\t\t\t),\n\t\t\t'postOfficeBox' => array (\n\t\t\t\t\"Headline\" => _(\"Post office box\"), 'attr' => 'postOfficeBox',\n\t\t\t\t\"Text\" => _(\"The post office box of the user's address.\")\n\t\t\t),\n\t\t\t'postOfficeBoxList' => array (\n\t\t\t\t\"Headline\" => _(\"Post office box\"), 'attr' => 'postOfficeBox',\n\t\t\t\t\"Text\" => _(\"The post office box of the user's address.\") . ' ' . _(\"Multiple values are separated by semicolon.\")\n\t\t\t),\n\t\t\t'postalCode' => array (\n\t\t\t\t\"Headline\" => _(\"Postal code\"), 'attr' => 'postalCode',\n\t\t\t\t\"Text\" => _(\"The postal code of the user's address.\")\n\t\t\t),\n\t\t\t'postalCodeList' => array (\n\t\t\t\t\"Headline\" => _(\"Postal code\"), 'attr' => 'postalCode',\n\t\t\t\t\"Text\" => _(\"The postal code of the user's address.\") . ' ' . _(\"Multiple values are separated by semicolon.\")\n\t\t\t),\n\t\t\t'postalAddress' => array (\n\t\t\t\t\"Headline\" => _(\"Postal address\"), 'attr' => 'postalAddress',\n\t\t\t\t\"Text\" => _(\"Postal address, city\")\n\t\t\t),\n\t\t\t'registeredAddress' => array (\n\t\t\t\t\"Headline\" => _(\"Registered address\"), 'attr' => 'registeredAddress',\n\t\t\t\t\"Text\" => _(\"Registered address, city\")\n\t\t\t),\n\t\t\t'telephoneNumber' => array (\n\t\t\t\t\"Headline\" => _(\"Telephone number\"), 'attr' => 'telephoneNumber',\n\t\t\t\t\"Text\" => _(\"The user's telephone number.\")\n\t\t\t),\n\t\t\t'telephoneNumberList' => array (\n\t\t\t\t\"Headline\" => _(\"Telephone number\"), 'attr' => 'telephoneNumber',\n\t\t\t\t\"Text\" => _(\"The user's telephone number.\") . ' ' . _('Multiple values are separated by semicolon.')\n\t\t\t),\n\t\t\t'mobile' => array (\n\t\t\t\t\"Headline\" => _(\"Mobile number\"), 'attr' => 'mobile',\n\t\t\t\t\"Text\" => _(\"The user's mobile number.\")\n\t\t\t),\n\t\t\t'mobileTelephoneNumberList' => array (\n\t\t\t\t\"Headline\" => _(\"Mobile number\"), 'attr' => 'mobile',\n\t\t\t\t\"Text\" => _(\"The user's mobile number.\") . ' ' . _('Multiple values are separated by semicolon.')\n\t\t\t),\n\t\t\t'facsimileTelephoneNumber' => array (\n\t\t\t\t\"Headline\" => _(\"Fax number\"), 'attr' => 'facsimileTelephoneNumber',\n\t\t\t\t\"Text\" => _(\"The user's fax number.\")\n\t\t\t),\n\t\t\t'facsimileTelephoneNumberList' => array (\n\t\t\t\t\"Headline\" => _(\"Fax number\"), 'attr' => 'facsimileTelephoneNumber',\n\t\t\t\t\"Text\" => _(\"The user's fax number.\") . ' ' . _('Multiple values are separated by semicolon.')\n\t\t\t),\n\t\t\t'pager' => array (\n\t\t\t\t\"Headline\" => _('Pager'), 'attr' => 'pager',\n\t\t\t\t\"Text\" => _(\"The user's pager number.\")\n\t\t\t),\n\t\t\t'pagerList' => array (\n\t\t\t\t\"Headline\" => _('Pager'), 'attr' => 'pager',\n\t\t\t\t\"Text\" => _(\"The user's pager number.\") . ' ' . _('Multiple values are separated by semicolon.')\n\t\t\t),\n\t\t\t'mail' => array (\n\t\t\t\t\"Headline\" => _(\"Email address\"), 'attr' => 'mail',\n\t\t\t\t\"Text\" => _(\"The user's email address.\")\n\t\t\t),\n\t\t\t'mailList' => array (\n\t\t\t\t\"Headline\" => _(\"Email address\"), 'attr' => 'mail',\n\t\t\t\t\"Text\" => _(\"The user's email address.\") . ' ' . _('Multiple values are separated by semicolon.')\n\t\t\t),\n\t\t\t\"mailPassword\" => array (\n\t\t\t\t\"Headline\" => _(\"Send password via mail\"),\n\t\t\t\t\"Text\" => _(\"Sends the password to the user via mail. Please edit your LAM server profile to setup the mail settings.\")),\n\t\t\t'labeledURI' => array(\n\t\t\t\t\"Headline\" => _(\"Web site\"), 'attr' => 'labeledURI',\n\t\t\t\t\"Text\" => _(\"The user's web site (e.g. http://www.company.com).\")\n\t\t\t),\n\t\t\t'labeledURIList' => array(\n\t\t\t\t\"Headline\" => _(\"Web site\"), 'attr' => 'labeledURI',\n\t\t\t\t\"Text\" => _(\"The user's web site (e.g. http://www.company.com).\") . ' ' . _('Multiple values are separated by semicolon.')\n\t\t\t),\n\t\t\t'cn' => array (\n\t\t\t\t\"Headline\" => _(\"Common name\"), 'attr' => 'cn',\n\t\t\t\t\"Text\" => _(\"This is the natural name of the user. If empty, the first and last name is used.\")\n\t\t\t),\n\t\t\t'displayName' => array (\n\t\t\t\t\"Headline\" => _(\"Display name\"), 'attr' => 'displayName',\n\t\t\t\t\"Text\" => _(\"This is the user's preferred name to be used when displaying entries.\")\n\t\t\t),\n\t\t\t'uid' => array(\n\t\t\t\t\"Headline\" => _(\"User name\"), 'attr' => 'uid',\n\t\t\t\t\"Text\" => _(\"User name of the user who should be created. Valid characters are: a-z,A-Z,0-9, @.-_.\")\n\t\t\t),\n\t\t\t'photoUpload' => array(\n\t\t\t\t\"Headline\" => _(\"Add photo\"), 'attr' => 'jpegPhoto',\n\t\t\t\t\"Text\" => _(\"Please select an image file to upload. It must be in JPG format (.jpg/.jpeg).\")\n\t\t\t),\n\t\t\t'homePhone' => array(\n\t\t\t\t\"Headline\" => _(\"Home telephone number\"), 'attr' => 'homePhone',\n\t\t\t\t\"Text\" => _(\"The user's private telephone number.\")\n\t\t\t),\n\t\t\t'homePhoneList' => array(\n\t\t\t\t\"Headline\" => _(\"Home telephone number\"), 'attr' => 'homePhone',\n\t\t\t\t\"Text\" => _(\"The user's private telephone number.\") . ' ' . _('Multiple values are separated by semicolon.')\n\t\t\t),\n\t\t\t'roomNumber' => array(\n\t\t\t\t\"Headline\" => _(\"Room number\"), 'attr' => 'roomNumber',\n\t\t\t\t\"Text\" => _(\"The room number of the employee's office.\")\n\t\t\t),\n\t\t\t'businessCategory' => array(\n\t\t\t\t\"Headline\" => _(\"Business category\"), 'attr' => 'businessCategory',\n\t\t\t\t\"Text\" => _(\"Business category (e.g. Administration, IT-Services, Management, ...)\")\n\t\t\t),\n\t\t\t'businessCategoryList' => array(\n\t\t\t\t\"Headline\" => _(\"Business category\"), 'attr' => 'businessCategory',\n\t\t\t\t\"Text\" => _(\"Business category (e.g. Administration, IT-Services, Management, ...)\") . '. ' . _(\"Multiple values are separated by semicolon.\")\n\t\t\t),\n\t\t\t'l' => array(\n\t\t\t\t\"Headline\" => _(\"Location\"), 'attr' => 'l',\n\t\t\t\t\"Text\" => _(\"This describes the location of the user.\")\n\t\t\t),\n\t\t\t'lList' => array(\n\t\t\t\t\"Headline\" => _(\"Location\"), 'attr' => 'l',\n\t\t\t\t\"Text\" => _(\"This describes the location of the user.\") . ' ' . _(\"Multiple values are separated by semicolon.\")\n\t\t\t),\n\t\t\t'st' => array(\n\t\t\t\t\"Headline\" => _(\"State\"), 'attr' => 'st',\n\t\t\t\t\"Text\" => _(\"The state where the user resides or works.\")\n\t\t\t),\n\t\t\t'stList' => array(\n\t\t\t\t\"Headline\" => _(\"State\"), 'attr' => 'st',\n\t\t\t\t\"Text\" => _(\"The state where the user resides or works.\") . ' ' . _(\"Multiple values are separated by semicolon.\")\n\t\t\t),\n\t\t\t'carLicense' => array(\n\t\t\t\t\"Headline\" => _(\"Car license\"), 'attr' => 'carLicense',\n\t\t\t\t\"Text\" => _(\"This can be used to specify if the user has a car license.\")\n\t\t\t),\n\t\t\t'physicalDeliveryOfficeName' => array(\n\t\t\t\t\"Headline\" => _(\"Office name\"), 'attr' => 'physicalDeliveryOfficeName',\n\t\t\t\t\"Text\" => _(\"The office name of the user (e.g. YourCompany, Human Resources).\")\n\t\t\t),\n\t\t\t'physicalDeliveryOfficeNameList' => array(\n\t\t\t\t\"Headline\" => _(\"Office name\"), 'attr' => 'physicalDeliveryOfficeName',\n\t\t\t\t\"Text\" => _(\"The office name of the user (e.g. YourCompany, Human Resources).\") . ' ' . _(\"Multiple values are separated by semicolon.\")\n\t\t\t),\n\t\t\t'departmentNumber' => array(\n\t\t\t\t\"Headline\" => _(\"Department\"), 'attr' => 'departmentNumber',\n\t\t\t\t\"Text\" => _(\"Here you can enter the user's department.\")\n\t\t\t),\n\t\t\t'departmentNumberList' => array(\n\t\t\t\t\"Headline\" => _(\"Department\"), 'attr' => 'departmentNumber',\n\t\t\t\t\"Text\" => _(\"Here you can enter the user's department.\") . ' ' . _(\"Multiple values are separated by semicolon.\")\n\t\t\t),\n\t\t\t'hiddenOptions' => array(\n\t\t\t\t\"Headline\" => _(\"Hidden options\"),\n\t\t\t\t\"Text\" => _(\"The selected options will not be managed inside LAM. You can use this to reduce the number of displayed input fields.\")\n\t\t\t),\n\t\t\t'pwdHash' => array(\n\t\t\t\t\"Headline\" => _(\"Password hash type\"),\n\t\t\t\t\"Text\" => _(\"LAM supports a large number of possibilities to generate the hash value of passwords. CRYPT-SHA512 and SSHA are the most common. We do not recommend to use plain text passwords unless passwords are hashed server-side.\")\n\t\t\t\t\t\t. ' ' . _('K5KEY is only needed if you use Kerberos with smbk5pwd.')\n\t\t\t),\n\t\t\t'ou' => array(\n\t\t\t\t\"Headline\" => _(\"Organisational unit\"), 'attr' => 'ou',\n\t\t\t\t\"Text\" => _(\"The user's organisational unit.\")\n\t\t\t),\n\t\t\t'ouList' => array(\n\t\t\t\t\"Headline\" => _(\"Organisational unit\"), 'attr' => 'ou',\n\t\t\t\t\"Text\" => _(\"The user's organisational unit.\") . ' ' . _('Multiple values are separated by semicolon.')\n\t\t\t),\n\t\t\t'o' => array(\n\t\t\t\t\"Headline\" => _(\"Organisation\"), 'attr' => 'o',\n\t\t\t\t\"Text\" => _(\"The user's organisation name.\")\n\t\t\t),\n\t\t\t'oList' => array(\n\t\t\t\t\"Headline\" => _(\"Organisation\"), 'attr' => 'o',\n\t\t\t\t\"Text\" => _(\"The user's organisation name.\") . ' ' . _('Multiple values are separated by semicolon.')\n\t\t\t),\n\t\t\t'employeeNumber' => array(\n\t\t\t\t\"Headline\" => _(\"Employee number\"), 'attr' => 'employeeNumber',\n\t\t\t\t\"Text\" => _(\"The user's unique employee number.\")\n\t\t\t),\n\t\t\t'initials' => array(\n\t\t\t\t\"Headline\" => _(\"Initials\"), 'attr' => 'initials',\n\t\t\t\t\"Text\" => _(\"The initials of the user's first names.\") . ' ' . _('Multiple values are separated by semicolon.')\n\t\t\t),\n\t\t\t'userPassword' => array(\n\t\t\t\t\"Headline\" => _(\"Password\"),\n\t\t\t\t\"Text\" => _(\"Please enter the password which you want to set for this account.\")\n\t\t\t),\n\t\t\t'userCertificate' => array(\n\t\t\t\t\"Headline\" => _('User certificates'),\n\t\t\t\t\"Text\" => _('These are the user\\'s certificates.')\n\t\t\t),\n\t\t\t'crop' => array(\n\t\t\t\t\"Headline\" => _('Image cropping'),\n\t\t\t\t\"Text\" => _('Uploaded images will be cropped to these maximum values.')\n\t\t\t),\n\t\t\t'addAddressbook' => array(\n\t\t\t\t\"Headline\" => _('Add addressbook (ou=addressbook)'),\n\t\t\t\t\"Text\" => _('Adds an \"ou=addressbook\" subentry to each user.')\n\t\t\t),\n\t\t);\n\t\treturn $return;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see baseModule::getManagedAttributes()\n\t */\n\tpublic function getManagedAttributes($typeId) {\n\t\t$attrs = parent::getManagedAttributes($typeId);\n\t\tif (!$this->isUnixActive()) {\n\t\t\t$attrs[] = 'cn';\n\t\t}\n\t\tif (!$this->isSamba3Active()) {\n\t\t\t$attrs[] = 'displayName';\n\t\t}\n\t\treturn $attrs;\n\t}\n\n\t/**\n\t* This functions return true if all needed settings are done.\n\t*\n\t* @return boolean true, if all is ok\n\t*/\n\tfunction module_complete() {\n\t\tif (!$this->getAccountContainer()->isNewAccount) {\n\t\t\t// check if account is based on our object class\n\t\t\t$objectClasses = $this->getAccountContainer()->attributes_orig['objectClass'];\n\t\t\tif (is_array($objectClasses) && !in_array('inetOrgPerson', $objectClasses)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tif (!isset($this->attributes['sn'][0]) || ($this->attributes['sn'][0] == '')) return false;\n\t\tif (!$this->isUnixActive()) {\n\t\t\tif (($this->getAccountContainer()->rdn == 'uid') && !isset($this->attributes['uid'][0])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t* Controls if the module button the account page is visible and activated.\n\t*\n\t* @return string status (\"enabled\", \"disabled\", \"hidden\")\n\t*/\n\tfunction getButtonStatus() {\n\t\tif (!$this->getAccountContainer()->isNewAccount) {\n\t\t\t// check if account is based on our object class\n\t\t\t$objectClasses = $this->getAccountContainer()->attributes_orig['objectClass'];\n\t\t\tif (is_array($objectClasses) && !in_array('inetOrgPerson', $objectClasses)) {\n\t\t\t\treturn \"disabled\";\n\t\t\t}\n\t\t}\n\t\treturn \"enabled\";\n\t}\n\n\t/**\n\t* Returns a list of modifications which have to be made to the LDAP account.\n\t*\n\t* @return array list of modifications\n\t* <br>This function returns an array with 3 entries:\n\t* <br>array( DN1 ('add' => array($attr), 'remove' => array($attr), 'modify' => array($attr)), DN2 .... )\n\t* <br>DN is the DN to change. It may be possible to change several DNs (e.g. create a new user and add him to some groups via attribute memberUid)\n\t* <br>\"add\" are attributes which have to be added to LDAP entry\n\t* <br>\"remove\" are attributes which have to be removed from LDAP entry\n\t* <br>\"modify\" are attributes which have to been modified in LDAP entry\n\t* <br>\"info\" are values with informational value (e.g. to be used later by pre/postModify actions)\n\t*/\n\tfunction save_attributes() {\n\t\t// skip saving if account is based on another structural object class\n\t\tif (!$this->getAccountContainer()->isNewAccount && !in_array('inetOrgPerson', $this->getAccountContainer()->attributes_orig['objectClass'])) {\n\t\t\treturn array();\n\t\t}\n\t\t$return = $this->getAccountContainer()->save_module_attributes($this->attributes, $this->orig);\n\t\t// postalAddress, registeredAddress, facsimileTelephoneNumber and jpegPhoto need special removing\n\t\tif (isset($return[$this->getAccountContainer()->dn_orig]['remove']['postalAddress'])) {\n\t\t\t$return[$this->getAccountContainer()->dn_orig]['modify']['postalAddress'] = $this->attributes['postalAddress'];\n\t\t\tunset($return[$this->getAccountContainer()->dn_orig]['remove']['postalAddress']);\n\t\t}\n\t\tif (isset($return[$this->getAccountContainer()->dn_orig]['remove']['registeredAddress'])) {\n\t\t\t$return[$this->getAccountContainer()->dn_orig]['modify']['registeredAddress'] = $this->attributes['registeredAddress'];\n\t\t\tunset($return[$this->getAccountContainer()->dn_orig]['remove']['registeredAddress']);\n\t\t}\n\t\tif (isset($return[$this->getAccountContainer()->dn_orig]['remove']['facsimileTelephoneNumber'])) {\n\t\t\t$return[$this->getAccountContainer()->dn_orig]['modify']['facsimileTelephoneNumber'] = $this->attributes['facsimileTelephoneNumber'];\n\t\t\tunset($return[$this->getAccountContainer()->dn_orig]['remove']['facsimileTelephoneNumber']);\n\t\t}\n\t\tif (isset($return[$this->getAccountContainer()->dn_orig]['add']['facsimileTelephoneNumber'])\n\t\t\t&& isset($this->orig['facsimileTelephoneNumber']) && (sizeof($this->orig['facsimileTelephoneNumber']) > 0)) {\n\t\t\t$return[$this->getAccountContainer()->dn_orig]['modify']['facsimileTelephoneNumber'] = $this->attributes['facsimileTelephoneNumber'];\n\t\t\tunset($return[$this->getAccountContainer()->dn_orig]['add']['facsimileTelephoneNumber']);\n\t\t}\n\t\tif (isset($return[$this->getAccountContainer()->dn_orig]['remove']['jpegPhoto'])) {\n\t\t\t$return[$this->getAccountContainer()->dn_orig]['modify']['jpegPhoto'] = array();\n\t\t\tunset($return[$this->getAccountContainer()->dn_orig]['remove']['jpegPhoto']);\n\t\t}\n\t\t// add information about clear text password\n\t\tif ($this->clearTextPassword != null) {\n\t\t\t$return[$this->getAccountContainer()->dn_orig]['info']['userPasswordClearText'][0] = $this->clearTextPassword;\n\t\t}\n\t\t// password status change\n\t\tif (!$this->isUnixActive()) {\n\t\t\t$pwdOrig = empty($this->orig['userpassword'][0]) ? '' : $this->orig['userpassword'][0];\n\t\t\t$pwdNew = empty($this->attributes['userpassword'][0]) ? '' : $this->attributes['userpassword'][0];\n\t\t\tif ((pwd_is_enabled($pwdOrig) && pwd_is_enabled($pwdNew)) || (!pwd_is_enabled($pwdOrig) && !pwd_is_enabled($pwdNew))) {\n\t\t\t\t$return[$this->getAccountContainer()->dn_orig]['info']['userPasswordStatusChange'][0] = 'unchanged';\n\t\t\t}\n\t\t\telseif (pwd_is_enabled($pwdOrig)) {\n\t\t\t\t$return[$this->getAccountContainer()->dn_orig]['info']['userPasswordStatusChange'][0] = 'locked';\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$return[$this->getAccountContainer()->dn_orig]['info']['userPasswordStatusChange'][0] = 'unlocked';\n\t\t\t}\n\t\t}\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Runs the postmodify actions.\n\t *\n\t * @see baseModule::postModifyActions()\n\t *\n\t * @param boolean $newAccount\n\t * @param array $attributes LDAP attributes of this entry\n\t * @return array array which contains status messages. Each entry is an array containing the status message parameters.\n\t */\n\tpublic function postModifyActions($newAccount, $attributes) {\n\t\t$messages = array();\n\t\t// set exop password\n\t\t$messages = array_merge($messages, $this->setExopPassword($this->moduleSettings));\n\t\t// add address book\n\t\t$accountContainer = $this->getAccountContainer();\n\t\tif ($this->isBooleanConfigOptionSet('inetOrgPerson_addAddressbook')\n\t\t\t&& !empty($accountContainer)\n\t\t\t&& !empty($accountContainer->finalDN)) {\n\t\t\t$dn = 'ou=addressbook,' . $accountContainer->finalDN;\n\t\t\t$result = ldapGetDN($dn);\n\t\t\tif (empty($result)) {\n\t\t\t\t$attrs = array(\n\t\t\t\t\t'objectClass' => array('organizationalUnit'),\n\t\t\t\t\t'ou' => 'addressbook'\n\t\t\t\t);\n\t\t\t\t$success = @ldap_add($_SESSION['ldap']->server(), $dn, $attrs);\n\t\t\t\tif (!$success) {\n\t\t\t\t\tlogNewMessage(LOG_ERR, 'Unable to add addressbook for user ' . $accountContainer->finalDN . ' (' . ldap_error($_SESSION['ldap']->server()) . ').');\n\t\t\t\t\t$messages[] = array('ERROR', sprintf(_(\"Was unable to create DN: %s.\"), htmlspecialchars($dn)), getDefaultLDAPErrorString($_SESSION['ldap']->server()));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlogNewMessage(LOG_NOTICE, 'Added addressbook for user ' . $accountContainer->finalDN);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $messages;\n\t}\n\n\t/**\n\t * Sets the password via ldap_exop if configured.\n\t *\n\t * @param array $settings settings\n\t * @return array error message parameters if any\n\t */\n\tprivate function setExopPassword($settings) {\n\t\tif (!empty($this->clearTextPassword) && !empty($settings['posixAccount_pwdHash'][0])\n\t\t\t\t&& ($settings['posixAccount_pwdHash'][0] === 'LDAP_EXOP')) {\n\t\t\t$success = ldap_exop_passwd($_SESSION['ldap']->server(), $this->getAccountContainer()->finalDN, null, $this->clearTextPassword);\n\t\t\tif (!$success) {\n\t\t\t\treturn array(array('ERROR', _('Unable to set password'), getExtendedLDAPErrorMessage($_SESSION['ldap']->server())));\n\t\t\t}\n\t\t}\n\t\treturn array();\n\t}\n\n\t/**\n\t* Processes user input of the primary module page.\n\t* It checks if all input values are correct and updates the associated LDAP attributes.\n\t*\n\t* @return array list of info/error messages\n\t*/\n\tfunction process_attributes() {\n\t\t$errors = array();\n\t\t$keysToReplace = array('mail', 'description', 'postalAddress', 'cn',\n\t\t\t'registeredAddress', 'labeledURI');\n\t\tif ($this->isUnixActive()) {\n\t\t\t$keysToReplace[] = 'uid';\n\t\t}\n\t\t$this->getAccountContainer()->replaceWildcardsInPOST($keysToReplace);\n\t\t// add parent object classes\n\t\tif ($this->getAccountContainer()->isNewAccount) {\n\t\t\tif (!in_array('organizationalPerson', $this->attributes['objectClass'])) {\n\t\t\t\t$this->attributes['objectClass'][] = 'organizationalPerson';\n\t\t\t}\n\t\t\tif (!in_array('person', $this->attributes['objectClass'])) {\n\t\t\t\t$this->attributes['objectClass'][] = 'person';\n\t\t\t}\n\t\t}\n\t\t// load and check attributes\n\t\t// description\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideDescription') && !$this->isAdminReadOnly('description')) {\n\t\t\t$this->processMultiValueInputTextField('description', $errors);\n\t\t}\n\t\t// last name\n\t\tif (!$this->isAdminReadOnly('sn')) {\n\t\t\t$this->attributes['sn'][0] = trim($_POST['sn']);\n\t\t\tif (!get_preg($this->attributes['sn'][0], 'realname')) $errors[] = $this->messages['lastname'][0];\n\t\t}\n\t\t// first name\n\t\tif (!$this->isAdminReadOnly('givenName')) {\n\t\t\t$this->attributes['givenName'][0] = trim($_POST['givenName']);\n\t\t\tif (($this->attributes['givenName'][0] != '') && !get_preg($this->attributes['givenName'][0], 'realname')) $errors[] = $this->messages['givenName'][0];\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideJobTitle') && !$this->isAdminReadOnly('title')) {\n\t\t\t$this->processMultiValueInputTextField('title', $errors, 'title');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEMailAddress') && !$this->isAdminReadOnly('mail')) {\n\t\t\t$this->processMultiValueInputTextField('mail', $errors, 'email');\n\t\t\tif (!empty($this->attributes['mail'])) {\n\t\t\t\tforeach ($this->attributes['mail'] as &$mail) {\n\t\t\t\t\tif (empty($this->orig['mail']) || !in_array($mail, $this->orig['mail'])) {\n\t\t\t\t\t\tif ($this->emailExists($mail)) {\n\t\t\t\t\t\t\t$msg = $this->messages['mail'][1];\n\t\t\t\t\t\t\t$msg[] = array(htmlspecialchars($mail));\n\t\t\t\t\t\t\t$errors[] = $msg;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!$this->isSamba3Active() && !$this->isBooleanConfigOptionSet('inetOrgPerson_hidedisplayName', true)) {\n\t\t\t$this->attributes['displayName'][0] = $_POST['displayName'];\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideTelephoneNumber') && !$this->isAdminReadOnly('telephoneNumber')) {\n\t\t\t$this->processMultiValueInputTextField('telephoneNumber', $errors, 'telephone');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideMobileNumber') && !$this->isAdminReadOnly('mobile')) {\n\t\t\t$this->processMultiValueInputTextField('mobile', $errors, 'telephone');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideFaxNumber') && !$this->isAdminReadOnly('facsimileTelephoneNumber')) {\n\t\t\t$this->processMultiValueInputTextField('facsimileTelephoneNumber', $errors, 'telephone');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePager', true) && !$this->isAdminReadOnly('pager')) {\n\t\t\t$this->processMultiValueInputTextField('pager', $errors, 'telephone');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideHomeTelephoneNumber') && !$this->isAdminReadOnly('homePhone')) {\n\t\t\t$this->processMultiValueInputTextField('homePhone', $errors, 'telephone');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideStreet') && !$this->isAdminReadOnly('street')) {\n\t\t\t$this->processMultiValueInputTextField('street', $errors, 'street');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostOfficeBox') && !$this->isAdminReadOnly('postOfficeBox')) {\n\t\t\t$this->processMultiValueInputTextField('postOfficeBox', $errors);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalCode') && !$this->isAdminReadOnly('postalCode')) {\n\t\t\t$this->processMultiValueInputTextField('postalCode', $errors, 'postalCode');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalAddress') && !$this->isAdminReadOnly('postalAddress')) {\n\t\t\t$addressCounter = 0;\n\t\t\twhile (isset($_POST['postalAddress' . $addressCounter])) {\n\t\t\t\t$this->attributes['postalAddress'][$addressCounter] = implode('$', preg_split('/[\\r][\\n]/', $_POST['postalAddress' . $addressCounter]));\n\t\t\t\tif (!get_preg($this->attributes['postalAddress'][$addressCounter], 'postalAddress')) $errors[] = $this->messages['postalAddress'][0];\n\t\t\t\tif ($this->attributes['postalAddress'][$addressCounter] == '') {\n\t\t\t\t\tunset($this->attributes['postalAddress'][$addressCounter]);\n\t\t\t\t}\n\t\t\t\t$addressCounter++;\n\t\t\t}\n\t\t\tif (isset($_POST['addPostalAddress'])) {\n\t\t\t\t$this->attributes['postalAddress'][] = '';\n\t\t\t}\n\t\t\t$this->attributes['postalAddress'] = array_values($this->attributes['postalAddress']);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideLabeledURI') && !$this->isAdminReadOnly('labeledURI')) {\n\t\t\t$this->processMultiValueInputTextField('labeledURI', $errors);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideRegisteredAddress') && !$this->isAdminReadOnly('registeredAddress')) {\n\t\t\t$addressCounter = 0;\n\t\t\twhile (isset($_POST['registeredAddress' . $addressCounter])) {\n\t\t\t\t$this->attributes['registeredAddress'][$addressCounter] = implode('$', preg_split('/[\\r][\\n]/', $_POST['registeredAddress' . $addressCounter]));\n\t\t\t\tif (!get_preg($this->attributes['registeredAddress'][$addressCounter], 'postalAddress')) $errors[] = $this->messages['registeredAddress'][0];\n\t\t\t\tif ($this->attributes['registeredAddress'][$addressCounter] == '') {\n\t\t\t\t\tunset($this->attributes['registeredAddress'][$addressCounter]);\n\t\t\t\t}\n\t\t\t\t$addressCounter++;\n\t\t\t}\n\t\t\tif (isset($_POST['addRegisteredAddress'])) {\n\t\t\t\t$this->attributes['registeredAddress'][] = '';\n\t\t\t}\n\t\t\t$this->attributes['registeredAddress'] = array_values($this->attributes['registeredAddress']);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEmployeeType') && !$this->isAdminReadOnly('employeeType')) {\n\t\t\t$this->attributes['employeeType'][0] = $_POST['employeeType'];\n\t\t\tif (!get_preg($this->attributes['employeeType'][0], 'employeeType')) $errors[] = $this->messages['employeeType'][0];\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideRoomNumber') && !$this->isAdminReadOnly('roomNumber')) {\n\t\t\t$this->attributes['roomNumber'][0] = $_POST['roomNumber'];\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideLocation') && !$this->isAdminReadOnly('l')) {\n\t\t\t$this->processMultiValueInputTextField('l', $errors);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideState') && !$this->isAdminReadOnly('st')) {\n\t\t\t$this->processMultiValueInputTextField('st', $errors);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideCarLicense') && !$this->isAdminReadOnly('carLicense')) {\n\t\t\t$this->attributes['carLicense'][0] = $_POST['carLicense'];\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideOfficeName') && !$this->isAdminReadOnly('physicalDeliveryOfficeName')) {\n\t\t\t$this->processMultiValueInputTextField('physicalDeliveryOfficeName', $errors);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideBusinessCategory') && !$this->isAdminReadOnly('businessCategory')) {\n\t\t\t$this->processMultiValueInputTextField('businessCategory', $errors, 'businessCategory');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideDepartments') && !$this->isAdminReadOnly('departmentNumber')) {\n\t\t\t$this->processMultiValueInputTextField('departmentNumber', $errors);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEmployeeNumber') && !$this->isAdminReadOnly('employeeNumber')) {\n\t\t\t$this->attributes['employeeNumber'][0] = $_POST['employeeNumber'];\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideOu') && !$this->isAdminReadOnly('ou')) {\n\t\t\t$this->processMultiValueInputTextField('ou', $errors);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideO') && !$this->isAdminReadOnly('o')) {\n\t\t\t$this->processMultiValueInputTextField('o', $errors);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideInitials') && !$this->isAdminReadOnly('initials')) {\n\t\t\t$this->attributes['initials'] = preg_split('/;[ ]*/', $_POST['initials']);\n\t\t}\n\n\t\tif (!$this->isUnixActive()) {\n\t\t\t// uid\n\t\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideUID') && !$this->isAdminReadOnly('uid')) {\n\t\t\t\tif (isset($_POST['uid']) && ($_POST['uid'] != '')) {\n\t\t\t\t\tif (!get_preg($_POST['uid'], 'username')) {\n\t\t\t\t\t\t$errors[] = $this->messages['uid'][0];\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$this->attributes['uid'][0] = $_POST['uid'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telseif (isset($this->attributes['uid'][0])) {\n\t\t\t\t\tunset($this->attributes['uid'][0]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// cn\n\t\t\tif (!$this->isAdminReadOnly('cn')) {\n\t\t\t\t$this->processMultiValueInputTextField('cn', $errors, 'cn');\n\t\t\t\tif (empty($this->attributes['cn'][0])) {\n\t\t\t\t\tif ($_POST['givenName'] != '') {\n\t\t\t\t\t\t$this->attributes['cn'][0] = $_POST['givenName'] . \" \" . $_POST['sn'];\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$this->attributes['cn'][0] = $_POST['sn'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!$this->isAdminReadOnly('userPassword')) {\n\t\t\t\tif (isset($_POST['lockPassword'])) {\n\t\t\t\t\t$this->attributes['userpassword'][0] = pwd_disable($this->attributes['userpassword'][0]);\n\t\t\t\t}\n\t\t\t\tif (isset($_POST['unlockPassword'])) {\n\t\t\t\t\t$this->attributes['userpassword'][0] = pwd_enable($this->attributes['userpassword'][0]);\n\t\t\t\t}\n\t\t\t\tif (isset($_POST['removePassword'])) {\n\t\t\t\t\tunset($this->attributes['userpassword']);\n\t\t\t\t}\n\t\t\t\t// set SASL password for new and renamed users\n\t\t\t\tif (!empty($this->attributes['uid'][0]) && !empty($this->moduleSettings['posixAccount_pwdHash'][0])\n\t\t\t\t\t\t&& ($this->moduleSettings['posixAccount_pwdHash'][0] === 'SASL')\n\t\t\t\t\t\t&& ($this->getAccountContainer()->isNewAccount || ($this->attributes['uid'][0] != $this->orig['uid'][0]))) {\n\t\t\t\t\t$this->attributes['userpassword'][0] = '{SASL}' . $this->attributes['uid'][0];\n\t\t\t\t}\n\t\t\t\t// set K5KEY password for new users\n\t\t\t\tif (!empty($this->moduleSettings['posixAccount_pwdHash'][0]) && ($this->moduleSettings['posixAccount_pwdHash'][0] === 'K5KEY')) {\n\t\t\t\t\t$this->attributes[$this->getPasswordAttrName()][0] = pwd_hash('x', true, $this->moduleSettings['posixAccount_pwdHash'][0]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidejpegPhoto') && isset($_POST['delPhoto']) && !$this->isAdminReadOnly('jpegPhoto')) {\n\t\t\t$this->attributes['jpegPhoto'] = array();\n\t\t}\n\t\t// Return error-messages\n\t\treturn $errors;\n\t}\n\n\t/**\n\t * Returns the HTML meta data for the main account page.\n\t *\n\t * @return array HTML meta data\n\t */\n\tfunction display_html_attributes() {\n\t\t$this->initCache();\n\t\t$container = new htmlResponsiveRow();\n\t\t$fieldContainer = new htmlResponsiveRow();\n\t\t$fieldTabletColumns = $this->isBooleanConfigOptionSet('inetOrgPerson_hidejpegPhoto') ? 12 : 8;\n\t\t$container->add($fieldContainer, 12, 12, $fieldTabletColumns);\n\t\t// uid\n\t\tif (!$this->isUnixActive() && !$this->isBooleanConfigOptionSet('inetOrgPerson_hideUID')) {\n\t\t\tif ($this->isAdminReadOnly('uid')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'uid', _('User name'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addSimpleInputTextField($fieldContainer, 'uid', _('User name'));\n\t\t\t}\n\t\t}\n\t\t// first name\n\t\tif ($this->isAdminReadOnly('givenName')) {\n\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'givenName', _('First name'));\n\t\t}\n\t\telse {\n\t\t\t$this->addSimpleInputTextField($fieldContainer, 'givenName', _('First name'));\n\t\t}\n\t\t// last name\n\t\tif ($this->isAdminReadOnly('sn')) {\n\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'sn', _('Last name'));\n\t\t}\n\t\telse {\n\t\t\t$this->addSimpleInputTextField($fieldContainer, 'sn', _('Last name'), true);\n\t\t}\n\t\t// initials\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideInitials')) {\n\t\t\tif ($this->isAdminReadOnly('initials')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'initials', _('Initials'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addSimpleInputTextField($fieldContainer, 'initials', _('Initials'));\n\t\t\t}\n\t\t}\n\t\t// common name\n\t\tif (!$this->isUnixActive()) {\n\t\t\tif ($this->isAdminReadOnly('cn')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'cn', _('Common name'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'cn', _('Common name'), true);\n\t\t\t}\n\t\t}\n\t\t// display name\n\t\tif (!$this->isSamba3Active() && !$this->isBooleanConfigOptionSet('inetOrgPerson_hidedisplayName', true)) {\n\t\t\t$this->addSimpleInputTextField($fieldContainer, 'displayName', _('Display name'));\n\t\t}\n\t\t// description\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideDescription')) {\n\t\t\tif ($this->isAdminReadOnly('description')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'description', _('Description'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'description', _('Description'));\n\t\t\t}\n\t\t}\n\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideStreet') || !$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostOfficeBox')\n\t\t\t\t|| !$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalCode') || !$this->isBooleanConfigOptionSet('inetOrgPerson_hideLocation')\n\t\t\t\t|| !$this->isBooleanConfigOptionSet('inetOrgPerson_hideState') || !$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalAddress')\n\t\t\t\t|| !$this->isBooleanConfigOptionSet('inetOrgPerson_hideOfficeName') || !$this->isBooleanConfigOptionSet('inetOrgPerson_hideRoomNumber')\n\t\t\t\t|| !$this->isBooleanConfigOptionSet('inetOrgPerson_hideRegisteredAddress')) {\n\t\t\t$fieldContainer->add(new htmlSubTitle(_('Address')), 12);\n\t\t}\n\n\t\t// street\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideStreet')) {\n\t\t\tif ($this->isAdminReadOnly('street')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'street', _('Street'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'street', _('Street'));\n\t\t\t}\n\t\t}\n\t\t// post office box\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostOfficeBox')) {\n\t\t\tif ($this->isAdminReadOnly('postOfficeBox')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'postOfficeBox', _('Post office box'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'postOfficeBox', _('Post office box'));\n\t\t\t}\n\t\t}\n\t\t// postal code\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalCode')) {\n\t\t\tif ($this->isAdminReadOnly('postalCode')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'postalCode', _('Postal code'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'postalCode', _('Postal code'));\n\t\t\t}\n\t\t}\n\t\t// location\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideLocation')) {\n\t\t\tif ($this->isAdminReadOnly('l')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'l', _('Location'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'l', _('Location'));\n\t\t\t}\n\t\t}\n\t\t// state\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideState')) {\n\t\t\tif ($this->isAdminReadOnly('st')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'st', _('State'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'st', _('State'));\n\t\t\t}\n\t\t}\n\t\t// postal address\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalAddress')) {\n\t\t\t$postalAddresses = array();\n\t\t\tif (isset($this->attributes['postalAddress'][0])) {\n\t\t\t\tfor ($i = 0; $i < sizeof($this->attributes['postalAddress']); $i++) {\n\t\t\t\t\t$postalAddresses[] = implode(\"\\r\\n\", explode('$', $this->attributes['postalAddress'][$i]));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (sizeof($postalAddresses) == 0) {\n\t\t\t\t$postalAddresses[] = '';\n\t\t\t}\n\t\t\t$addressLabel = new htmlOutputText(_('Postal address'));\n\t\t\t$addressLabel->alignment = htmlElement::ALIGN_TOP;\n\t\t\t$fieldContainer->addLabel($addressLabel);\n\t\t\t$addressContainer = new htmlGroup();\n\t\t\tfor ($i = 0; $i < sizeof($postalAddresses); $i++) {\n\t\t\t\tif ($this->isAdminReadOnly('postalAddress')) {\n\t\t\t\t\t$val = str_replace(\"\\r\\n\", '<br>', htmlspecialchars($postalAddresses[$i]));\n\t\t\t\t\t$addressContainer->addElement(new htmlOutputText($val, false));\n\t\t\t\t\tif ($i < (sizeof($postalAddresses) - 1)) {\n\t\t\t\t\t\t$addressContainer->addElement(new htmlOutputText('<br>', false));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$addressContainer->addElement(new htmlInputTextarea('postalAddress' . $i, $postalAddresses[$i], 30, 3));\n\t\t\t\t\tif ($i < (sizeof($postalAddresses) - 1)) {\n\t\t\t\t\t\t$addressContainer->addElement(new htmlOutputText('<br>', false));\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$addressContainer->addElement(new htmlButton('addPostalAddress', 'add.svg', true));\n\t\t\t\t\t\t$addressHelp = new htmlHelpLink('postalAddress');\n\t\t\t\t\t\t$addressContainer->addElement($addressHelp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$fieldContainer->addField($addressContainer);\n\t\t}\n\t\t// registered address\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideRegisteredAddress')) {\n\t\t\t$registeredAddresses = array();\n\t\t\tif (isset($this->attributes['registeredAddress'][0])) {\n\t\t\t\tfor ($i = 0; $i < sizeof($this->attributes['registeredAddress']); $i++) {\n\t\t\t\t\t$registeredAddresses[] = implode(\"\\r\\n\", explode('$', $this->attributes['registeredAddress'][$i]));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (sizeof($registeredAddresses) == 0) {\n\t\t\t\t$registeredAddresses[] = '';\n\t\t\t}\n\t\t\t$registeredAddressLabel = new htmlOutputText(_('Registered address'));\n\t\t\t$registeredAddressLabel->alignment = htmlElement::ALIGN_TOP;\n\t\t\t$fieldContainer->addLabel($registeredAddressLabel);\n\t\t\t$registeredAddressContainer = new htmlGroup();\n\t\t\tfor ($i = 0; $i < sizeof($registeredAddresses); $i++) {\n\t\t\t\tif ($this->isAdminReadOnly('registeredAddress')) {\n\t\t\t\t\t$val = str_replace(\"\\r\\n\", '<br>', htmlspecialchars($registeredAddresses[$i]));\n\t\t\t\t\t$registeredAddressContainer->addElement(new htmlOutputText($val, false));\n\t\t\t\t\tif ($i < (sizeof($registeredAddresses) - 1)) {\n\t\t\t\t\t\t$registeredAddressContainer->addElement(new htmlOutputText('<br>', false));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$registeredAddressContainer->addElement(new htmlInputTextarea('registeredAddress' . $i, $registeredAddresses[$i], 30, 3));\n\t\t\t\t\tif ($i < (sizeof($registeredAddresses) - 1)) {\n\t\t\t\t\t\t$registeredAddressContainer->addElement(new htmlOutputText('<br>', false));\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$registeredAddressContainer->addElement(new htmlButton('addRegisteredAddress', 'add.svg', true));\n\t\t\t\t\t\t$registeredAddressHelp = new htmlHelpLink('registeredAddress');\n\t\t\t\t\t\t$registeredAddressContainer->addElement($registeredAddressHelp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$fieldContainer->addField($registeredAddressContainer);\n\t\t}\n\t\t// office name\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideOfficeName')) {\n\t\t\tif ($this->isAdminReadOnly('physicalDeliveryOfficeName')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'physicalDeliveryOfficeName', _('Office name'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'physicalDeliveryOfficeName', _('Office name'));\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideRoomNumber')) {\n\t\t\tif ($this->isAdminReadOnly('roomNumber')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'roomNumber', _('Room number'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addSimpleInputTextField($fieldContainer, 'roomNumber', _('Room number'));\n\t\t\t}\n\t\t}\n\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideTelephoneNumber') || !$this->isBooleanConfigOptionSet('inetOrgPerson_hideHomeTelephoneNumber')\n\t\t\t\t|| !$this->isBooleanConfigOptionSet('inetOrgPerson_hideMobileNumber') || !$this->isBooleanConfigOptionSet('inetOrgPerson_hideFaxNumber')\n\t\t\t\t|| !$this->isBooleanConfigOptionSet('inetOrgPerson_hideEMailAddress') || !$this->isBooleanConfigOptionSet('inetOrgPerson_hideLabeledURI')) {\n\t\t\t$fieldContainer->add(new htmlSubTitle(_('Contact data')), 12);\n\t\t}\n\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideTelephoneNumber')) {\n\t\t\tif ($this->isAdminReadOnly('telephoneNumber')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'telephoneNumber', _('Telephone number'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'telephoneNumber', _('Telephone number'));\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideHomeTelephoneNumber')) {\n\t\t\tif ($this->isAdminReadOnly('homePhone')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'homePhone', _('Home telephone number'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'homePhone', _('Home telephone number'));\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideMobileNumber')) {\n\t\t\tif ($this->isAdminReadOnly('mobile')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'mobile', _('Mobile number'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'mobile', _('Mobile number'));\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideFaxNumber')) {\n\t\t\tif ($this->isAdminReadOnly('facsimileTelephoneNumber')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'facsimileTelephoneNumber', _('Fax number'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'facsimileTelephoneNumber', _('Fax number'));\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePager', true)) {\n\t\t\tif ($this->isAdminReadOnly('pager')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'pager', _('Pager'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'pager', _('Pager'));\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEMailAddress')) {\n\t\t\tif ($this->isAdminReadOnly('mail')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'mail', _('Email address'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'mail', _('Email address'));\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideLabeledURI')) {\n\t\t\tif ($this->isAdminReadOnly('labeledURI')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'labeledURI', _('Web site'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'labeledURI', _('Web site'));\n\t\t\t}\n\t\t}\n\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideJobTitle') || !$this->isBooleanConfigOptionSet('inetOrgPerson_hideCarLicense')\n\t\t\t\t|| !$this->isBooleanConfigOptionSet('inetOrgPerson_hideEmployeeType') || !$this->isBooleanConfigOptionSet('inetOrgPerson_hideBusinessCategory')\n\t\t\t\t|| !$this->isBooleanConfigOptionSet('inetOrgPerson_hideDepartments') || !$this->isBooleanConfigOptionSet('inetOrgPerson_hideManager')\n\t\t\t\t|| !$this->isBooleanConfigOptionSet('inetOrgPerson_hideuserCertificate')) {\n\t\t\t$fieldContainer->add(new htmlSubTitle(_('Work details')), 12);\n\t\t}\n\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideJobTitle')) {\n\t\t\tif ($this->isAdminReadOnly('title')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'title', _('Job title'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'title', _('Job title'), false, null, false, array_slice($this->titleCache, 0, 300));\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideCarLicense')) {\n\t\t\tif ($this->isAdminReadOnly('carLicense')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'carLicense', _('Car license'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addSimpleInputTextField($fieldContainer, 'carLicense', _('Car license'));\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEmployeeNumber')) {\n\t\t\tif ($this->isAdminReadOnly('employeeNumber')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'employeeNumber', _('Employee number'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addSimpleInputTextField($fieldContainer, 'employeeNumber', _('Employee number'));\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEmployeeType')) {\n\t\t\tif ($this->isAdminReadOnly('employeeType')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'employeeType', _('Employee type'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addSimpleInputTextField($fieldContainer, 'employeeType', _('Employee type'), false, null, false, array_slice($this->employeeTypeCache, 0, 300));\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideBusinessCategory')) {\n\t\t\tif ($this->isAdminReadOnly('businessCategory')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'businessCategory', _('Business category'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'businessCategory', _('Business category'), false, null, false, array_slice($this->businessCategoryCache, 0, 300));\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideDepartments')) {\n\t\t\tif ($this->isAdminReadOnly('departmentNumber')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'departmentNumber', _('Department'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'departmentNumber', _('Department'), false, null, false, array_slice($this->departmentCache, 0, 300));\n\t\t\t}\n\t\t}\n\t\t// organisational unit\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideOu')) {\n\t\t\tif ($this->isAdminReadOnly('ou')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'ou', _('Organisational unit'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'ou', _('Organisational unit'), false, null, false, array_slice($this->ouCache, 0, 300));\n\t\t\t}\n\t\t}\n\t\t// organisation\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideO')) {\n\t\t\tif ($this->isAdminReadOnly('o')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'o', _('Organisation'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'o', _('Organisation'), false, null, false, array_slice($this->oCache, 0, 300));\n\t\t\t}\n\t\t}\n\t\t// user certificates\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideuserCertificate')) {\n\t\t\t$fieldContainer->addVerticalSpacer('0.5rem');\n\t\t\t$fieldContainer->addLabel(new htmlOutputText(_('User certificates')));\n\t\t\t$userCertificateGroup = new htmlGroup();\n\t\t\t$userCertificateCount = 0;\n\t\t\tif (isset($this->attributes['userCertificate;binary'])) {\n\t\t\t\t$userCertificateCount = sizeof($this->attributes['userCertificate;binary']);\n\t\t\t}\n\t\t\t$userCertificateGroup->addElement(new htmlOutputText($userCertificateCount));\n\t\t\t$userCertificateGroup->addElement(new htmlSpacer('10px', null));\n\t\t\tif (!$this->isAdminReadOnly('manager')) {\n\t\t\t\t$userCertificateGroup->addElement(new htmlAccountPageButton(get_class($this), 'userCertificate', 'manage', _('Manage')));\n\t\t\t\t$userCertificateGroup->addElement(new htmlHelpLink('userCertificate'));\n\t\t\t}\n\t\t\t$fieldContainer->addField($userCertificateGroup);\n\t\t}\n\t\t// manager\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideManager')) {\n\t\t\t$fieldContainer->addVerticalSpacer('0.5rem');\n\t\t\t$fieldContainer->addLabel(new htmlOutputText(_('Manager')));\n\t\t\tif (!$this->isAdminReadOnly('manager')) {\n\t\t\t\t$managerButtonGroup = new htmlGroup();\n\t\t\t\t$managerButtonGroup->addElement(new htmlAccountPageButton(get_class($this), 'manager', 'change', _(\"Change\")));\n\t\t\t\t$managerButtonGroup->addElement(new htmlHelpLink('manager'));\n\t\t\t\t$fieldContainer->addField($managerButtonGroup);\n\t\t\t}\n\t\t\tif (isset($this->attributes['manager'][0])) {\n\t\t\t\t$managerList = array();\n\t\t\t\tfor ($i = 0; $i < sizeof($this->attributes['manager']); $i++) {\n\t\t\t\t\t$managerList[] = $this->attributes['manager'][$i];\n\t\t\t\t}\n\t\t\t\tusort($managerList, 'compareDN');\n\t\t\t\t$managers = new htmlTable();\n\t\t\t\t$managers->alignment = htmlElement::ALIGN_RIGHT;\n\t\t\t\t$managers->colspan = 3;\n\t\t\t\tfor ($i = 0; $i < sizeof($managerList); $i++) {\n\t\t\t\t\t$manager = new htmlOutputText(getAbstractDN($managerList[$i]));\n\t\t\t\t\t$manager->alignment = htmlElement::ALIGN_RIGHT;\n\t\t\t\t\t$managers->addElement($manager, true);\n\t\t\t\t}\n\t\t\t\t$fieldContainer->addLabel(new htmlOutputText('&nbsp;', false));\n\t\t\t\t$fieldContainer->addField($managers);\n\t\t\t}\n\t\t}\n\t\t// password buttons\n\t\tif (!$this->isUnixActive() && checkIfWriteAccessIsAllowed($this->get_scope()) && isset($this->attributes['userpassword'][0]) && !$this->isAdminReadOnly('userPassword')) {\n\t\t\t$fieldContainer->add(new htmlSubTitle(_('Password')), 12);\n\t\t\t$pwdContainer = new htmlGroup();\n\t\t\tif (pwd_is_enabled($this->attributes['userpassword'][0])) {\n\t\t\t\t$pwdContainer->addElement(new htmlButton('lockPassword', _('Lock password')));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$pwdContainer->addElement(new htmlButton('unlockPassword', _('Unlock password')));\n\t\t\t}\n\t\t\t$pwdContainer->addElement(new htmlSpacer('0.5rem', null));\n\t\t\t$pwdContainer->addElement(new htmlButton('removePassword', _('Remove password')));\n\t\t\t$fieldContainer->add($pwdContainer, 12, 12, 12, 'text-center');\n\t\t}\n\t\t// photo\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidejpegPhoto')) {\n\t\t\t$imageContainer = new htmlTable();\n\t\t\t$imageContainer->setCSSClasses(array('div-center'));\n\t\t\t$imageContainer->alignment = htmlElement::ALIGN_TOP;\n\t\t\t$photoFile = '../../graphics/user.svg';\n\t\t\t$noPhoto = true;\n\t\t\tif (isset($this->attributes['jpegPhoto'][0])) {\n\t\t\t\t$jpeg_filename = 'jpg' . getRandomNumber() . '.jpg';\n\t\t\t\t$outjpeg = @fopen(dirname(__FILE__) . '/../../tmp/' . $jpeg_filename, \"wb\");\n\t\t\t\tfwrite($outjpeg, $this->attributes['jpegPhoto'][0]);\n\t\t\t\tfclose ($outjpeg);\n\t\t\t\t$photoFile = '../../tmp/' . $jpeg_filename;\n\t\t\t\t$noPhoto = false;\n\t\t\t}\n\t\t\t$img = new htmlImage($photoFile);\n\t\t\t$img->setCSSClasses(array('photo'));\n\t\t\t$img->enableLightbox();\n\t\t\t$imageContainer->addElement($img, true);\n\t\t\tif (!$this->isAdminReadOnly('jpegPhoto')) {\n\t\t\t\tif ($noPhoto) {\n\t\t\t\t\t$imageContainer->addElement(new htmlAccountPageButton(get_class($this), 'photo', 'open', _('Add photo')));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$imageContainer->addElement(new htmlButton('delPhoto', _('Delete photo')));\n\t\t\t\t}\n\t\t\t}\n\t\t\t$container->add($imageContainer, 12, 12, 4);\n\t\t}\n\t\treturn $container;\n\t}\n\n\t/**\n\t* Sets a new photo.\n\t*\n\t* @return array list of error messages if any\n\t*/\n\tpublic function process_photo() {\n\t\tif (isset($_POST['form_subpage_' . get_class($this) . '_attributes_back'])) {\n\t\t\treturn array();\n\t\t}\n\t\tif ($this->isAdminReadOnly('jpegPhoto')) {\n\t\t\treturn array();\n\t\t}\n\t\tif (isset($_POST['form_subpage_' . get_class($this) . '_photo_upload']) || isset($_POST['webcamData'])) {\n\t\t\treturn $this->uploadPhoto();\n\t\t}\n\t\tif (isset($_POST['form_subpage_' . get_class($this) . '_attributes_crop'])) {\n\t\t\t$messages = array();\n\t\t\ttry {\n\t\t\t\tinclude_once dirname(__FILE__) . '/../imageutils.inc';\n\t\t\t\t$imageManipulator = ImageManipulationFactory::getImageManipulator($this->attributes['jpegPhoto'][0]);\n\t\t\t\t$imageManipulator->crop($_POST['croppingDataX'], $_POST['croppingDataY'], $_POST['croppingDataWidth'], $_POST['croppingDataHeight']);\n\t\t\t\t$this->attributes['jpegPhoto'][0] = $imageManipulator->getImageData();\n\t\t\t}\n\t\t\tcatch (Exception $e) {\n\t\t\t\t$msg =  $this->messages['file'][2];\n\t\t\t\t$msg[] = htmlspecialchars($e->getMessage());\n\t\t\t\t$messages[] = $msg;\n\t\t\t}\n\t\t\treturn $messages;\n\t\t}\n\t}\n\n\t/**\n\t * Uploads the photo file.\n\t *\n\t * @return array error messages if any\n\t */\n\tprivate function uploadPhoto() {\n\t\t$messages = array();\n\t\tif ((empty($_FILES['photoFile']) || ($_FILES['photoFile']['size'] <= 0)) && empty($_POST['webcamData'])) {\n\t\t\t$messages[] = $this->messages['file'][0];\n\t\t\treturn $messages;\n\t\t}\n\t\tif (!empty($_FILES['photoFile']['tmp_name'])) {\n\t\t\t$handle = fopen($_FILES['photoFile']['tmp_name'], \"r\");\n\t\t\t$data = fread($handle, 100000000);\n\t\t\tfclose($handle);\n\t\t\tif (!empty($this->moduleSettings['inetOrgPerson_jpegPhoto_maxSize'][0]) && (strlen($data) > (1024 * $this->moduleSettings['inetOrgPerson_jpegPhoto_maxSize'][0]))) {\n\t\t\t\t$errMsg = $this->messages['file'][3];\n\t\t\t\t$errMsg[] = null;\n\t\t\t\t$errMsg[] = array($this->moduleSettings['inetOrgPerson_jpegPhoto_maxSize'][0]);\n\t\t\t\treturn array($errMsg);\n\t\t\t}\n\t\t}\n\t\telseif (isset($_POST['webcamData'])) {\n\t\t\t$data = $_POST['webcamData'];\n\t\t\t$data = str_replace('data:image/png;base64,', '', $data);\n\t\t\t$data = base64_decode($data);\n\t\t}\n\t\t// convert to JPG\n\t\ttry {\n\t\t\tinclude_once dirname(__FILE__) . '/../imageutils.inc';\n\t\t\t$imageManipulator = ImageManipulationFactory::getImageManipulator($data);\n\t\t\t// resize if maximum values specified\n\t\t\tif (!empty($this->moduleSettings['inetOrgPerson_jpegPhoto_maxWidth'][0]) || !empty($this->moduleSettings['inetOrgPerson_jpegPhoto_maxHeight'][0])) {\n\t\t\t\t$maxWidth = empty($this->moduleSettings['inetOrgPerson_jpegPhoto_maxWidth'][0]) ? $imageManipulator->getWidth() : $this->moduleSettings['inetOrgPerson_jpegPhoto_maxWidth'][0];\n\t\t\t\t$maxHeight = empty($this->moduleSettings['inetOrgPerson_jpegPhoto_maxHeight'][0]) ? $imageManipulator->getHeight() : $this->moduleSettings['inetOrgPerson_jpegPhoto_maxHeight'][0];\n\t\t\t\t$imageManipulator->thumbnail($maxWidth, $maxHeight);\n\t\t\t}\n\t\t\t$imageManipulator->convertToJpeg();\n\t\t\t$data = $imageManipulator->getImageData();\n\t\t}\n\t\tcatch (Exception $e) {\n\t\t\t$msg =  $this->messages['file'][2];\n\t\t\t$msg[] = htmlspecialchars($e->getMessage());\n\t\t\t$messages[] = $msg;\n\t\t\treturn $messages;\n\t\t}\n\t\t$this->attributes['jpegPhoto'][0] = $data;\n\t\treturn $messages;\n\t}\n\n\t/**\n\t* Displays the photo upload page.\n\t*\n\t* @return array meta HTML code\n\t*/\n\tpublic function display_html_photo() {\n\t\t$container = new htmlResponsiveRow();\n\t\tif (empty($this->attributes['jpegPhoto'][0])) {\n\t\t\t$container->add(new htmlSubTitle(_('Upload image')), 12);\n\t\t\t$label = _('Photo file');\n\t\t\t$container->add(new htmlResponsiveInputFileUpload('photoFile', $label, 'photoUpload'), 12);\n\t\t\t$container->addVerticalSpacer('0.5rem');\n\t\t\t$container->addLabel(new htmlOutputText('&nbsp;', false));\n\t\t\t$container->addField(new htmlAccountPageButton(get_class($this), 'photo', 'upload', _('Upload')));\n\t\t\t$container->addVerticalSpacer('1rem');\n\t\t\t$webcamContent = new htmlResponsiveRow();\n\t\t\t$webcamContent->add(new htmlSubTitle(_('Use webcam')), 12);\n\t\t\t$errorMessage = new htmlStatusMessage('ERROR', '');\n\t\t\t$errorMessage->setCSSClasses(array('hidden', 'lam-webcam-message'));\n\t\t\t$webcamContent->add($errorMessage, 12);\n\t\t\t$captureButton = new htmlButton('lam-webcam-capture', _('Start capture'));\n\t\t\t$captureButton->setOnClick('window.lam.tools.webcam.capture(event);');\n\t\t\t$webcamContent->add($captureButton, 12, 12, 12, 'text-center');\n\t\t\t$video = new htmlVideo('lam-webcam-video');\n\t\t\t$video->setCSSClasses(array('hidden'));\n\t\t\t$webcamContent->add($video, 12, 12, 12, 'text-center');\n\t\t\t$webcamContent->addVerticalSpacer('0.5rem');\n\t\t\t$webcamUploadButton = new htmlButton('uploadWebcam', _('Upload'));\n\t\t\t$webcamUploadButton->setCSSClasses(array('btn-lam-webcam-upload', 'hidden'));\n\t\t\t$webcamUploadButton->setOnClick('window.lam.tools.webcam.upload();');\n\t\t\t$webcamContent->add($webcamUploadButton, 12, 12, 12, 'text-center');\n\t\t\t$canvas = new htmlCanvas('lam-webcam-canvas');\n\t\t\t$canvas->setCSSClasses(array('hidden'));\n\t\t\t$webcamContent->add($canvas, 12);\n\t\t\t$webcamDiv = new htmlDiv('lam_webcam_div', $webcamContent, array('hidden'));\n\t\t\t$container->add($webcamDiv, 12);\n\t\t\t$container->addVerticalSpacer('1rem');\n\t\t\t$container->add(new htmlAccountPageButton(get_class($this), 'attributes', 'back', _('Back')), 12);\n\t\t}\n\t\telse {\n\t\t\t$container->add(new htmlSubTitle(_('Crop image')), 12);\n\t\t\t$jpeg_filename = 'jpg' . getRandomNumber() . '.jpg';\n\t\t\t$outjpeg = @fopen(dirname(__FILE__) . '/../../tmp/' . $jpeg_filename, \"wb\");\n\t\t\tfwrite($outjpeg, $this->attributes['jpegPhoto'][0]);\n\t\t\tfclose ($outjpeg);\n\t\t\t$photoFile = '../../tmp/' . $jpeg_filename;\n\t\t\t$img = new htmlImage($photoFile);\n\t\t\t$img->setCSSClasses(array('photo'));\n\t\t\t$img->enableCropping();\n\t\t\t$container->add($img, 12);\n\t\t\t$container->addVerticalSpacer('1rem');\n\t\t\t$doneButton = new htmlAccountPageButton(get_class($this), 'attributes', 'crop', _('Done'));\n\t\t\t$container->add($doneButton, 12);\n\t\t}\n\t\treturn $container;\n\t}\n\n\t/**\n\t* This function will create the meta HTML code to show a page to change the manager attribute.\n\t*\n\t* @return htmlElement HTML meta data\n\t*/\n\tfunction display_html_manager() {\n\t\t$return = new htmlResponsiveRow();\n\t\tif (!isset($this->attributes['manager'])) {\n\t\t\t$this->attributes['manager'] = array();\n\t\t}\n\t\t// show list of possible new managers\n\t\tif (isset($_POST['form_subpage_' . get_class($this) . '_manager_select'])) {\n\t\t\t$options = array();\n\t\t\t$filter = get_ldap_filter('user');\n\t\t\t$entries = searchLDAPByFilter('(|' . $filter . '(objectclass=organizationalRole))', array('dn'), array('user'));\n\t\t\tfor ($i = 0; $i < sizeof($entries); $i++) {\n\t\t\t\t$entries[$i] = $entries[$i]['dn'];\n\t\t\t}\n\t\t\t// sort by DN\n\t\t\tusort($entries, 'compareDN');\n\t\t\tfor ($i = 0; $i < sizeof($entries); $i++) {\n\t\t\t\tif (!isset($this->attributes['manager']) || !in_array($entries[$i], $this->attributes['manager'])) {\n\t\t\t\t\t$options[getAbstractDN($entries[$i])] = $entries[$i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t$size = 20;\n\t\t\tif (sizeof($options) < 20) {\n\t\t\t\t$size = sizeof($options);\n\t\t\t}\n\t\t\t$managerSelect = new htmlSelect('manager', $options, array(), $size);\n\t\t\t$managerSelect->setHasDescriptiveElements(true);\n\t\t\t$managerSelect->setMultiSelect(true);\n\t\t\t$managerSelect->setRightToLeftTextDirection(true);\n\t\t\t$managerSelect->setSortElements(false);\n\t\t\t$managerSelect->setTransformSingleSelect(false);\n\t\t\t$return->add($managerSelect, 12);\n\t\t\t$return->addVerticalSpacer('1rem');\n\t\t\t$return->addLabel(new htmlAccountPageButton(get_class($this), 'manager', 'addManagers', _('Add')));\n\t\t\t$return->addField(new htmlAccountPageButton(get_class($this), 'manager', 'cancel', _('Cancel')));\n\t\t\treturn $return;\n\t\t}\n\t\t// show existing managers\n\t\t$managerTemp = array();\n\t\tif (isset($this->attributes['manager'])) {\n\t\t\t$managerTemp = $this->attributes['manager'];\n\t\t}\n\t\t// sort by DN\n\t\tusort($managerTemp, 'compareDN');\n\t\t$managers = array();\n\t\tfor ($i = 0; $i < sizeof($managerTemp); $i++) {\n\t\t\t$managers[getAbstractDN($managerTemp[$i])] = $managerTemp[$i];\n\t\t}\n\t\t$size = 20;\n\t\tif (sizeof($this->attributes['manager']) < 20) {\n\t\t\t$size = sizeof($this->attributes['manager']);\n\t\t}\n\t\tif (sizeof($managers) > 0) {\n\t\t\t$managerSelect = new htmlSelect('manager', $managers, array(), $size);\n\t\t\t$managerSelect->setHasDescriptiveElements(true);\n\t\t\t$managerSelect->setMultiSelect(true);\n\t\t\t$managerSelect->setRightToLeftTextDirection(true);\n\t\t\t$managerSelect->setSortElements(false);\n\t\t\t$managerSelect->setTransformSingleSelect(false);\n\t\t\t$return->add($managerSelect, 12);\n\t\t\t$return->addVerticalSpacer('0.5rem');\n\t\t\t$removeButton = new htmlAccountPageButton(get_class($this), 'manager', 'remove', _('Remove selected entries'));\n\t\t\t$return->add($removeButton, 12, 12, 12, 'text-center');\n\t\t\t$return->addVerticalSpacer('1rem');\n\t\t\t$return->add(new htmlHorizontalLine(), 12);\n\t\t}\n\t\t$return->addVerticalSpacer('1rem');\n\t\t$return->addLabel(new htmlAccountPageButton(get_class($this), 'manager', 'select', _('Add entries')));\n\t\t$return->addField(new htmlAccountPageButton(get_class($this), 'attributes', 'managerBack', _('Back')));\n\t\treturn $return;\n\t}\n\n\t/**\n\t* Processes user input of the manager page.\n\t* It checks if all input values are correct and updates the associated LDAP attributes.\n\t*\n\t* @return array list of info/error messages\n\t*/\n\tfunction process_manager() {\n\t\t$return = array();\n\t\tif ($this->isAdminReadOnly('manager')) {\n\t\t\treturn $return;\n\t\t}\n\t\tif (isset($_POST['form_subpage_' . get_class($this) . '_manager_remove']) && isset($_POST['manager'])) {\n\t\t\t$managers = array_flip($this->attributes['manager']);\n\t\t\tfor ($i = 0; $i < sizeof($_POST['manager']); $i++) {\n\t\t\t\tif (isset($managers[$_POST['manager'][$i]])) {\n\t\t\t\t\tunset($managers[$_POST['manager'][$i]]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->attributes['manager'] = array_values(array_flip($managers));\n\t\t}\n\t\telseif (isset($_POST['form_subpage_' . get_class($this) . '_manager_addManagers']) && isset($_POST['manager'])) {\n\t\t\tfor ($i = 0; $i < sizeof($_POST['manager']); $i++) {\n\t\t\t\t$this->attributes['manager'][] = $_POST['manager'][$i];\n\t\t\t\t$this->attributes['manager'] = array_unique($this->attributes['manager']);\n\t\t\t}\n\t\t}\n\t\treturn $return;\n\t}\n\n\t/**\n\t* Displays the certificate upload page.\n\t*\n\t* @return array meta HTML code\n\t*/\n\tfunction display_html_userCertificate() {\n\t\t$container = new htmlResponsiveRow();\n\t\tif (isset($this->attributes['userCertificate;binary'])) {\n\t\t\t$table = new htmlTable();\n\t\t\t$table->colspan = 10;\n\t\t\tfor ($i = 0; $i < sizeof($this->attributes['userCertificate;binary']); $i++) {\n\t\t\t\t$filename = 'userCertificate' . getRandomNumber() . '.der';\n\t\t\t\t$pathOut = dirname(__FILE__) . '/../../tmp/' . $filename;\n\t\t\t\t$out = @fopen($pathOut, \"wb\");\n\t\t\t\t@chmod($pathOut, 0640);\n\t\t\t\tfwrite($out, $this->attributes['userCertificate;binary'][$i]);\n\t\t\t\tfclose ($out);\n\t\t\t\t$path = '../../tmp/' . $filename;\n\t\t\t\t$link = new htmlLink('', $path, '../../graphics/save.svg');\n\t\t\t\t$link->setTargetWindow('_blank');\n\t\t\t\t$link->setCSSClasses(array('icon'));\n\t\t\t\t$table->addElement($link);\n\t\t\t\t$deleteButton = new htmlAccountPageButton(get_class($this), 'userCertificate', 'delete_' . $i, 'del.svg', true);\n\t\t\t\t$table->addElement($deleteButton);\n\t\t\t\tif (function_exists('openssl_x509_parse')) {\n\t\t\t\t\t$pem = @chunk_split(@base64_encode($this->attributes['userCertificate;binary'][$i]), 64, \"\\n\");\n\t\t\t\t\tif (!empty($pem)) {\n\t\t\t\t\t\t$pem = \"-----BEGIN CERTIFICATE-----\\n\" . $pem . \"-----END CERTIFICATE-----\\n\";\n\t\t\t\t\t\t$pemData = @openssl_x509_parse($pem);\n\t\t\t\t\t\t$data = array();\n\t\t\t\t\t\tif (isset($pemData['serialNumber'])) {\n\t\t\t\t\t\t\t$data[] = $pemData['serialNumber'];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (isset($pemData['name'])) {\n\t\t\t\t\t\t\t$data[] = $pemData['name'];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (sizeof($data) > 0) {\n\t\t\t\t\t\t\t$table->addElement(new htmlOutputText(implode(': ', $data)));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$table->addNewLine();\n\t\t\t}\n\t\t\t$container->add($table, 12);\n\t\t\t$container->addVerticalSpacer('2rem');\n\t\t}\n\t\t$container->add(new htmlResponsiveInputFileUpload('userCertificateUpload', _('New user certificate')), 12, 6);\n\n\t\t$uploadButton = new htmlAccountPageButton(get_class($this), 'userCertificate', 'submit', _('Upload'));\n\t\t$container->add($uploadButton, 12, 6);\n\t\t$container->addVerticalSpacer('2rem');\n\t\t$container->add(new htmlAccountPageButton(get_class($this), 'attributes', 'back', _('Back')), 12);\n\t\treturn $container;\n\t}\n\n\t/**\n\t* Sets a new certificate or deletes old ones.\n\t*\n\t* @return array list of info/error messages\n\t*/\n\tfunction process_userCertificate() {\n\t\t$messages = array();\n\t\tif ($this->isAdminReadOnly('userCertificate')) {\n\t\t\treturn $messages;\n\t\t}\n\t\tif (isset($_POST['form_subpage_' . get_class($this) . '_userCertificate_submit'])) {\n\t\t\tif ($_FILES['userCertificateUpload'] && ($_FILES['userCertificateUpload']['size'] > 0)) {\n\t\t\t\t$handle = fopen($_FILES['userCertificateUpload']['tmp_name'], \"r\");\n\t\t\t\t$data = fread($handle, 10000000);\n\t\t\t\tfclose($handle);\n\t\t\t\tif (strpos($data, '-----BEGIN CERTIFICATE-----') === 0) {\n\t\t\t\t\t$pemData = str_replace(\"\\r\", '', $data);\n\t\t\t\t\t$pemData = explode(\"\\n\", $pemData);\n\t\t\t\t\tarray_shift($pemData);\n\t\t\t\t\t$last = array_pop($pemData);\n\t\t\t\t\twhile (($last != '-----END CERTIFICATE-----') && sizeof($pemData) > 2) {\n\t\t\t\t\t\t$last = array_pop($pemData);\n\t\t\t\t\t}\n\t\t\t\t\t$pemData = implode('', $pemData);\n\t\t\t\t\t$data = base64_decode($pemData);\n\t\t\t\t}\n\t\t\t\t$this->attributes['userCertificate;binary'][] = $data;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$messages[] = $this->messages['file'][0];\n\t\t\t}\n\t\t}\n\t\telseif (isset($this->attributes['userCertificate;binary'])) {\n\t\t\tfor ($i = 0; $i < sizeof($this->attributes['userCertificate;binary']); $i++) {\n\t\t\t\tif (isset($_POST['form_subpage_' . get_class($this) . '_userCertificate_delete_' . $i])) {\n\t\t\t\t\tunset($this->attributes['userCertificate;binary'][$i]);\n\t\t\t\t\t$this->attributes['userCertificate;binary'] = array_values($this->attributes['userCertificate;binary']);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $messages;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see baseModule::get_pdfFields()\n\t */\n\tpublic function get_pdfFields($typeId) {\n\t\t$fields = parent::get_pdfFields($typeId);\n\t\t$typeManager = new TypeManager();\n\t\t$modules = $typeManager->getConfiguredType($typeId)->getModules();\n\t\tif (!$this->isUnixActive($modules)) {\n\t\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideUID')) {\n\t\t\t\t$fields['uid'] = _('User name');\n\t\t\t}\n\t\t\t$fields['cn'] = _('Common name');\n\t\t\t$fields['userPassword'] = _('Password');\n\t\t}\n\t\tif (!$this->isSamba3Active($modules)) {\n\t\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidedisplayName', true)) {\n\t\t\t\t$fields['displayName'] = _('Display name');\n\t\t\t}\n\t\t}\n\t\treturn $fields;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see baseModule::get_pdfEntries()\n\t */\n\tfunction get_pdfEntries($pdfKeys, $typeId) {\n\t\t$return = array();\n\t\t$this->addSimplePDFField($return, 'description', _('Description'));\n\t\t$this->addSimplePDFField($return, 'title', _('Job title'));\n\t\t$this->addSimplePDFField($return, 'givenName', _('First name'));\n\t\t$this->addSimplePDFField($return, 'sn', _('Last name'));\n\t\t$this->addSimplePDFField($return, 'manager', _('Manager'));\n\t\t$this->addSimplePDFField($return, 'street', _('Street'));\n\t\t$this->addSimplePDFField($return, 'postOfficeBox', _('Post office box'));\n\t\t$this->addSimplePDFField($return, 'postalCode', _('Postal code'));\n\t\tif (!empty($this->attributes['postalAddress'])) {\n\t\t\t$this->addPDFKeyValue($return, 'postalAddress', _('Postal address'), str_replace('$', \"\\n\", implode(\"\\n\\n\", $this->attributes['postalAddress'])));\n\t\t}\n\t\t$this->addSimplePDFField($return, 'registeredAddress', _('Registered address'));\n\t\t$this->addSimplePDFField($return, 'telephoneNumber', _('Telephone number'));\n\t\t$this->addSimplePDFField($return, 'homePhone', _('Home telephone number'));\n\t\t$this->addSimplePDFField($return, 'mobileTelephoneNumber', _('Mobile number'), 'mobile');\n\t\t$this->addSimplePDFField($return, 'pager', _('Pager'));\n\t\t$this->addSimplePDFField($return, 'mail', _('Email address'));\n\t\t$this->addSimplePDFField($return, 'cn', _('Common name'));\n\t\t$this->addSimplePDFField($return, 'facsimileTelephoneNumber', _('Fax number'));\n\t\t$this->addSimplePDFField($return, 'roomNumber', _('Room number'));\n\t\t$this->addSimplePDFField($return, 'businessCategory', _('Business category'));\n\t\t$this->addSimplePDFField($return, 'uid', _('User name'));\n\t\t$this->addSimplePDFField($return, 'carLicense', _('Car license'));\n\t\t$this->addSimplePDFField($return, 'state', _('State'), 'st');\n\t\t$this->addSimplePDFField($return, 'officeName', _('Office name'), 'physicalDeliveryOfficeName');\n\t\t$this->addSimplePDFField($return, 'employeeType', _('Employee type'));\n\t\t$this->addSimplePDFField($return, 'location', _('Location'), 'l');\n\t\t$this->addSimplePDFField($return, 'employeeNumber', _('Employee number'));\n\t\t$this->addSimplePDFField($return, 'ou', _('Organisational unit'));\n\t\t$this->addSimplePDFField($return, 'o', _('Organisation'));\n\t\t$this->addSimplePDFField($return, 'initials', _('Initials'));\n\t\t$this->addSimplePDFField($return, 'labeledURI', _('Web site'));\n\t\t$this->addSimplePDFField($return, 'departmentNumber', _('Department'));\n\t\t$this->addSimplePDFField($return, 'displayName', _('Display name'));\n\t\tif (isset($this->clearTextPassword)) {\n\t\t\t$this->addPDFKeyValue($return, 'userPassword', _('Password'), $this->clearTextPassword);\n\t\t}\n\t\telse if (isset($this->attributes['INFO.userPasswordClearText'])) {\n\t\t\t$this->addPDFKeyValue($return, 'userPassword', _('Password'), $this->attributes['INFO.userPasswordClearText']);\n\t\t}\n\t\t$this->addPDFImage($return, 'jpegPhoto');\n\t\treturn $return;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see baseModule::get_profileOptions()\n\t */\n\tpublic function get_profileOptions($typeId) {\n\t\t$typeManager = new TypeManager();\n\t\t$modules = $typeManager->getConfiguredType($typeId)->getModules();\n\t\t$profileElements = array();\n\t\tif (!$this->isUnixActive($modules)) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Common name'), 'inetOrgPerson_cn', null, 'cn');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideInitials')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Initials'), 'inetOrgPerson_initials', null, 'initials');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideDescription')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Description'), 'inetOrgPerson_description', null, 'description');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideStreet')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Street'), 'inetOrgPerson_street', null, 'streetList');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostOfficeBox')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Post office box'), 'inetOrgPerson_postOfficeBox', null, 'postOfficeBoxList');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalCode')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Postal code'), 'inetOrgPerson_postalCode', null, 'postalCodeList');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideLocation')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Location'), 'inetOrgPerson_l', null, 'lList');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideState')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('State'), 'inetOrgPerson_st', null, 'stList');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalAddress')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Postal address'), 'inetOrgPerson_postalAddress', null, 'postalAddress');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideRegisteredAddress')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Registered address'), 'inetOrgPerson_registeredAddress', null, 'registeredAddress');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideOfficeName')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Office name'), 'inetOrgPerson_physicalDeliveryOfficeName', null, 'physicalDeliveryOfficeName');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideRoomNumber')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Room number'), 'inetOrgPerson_roomNumber', null, 'roomNumber');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideTelephoneNumber')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Telephone number'), 'inetOrgPerson_telephoneNumber', null, 'telephoneNumberList');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideFaxNumber')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Fax number'), 'inetOrgPerson_facsimileTelephoneNumber', null, 'facsimileTelephoneNumberList');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEMailAddress')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Email address'), 'inetOrgPerson_mail', null, 'mailList');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideLabeledURI')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Web site'), 'inetOrgPerson_labeledURI', null, 'labeledURIList');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideDepartments')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Department'), 'inetOrgPerson_departmentNumber', null, 'departmentNumberList');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideOu')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Organisational unit'), 'inetOrgPerson_ou', null, 'ouList');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideO')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Organisation'), 'inetOrgPerson_o', null, 'oList');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideJobTitle')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Job title'), 'inetOrgPerson_title', null, 'title');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEmployeeType')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Employee type'), 'inetOrgPerson_employeeType', null, 'employeeType');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideBusinessCategory')) {\n\t\t    $profileElements[] = new htmlResponsiveInputField(_('Business category'), 'inetOrgPerson_businessCategory', null, 'businessCategory');\n\t\t}\n\t\tif (sizeof($profileElements) > 0) {\n\t\t\t$profileContainer = new htmlResponsiveRow();\n\t\t\tfor ($i = 0; $i < sizeof($profileElements); $i++) {\n\t\t\t\t$profileContainer->add($profileElements[$i], 12);\n\t\t\t}\n\t\t\treturn $profileContainer;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t* Loads the values of an account profile into internal variables.\n\t*\n\t* @param array $profile hash array with profile values (identifier => value)\n\t*/\n\tfunction load_profile($profile) {\n\t\t// profile mappings in meta data\n\t\tparent::load_profile($profile);\n\t\tif (!$this->isUnixActive() && !empty($profile['inetOrgPerson_cn'][0])) {\n\t\t\t$this->attributes['cn'][0] = $profile['inetOrgPerson_cn'][0];\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideDepartments')) {\n\t\t\t// departments\n\t\t\tif (isset($profile['inetOrgPerson_departmentNumber'][0]) && $profile['inetOrgPerson_departmentNumber'][0] != '') {\n\t\t\t\t$departments = explode(';', $profile['inetOrgPerson_departmentNumber'][0]);\n\t\t\t\t// remove extra spaces and set attributes\n\t\t\t\t$this->attributes['departmentNumber'] = array_map('trim', $departments);\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideOu') && isset($profile['inetOrgPerson_ou'][0])) {\n\t\t\t$oList = preg_split('/;[ ]*/', $profile['inetOrgPerson_ou'][0]);\n\t\t\t$this->attributes['ou'] = $oList;\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideO') && isset($profile['inetOrgPerson_o'][0])) {\n\t\t\t$oList = preg_split('/;[ ]*/', $profile['inetOrgPerson_o'][0]);\n\t\t\t$this->attributes['o'] = $oList;\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEMailAddress') && isset($profile['inetOrgPerson_mail'][0])) {\n\t\t\t$mailList = preg_split('/;[ ]*/', $profile['inetOrgPerson_mail'][0]);\n\t\t\t$this->attributes['mail'] = $mailList;\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideLabeledURI') && isset($profile['inetOrgPerson_labeledURI'][0])) {\n\t\t\t$labeledURIList = preg_split('/;[ ]*/', $profile['inetOrgPerson_labeledURI'][0]);\n\t\t\t$this->attributes['labeledURI'] = $labeledURIList;\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideTelephoneNumber') && isset($profile['inetOrgPerson_telephoneNumber'][0])) {\n\t\t\t$telephoneNumberList = preg_split('/;[ ]*/', $profile['inetOrgPerson_telephoneNumber'][0]);\n\t\t\t$this->attributes['telephoneNumber'] = $telephoneNumberList;\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideFaxNumber') && isset($profile['inetOrgPerson_facsimileTelephoneNumber'][0])) {\n\t\t\t$facsimileTelephoneNumberList = preg_split('/;[ ]*/', $profile['inetOrgPerson_facsimileTelephoneNumber'][0]);\n\t\t\t$this->attributes['facsimileTelephoneNumber'] = $facsimileTelephoneNumberList;\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideStreet') && isset($profile['inetOrgPerson_street'][0])) {\n\t\t\t$list = preg_split('/;[ ]*/', $profile['inetOrgPerson_street'][0]);\n\t\t\t$this->attributes['street'] = $list;\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostOfficeBox') && isset($profile['inetOrgPerson_postOfficeBox'][0])) {\n\t\t\t$list = preg_split('/;[ ]*/', $profile['inetOrgPerson_postOfficeBox'][0]);\n\t\t\t$this->attributes['postOfficeBox'] = $list;\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalCode') && isset($profile['inetOrgPerson_postalCode'][0])) {\n\t\t\t$list = preg_split('/;[ ]*/', $profile['inetOrgPerson_postalCode'][0]);\n\t\t\t$this->attributes['postalCode'] = $list;\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideLocation') && isset($profile['inetOrgPerson_l'][0])) {\n\t\t\t$list = preg_split('/;[ ]*/', $profile['inetOrgPerson_l'][0]);\n\t\t\t$this->attributes['l'] = $list;\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideState') && isset($profile['inetOrgPerson_st'][0])) {\n\t\t\t$list = preg_split('/;[ ]*/', $profile['inetOrgPerson_st'][0]);\n\t\t\t$this->attributes['st'] = $list;\n\t\t}\n\t}\n\n\t/**\n\t* {@inheritDoc}\n\t*/\n\tfunction check_profileOptions($options, $typeId) {\n\t\t$messages = parent::check_profileOptions($options, $typeId);\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideTelephoneNumber')) {\n\t\t\t$telephoneNumberList = preg_split('/;[ ]*/', $options['inetOrgPerson_telephoneNumber'][0]);\n\t\t\tfor ($i = 0; $i < sizeof($telephoneNumberList); $i++) {\n\t\t\t\tif (!get_preg($telephoneNumberList[$i], 'telephone')) {\n\t\t\t\t\t$messages[] = $this->messages['telephoneNumber'][0];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideFaxNumber')) {\n\t\t\t$facsimileTelephoneNumberList = preg_split('/;[ ]*/', $options['inetOrgPerson_facsimileTelephoneNumber'][0]);\n\t\t\tfor ($i = 0; $i < sizeof($facsimileTelephoneNumberList); $i++) {\n\t\t\t\tif (!get_preg($facsimileTelephoneNumberList[$i], 'telephone')) {\n\t\t\t\t\t$messages[] = $this->messages['facsimileTelephoneNumber'][0];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $messages;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see baseModule::getManagedAttributes()\n\t */\n\tfunction get_uploadColumns($selectedModules, &$type) {\n\t\t$return = parent::get_uploadColumns($selectedModules, $type);\n\t\t// cn and uid for upload (only if posixAccount is not selected)\n\t\tif (!$this->isUnixActive($selectedModules)) {\n\t\t\t$return[] = array(\n\t\t\t\t'name' => 'inetOrgPerson_cn',\n\t\t\t\t'description' => _('Common name'),\n\t\t\t\t'help' => 'cn',\n\t\t\t\t'example' => _('Steve Miller'),\n\t\t\t\t'default' => '{inetOrgPerson_firstName} {inetOrgPerson_lastName}'\n\t\t\t);\n\t\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideUID')) {\n\t\t\t\t$return[] = array(\n\t\t\t\t\t'name' => 'inetOrgPerson_userName',\n\t\t\t\t\t'description' => _('User name'),\n\t\t\t\t\t'help' => 'uid',\n\t\t\t\t\t'example' => _('smiller'),\n\t\t\t\t\t'unique' => true,\n\t\t\t\t\t'required' => false\n\t\t\t\t);\n\t\t\t}\n\t\t\t$return[] = array(\n\t\t\t\t'name' => 'inetOrgPerson_userPassword',\n\t\t\t\t'description' => _('Password'),\n\t\t\t\t'help' => 'userPassword',\n\t\t\t\t'example' => _('secret'),\n\t\t\t);\n\t\t}\n\t\tif (!$this->isSamba3Active() && !$this->isBooleanConfigOptionSet('inetOrgPerson_hidedisplayName', true)) {\n\t\t\t$return[] = array(\n\t\t\t\t'name' => 'inetOrgPerson_displayName',\n\t\t\t\t'description' => _('Display name'),\n\t\t\t\t'help' => 'displayName',\n\t\t\t\t'example' => _('Steve Miller'),\n\t\t\t);\n\t\t}\n\t\treturn $return;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see baseModule::build_uploadAccounts()\n\t */\n\tfunction build_uploadAccounts($rawAccounts, $ids, &$partialAccounts, $selectedModules, &$type) {\n\t\t$errors = array();\n\t\t// get list of existing users\n\t\t$existingUsers = searchLDAPByAttribute('uid', '*', 'inetOrgPerson', array('uid'), array('user'));\n\t\tfor ($e = 0; $e < sizeof($existingUsers); $e++) {\n\t\t\t$existingUsers[$e] = $existingUsers[$e]['uid'][0];\n\t\t}\n\t\t$existingMails = searchLDAPByAttribute('mail', '*', 'inetOrgPerson', array('mail'), array('user'));\n\t\tfor ($e = 0; $e < sizeof($existingMails); $e++) {\n\t\t\t$existingMails[$e] = $existingMails[$e]['mail'][0];\n\t\t}\n\t\tfor ($i = 0; $i < sizeof($rawAccounts); $i++) {\n\t\t\tif (!in_array(\"inetOrgPerson\", $partialAccounts[$i]['objectClass'])) $partialAccounts[$i]['objectClass'][] = \"inetOrgPerson\";\n\t\t\t// last name\n\t\t\tif (get_preg($rawAccounts[$i][$ids['inetOrgPerson_lastName']], 'realname')) {\n\t\t\t\t$partialAccounts[$i]['sn'] = trim($rawAccounts[$i][$ids['inetOrgPerson_lastName']]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$errMsg = $this->messages['lastname'][1];\n\t\t\t\tarray_push($errMsg, array($i));\n\t\t\t\t$errors[] = $errMsg;\n\t\t\t}\n\t\t\t// first name\n\t\t\tif ($rawAccounts[$i][$ids['inetOrgPerson_firstName']] != \"\") {\n\t\t\t\tif (get_preg($rawAccounts[$i][$ids['inetOrgPerson_firstName']], 'realname')) {\n\t\t\t\t\t$partialAccounts[$i]['givenName'] = trim($rawAccounts[$i][$ids['inetOrgPerson_firstName']]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$errMsg = $this->messages['givenName'][1];\n\t\t\t\t\tarray_push($errMsg, array($i));\n\t\t\t\t\t$errors[] = $errMsg;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!$this->isUnixActive($selectedModules)) {\n\t\t\t\t// uid\n\t\t\t\tif (isset($ids['inetOrgPerson_userName']) && !empty($rawAccounts[$i][$ids['inetOrgPerson_userName']])) {\n\t\t\t\t\tif (in_array($rawAccounts[$i][$ids['inetOrgPerson_userName']], $existingUsers)) {\n\t\t\t\t\t\t$errMsg = $this->messages['uid'][3];\n\t\t\t\t\t\tarray_push($errMsg, array($i));\n\t\t\t\t\t\t$errors[] = $errMsg;\n\t\t\t\t\t}\n\t\t\t\t\tif (get_preg($rawAccounts[$i][$ids['inetOrgPerson_userName']], 'username')) {\n\t\t\t\t\t\t$partialAccounts[$i]['uid'] = $rawAccounts[$i][$ids['inetOrgPerson_userName']];\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$errMsg = $this->messages['uid'][1];\n\t\t\t\t\t\tarray_push($errMsg, array($i));\n\t\t\t\t\t\t$errors[] = $errMsg;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// initials\n\t\t\tif (isset($ids['inetOrgPerson_initials']) && ($rawAccounts[$i][$ids['inetOrgPerson_initials']] != \"\")) {\n\t\t\t\t$partialAccounts[$i]['initials'] = preg_split('/;[ ]*/', $rawAccounts[$i][$ids['inetOrgPerson_initials']]);\n\t\t\t}\n\t\t\t// display name\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_displayName', 'displayName');\n\t\t\t// description\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_description', 'description');\n\t\t\t// title\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_title', 'title', 'title', $this->messages['title'][1], $errors, '/;[ ]*/');\n\t\t\t// employee number\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_employeeNumber', 'employeeNumber');\n\t\t\t// employee type\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_type', 'employeeType',\n\t\t\t\t'employeeType', $this->messages['employeeType'][1], $errors);\n\t\t\t// business category\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_businessCategory', 'businessCategory', 'businessCategory', $this->messages['businessCategory'][1], $errors, '/;[ ]*/');\n\t\t\t// manager\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_manager', 'manager', 'dn', $this->messages['manager'][0], $errors, '/;[ ]*/');\n\t\t\t// street\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_street', 'street', 'street', $this->messages['street'][1], $errors, '/;[ ]*/');\n\t\t\t// post office box\n\t\t\tif (isset($ids['inetOrgPerson_postOfficeBox']) && ($rawAccounts[$i][$ids['inetOrgPerson_postOfficeBox']] != \"\")) {\n\t\t\t\t$partialAccounts[$i]['postOfficeBox'] = preg_split('/;[ ]*/', $rawAccounts[$i][$ids['inetOrgPerson_postOfficeBox']]);\n\t\t\t}\n\t\t\t// room number\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_roomNumber', 'roomNumber');\n\t\t\t// departments\n\t\t\tif (isset($ids['inetOrgPerson_departmentNumber']) && ($rawAccounts[$i][$ids['inetOrgPerson_departmentNumber']] != \"\")) {\n\t\t\t\t$partialAccounts[$i]['departmentNumber'] = explode(';', $rawAccounts[$i][$ids['inetOrgPerson_departmentNumber']]);\n\t\t\t\t// remove extra spaces\n\t\t\t\t$partialAccounts[$i]['departmentNumber'] = array_map('trim', $partialAccounts[$i]['departmentNumber']);\n\t\t\t}\n\t\t\t// organisational unit\n\t\t\tif (isset($ids['inetOrgPerson_ou']) && ($rawAccounts[$i][$ids['inetOrgPerson_ou']] != \"\")) {\n\t\t\t\t$partialAccounts[$i]['ou'] = preg_split('/;[ ]*/', $rawAccounts[$i][$ids['inetOrgPerson_ou']]);\n\t\t\t}\n\t\t\t// organisation\n\t\t\tif (isset($ids['inetOrgPerson_o']) && ($rawAccounts[$i][$ids['inetOrgPerson_o']] != \"\")) {\n\t\t\t\t$partialAccounts[$i]['o'] = preg_split('/;[ ]*/', $rawAccounts[$i][$ids['inetOrgPerson_o']]);\n\t\t\t}\n\t\t\t// location\n\t\t\tif (isset($ids['inetOrgPerson_l']) && ($rawAccounts[$i][$ids['inetOrgPerson_l']] != \"\")) {\n\t\t\t\t$partialAccounts[$i]['l'] = preg_split('/;[ ]*/', $rawAccounts[$i][$ids['inetOrgPerson_l']]);\n\t\t\t}\n\t\t\t// state\n\t\t\tif (isset($ids['inetOrgPerson_st']) && ($rawAccounts[$i][$ids['inetOrgPerson_st']] != \"\")) {\n\t\t\t\t$partialAccounts[$i]['st'] = preg_split('/;[ ]*/', $rawAccounts[$i][$ids['inetOrgPerson_st']]);\n\t\t\t}\n\t\t\t// physicalDeliveryOfficeName\n\t\t\tif (isset($ids['inetOrgPerson_physicalDeliveryOfficeName']) && ($rawAccounts[$i][$ids['inetOrgPerson_physicalDeliveryOfficeName']] != \"\")) {\n\t\t\t\t$partialAccounts[$i]['physicalDeliveryOfficeName'] = preg_split('/;[ ]*/', $rawAccounts[$i][$ids['inetOrgPerson_physicalDeliveryOfficeName']]);\n\t\t\t}\n\t\t\t// carLicense\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_carLicense', 'carLicense');\n\t\t\t// postal code\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_postalCode', 'postalCode', 'postalCode', $this->messages['postalCode'][1], $errors, '/;[ ]*/');\n\t\t\t// postal address\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_address', 'postalAddress',\n\t\t\t\t'postalAddress',$this->messages['postalAddress'][1] , $errors);\n\t\t\t// registered address\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_registeredAddress', 'registeredAddress',\n\t\t\t\t'postalAddress',$this->messages['registeredAddress'][1] , $errors);\n\t\t\t// telephone\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_telephone', 'telephoneNumber', 'telephone', $this->messages['telephoneNumber'][1], $errors, '/;[ ]*/');\n\t\t\t// home telephone\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_homePhone', 'homePhone', 'telephone', $this->messages['homePhone'][1], $errors, '/;[ ]*/');\n\t\t\t// mobile\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_mobile', 'mobile', 'telephone', $this->messages['mobileTelephone'][1], $errors, '/;[ ]*/');\n\t\t\t// facsimile\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_fax', 'facsimileTelephoneNumber', 'telephone', $this->messages['facsimileNumber'][1], $errors, '/;[ ]*/');\n\t\t\t// pager\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_pager', 'pager', 'telephone', $this->messages['pager'][1], $errors, '/;[ ]*/');\n\t\t\t// eMail\n\t\t\tif (isset($ids['inetOrgPerson_email']) && ($rawAccounts[$i][$ids['inetOrgPerson_email']] != \"\")) {\n\t\t\t\t$mailList = preg_split('/;[ ]*/', trim($rawAccounts[$i][$ids['inetOrgPerson_email']]));\n\t\t\t\t$partialAccounts[$i]['mail'] = $mailList;\n\t\t\t\tfor ($x = 0; $x < sizeof($mailList); $x++) {\n\t\t\t\t\tif (!get_preg($mailList[$x], 'email')) {\n\t\t\t\t\t\t$errMsg = $this->messages['email'][1];\n\t\t\t\t\t\tarray_push($errMsg, array($i));\n\t\t\t\t\t\t$errors[] = $errMsg;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telseif (in_array($mailList[$x], $existingMails)) {\n\t\t\t\t\t\t$errMsg = $this->messages['mail'][2];\n\t\t\t\t\t\tarray_push($errMsg, array($i, $mailList[$x]));\n\t\t\t\t\t\t$errors[] = $errMsg;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isLAMProVersion() && isset($ids['inetOrgPerson_sendPasswordMail']) && ($rawAccounts[$i][$ids['inetOrgPerson_sendPasswordMail']] != \"\")) {\n\t\t\t\tif (!in_array($rawAccounts[$i][$ids['inetOrgPerson_sendPasswordMail']], array('true', 'false'))) {\n\t\t\t\t\t$errMsg = $this->messages['sendPasswordMail'][0];\n\t\t\t\t\tarray_push($errMsg, array($i));\n\t\t\t\t\t$errors[] = $errMsg;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// labeledURI\n\t\t\tif (isset($ids['inetOrgPerson_labeledURI']) && ($rawAccounts[$i][$ids['inetOrgPerson_labeledURI']] != \"\")) {\n\t\t\t\t$partialAccounts[$i]['labeledURI'] = preg_split('/;[ ]*/', trim($rawAccounts[$i][$ids['inetOrgPerson_labeledURI']]));\n\t\t\t}\n\t\t\tif (!$this->isUnixActive($selectedModules)) {\n\t\t\t\t// cn\n\t\t\t\tif ($rawAccounts[$i][$ids['inetOrgPerson_cn']] != \"\") {\n\t\t\t\t\tif (get_preg($rawAccounts[$i][$ids['inetOrgPerson_cn']], 'cn')) {\n\t\t\t\t\t\t$partialAccounts[$i]['cn'] = $rawAccounts[$i][$ids['inetOrgPerson_cn']];\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$errMsg = $this->messages['cn'][1];\n\t\t\t\t\t\tarray_push($errMsg, array($i));\n\t\t\t\t\t\t$errors[] = $errMsg;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif ($partialAccounts[$i]['givenName'] != \"\") {\n\t\t\t\t\t\t$partialAccounts[$i]['cn'] = $partialAccounts[$i]['givenName'] . \" \" . $partialAccounts[$i]['sn'];\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$partialAccounts[$i]['cn'] = $partialAccounts[$i]['sn'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// password\n\t\t\t\t// delay exop passwords\n\t\t\t\tif (!empty($this->moduleSettings['posixAccount_pwdHash'][0]) && ($this->moduleSettings['posixAccount_pwdHash'][0] === 'LDAP_EXOP')) {\n\t\t\t\t\t// changed in post action\n\t\t\t\t}\n\t\t\t\t// set SASL password\n\t\t\t\telseif (!empty($this->moduleSettings['posixAccount_pwdHash'][0]) && ($this->moduleSettings['posixAccount_pwdHash'][0] === 'SASL')) {\n\t\t\t\t\t$partialAccounts[$i]['userpassword'] = '{SASL}' . $partialAccounts[$i]['uid'];\n\t\t\t\t}\n\t\t\t\t// set K5KEY password\n\t\t\t\telseif (!empty($this->moduleSettings['posixAccount_pwdHash'][0]) && ($this->moduleSettings['posixAccount_pwdHash'][0] === 'K5KEY')) {\n\t\t\t\t\t$partialAccounts[$i]['userpassword'] = pwd_hash('x', true, $this->moduleSettings['posixAccount_pwdHash'][0]);\n\t\t\t\t}\n\t\t\t\t// set normal password\n\t\t\t\telse {\n\t\t\t\t\tif (($rawAccounts[$i][$ids['inetOrgPerson_userPassword']] != \"\") && (get_preg($rawAccounts[$i][$ids['inetOrgPerson_userPassword']], 'password'))) {\n\t\t\t\t\t\t$partialAccounts[$i]['userpassword'] = pwd_hash($rawAccounts[$i][$ids['inetOrgPerson_userPassword']], true, $this->moduleSettings['posixAccount_pwdHash'][0]);\n\t\t\t\t\t\t$partialAccounts[$i]['INFO.userPasswordClearText'] = $rawAccounts[$i][$ids['inetOrgPerson_userPassword']]; // for custom scripts etc.\n\t\t\t\t\t}\n\t\t\t\t\telseif ($rawAccounts[$i][$ids['inetOrgPerson_userPassword']] != \"\") {\n\t\t\t\t\t\t$errMsg = $this->messages['userPassword'][0];\n\t\t\t\t\t\t$errMsg[2] = str_replace('%', '%%', $errMsg[2]); // double \"%\" because of later sprintf\n\t\t\t\t\t\tarray_push($errMsg, array($i));\n\t\t\t\t\t\t$errors[] = $errMsg;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $errors;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see baseModule::doUploadPostActions()\n\t */\n\tfunction doUploadPostActions(&$data, $ids, $failed, &$temp, &$accounts, $selectedModules, $type) {\n\t\tif (!checkIfWriteAccessIsAllowed($this->get_scope())) {\n\t\t\tdie();\n\t\t}\n\t\tif (!isset($temp['counter'])) {\n\t\t\t$temp['counter'] = 0;\n\t\t}\n\t\t$errors = array();\n\t\t$dataSize = sizeof($data);\n\t\tif (($temp['counter'] < $dataSize) && !in_array($temp['counter'], $failed)) {\n\t\t\t// mail sending is LAM Pro only\n\t\t\tif (isLAMProVersion()\n\t\t\t\t&& isset($ids['inetOrgPerson_email'])\n\t\t\t\t&& ($data[$temp['counter']][$ids['inetOrgPerson_email']] != \"\")) {\n\t\t\t\tif (isset($ids['inetOrgPerson_sendPasswordMail']) && ($data[$temp['counter']][$ids['inetOrgPerson_sendPasswordMail']] == \"true\")\n\t\t\t\t\t\t&& isset($accounts[$temp['counter']]['INFO.userPasswordClearText'])) {\n\t\t\t\t\t$mailMessages = sendPasswordMail($accounts[$temp['counter']]['INFO.userPasswordClearText'], $accounts[$temp['counter']]);\n\t\t\t\t\tfor ($i = 0; $i < sizeof($mailMessages); $i++) {\n\t\t\t\t\t\tif ($mailMessages[$i][0] == 'ERROR') {\n\t\t\t\t\t\t\t$errors[] = $mailMessages[$i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// add addressbook entry\n\t\t\tif ($this->isBooleanConfigOptionSet('inetOrgPerson_addAddressbook')) {\n\t\t\t\t$attrs = array(\n\t\t\t\t\t'objectClass' => array('organizationalUnit'),\n\t\t\t\t\t'ou' => 'addressbook'\n\t\t\t\t);\n\t\t\t\t$dn = 'ou=addressbook,' . $accounts[$temp['counter']]['dn'];\n\t\t\t\t$success = @ldap_add($_SESSION['ldap']->server(), $dn, $attrs);\n\t\t\t\tif (!$success) {\n\t\t\t\t\tlogNewMessage(LOG_ERR, 'Unable to add addressbook for user ' . $accounts[$temp['counter']]['dn'] . ' (' . ldap_error($_SESSION['ldap']->server()) . ').');\n\t\t\t\t\t$messages[] = array('ERROR', sprintf(_(\"Was unable to create DN: %s.\"), htmlspecialchars($dn)), getDefaultLDAPErrorString($_SESSION['ldap']->server()));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlogNewMessage(LOG_NOTICE, 'Added addressbook for user ' . $accounts[$temp['counter']]['dn']);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// set password via exop\n\t\t\tif (!empty($this->moduleSettings['posixAccount_pwdHash'][0]) && ($this->moduleSettings['posixAccount_pwdHash'][0] === 'LDAP_EXOP')) {\n\t\t\t\tif (isset($ids['inetOrgPerson_userPassword']) && !empty($data[$temp['counter']][$ids['inetOrgPerson_userPassword']])) {\n\t\t\t\t\t$dn = $accounts[$temp['counter']]['dn'];\n\t\t\t\t\t$password = $data[$temp['counter']][$ids['inetOrgPerson_userPassword']];\n\t\t\t\t\t$success = ldap_exop_passwd($_SESSION['ldap']->server(), $dn, null, $password);\n\t\t\t\t\tif (!$success) {\n\t\t\t\t\t\t$errors[] = array(\n\t\t\t\t\t\t\t\"ERROR\",\n\t\t\t\t\t\t\t_('Unable to set password'),\n\t\t\t\t\t\t\t$dn . '<br>' . getDefaultLDAPErrorString($_SESSION['ldap']->server()),\n\t\t\t\t\t\t\tarray($temp['groups'][$temp['counter']])\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$temp['counter']++;\n\t\tif ($temp['counter'] < $dataSize) {\n\t\t\treturn array (\n\t\t\t\t'status' => 'inProgress',\n\t\t\t\t'progress' => ($temp['counter'] * 100) / $dataSize,\n\t\t\t\t'errors' => $errors\n\t\t\t);\n\t\t}\n\t\telse {\n\t\t\treturn array (\n\t\t\t\t'status' => 'finished',\n\t\t\t\t'progress' => 100,\n\t\t\t\t'errors' => $errors\n\t\t\t);\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Returns a list of self service configuration settings.\n\t *\n\t * @param selfServiceProfile $profile currently edited profile\n\t * @return htmlElement meta HTML object\n\t */\n\tpublic function getSelfServiceSettings($profile) {\n\t\t$container = new htmlResponsiveRow();\n\t\t$container->add(new htmlSubTitle(_('Photo')), 12);\n\t\t$container->add(new htmlResponsiveInputField(_('Maximum width (px)'), 'inetOrgPerson_jpegPhoto_maxWidth', null, array('crop', get_class($this))), 12);\n\t\t$container->add(new htmlResponsiveInputField(_('Maximum height (px)'), 'inetOrgPerson_jpegPhoto_maxHeight', null, array('crop', get_class($this))), 12);\n\t\t$container->add(new htmlResponsiveInputField(_('Maximum file size (kB)'), 'inetOrgPerson_jpegPhoto_maxSize'), 12);\n\t\treturn $container;\n\t}\n\n\t/**\n\t * Checks if the self service settings are valid.\n\t *\n\t * If the input data is invalid the return value is an array that contains arrays\n\t * to build StatusMessages (message type, message head, message text). If no errors\n\t * occurred the function returns an empty array.\n\t *\n\t * @param array $options hash array (option name => value) that contains the input. The option values are all arrays containing one or more elements.\n\t * @param selfServiceProfile $profile self service profile\n\t * @return array error messages\n\t */\n\tpublic function checkSelfServiceSettings(&$options, &$profile) {\n\t\t$errors = array();\n\t\tif (!empty($options['inetOrgPerson_jpegPhoto_maxWidth'][0]) && !is_numeric($options['inetOrgPerson_jpegPhoto_maxWidth'][0])) {\n\t\t\t$errors[] = array('ERROR', _('Please enter a number.'), _('Maximum width (px)'));\n\t\t}\n\t\tif (!empty($options['inetOrgPerson_jpegPhoto_maxHeight'][0]) && !is_numeric($options['inetOrgPerson_jpegPhoto_maxHeight'][0])) {\n\t\t\t$errors[] = array('ERROR', _('Please enter a number.'), _('Maximum height (px)'));\n\t\t}\n\t\tif (!empty($options['inetOrgPerson_jpegPhoto_maxSize'][0]) && !is_numeric($options['inetOrgPerson_jpegPhoto_maxSize'][0])) {\n\t\t\t$errors[] = array('ERROR', _('Please enter a number.'), _('Maximum file size (kB)'));\n\t\t}\n\t\treturn $errors;\n\t}\n\n\t/**\n\t * Returns the meta HTML code for each input field.\n\t * format: array(<field1> => array(<META HTML>), ...)\n\t * It is not possible to display help links.\n\t *\n\t * @param array $fields list of active fields\n\t * @param array $attributes attributes of LDAP account\n\t * @param boolean $passwordChangeOnly indicates that the user is only allowed to change his password and no LDAP content is readable\n\t * @param array $readOnlyFields list of read-only fields\n\t * @return array list of meta HTML elements (field name => htmlResponsiveRow)\n\t */\n\tfunction getSelfServiceOptions($fields, $attributes, $passwordChangeOnly, $readOnlyFields) {\n\t\t$return = array();\n\t\tif ($passwordChangeOnly) {\n\t\t\treturn $return; // no fields as long no LDAP content can be read\n\t\t}\n\t\tif (in_array('firstName', $fields)) {\n\t\t\t$firstName = '';\n\t\t\tif (isset($attributes['givenName'][0])) {\n\t\t\t\t$firstName = $attributes['givenName'][0];\n\t\t\t}\n\t\t\t$firstNameField = new htmlInputField('inetOrgPerson_firstName', $firstName);\n\t\t\tif (in_array('firstName', $readOnlyFields)) {\n\t\t\t\t$firstNameField = new htmlOutputText($firstName);\n\t\t\t}\n\t\t\t$return['firstName'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('firstName', _('First name'))), $firstNameField\n\t\t\t);\n\t\t}\n\t\tif (in_array('lastName', $fields)) {\n\t\t\t$lastName = '';\n\t\t\tif (isset($attributes['sn'][0])) {\n\t\t\t\t$lastName = $attributes['sn'][0];\n\t\t\t}\n\t\t\t$lastNameField = new htmlInputField('inetOrgPerson_lastName', $lastName);\n\t\t\tif (in_array('lastName', $readOnlyFields)) {\n\t\t\t\t$lastNameField = new htmlOutputText($lastName);\n\t\t\t}\n\t\t\t$return['lastName'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('lastName', _('Last name'))), $lastNameField\n\t\t\t);\n\t\t}\n\t\tif (in_array('mail', $fields)) {\n\t\t\t$mail = '';\n\t\t\tif (isset($attributes['mail'][0])) {\n\t\t\t\t$mail = $attributes['mail'][0];\n\t\t\t}\n\t\t\t$mailField = new htmlInputField('inetOrgPerson_mail', $mail);\n\t\t\tif (in_array('mail', $readOnlyFields)) {\n\t\t\t\t$mailField = new htmlOutputText($mail);\n\t\t\t}\n\t\t\t$return['mail'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('mail', _('Email address'))), $mailField\n\t\t\t);\n\t\t}\n\t\tif (in_array('labeledURI', $fields)) {\n\t\t\t$labeledURI = '';\n\t\t\tif (isset($attributes['labeledURI'][0])) {\n\t\t\t\t$labeledURI = implode('; ', $attributes['labeledURI']);\n\t\t\t}\n\t\t\t$labeledURIField = new htmlInputField('inetOrgPerson_labeledURI', $labeledURI);\n\t\t\tif (in_array('labeledURI', $readOnlyFields)) {\n\t\t\t\t$labeledURIField = new htmlOutputText($labeledURI);\n\t\t\t}\n\t\t\t$return['labeledURI'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('labeledURI', _('Web site'))), $labeledURIField\n\t\t\t);\n\t\t}\n\t\tif (in_array('telephoneNumber', $fields)) {\n\t\t\t$telephoneNumber = '';\n\t\t\tif (isset($attributes['telephoneNumber'][0])) {\n\t\t\t\t$telephoneNumber = $attributes['telephoneNumber'][0];\n\t\t\t}\n\t\t\t$telephoneNumberField = new htmlInputField('inetOrgPerson_telephoneNumber', $telephoneNumber);\n\t\t\tif (in_array('telephoneNumber', $readOnlyFields)) {\n\t\t\t\t$telephoneNumberField = new htmlOutputText($telephoneNumber);\n\t\t\t}\n\t\t\t$return['telephoneNumber'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('telephoneNumber', _('Telephone number'))), $telephoneNumberField\n\t\t\t);\n\t\t}\n\t\tif (in_array('homePhone', $fields)) {\n\t\t\t$homePhone = '';\n\t\t\tif (isset($attributes['homePhone'][0])) {\n\t\t\t\t$homePhone = $attributes['homePhone'][0];\n\t\t\t}\n\t\t\t$homePhoneField = new htmlInputField('inetOrgPerson_homePhone', $homePhone);\n\t\t\tif (in_array('homePhone', $readOnlyFields)) {\n\t\t\t\t$homePhoneField = new htmlOutputText($homePhone);\n\t\t\t}\n\t\t\t$return['homePhone'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('homePhone', _('Home telephone number'))), $homePhoneField\n\t\t\t);\n\t\t}\n\t\tif (in_array('mobile', $fields)) {\n\t\t\t$mobile = '';\n\t\t\tif (isset($attributes['mobile'][0])) {\n\t\t\t\t$mobile = $attributes['mobile'][0];\n\t\t\t}\n\t\t\t$mobileField = new htmlInputField('inetOrgPerson_mobile', $mobile);\n\t\t\tif (in_array('mobile', $readOnlyFields)) {\n\t\t\t\t$mobileField = new htmlOutputText($mobile);\n\t\t\t}\n\t\t\t$return['mobile'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('mobile', _('Mobile telephone number'))), $mobileField\n\t\t\t);\n\t\t}\n\t\tif (in_array('faxNumber', $fields)) {\n\t\t\t$faxNumber = '';\n\t\t\tif (isset($attributes['facsimileTelephoneNumber'][0])) {\n\t\t\t\t$faxNumber = $attributes['facsimileTelephoneNumber'][0];\n\t\t\t}\n\t\t\t$faxNumberField = new htmlInputField('inetOrgPerson_faxNumber', $faxNumber);\n\t\t\tif (in_array('faxNumber', $readOnlyFields)) {\n\t\t\t\t$faxNumberField = new htmlOutputText($faxNumber);\n\t\t\t}\n\t\t\t$return['faxNumber'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('faxNumber', _('Fax number'))), $faxNumberField\n\t\t\t);\n\t\t}\n\t\tif (in_array('pager', $fields)) {\n\t\t\t$pager = '';\n\t\t\tif (isset($attributes['pager'][0])) {\n\t\t\t\t$pager = $attributes['pager'][0];\n\t\t\t}\n\t\t\t$pagerField = new htmlInputField('inetOrgPerson_pager', $pager);\n\t\t\tif (in_array('pager', $readOnlyFields)) {\n\t\t\t\t$pagerField = new htmlOutputText($pager);\n\t\t\t}\n\t\t\t$return['pager'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('pager', _('Pager'))), $pagerField\n\t\t\t);\n\t\t}\n\t\tif (in_array('street', $fields)) {\n\t\t\t$street = '';\n\t\t\tif (isset($attributes['street'][0])) {\n\t\t\t\t$street = $attributes['street'][0];\n\t\t\t}\n\t\t\t$streetField = new htmlInputField('inetOrgPerson_street', $street);\n\t\t\tif (in_array('street', $readOnlyFields)) {\n\t\t\t\t$streetField = new htmlOutputText($street);\n\t\t\t}\n\t\t\t$return['street'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('street', _('Street'))), $streetField\n\t\t\t);\n\t\t}\n\t\tif (in_array('postalAddress', $fields)) {\n\t\t\t$postalAddress = '';\n\t\t\tif (isset($attributes['postalAddress'][0])) {\n\t\t\t\t$postalAddress = $attributes['postalAddress'][0];\n\t\t\t}\n\t\t\t$postalAddressField = new htmlInputField('inetOrgPerson_postalAddress', $postalAddress);\n\t\t\tif (in_array('postalAddress', $readOnlyFields)) {\n\t\t\t\t$postalAddressField = new htmlOutputText($postalAddress);\n\t\t\t}\n\t\t\t$return['postalAddress'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('postalAddress', _('Postal address'))), $postalAddressField\n\t\t\t);\n\t\t}\n\t\tif (in_array('registeredAddress', $fields)) {\n\t\t\t$registeredAddress = '';\n\t\t\tif (isset($attributes['registeredAddress'][0])) {\n\t\t\t\t$registeredAddress = $attributes['registeredAddress'][0];\n\t\t\t}\n\t\t\t$registeredAddressField = new htmlInputField('inetOrgPerson_registeredAddress', $registeredAddress);\n\t\t\tif (in_array('registeredAddress', $readOnlyFields)) {\n\t\t\t\t$registeredAddressField = new htmlOutputText($registeredAddress);\n\t\t\t}\n\t\t\t$return['registeredAddress'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText(_('Registered address')), $registeredAddressField\n\t\t\t);\n\t\t}\n\t\tif (in_array('postalCode', $fields)) {\n\t\t\t$postalCode = '';\n\t\t\tif (isset($attributes['postalCode'][0])) {\n\t\t\t\t$postalCode = $attributes['postalCode'][0];\n\t\t\t}\n\t\t\t$postalCodeField = new htmlInputField('inetOrgPerson_postalCode', $postalCode);\n\t\t\tif (in_array('postalCode', $readOnlyFields)) {\n\t\t\t\t$postalCodeField = new htmlOutputText($postalCode);\n\t\t\t}\n\t\t\t$return['postalCode'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('postalCode', _('Postal code'))), $postalCodeField\n\t\t\t);\n\t\t}\n\t\tif (in_array('postOfficeBox', $fields)) {\n\t\t\t$postOfficeBox = '';\n\t\t\tif (isset($attributes['postOfficeBox'][0])) {\n\t\t\t\t$postOfficeBox = $attributes['postOfficeBox'][0];\n\t\t\t}\n\t\t\t$postOfficeBoxField = new htmlInputField('inetOrgPerson_postOfficeBox', $postOfficeBox);\n\t\t\tif (in_array('postOfficeBox', $readOnlyFields)) {\n\t\t\t\t$postOfficeBoxField = new htmlOutputText($postOfficeBox);\n\t\t\t}\n\t\t\t$return['postOfficeBox'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('postOfficeBox', _('Post office box'))), $postOfficeBoxField\n\t\t\t);\n\t\t}\n\t\tif (in_array('roomNumber', $fields)) {\n\t\t\t$roomNumber = '';\n\t\t\tif (isset($attributes['roomNumber'][0])) {\n\t\t\t\t$roomNumber = $attributes['roomNumber'][0];\n\t\t\t}\n\t\t\t$roomNumberField = new htmlInputField('inetOrgPerson_roomNumber', $roomNumber);\n\t\t\tif (in_array('roomNumber', $readOnlyFields)) {\n\t\t\t\t$roomNumberField = new htmlOutputText($roomNumber);\n\t\t\t}\n\t\t\t$return['roomNumber'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('roomNumber', _('Room number'))), $roomNumberField\n\t\t\t);\n\t\t}\n\t\tif (in_array('location', $fields)) {\n\t\t\t$l = '';\n\t\t\tif (isset($attributes['l'][0])) {\n\t\t\t\t$l = $attributes['l'][0];\n\t\t\t}\n\t\t\t$lField = new htmlInputField('inetOrgPerson_location', $l);\n\t\t\tif (in_array('location', $readOnlyFields)) {\n\t\t\t\t$lField = new htmlOutputText($l);\n\t\t\t}\n\t\t\t$return['location'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('location', _('Location'))), $lField\n\t\t\t);\n\t\t}\n\t\tif (in_array('state', $fields)) {\n\t\t\t$st = '';\n\t\t\tif (isset($attributes['st'][0])) {\n\t\t\t\t$st = $attributes['st'][0];\n\t\t\t}\n\t\t\t$stField = new htmlInputField('inetOrgPerson_state', $st);\n\t\t\tif (in_array('state', $readOnlyFields)) {\n\t\t\t\t$stField = new htmlOutputText($st);\n\t\t\t}\n\t\t\t$return['state'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('state', _('State'))), $stField\n\t\t\t);\n\t\t}\n\t\tif (in_array('carLicense', $fields)) {\n\t\t\t$carLicense = '';\n\t\t\tif (isset($attributes['carLicense'][0])) {\n\t\t\t\t$carLicense = $attributes['carLicense'][0];\n\t\t\t}\n\t\t\t$carLicenseField = new htmlInputField('inetOrgPerson_carLicense', $carLicense);\n\t\t\tif (in_array('carLicense', $readOnlyFields)) {\n\t\t\t\t$carLicenseField = new htmlOutputText($carLicense);\n\t\t\t}\n\t\t\t$return['carLicense'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('carLicense', _('Car license'))), $carLicenseField\n\t\t\t);\n\t\t}\n\t\tif (in_array('officeName', $fields)) {\n\t\t\t$physicalDeliveryOfficeName = '';\n\t\t\tif (isset($attributes['physicalDeliveryOfficeName'][0])) {\n\t\t\t\t$physicalDeliveryOfficeName = $attributes['physicalDeliveryOfficeName'][0];\n\t\t\t}\n\t\t\t$physicalDeliveryOfficeNameField = new htmlInputField('inetOrgPerson_officeName', $physicalDeliveryOfficeName);\n\t\t\tif (in_array('officeName', $readOnlyFields)) {\n\t\t\t\t$physicalDeliveryOfficeNameField = new htmlOutputText($physicalDeliveryOfficeName);\n\t\t\t}\n\t\t\t$return['officeName'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('officeName', _('Office name'))), $physicalDeliveryOfficeNameField\n\t\t\t);\n\t\t}\n\t\tif (in_array('businessCategory', $fields)) {\n\t\t\t$businessCategory = '';\n\t\t\tif (isset($attributes['businessCategory'][0])) {\n\t\t\t\t$businessCategory = $attributes['businessCategory'][0];\n\t\t\t}\n\t\t\t$businessCategoryField = new htmlInputField('inetOrgPerson_businessCategory', $businessCategory);\n\t\t\tif (in_array('businessCategory', $readOnlyFields)) {\n\t\t\t\t$businessCategoryField = new htmlOutputText($businessCategory);\n\t\t\t}\n\t\t\t$return['businessCategory'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('businessCategory', _('Business category'))), $businessCategoryField\n\t\t\t);\n\t\t}\n\t\tif (in_array('jpegPhoto', $fields)) {\n\t\t\t$_SESSION[self::SESS_PHOTO] = null;\n\t\t\tif (isset($attributes['jpegPhoto'][0])) {\n\t\t\t\t$_SESSION[self::SESS_PHOTO] = $attributes['jpegPhoto'][0];\n\t\t\t}\n\t\t\t$readOnlyPhoto = in_array('jpegPhoto', $readOnlyFields);\n\t\t\tif (!empty($attributes['jpegPhoto'][0]) || !$readOnlyPhoto) {\n\t\t\t\t$photoSub = new htmlDiv('inetOrgPersonPhotoUploadContent', $this->getSelfServicePhoto($readOnlyPhoto, false));\n\t\t\t\t$photoRow = new htmlResponsiveRow();\n\t\t\t\t$photoRow->add($this->getSelfServicePhotoJS($readOnlyPhoto), 0);\n\t\t\t\t$photoRow->addLabel(new htmlOutputText($this->getSelfServiceLabel('jpegPhoto', _('Photo'))));\n\t\t\t\t$photoRow->addField(new htmlDiv('jpegPhotoDiv', $photoSub));\n\t\t\t\t$return['jpegPhoto'] = $photoRow;\n\t\t\t}\n\t\t}\n\t\tif (in_array('departmentNumber', $fields)) {\n\t\t\t$departmentNumber = '';\n\t\t\tif (isset($attributes['departmentNumber'][0])) {\n\t\t\t\t$departmentNumber = implode('; ', $attributes['departmentNumber']);\n\t\t\t}\n\t\t\t$departmentNumberField = new htmlInputField('inetOrgPerson_departmentNumber', $departmentNumber);\n\t\t\tif (in_array('departmentNumber', $readOnlyFields)) {\n\t\t\t\t$departmentNumberField = new htmlOutputText($departmentNumber);\n\t\t\t}\n\t\t\t$return['departmentNumber'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('departmentNumber', _('Department'))), $departmentNumberField\n\t\t\t);\n\t\t}\n\t\tif (in_array('initials', $fields)) {\n\t\t\t$initials = '';\n\t\t\tif (isset($attributes['initials'][0])) {\n\t\t\t\t$initials = implode('; ', $attributes['initials']);\n\t\t\t}\n\t\t\t$initialsField = new htmlInputField('inetOrgPerson_initials', $initials);\n\t\t\tif (in_array('initials', $readOnlyFields)) {\n\t\t\t\t$initialsField = new htmlOutputText($initials);\n\t\t\t}\n\t\t\t$return['initials'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('initials', _('Initials'))), $initialsField\n\t\t\t);\n\t\t}\n\t\tif (in_array('title', $fields)) {\n\t\t\t$title = '';\n\t\t\tif (isset($attributes['title'][0])) {\n\t\t\t\t$title = $attributes['title'][0];\n\t\t\t}\n\t\t\t$titleField = new htmlInputField('inetOrgPerson_title', $title);\n\t\t\tif (in_array('title', $readOnlyFields)) {\n\t\t\t\t$titleField = new htmlOutputText($title);\n\t\t\t}\n\t\t\t$return['title'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('title', _('Job title'))), $titleField\n\t\t\t);\n\t\t}\n\t\tif (in_array('userCertificate', $fields)) {\n\t\t\t$userCertificates = array();\n\t\t\tif (isset($attributes['userCertificate'][0])) {\n\t\t\t\t$userCertificates = $attributes['userCertificate'];\n\t\t\t}\n\t\t\telseif (isset($attributes['userCertificate;binary'][0])) {\n\t\t\t\t$userCertificates = $attributes['userCertificate;binary'];\n\t\t\t}\n\t\t\t$_SESSION[self::SESS_CERTIFICATES_LIST] = $userCertificates;\n\t\t\t$certTable = new htmlResponsiveRow();\n\t\t\t$certTable->add(new htmlDiv('userCertificateDiv', $this->getSelfServiceUserCertificates()), 12);\n\t\t\t// JavaScript functions\n\t\t\t$certTable->add($this->getSelfServiceUserCertificatesJSBlock(), 12);\n\t\t\t// upload button\n\t\t\t$uploadButtons = new htmlGroup();\n\t\t\t$uploadButtons->addElement(new htmlDiv('inetOrgPersonCertUploadId', new htmlOutputText('')), true);\n\t\t\t$certUpload = new htmlJavaScript('inetOrgPersonUploadCert(\\'inetOrgPersonCertUploadId\\');');\n\t\t\t$uploadButtons->addElement($certUpload);\n\t\t\t$certTable->add($uploadButtons, 12);\n\t\t\t// upload status\n\t\t\t$uploadStatus = new htmlDiv('inetOrgPerson_upload_status_cert', new htmlOutputText(''));\n\t\t\t$uploadStatus->setCSSClasses(array('qq-upload-list'));\n\t\t\t$certTable->add($uploadStatus, 12);\n\t\t\t$certLabel = new htmlOutputText($this->getSelfServiceLabel('userCertificate', _('User certificates')));\n\t\t\t$return['userCertificate'] = new htmlResponsiveRow($certLabel, $certTable);\n\t\t}\n\t\t// o\n\t\tif (in_array('o', $fields)) {\n\t\t\t$o = '';\n\t\t\tif (isset($attributes['o'][0])) {\n\t\t\t\t$o = $attributes['o'][0];\n\t\t\t}\n\t\t\tif (in_array('o', $readOnlyFields)) {\n\t\t\t\t$oField = new htmlOutputText(getAbstractDN($o));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$filter = '(|(objectClass=organizationalunit)(objectClass=country)(objectClass=organization)(objectClass=krbRealmContainer)(objectClass=container))';\n\t\t\t\t$suffix = $_SESSION['selfServiceProfile']->LDAPSuffix;\n\t\t\t\t$foundOs = searchLDAPPaged($_SESSION['ldapHandle'], $suffix, $filter, array('dn'), false, 0);\n\t\t\t\t$oList = array();\n\t\t\t\tforeach ($foundOs as $foundO) {\n\t\t\t\t\t$oList[] = $foundO['dn'];\n\t\t\t\t}\n\t\t\t\tif (!empty($attributes['o'][0]) && !in_array($attributes['o'][0], $oList)) {\n\t\t\t\t\t$oList[] = $attributes['o'][0];\n\t\t\t\t\tusort($oList, 'compareDN');\n\t\t\t\t}\n\t\t\t\t$oSelectionList = array('' => '');\n\t\t\t\tforeach ($oList as $singleOU) {\n\t\t\t\t\t$oSelectionList[getAbstractDN($singleOU)] = $singleOU;\n\t\t\t\t}\n\t\t\t\t$oSelectionListSelected = array();\n\t\t\t\tif (!empty($attributes['o'][0])) {\n\t\t\t\t\t$oSelectionListSelected[] = $attributes['o'][0];\n\t\t\t\t}\n\t\t\t\t$oField = new htmlSelect('inetOrgPerson_o', $oSelectionList, $oSelectionListSelected);\n\t\t\t\t$oField->setHasDescriptiveElements(true);\n\t\t\t\t$oField->setRightToLeftTextDirection(true);\n\t\t\t\t$oField->setSortElements(false);\n\t\t\t}\n\t\t\t$return['o'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('o', _('Organisation'))), $oField\n\t\t\t);\n\t\t}\n\t\t// ou\n\t\tif (in_array('ou', $fields)) {\n\t\t\t$ou = '';\n\t\t\tif (isset($attributes['ou'][0])) {\n\t\t\t\t$ou = $attributes['ou'][0];\n\t\t\t}\n\t\t\tif (in_array('ou', $readOnlyFields)) {\n\t\t\t\t$ouField = new htmlOutputText(getAbstractDN($ou));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$filter = '(|(objectClass=organizationalunit)(objectClass=country)(objectClass=organization)(objectClass=krbRealmContainer)(objectClass=container))';\n\t\t\t\t$suffix = $_SESSION['selfServiceProfile']->LDAPSuffix;\n\t\t\t\t$foundOus = searchLDAPPaged($_SESSION['ldapHandle'], $suffix, $filter, array('dn'), false, 0);\n\t\t\t\t$ouList = array();\n\t\t\t\tforeach ($foundOus as $foundOu) {\n\t\t\t\t\t$ouList[] = $foundOu['dn'];\n\t\t\t\t}\n\t\t\t\tif (!empty($attributes['ou'][0]) && !in_array($attributes['ou'][0], $ouList)) {\n\t\t\t\t\t$ouList[] = $attributes['ou'][0];\n\t\t\t\t\tusort($ouList, 'compareDN');\n\t\t\t\t}\n\t\t\t\t$ouSelectionList = array('' => '');\n\t\t\t\tforeach ($ouList as $singleOU) {\n\t\t\t\t\t$ouSelectionList[getAbstractDN($singleOU)] = $singleOU;\n\t\t\t\t}\n\t\t\t\t$ouSelectionListSelected = array();\n\t\t\t\tif (!empty($attributes['ou'][0])) {\n\t\t\t\t\t$ouSelectionListSelected[] = $attributes['ou'][0];\n\t\t\t\t}\n\t\t\t\t$ouField = new htmlSelect('inetOrgPerson_ou', $ouSelectionList, $ouSelectionListSelected);\n\t\t\t\t$ouField->setHasDescriptiveElements(true);\n\t\t\t\t$ouField->setRightToLeftTextDirection(true);\n\t\t\t\t$ouField->setSortElements(false);\n\t\t\t}\n\t\t\t$return['ou'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('ou', _('Organisational unit'))), $ouField\n\t\t\t);\n\t\t}\n\t\t// description\n\t\tif (in_array('description', $fields)) {\n\t\t\t$description = '';\n\t\t\tif (isset($attributes['description'][0])) {\n\t\t\t\t$description = $attributes['description'][0];\n\t\t\t}\n\t\t\t$descriptionField = new htmlInputField('inetOrgPerson_description', $description);\n\t\t\tif (in_array('description', $readOnlyFields)) {\n\t\t\t\t$descriptionField = new htmlOutputText($description);\n\t\t\t}\n\t\t\t$return['description'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('description', _('Description'))), $descriptionField\n\t\t\t);\n\t\t}\n\t\t// uid\n\t\tif (in_array('uid', $fields)) {\n\t\t\t$uid = '';\n\t\t\tif (isset($attributes['uid'][0])) {\n\t\t\t\t$uid = $attributes['uid'][0];\n\t\t\t}\n\t\t\t$uidField = new htmlInputField('inetOrgPerson_uid', $uid);\n\t\t\tif (in_array('uid', $readOnlyFields)) {\n\t\t\t\t$uidField = new htmlOutputText($uid);\n\t\t\t}\n\t\t\t$return['uid'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('uid', _('User name'))), $uidField\n\t\t\t);\n\t\t}\n\t\tif (in_array('displayName', $fields)) {\n\t\t\t$displayName = '';\n\t\t\tif (isset($attributes['displayName'][0])) {\n\t\t\t\t$displayName = $attributes['displayName'][0];\n\t\t\t}\n\t\t\t$displayNameField = new htmlInputField('inetOrgPerson_displayName', $displayName);\n\t\t\tif (in_array('displayName', $readOnlyFields)) {\n\t\t\t\t$displayNameField = new htmlOutputText($displayName);\n\t\t\t}\n\t\t\t$return['displayName'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('displayName', _('Display name'))), $displayNameField\n\t\t\t);\n\t\t}\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Renders the photo area for self service.\n\t *\n\t * @param boolean $readOnly content is read-only\n\t * @param boolean $crop enable cropping\n\t * @return htmlResponsiveRow content\n\t */\n\tprivate function getSelfServicePhoto($readOnly, $crop) {\n\t\t$photo = $_SESSION[self::SESS_PHOTO];\n\t\t$row = new htmlResponsiveRow();\n\t\tif (!empty($photo)) {\n\t\t\t$jpeg_filename = 'jpegPhoto' . getRandomNumber() . '.jpg';\n\t\t\t$outjpeg = fopen(realpath('../../') . '/tmp/' . $jpeg_filename, \"wb\");\n\t\t\tfwrite($outjpeg, $photo);\n\t\t\tfclose ($outjpeg);\n\t\t\t$photoFile = '../../tmp/' . $jpeg_filename;\n\t\t\t$img = new htmlImage($photoFile);\n\t\t\t$img->setCSSClasses(array('photo'));\n\t\t\tif ($crop) {\n\t\t\t\t$img->enableCropping();\n\t\t\t}\n\t\t\t$row->add($img, 12);\n\t\t\tif (!$readOnly) {\n\t\t\t\t$row->addVerticalSpacer('0.5rem');\n\t\t\t\t$deleteButton = new htmlLink(_('Delete'), '#', '../../graphics/del.svg', true);\n\t\t\t\t$deleteButton->setOnClick('inetOrgPersonDeletePhoto(); return false;');\n\t\t\t\t$row->add($deleteButton, 12);\n\t\t\t}\n\t\t\t$row->addVerticalSpacer('0.5rem');\n\t\t}\n\t\t// upload button\n\t\t$row->add(new htmlDiv('inetOrgPersonPhotoUploadId', new htmlOutputText('')), 12);\n\t\t$row->add(new htmlJavaScript('inetOrgPersonUploadPhoto(\\'inetOrgPersonPhotoUploadId\\');'), 0);\n\t\t$uploadStatus = new htmlDiv('inetOrgPersonPhotoUploadStatus', new htmlOutputText(''));\n\t\t$uploadStatus->setCSSClasses(array('qq-upload-list'));\n\t\t$row->add($uploadStatus, 12);\n\t\t// webcam button\n\t\t$webcamContent = new htmlResponsiveRow();\n\t\t$webcamContent->addVerticalSpacer('0.5rem');\n\t\t$errorMessage = new htmlStatusMessage('ERROR', '');\n\t\t$errorMessage->setCSSClasses(array('hidden', 'lam-webcam-message'));\n\t\t$webcamContent->add($errorMessage, 12);\n\t\t$webcamContent->addVerticalSpacer('0.5rem');\n\t\t$captureButton = new htmlLink(_('Use webcam'), '#', '../../graphics/webcam.png', true);\n\t\t$captureButton->setId('btn_lam-webcam-capture');\n\t\t$captureButton->setOnClick('window.lam.tools.webcam.capture(event);');\n\t\t$webcamContent->add($captureButton, 12, 12, 12);\n\t\t$video = new htmlVideo('lam-webcam-video');\n\t\t$video->setCSSClasses(array('hidden'));\n\t\t$webcamContent->add($video, 12, 12, 12, 'text-center');\n\t\t$webcamContent->addVerticalSpacer('1rem');\n\t\t$webcamUploadButton = new htmlLink(_('Upload'), '#', '../../graphics/upload.svg', true);\n\t\t$webcamUploadButton->setId('btn-lam-webcam-upload');\n\t\t$webcamUploadButton->setCSSClasses(array('btn-lam-webcam-upload', 'hidden'));\n\t\t$webcamUploadButton->setOnClick('window.lam.tools.webcam.uploadSelfService(event, \"' . getSecurityTokenName()\n\t\t\t.  '\", \"' . getSecurityTokenValue() . '\", \"inetOrgPerson\", \"user\", \"' . _('File upload failed!') . '\", \"inetOrgPersonPhotoUploadContent\");');\n\t\t$webcamContent->add($webcamUploadButton, 12, 12, 12);\n\t\t$canvas = new htmlCanvas('lam-webcam-canvas');\n\t\t$canvas->setCSSClasses(array('hidden'));\n\t\t$webcamContent->add($canvas, 12);\n\t\t$webcamDiv = new htmlDiv('lam_webcam_div', $webcamContent, array('hidden'));\n\t\t$webcamContent->addVerticalSpacer('1rem');\n\t\t$row->add($webcamDiv, 12);\n\t\treturn $row;\n\t}\n\n\t/**\n\t * Returns the Java Script functions to manage the photo.\n\t *\n\t * @param boolean $readOnly content is read-only\n\t * @return htmlJavaScript JS block\n\t */\n\tprivate static function getSelfServicePhotoJS($readOnly) {\n\t\tif ($readOnly) {\n\t\t\treturn new htmlGroup();\n\t\t}\n\t\t$content = '\n\t\t\t\tfunction inetOrgPersonUploadPhoto(elementID) {\n\t\t\t\tvar uploadStatus = document.getElementById(\\'inetOrgPersonPhotoUploadStatus\\');\n\t\t\t\tvar params = { action: \\'ajaxPhotoUpload\\' };\n\t\t\t\tparams[\"' . getSecurityTokenName() . '\"] = \"' . getSecurityTokenValue() . '\";\n\t\t\t\tvar uploader = new qq.FineUploader({\n\t\t\t\t\telement: document.getElementById(elementID),\n\t\t\t\t\tlistElement: uploadStatus,\n\t\t\t\t\trequest: {\n\t\t\t\t\t\tendpoint: \\'../misc/ajax.php?selfservice=1&module=inetOrgPerson&scope=user'\n\t\t\t\t\t\t . '&' . getSecurityTokenName() . '=' . getSecurityTokenValue() . '\\',\n\t\t\t\t\t\tforceMultipart: true,\n\t\t\t\t\t\tparams: params\n\t\t\t\t\t},\n\t\t\t\t\tmultiple: false,\n\t\t\t\t\tcallbacks: {\n\t\t\t\t\t\tonComplete: function(id, fileName, data) {\n\t\t\t\t\t\t\tif (data.success) {\n\t\t\t\t\t\t\t\tif (data.html) {\n\t\t\t\t\t\t\t\t\tjQuery(\\'#inetOrgPersonPhotoUploadContent\\').html(data.html);\n\t\t\t\t\t\t\t\t\twindow.lam.tools.webcam.init();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\talert(data.error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfunction inetOrgPersonDeletePhoto(id) {\n\t\t\t\tvar actionJSON = {\n\t\t\t\t\t\"action\": \"deletePhoto\",\n\t\t\t\t\t\"id\": id\n\t\t\t\t};\n\t\t\t\tvar data = {jsonInput: actionJSON};\n\t\t\t\tdata[\"' . getSecurityTokenName() . '\"] = \"' . getSecurityTokenValue() . '\";\n\t\t\t\tjQuery.post(\\'../misc/ajax.php?selfservice=1&module=inetOrgPerson&scope=user\\',\n\t\t\t\t\t\tdata, function(data) {inetOrgPersonDeletePhotoHandleReply(data);}, \\'json\\');\n\t\t\t}\n\n\t\t\tfunction inetOrgPersonDeletePhotoHandleReply(data) {\n\t\t\t\tif (data.errorsOccurred == \"false\") {\n\t\t\t\t\tjQuery(\\'#inetOrgPersonPhotoUploadContent\\').html(data.html);\n\t\t\t\t\twindow.lam.tools.webcam.init();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\talert(data.errormessage);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\t';\n\t\treturn new htmlJavaScript($content);\n\t}\n\n\n\t/**\n\t * Returns the meta HTML code to display the certificate area.\n\t * This also includes the file upload.\n\t *\n\t * @return htmlTable certificate content\n\t */\n\tprivate function getSelfServiceUserCertificates() {\n\t\t$userCertificates = $_SESSION[self::SESS_CERTIFICATES_LIST];\n\t\t$content = new htmlGroup();\n\t\tif (sizeof($userCertificates) > 0) {\n\t\t\t$certTable = new htmlResponsiveRow();\n\t\t\tfor ($i = 0; $i < sizeof($userCertificates); $i++) {\n\t\t\t\t$group = new htmlGroup();\n\t\t\t\t$filename = 'userCertificate' . getRandomNumber() . '.der';\n\t\t\t\t$out = @fopen(dirname(__FILE__) . '/../../tmp/' . $filename, \"wb\");\n\t\t\t\tfwrite($out, $userCertificates[$i]);\n\t\t\t\tfclose ($out);\n\t\t\t\t$path = '../../tmp/' . $filename;\n\t\t\t\tif (function_exists('openssl_x509_parse')) {\n\t\t\t\t\t$pem = @chunk_split(@base64_encode($userCertificates[$i]), 64, \"\\n\");\n\t\t\t\t\tif (!empty($pem)) {\n\t\t\t\t\t\t$pem = \"-----BEGIN CERTIFICATE-----\\n\" . $pem . \"-----END CERTIFICATE-----\\n\";\n\t\t\t\t\t\t$pemData = @openssl_x509_parse($pem);\n\t\t\t\t\t\t$data = array();\n\t\t\t\t\t\tif (isset($pemData['serialNumber'])) {\n\t\t\t\t\t\t\t$data[] = $pemData['serialNumber'];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (isset($pemData['name'])) {\n\t\t\t\t\t\t\t$data[] = $pemData['name'];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (sizeof($data) > 0) {\n\t\t\t\t\t\t\t$group->addElement(new htmlOutputText(implode(': ', $data)));\n\t\t\t\t\t\t\t$group->addElement(new htmlSpacer('5px', null));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$saveLink = new htmlLink('', $path, '../../graphics/save.svg');\n\t\t\t\t$saveLink->setTitle(_('Save'));\n\t\t\t\t$saveLink->setTargetWindow('_blank');\n\t\t\t\t$saveLink->setCSSClasses(array('icon'));\n\t\t\t\t$group->addElement($saveLink);\n\t\t\t\t$delLink = new htmlLink('', '#', '../../graphics/del.svg');\n\t\t\t\t$delLink->setTitle(_('Delete'));\n\t\t\t\t$delLink->setOnClick('inetOrgPersonDeleteCertificate(' . $i . '); return false;');\n\t\t\t\t$delLink->setCSSClasses(array('icon'));\n\t\t\t\t$group->addElement($delLink);\n\t\t\t\t$certTable->add($group, 12);\n\t\t\t}\n\t\t\t$content->addElement($certTable);\n\t\t}\n\t\treturn $content;\n\t}\n\n\t/**\n\t * Returns the Java Script functions to manage the certificates.\n\t *\n\t * @return htmlJavaScript JS block\n\t */\n\tprivate static function getSelfServiceUserCertificatesJSBlock() {\n\t\t$content = '\n\t\t\tfunction inetOrgPersonDeleteCertificate(id) {\n\t\t\t\tvar actionJSON = {\n\t\t\t\t\t\"action\": \"deleteCert\",\n\t\t\t\t\t\"id\": id\n\t\t\t\t};\n\t\t\t\tvar data = {jsonInput: actionJSON};\n\t\t\t\tdata[\"' . getSecurityTokenName() . '\"] = \"' . getSecurityTokenValue() . '\";\n\t\t\t\tjQuery.post(\\'../misc/ajax.php?selfservice=1&module=inetOrgPerson&scope=user\\',\n\t\t\t\t\t\tdata, function(data) {inetOrgPersonDeleteCertificateHandleReply(data);}, \\'json\\');\n\t\t\t}\n\n\t\t\tfunction inetOrgPersonDeleteCertificateHandleReply(data) {\n\t\t\t\tif (data.errorsOccurred == \"false\") {\n\t\t\t\t\tjQuery(\\'#userCertificateDiv\\').html(data.html);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\talert(data.errormessage);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction inetOrgPersonUploadCert(elementID) {\n\t\t\t\tvar uploadStatus = document.getElementById(\\'inetOrgPerson_upload_status_cert\\');\n\t\t\t\tvar params = { action: \\'ajaxCertUpload\\' };\n\t\t\t\tparams[\"' . getSecurityTokenName() . '\"] = \"' . getSecurityTokenValue() . '\";\n\t\t\t\tvar uploader = new qq.FineUploader({\n\t\t\t\t\telement: document.getElementById(elementID),\n\t\t\t\t\tlistElement: uploadStatus,\n\t\t\t\t\trequest: {\n\t\t\t\t\t\tendpoint: \\'../misc/ajax.php?selfservice=1&module=inetOrgPerson&scope=user'\n\t\t\t\t\t\t . '&' . getSecurityTokenName() . '=' . getSecurityTokenValue() . '\\',\n\t\t\t\t\t\tforceMultipart: true,\n\t\t\t\t\t\tparams: params\n\t\t\t\t\t},\n\t\t\t\t\tmultiple: false,\n\t\t\t\t\tcallbacks: {\n\t\t\t\t\t\tonComplete: function(id, fileName, data) {\n\t\t\t\t\t\t\tif (data.success) {\n\t\t\t\t\t\t\t\tif (data.html) {\n\t\t\t\t\t\t\t\t\tjQuery(\\'#userCertificateDiv\\').html(data.html);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\talert(data.error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t';\n\t\treturn new htmlJavaScript($content);\n\t}\n\n\t/**\n\t * Checks if all input values are correct and returns the LDAP attributes which should be changed.\n\t * <br>Return values:\n\t * <br>messages: array of parameters to create status messages\n\t * <br>add: array of attributes to add\n\t * <br>del: array of attributes to remove\n\t * <br>mod: array of attributes to modify\n\t * <br>info: array of values with informational value (e.g. to be used later by pre/postModify actions)\n\t *\n\t * Calling this method does not require the existence of an enclosing {@link accountContainer}.\n\t *\n\t * @param string $fields input fields\n\t * @param array $attributes LDAP attributes\n\t * @param boolean $passwordChangeOnly indicates that the user is only allowed to change his password and no LDAP content is readable\n\t * @param array $readOnlyFields list of read-only fields\n\t * @return array messages and attributes (array('messages' => array(), 'add' => array('mail' => array('test@test.com')), 'del' => array(), 'mod' => array(), 'info' => array()))\n\t */\n\tfunction checkSelfServiceOptions($fields, $attributes, $passwordChangeOnly, $readOnlyFields) {\n\t\t$return = array('messages' => array(), 'add' => array(), 'del' => array(), 'mod' => array(), 'info' => array());\n\t\tif ($passwordChangeOnly) {\n\t\t\treturn $return; // skip processing if only a password change is done\n\t\t}\n\t\t$attributeNames = array(); // list of attributes which should be checked for modification\n\t\t$attributesNew = $attributes;\n\t\t// first name\n\t\tif (in_array('firstName', $fields) && !in_array('firstName', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'givenName';\n\t\t\tif (isset($_POST['inetOrgPerson_firstName']) && ($_POST['inetOrgPerson_firstName'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_firstName'], 'realname')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['givenName'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['givenName'][0] = $_POST['inetOrgPerson_firstName'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (isset($attributes['givenName'])) {\n\t\t\t\tunset($attributesNew['givenName']);\n\t\t\t}\n\t\t}\n\t\t// last name\n\t\tif (in_array('lastName', $fields) && !in_array('lastName', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'sn';\n\t\t\tif (isset($_POST['inetOrgPerson_lastName']) && ($_POST['inetOrgPerson_lastName'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_lastName'], 'realname')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['lastname'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['sn'][0] = $_POST['inetOrgPerson_lastName'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// last name is required attribute\n\t\t\t\t$return['messages'][] = $this->messages['lastname'][0];\n\t\t\t}\n\t\t}\n\t\t// email\n\t\tif (in_array('mail', $fields) && !in_array('mail', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'mail';\n\t\t\tif (isset($_POST['inetOrgPerson_mail']) && ($_POST['inetOrgPerson_mail'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_mail'], 'email')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['email'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['mail'][0] = $_POST['inetOrgPerson_mail'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (isset($attributes['mail'])) {\n\t\t\t\tunset($attributesNew['mail']);\n\t\t\t}\n\t\t}\n\t\t// labeledURI\n\t\tif (in_array('labeledURI', $fields) && !in_array('labeledURI', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'labeledURI';\n\t\t\tif (isset($_POST['inetOrgPerson_labeledURI']) && ($_POST['inetOrgPerson_labeledURI'] != '')) {\n\t\t\t\t$attributesNew['labeledURI'] = preg_split('/;[ ]*/', $_POST['inetOrgPerson_labeledURI']);\n\t\t\t}\n\t\t\telseif (isset($attributes['labeledURI'])) {\n\t\t\t\tunset($attributesNew['labeledURI']);\n\t\t\t}\n\t\t}\n\t\t// telephone number\n\t\tif (in_array('telephoneNumber', $fields) && !in_array('telephoneNumber', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'telephoneNumber';\n\t\t\tif (isset($_POST['inetOrgPerson_telephoneNumber']) && ($_POST['inetOrgPerson_telephoneNumber'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_telephoneNumber'], 'telephone')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['telephoneNumber'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['telephoneNumber'][0] = $_POST['inetOrgPerson_telephoneNumber'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (isset($attributes['telephoneNumber'])) {\n\t\t\t\tunset($attributesNew['telephoneNumber']);\n\t\t\t}\n\t\t}\n\t\t// home telephone number\n\t\tif (in_array('homePhone', $fields) && !in_array('homePhone', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'homePhone';\n\t\t\tif (isset($_POST['inetOrgPerson_homePhone']) && ($_POST['inetOrgPerson_homePhone'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_homePhone'], 'telephone')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['homePhone'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['homePhone'][0] = $_POST['inetOrgPerson_homePhone'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (isset($attributes['homePhone'])) {\n\t\t\t\tunset($attributesNew['homePhone']);\n\t\t\t}\n\t\t}\n\t\t// fax number\n\t\tif (in_array('faxNumber', $fields) && !in_array('faxNumber', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'facsimileTelephoneNumber';\n\t\t\tif (isset($_POST['inetOrgPerson_faxNumber']) && ($_POST['inetOrgPerson_faxNumber'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_faxNumber'], 'telephone')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['facsimileNumber'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['facsimileTelephoneNumber'][0] = $_POST['inetOrgPerson_faxNumber'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (isset($attributes['facsimileTelephoneNumber'])) {\n\t\t\t\t$attributesNew['facsimileTelephoneNumber'] = array();\n\t\t\t}\n\t\t}\n\t\t// mobile telephone number\n\t\tif (in_array('mobile', $fields) && !in_array('mobile', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'mobile';\n\t\t\tif (isset($_POST['inetOrgPerson_mobile']) && ($_POST['inetOrgPerson_mobile'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_mobile'], 'telephone')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['mobileTelephone'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['mobile'][0] = $_POST['inetOrgPerson_mobile'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (isset($attributes['mobile'])) {\n\t\t\t\tunset($attributesNew['mobile']);\n\t\t\t}\n\t\t}\n\t\t// pager\n\t\tif (in_array('pager', $fields) && !in_array('pager', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'pager';\n\t\t\tif (isset($_POST['inetOrgPerson_pager']) && ($_POST['inetOrgPerson_pager'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_pager'], 'telephone')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['pager'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['pager'][0] = $_POST['inetOrgPerson_pager'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (isset($attributes['pager'])) {\n\t\t\t\tunset($attributesNew['pager']);\n\t\t\t}\n\t\t}\n\t\t// street\n\t\tif (in_array('street', $fields) && !in_array('street', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'street';\n\t\t\tif (isset($_POST['inetOrgPerson_street']) && ($_POST['inetOrgPerson_street'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_street'], 'street')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['street'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['street'][0] = $_POST['inetOrgPerson_street'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (isset($attributes['street'])) {\n\t\t\t\tunset($attributesNew['street']);\n\t\t\t}\n\t\t}\n\t\t// postal address\n\t\tif (in_array('postalAddress', $fields) && !in_array('postalAddress', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'postalAddress';\n\t\t\tif (isset($_POST['inetOrgPerson_postalAddress']) && ($_POST['inetOrgPerson_postalAddress'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_postalAddress'], 'postalAddress')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['postalAddress'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['postalAddress'][0] = $_POST['inetOrgPerson_postalAddress'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (isset($attributes['postalAddress'])) {\n\t\t\t\t$attributesNew['postalAddress'] = array();\n\t\t\t}\n\t\t}\n\t\t// registered address\n\t\tif (in_array('registeredAddress', $fields) && !in_array('registeredAddress', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'registeredAddress';\n\t\t\tif (isset($_POST['inetOrgPerson_registeredAddress']) && ($_POST['inetOrgPerson_registeredAddress'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_registeredAddress'], 'postalAddress')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['registeredAddress'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['registeredAddress'][0] = $_POST['inetOrgPerson_registeredAddress'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (isset($attributes['registeredAddress'])) {\n\t\t\t\t$attributesNew['registeredAddress'] = array();\n\t\t\t}\n\t\t}\n\t\t// postal code\n\t\tif (in_array('postalCode', $fields) && !in_array('postalCode', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'postalCode';\n\t\t\tif (isset($_POST['inetOrgPerson_postalCode']) && ($_POST['inetOrgPerson_postalCode'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_postalCode'], 'postalCode')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['postalCode'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['postalCode'][0] = $_POST['inetOrgPerson_postalCode'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (isset($attributes['postalCode'])) {\n\t\t\t\tunset($attributesNew['postalCode']);\n\t\t\t}\n\t\t}\n\t\t// post office box\n\t\tif (in_array('postOfficeBox', $fields) && !in_array('postOfficeBox', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'postOfficeBox';\n\t\t\tif (isset($_POST['inetOrgPerson_postOfficeBox']) && ($_POST['inetOrgPerson_postOfficeBox'] != '')) {\n\t\t\t\t$attributesNew['postOfficeBox'][0] = $_POST['inetOrgPerson_postOfficeBox'];\n\t\t\t}\n\t\t\telseif (isset($attributes['postOfficeBox'])) {\n\t\t\t\tunset($attributesNew['postOfficeBox']);\n\t\t\t}\n\t\t}\n\t\t// room number\n\t\tif (in_array('roomNumber', $fields) && !in_array('roomNumber', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'roomNumber';\n\t\t\tif (isset($_POST['inetOrgPerson_roomNumber']) && ($_POST['inetOrgPerson_roomNumber'] != '')) {\n\t\t\t\t$attributesNew['roomNumber'][0] = $_POST['inetOrgPerson_roomNumber'];\n\t\t\t}\n\t\t\telseif (isset($attributes['roomNumber'])) {\n\t\t\t\tunset($attributesNew['roomNumber']);\n\t\t\t}\n\t\t}\n\t\t// l\n\t\tif (in_array('location', $fields) && !in_array('location', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'l';\n\t\t\tif (isset($_POST['inetOrgPerson_location']) && ($_POST['inetOrgPerson_location'] != '')) {\n\t\t\t\t$attributesNew['l'][0] = $_POST['inetOrgPerson_location'];\n\t\t\t}\n\t\t\telseif (isset($attributes['l'])) {\n\t\t\t\tunset($attributesNew['l']);\n\t\t\t}\n\t\t}\n\t\t// st\n\t\tif (in_array('state', $fields) && !in_array('state', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'st';\n\t\t\tif (isset($_POST['inetOrgPerson_state']) && ($_POST['inetOrgPerson_state'] != '')) {\n\t\t\t\t$attributesNew['st'][0] = $_POST['inetOrgPerson_state'];\n\t\t\t}\n\t\t\telseif (isset($attributes['st'])) {\n\t\t\t\tunset($attributesNew['st']);\n\t\t\t}\n\t\t}\n\t\t// car license\n\t\tif (in_array('carLicense', $fields) && !in_array('carLicense', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'carLicense';\n\t\t\tif (isset($_POST['inetOrgPerson_carLicense']) && ($_POST['inetOrgPerson_carLicense'] != '')) {\n\t\t\t\t$attributesNew['carLicense'][0] = $_POST['inetOrgPerson_carLicense'];\n\t\t\t}\n\t\t\telseif (isset($attributes['carLicense'])) {\n\t\t\t\tunset($attributesNew['carLicense']);\n\t\t\t}\n\t\t}\n\t\t// office name\n\t\tif (in_array('officeName', $fields) && !in_array('officeName', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'physicalDeliveryOfficeName';\n\t\t\tif (isset($_POST['inetOrgPerson_officeName']) && ($_POST['inetOrgPerson_officeName'] != '')) {\n\t\t\t\t$attributesNew['physicalDeliveryOfficeName'][0] = $_POST['inetOrgPerson_officeName'];\n\t\t\t}\n\t\t\telseif (isset($attributes['physicalDeliveryOfficeName'])) {\n\t\t\t\tunset($attributesNew['physicalDeliveryOfficeName']);\n\t\t\t}\n\t\t}\n\t\t// business category\n\t\tif (in_array('businessCategory', $fields) && !in_array('businessCategory', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'businessCategory';\n\t\t\tif (isset($_POST['inetOrgPerson_businessCategory']) && ($_POST['inetOrgPerson_businessCategory'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_businessCategory'], 'businessCategory')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['businessCategory'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['businessCategory'][0] = $_POST['inetOrgPerson_businessCategory'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (isset($attributes['businessCategory'])) {\n\t\t\t\tunset($attributesNew['businessCategory']);\n\t\t\t}\n\t\t}\n\t\t// photo\n\t\tif (in_array('jpegPhoto', $fields) && !in_array('jpegPhoto', $readOnlyFields)) {\n\t\t\t$data = $_SESSION[self::SESS_PHOTO];\n\t\t\t// remove photo\n\t\t\tif (!empty($attributes['jpegPhoto'][0]) && empty($data)) {\n\t\t\t\t$return['mod']['jpegPhoto'] = array();\n\t\t\t}\n\t\t\t// set/replace photo\n\t\t\telseif (!empty($data) && (empty($attributes['jpegPhoto'][0]) || ($data != $attributes['jpegPhoto'][0]))) {\n\t\t\t\t$moduleSettings = $this->selfServiceSettings->moduleSettings;\n\t\t\t\ttry {\n\t\t\t\t\tinclude_once dirname(__FILE__) . '/../imageutils.inc';\n\t\t\t\t\t$imageManipulator = ImageManipulationFactory::getImageManipulator($data);\n\t\t\t\t\t$imageManipulator->crop($_POST['croppingDataX'], $_POST['croppingDataY'], $_POST['croppingDataWidth'], $_POST['croppingDataHeight']);\n\t\t\t\t\t$data = $imageManipulator->getImageData();\n\t\t\t\t\t$data = inetOrgPerson::resizeAndConvertImage($data, $moduleSettings);\n\t\t\t\t\tif (!empty($moduleSettings['inetOrgPerson_jpegPhoto_maxSize'][0]) && ($moduleSettings['inetOrgPerson_jpegPhoto_maxSize'][0] < (strlen($data) / 1024))) {\n\t\t\t\t\t\t$msg =  $this->messages['file'][3];\n\t\t\t\t\t\t$msg[] = null;\n\t\t\t\t\t\t$msg[] = htmlspecialchars($moduleSettings['inetOrgPerson_jpegPhoto_maxSize'][0]);\n\t\t\t\t\t\t$return['messages'][] = $msg;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (!empty($attributes['jpegPhoto'][0])) {\n\t\t\t\t\t\t\t$return['mod']['jpegPhoto'][0] = $data;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t$return['add']['jpegPhoto'][0] = $data;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (Exception $e) {\n\t\t\t\t\t$msg =  $this->messages['file'][2];\n\t\t\t\t\t$msg[] = htmlspecialchars($e->getMessage());\n\t\t\t\t\t$return['messages'][] = $msg;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// departments\n\t\tif (in_array('departmentNumber', $fields) && !in_array('departmentNumber', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'departmentNumber';\n\t\t\tif (isset($_POST['inetOrgPerson_departmentNumber']) && ($_POST['inetOrgPerson_departmentNumber'] != '')) {\n\t\t\t\t$attributesNew['departmentNumber'] = preg_split('/;[ ]*/', $_POST['inetOrgPerson_departmentNumber']);\n\t\t\t}\n\t\t\telseif (isset($attributes['departmentNumber'])) {\n\t\t\t\tunset($attributesNew['departmentNumber']);\n\t\t\t}\n\t\t}\n\t\t// initials\n\t\tif (in_array('initials', $fields) && !in_array('initials', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'initials';\n\t\t\tif (isset($_POST['inetOrgPerson_initials']) && ($_POST['inetOrgPerson_initials'] != '')) {\n\t\t\t\t$attributesNew['initials'] = preg_split('/;[ ]*/', $_POST['inetOrgPerson_initials']);\n\t\t\t}\n\t\t\telseif (isset($attributes['initials'])) {\n\t\t\t\tunset($attributesNew['initials']);\n\t\t\t}\n\t\t}\n\t\t// title\n\t\tif (in_array('title', $fields) && !in_array('title', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'title';\n\t\t\tif (isset($_POST['inetOrgPerson_title']) && ($_POST['inetOrgPerson_title'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_title'], 'title')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['title'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['title'][0] = $_POST['inetOrgPerson_title'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (isset($attributes['title'])) {\n\t\t\t\tunset($attributesNew['title']);\n\t\t\t}\n\t\t}\n\t\t// user certificates\n\t\tif (in_array('userCertificate', $fields)) {\n\t\t\t$userCertificates = $_SESSION[inetOrgPerson::SESS_CERTIFICATES_LIST];\n\t\t\t$userCertificatesAttrName = 'userCertificate;binary';\n\t\t\tif (isset($attributes['userCertificate'])) {\n\t\t\t\t$userCertificatesAttrName = 'userCertificate';\n\t\t\t}\n\t\t\t$attributeNames[] = $userCertificatesAttrName;\n\t\t\tif (sizeof($userCertificates) > 0) {\n\t\t\t\t$attributesNew[$userCertificatesAttrName] = $userCertificates;\n\t\t\t}\n\t\t\telseif (isset($attributesNew[$userCertificatesAttrName])) {\n\t\t\t\tunset($attributesNew[$userCertificatesAttrName]);\n\t\t\t}\n\t\t}\n\t\t// description\n\t\tif (in_array('description', $fields) && !in_array('description', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'description';\n\t\t\tif (!empty($_POST['inetOrgPerson_description'])) {\n\t\t\t\t$attributesNew['description'][0] = $_POST['inetOrgPerson_description'];\n\t\t\t}\n\t\t\telseif (isset($attributes['description'])) {\n\t\t\t\tunset($attributesNew['description']);\n\t\t\t}\n\t\t}\n\t\t// ou\n\t\tif (in_array('ou', $fields) && !in_array('ou', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'ou';\n\t\t\tif (!empty($_POST['inetOrgPerson_ou'])) {\n\t\t\t\t$attributesNew['ou'][0] = $_POST['inetOrgPerson_ou'];\n\t\t\t}\n\t\t\telseif (isset($attributes['ou'])) {\n\t\t\t\tunset($attributesNew['ou']);\n\t\t\t}\n\t\t}\n\t\t// o\n\t\tif (in_array('o', $fields) && !in_array('o', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'o';\n\t\t\tif (!empty($_POST['inetOrgPerson_o'])) {\n\t\t\t\t$attributesNew['o'][0] = $_POST['inetOrgPerson_o'];\n\t\t\t}\n\t\t\telseif (isset($attributes['o'])) {\n\t\t\t\tunset($attributesNew['o']);\n\t\t\t}\n\t\t}\n\t\t// uid\n\t\tif (in_array('uid', $fields) && !in_array('uid', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'uid';\n\t\t\tif (isset($_POST['inetOrgPerson_uid']) && ($_POST['inetOrgPerson_uid'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_uid'], 'username')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['uid'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['uid'][0] = $_POST['inetOrgPerson_uid'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (isset($attributes['uid'])) {\n\t\t\t\tunset($attributesNew['uid']);\n\t\t\t}\n\t\t}\n\t\t// display name\n\t\tif (in_array('displayName', $fields) && !in_array('displayName', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'displayName';\n\t\t\tif (!empty($_POST['inetOrgPerson_displayName'])) {\n\t\t\t\t$attributesNew['displayName'][0] = $_POST['inetOrgPerson_displayName'];\n\t\t\t}\n\t\t\telseif (isset($attributes['displayName'])) {\n\t\t\t\tunset($attributesNew['displayName']);\n\t\t\t}\n\t\t}\n\t\t// find differences\n\t\tfor ($i = 0; $i < sizeof($attributeNames); $i++) {\n\t\t\t$attrName = $attributeNames[$i];\n\t\t\tif (isset($attributes[$attrName]) && !isset($attributesNew[$attrName])) $return['del'][$attrName] = $attributes[$attrName];\n\t\t\telseif (!isset($attributes[$attrName]) && isset($attributesNew[$attrName])) $return['add'][$attrName] = $attributesNew[$attrName];\n\t\t\telse {\n\t\t\t\tif (isset($attributes[$attrName])) {\n\t\t\t\t\tfor ($a = 0; $a < sizeof($attributes[$attrName]); $a++) {\n\t\t\t\t\t\tif (!in_array($attributes[$attrName][$a], $attributesNew[$attrName])) {\n\t\t\t\t\t\t\t$return['mod'][$attrName] = $attributesNew[$attrName];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isset($attributesNew[$attrName])) {\n\t\t\t\t\tfor ($a = 0; $a < sizeof($attributesNew[$attrName]); $a++) {\n\t\t\t\t\t\tif (!in_array($attributesNew[$attrName][$a], $attributes[$attrName])) {\n\t\t\t\t\t\t\t$return['mod'][$attrName] = $attributesNew[$attrName];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Resizes the given image data to the settings provided.\n\t *\n\t * @param array $data binary image data\n\t * @param array $settings settings\n\t * @return array binary image data\n\t */\n\tprivate static function resizeAndConvertImage($data, $settings) {\n\t\tinclude_once dirname(__FILE__) . '/../imageutils.inc';\n\t\t$imageManipulator = ImageManipulationFactory::getImageManipulator($data);\n\t\t// resize if maximum values specified\n\t\tif (!empty($settings['inetOrgPerson_jpegPhoto_maxWidth'][0]) || !empty($settings['inetOrgPerson_jpegPhoto_maxHeight'][0])) {\n\t\t\t$maxWidth = empty($settings['inetOrgPerson_jpegPhoto_maxWidth'][0]) ? $imageManipulator->getWidth() : $settings['inetOrgPerson_jpegPhoto_maxWidth'][0];\n\t\t\t$maxHeight = empty($settings['inetOrgPerson_jpegPhoto_maxHeight'][0]) ? $imageManipulator->getHeight() : $settings['inetOrgPerson_jpegPhoto_maxHeight'][0];\n\t\t\t$imageManipulator->thumbnail($maxWidth, $maxHeight);\n\t\t}\n\t\t$imageManipulator->convertToJpeg();\n\t\treturn $imageManipulator->getImageData();\n\t}\n\n\t/**\n\t * Manages AJAX requests.\n\t * This function may be called with or without an account container.\n\t */\n\tpublic function handleAjaxRequest() {\n\t\t// AJAX uploads are non-JSON\n\t\tif (isset($_GET['action']) && ($_GET['action'] == 'ajaxCertUpload')) {\n\t\t\t$this->ajaxUploadCert();\n\t\t\treturn;\n\t\t}\n\t\tif (isset($_GET['action']) && ($_GET['action'] == 'ajaxPhotoUpload')) {\n\t\t\t$this->ajaxUploadPhoto();\n\t\t\treturn;\n\t\t}\n\t\t$jsonInput = $_POST['jsonInput'];\n\t\t$jsonReturn = self::invalidAjaxRequest();\n\t\tif (isset($jsonInput['action'])) {\n\t\t\tif ($jsonInput['action'] == 'deleteCert') {\n\t\t\t\t$jsonReturn = $this->ajaxDeleteSelfServiceUserCertificate($jsonInput);\n\t\t\t}\n\t\t\telseif ($jsonInput['action'] == 'deletePhoto') {\n\t\t\t\t$jsonReturn = $this->ajaxDeleteSelfServicePhoto($jsonInput);\n\t\t\t}\n\t\t}\n\t\techo json_encode($jsonReturn);\n\t}\n\n\t/**\n\t * Handles an AJAX certificate file upload and prints the JSON result.\n\t */\n\tprivate function ajaxUploadCert() {\n\t\t$result = array('success' => true);\n\t\tif (!isset($_FILES['qqfile']) || ($_FILES['qqfile']['size'] < 100)) {\n\t\t\t$result = array('error' => _('No file received.'));\n\t\t}\n\t\telse {\n\t\t\t$handle = fopen($_FILES['qqfile']['tmp_name'], \"r\");\n\t\t\t$data = fread($handle, 100000000);\n\t\t\tfclose($handle);\n\t\t\tif (strpos($data, '-----BEGIN CERTIFICATE-----') === 0) {\n\t\t\t\t$pemData = str_replace(\"\\r\", '', $data);\n\t\t\t\t$pemData = explode(\"\\n\", $pemData);\n\t\t\t\tarray_shift($pemData);\n\t\t\t\t$last = array_pop($pemData);\n\t\t\t\twhile (($last != '-----END CERTIFICATE-----') && sizeof($pemData) > 2) {\n\t\t\t\t\t$last = array_pop($pemData);\n\t\t\t\t}\n\t\t\t\t$pemData = implode('', $pemData);\n\t\t\t\t$data = base64_decode($pemData);\n\t\t\t}\n\t\t\t$_SESSION[inetOrgPerson::SESS_CERTIFICATES_LIST][] = $data;\n\t\t\tob_start();\n\t\t\t$contentElement = $this->getSelfServiceUserCertificates();\n\t\t\tob_end_clean();\n\t\t\tob_start();\n\t\t\t$tabindex = 999;\n\t\t\tparseHtml(null, $contentElement, array(), true, $tabindex, $this->get_scope());\n\t\t\t$content = ob_get_contents();\n\t\t\tob_end_clean();\n\t\t\t$result['html'] = $content;\n\t\t}\n\t\techo json_encode($result);\n\t}\n\n\t/**\n\t * Handles an AJAX photo file upload and prints the JSON result.\n\t */\n\tprivate function ajaxUploadPhoto() {\n\t\t$result = array('success' => true);\n\t\tif ((!isset($_FILES['qqfile']) || ($_FILES['qqfile']['size'] < 100)) && empty($_POST['webcamData'])) {\n\t\t\t$result = array('error' => _('No file received.'));\n\t\t}\n\t\telse {\n\t\t\tif (empty($_POST['webcamData'])) {\n\t\t\t\t$handle = fopen($_FILES['qqfile']['tmp_name'], \"r\");\n\t\t\t\t$data = fread($handle, 100000000);\n\t\t\t\tfclose($handle);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$data = $_POST['webcamData'];\n\t\t\t\t$data = str_replace('data:image/png;base64,', '', $data);\n\t\t\t\t$data = base64_decode($data);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tinclude_once dirname(__FILE__) . '/../imageutils.inc';\n\t\t\t\t$imageManipulator = ImageManipulationFactory::getImageManipulator($data);\n\t\t\t\t$imageManipulator->convertToJpeg();\n\t\t\t\t$data = $imageManipulator->getImageData();\n\t\t\t}\n\t\t\tcatch (Exception $e) {\n\t\t\t\t$result = array('success' => false, 'error' => htmlspecialchars($e->getMessage()));\n\t\t\t\techo json_encode($result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t$_SESSION[inetOrgPerson::SESS_PHOTO] = $data;\n\t\t\tob_start();\n\t\t\t$contentElement = $this->getSelfServicePhoto(false, true);\n\t\t\tob_end_clean();\n\t\t\tob_start();\n\t\t\t$tabindex = 999;\n\t\t\tparseHtml(null, $contentElement, array(), true, $tabindex, $this->get_scope());\n\t\t\t$content = ob_get_contents();\n\t\t\tob_end_clean();\n\t\t\t$result['html'] = $content;\n\t\t}\n\t\techo json_encode($result);\n\t}\n\n\t/**\n\t * Manages the deletion of a photo.\n\t *\n\t * @param array $data JSON data\n\t */\n\tprivate function ajaxDeleteSelfServicePhoto($data) {\n\t\t$_SESSION[self::SESS_PHOTO] = null;\n\t\tob_start();\n\t\t$contentElement = $this->getSelfServicePhoto(false, false);\n\t\tob_end_clean();\n\t\tob_start();\n\t\t$tabindex = 999;\n\t\tparseHtml(null, $contentElement, array(), true, $tabindex, $this->get_scope());\n\t\t$content = ob_get_contents();\n\t\tob_end_clean();\n\t\treturn array(\n\t\t\t'errorsOccurred' => 'false',\n\t\t\t'html' => $content,\n\t\t);\n\t}\n\n\t/**\n\t * Manages the deletion of a certificate.\n\t *\n\t * @param array $data JSON data\n\t */\n\tprivate function ajaxDeleteSelfServiceUserCertificate($data) {\n\t\tif (!isset($data['id'])) {\n\t\t\treturn self::invalidAjaxRequest();\n\t\t}\n\t\t$index = $data['id'];\n\t\tif (array_key_exists($index, $_SESSION[inetOrgPerson::SESS_CERTIFICATES_LIST])) {\n\t\t\tunset($_SESSION[inetOrgPerson::SESS_CERTIFICATES_LIST][$index]);\n\t\t\t$_SESSION[inetOrgPerson::SESS_CERTIFICATES_LIST] = array_values($_SESSION[inetOrgPerson::SESS_CERTIFICATES_LIST]);\n\t\t}\n\t\tob_start();\n\t\t$contentElement = $this->getSelfServiceUserCertificates();\n\t\tob_end_clean();\n\t\tob_start();\n\t\t$tabindex = 999;\n\t\tparseHtml(null, $contentElement, array(), true, $tabindex, $this->get_scope());\n\t\t$content = ob_get_contents();\n\t\tob_end_clean();\n\t\treturn array(\n\t\t\t'errorsOccurred' => 'false',\n\t\t\t'html' => $content,\n\t\t);\n\t}\n\n\t/**\n\t * Invalid AJAX request received.\n\t *\n\t * @param String $message error message\n\t */\n\tpublic static function invalidAjaxRequest($message = null) {\n\t\tif ($message == null) {\n\t\t\t$message = _('Invalid request');\n\t\t}\n\t\treturn array('errorsOccurred' => 'true', 'errormessage' => $message);\n\t}\n\n\t/**\n\t * This method specifies if a module manages password attributes.\n\t * @see passwordService::managesPasswordAttributes\n\t *\n\t * @return boolean true if this module manages password attributes\n\t */\n\tpublic function managesPasswordAttributes() {\n\t\tif (!$this->isUnixActive()) {\n\t\t\treturn !$this->isAdminReadOnly('userPassword');\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Specifies if this module supports to force that a user must change his password on next login.\n\t *\n\t * @return boolean force password change supported\n\t */\n\tpublic function supportsForcePasswordChange() {\n\t\treturn false;\n\t}\n\n\t/**\n\t * This function is called whenever the password should be changed. Account modules\n\t * must change their password attributes only if the modules list contains their module name.\n\t *\n\t * @param String $password new password\n\t * @param $modules list of modules for which the password should be changed\n\t * @param boolean $forcePasswordChange force the user to change his password at next login\n\t * @return array list of error messages if any as parameter array for StatusMessage\n\t *               e.g. return array(array('ERROR', 'Password change failed.'))\n\t * @see passwordService::passwordChangeRequested\n\t */\n\tpublic function passwordChangeRequested($password, $modules, $forcePasswordChange) {\n\t\tif (!in_array(get_class($this), $modules)) {\n\t\t\treturn array();\n\t\t}\n\t\t// check password strength\n\t\t$user = empty($this->attributes['uid'][0]) ? null : $this->attributes['uid'][0];\n\t\t$additionalAttrs = array();\n\t\tif (!empty($this->attributes['sn'][0])) {\n\t\t\t$additionalAttrs[] = $this->attributes['sn'][0];\n\t\t}\n\t\tif (!empty($this->attributes['givenName'][0])) {\n\t\t\t$additionalAttrs[] = $this->attributes['givenName'][0];\n\t\t}\n\t\t$checkResult = checkPasswordStrength($password, $user, $additionalAttrs);\n\t\tif ($checkResult !== true) {\n\t\t\treturn array(array('ERROR', $checkResult));\n\t\t}\n\t\t// set new password\n\t\t$this->clearTextPassword = $password;\n\t\t// set SASL password\n\t\tif (!empty($this->attributes['uid'][0]) && !empty($this->moduleSettings['posixAccount_pwdHash'][0])\n\t\t\t\t&& ($this->moduleSettings['posixAccount_pwdHash'][0] === 'SASL')) {\n\t\t\t$this->attributes['userpassword'][0] = '{SASL}' . $this->attributes['uid'][0];\n\t\t}\n\t\t// delay on ldap_exop\n\t\telseif (!empty($this->moduleSettings['posixAccount_pwdHash'][0]) && ($this->moduleSettings['posixAccount_pwdHash'][0] === 'LDAP_EXOP')) {\n\t\t\tlogNewMessage(LOG_DEBUG, 'Setting password in post action, exop');\n\t\t}\n\t\t// set normal password\n\t\telse {\n\t\t\t$this->attributes['userpassword'][0] = pwd_hash($password, true, $this->moduleSettings['posixAccount_pwdHash'][0]);\n\t\t}\n\t\treturn array();\n\t}\n\n\t/**\n\t * Loads cached data from LDAP such as departmets etc.\n\t */\n\tprivate function initCache() {\n\t\tif ($this->departmentCache != null) {\n\t\t\treturn;\n\t\t}\n\t\t$attrs = array();\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideDepartments')) {\n\t\t\t$attrs[] = 'departmentNumber';\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideOu')) {\n\t\t\t$attrs[] = 'ou';\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideO')) {\n\t\t\t$attrs[] = 'o';\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideJobTitle')) {\n\t\t\t$attrs[] = 'title';\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEmployeeType')) {\n\t\t\t$attrs[] = 'employeeType';\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideBusinessCategory')) {\n\t\t\t$attrs[] = 'businessCategory';\n\t\t}\n\t\t$departments = array();\n\t\t$ous = array();\n\t\t$os = array();\n\t\t$titles = array();\n\t\t$employeeTypes = array();\n\t\t$businessCategories = array();\n\t\tif (sizeof($attrs) > 0) {\n\t\t\t$result = searchLDAPByFilter('(objectClass=inetOrgPerson)', $attrs, array($this->get_scope()));\n\t\t\tforeach ($result as $attributes) {\n\t\t\t\tif (isset($attributes['departmentnumber'])) {\n\t\t\t\t\tforeach ($attributes['departmentnumber'] as $val) {\n\t\t\t\t\t\t$departments[] = $val;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isset($attributes['ou'])) {\n\t\t\t\t\tforeach ($attributes['ou'] as $val) {\n\t\t\t\t\t\t$ous[] = $val;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isset($attributes['o'])) {\n\t\t\t\t\tforeach ($attributes['o'] as $val) {\n\t\t\t\t\t\t$os[] = $val;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isset($attributes['title'])) {\n\t\t\t\t\tforeach ($attributes['title'] as $val) {\n\t\t\t\t\t\t$titles[] = $val;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isset($attributes['employeetype'])) {\n\t\t\t\t\tforeach ($attributes['employeetype'] as $val) {\n\t\t\t\t\t\t$employeeTypes[] = $val;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isset($attributes['businesscategory'])) {\n\t\t\t\t\tforeach ($attributes['businesscategory'] as $val) {\n\t\t\t\t\t\t$businessCategories[] = $val;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$this->departmentCache = array_values(array_unique($departments));\n\t\t$this->oCache = array_values(array_unique($os));\n\t\t$this->ouCache = array_values(array_unique($ous));\n\t\t$this->titleCache = array_values(array_unique($titles));\n\t\t$this->employeeTypeCache = array_values(array_unique($employeeTypes));\n\t\t$this->businessCategoryCache = array_values(array_unique($businessCategories));\n\t}\n\n\t/**\n\t * Returns if the attribute is read-only in admin interface.\n\t *\n\t * @param String $attrName attribute name\n\t * @return boolean attribute is read-only\n\t */\n\tprivate function isAdminReadOnly($attrName) {\n\t\t// for new accounts all fields can be edited\n\t\tif ($this->getAccountContainer()->isNewAccount) {\n\t\t\treturn false;\n\t\t}\n\t\treturn $this->isBooleanConfigOptionSet('inetOrgPerson_readOnly_' . $attrName);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see baseModule::get_configOptions()\n\t */\n\tpublic function get_configOptions($scopes, $allScopes) {\n\t\t$configContainer = new htmlResponsiveRow();\n\t\tif (isset($_SESSION['conf_config'])) {\n\t\t\t// add password hash type if posixAccount is inactive\n\t\t\t$unixModuleFound = false;\n\t\t\t$typeManager = new TypeManager($_SESSION['conf_config']);\n\t\t\t$types = $typeManager->getConfiguredTypesForScopes(array('user', 'group'));\n\t\t\tforeach ($types as $type) {\n\t\t\t\t$modules = $type->getModules();\n\t\t\t\tif (in_array('posixAccount', $modules) || in_array('posixGroup', $modules)) {\n\t\t\t\t\t$unixModuleFound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!$unixModuleFound) {\n\t\t\t\t$optionsSelected = array('CRYPT-SHA512');\n\t\t\t\t$hashOption = new htmlResponsiveSelect('posixAccount_pwdHash', getSupportedHashTypes(), $optionsSelected, _(\"Password hash type\"), 'pwdHash');\n\t\t\t\t$configContainer->add($hashOption, 12);\n\t\t\t}\n\t\t}\n\t\t$configContainerHead = new htmlGroup();\n\t\t$configContainerHead->addElement(new htmlOutputText(_('Hidden options')));\n\t\t$configContainerHead->addElement(new htmlHelpLink('hiddenOptions'));\n\t\t$configContainer->add($configContainerHead, 12);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideDescription', false, _('Description'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideStreet', false, _('Street'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hidePostOfficeBox', false, _('Post office box'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hidePostalCode', false, _('Postal code'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideLocation', false, _('Location'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideState', false, _('State'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hidePostalAddress', false, _('Postal address'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideRegisteredAddress', false, _('Registered address'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideOfficeName', false, _('Office name'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideRoomNumber', false, _('Room number'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideTelephoneNumber', false, _('Telephone number'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideHomeTelephoneNumber', false, _('Home telephone number'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideMobileNumber', false, _('Mobile number'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideFaxNumber', false, _('Fax number'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hidePager', true, _('Pager'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideEMailAddress', false, _('Email address'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideJobTitle', false, _('Job title'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideCarLicense', false, _('Car license'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideEmployeeType', false, _('Employee type'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideBusinessCategory', false, _('Business category'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideDepartments', false, _('Department'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideManager', false, _('Manager'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideOu', false, _('Organisational unit'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideO', false, _('Organisation'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideEmployeeNumber', false, _('Employee number'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideInitials', false, _('Initials'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideLabeledURI', false, _('Web site'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideuserCertificate', false, _('User certificates'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hidejpegPhoto', false, _('Photo'), null, true), 12, 4);\n\t\tif (isset($_SESSION['conf_config'])) {\n\t\t\t$confActiveUserModules = $_SESSION['conf_config']->get_AccountModules('user');\n\t\t\tif (!in_array('sambaSamAccount', $confActiveUserModules)) {\n\t\t\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hidedisplayName', true, _('Display name'), null, true), 12, 4);\n\t\t\t}\n\t\t\t// option to hide uid\n\t\t\tif (!in_array('posixAccount', $confActiveUserModules)) {\n\t\t\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideUID', false, _('User name'), null, true), 12, 4);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$configContainer->add(new htmlOutputText(''), 0, 4);\n\t\t\t}\n\t\t}\n\t\t$configContainer->addVerticalSpacer('1rem');\n\t\t$advancedOptions = new htmlResponsiveRow();\n\t\t$advancedOptions->add(new htmlResponsiveInputCheckbox('inetOrgPerson_addAddressbook', false, _('Add addressbook (ou=addressbook)'), 'addAddressbook'), 12);\n\t\t$advancedOptions->add(new htmlSubTitle(_('Read-only fields')), 12);\n\t\t$readOnlyOptions = array(\n\t\t\t_('Description') => 'inetOrgPerson_readOnly_description', _('Street') => 'inetOrgPerson_readOnly_street',\n\t\t\t_('First name') => 'inetOrgPerson_readOnly_givenName', _('Last name') => 'inetOrgPerson_readOnly_sn',\n\t\t\t_('Post office box') => 'inetOrgPerson_readOnly_postOfficeBox', _('Postal code') => 'inetOrgPerson_readOnly_postalCode',\n\t\t\t_('Location') => 'inetOrgPerson_readOnly_l', _('State') => 'inetOrgPerson_readOnly_st',\n\t\t\t_('Postal address') => 'inetOrgPerson_readOnly_postalAddress', _('Registered address') => 'inetOrgPerson_readOnly_registeredAddress',\n\t\t\t_('Office name') => 'inetOrgPerson_readOnly_physicalDeliveryOfficeName', _('Room number') => 'inetOrgPerson_readOnly_roomNumber',\n\t\t\t_('Telephone number') => 'inetOrgPerson_readOnly_telephoneNumber', _('Home telephone number') => 'inetOrgPerson_readOnly_homePhone',\n\t\t\t_('Mobile number') => 'inetOrgPerson_readOnly_mobile', _('Fax number') => 'inetOrgPerson_readOnly_facsimileTelephoneNumber',\n\t\t\t_('Pager') => 'inetOrgPerson_readOnly_pager', _('Email address') => 'inetOrgPerson_readOnly_mail',\n\t\t\t_('Web site') => 'inetOrgPerson_readOnly_labeledURI', _('Job title') => 'inetOrgPerson_readOnly_title',\n\t\t\t_('Car license') => 'inetOrgPerson_readOnly_carLicense', _('Employee type') => 'inetOrgPerson_readOnly_employeeType',\n\t\t\t_('Business category') => 'inetOrgPerson_readOnly_businessCategory',\n\t\t\t_('Department') => 'inetOrgPerson_readOnly_departmentNumber', _('Manager') => 'inetOrgPerson_readOnly_manager',\n\t\t\t_('Organisation') => 'inetOrgPerson_readOnly_o', _('Organisational unit') => 'inetOrgPerson_readOnly_ou',\n\t\t\t_('Employee number') => 'inetOrgPerson_readOnly_employeeNumber', _('Initials') => 'inetOrgPerson_readOnly_initials',\n\t\t\t_('Photo') => 'inetOrgPerson_readOnly_jpegPhoto', _('Password') => 'inetOrgPerson_readOnly_userPassword'\n\t\t);\n\t\tif (isset($_SESSION['conf_config'])) {\n\t\t\t$readOnlyOptions[_('User name')] = 'inetOrgPerson_readOnly_uid';\n\t\t\t$readOnlyOptions[_('Common name')] = 'inetOrgPerson_readOnly_cn';\n\t\t}\n\t\tksort($readOnlyOptions);\n\t\tforeach ($readOnlyOptions as $label => $id) {\n\t\t\t$advancedOptions->add(new htmlResponsiveInputCheckbox($id, false, $label, null, true), 12, 4);\n\t\t}\n\t\t$advancedOptions->add(new htmlSubTitle(_('Photo')), 12);\n\t\t$advancedOptions->add(new htmlResponsiveInputField(_('Maximum width (px)'), 'inetOrgPerson_jpegPhoto_maxWidth', null, 'crop'), 12);\n\t\t$advancedOptions->add(new htmlResponsiveInputField(_('Maximum height (px)'), 'inetOrgPerson_jpegPhoto_maxHeight', null, 'crop'), 12);\n\t\t$advancedOptions->add(new htmlResponsiveInputField(_('Maximum file size (kB)'), 'inetOrgPerson_jpegPhoto_maxSize'), 12);\n\t\t$advancedOptionsAccordion = new htmlAccordion('inetOrgPersonAdvancedOptions', array(_('Advanced options') => $advancedOptions), false);\n\t\t$configContainer->add($advancedOptionsAccordion, 12);\n\t\treturn $configContainer;\n\t}\n\n\t/**\n\t * Checks if the given email address already exists in LDAP.\n\t *\n\t * @param String $mail email address\n\t * @return boolean true if already exists\n\t */\n\tprivate function emailExists($mail) {\n\t\tif (empty($mail)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (isset($this->emailCheckCache[$mail])) {\n\t\t\treturn $this->emailCheckCache[$mail];\n\t\t}\n\t\t$result = searchLDAPByAttribute('mail', $mail, 'inetOrgPerson', array('dn'), array('user'));\n\t\t$this->emailCheckCache[$mail] = (sizeof($result) > 0);\n\t\treturn $this->emailCheckCache[$mail];\n\t}\n\n\t/**\n\t * Returns if the Unix module is also active.\n\t *\n\t * @param string[] $modules active account mdules\n\t * @return boolean Unix is active\n\t */\n\tprivate function isUnixActive($modules = null) {\n\t\tif (!empty($modules)) {\n\t\t\treturn in_array('posixAccount', $modules);\n\t\t}\n\t\tif ($this->getAccountContainer() == null) {\n\t\t\treturn false;\n\t\t}\n\t\t$modules = $this->getAccountContainer()->get_type()->getModules();\n\t\treturn in_array('posixAccount', $modules);\n\t}\n\n\t/**\n\t * Returns if the Samba 3 module is also active.\n\t *\n\t * @param string[] $modules active account mdules\n\t * @return boolean Samba 3 is active\n\t */\n\tprivate function isSamba3Active($modules = null) {\n\t\tif (!empty($modules)) {\n\t\t\treturn in_array('sambaSamAccount', $modules);\n\t\t}\n\t\tif ($this->getAccountContainer() == null) {\n\t\t\treturn false;\n\t\t}\n\t\t$modules = $this->getAccountContainer()->get_type()->getModules();\n\t\treturn in_array('sambaSamAccount', $modules);\n\t}\n\n\t/**\n\t * {@inheritdoc}\n\t */\n\tpublic function getWildCardReplacements() {\n\t\t$replacements = array();\n\t\t// first name\n\t\tif (!empty($_POST['givenName'])) {\n\t\t\t$replacements['firstname'] = $_POST['givenName'];\n\t\t}\n\t\telseif (!empty($this->attributes['givenName'][0])) {\n\t\t\t$replacements['firstname'] = $this->attributes['givenName'][0];\n\t\t}\n\t\t// last name\n\t\tif (!empty($_POST['sn'])) {\n\t\t\t$replacements['lastname'] = $_POST['sn'];\n\t\t}\n\t\telseif (!empty($this->attributes['sn'][0])) {\n\t\t\t$replacements['lastname'] = $this->attributes['sn'][0];\n\t\t}\n\t\t// user name\n\t\tif (!$this->isUnixActive()) {\n\t\t\tif (!empty($_POST['uid'])) {\n\t\t\t\t$replacements['user'] = $_POST['uid'];\n\t\t\t}\n\t\t\telseif (!empty($this->attributes['uid'][0])) {\n\t\t\t\t$replacements['user'] = $this->attributes['uid'][0];\n\t\t\t}\n\t\t}\n\t\t// cn\n\t\tif (!empty($_POST['cn_0'])) {\n\t\t\t$replacements['commonname'] = $_POST['cn_0'];\n\t\t}\n\t\telseif (!empty($this->attributes['cn'][0])) {\n\t\t\t$replacements['commonname'] = $this->attributes['cn'][0];\n\t\t}\n\t\t// mail\n\t\tif (!empty($_POST['mail_0'])) {\n\t\t\t$replacements['email'] = $_POST['mail_0'];\n\t\t}\n\t\telseif (!empty($this->attributes['mail'][0])) {\n\t\t\t$replacements['email'] = $this->attributes['mail'][0];\n\t\t}\n\t\treturn $replacements;\n\t}\n\n\t/**\n\t * Returns if the password of the current account is locked.\n\t *\n\t * @param ?array $attributes LDAP attribute data\n\t * @return bool password is locked\n\t */\n\tpublic function isLocked(?array $attributes = null): bool {\n\t\tif ($attributes === null) {\n\t\t\t$attributes = array_change_key_case($this->attributes, CASE_LOWER);\n\t\t}\n\t\treturn isset($attributes['userpassword'][0])\n\t\t\t&& !pwd_is_enabled($attributes['userpassword'][0]);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function supportsPasswordQuickChangePage(): bool {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function addPasswordQuickChangeAccountDetails(htmlResponsiveRow $row): void {\n\t\tif (!$this->isUnixActive() && !empty($this->attributes['uid'][0])) {\n\t\t\t$row->addLabel(new htmlOutputText(_('User name')));\n\t\t\t$row->addField(new htmlOutputText($this->attributes['uid'][0]));\n\t\t}\n\t\t$nameParts = array();\n\t\tif (isset($this->attributes['givenName'][0])) {\n\t\t\t$nameParts[] = $this->attributes['givenName'][0];\n\t\t}\n\t\tif (isset($this->attributes['sn'][0])) {\n\t\t\t$nameParts[] = $this->attributes['sn'][0];\n\t\t}\n\t\tif (!empty($nameParts)) {\n\t\t\t$row->addLabel(new htmlOutputText(_('Full name')));\n\t\t\t$row->addField(new htmlOutputText(implode(' ', $nameParts)));\n\t\t}\n\t\tif (!empty($this->attributes['mail'][0])) {\n\t\t\t$row->addLabel(new htmlOutputText(_('Email address')));\n\t\t\t$row->addField(new htmlOutputText($this->attributes['mail'][0]));\n\t\t}\n\t\tif (!empty($this->attributes['telephoneNumber'][0])) {\n\t\t\t$row->addLabel(new htmlOutputText(_('Telephone number')));\n\t\t\t$row->addField(new htmlOutputText($this->attributes['telephoneNumber'][0]));\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPasswordQuickChangeOptions(): array {\n\t\tif ($this->isUnixActive() && in_array_ignore_case('posixAccount', $this->attributes['objectClass'])) {\n\t\t\treturn array();\n\t\t}\n\t\tif (!in_array_ignore_case('inetOrgPerson', $this->attributes['objectClass'])) {\n\t\t\treturn array();\n\t\t}\n\t\treturn array(\n\t\t\tnew PasswordQuickChangeOption('updateUnixPwd', _('Change password'))\n\t\t);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPasswordQuickChangeChanges(string $password): array {\n\t\tif ($this->isUnixActive() && in_array_ignore_case('posixAccount', $this->attributes['objectClass'])) {\n\t\t\treturn array();\n\t\t}\n\t\tif (!in_array_ignore_case('inetOrgPerson', $this->attributes['objectClass'])) {\n\t\t\treturn array();\n\t\t}\n\t\t$attrs = array();\n\t\tif (isset($_POST['updateUnixPwd'])) {\n\t\t\t$hashType = $this->moduleSettings['posixAccount_pwdHash'][0];\n\t\t\tif ($hashType === 'LDAP_EXOP') {\n\t\t\t\t$this->clearTextPassword = $password;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$attrs['userpassword'][0] = pwd_hash($password, true, $hashType);\n\t\t\t}\n\t\t}\n\t\treturn $attrs;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPasswordQuickChangePasswordStrengthUserName(): ?string {\n\t\tif (isset($this->attributes['uid'][0])) {\n\t\t\treturn $this->attributes['uid'][0];\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPasswordQuickChangePasswordStrengthAttributes(): array {\n\t\t$values = array();\n\t\tif (isset($this->attributes['sn'][0])) {\n\t\t\t$values[] = $this->attributes['sn'][0];\n\t\t}\n\t\tif (isset($this->attributes['givenName'][0])) {\n\t\t\t$values[] = $this->attributes['givenName'][0];\n\t\t}\n\t\treturn $values;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPasswordQuickChangeIsPasswordInHistory(string $password): bool {\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getAccountStatusDetails(ConfiguredType $type, ?array &$attributes): array {\n\t\tif ($this->isUnixActive($type->getModules())) {\n\t\t\treturn array();\n\t\t}\n\t\tif ($attributes === null) {\n\t\t\t$attributes = $this->attributes;\n\t\t}\n\t\t$details = array();\n\t\tif (self::isLocked($attributes)) {\n\t\t\t$details[] = AccountStatusDetails::newLocked(_('Personal'), self::STATUS_PASSWORD_LOCKED);\n\t\t}\n\t\treturn $details;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getAccountStatusRequiredAttributes(ConfiguredType $type): array {\n\t\tif ($this->isUnixActive($type->getModules())) {\n\t\t\treturn array();\n\t\t}\n\t\treturn array('userpassword');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getAccountStatusPossibleLockOptions(ConfiguredType $type, ?array &$attributes): array {\n\t\tif ($this->isUnixActive($type->getModules())) {\n\t\t\treturn array();\n\t\t}\n\t\tif ($attributes === null) {\n\t\t\t$attributes = $this->attributes;\n\t\t}\n\t\t$options = array();\n\t\tif (!self::isLocked($attributes) && isset($attributes['userpassword'][0]) && pwd_is_lockable($attributes['userpassword'][0])) {\n\t\t\t$options[] = AccountStatusDetails::newLocked(_('Personal'), self::STATUS_PASSWORD_LOCKED);\n\t\t}\n\t\treturn $options;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function accountStatusPerformLock(ConfiguredType $type, ?array &$attributes, array $lockIds): void {\n\t\tif ($this->isUnixActive($type->getModules())) {\n\t\t\treturn;\n\t\t}\n\t\tif ($attributes === null) {\n\t\t\t$attributes = &$this->attributes;\n\t\t}\n\t\tif (in_array(self::STATUS_PASSWORD_LOCKED, $lockIds)) {\n\t\t\t$attributes['userpassword'][0] = pwd_disable($attributes['userpassword'][0]);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function accountStatusPerformUnlock(ConfiguredType $type, ?array &$attributes, array $lockIds): void {\n\t\tif ($this->isUnixActive($type->getModules())) {\n\t\t\treturn;\n\t\t}\n\t\tif ($attributes === null) {\n\t\t\t$attributes = &$this->attributes;\n\t\t}\n\t\tif (in_array(self::STATUS_PASSWORD_LOCKED, $lockIds)) {\n\t\t\t$attributes['userpassword'][0] = pwd_enable($attributes['userpassword'][0]);\n\t\t}\n\t}\n\n}\n", "<?php\nnamespace LAM\\PDF;\n\nuse \\htmlStatusMessage;\nuse LAM\\PERSISTENCE\\ConfigurationDatabase;\nuse LAM\\TYPES\\TypeManager;\nuse LAMCfgMain;\nuse LAMConfig;\nuse \\LAMException;\nuse \\LAM\\ImageUtils\\ImageManipulationFactory;\nuse PDO;\nuse ServerProfilePersistenceManager;\nuse XMLReader;\nuse XMLWriter;\nuse function LAM\\PERSISTENCE\\dbTableExists;\n\n/*\n  This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)\n  Copyright (C) 2003 - 2006  Michael Duergner\n                2011 - 2021  Roland Gruber\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\n/**\n * Functions to manage the PDF structures.\n *\n * @author Michael Duergner\n * @package PDF\n */\n\n/** LAM configuration */\ninclude_once(__DIR__ . \"/config.inc\");\n\n/**\n * Use as server profile name to manage global templates.\n */\nconst GLOBAL_PROFILE = '__GLOBAL__';\n\n/** LDAP object */\ninclude_once(__DIR__ . \"/ldap.inc\");\n\n/**\n * Manages the persistence of PDF structures.\n *\n * @package LAM\\PDF\n */\nclass PdfStructurePersistenceManager {\n\n\t/**\n\t * @var PdfStructurePersistenceStrategy\n\t */\n\tprivate $strategy;\n\n\t/**\n\t * Constructor\n\t */\n\tpublic function __construct() {\n\t\t$configDb = new ConfigurationDatabase(new LAMCfgMain());\n\t\tif ($configDb->useRemoteDb()) {\n\t\t\t$this->strategy = new PdfStructurePersistenceStrategyPdo($configDb->getPdo());\n\t\t} else {\n\t\t\t$this->strategy = new PdfStructurePersistenceStrategyFiles();\n\t\t}\n\t}\n\n\t/**\n\t * Returns the names of existing PDF structure templates.\n\t *\n\t * @return array scope => names (e.g. array('user' => array('default')))\n\t * @throws LAMException error reading templates\n\t */\n\tpublic function getPdfStructureTemplateNames() : array {\n\t\treturn $this->strategy->getPdfStructureTemplateNames();\n\t}\n\n\t/**\n\t * Deletes an PDF structure template.\n\t *\n\t * @param string $scope user/group/host\n\t * @param string $name PDF structure name\n\t * @throws LAMException error deleting template\n\t */\n\tpublic function deletePdfStructureTemplate(string $scope, string $name) : void {\n\t\tif (!$this->isValidPdfStructureName($name) || !TypeManager::isValidTypeId($scope) || ($name == 'default')) {\n\t\t\tlogNewMessage(LOG_NOTICE, \"Invalid account profile name: $name:$scope\");\n\t\t\tthrow new LAMException(_(\"Unable to delete profile!\"));\n\t\t}\n\t\t$this->strategy->deletePdfStructureTemplate($scope, $name);\n\t}\n\n\t/**\n\t * Reads a PDF structure template.\n\t *\n\t * @param string $scope user/group/host\n\t * @param string $name structure name\n\t * @return PDFStructure PDF structure\n\t * @throws LAMException error deleting structure\n\t */\n\tpublic function readPdfStructureTemplate(string $scope, string $name) : PDFStructure {\n\t\tif (!TypeManager::isValidTypeId($scope) || !$this->isValidPDFStructureName($name)) {\n\t\t\tthrow new LAMException(_('Unable to read PDF structure.'));\n\t\t}\n\t\treturn $this->strategy->readPdfStructureTemplate($scope, $name);\n\t}\n\n\t/**\n\t * Saves the PDF structure.\n\t *\n\t * @param string $scope user/group/host\n\t * @param string $name structure name\n\t * @param PDFStructure $structure structure\n\t * @throws LAMException error saving structure\n\t */\n\tpublic function savePdfStructureTemplate(string $scope, string $name, PDFStructure $structure) : void {\n\t\tif (!TypeManager::isValidTypeId($scope) || !$this->isValidPDFStructureName($name)) {\n\t\t\tthrow new LAMException(_('PDF structure name not valid'));\n\t\t}\n\t\t$this->strategy->savePdfStructureTemplate($scope, $name, $structure);\n\t}\n\n\t/**\n\t * Returns a list of template logo file names.\n\t *\n\t * @return string[] logo file names\n\t */\n\tpublic function getPdfTemplateLogoNames() : array {\n\t\treturn $this->strategy->getPdfTemplateLogoNames();\n\t}\n\n\t/**\n\t * Returns the binary data for the given template logo.\n\t *\n\t * @param string $name file name\n\t * @return string binary\n\t * @throws LAMException error reading file\n\t */\n\tpublic function getPdfTemplateLogoBinary(string $name) : string {\n\t\tif (!$this->isValidLogoFileName($name)) {\n\t\t\tthrow new LAMException(_('Unable to read logo file.'));\n\t\t}\n\t\treturn $this->strategy->getPdfTemplateLogoBinary($name);\n\t}\n\n\t/**\n\t * Deletes a logo in global templates.\n\t *\n\t * @param string $name logo name\n\t * @throws LAMException error during deletion\n\t */\n\tpublic function deletePdfTemplateLogo(string $name) : void {\n\t\tif (!$this->isValidLogoFileName($name)) {\n\t\t\tthrow new LAMException(_('Unable to delete logo file.'));\n\t\t}\n\t\t$this->strategy->deletePdfTemplateLogo($name);\n\t}\n\n\t/**\n\t * Saves the template logo.\n\t *\n\t * @param string $name file name\n\t * @param string $data binary data\n\t * @throws LAMException error during save\n\t */\n\tpublic function savePdfTemplateLogo(string $name, string $data) : void {\n\t\tif (!$this->isValidLogoFileName($name)) {\n\t\t\tthrow new LAMException(_('Unable to upload logo file.'));\n\t\t}\n\t\t$this->strategy->savePdfTemplateLogo($name, $data);\n\t}\n\n\t/**\n\t * Returns the list of available PDF logos.\n\t *\n\t * @param string $confName server profile name\n\t * @param bool $readDimensions reads the image dimensions\n\t * @return PdfLogo[] logos\n\t * @throws LAMException error reading logos\n\t */\n\tpublic function getPdfLogos(string $confName, bool $readDimensions = false) : array {\n\t\tif (!LAMConfig::isValidName($confName)) {\n\t\t\tthrow new LAMException(_('Unable to read logos.'));\n\t\t}\n\t\t$logoNames = $this->strategy->getPdfLogoNames($confName);\n\t\tsort($logoNames);\n\t\t$result = array();\n\t\tif ($readDimensions) {\n\t\t\tinclude_once __DIR__ . '/imageutils.inc';\n\t\t}\n\t\tforeach ($logoNames as $logoName) {\n\t\t\tif ($readDimensions) {\n\t\t\t\t$binary = $this->getPdfLogoBinary($confName, $logoName);\n\t\t\t\t$imageManipulator = ImageManipulationFactory::getImageManipulator($binary);\n\t\t\t\t$result[] = new PdfLogo($logoName, $imageManipulator->getHeight(), $imageManipulator->getWidth());\n\t\t\t\t$imageManipulator = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$result[] = new PdfLogo($logoName);\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\t/**\n\t * Reads a PDF logo.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $name file name\n\t * @return string binary data\n\t * @throws LAMException error reading logo\n\t */\n\tpublic function getPdfLogoBinary(string $confName, string $name) : string {\n\t\tif (!LAMConfig::isValidName($confName) || !$this->isValidLogoFileName($name)) {\n\t\t\tthrow new LAMException(_('Unable to read logo file.'));\n\t\t}\n\t\treturn $this->strategy->getPdfLogoBinary($confName, $name);\n\t}\n\n\t/**\n\t * Deletes a PDF logo.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $name logo name\n\t * @throws LAMException error deleting logo\n\t */\n\tpublic function deletePdfLogo(string $confName, string $name) : void {\n\t\tif (!LAMConfig::isValidName($confName) || !$this->isValidLogoFileName($name)) {\n\t\t\tthrow new LAMException(_('Unable to delete logo file.'));\n\t\t}\n\t\t// check if existing\n\t\t$found = false;\n\t\t$logos = $this->getPdfLogos($confName);\n\t\tforeach ($logos as $logo) {\n\t\t\tif ($logo->getName() === $name) {\n\t\t\t\t$found = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!$found) {\n\t\t\tthrow new LAMException(_('File does not exist.'), htmlspecialchars($name));\n\t\t}\n\t\t// check if still in use\n\t\t$typeManager = new TypeManager();\n\t\t$activeTypes = $typeManager->getConfiguredTypes();\n\t\tforeach ($activeTypes as $type) {\n\t\t\t$structures = $this->getPDFStructures($confName, $type->getId());\n\t\t\tforeach ($structures as $structure) {\n\t\t\t\t$data = $this->readPdfStructure($confName, $type->getId(), $structure);\n\t\t\t\tif ($data->getLogo() == $name) {\n\t\t\t\t\tthrow new LAMException(_('Unable to delete logo file.'),\n\t\t\t\t\t\tsprintf(_('Logo is still in use by PDF structure \"%s\" in account type \"%s\".'), $structure, $type->getAlias()));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$this->strategy->deletePdfLogo($confName, $name);\n\t}\n\n\t/**\n\t * Saves a PDF logo.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $name logo name\n\t * @param string $data binary\n\t * @throws LAMException error saving logo\n\t */\n\tpublic function savePdfLogo(string $confName, string $name, string $data) : void {\n\t\tif (!LAMConfig::isValidName($confName) || !$this->isValidLogoFileName($name)) {\n\t\t\tthrow new LAMException(_('Unable to upload logo file.'));\n\t\t}\n\t\tif (!preg_match('/[a-zA-Z0-9_-]+\\\\.(png)|(jpg)/i', $name)) {\n\t\t\tthrow new LAMException(_('Unable to upload logo file.'), _('The file name must end with \".png\" or \".jpg\".'));\n\t\t}\n\t\t$this->strategy->savePdfLogo($confName, $name, $data);\n\t}\n\n\t/**\n\t * Returns all available PDF structure definitions for the submitted account type.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $typeId the account type\n\t *\n\t * @return string[] structure names\n\t * @throws LAMException error reading structures\n\t */\n\tpublic function getPDFStructures(string $confName, string $typeId) : array {\n\t\tif (!TypeManager::isValidTypeId($typeId)) {\n\t\t\tthrow new LAMException(_('Unable to read PDF structures.'));\n\t\t}\n\t\t$return = $this->strategy->getPDFStructures($confName, $typeId);\n\t\tsort($return);\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Deletes a PDF structure.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $typeId user/group/host\n\t * @param string $name structure name\n\t * @throws LAMException error deleting structure\n\t */\n\tpublic function deletePdfStructure(string $confName, string $typeId, string $name) : void {\n\t\tif (!LAMConfig::isValidName($confName) || !TypeManager::isValidTypeId($typeId) || !$this->isValidPDFStructureName($name)) {\n\t\t\tlogNewMessage(LOG_ERR, 'Invalid data: ' . $confName . ' ' . $typeId . ' ' . $name);\n\t\t\tthrow new LAMException(_('Unable to delete PDF structure!'));\n\t\t}\n\t\t$this->strategy->deletePdfStructure($confName, $typeId, $name);\n\t}\n\n\t/**\n\t * Reads a PDF structure.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $typeId user/group/host\n\t * @param string $name structure name\n\t * @return PDFStructure PDF structure\n\t * @throws LAMException error deleting structure\n\t */\n\tpublic function readPdfStructure(string $confName, string $typeId, string $name) : PDFStructure {\n\t\tif (!LAMConfig::isValidName($confName) || !TypeManager::isValidTypeId($typeId) || !$this->isValidPDFStructureName($name)) {\n\t\t\tthrow new LAMException(_('Unable to read PDF structure.'));\n\t\t}\n\t\treturn $this->strategy->readPdfStructure($confName, $typeId, $name);\n\t}\n\n\t/**\n\t * Saves the PDF structure.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $typeId user/group/host\n\t * @param string $name structure name\n\t * @param PDFStructure $structure structure\n\t * @throws LAMException error saving structure\n\t */\n\tpublic function savePdfStructure(string $confName, string $typeId, string $name, PDFStructure $structure) : void {\n\t\tif (!LAMConfig::isValidName($confName) || !TypeManager::isValidTypeId($typeId) || !$this->isValidPDFStructureName($name)) {\n\t\t\tthrow new LAMException(_('PDF structure name not valid'));\n\t\t}\n\t\t$this->strategy->savePdfStructure($confName, $typeId, $name, $structure);\n\t}\n\n\t/**\n\t * Returns if the give structure name is valid.\n\t *\n\t * @param string $name structure name\n\t * @return boolean is valid\n\t */\n\tprivate function isValidPDFStructureName(string $name) : bool {\n\t\treturn preg_match('/^[a-z0-9\\-\\_]+$/i', $name) === 1;\n\t}\n\n\t/**\n\t * Returns if the given logo file name is valid.\n\t *\n\t * @param string $fileName file name\n\t * @return bool valid\n\t */\n\tprivate function isValidLogoFileName(string $fileName) : bool {\n\t\treturn preg_match('/[a-zA-Z0-9_-]+\\\\.(png)|(jpg)/i', $fileName);\n\t}\n\n\t/**\n\t * Installs template structures to the given server profile.\n\t *\n\t * @param string $confName server profile name\n\t * @throws LAMException error during installation\n\t */\n\tpublic function installPDFTemplates(string $confName) {\n\t\tif (!LAMConfig::isValidName($confName)) {\n\t\t\tthrow new LAMException(_(\"Profile name is invalid!\"));\n\t\t}\n\t\t$serverProfilesPersistenceManager = new ServerProfilePersistenceManager();\n\t\t$config = $serverProfilesPersistenceManager->loadProfile($confName);\n\t\t$typeManager = new TypeManager($config);\n\t\t$allTemplates = $this->getPdfStructureTemplateNames();\n\t\tforeach ($typeManager->getConfiguredTypes() as $type) {\n\t\t\tif (empty($allTemplates[$type->getScope()])) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$existingStructures = $this->getPDFStructures($confName, $type->getId());\n\t\t\tforeach ($allTemplates[$type->getScope()] as $templateName) {\n\t\t\t\tif (!in_array($templateName, $existingStructures)) {\n\t\t\t\t\t$structure = $this->readPdfStructureTemplate($type->getScope(), $templateName);\n\t\t\t\t\t$this->savePdfStructure($confName, $type->getId(), $templateName, $structure);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$logos = $this->getPdfTemplateLogoNames();\n\t\t$existingLogos = $this->getPdfLogos($confName);\n\t\tforeach ($logos as $logo) {\n\t\t\tif (!in_array($logo, $existingLogos)) {\n\t\t\t\t$binary = $this->getPdfTemplateLogoBinary($logo);\n\t\t\t\t$this->savePdfLogo($confName, $logo, $binary);\n\t\t\t}\n\t\t}\n\t}\n\n}\n\n/**\n * Logo for PDF structures.\n *\n * @package LAM\\PDF\n */\nclass PdfLogo {\n\n\tprivate $name;\n\n\tprivate $height;\n\n\tprivate $width;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param string $name file name\n\t * @param int $height height\n\t * @param int $width width\n\t */\n\tpublic function __construct(string $name, int $height = 0, int $width = 0) {\n\t\t$this->name = $name;\n\t\t$this->height = $height;\n\t\t$this->width = $width;\n\t}\n\n\t/**\n\t * Returns the file name.\n\t *\n\t * @return string file name\n\t */\n\tpublic function getName(): string {\n\t\treturn $this->name;\n\t}\n\n\t/**\n\t * Returns the height.\n\t *\n\t * @return int height\n\t */\n\tpublic function getHeight(): int {\n\t\treturn $this->height;\n\t}\n\n\t/**\n\t * Returns the width.\n\t *\n\t * @return int width\n\t */\n\tpublic function getWidth(): int {\n\t\treturn $this->width;\n\t}\n\n}\n\n/**\n * Interface for PDF structure persistence.\n *\n * @package LAM\\PDF\n */\ninterface PdfStructurePersistenceStrategy {\n\n\t/**\n\t * Returns the names of existing PDF structure templates.\n\t *\n\t * @return array scope => names (e.g. array('user' => array('default')))\n\t * @throws LAMException error reading templates\n\t */\n\tpublic function getPdfStructureTemplateNames() : array;\n\n\t/**\n\t * Deletes a PDF structure template,\n\t *\n\t * @param string $scope user/group/host\n\t * @param string $name template name\n\t * @throws LAMException error deleting template\n\t */\n\tpublic function deletePdfStructureTemplate(string $scope, string $name) : void;\n\n\t/**\n\t * Reads a PDF structure template.\n\t *\n\t * @param string $scope user/group/host\n\t * @param string $name structure name\n\t * @return PDFStructure PDF structure\n\t * @throws LAMException error deleting structure\n\t */\n\tpublic function readPdfStructureTemplate(string $scope, string $name) : PDFStructure;\n\n\t/**\n\t * Saves the PDF structure.\n\t *\n\t * @param string $scope user/group/host\n\t * @param string $name structure name\n\t * @param PDFStructure $structure structure\n\t * @throws LAMException error saving structure\n\t */\n\tpublic function savePdfStructureTemplate(string $scope, string $name, PDFStructure $structure) : void;\n\n\t/**\n\t * Returns a list of template logo file names.\n\t *\n\t * @return string[] logo file names\n\t */\n\tpublic function getPdfTemplateLogoNames() : array;\n\n\t/**\n\t * Returns the binary data for the given template logo.\n\t *\n\t * @param string $name file name\n\t * @return string binary\n\t * @throws LAMException error reading file\n\t */\n\tpublic function getPdfTemplateLogoBinary(string $name) : string;\n\n\t/**\n\t * Deletes a logo in global templates.\n\t *\n\t * @param string $name logo name\n\t * @throws LAMException error during deletion\n\t */\n\tpublic function deletePdfTemplateLogo(string $name) : void;\n\n\t/**\n\t * Saves the template logo.\n\t *\n\t * @param string $name file name\n\t * @param string $data binary data\n\t * @throws LAMException error during save\n\t */\n\tpublic function savePdfTemplateLogo(string $name, string $data) : void;\n\n\t/**\n\t * Returns the list of available PDF logos.\n\t *\n\t * @param string $confName server profile name\n\t * @return string[] logos\n\t * @throws LAMException error reading logos\n\t */\n\tpublic function getPdfLogoNames(string $confName) : array;\n\n\t/**\n\t * Reads a PDF logo.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $name file name\n\t * @return string binary data\n\t * @throws LAMException error reading logo\n\t */\n\tpublic function getPdfLogoBinary(string $confName, string $name) : string;\n\n\t/**\n\t * Deletes a PDF logo.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $name logo name\n\t * @throws LAMException error deleting logo\n\t */\n\tpublic function deletePdfLogo(string $confName, string $name) : void;\n\n\t/**\n\t * Saves a PDF logo.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $name logo name\n\t * @param string $data binary\n\t * @throws LAMException error saving logo\n\t */\n\tpublic function savePdfLogo(string $confName, string $name, string $data) : void;\n\n\t/**\n\t * Returns all available PDF structure definitions for the submitted account type.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $typeId the account type\n\t *\n\t * @return string[] structure names\n\t * @throws LAMException error reading structures\n\t */\n\tpublic function getPDFStructures(string $confName, string $typeId) : array;\n\n\t/**\n\t * Deletes a PDF structure.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $typeId user/group/host\n\t * @param string $name structure name\n\t * @throws LAMException error deleting structure\n\t */\n\tpublic function deletePdfStructure(string $confName, string $typeId, string $name) : void;\n\n\t/**\n\t * Reads a PDF structure.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $typeId user/group/host\n\t * @param string $name structure name\n\t * @return PDFStructure PDF structure\n\t * @throws LAMException error deleting structure\n\t */\n\tpublic function readPdfStructure(string $confName, string $typeId, string $name) : PDFStructure;\n\n\t/**\n\t * Saves the PDF structure.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $typeId user/group/host\n\t * @param string $name structure name\n\t * @param PDFStructure $structure structure\n\t * @throws LAMException error saving structure\n\t */\n\tpublic function savePdfStructure(string $confName, string $typeId, string $name, PDFStructure $structure) : void;\n\n}\n\n/**\n * Manages PDF structures on file system.\n *\n * @package LAM\\PDF\n */\nclass PdfStructurePersistenceStrategyFiles implements PdfStructurePersistenceStrategy {\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPdfStructureTemplateNames(): array {\n\t\t$templatePath = __DIR__ . '/../config/templates/pdf';\n\t\t$templateDir = @dir($templatePath);\n\t\t$allTemplates = array();\n\t\tif ($templateDir) {\n\t\t\t$entry = $templateDir->read();\n\t\t\twhile ($entry){\n\t\t\t\t$parts = explode('.', $entry);\n\t\t\t\tif ((strlen($entry) > 3) && (sizeof($parts) == 3)) {\n\t\t\t\t\t$name = $parts[0];\n\t\t\t\t\t$scope = $parts[1];\n\t\t\t\t\t$allTemplates[$scope][] = $name;\n\t\t\t\t}\n\t\t\t\t$entry = $templateDir->read();\n\t\t\t}\n\t\t}\n\t\treturn $allTemplates;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function deletePdfStructureTemplate(string $scope, string $name): void {\n\t\t$fileName = $this-> getPdfStructureTemplateFileName($scope, $name);\n\t\t$deleted = @unlink($fileName);\n\t\tif (!$deleted) {\n\t\t\tthrow new LAMException(_(\"Unable to delete PDF structure!\"));\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function readPdfStructureTemplate(string $scope, string $name): PDFStructure {\n\t\t$fileName = $this->getPdfStructureTemplateFileName($scope, $name);\n\t\tif (!is_file($fileName) || !is_readable($fileName)) {\n\t\t\tthrow new LAMException(_('Unable to read PDF structure.'));\n\t\t}\n\t\t$handle = fopen($fileName, 'r');\n\t\t$xmlData = fread($handle, 100000000);\n\t\tfclose($handle);\n\t\t$reader = new PDFStructureReader();\n\t\treturn $reader->read($xmlData);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function savePdfStructureTemplate(string $scope, string $name, PDFStructure $structure): void {\n\t\t$fileName = $this->getPdfStructureTemplateFileName($scope, $name);\n\t\t$writer = new PDFStructureWriter();\n\t\t$xml = $writer->getXML($structure);\n\t\t$file = @fopen($fileName, \"w\");\n\t\tif (!$file) {\n\t\t\tlogNewMessage(LOG_ERR, 'Unable to write ' . $fileName);\n\t\t\tthrow new LAMException(_('Unable to save PDF structure.'));\n\t\t}\n\t\tfputs($file, $xml);\n\t\tfclose($file);\n\t}\n\n\t/**\n\t * Returns the file name for a PDF structure.\n\t *\n\t * @param string $scope user/group/host\n\t * @param string $name structure name\n\t * @return string file name\n\t */\n\tprivate function getPdfStructureTemplateFileName(string $scope, string $name) : string {\n\t\treturn __DIR__ . '/../config/templates/pdf/' . $name . '.' . $scope . '.xml';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPdfTemplateLogoNames(): array {\n\t\t$templatePath = __DIR__ . '/../config/templates/pdf/logos';\n\t\t$templateDir = @dir($templatePath);\n\t\t$logos = array();\n\t\tif ($templateDir) {\n\t\t\t$entry = $templateDir->read();\n\t\t\twhile ($entry){\n\t\t\t\tif ((strpos($entry, '.') !== 0) && is_file($templatePath . '/' . $entry)) {\n\t\t\t\t\t$logos[] = $entry;\n\t\t\t\t}\n\t\t\t\t$entry = $templateDir->read();\n\t\t\t}\n\t\t}\n\t\treturn $logos;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPdfTemplateLogoBinary(string $name): string {\n\t\t$fileName = $this->getPdfTemplateLogoFileName($name);\n\t\t$handle = fopen($fileName, 'r');\n\t\t$logoBinary = fread($handle, 100000000);\n\t\tfclose($handle);\n\t\treturn $logoBinary;\n\t}\n\n\t/**\n\t * Returns the file name of a given logo.\n\t *\n\t * @param string $name logo name\n\t * @return string file name\n\t */\n\tprivate function getPdfTemplateLogoFileName(string $name) : string {\n\t\treturn __DIR__ . '/../config/templates/pdf/logos/' . $name;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function deletePdfTemplateLogo(string $name): void {\n\t\t$fileName = $this->getPdfTemplateLogoFileName($name);\n\t\t$deleted = @unlink($fileName);\n\t\tif (!$deleted) {\n\t\t\tthrow new LAMException(_('Unable to delete logo file.'));\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function savePdfTemplateLogo(string $name, string $data): void {\n\t\t$fileName = $this->getPdfTemplateLogoFileName($name);\n\t\t$file = @fopen($fileName, \"w\");\n\t\tif (!$file) {\n\t\t\tlogNewMessage(LOG_ERR, 'Unable to write ' . $fileName);\n\t\t\tthrow new LAMException(_('Unable to upload logo file.'));\n\t\t}\n\t\tfputs($file, $data);\n\t\tfclose($file);\n\t}\n\n\t/**\n\t * Returns the file name of a given logo.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $name logo name\n\t * @return string file name\n\t */\n\tprivate function getPdfLogoFileName(string $confName, string $name) : string {\n\t\treturn __DIR__ . '/../config/pdf/' . $confName . '/logos/' . $name;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPdfLogoNames(string $confName): array {\n\t\t$return = array();\n\t\t$dirPath = __DIR__ . '/../config/pdf/' . $confName . '/logos/';\n\t\tif (!is_dir($dirPath)) {\n\t\t\tmkdir($dirPath, 0700, true);\n\t\t}\n\t\t$dirHandle = opendir($dirPath);\n\t\tif ($dirHandle === false) {\n\t\t\tthrow new LAMException(_('Unable to read logos.'));\n\t\t}\n\t\twhile ($file = readdir($dirHandle)) {\n\t\t\tif (!is_dir($file) && $file != '.' && $file != '..' && preg_match('/\\\\.(jpg|png)$/i', $file)) {\n\t\t\t\t$return[] = $file;\n\t\t\t}\n\t\t}\n\t\treturn $return;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPdfLogoBinary(string $confName, string $name): string {\n\t\t$fileName = $this->getPdfLogoFileName($confName, $name);\n\t\t$handle = fopen($fileName, 'r');\n\t\t$logoBinary = fread($handle, 100000000);\n\t\tfclose($handle);\n\t\treturn $logoBinary;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function deletePdfLogo(string $confName, string $name): void {\n\t\t// delete file\n\t\t$success = @unlink($this->getPdfLogoFileName($confName, $name));\n\t\tif (!$success) {\n\t\t\tthrow new LAMException(_('Unable to delete logo file.'), $name);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function savePdfLogo(string $confName, string $name, string $data): void {\n\t\t$fileName = $this->getPdfLogoFileName($confName, $name);\n\t\t$basePath = dirname($fileName);\n\t\tif (!file_exists($basePath)) {\n\t\t\tmkdir($basePath, 0700, true);\n\t\t}\n\t\t$file = @fopen($fileName, \"w\");\n\t\tif (!$file) {\n\t\t\tlogNewMessage(LOG_ERR, 'Unable to write ' . $fileName);\n\t\t\tthrow new LAMException(_('Unable to upload logo file.'));\n\t\t}\n\t\tfputs($file, $data);\n\t\tfclose($file);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPDFStructures(string $confName, string $typeId): array {\n\t\t$return = array();\n\t\t$path = __DIR__ . '/../config/pdf/' . $confName;\n\t\tif (is_dir($path) && is_readable($path)) {\n\t\t\t$dirHandle = opendir($path);\n\t\t\twhile($file = readdir($dirHandle)) {\n\t\t\t\t$struct_file = explode('.', $file);\n\t\t\t\tif(!is_dir($path . $file)\n\t\t\t\t\t&& ($file != '.')\n\t\t\t\t\t&& ($file != '..')\n\t\t\t\t\t&& (sizeof($struct_file) === 3)\n\t\t\t\t\t&& ($struct_file[1] === $typeId)\n\t\t\t\t\t&& ($struct_file[2] === 'xml')) {\n\t\t\t\t\tarray_push($return, $struct_file[0]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $return;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function deletePdfStructure(string $confName, string $typeId, string $name): void {\n\t\t$fileName = $this->getPdfStructureFileName($confName, $typeId, $name);\n\t\tif (!is_file($fileName) || !is_writable($fileName)) {\n\t\t\tlogNewMessage(LOG_ERR, 'PDF structure does not exist or is not writable: ' . $fileName);\n\t\t\tthrow new LAMException(_('Unable to delete PDF structure!'));\n\t\t}\n\t\t$deleteOk = @unlink($fileName);\n\t\tif (!$deleteOk) {\n\t\t\tlogNewMessage(LOG_ERR, 'PDF structure delete failed: ' . $fileName);\n\t\t\tthrow new LAMException(_('Unable to delete PDF structure!'));\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function readPdfStructure(string $confName, string $typeId, string $name): PDFStructure {\n\t\t$fileName = $this->getPdfStructureFileName($confName, $typeId, $name);\n\t\tif (!is_file($fileName) || !is_readable($fileName)) {\n\t\t\tthrow new LAMException(_('Unable to read PDF structure.'));\n\t\t}\n\t\t$handle = fopen($fileName, 'r');\n\t\t$xmlData = fread($handle, 100000000);\n\t\tfclose($handle);\n\t\t$reader = new PDFStructureReader();\n\t\treturn $reader->read($xmlData);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function savePdfStructure(string $confName, string $typeId, string $name, PDFStructure $structure): void {\n\t\t$fileName = $this->getPdfStructureFileName($confName, $typeId, $name);\n\t\t$basePath = dirname($fileName);\n\t\tif (!file_exists($basePath)) {\n\t\t\tmkdir($basePath, 0700, true);\n\t\t}\n\t\t$writer = new PDFStructureWriter();\n\t\t$xml = $writer->getXML($structure);\n\t\t$file = @fopen($fileName, \"w\");\n\t\tif (!$file) {\n\t\t\tlogNewMessage(LOG_ERR, 'Unable to write ' . $fileName);\n\t\t\tthrow new LAMException(_('Unable to save PDF structure.'));\n\t\t}\n\t\tfputs($file, $xml);\n\t\tfclose($file);\n\t}\n\n\t/**\n\t * Returns the file name of the structure.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $typeId user/group/host\n\t * @param string $name structure name\n\t * @return string file name\n\t */\n\tprivate function getPdfStructureFileName(string $confName, string $typeId, string $name) : string {\n\t\treturn dirname(__FILE__) . '/../config/pdf/' . $confName . '/' . $name . '.' . $typeId . '.xml';\n\t}\n\n}\n\n/**\n * Manages PDF structures on file system.\n *\n * @package LAM\\PDF\n */\nclass PdfStructurePersistenceStrategyPdo implements PdfStructurePersistenceStrategy {\n\n\tconst TABLE_NAME = 'pdf_structures';\n\tconst TABLE_NAME_LOGOS = 'pdf_logos';\n\tconst TABLE_NAME_TEMPLATES = 'pdf_structures_templates';\n\tconst TABLE_NAME_TEMPLATES_LOGOS = 'pdf_logos_templates';\n\n\t/**\n\t * @var PDO\n\t */\n\tprivate $pdo;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param PDO $pdo PDO\n\t */\n\tpublic function __construct(PDO $pdo) {\n\t\t$this->pdo = $pdo;\n\t\t$this->checkSchema();\n\t}\n\n\t/**\n\t * Checks if the schema has latest version.\n\t */\n\tprivate function checkSchema() : void {\n\t\tif (!dbTableExists($this->pdo, self::TABLE_NAME)) {\n\t\t\t$this->createInitialSchema();\n\t\t}\n\t}\n\n\t/**\n\t * Creates the initial schema.\n\t */\n\tpublic function createInitialSchema() : void {\n\t\tlogNewMessage(LOG_DEBUG, 'Creating database table ' . self::TABLE_NAME);\n\t\t$sql = 'create table ' . self::TABLE_NAME . '('\n\t\t\t. 'position int NOT NULL,'\n\t\t\t. 'confname VARCHAR(300) NOT NULL,'\n\t\t\t. 'typeid VARCHAR(300) NOT NULL,'\n\t\t\t. 'name VARCHAR(300) NOT NULL,'\n\t\t\t. 'data TEXT NOT NULL,'\n\t\t\t. 'PRIMARY KEY(position)'\n\t\t\t. ');';\n\t\t$this->pdo->exec($sql);\n\t\tlogNewMessage(LOG_DEBUG, 'Creating database table ' . self::TABLE_NAME_TEMPLATES);\n\t\t$sql = 'create table ' . self::TABLE_NAME_TEMPLATES . '('\n\t\t\t. 'scope VARCHAR(100) NOT NULL,'\n\t\t\t. 'name VARCHAR(300) NOT NULL,'\n\t\t\t. 'data TEXT NOT NULL,'\n\t\t\t. 'PRIMARY KEY(scope,name)'\n\t\t\t. ');';\n\t\t$this->pdo->exec($sql);\n\t\tlogNewMessage(LOG_DEBUG, 'Creating database table ' . self::TABLE_NAME_LOGOS);\n\t\t$sql = 'create table ' . self::TABLE_NAME_LOGOS . '('\n\t\t\t. 'confname VARCHAR(300) NOT NULL,'\n\t\t\t. 'name VARCHAR(300) NOT NULL,'\n\t\t\t. 'data LONGBLOB NOT NULL,'\n\t\t\t. 'PRIMARY KEY(confname,name)'\n\t\t\t. ');';\n\t\t$this->pdo->exec($sql);\n\t\tlogNewMessage(LOG_DEBUG, 'Creating database table ' . self::TABLE_NAME_TEMPLATES_LOGOS);\n\t\t$sql = 'create table ' . self::TABLE_NAME_TEMPLATES_LOGOS . '('\n\t\t\t. 'name VARCHAR(300) NOT NULL,'\n\t\t\t. 'data LONGBLOB NOT NULL,'\n\t\t\t. 'PRIMARY KEY(name)'\n\t\t\t. ');';\n\t\t$this->pdo->exec($sql);\n\t\t$sql = 'insert into ' . ConfigurationDatabase::TABLE_SCHEMA_VERSIONS . ' (name, version) VALUES (\"pdf_structures\", 1);';\n\t\t$this->pdo->exec($sql);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPdfStructureTemplateNames(): array {\n\t\t$statement = $this->pdo->prepare(\"SELECT scope, name FROM \" . self::TABLE_NAME_TEMPLATES);\n\t\t$statement->execute();\n\t\t$results = $statement->fetchAll();\n\t\t$profiles = array();\n\t\tforeach ($results as $result) {\n\t\t\t$profiles[$result['scope']][] = $result['name'];\n\t\t}\n\t\treturn $profiles;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function deletePdfStructureTemplate(string $scope, string $name): void {\n\t\t$statement = $this->pdo->prepare(\"DELETE FROM \" . self::TABLE_NAME_TEMPLATES . \" WHERE scope = ? AND name = ?\");\n\t\t$statement->execute(array($scope, $name));\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function readPdfStructureTemplate(string $scope, string $name): PDFStructure {\n\t\t$statement = $this->pdo->prepare(\"SELECT data FROM \" . self::TABLE_NAME_TEMPLATES . ' WHERE scope = ? AND name = ?');\n\t\t$statement->execute(array($scope, $name));\n\t\t$results = $statement->fetchAll();\n\t\tif (empty($results)) {\n\t\t\tthrow new LAMException(_('Unable to read PDF structure.'));\n\t\t}\n\t\t$structure = new PDFStructure();\n\t\t$structure->import(json_decode($results[0]['data'], true));\n\t\treturn $structure;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function savePdfStructureTemplate(string $scope, string $name, PDFStructure $structure): void {\n\t\t$json = json_encode($structure->export());\n\t\t$statement = $this->pdo->prepare(\"SELECT name FROM \" . self::TABLE_NAME_TEMPLATES . \" WHERE scope = ? AND name = ?\");\n\t\t$statement->execute(array($scope, $name));\n\t\t$results = $statement->fetchAll();\n\t\t$isExisting = !empty($results);\n\t\tif ($isExisting) {\n\t\t\t$statement = $this->pdo->prepare(\"UPDATE \" . self::TABLE_NAME_TEMPLATES . \" SET data = ? WHERE scope = ? AND name = ?\");\n\t\t\t$statement->execute(array($json, $scope, $name));\n\t\t}\n\t\telse {\n\t\t\t$statement = $this->pdo->prepare(\"INSERT INTO \" . self::TABLE_NAME_TEMPLATES . \" (scope, name, data) VALUES (?, ?, ?)\");\n\t\t\t$statement->execute(array($scope, $name, $json));\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPdfTemplateLogoNames(): array {\n\t\t$statement = $this->pdo->prepare(\"SELECT name FROM \" . self::TABLE_NAME_TEMPLATES_LOGOS);\n\t\t$statement->execute();\n\t\t$results = $statement->fetchAll();\n\t\t$logos = array();\n\t\tforeach ($results as $result) {\n\t\t\t$logos[] = $result['name'];\n\t\t}\n\t\treturn $logos;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPdfTemplateLogoBinary(string $name): string {\n\t\t$statement = $this->pdo->prepare(\"SELECT data FROM \" . self::TABLE_NAME_TEMPLATES_LOGOS . ' WHERE name = ?');\n\t\t$statement->execute(array($name));\n\t\t$results = $statement->fetchAll();\n\t\tif (empty($results)) {\n\t\t\tthrow new LAMException(_('Unable to read logo file.'));\n\t\t}\n\t\treturn $results[0]['data'];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function deletePdfTemplateLogo(string $name): void {\n\t\t$statement = $this->pdo->prepare(\"DELETE FROM \" . self::TABLE_NAME_TEMPLATES_LOGOS . \" WHERE name = ?\");\n\t\t$statement->execute(array($name));\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function savePdfTemplateLogo(string $name, string $data): void {\n\t\t$statement = $this->pdo->prepare(\"SELECT name FROM \" . self::TABLE_NAME_TEMPLATES_LOGOS . \" WHERE name = ?\");\n\t\t$statement->execute(array($name));\n\t\t$results = $statement->fetchAll();\n\t\t$isExisting = !empty($results);\n\t\tif ($isExisting) {\n\t\t\t$statement = $this->pdo->prepare(\"UPDATE \" . self::TABLE_NAME_TEMPLATES_LOGOS . \" SET data = ? WHERE name = ?\");\n\t\t\t$statement->execute(array($data, $name));\n\t\t}\n\t\telse {\n\t\t\t$statement = $this->pdo->prepare(\"INSERT INTO \" . self::TABLE_NAME_TEMPLATES_LOGOS . \" (name, data) VALUES (?, ?)\");\n\t\t\t$statement->execute(array($name, $data));\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPdfLogoNames(string $confName): array {\n\t\t$statement = $this->pdo->prepare(\"SELECT name FROM \" . self::TABLE_NAME_LOGOS . ' WHERE confname = ?');\n\t\t$statement->execute(array($confName));\n\t\t$results = $statement->fetchAll();\n\t\t$logos = array();\n\t\tforeach ($results as $result) {\n\t\t\t$logos[] = $result['name'];\n\t\t}\n\t\treturn $logos;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPdfLogoBinary(string $confName, string $name): string {\n\t\t$statement = $this->pdo->prepare(\"SELECT data FROM \" . self::TABLE_NAME_LOGOS . ' WHERE confname = ? AND name = ?');\n\t\t$statement->execute(array($confName, $name));\n\t\t$results = $statement->fetchAll();\n\t\tif (empty($results)) {\n\t\t\tthrow new LAMException(_('Unable to read logo file.'));\n\t\t}\n\t\treturn $results[0]['data'];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function deletePdfLogo(string $confName, string $name): void {\n\t\t$statement = $this->pdo->prepare(\"DELETE FROM \" . self::TABLE_NAME_LOGOS . \" WHERE confname = ? AND name = ?\");\n\t\t$statement->execute(array($confName, $name));\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function savePdfLogo(string $confName, string $name, string $data): void {\n\t\t$statement = $this->pdo->prepare(\"SELECT name FROM \" . self::TABLE_NAME_LOGOS . \" WHERE confname = ? AND name = ?\");\n\t\t$statement->execute(array($confName, $name));\n\t\t$results = $statement->fetchAll();\n\t\t$isExisting = !empty($results);\n\t\tif ($isExisting) {\n\t\t\t$statement = $this->pdo->prepare(\"UPDATE \" . self::TABLE_NAME_LOGOS . \" SET data = ? WHERE confname = ? AND name = ?\");\n\t\t\t$statement->execute(array($data, $confName, $name));\n\t\t}\n\t\telse {\n\t\t\t$statement = $this->pdo->prepare(\"INSERT INTO \" . self::TABLE_NAME_LOGOS . \" (confname, name, data) VALUES (?, ?, ?)\");\n\t\t\t$statement->execute(array($confName, $name, $data));\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPDFStructures(string $confName, string $typeId): array {\n\t\t$statement = $this->pdo->prepare(\"SELECT name FROM \" . self::TABLE_NAME . ' WHERE confname = ? AND typeid = ?');\n\t\t$statement->execute(array($confName, $typeId));\n\t\t$results = $statement->fetchAll();\n\t\t$names = array();\n\t\tforeach ($results as $result) {\n\t\t\t$names[] = $result['name'];\n\t\t}\n\t\treturn $names;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function deletePdfStructure(string $confName, string $typeId, string $name): void {\n\t\t$statement = $this->pdo->prepare(\"DELETE FROM \" . self::TABLE_NAME . \" WHERE confname = ? AND typeid = ? AND name = ?\");\n\t\t$statement->execute(array($confName, $typeId, $name));\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function readPdfStructure(string $confName, string $typeId, string $name): PDFStructure {\n\t\t$statement = $this->pdo->prepare(\"SELECT data FROM \" . self::TABLE_NAME . ' WHERE confname = ? AND typeid = ? AND name = ?');\n\t\t$statement->execute(array($confName, $typeId, $name));\n\t\t$results = $statement->fetchAll();\n\t\tif (empty($results)) {\n\t\t\tthrow new LAMException(_('Unable to read PDF structure.'));\n\t\t}\n\t\t$structure = new PDFStructure();\n\t\t$structure->import(json_decode($results[0]['data'], true));\n\t\treturn $structure;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function savePdfStructure(string $confName, string $typeId, string $name, PDFStructure $structure): void {\n\t\t$json = json_encode($structure->export());\n\t\t$statement = $this->pdo->prepare(\"SELECT name FROM \" . self::TABLE_NAME . \" WHERE confname = ? AND typeid = ? AND name = ?\");\n\t\t$statement->execute(array($confName, $typeId, $name));\n\t\t$results = $statement->fetchAll();\n\t\t$isExisting = !empty($results);\n\t\tif ($isExisting) {\n\t\t\t$statement = $this->pdo->prepare(\"UPDATE \" . self::TABLE_NAME . \" SET data = ? WHERE confname = ? AND typeid = ? AND name = ?\");\n\t\t\t$statement->execute(array($json, $confName, $typeId, $name));\n\t\t}\n\t\telse {\n\t\t\t$positionStatement = $this->pdo->prepare(\"SELECT MAX(position) AS position FROM \" . self::TABLE_NAME);\n\t\t\t$positionStatement->execute();\n\t\t\t$positionResult = $positionStatement->fetchAll();\n\t\t\t$position = $positionResult[0]['position'] + 1;\n\t\t\t$statement = $this->pdo->prepare(\"INSERT INTO \" . self::TABLE_NAME . \" (position, confname, typeid, name, data) VALUES (?, ?, ?, ?, ?)\");\n\t\t\t$statement->execute(array($position, $confName, $typeId, $name, $json));\n\t\t}\n\t}\n\n}\n\n/**\n * Reads a PDF structure.\n *\n * @author Roland Gruber\n */\nclass PDFStructureReader {\n\n\t/**\n\t * Reads a PDF structure file.\n\t *\n\t * @param string $data XML data\n\t * @return PDFStructure structure\n\t * @throws LAMException error reading structure\n\t */\n\tpublic function read(string $data) : PDFStructure {\n\t\t$xml = new XMLReader();\n\t\t$xml->XML($data);\n\t\t$structure = new PDFStructure();\n\t\t// open <pdf>\n\t\t@$xml->read();\n\t\tif (!$xml->name == 'pdf') {\n\t\t\tlogNewMessage(LOG_ERR, 'Unknown tag name: ' . $xml->name);\n\t\t\tthrow new LAMException(_('Unable to read PDF structure.'));\n\t\t}\n\t\t$structure->setLogo($xml->getAttribute('filename'));\n\t\t$structure->setTitle($xml->getAttribute('headline'));\n\t\t$structure->setFoldingMarks($xml->getAttribute('foldingmarks'));\n\t\t$sections = array();\n\t\twhile ($xml->read()) {\n\t\t\tif (($xml->nodeType === XMLReader::SIGNIFICANT_WHITESPACE)\n\t\t\t\t\t|| (($xml->name === 'pdf') && ($xml->nodeType == XMLReader::END_ELEMENT))) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telseif ($xml->name === 'text') {\n\t\t\t\t$xml->read();\n\t\t\t\t$sections[] = new PDFTextSection($xml->value);\n\t\t\t\t$xml->read();\n\t\t\t\tif (!$xml->name === 'text') {\n\t\t\t\t\tlogNewMessage(LOG_ERR, 'Unexpected tag name: ' . $xml->name);\n\t\t\t\t\tthrow new LAMException(_('Unable to read PDF structure.'));\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif ($xml->name === 'section') {\n\t\t\t\t$sections[] = $this->readSection($xml);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlogNewMessage(LOG_ERR, 'Unexpected tag name: ' . $xml->name);\n\t\t\t\tthrow new LAMException(_('Unable to read PDF structure.'));\n\t\t\t}\n\t\t}\n\t\t$xml->close();\n\t\t$structure->setSections($sections);\n\t\treturn $structure;\n\t}\n\n\t/**\n\t * Reads a single section from XML.\n\t *\n\t * @param XMLReader $xml reader\n\t * @return PDFEntrySection section\n\t * @throws LAMException unable to parse section\n\t */\n\tprivate function readSection(XMLReader $xml) : PDFEntrySection {\n\t\t$section = new PDFEntrySection($xml->getAttribute('name'));\n\t\t$entries = array();\n\t\twhile ($xml->read()) {\n\t\t\tif (($xml->name === 'section') && ($xml->nodeType == \\XMLReader::END_ELEMENT)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telseif (($xml->nodeType === \\XMLReader::END_ELEMENT)\n\t\t\t\t\t|| ($xml->nodeType === \\XMLReader::SIGNIFICANT_WHITESPACE)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telseif ($xml->name === 'entry') {\n\t\t\t\t$entries[] = new PDFSectionEntry($xml->getAttribute('name'));\n\t\t\t}\n\t\t\telseif (!$xml->name === 'entry') {\n\t\t\t\tlogNewMessage(LOG_ERR, 'Unexpected tag name: ' . $xml->name);\n\t\t\t\tthrow new LAMException(_('Unable to read PDF structure.'));\n\t\t\t}\n\t\t}\n\t\t$section->setEntries($entries);\n\t\treturn $section;\n\t}\n\n}\n\n/**\n * Writes PDF structures to files.\n *\n * @author Roland Gruber\n */\nclass PDFStructureWriter {\n\n\t/**\n\t * Returns the generated XML.\n\t *\n\t * @param PDFStructure $structure structure\n\t * @return string XML\n\t */\n\tpublic function getXML(PDFStructure $structure) : string {\n\t\t$writer = new XMLWriter();\n\t\t$writer->openMemory();\n\t\t$writer->setIndent(true);\n\t\t$writer->setIndentString(\"\\t\");\n\t\t$writer->startElement('pdf');\n\t\t$writer->writeAttribute('filename', $structure->getLogo());\n\t\t$writer->writeAttribute('headline', $structure->getTitle());\n\t\t$writer->writeAttribute('foldingmarks', $structure->getFoldingMarks());\n\t\tforeach ($structure->getSections() as $section) {\n\t\t\tif ($section instanceof PDFTextSection) {\n\t\t\t\t$writer->startElement('text');\n\t\t\t\t$writer->text($section->getText());\n\t\t\t\t$writer->endElement();\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$writer->startElement('section');\n\t\t\t\tif ($section->isAttributeTitle()) {\n\t\t\t\t\t$writer->writeAttribute('name', '_' . $section->getPdfKey());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$writer->writeAttribute('name', $section->getTitle());\n\t\t\t\t}\n\t\t\t\tforeach ($section->getEntries() as $entry) {\n\t\t\t\t\t$writer->startElement('entry');\n\t\t\t\t\t$writer->writeAttribute('name', $entry->getKey());\n\t\t\t\t\t$writer->endElement();\n\t\t\t\t}\n\t\t\t\t$writer->endElement();\n\t\t\t}\n\t\t}\n\t\t$writer->endElement();\n\t\treturn $writer->outputMemory();\n\t}\n\n}\n\n/**\n * PDF structure\n *\n * @author Roland Gruber\n */\nclass PDFStructure {\n\n\t/** no folding marks */\n\tconst FOLDING_NONE = 'no';\n\t/** standard folding marks */\n\tconst FOLDING_STANDARD = 'standard';\n\n\tprivate $logo = null;\n\n\tprivate $title = 'LDAP Account Manager';\n\n\tprivate $foldingMarks = 'no';\n\n\tprivate $sections = array();\n\n\t/**\n\t * Returns an array representation of the structure.\n\t *\n\t * @return array export data\n\t */\n\tpublic function export() {\n\t\t$data = array();\n\t\t$data['title'] = $this->title;\n\t\t$data['foldingMarks'] = $this->foldingMarks;\n\t\t$data['logo'] = $this->logo;\n\t\t$data['sections'] = array();\n\t\tforeach($this->sections as $section) {\n\t\t\t$type = ($section instanceof PDFTextSection) ? 'text' : 'entry';\n\t\t\t$sectionData = $section->export();\n\t\t\t$data['sections'][] = array(\n\t\t\t\t'type' => $type,\n\t\t\t\t'data' => $sectionData\n\t\t\t);\n\t\t}\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Imports an array representation of the structure.\n\t *\n\t * @param array $data import data\n\t */\n\tpublic function import($data) {\n\t\tif (isset($data['title'])) {\n\t\t\t$this->title = $data['title'];\n\t\t}\n\t\tif (isset($data['foldingMarks'])) {\n\t\t\t$this->foldingMarks = $data['foldingMarks'];\n\t\t}\n\t\tif (isset($data['logo'])) {\n\t\t\t$this->logo = $data['logo'];\n\t\t}\n\t\tif (isset($data['sections'])) {\n\t\t\tforeach($data['sections'] as $section) {\n\t\t\t\tif ($section['type'] === 'text') {\n\t\t\t\t\t$this->sections[] = new PDFTextSection($section['data']);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$entrySection = new PDFEntrySection(null);\n\t\t\t\t\t$entrySection->import($section['data']);\n\t\t\t\t\t$this->sections[] = $entrySection;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the logo file path.\n\t *\n\t * @return string logo\n\t */\n\tpublic function getLogo() {\n\t\treturn $this->logo;\n\t}\n\n\t/**\n\t * Sets the logo file path.\n\t *\n\t * @param string $logo logo\n\t */\n\tpublic function setLogo($logo) {\n\t\t$this->logo = $logo;\n\t}\n\n\t/**\n\t * Returns the title.\n\t *\n\t * @return string title\n\t */\n\tpublic function getTitle() {\n\t\treturn $this->title;\n\t}\n\n\t/**\n\t * Sets the title.\n\t *\n\t * @param string $title title\n\t */\n\tpublic function setTitle($title) {\n\t\t$this->title = $title;\n\t}\n\n\t/**\n\t * Returns if to print folding marks.\n\t *\n\t * @return string print folding marks\n\t */\n\tpublic function getFoldingMarks() {\n\t\treturn $this->foldingMarks;\n\t}\n\n\t/**\n\t * Sets if to print folding marks.\n\t *\n\t * @param string $foldingMarks print folding marks\n\t */\n\tpublic function setFoldingMarks($foldingMarks) {\n\t\t$this->foldingMarks = $foldingMarks;\n\t}\n\n\t/**\n\t * Returns the sections.\n\t *\n\t * @return PDFTextSection[]|PDFEntrySection[] $sections\n\t */\n\tpublic function getSections() {\n\t\treturn $this->sections;\n\t}\n\n\t/**\n\t * Sets the sections.\n\t *\n\t * @param PDFTextSection[]|PDFEntrySection[] $sections sections\n\t */\n\tpublic function setSections($sections) {\n\t\t$this->sections = $sections;\n\t}\n\n}\n\n/**\n * Section for static text.\n *\n * @author Roland Gruber\n */\nclass PDFTextSection {\n\n\tprivate $text = '';\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param string $text text\n\t */\n\tpublic function __construct($text) {\n\t\t$this->text = $text;\n\t}\n\n\t/**\n\t * Exports the section.\n\t *\n\t * @return string text\n\t */\n\tpublic function export() {\n\t\treturn $this->getText();\n\t}\n\n\t/**\n\t * Returns the text.\n\t *\n\t * @return string text\n\t */\n\tpublic function getText() {\n\t\treturn $this->text;\n\t}\n\n}\n\n/**\n * PDF section that contains LDAP data entries.\n *\n * @author Roland Gruber\n */\nclass PDFEntrySection {\n\n\tprivate $title;\n\tprivate $entries = array();\n\n\t/**\n\t * Constructor\n\t *\n\t * @param string $title title\n\t */\n\tpublic function __construct($title) {\n\t\t$this->title = $title;\n\t}\n\n\t/**\n\t * Exports the section.\n\t *\n\t * @return array export data\n\t */\n\tpublic function export() {\n\t\t$data = array();\n\t\t$data['title'] = $this->title;\n\t\t$data['entries'] = array();\n\t\tforeach($this->getEntries() as $entry) {\n\t\t\t$data['entries'][] = $entry->getKey();\n\t\t}\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Imports the section.\n\t *\n\t * @param array $data import data\n\t */\n\tpublic function import($data) {\n\t\tif (isset($data['title'])) {\n\t\t\t$this->title = $data['title'];\n\t\t}\n\t\tif ($data['entries']) {\n\t\t\tforeach($data['entries'] as $entry) {\n\t\t\t\t$this->entries[] = new PDFSectionEntry($entry);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns if the title is an attribute value.\n\t *\n\t * @return boolean is attribute\n\t */\n\tpublic function isAttributeTitle() {\n\t\treturn (bool) preg_match('/^_([a-zA-Z0-9_-])+$/', $this->title);\n\t}\n\n\t/**\n\t * Returns the PDF key name.\n\t *\n\t * @return string PDF key name\n\t */\n\tpublic function getPdfKey() {\n\t\treturn substr($this->title, 1);\n\t}\n\n\t/**\n\t * Returns the text title.\n\t *\n\t * @return string title\n\t */\n\tpublic function getTitle() {\n\t\treturn $this->title;\n\t}\n\n\t/**\n\t * Sets the title text.\n\t *\n\t * @param string $title title\n\t */\n\tpublic function setTitle($title) {\n\t\t$this->title = $title;\n\t}\n\n\t/**\n\t * Returns the entries.\n\t *\n\t * @return PDFSectionEntry[] entries\n\t */\n\tpublic function getEntries() {\n\t\treturn $this->entries;\n\t}\n\n\t/**\n\t * Sets the entries.\n\t *\n\t * @param PDFSectionEntry[] $entries entries\n\t */\n\tpublic function setEntries($entries) {\n\t\t$this->entries = $entries;\n\t}\n\n}\n\n/**\n * Single PDF entry.\n *\n * @author Roland Gruber\n */\nclass PDFSectionEntry {\n\n\tprivate $key;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param string $key key\n\t */\n\tpublic function __construct($key) {\n\t\t$this->key = $key;\n\t}\n\n\t/**\n\t * Returns the PDF key.\n\t *\n\t * @return string $key key\n\t */\n\tpublic function getKey() {\n\t\treturn $this->key;\n\t}\n\n}\n\n/**\n * Returns a list of possible fonts.\n *\n * @return array list of fonts (description => font name)\n */\nfunction getPdfFonts() {\n\treturn array(\n\t\t'DejaVu' => 'DejaVuSerif',\n\t\t_('Chinese Traditional') => 'cid0ct',\n\t\t_('Chinese Simplified') => 'cid0cs',\n\t\t_('Japanese') => 'cid0jp',\n\t\t_('Korean') => 'cid0kr',\n\t);\n}\n", "<?php\n/*\n\n  This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)\n  Copyright (C) 2006 - 2022  Roland Gruber\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n*/\n\n/**\n* This file includes functions to perform several security checks on each page load.\n*\n* @package lib\n* @author Roland Gruber\n*/\n\n/** configuration options */\ninclude_once('config.inc');\n/** ldap connection */\ninclude_once('ldap.inc');\n/** common functions */\ninclude_once('account.inc');\n\n// check client IP address\ncheckClientIP();\n\nsetLAMHeaders();\n\n/**\n * Starts a session and sets the cookie options.\n */\nfunction lam_start_session() {\n\t$secureFlag = false;\n\tif (isset($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) === 'on') {\n\t\t$secureFlag = true;\n\t}\n\tsession_set_cookie_params(0, '/', null, $secureFlag, true);\n\tsession_start();\n}\n\n/**\n * Starts a session and checks the environment.\n * The script is stopped if one of the checks fail (timeout redirection may be overridden).\n *\n * @param boolean $redirectToLogin redirect user to login page (default: true)\n * @param boolean $initSecureData init verification data like session ID and client IP (default: false)\n * @return boolean true if all ok, false if session expired\n */\nfunction startSecureSession($redirectToLogin = true, $initSecureData = false) {\n\t// start session\n\tif (isset($_SESSION)) {\n\t\tunset($_SESSION);\n\t}\n\tif (strtolower(session_module_name()) == 'files') {\n\t\t$sessionDir = dirname(__FILE__) . \"/../sess\";\n\t\tsession_save_path($sessionDir);\n\t\t// enable garbage collection (fix for Debian based systems)\n\t\tif (@ini_get(\"session.gc_probability\") == 0) {\n\t\t\t@ini_set(\"session.gc_probability\", 1);\n\t\t}\n\t}\n\tlam_start_session();\n\t// init secure data if needed\n\tif ($initSecureData && !isset($_SESSION[\"sec_session_id\"])) {\n\t\t$_SESSION[\"sec_session_id\"] = session_id();\n\t\t$_SESSION[\"sec_client_ip\"] = $_SERVER['REMOTE_ADDR'];\n\t\t$_SESSION['sec_sessionTime'] = time();\n\t\t$_SESSION['cfgMain'] = new LAMCfgMain();\n\t}\n\t// set error reporting\n\tif (empty($_SESSION['cfgMain']) || ($_SESSION['cfgMain']->errorReporting == LAMCfgMain::ERROR_REPORTING_DEFAULT)) {\n\t\tini_set('error_reporting', 'E_ALL & ~E_NOTICE');\n\t}\n\telseif ($_SESSION['cfgMain']->errorReporting == LAMCfgMain::ERROR_REPORTING_ALL) {\n\t\tini_set('error_reporting', 'E_ALL');\n\t\tini_set('display_errors', 'On');\n\t}\n\t// check session id\n\tif (! isset($_SESSION[\"sec_session_id\"]) || ($_SESSION[\"sec_session_id\"] != session_id())) {\n\t\t// session id is invalid\n\t\tlogNewMessage(LOG_WARNING, \"Invalid session ID, access denied (\" . getClientIPForLogging() . \")\");\n\t\tif ($redirectToLogin) {\n\t\t\tlogoffAndBackToLoginPage();\n\t\t}\n\t\telse {\n\t\t\tdie();\n\t\t}\n\t}\n\t// check if client IP has not changed\n\tif (!isset($_SESSION[\"sec_client_ip\"]) || ($_SESSION[\"sec_client_ip\"] != $_SERVER['REMOTE_ADDR'])) {\n\t\t// IP is invalid\n\t\tlogNewMessage(LOG_WARNING, \"Client IP changed, access denied (\" . getClientIPForLogging() . \")\");\n\t\tdie();\n\t}\n\t// check if session time has not expired\n\tif (($_SESSION['sec_sessionTime'] + (60 * $_SESSION['cfgMain']->sessionTimeout)) > time()) {\n\t\t// ok, update time\n\t\t$_SESSION['sec_sessionTime'] = time();\n\t}\n\telseif ($redirectToLogin) {\n\t\t// session expired, logoff user\n\t\tlogoffAndBackToLoginPage();\n\t}\n\telse {\n\t\treturn false;\n\t}\n\tsetSSLCaCert();\n\treturn true;\n}\n\n/**\n * Checks if the client's IP address is on the list of allowed IPs.\n * The script is stopped if the host is not valid.\n */\nfunction checkClientIP() {\n\tif (isset($_SESSION['cfgMain'])) {\n\t\t$cfg = $_SESSION['cfgMain'];\n\t}\n\telse {\n\t\t\t$cfg = new LAMCfgMain();\n\t}\n\t$allowedHosts = $cfg->allowedHosts;\n\t$url = getCallingURL();\n\tif ((strpos($url, '/selfService/selfService') !== false) || ((strpos($url, '/misc/ajax.php?') !== false) && strpos($url, 'selfservice=1') !== false)) {\n\t\t// self service pages have separate IP list\n\t\t$allowedHosts = $cfg->allowedHostsSelfService;\n\t}\n\t// skip test if no hosts are defined\n\tif (empty($allowedHosts) || empty($_SERVER['REMOTE_ADDR'])) {\n\t\treturn;\n\t}\n\t$allowedHosts = explode(\",\", $allowedHosts);\n\t$grantAccess = false;\n\tfor ($i = 0; $i < sizeof($allowedHosts); $i++) {\n\t\t$host = $allowedHosts[$i];\n\t\t$ipRegex = '/^[0-9a-z\\\\.:\\\\*]+$/i';\n\t\tif (!preg_match($ipRegex, $host)) {\n\t\t\tcontinue;\n\t\t}\n\t\t$hostRegex = str_replace(\".\", \"\\\\.\", $host);\n\t\t$hostRegex = '/^' . str_replace(\"*\", \".*\", $hostRegex) . '$/';\n\t\t$clientIP = $_SERVER['REMOTE_ADDR'];\n\t\tif (preg_match($hostRegex, $clientIP)) {\n\t\t\t// client is allowed to access LAM\n\t\t\t$grantAccess = true;\n\t\t}\n\t}\n\t// stop script is client may not access LAM\n\tif (!$grantAccess) {\n\t\tlogNewMessage(LOG_WARNING, \"Invalid client IP, access denied (\" . getClientIPForLogging() . \")\");\n\t\tdie();\n\t}\n}\n\n/**\n * Logs off the user and displays the login page.\n *\n */\nfunction logoffAndBackToLoginPage() {\n\t// log message\n\tif (isset($_SESSION['ldap'])) {\n\t\t$ldapUser = $_SESSION['ldap']->getUserName();\n\t\tlogNewMessage(LOG_WARNING, 'Session of user ' . $ldapUser . ' expired.');\n\t\t// close LDAP connection\n\t\t@$_SESSION[\"ldap\"]->destroy();\n\t}\n\telseif (isset($_SESSION['selfService_clientDN']) || (strpos($_SERVER['REQUEST_URI'], '/selfService/') !== false)) {\n\t\tlogNewMessage(LOG_WARNING, 'Self service session of DN ' . lamDecrypt($_SESSION['selfService_clientDN'], 'SelfService') . ' expired.');\n\t}\n\t// delete key and iv in cookie\n\tif (function_exists('openssl_random_pseudo_bytes')) {\n\t\tsetcookie(\"Key\", \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", 0, \"/\", '', false, true);\n\t\tsetcookie(\"IV\", \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", 0, \"/\", '', false, true);\n\t}\n\t// link back to login page\n\t$paths = array('./', '../', '../../', '../../../', '../../../../');\n\t$page = 'login.php';\n\t$pageSuffix = '?expired=yes';\n\tif (isset($_SESSION['selfService_clientDN']) || (strpos($_SERVER['REQUEST_URI'], '/selfService/') !== false)) {\n\t\t$scope = $_GET['scope'];\n\t\t$name = $_GET['name'];\n\t\tif (!preg_match('/^[0-9a-zA-Z _-]+$/', $scope) || !preg_match('/^[0-9a-zA-Z _-]+$/', $name)) {\n\t\t\tlogNewMessage(LOG_ERR, 'GET parameters invalid: ' . $name . ' ' . $scope);\n\t\t\tdie();\n\t\t}\n\t\t$page = 'selfServiceLogin.php';\n\t\t$pageSuffix = '?expired=yes&scope=' . $scope . '&name=' . $name;\n\t}\n\tfor ($i = 0; $i < sizeof($paths); $i++) {\n\t\tif (file_exists($paths[$i] . $page)) {\n\t\t\t$page = $paths[$i] . $page;\n\t\t\tbreak;\n\t\t}\n\t}\n\t$page .= $pageSuffix;\n\techo $_SESSION['header'];\n\techo \"<title></title>\\n\";\n\techo \"</head>\\n\";\n\techo \"<body>\\n\";\n\t// print JavaScript refresh\n\techo \"<script type=\\\"text/javascript\\\">\\n\";\n\techo \"top.location.href = \\\"\" . $page . \"\\\";\\n\";\n\techo \"</script>\\n\";\n\t// print link if refresh does not work\n\techo \"<p>\\n\";\n\techo \"<a target=\\\"_top\\\" href=\\\"\" . $page . \"\\\">\" . _(\"Your session expired, click here to go back to the login page.\") . \"</a>\\n\";\n\techo \"</p>\\n\";\n\techo \"</body>\\n\";\n\techo \"</html>\\n\";\n\t// destroy session\n\tsession_destroy();\n\tunset($_SESSION);\n\tdie();\n}\n\n/**\n * Returns if debug messages are to be logged.\n *\n * @return boolean debug enabled\n */\nfunction isDebugLoggingEnabled() {\n\tif (isset($_SESSION['cfgMain'])) {\n\t\t$cfg = $_SESSION['cfgMain'];\n\t}\n\telse {\n\t\t$cfg = new LAMCfgMain();\n\t}\n\treturn $cfg->logLevel >= LOG_DEBUG;\n}\n\n/**\n * Puts a new message in the log file.\n *\n * @param string $level log level (LOG_DEBUG, LOG_NOTICE, LOG_WARNING, LOG_ERR)\n * @param string $message log message\n */\nfunction logNewMessage($level, $message) : void {\n\t$possibleLevels = array(\n\t\tLOG_DEBUG => 'DEBUG',\n\t\tLOG_NOTICE => 'NOTICE',\n\t\tLOG_WARNING => 'WARNING',\n\t\tLOG_ERR => 'ERROR');\n\tif (!in_array($level, array_keys($possibleLevels))) {\n\t\tStatusMessage('ERROR', 'Invalid log level!', $level);\n\t\treturn;\n\t}\n\tif (isset($_SESSION['cfgMain'])) {\n\t\t$cfg = $_SESSION['cfgMain'];\n\t}\n\telse {\n\t\t\t$cfg = new LAMCfgMain();\n\t\t\t$_SESSION['cfgMain'] = $cfg;\n\t}\n\t// check if logging is disabled\n\tif (($cfg->logDestination == 'NONE')\n\t\t\t// check if log level is high enough\n\t\t\t|| ($cfg->logLevel < $level)) {\n\t\treturn;\n\t}\n\t// ok to log, build log message\n\t$prefix = \"LDAP Account Manager (\" . session_id() . ' - ' . getClientIPForLogging() . ' - ' . getLamLdapUser() . \") - \" . $possibleLevels[$level] . \": \";\n\t$message = $prefix . $message;\n\t// Syslog logging\n\tif ($cfg->logDestination == 'SYSLOG') {\n\t\tsyslog($level, $message);\n\t}\n\t// remote logging\n\telseif (strpos($cfg->logDestination, 'REMOTE') === 0) {\n\t\tlamLogRemoteMessage($level, $message, $cfg);\n\t}\n\t// log to file\n\telse {\n\t\t@touch($cfg->logDestination);\n\t\tif (is_writable($cfg->logDestination)) {\n\t\t\t$file = fopen($cfg->logDestination, 'a');\n\t\t\tif ($file) {\n\t\t\t\t$timeZone = 'UTC';\n\t\t\t\t$sysTimeZone = @date_default_timezone_get();\n\t\t\t\tif (!empty($sysTimeZone)) {\n\t\t\t\t\t$timeZone = $sysTimeZone;\n\t\t\t\t}\n\t\t\t\t$time = new DateTime('now', new DateTimeZone($timeZone));\n\t\t\t\tfwrite($file, $time->format('Y-m-d H:i:s') . ': ' . $message . \"\\n\");\n\t\t\t\tfclose($file);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tStatusMessage('ERROR', 'Unable to write to log file!', $cfg->logDestination);\n\t\t}\n\t}\n}\n\n/**\n * Checks if write access to LDAP is allowed.\n *\n * @param String $scope account type (e.g. user)\n * @return boolean true, if allowed\n */\nfunction checkIfWriteAccessIsAllowed($scope = null) {\n\tif (!isset($_SESSION['config'])) {\n\t\treturn false;\n\t}\n\tif ($_SESSION['config']->getAccessLevel() >= LAMConfig::ACCESS_ALL) {\n\t\t$typeSettings = $_SESSION['config']->get_typeSettings();\n\t\tif (($scope == null)\n\t\t\t\t// check if write for this type is allowed\n\t\t\t\t|| !isset($typeSettings['readOnly_' . $scope])\n\t\t\t\t|| !$typeSettings['readOnly_' . $scope]) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n/**\n * Checks if passwords may be changed.\n *\n * @return boolean true, if allowed\n */\nfunction checkIfPasswordChangeIsAllowed() {\n\tif (!isset($_SESSION['config'])) {\n\t\treturn false;\n\t}\n\tif ($_SESSION['config']->getAccessLevel() >= LAMConfig::ACCESS_PASSWORD_CHANGE) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n/**\n * Checks if it is allowed to create new LDAP entries of the given type.\n * This also checks if general write access is enabled.\n *\n * @param String $scope account type (e.g. 'user')\n * @return boolean true, if new entries are allowed\n */\nfunction checkIfNewEntriesAreAllowed($scope) {\n\tif (!isLAMProVersion()) {\n\t\treturn true;\n\t}\n\tif (!isset($_SESSION['config']) || empty($scope)) {\n\t\treturn false;\n\t}\n\t$typeSettings = $_SESSION['config']->get_typeSettings();\n\tif (isset($typeSettings['hideNewButton_' . $scope]) && $typeSettings['hideNewButton_' . $scope]) {\n\t\treturn false;\n\t}\n\treturn checkIfWriteAccessIsAllowed();\n}\n\n/**\n * Checks if it is allowed to delete LDAP entries of the given type.\n *\n * @param String $scope account type (e.g. 'user')\n * @return boolean true, if entries may be deleted\n */\nfunction checkIfDeleteEntriesIsAllowed($scope) {\n\tif (!isLAMProVersion()) {\n\t\treturn true;\n\t}\n\tif (!isset($_SESSION['config']) || empty($scope)) {\n\t\treturn false;\n\t}\n\t$typeSettings = $_SESSION['config']->get_typeSettings();\n\tif (isset($typeSettings['hideDeleteButton_' . $scope]) && $typeSettings['hideDeleteButton_' . $scope]) {\n\t\treturn false;\n\t}\n\treturn checkIfWriteAccessIsAllowed();\n}\n\n/**\n * Checks if the password fulfills the password policies.\n *\n * @param String $password password\n * @param String|array $userNames user name(s)\n * @param array $otherUserAttrs user's first/last name\n * @return mixed true if ok, string with error message if not valid\n */\nfunction checkPasswordStrength($password, $userNames, $otherUserAttrs) {\n\tif (($userNames !== null) && !is_array($userNames)) {\n\t\t$userNames = array($userNames);\n\t}\n\tif ($password == null) {\n\t\t$password = \"\";\n\t}\n\tif (isset($_SESSION['cfgMain'])) {\n\t\t$cfg = $_SESSION['cfgMain'];\n\t}\n\telse {\n\t\t$cfg = new LAMCfgMain();\n\t}\n\t// check length\n\t$minLength = $cfg->passwordMinLength;\n\tif (isset($_SESSION['config']) && is_numeric($_SESSION['config']->getPwdPolicyMinLength())) {\n\t\t$minLength = $_SESSION['config']->getPwdPolicyMinLength();\n\t}\n\tif (strlen($password) < $minLength) {\n\t\treturn sprintf(_('The password is too short. You have to enter at least %s characters.'), $minLength);\n\t}\n\t// get number of characters per character class\n\t$lower = 0;\n\t$upper = 0;\n\t$numeric = 0;\n\t$symbols = 0;\n\tfor ($i = 0; $i < strlen($password); $i++) {\n\t\tif (preg_match(\"/[a-z]/\", $password[$i])) {\n\t\t\t$lower++;\n\t\t}\n\t\tif (preg_match(\"/[A-Z]/\", $password[$i])) {\n\t\t\t$upper++;\n\t\t}\n\t\tif (preg_match(\"/[0-9]/\", $password[$i])) {\n\t\t\t$numeric++;\n\t\t}\n\t\tif (preg_match(\"/[^a-z0-9]/i\", $password[$i])) {\n\t\t\t$symbols++;\n\t\t}\n\t}\n\t$rulesMatched = 0;\n\t// check lower case\n\t$minLower = $cfg->passwordMinLower;\n\tif (isset($_SESSION['config']) && is_numeric($_SESSION['config']->getpwdPolicyMinLowercase())) {\n\t\t$minLower = $_SESSION['config']->getpwdPolicyMinLowercase();\n\t}\n\tif (($cfg->checkedRulesCount == -1) && ($lower < $minLower)) {\n\t\treturn sprintf(_('The password is too weak. You have to enter at least %s lower case characters.'), $minLower);\n\t}\n\tif ($lower >= $minLower) {\n\t\t$rulesMatched++;\n\t}\n\t// check upper case\n\t$minUpper = $cfg->passwordMinUpper;\n\tif (isset($_SESSION['config']) && is_numeric($_SESSION['config']->getPwdPolicyMinUppercase())) {\n\t\t$minUpper = $_SESSION['config']->getPwdPolicyMinUppercase();\n\t}\n\tif (($cfg->checkedRulesCount == -1) && ($upper < $minUpper)) {\n\t\treturn sprintf(_('The password is too weak. You have to enter at least %s upper case characters.'), $minUpper);\n\t}\n\tif ($upper >= $minUpper) {\n\t\t$rulesMatched++;\n\t}\n\t// check numeric\n\t$minNumeric = $cfg->passwordMinNumeric;\n\tif (isset($_SESSION['config']) && is_numeric($_SESSION['config']->getPwdPolicyMinNumeric())) {\n\t\t$minNumeric = $_SESSION['config']->getPwdPolicyMinNumeric();\n\t}\n\tif (($cfg->checkedRulesCount == -1) && ($numeric < $minNumeric)) {\n\t\treturn sprintf(_('The password is too weak. You have to enter at least %s numeric characters.'), $minNumeric);\n\t}\n\tif ($numeric >= $minNumeric) {\n\t\t$rulesMatched++;\n\t}\n\t// check symbols\n\t$minSymbols = $cfg->passwordMinSymbol;\n\tif (isset($_SESSION['config']) && is_numeric($_SESSION['config']->getPwdPolicyMinSymbolic())) {\n\t\t$minSymbols = $_SESSION['config']->getPwdPolicyMinSymbolic();\n\t}\n\tif (($cfg->checkedRulesCount == -1) && ($symbols < $minSymbols)) {\n\t\treturn sprintf(_('The password is too weak. You have to enter at least %s symbolic characters.'), $minSymbols);\n\t}\n\tif ($symbols >= $minSymbols) {\n\t\t$rulesMatched++;\n\t}\n\t// check classes\n\t$classes = getNumberOfCharacterClasses($password);\n\tif (($cfg->checkedRulesCount == -1) && ($classes < $cfg->passwordMinClasses)) {\n\t\treturn sprintf(_('The password is too weak. You have to enter at least %s different character classes (upper/lower case, numbers and symbols).'), $cfg->passwordMinClasses);\n\t}\n\tif ($classes >= $cfg->passwordMinClasses) {\n\t\t$rulesMatched++;\n\t}\n\t// check rules count\n\tif (($cfg->checkedRulesCount != -1) && ($rulesMatched < $cfg->checkedRulesCount)) {\n\t\treturn sprintf(_('The password is too weak. It needs to match at least %s password complexity rules.'), $cfg->checkedRulesCount);\n\t}\n\t$pwdLow = strtolower($password);\n\t// check user name\n\tif (($cfg->passwordMustNotContainUser == 'true') && !empty($userNames)) {\n\t\tforeach ($userNames as $userName) {\n\t\t\t$userLow = strtolower($userName);\n\t\t\tif (strpos($pwdLow, $userLow) !== false) {\n\t\t\t\treturn _('The password is too weak. You may not use the user name as part of the password.');\n\t\t\t}\n\t\t}\n\t}\n\t// check part of user name and additional attributes\n\tif (($cfg->passwordMustNotContain3Chars == 'true') && !empty($userNames)) {\n\t\t// check if contains part of user name\n\t\tforeach ($userNames as $userName) {\n\t\t\tif (strlen($userName) > 2) {\n\t\t\t\t$userLow = strtolower($userName);\n\t\t\t\tfor ($i = 0; $i < strlen($userLow) - 3; $i++) {\n\t\t\t\t\t$part = substr($userLow, 0, 3);\n\t\t\t\t\tif (strpos($pwdLow, $part) !== false) {\n\t\t\t\t\t\treturn _('The password is too weak. You may not use parts of the user name for the password.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (($cfg->passwordMustNotContain3Chars == 'true') && !empty($otherUserAttrs)) {\n\t\t// check other attributes\n\t\tforeach ($otherUserAttrs as $other) {\n\t\t\t$low = strtolower($other);\n\t\t\tfor ($i = 0; $i < strlen($low) - 3; $i++) {\n\t\t\t\t$part = substr($low, 0, 3);\n\t\t\t\tif (strpos($pwdLow, $part) !== false) {\n\t\t\t\t\treturn _('The password is too weak. You may not use parts of user attributes for the password.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// check external password service\n\tif (!checkPwdWithExternalPasswordService($cfg, $password)) {\n\t\treturn _('Your selected password is known to be insecure.');\n\t}\n\treturn true;\n}\n\n/**\n * Checks the password against the external password service.\n *\n * @param LAMCfgMain $cfg main configuration\n * @param string $password password\n * @return boolean password accepted as secure\n */\nfunction checkPwdWithExternalPasswordService($cfg, $password) {\n\tif (!function_exists('curl_init') || empty($cfg->externalPwdCheckUrl)) {\n\t\treturn true;\n\t}\n\t$sha1 = sha1($password);\n\t$sha1Prefix = substr($sha1, 0, 5);\n\t$sha1Suffix = substr($sha1, 5);\n\t$curl = curl_init();\n\tcurl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n\t$url = $cfg->externalPwdCheckUrl;\n\t$url = str_replace('{SHA1PREFIX}', $sha1Prefix, $url);\n\tcurl_setopt($curl, CURLOPT_URL, $url);\n\t$results = curl_exec($curl);\n\t$code = curl_errno($curl);\n\tif ($code) {\n\t\tlogNewMessage(LOG_ERR, 'Error calling the external password service at ' . $url\n\t\t\t. '. ' . curl_error($curl));\n\t\treturn true;\n\t}\n\tcurl_close($curl);\n\tif (empty($results)) {\n\t\treturn true;\n\t}\n\t$results = explode(\"\\n\", $results);\n\tforeach ($results as $result) {\n\t\tif (stripos($result, $sha1Suffix . ':') !== false) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n * Checks if the given tool is active.\n * Otherwise, an error message is logged and the execution is stopped (die()).\n *\n * @param String $tool tool class name (e.g. toolFileUpload)\n */\nfunction checkIfToolIsActive($tool) {\n\t\t// check if hidden by config\n\tif (!$_SESSION['config']->isToolActive($tool)) {\n\t\tlogNewMessage(LOG_ERR, 'Unauthorized access to tool ' . $tool . ' denied.');\n\t\tdie();\n\t}\n}\n\n/**\n * Returns if the user is logged in.\n *\n * @return boolean is logged in\n */\nfunction isLoggedIn() {\n\treturn (isset($_SESSION['loggedIn']) && ($_SESSION['loggedIn'] === true));\n}\n\n/**\n * Returns the client IP and comma separated proxy IPs if any (HTTP_X_FORWARDED_FOR, HTTP_X_REAL_IP).\n *\n * @return String client IP (e.g. 10.10.10.10,11.11.11.11)\n */\nfunction getClientIPForLogging() {\n\t$ip = empty($_SERVER['REMOTE_ADDR']) ? '' : $_SERVER['REMOTE_ADDR'];\n\tif (!empty($_SERVER['HTTP_X_FORWARDED_FOR']) && (strlen($_SERVER['HTTP_X_FORWARDED_FOR']) < 100)) {\n\t\t$ip .= ',' . $_SERVER['HTTP_X_FORWARDED_FOR'];\n\t}\n\tif (!empty($_SERVER['HTTP_X_REAL_IP']) && (strlen($_SERVER['HTTP_X_REAL_IP']) < 100)) {\n\t\t$ip .= ',' . $_SERVER['HTTP_X_REAL_IP'];\n\t}\n\treturn $ip;\n}\n\n/**\n * Returns the login dn of the current user.\n *\n * @return string user DN\n */\nfunction getLamLdapUser() {\n\tif (isset($_SESSION['ldap'])) {\n\t\treturn $_SESSION['ldap']->getUserName();\n\t}\n\telseif (isset($_SESSION['selfService_clientDN'])) {\n\t\treturn lamDecrypt($_SESSION['selfService_clientDN'], 'SelfService');\n\t}\n\treturn '';\n}\n\n/**\n * Adds a security token to the session to prevent CSRF attacks.\n *\n * @param boolean $overwrite overwrite existing token\n */\nfunction addSecurityTokenToSession($overwrite = true) {\n\tif (!empty($_SESSION[getSecurityTokenName()]) && !$overwrite) {\n\t\treturn;\n\t}\n\t$_SESSION[getSecurityTokenName()] = getRandomNumber();\n}\n\n/**\n * Checks if the security token from SESSION matches POST data.\n */\nfunction validateSecurityToken() {\n\tif (empty($_POST)) {\n\t\treturn;\n\t}\n\tif (empty($_POST[getSecurityTokenName()]) || ($_POST[getSecurityTokenName()] != $_SESSION[getSecurityTokenName()])) {\n\t\tlogNewMessage(LOG_ERR, 'Security token does not match POST data.');\n\t\tdie();\n\t}\n}\n\n/**\n * Adds a hidden input field to the given meta HTML table.\n * Should be used to add token at the end of table.\n *\n * @param htmlTable|htmlGroup|htmlResponsiveRow $container table\n */\nfunction addSecurityTokenToMetaHTML(&$container) {\n\t$token = new htmlHiddenInput(getSecurityTokenName(), $_SESSION[getSecurityTokenName()]);\n\tif ($container instanceof htmlResponsiveRow) {\n\t\t$container->add($token, 12);\n\t\treturn;\n\t}\n\t$container->addElement($token, true);\n}\n\n/**\n * Returns the name of the security token parameter.\n *\n * @return String name\n */\nfunction getSecurityTokenName() {\n\treturn 'sec_token';\n}\n\n/**\n * Returns the value of the security token parameter.\n *\n * @return String value\n */\nfunction getSecurityTokenValue() {\n\treturn $_SESSION[getSecurityTokenName()];\n}\n\n/**\n * Sets the X-Frame-Options and Content-Security-Policy header to prevent clickjacking.\n */\nfunction setLAMHeaders() {\n\tif (!headers_sent()) {\n\t\theader('X-Frame-Options: sameorigin');\n\t\theader('Content-Security-Policy: frame-ancestors \\'self\\'; form-action \\'self\\'; base-uri \\'none\\'; object-src \\'none\\'; frame-src \\'self\\' https://*.duosecurity.com https://www.google.com/recaptcha/ https://hcaptcha.com https://*.hcaptcha.com; worker-src \\'self\\' blob:; font-src https://global.oktacdn.com/');\n\t\theader('X-Content-Type-Options: nosniff');\n\t\theader('X-XSS-Protection: 1; mode=block');\n\t\theader(\"Feature-Policy: ambient-light-sensor 'none'; autoplay 'none'; accelerometer 'none'; camera 'none'; encrypted-media 'none'; fullscreen 'self'; geolocation 'none'; gyroscope 'none'; magnetometer 'none'; microphone 'none'; midi 'none'; payment 'none'; picture-in-picture 'none'; speaker 'none'; sync-xhr 'self'; usb 'none'; vr 'none'\");\n\t}\n}\n\n/**\n* Encrypts a string\n*\n* @param string $data string to encrypt\n* @param string $prefix prefix for cookie names\n* @return object encrypted string\n*/\nfunction lamEncrypt($data, $prefix='') {\n\t// use OpenSSL if available\n\tif (function_exists('openssl_random_pseudo_bytes')) {\n\t\t// OpenSSL may have been enabled in a running session\n\t\tif (!isset($_COOKIE[$prefix . \"IV\"])\n\t\t\t\t|| ($_COOKIE[$prefix . \"IV\"] == '')\n\t\t\t\t|| ($_COOKIE[$prefix . \"IV\"] == \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\")) {\n\t\t\treturn $data;\n\t\t}\n\t\t// read key and iv from cookie\n\t\t$iv = base64_decode($_COOKIE[$prefix . \"IV\"]);\n\t\t$key = base64_decode($_COOKIE[$prefix . \"Key\"]);\n\t\t// encrypt string\n\t\treturn openssl_encrypt(base64_encode($data), lamEncryptionAlgo(), $key, 0, $iv);\n\t}\n\t// otherwise do not encrypt\n\telse {\n\t\treturn $data;\n\t}\n}\n\n/**\n* Decrypts a string\n*\n* @param object $data string to decrypt\n* @param string $prefix prefix for cookie names\n* @return string decrypted string\n*/\nfunction lamDecrypt($data, $prefix='') {\n\t// use OpenSSL if available\n\tif (function_exists('openssl_random_pseudo_bytes')) {\n\t\t// OpenSSL may have been enabled in a running session\n\t\tif (!isset($_COOKIE[$prefix . \"IV\"])\n\t\t\t\t|| ($_COOKIE[$prefix . \"IV\"] == '')\n\t\t\t\t|| ($_COOKIE[$prefix . \"IV\"] == \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\")) {\n\t\t\treturn $data;\n\t\t}\n\t\t// read key and iv from cookie\n\t\t$iv = base64_decode($_COOKIE[$prefix . \"IV\"]);\n\t\t$key = base64_decode($_COOKIE[$prefix . \"Key\"]);\n\t\t// decrypt string\n\t\t$ret = openssl_decrypt($data, lamEncryptionAlgo(), $key, 0, $iv);\n\t\treturn base64_decode(str_replace(chr(00), \"\", $ret));\n\t}\n\t// otherwise do not decrypt\n\telse {\n\t\treturn $data;\n\t}\n}\n\n/**\n * Returns the encryption algorithm to use.\n *\n * @return string algorithm name\n */\nfunction lamEncryptionAlgo() {\n\t$possibleAlgos = openssl_get_cipher_methods();\n\tif (in_array('AES-256-CTR', $possibleAlgos)) {\n\t\treturn 'AES-256-CTR';\n\t}\n\telseif (in_array('AES-256-CBC', $possibleAlgos)) {\n\t\treturn 'AES-256-CBC';\n\t}\n\treturn 'AES256';\n}\n\n/**\n * Logs a message to a remote logging service.\n *\n * @param int $level log level\n * @param string $message log message\n * @param LAMCfgMain $cfgMain main configuration\n */\nfunction lamLogRemoteMessage($level, $message, $cfgMain) {\n\tinclude_once __DIR__ . '/3rdParty/composer/autoload.php';\n\t$remoteParts = explode(':', $cfgMain->logDestination);\n\t$server = $remoteParts[1];\n\t$port = intval($remoteParts[2]);\n\t$output = \"%channel%.%level_name%: %message%\";\n\t$formatter = new Monolog\\Formatter\\LineFormatter($output);\n\t$logger = new Monolog\\Logger('lam');\n\t$syslogHandler = new Monolog\\Handler\\SyslogUdpHandler($server, $port);\n\t$syslogHandler->setFormatter($formatter);\n\t$logger->pushHandler($syslogHandler);\n\tswitch ($level) {\n\t\tcase LOG_DEBUG:\n\t\t\t$logger->debug($message);\n\t\t\tbreak;\n\t\tcase LOG_NOTICE:\n\t\t\t$logger->notice($message);\n\t\t\tbreak;\n\t\tcase LOG_WARNING:\n\t\t\t$logger->warning($message);\n\t\t\tbreak;\n\t\tcase LOG_ERR:\n\t\t\t$logger->error($message);\n\t\t\tbreak;\n\t}\n}\n", "<?php\nnamespace LAM\\CONFIG;\n\nuse htmlResponsiveTable;\nuse LAM\\LOGIN\\WEBAUTHN\\WebauthnManager;\nuse \\LAMCfgMain;\nuse \\htmlTable;\nuse \\htmlTitle;\nuse \\htmlStatusMessage;\nuse \\htmlSubTitle;\nuse \\htmlSpacer;\nuse \\htmlOutputText;\nuse \\htmlLink;\nuse \\htmlGroup;\nuse \\htmlButton;\nuse \\htmlHelpLink;\nuse \\htmlInputField;\nuse \\htmlInputFileUpload;\nuse \\DateTime;\nuse \\DateTimeZone;\nuse \\htmlResponsiveRow;\nuse \\htmlResponsiveInputTextarea;\nuse \\htmlResponsiveSelect;\nuse \\htmlResponsiveInputCheckbox;\nuse \\htmlResponsiveInputField;\nuse \\htmlDiv;\nuse \\htmlHiddenInput;\nuse LAMException;\nuse PDO;\n\n/*\n\n  This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)\n  Copyright (C) 2003 - 2022  Roland Gruber\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n*/\n\n\n/**\n * Manages the main configuration options.\n *\n * @package configuration\n * @author Roland Gruber\n */\n\n\n/** Access to config functions */\ninclude_once('../../lib/config.inc');\n/** Used to print status messages */\ninclude_once('../../lib/status.inc');\n/** LAM Pro */\ninclude_once('../../lib/selfService.inc');\n\n// start session\nif (strtolower(session_module_name()) == 'files') {\n\tsession_save_path(\"../../sess\");\n}\nlam_start_session();\n\nsetlanguage();\n\nif (!isset($_SESSION['cfgMain'])) {\n\t$cfg = new LAMCfgMain();\n\t$_SESSION['cfgMain'] = $cfg;\n}\n$cfg = &$_SESSION['cfgMain'];\n\n// check if user is logged in\nif (!isset($_SESSION[\"mainconf_password\"]) || (!$cfg->checkPassword($_SESSION[\"mainconf_password\"]))) {\n\trequire('mainlogin.php');\n\texit();\n}\n\nif (isset($_POST['cancel'])) {\n\t// back to login\n\tmetaRefresh('../login.php');\n\texit();\n}\n\n$errors = array();\n$messages = array();\n// check if submit button was pressed\nif (isset($_POST['submitFormData'])) {\n    if (extension_loaded('PDO')) {\n\t    // set database\n\t    $cfg->configDatabaseType = $_POST['configDatabaseType'];\n\t    $cfg->configDatabaseServer = $_POST['configDatabaseServer'];\n\t    $cfg->configDatabasePort = $_POST['configDatabasePort'];\n\t    $cfg->configDatabaseName = $_POST['configDatabaseName'];\n\t    $cfg->configDatabaseUser = $_POST['configDatabaseUser'];\n\t    $cfg->configDatabasePassword = $_POST['configDatabasePassword'];\n\t    if ($cfg->configDatabaseType === LAMCfgMain::DATABASE_MYSQL) {\n\t\t    if (empty($cfg->configDatabaseServer) || !get_preg($cfg->configDatabaseServer, 'hostname')) {\n\t\t\t    $errors[] = _('Please enter a valid database host name.');\n\t\t    }\n\t\t    if (empty($cfg->configDatabaseName)) {\n\t\t\t    $errors[] = _('Please enter a valid database name.');\n\t\t    }\n\t\t    if (empty($cfg->configDatabaseUser)) {\n\t\t\t    $errors[] = _('Please enter a valid database user.');\n\t\t    }\n\t\t    if (empty($cfg->configDatabasePassword)) {\n\t\t\t    $errors[] = _('Please enter a valid database password.');\n\t\t    }\n\t    }\n    }\n\t// set master password\n\tif (isset($_POST['masterpassword']) && ($_POST['masterpassword'] != \"\")) {\n\t\tif ($_POST['masterpassword'] && $_POST['masterpassword2'] && ($_POST['masterpassword'] == $_POST['masterpassword2'])) {\n\t\t\t$cfg->setPassword($_POST['masterpassword']);\n\t\t\t$msg = _(\"New master password set successfully.\");\n\t\t\tunset($_SESSION[\"mainconf_password\"]);\n\t\t} else {\n\t\t\t$errors[] = _(\"Master passwords are different or empty!\");\n\t\t}\n\t}\n\t// set license\n\tif (isLAMProVersion()) {\n\t\t$licenseLines = explode(\"\\n\", $_POST['license']);\n\t\t$licenseLines = array_map('trim', $licenseLines);\n\t\t$cfg->setLicenseLines($licenseLines);\n\t\t$cfg->licenseWarningType = $_POST['licenseWarningType'];\n\t\t$cfg->licenseEmailFrom = $_POST['licenseEmailFrom'];\n\t\t$cfg->licenseEmailTo = $_POST['licenseEmailTo'];\n\t\tif ((($cfg->licenseWarningType === LAMCfgMain::LICENSE_WARNING_EMAIL) || ($cfg->licenseWarningType === LAMCfgMain::LICENSE_WARNING_ALL))\n            && !get_preg($cfg->licenseEmailFrom, 'email')) {\n\t\t    $errors[] = _('Licence') . ': ' . _('From address') . ' - ' . _('Please enter a valid email address!');\n        }\n\t\tif (($cfg->licenseWarningType === LAMCfgMain::LICENSE_WARNING_EMAIL) || ($cfg->licenseWarningType === LAMCfgMain::LICENSE_WARNING_ALL)) {\n\t\t    $toEmails = preg_split('/;[ ]*/', $cfg->licenseEmailTo);\n\t\t    foreach ($toEmails as $toEmail) {\n\t\t        if (!get_preg($toEmail, 'email')) {\n\t\t\t        $errors[] = _('Licence') . ': ' . _('TO address') . ' - ' . _('Please enter a valid email address!');\n\t\t\t        break;\n                }\n\t\t    }\n\t\t}\n\t}\n\t// set session timeout\n\t$cfg->sessionTimeout = $_POST['sessionTimeout'];\n\t// set allowed hosts\n\tif (isset($_POST['allowedHosts'])) {\n\t\t$allowedHosts = $_POST['allowedHosts'];\n\t\t$allowedHostsList = explode(\"\\n\", $allowedHosts);\n\t\tfor ($i = 0; $i < sizeof($allowedHostsList); $i++) {\n\t\t\t$allowedHostsList[$i] = trim($allowedHostsList[$i]);\n\t\t\t// ignore empty lines\n\t\t\tif ($allowedHostsList[$i] == \"\") {\n\t\t\t\tunset($allowedHostsList[$i]);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// check each line\n\t\t\t$ipRegex = '/^[0-9a-f\\\\.:\\\\*]+$/i';\n\t\t\tif (!preg_match($ipRegex, $allowedHostsList[$i]) || (strlen($allowedHostsList[$i]) > 45)) {\n\t\t\t\t$errors[] = sprintf(_(\"The IP address %s is invalid!\"), htmlspecialchars(str_replace('%', '%%', $allowedHostsList[$i])));\n\t\t\t}\n\t\t}\n\t\t$allowedHosts = implode(\",\", $allowedHostsList);\n\t} else {\n\t\t$allowedHosts = \"\";\n\t}\n\t$cfg->allowedHosts = $allowedHosts;\n\t// set allowed hosts for self service\n\tif (isLAMProVersion()) {\n\t\tif (isset($_POST['allowedHostsSelfService'])) {\n\t\t\t$allowedHostsSelfService = $_POST['allowedHostsSelfService'];\n\t\t\t$allowedHostsSelfServiceList = explode(\"\\n\", $allowedHostsSelfService);\n\t\t\tfor ($i = 0; $i < sizeof($allowedHostsSelfServiceList); $i++) {\n\t\t\t\t$allowedHostsSelfServiceList[$i] = trim($allowedHostsSelfServiceList[$i]);\n\t\t\t\t// ignore empty lines\n\t\t\t\tif ($allowedHostsSelfServiceList[$i] == \"\") {\n\t\t\t\t\tunset($allowedHostsSelfServiceList[$i]);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// check each line\n\t\t\t\t$ipRegex = '/^[0-9a-f\\\\.:\\\\*]+$/i';\n\t\t\t\tif (!preg_match($ipRegex, $allowedHostsSelfServiceList[$i]) || (strlen($allowedHostsSelfServiceList[$i]) > 15)) {\n\t\t\t\t\t$errors[] = sprintf(_(\"The IP address %s is invalid!\"), htmlspecialchars(str_replace('%', '%%', $allowedHostsSelfServiceList[$i])));\n\t\t\t\t}\n\t\t\t}\n\t\t\t$allowedHostsSelfService = implode(\",\", $allowedHostsSelfServiceList);\n\t\t} else {\n\t\t\t$allowedHostsSelfService = \"\";\n\t\t}\n\t\t$cfg->allowedHostsSelfService = $allowedHostsSelfService;\n\t}\n\t// set session encryption\n\tif (function_exists('openssl_random_pseudo_bytes')) {\n\t\t$encryptSession = 'false';\n\t\tif (isset($_POST['encryptSession']) && ($_POST['encryptSession'] == 'on')) {\n\t\t\t$encryptSession = 'true';\n\t\t}\n\t\t$cfg->encryptSession = $encryptSession;\n\t}\n\t// set log level\n\t$cfg->logLevel = $_POST['logLevel'];\n\t// set log destination\n\tif ($_POST['logDestination'] == \"none\") {\n\t\t$cfg->logDestination = \"NONE\";\n\t} elseif ($_POST['logDestination'] == \"syslog\") {\n\t\t$cfg->logDestination = \"SYSLOG\";\n\t} elseif ($_POST['logDestination'] == \"remote\") {\n\t\t$cfg->logDestination = \"REMOTE:\" . $_POST['logRemote'];\n\t\t$remoteParts = explode(':', $_POST['logRemote']);\n\t\tif ((sizeof($remoteParts) !== 2) || !get_preg($remoteParts[0], 'DNSname') || !get_preg($remoteParts[1], 'digit')) {\n\t\t\t$errors[] = _(\"Please enter a valid remote server in format \\\"server:port\\\".\");\n\t\t}\n\t} else {\n\t\tif (isset($_POST['logFile']) && ($_POST['logFile'] != \"\") && preg_match(\"/^[a-z0-9\\\\/\\\\\\\\:\\\\._-]+$/i\", $_POST['logFile'])) {\n\t\t\t$cfg->logDestination = $_POST['logFile'];\n\t\t} else {\n\t\t\t$errors[] = _(\"The log file is empty or contains invalid characters! Valid characters are: a-z, A-Z, 0-9, /, \\\\, ., :, _ and -.\");\n\t\t}\n\t}\n\t// password policies\n\t$cfg->passwordMinLength = $_POST['passwordMinLength'];\n\t$cfg->passwordMinLower = $_POST['passwordMinLower'];\n\t$cfg->passwordMinUpper = $_POST['passwordMinUpper'];\n\t$cfg->passwordMinNumeric = $_POST['passwordMinNumeric'];\n\t$cfg->passwordMinSymbol = $_POST['passwordMinSymbol'];\n\t$cfg->passwordMinClasses = $_POST['passwordMinClasses'];\n\t$cfg->checkedRulesCount = $_POST['passwordRulesCount'];\n\t$cfg->passwordMustNotContain3Chars = isset($_POST['passwordMustNotContain3Chars']) && ($_POST['passwordMustNotContain3Chars'] == 'on') ? 'true' : 'false';\n\t$cfg->passwordMustNotContainUser = isset($_POST['passwordMustNotContainUser']) && ($_POST['passwordMustNotContainUser'] == 'on') ? 'true' : 'false';\n\tif (function_exists('curl_init')) {\n\t\t$cfg->externalPwdCheckUrl = $_POST['externalPwdCheckUrl'];\n\t\tif (!empty($cfg->externalPwdCheckUrl) && (strpos($cfg->externalPwdCheckUrl, '{SHA1PREFIX}') === false)) {\n\t\t\t$errors[] = _('The URL for the external password check is invalid.');\n\t\t}\n\t}\n\tif (isset($_POST['sslCaCertUpload'])) {\n\t\tif (!isset($_FILES['sslCaCert']) || ($_FILES['sslCaCert']['size'] == 0)) {\n\t\t\t$errors[] = _('No file selected.');\n\t\t} else {\n\t\t\t$handle = fopen($_FILES['sslCaCert']['tmp_name'], \"r\");\n\t\t\t$data = fread($handle, 10000000);\n\t\t\tfclose($handle);\n\t\t\t$sslReturn = $cfg->uploadSSLCaCert($data);\n\t\t\tif ($sslReturn !== true) {\n\t\t\t\t$errors[] = $sslReturn;\n\t\t\t} else {\n\t\t\t\t$messages[] = _('You might need to restart your webserver for changes to take effect.');\n\t\t\t}\n\t\t}\n\t}\n\tif (isset($_POST['sslCaCertDelete'])) {\n\t\t$cfg->deleteSSLCaCert();\n\t\t$messages[] = _('You might need to restart your webserver for changes to take effect.');\n\t}\n\tif (isset($_POST['sslCaCertImport'])) {\n\t\t$matches = array();\n\t\tif (preg_match('/^ldaps:\\\\/\\\\/([a-zA-Z0-9_\\\\.-]+)(:([0-9]+))?$/', $_POST['serverurl'], $matches)) {\n\t\t\t$port = '636';\n\t\t\tif (isset($matches[3]) && !empty($matches[3])) {\n\t\t\t\t$port = $matches[3];\n\t\t\t}\n\t\t\t$pemResult = getLDAPSSLCertificate($matches[1], $port);\n\t\t\tif ($pemResult !== false) {\n\t\t\t\t$messages[] = _('Imported certificate from server.');\n\t\t\t\t$messages[] = _('You might need to restart your webserver for changes to take effect.');\n\t\t\t\t$cfg->uploadSSLCaCert($pemResult);\n\t\t\t} else {\n\t\t\t\t$errors[] = _('Unable to import server certificate. Please use the upload function.');\n\t\t\t}\n\t\t} else {\n\t\t\t$errors[] = _('Invalid server name. Please enter \"server\" or \"server:port\".');\n\t\t}\n\t}\n\tforeach ($_POST as $key => $value) {\n\t\tif (strpos($key, 'deleteCert_') === 0) {\n\t\t\t$index = substr($key, strlen('deleteCert_'));\n\t\t\t$cfg->deleteSSLCaCert($index);\n\t\t}\n\t}\n\t// mail EOL\n\tif (isLAMProVersion()) {\n\t\t$cfg->mailUser = $_POST['mailUser'];\n\t\t$cfg->mailPassword = $_POST['mailPassword'];\n\t\t$cfg->mailEncryption = $_POST['mailEncryption'];\n\t\t$cfg->mailServer = $_POST['mailServer'];\n\t\tif (!empty($cfg->mailServer) && !get_preg($cfg->mailServer, 'hostAndPort')) {\n            $errors[] = _('Please enter the mail server with host name and port.');\n        }\n\t}\n\t$cfg->errorReporting = $_POST['errorReporting'];\n\t// save settings\n\tif (isset($_POST['submit'])) {\n\t\t$cfg->save();\n\t\tif (sizeof($errors) == 0) {\n\t\t\tmetaRefresh('../login.php?confMainSavedOk=1');\n\t\t\texit();\n\t\t}\n\t}\n}\n\necho $_SESSION['header'];\nprintHeaderContents(_(\"Edit general settings\"), '../..');\n?>\n</head>\n<body>\n<div id=\"lam-topnav\" class=\"lam-header\">\n    <div class=\"lam-header-left lam-menu-stay\">\n        <a href=\"https://www.ldap-account-manager.org/\" target=\"new_window\">\n            <img class=\"align-middle\" width=\"24\" height=\"24\" alt=\"help\" src=\"../../graphics/logo24.png\">\n            <span class=\"hide-on-mobile\">\n                        <?php\n                        echo getLAMVersionText();\n                        ?>\n                    </span>\n        </a>\n    </div>\n\t<?php\n\tif (is_dir(dirname(__FILE__) . '/../../docs/manual')) {\n\t\t?>\n        <a class=\"lam-header-right lam-menu-icon hide-on-tablet\" href=\"javascript:void(0);\" class=\"icon\" onclick=\"window.lam.topmenu.toggle();\">\n            <img class=\"align-middle\" width=\"16\" height=\"16\" alt=\"menu\" src=\"../../graphics/menu.svg\">\n            <span class=\"padding0\">&nbsp;</span>\n        </a>\n        <a class=\"lam-header-right lam-menu-entry\" target=\"_blank\" href=\"../../docs/manual/index.html\">\n            <span class=\"padding0\"><?php echo _(\"Help\") ?></span>\n        </a>\n\t\t<?php\n\t}\n\t?>\n</div>\n<br>\n<!-- form for adding/renaming/deleting profiles -->\n<form enctype=\"multipart/form-data\" action=\"mainmanage.php\" method=\"post\">\n\n\t<?php\n\t// include all JavaScript files\n\tprintJsIncludes('../..');\n\n\t$tabindex = 1;\n\n\t$row = new htmlResponsiveRow();\n\t$row->add(new htmlTitle(_('General settings')), 12);\n\n\t// print messages\n\tforeach ($errors as $error) {\n\t\t$row->add(new htmlStatusMessage(\"ERROR\", $error), 12);\n\t}\n\tforeach ($messages as $message) {\n\t\t$row->add(new htmlStatusMessage(\"INFO\", $message), 12);\n\t}\n\n\t// check if config file is writable\n\tif (!$cfg->isWritable()) {\n\t\t$row->add(new htmlStatusMessage('WARN', _('The config file is not writable.'), _('Your changes cannot be saved until you make the file writable for the webserver user.')), 12);\n\t}\n\n\t// database\n\tif (extension_loaded('PDO')) {\n\t\t$row->add(new htmlSubTitle(_('Configuration storage')), 12);\n\t\t$storageProviders = array(\n\t\t\t_('Local file system') => LAMCfgMain::DATABASE_FILE_SYSTEM\n\t\t);\n\t\tif (in_array('mysql', PDO::getAvailableDrivers())) {\n\t\t\t$storageProviders['MySQL'] = LAMCfgMain::DATABASE_MYSQL;\n\t\t}\n\t\t$storageProviderSelect = new htmlResponsiveSelect('configDatabaseType', $storageProviders, array($cfg->configDatabaseType), _('Database type'), '293');\n\t\t$storageProviderSelect->setHasDescriptiveElements(true);\n\t\t$dbRowsToShow = array(\n\t\t    LAMCfgMain::DATABASE_FILE_SYSTEM => array(),\n            LAMCfgMain::DATABASE_MYSQL => array('configDatabaseServer', 'configDatabasePort', 'configDatabaseName', 'configDatabaseUser', 'configDatabasePassword')\n        );\n\t\t$storageProviderSelect->setTableRowsToShow($dbRowsToShow);\n\t\t$dbRowsToHide = array(\n\t\t\tLAMCfgMain::DATABASE_FILE_SYSTEM => array('configDatabaseServer', 'configDatabasePort', 'configDatabaseName', 'configDatabaseUser', 'configDatabasePassword'),\n\t\t\tLAMCfgMain::DATABASE_MYSQL => array()\n        );\n\t\t$storageProviderSelect->setTableRowsToHide($dbRowsToHide);\n\t\t$row->add($storageProviderSelect, 12);\n\t\t$dbHost = new htmlResponsiveInputField(_('Database host'), 'configDatabaseServer', $cfg->configDatabaseServer, '273');\n\t\t$dbHost->setRequired(true);\n\t\t$row->add($dbHost, 12);\n\t\t$dbPort = new htmlResponsiveInputField(_('Database port'), 'configDatabasePort', $cfg->configDatabasePort, '274');\n\t\t$row->add($dbPort, 12);\n\t\t$dbName = new htmlResponsiveInputField(_('Database name'), 'configDatabaseName', $cfg->configDatabaseName, '276');\n\t\t$dbName->setRequired(true);\n\t\t$row->add($dbName, 12);\n\t\t$dbUser = new htmlResponsiveInputField(_('Database user'), 'configDatabaseUser', $cfg->configDatabaseUser, '275');\n\t\t$dbUser->setRequired(true);\n\t\t$row->add($dbUser, 12);\n\t\t$dbPassword = new htmlResponsiveInputField(_('Database password'), 'configDatabasePassword', deobfuscateText($cfg->configDatabasePassword), '275');\n\t\t$dbPassword->setRequired(true);\n\t\t$dbPassword->setIsPassword(true);\n\t\t$row->add($dbPassword, 12);\n    }\n\n\t// license\n\tif (isLAMProVersion()) {\n\t\t$row->add(new htmlSubTitle(_('Licence')), 12);\n\t\t$row->add(new htmlResponsiveInputTextarea('license', implode(\"\\n\", $cfg->getLicenseLines()), null, 10, _('Licence'), '287'), 12);\n\t\t$warningOptions = array(\n\t        _('Screen') => LAMCfgMain::LICENSE_WARNING_SCREEN,\n\t\t\t_('Email') => LAMCfgMain::LICENSE_WARNING_EMAIL,\n\t\t\t_('Both') => LAMCfgMain::LICENSE_WARNING_ALL,\n\t\t\t_('None') => LAMCfgMain::LICENSE_WARNING_NONE,\n        );\n\t\t$warningTypeSelect = new htmlResponsiveSelect('licenseWarningType', $warningOptions, array($cfg->getLicenseWarningType()), _('Expiration warning'), '288');\n\t\t$warningTypeSelect->setHasDescriptiveElements(true);\n\t\t$warningTypeSelect->setSortElements(false);\n\t\t$warningTypeSelect->setTableRowsToHide(array(\n\t\t\tLAMCfgMain::LICENSE_WARNING_SCREEN => array('licenseEmailFrom', 'licenseEmailTo'),\n\t\t\tLAMCfgMain::LICENSE_WARNING_NONE => array('licenseEmailFrom', 'licenseEmailTo'),\n        ));\n\t\t$warningTypeSelect->setTableRowsToShow(array(\n\t\t\tLAMCfgMain::LICENSE_WARNING_EMAIL => array('licenseEmailFrom', 'licenseEmailTo'),\n\t\t\tLAMCfgMain::LICENSE_WARNING_ALL => array('licenseEmailFrom', 'licenseEmailTo'),\n\t\t));\n\t\t$row->add($warningTypeSelect, 12);\n\t\t$licenseFrom = new htmlResponsiveInputField(_('From address'), 'licenseEmailFrom', $cfg->licenseEmailFrom, '289');\n\t\t$licenseFrom->setRequired(true);\n\t\t$row->add($licenseFrom, 12);\n\t\t$licenseTo = new htmlResponsiveInputField(_('TO address'), 'licenseEmailTo', $cfg->licenseEmailTo, '290');\n\t\t$licenseTo->setRequired(true);\n\t\t$row->add($licenseTo, 12);\n\n\t\t$row->add(new htmlSpacer(null, '1rem'), true);\n\t}\n\n\t// security settings\n\t$row->add(new htmlSubTitle(_(\"Security settings\")), 12);\n\t$options = array(5, 10, 20, 30, 60, 90, 120, 240);\n\t$row->add(new htmlResponsiveSelect('sessionTimeout', $options, array($cfg->sessionTimeout), _(\"Session timeout\"), '238'), 12);\n\t$row->add(new htmlResponsiveInputTextarea('allowedHosts', implode(\"\\n\", explode(\",\", $cfg->allowedHosts)), null, '7', _(\"Allowed hosts\"), '241'), 12);\n\tif (isLAMProVersion()) {\n\t\t$row->add(new htmlResponsiveInputTextarea('allowedHostsSelfService', implode(\"\\n\", explode(\",\", $cfg->allowedHostsSelfService)), null, '7', _(\"Allowed hosts (self service)\"), '241'), 12);\n\t}\n\t$encryptSession = ($cfg->encryptSession === 'true');\n\t$encryptSessionBox = new htmlResponsiveInputCheckbox('encryptSession', $encryptSession, _('Encrypt session'), '245');\n\t$encryptSessionBox->setIsEnabled(function_exists('openssl_random_pseudo_bytes'));\n\t$row->add($encryptSessionBox, 12);\n\t// SSL certificate\n\t$row->addVerticalSpacer('1rem');\n\t$row->addLabel(new htmlOutputText(_('SSL certificates')));\n\t$sslMethod = _('use system certificates');\n\t$sslFileName = $cfg->getSSLCaCertTempFileName();\n\tif ($sslFileName != null) {\n\t\t$sslMethod = _('use custom CA certificates');\n\t}\n\t$sslDelSaveGroup = new htmlGroup();\n\t$sslDelSaveGroup->addElement(new htmlOutputText($sslMethod));\n\t$sslDelSaveGroup->addElement(new htmlSpacer('5px', null));\n\t// delete+download button\n\tif ($sslFileName != null) {\n\t\t$sslDownloadBtn = new htmlLink('', '../../tmp/' . $sslFileName, '../../graphics/save.svg');\n\t\t$sslDownloadBtn->setTargetWindow('_blank');\n\t\t$sslDownloadBtn->setTitle(_('Download CA certificates'));\n\t\t$sslDownloadBtn->setCSSClasses(array('icon'));\n\t\t$sslDelSaveGroup->addElement($sslDownloadBtn);\n\t\t$sslDeleteBtn = new htmlButton('sslCaCertDelete', 'del.svg', true);\n\t\t$sslDeleteBtn->setTitle(_('Delete all CA certificates'));\n\t\t$sslDelSaveGroup->addElement($sslDeleteBtn);\n\t}\n\t$sslDelSaveGroup->addElement(new htmlHelpLink('204'));\n\t$row->addField($sslDelSaveGroup);\n\t$row->addLabel(new htmlInputFileUpload('sslCaCert'));\n\t$sslUploadBtn = new htmlButton('sslCaCertUpload', _('Upload'));\n\t$sslUploadBtn->setTitle(_('Upload CA certificate in DER/PEM format.'));\n\t$row->addField($sslUploadBtn);\n\tif (function_exists('stream_socket_client') && function_exists('stream_context_get_params')) {\n\t\t$sslImportServerUrl = !empty($_POST['serverurl']) ? $_POST['serverurl'] : 'ldaps://';\n\t\t$serverUrlUpload = new htmlInputField('serverurl', $sslImportServerUrl);\n\t\t$row->addLabel($serverUrlUpload);\n\t\t$sslImportBtn = new htmlButton('sslCaCertImport', _('Import from server'));\n\t\t$sslImportBtn->setTitle(_('Imports the certificate directly from your LDAP server.'));\n\t\t$row->addField($sslImportBtn);\n\t}\n\n\t$sslCerts = $cfg->getSSLCaCertificates();\n\tif (sizeof($sslCerts) > 0) {\n\t\t$certsTitles = array(_('Common name'), _('Valid to'), _('Serial number'), _('Delete'));\n\t\t$certsData = array();\n\t\tfor ($i = 0; $i < sizeof($sslCerts); $i++) {\n\t\t\t$serial = isset($sslCerts[$i]['serialNumber']) ? $sslCerts[$i]['serialNumber'] : '';\n\t\t\t$validTo = isset($sslCerts[$i]['validTo_time_t']) ? $sslCerts[$i]['validTo_time_t'] : '';\n\t\t\tif (get_preg($validTo, 'digit')) {\n\t\t\t    $date = DateTime::createFromFormat('U', $validTo, new DateTimeZone('UTC'));\n\t\t\t    $validTo = $date->format('Y-m-d');\n            }\n\t\t\t$cn = isset($sslCerts[$i]['subject']['CN']) ? $sslCerts[$i]['subject']['CN'] : '';\n\t\t\t$delBtn = new htmlButton('deleteCert_' . $i, 'del.svg', true);\n\t\t\t$certsData[] = array(\n\t\t\t\tnew htmlOutputText($cn),\n\t\t\t\tnew htmlDiv(null, new htmlOutputText($validTo), array('nowrap')),\n\t\t\t\tnew htmlOutputText($serial),\n\t\t\t\t$delBtn\n\t\t\t);\n\t\t}\n\t\t$certsTable = new htmlResponsiveTable($certsTitles, $certsData);\n\t\t$row->add($certsTable, 12);\n\t}\n\n\t// password policy\n\t$row->add(new htmlSubTitle(_(\"Password policy\")), 12);\n\t$optionsPwdLength = array();\n\tfor ($i = 0; $i <= 50; $i++) {\n\t\t$optionsPwdLength[] = $i;\n\t}\n\t$options4 = array(0, 1, 2, 3, 4);\n\t$row->add(new htmlResponsiveSelect('passwordMinLength', $optionsPwdLength, array($cfg->passwordMinLength), _('Minimum password length'), '242'), 12);\n\t$row->addVerticalSpacer('1rem');\n\t$row->add(new htmlResponsiveSelect('passwordMinLower', $optionsPwdLength, array($cfg->passwordMinLower), _('Minimum lowercase characters'), '242'), 12);\n\t$row->add(new htmlResponsiveSelect('passwordMinUpper', $optionsPwdLength, array($cfg->passwordMinUpper), _('Minimum uppercase characters'), '242'), 12);\n\t$row->add(new htmlResponsiveSelect('passwordMinNumeric', $optionsPwdLength, array($cfg->passwordMinNumeric), _('Minimum numeric characters'), '242'), 12);\n\t$row->add(new htmlResponsiveSelect('passwordMinSymbol', $optionsPwdLength, array($cfg->passwordMinSymbol), _('Minimum symbolic characters'), '242'), 12);\n\t$row->add(new htmlResponsiveSelect('passwordMinClasses', $options4, array($cfg->passwordMinClasses), _('Minimum character classes'), '242'), 12);\n\t$row->addVerticalSpacer('1rem');\n\t$rulesCountOptions = array(_('all') => '-1', '3' => '3', '4' => '4');\n\t$rulesCountSelect = new htmlResponsiveSelect('passwordRulesCount', $rulesCountOptions, array($cfg->checkedRulesCount), _('Number of rules that must match'), '246');\n\t$rulesCountSelect->setHasDescriptiveElements(true);\n\t$row->add($rulesCountSelect, 12);\n\t$passwordMustNotContainUser = ($cfg->passwordMustNotContainUser === 'true');\n\t$row->add(new htmlResponsiveInputCheckbox('passwordMustNotContainUser', $passwordMustNotContainUser, _('Password must not contain user name'), '247'), 12);\n\t$passwordMustNotContain3Chars = ($cfg->passwordMustNotContain3Chars === 'true');\n\t$row->add(new htmlResponsiveInputCheckbox('passwordMustNotContain3Chars', $passwordMustNotContain3Chars, _('Password must not contain part of user/first/last name'), '248'), 12);\n\tif (function_exists('curl_init')) {\n\t\t$row->addVerticalSpacer('1rem');\n\t\t$row->add(new htmlResponsiveInputField(_('External password check'), 'externalPwdCheckUrl', $cfg->externalPwdCheckUrl, '249'), 12);\n\t}\n\n\t// logging\n\t$row->add(new htmlSubTitle(_(\"Logging\")), 12);\n\t$levelOptions = array(_(\"Debug\") => LOG_DEBUG, _(\"Notice\") => LOG_NOTICE, _(\"Warning\") => LOG_WARNING, _(\"Error\") => LOG_ERR);\n\t$levelSelect = new htmlResponsiveSelect('logLevel', $levelOptions, array($cfg->logLevel), _(\"Log level\"), '239');\n\t$levelSelect->setHasDescriptiveElements(true);\n\t$row->add($levelSelect, 12);\n\t$destinationOptions = array(\n\t\t_(\"No logging\") => \"none\",\n\t\t_(\"System logging\") => \"syslog\",\n\t\t_(\"File\") => 'file',\n\t\t_(\"Remote\") => 'remote',\n\t);\n\t$destinationSelected = 'file';\n\t$destinationPath = $cfg->logDestination;\n\t$destinationRemote = '';\n\tif ($cfg->logDestination == 'NONE') {\n\t\t$destinationSelected = 'none';\n\t\t$destinationPath = '';\n\t} elseif ($cfg->logDestination == 'SYSLOG') {\n\t\t$destinationSelected = 'syslog';\n\t\t$destinationPath = '';\n\t} elseif (strpos($cfg->logDestination, 'REMOTE') === 0) {\n\t\t$destinationSelected = 'remote';\n\t\t$remoteParts = explode(':', $cfg->logDestination, 2);\n\t\t$destinationRemote = empty($remoteParts[1]) ? '' : $remoteParts[1];\n\t\t$destinationPath = '';\n\t}\n\t$logDestinationSelect = new htmlResponsiveSelect('logDestination', $destinationOptions, array($destinationSelected), _(\"Log destination\"), '240');\n\t$logDestinationSelect->setTableRowsToHide(array(\n\t\t'none' => array('logFile', 'logRemote'),\n\t\t'syslog' => array('logFile', 'logRemote'),\n\t\t'remote' => array('logFile'),\n\t\t'file' => array('logRemote'),\n\t));\n\t$logDestinationSelect->setTableRowsToShow(array(\n\t\t'file' => array('logFile'),\n\t\t'remote' => array('logRemote'),\n\t));\n\t$logDestinationSelect->setHasDescriptiveElements(true);\n\t$row->add($logDestinationSelect, 12);\n\t$row->add(new htmlResponsiveInputField(_('File'), 'logFile', $destinationPath), 12);\n\t$row->add(new htmlResponsiveInputField(_('Remote server'), 'logRemote', $destinationRemote, '251'), 12);\n\t$errorLogOptions = array(\n\t\t_('PHP system setting') => LAMCfgMain::ERROR_REPORTING_SYSTEM,\n\t\t_('default') => LAMCfgMain::ERROR_REPORTING_DEFAULT,\n\t\t_('all') => LAMCfgMain::ERROR_REPORTING_ALL\n\t);\n\t$errorLogSelect = new htmlResponsiveSelect('errorReporting', $errorLogOptions, array($cfg->errorReporting), _('PHP error reporting'), '244');\n\t$errorLogSelect->setHasDescriptiveElements(true);\n\t$row->add($errorLogSelect, 12);\n\n\t// mail options\n\tif (isLAMProVersion()) {\n\t\t$row->add(new htmlSubTitle(_('Mail options')), 12);\n\t\t$mailServer = new htmlResponsiveInputField(_(\"Mail server\"), 'mailServer', $cfg->mailServer, '253');\n\t\t$row->add($mailServer, 12);\n\t\t$mailUser = new htmlResponsiveInputField(_(\"User name\"), 'mailUser', $cfg->mailUser, '254');\n\t\t$row->add($mailUser, 12);\n\t\t$mailPassword = new htmlResponsiveInputField(_(\"Password\"), 'mailPassword', $cfg->mailPassword, '255');\n\t\t$mailPassword->setIsPassword(true);\n\t\t$row->add($mailPassword, 12);\n\t\t$mailEncryptionOptions = array(\n\t        'TLS' => LAMCfgMain::SMTP_TLS,\n\t\t\t'SSL' => LAMCfgMain::SMTP_SSL,\n\t\t\t_('None') => LAMCfgMain::SMTP_NONE,\n        );\n\t\t$selectedMailEncryption = empty($cfg->mailEncryption) ? LAMCfgMain::SMTP_TLS : $cfg->mailEncryption;\n\t\t$mailEncryptionSelect = new htmlResponsiveSelect('mailEncryption', $mailEncryptionOptions, array($selectedMailEncryption), _('Encryption protocol'), '256');\n\t\t$mailEncryptionSelect->setHasDescriptiveElements(true);\n\t\t$row->add($mailEncryptionSelect, 12);\n\t}\n\t$row->addVerticalSpacer('3rem');\n\n\t// webauthn management\n\tif (extension_loaded('PDO')\n\t\t&& in_array('sqlite', \\PDO::getAvailableDrivers())) {\n\t\tinclude_once __DIR__ . '/../../lib/webauthn.inc';\n\t\t$webAuthnManager = new WebauthnManager();\n\t\ttry {\n\t\t\t$database = $webAuthnManager->getDatabase();\n\t\t\tif ($database->hasRegisteredCredentials()) {\n\t\t\t\t$row->add(new htmlSubTitle(_('WebAuthn devices')), 12);\n\t\t\t\t$webauthnSearchField = new htmlResponsiveInputField(_('User DN'), 'webauthn_searchTerm', null, '252');\n\t\t\t\t$row->add($webauthnSearchField, 12);\n\t\t\t\t$row->addVerticalSpacer('0.5rem');\n\t\t\t\t$row->add(new htmlButton('webauthn_search', _('Search')), 12, 12, 12, 'text-center');\n\t\t\t\t$resultDiv = new htmlDiv('webauthn_results', new htmlOutputText(''), array('lam-webauthn-results'));\n\t\t\t\taddSecurityTokenToSession(false);\n\t\t\t\t$resultDiv->addDataAttribute('sec_token_value', getSecurityTokenValue());\n\t\t\t\t$row->add($resultDiv, 12);\n\t\t\t\t$confirmationDiv = new htmlDiv('webauthnDeleteConfirm', new htmlOutputText(_('Do you really want to remove this device?')), array('hidden'));\n\t\t\t\t$row->add($confirmationDiv, 12);\n\t\t\t}\n\t\t}\n\t\tcatch (LAMException $e) {\n\t\t    logNewMessage(LOG_ERR, 'Webauthn error: ' . $e->getTitle() . ' ' . $e->getMessage());\n\t\t    $row->add(new htmlStatusMessage('ERROR', $e->getTitle()), 12);\n        }\n\t}\n\n\t// change master password\n\t$row->add(new htmlSubTitle(_(\"Change master password\")), 12);\n\t$pwd1 = new htmlResponsiveInputField(_(\"New master password\"), 'masterpassword', '', '235');\n\t$pwd1->setIsPassword(true, false, true);\n\t$row->add($pwd1, 12);\n\t$pwd2 = new htmlResponsiveInputField(_(\"Reenter password\"), 'masterpassword2', '');\n\t$pwd2->setIsPassword(true, false, true);\n\t$pwd2->setSameValueFieldID('masterpassword');\n\t$row->add($pwd2, 12);\n\t$row->addVerticalSpacer('3rem');\n\n\t// buttons\n\tif ($cfg->isWritable()) {\n\t\t$buttonTable = new htmlTable();\n\t\t$saveButton = new htmlButton('submit', _(\"Save\"));\n\t\t$saveButton->setCSSClasses(array('lam-primary'));\n\t\t$buttonTable->addElement($saveButton);\n\t\t$buttonTable->addElement(new htmlSpacer('0.5rem', null));\n\t\t$buttonTable->addElement(new htmlButton('cancel', _(\"Cancel\")));\n\t\t$row->add($buttonTable, 12);\n\t\t$row->add(new htmlHiddenInput('submitFormData', '1'), 12);\n\t}\n\n\t$box = new htmlDiv(null, $row);\n\t$box->setCSSClasses(array('ui-corner-all', 'roundedShadowBox'));\n\tparseHtml(null, $box, array(), false, $tabindex, 'user');\n\n\n\t/**\n\t * Formats an LDAP time string (e.g. from createTimestamp).\n\t *\n\t * @param String $time LDAP time value\n\t * @return String formatted time\n\t */\n\tfunction formatSSLTimestamp($time) {\n\t\tif (!empty($time)) {\n\t\t\t$timeZone = 'UTC';\n\t\t\t$sysTimeZone = @date_default_timezone_get();\n\t\t\tif (!empty($sysTimeZone)) {\n\t\t\t\t$timeZone = $sysTimeZone;\n\t\t\t}\n\t\t\t$date = new DateTime('@' . $time, new DateTimeZone($timeZone));\n\t\t\treturn $date->format('d.m.Y');\n\t\t}\n\t\treturn '';\n\t}\n\n\n\t?>\n\n</form>\n<p><br></p>\n\n</body>\n</html>\n\n", "<?php\nnamespace LAM\\HELP;\n/*\n\n  This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)\n  Copyright (C) 2003 - 2006  Michael Duergner\n                2008 - 2022  Roland Gruber\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n\n  LDAP Account Manager display help pages.\n*/\n\n/**\n * LDAP Account Manager help page.\n *\n * @author Michael Duergner\n * @author Roland Gruber\n * @package Help\n */\n\n/** LDAP connection */\ninclude_once(__DIR__ . \"/../lib/ldap.inc\");\n\n/** configuration */\ninclude_once(__DIR__ . \"/../lib/config.inc\");\n\n/** self service functions */\ninclude_once(__DIR__ . \"/../lib/selfService.inc\");\nif (!empty($_GET['selfService']) && ($_GET['selfService'] === '1')) {\n\tsession_name('SELFSERVICE');\n}\n\nif (strtolower(session_module_name()) == 'files') {\n\tsession_save_path(\"../sess\");\n}\nlam_start_session();\n\n/** status messages */\ninclude_once(__DIR__ . \"/../lib/status.inc\");\n\nsetlanguage();\n\n/** help data */\ninclude_once(__DIR__ . \"/../help/help.inc\"); // Include help/help.inc which provides $helpArray where the help pages are stored\n\n\n/**\n * Print HTML header of the help page.\n */\nfunction echoHTMLHead(): void {\n\techo $_SESSION['header'];\n\t$title = \"LDAP Account Manager Help\";\n\tprintHeaderContents($title, '..');\n\t?>\n\t\t</head>\n\t\t<body>\n\t<?php\n\t// include all JavaScript files\n\tprintJsIncludes('..');\n}\n\n/**\n * Print HTML footer of the help page.\n */\nfunction echoHTMLFoot(): void {\n\t?>\n\t\t</body>\n\t</html>\n\t<?php\n}\n\n/**\n * Print help site for a specific help number.\n *\n * @param array<mixed> $helpEntry the help entry that is to be displayed.\n */\nfunction displayHelp(array $helpEntry): void {\n\techoHTMLHead();\n\techo \"<h1 class=\\\"help\\\">\" . $helpEntry['Headline'] . \"</h1>\\n\";\n\t$format = \"<p class=\\\"help\\\">\" . $helpEntry['Text'] . \"</p>\\n\";\n\tif (isset($helpEntry['attr'])) {\n\t\t$format .= '<br><hr>' . _('Technical name') . ': <i>' . $helpEntry['attr'] . '</i>';\n\t}\n\techo $format;\n\tif(isset($helpEntry['SeeAlso']) && is_array($helpEntry['SeeAlso'])) {\n\t\techo '<p class=\"help\">' . _('See also') . ': <a class=\"helpSeeAlso\" href=\"' . $helpEntry['SeeAlso']['link'] . '\">' . $helpEntry['SeeAlso']['text'] . '</a></p>';\n\t}\n\techoHTMLFoot();\n}\n\n/* If no help number was submitted print error message */\nif (!isset($_GET['HelpNumber'])) {\n\t$errorMessage = \"Sorry no help number submitted.\";\n\techoHTMLHead();\n\tstatusMessage(\"ERROR\", \"\", $errorMessage);\n\techoHTMLFoot();\n\texit;\n}\n\n$helpEntry = array();\n\n// module help\nif (isset($_GET['module']) && !($_GET['module'] == 'main') && !($_GET['module'] == '')) {\n\tinclude_once(__DIR__ . \"/../lib/modules.inc\");\n\tif (isset($_GET['scope'])) {\n\t\t$helpEntry = getHelp($_GET['module'],$_GET['HelpNumber'],$_GET['scope']);\n\t}\n\telse {\n\t\t$helpEntry = getHelp($_GET['module'],$_GET['HelpNumber']);\n\t}\n\tif (!$helpEntry) {\n\t\t$variables = array(htmlspecialchars($_GET['HelpNumber']), htmlspecialchars($_GET['module']));\n\t\t$errorMessage = _(\"Sorry this help id ({bold}%s{endbold}) is not available for this module ({bold}%s{endbold}).\");\n\t\techoHTMLHead();\n\t\tstatusMessage(\"ERROR\", \"\", $errorMessage, $variables);\n\t\techoHTMLFoot();\n\t\texit;\n\t}\n}\n// help entry in help.inc\nelse {\n\t/* If submitted help number is not in help/help.inc print error message */\n\tif (!array_key_exists($_GET['HelpNumber'], $helpArray)) {\n\t\t$variables = array(htmlspecialchars($_GET['HelpNumber']));\n\t\t$errorMessage = _(\"Sorry this help number ({bold}%s{endbold}) is not available.\");\n\t\techoHTMLHead();\n\t\tstatusMessage(\"ERROR\", \"\", $errorMessage, $variables);\n\t\techoHTMLFoot();\n\t\texit;\n\t}\n\telse {\n\t\t$helpEntry = $helpArray[$_GET['HelpNumber']];\n\t}\n}\n\ndisplayHelp($helpEntry);\n", "<?php\nnamespace LAM\\LOGIN;\nuse LAM\\LIB\\TWO_FACTOR\\TwoFactorProviderService;\nuse \\LAMConfig;\nuse \\LAMCfgMain;\nuse \\htmlSpacer;\nuse \\htmlOutputText;\nuse \\htmlSelect;\nuse \\htmlInputField;\nuse \\htmlGroup;\nuse \\htmlInputCheckbox;\nuse \\htmlButton;\nuse \\htmlStatusMessage;\nuse LAMException;\nuse \\Ldap;\nuse \\htmlResponsiveRow;\nuse \\htmlDiv;\nuse ServerProfilePersistenceManager;\n\n/*\n\n  This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)\n  Copyright (C) 2003 - 2006  Michael Duergner\n                2005 - 2022  Roland Gruber\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n*/\n\n/**\n* Login form of LDAP Account Manager.\n*\n* @author Michael Duergner\n* @author Roland Gruber\n* @package main\n*/\n\n/** status messages */\ninclude_once(__DIR__ . \"/../lib/status.inc\");\n\n/** check environment */\ninclude __DIR__ . '/../lib/checkEnvironment.inc';\n\n/** security functions */\ninclude_once(__DIR__ . \"/../lib/security.inc\");\n/** self service functions */\ninclude_once(__DIR__ . \"/../lib/selfService.inc\");\n/** access to configuration options */\ninclude_once(__DIR__ . \"/../lib/config.inc\");\n$licenseValidator = null;\nif (isLAMProVersion()) {\n\tinclude_once(__DIR__ . \"/../lib/env.inc\");\n\t$licenseValidator = new \\LAM\\ENV\\LAMLicenseValidator();\n\t$licenseValidator->validateAndRedirect('config/mainlogin.php?invalidLicense=1', 'config/mainlogin.php?invalidLicense=2');\n}\n\n// set session save path\nif (strtolower(session_module_name()) == 'files') {\n\tsession_save_path(dirname(__FILE__) . '/../sess');\n}\n\n// start empty session and change ID for security reasons\nlam_start_session();\nsession_destroy();\nlam_start_session();\nsession_regenerate_id(true);\n\n$serverProfilePersistenceManager = new ServerProfilePersistenceManager();\n$profiles = array();\ntry {\n\t$profiles = $serverProfilePersistenceManager->getProfiles();\n} catch (LAMException $e) {\n\tlogNewMessage(LOG_ERR, 'Unable to read server profiles: ' . $e->getTitle());\n}\n\n// save last selected login profile\nif (isset($_GET['useProfile'])) {\n\tif (in_array($_GET['useProfile'], $profiles)) {\n\t\tsetcookie(\"lam_default_profile\", $_GET['useProfile'], time() + 365*60*60*24, '/', '', false, true);\n\t}\n\telse {\n\t\tunset($_GET['useProfile']);\n\t}\n}\n\n// save last selected language\nif (isset($_POST['language'])) {\n\tsetcookie('lam_last_language', htmlspecialchars($_POST['language']), time() + 365*60*60*24, '/', '', false, true);\n}\n\n// init some session variables\n$default_Config = new LAMCfgMain();\n$_SESSION[\"cfgMain\"] = $default_Config;\nsetSSLCaCert();\n\n$default_Profile = $default_Config->default;\nif (isset($_COOKIE[\"lam_default_profile\"]) && in_array($_COOKIE[\"lam_default_profile\"], $profiles)) {\n\t$default_Profile = $_COOKIE[\"lam_default_profile\"];\n}\n\n$error_message = null;\n\ntry {\n    // Reload login page after a profile change\n\tif (isset($_GET['useProfile']) && in_array($_GET['useProfile'], $profiles)) {\n\t\tlogNewMessage(LOG_DEBUG, \"Change server profile to \" . $_GET['useProfile']);\n\t\t$_SESSION['config'] = $serverProfilePersistenceManager->loadProfile($_GET['useProfile']);\n\t} // Load login page\n    elseif (!empty($default_Profile) && in_array($default_Profile, $profiles)) {\n\t\t$_SESSION[\"config\"] = $serverProfilePersistenceManager->loadProfile($default_Profile);\n\t} // use first profile as fallback\n\telse if (sizeof($profiles) > 0) {\n\t\t$_SESSION[\"config\"] = $serverProfilePersistenceManager->loadProfile($profiles[0]);\n\t} else {\n\t\t$_SESSION[\"config\"] = null;\n\t}\n}\ncatch (LAMException $e) {\n    $error_message = $e->getTitle();\n}\n\nif (!isset($default_Config->default) || !in_array($default_Config->default, $profiles)) {\n\t$error_message = _('No default profile set. Please set it in the server profile configuration.');\n}\n\n$possibleLanguages = getLanguages();\n$encoding = 'UTF-8';\nif (isset($_COOKIE['lam_last_language'])) {\n\tforeach ($possibleLanguages as $lang) {\n\t\tif (strpos($_COOKIE['lam_last_language'], $lang->code) === 0) {\n\t\t\t$_SESSION['language'] = $lang->code;\n\t\t\t$encoding = $lang->encoding;\n\t\t\tbreak;\n\t\t}\n\t}\n}\nelseif (!empty($_SESSION[\"config\"])) {\n\t$defaultLang = $_SESSION[\"config\"]->get_defaultLanguage();\n\tforeach ($possibleLanguages as $lang) {\n\t\tif (strpos($defaultLang, $lang->code) === 0) {\n\t\t\t$_SESSION['language'] = $lang->code;\n\t\t\t$encoding = $lang->encoding;\n\t\t\tbreak;\n\t\t}\n\t}\n}\nelse {\n\t$_SESSION['language'] = 'en_GB.utf8';\n}\nif (isset($_POST['language'])) {\n\tforeach ($possibleLanguages as $lang) {\n\t\tif (strpos($_POST['language'], $lang->code) === 0) {\n\t\t\t$_SESSION['language'] = $lang->code;\n\t\t\t$encoding = $lang->encoding;\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\n$_SESSION['header'] = \"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01 Transitional//EN\\\" \\\"http://www.w3.org/TR/html4/loose.dtd\\\">\\n\\n\";\n$_SESSION['header'] .= \"<html>\\n<head>\\n\";\n$_SESSION['header'] .= \"<meta name=\\\"robots\\\" content=\\\"noindex, nofollow\\\">\\n\";\n$_SESSION['header'] .= \"<meta http-equiv=\\\"content-type\\\" content=\\\"text/html; charset=\" . $encoding . \"\\\">\\n\";\n$_SESSION['header'] .= \"<meta http-equiv=\\\"pragma\\\" content=\\\"no-cache\\\">\\n\t\t<meta http-equiv=\\\"cache-control\\\" content=\\\"no-cache\\\">\";\n$manifestUrl = str_replace('/templates/login.php', '', getCallingURL());\n$manifestUrl = preg_replace('/http(s)?:\\\\/\\\\/([^\\\\/])+/', '', $manifestUrl);\n$manifestUrl = preg_replace('/\\\\?.*/', '', $manifestUrl);\n$_SESSION['header'] .= '<link rel=\"manifest\" href=\"' . $manifestUrl . '/templates/manifest.php\" crossorigin=\"use-credentials\">';\n\nsetlanguage(); // setting correct language\n\n/**\n * Displays the login window.\n *\n * @param \\LAM\\ENV\\LAMLicenseValidator $licenseValidator license validator\n * @param string $error_message error message to display\n * @param string $errorDetails error details\n * @param string $extraMessage extra message that is shown as info\n * @throws LAMException error rendering login page\n */\nfunction display_LoginPage($licenseValidator, $error_message, $errorDetails = null, $extraMessage = null): void {\n\t$config_object = $_SESSION['config'];\n\t$cfgMain = $_SESSION[\"cfgMain\"];\n\tlogNewMessage(LOG_DEBUG, \"Display login page\");\n\t// generate 256 bit key and initialization vector for user/passwd-encryption\n\tif (function_exists('openssl_random_pseudo_bytes') && ($cfgMain->encryptSession == 'true')) {\n\t\t$key = openssl_random_pseudo_bytes(32);\n\t\t$iv = openssl_random_pseudo_bytes(16);\n\t\t// save both in cookie\n\t\tsetcookie(\"Key\", base64_encode($key), 0, \"/\", '', false, true);\n\t\tsetcookie(\"IV\", base64_encode($iv), 0, \"/\", '', false, true);\n\t}\n\n\t$serverProfilePersistenceManager = new ServerProfilePersistenceManager();\n\t$profiles = $serverProfilePersistenceManager->getProfiles();\n\n\techo $_SESSION[\"header\"];\n\tprintHeaderContents('LDAP Account Manager', '..');\n\t?>\n\t</head>\n\t<body>\n\t<?php\n\t// include all JavaScript files\n\tprintJsIncludes('..');\n\n\tif (isLAMProVersion() && $licenseValidator->isEvaluationLicense()) {\n\t\tStatusMessage('INFO', _('Evaluation Licence'));\n\t}\n\tdisplayLoginHeader();\n\n\t\tif (!empty($config_object)) {\n\t\t\t// check extensions\n\t\t\t$extList = getRequiredExtensions();\n\t\t\tforeach ($extList as $extension) {\n\t\t\t\tif (!extension_loaded($extension)) {\n\t\t\t\t\tStatusMessage(\"ERROR\", \"A required PHP extension is missing!\", $extension);\n\t\t\t\t\techo \"<br>\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t// check TLS\n\t\t\t$useTLS = $config_object->getUseTLS();\n\t\t\tif (isset($useTLS) && ($useTLS == \"yes\")) {\n\t\t\t\tif (!function_exists('ldap_start_tls')) {\n\t\t\t\t\tStatusMessage(\"ERROR\", \"Your PHP installation does not support TLS encryption!\");\n\t\t\t\t\techo \"<br>\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tStatusMessage('WARN', _('Please enter the configuration and create a server profile.'));\n\t\t}\n\t\t// check if session expired\n\t\tif (isset($_GET['expired'])) {\n\t\t\tStatusMessage(\"ERROR\", _(\"Your session expired, please log in again.\"));\n\t\t\techo \"<br>\";\n\t\t}\n\t\t// check if main config was saved\n\t\tif (isset($_GET['confMainSavedOk'])) {\n\t\t\tStatusMessage(\"INFO\", _(\"Your settings were successfully saved.\"));\n\t\t\techo \"<br>\";\n\t\t}\n\t\t// check if a server profile was saved\n\t\tif (isset($_GET['configSaveOk'])) {\n\t\t\tStatusMessage(\"INFO\", _(\"Your settings were successfully saved.\"), htmlspecialchars($_GET['configSaveFile']));\n\t\t\techo \"<br>\";\n\t\t}\n\t\telseif (isset($_GET['configSaveFailed'])) {\n\t\t\tStatusMessage(\"ERROR\", _(\"Cannot open config file!\"), htmlspecialchars($_GET['configSaveFile']));\n\t\t\techo \"<br>\";\n\t\t}\n\t\t// check if self service was saved\n\t\tif (isset($_GET['selfserviceSaveOk'])) {\n\t\t\tStatusMessage(\"INFO\", _(\"Your settings were successfully saved.\"), htmlspecialchars($_GET['selfserviceSaveOk']));\n\t\t\techo \"<br>\";\n\t\t}\n\t\tif (isset($_GET['2factor']) && ($_GET['2factor'] == 'error')) {\n\t\t\tStatusMessage('ERROR', _(\"Unable to start 2-factor authentication.\"));\n\t\t\techo \"<br>\";\n\t\t}\n\t\telseif (isset($_GET['2factor']) && ($_GET['2factor'] == 'noToken')) {\n\t\t\tStatusMessage('ERROR', _(\"Unable to start 2-factor authentication because no tokens were found.\"));\n\t\t\techo \"<br>\";\n\t\t}\n\t\tif (!empty($config_object)) {\n\t\t?>\n\t\t<br><br><br>\n\t\t<div class=\"centeredTable\">\n\t\t<div class=\"roundedShadowBox limitWidth\" style=\"position:relative; z-index:5;\">\n\t\t<table border=\"0\" rules=\"none\" bgcolor=\"white\" class=\"ui-corner-all\">\n\t\t\t<tr>\n\t\t\t\t<td style=\"border-style:none\">\n\t\t\t\t\t<form action=\"login.php\" method=\"post\">\n\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t$tabindex = 1;\n\t\t\t\t\t\t\t$row = new htmlResponsiveRow();\n\t\t\t\t\t\t\t// user name\n\t\t\t\t\t\t\t$row->addLabel(new htmlOutputText(_(\"User name\")));\n\t\t\t\t\t\t\tif ($config_object->getLoginMethod() == LAMConfig::LOGIN_LIST) {\n\t\t\t\t\t\t\t\t$admins = $config_object->get_Admins();\n\t\t\t\t\t\t\t\t$adminList = array();\n\t\t\t\t\t\t\t\tforeach ($admins as $admin) {\n\t\t\t\t\t\t\t\t\t$text = explode(\",\", $admin);\n\t\t\t\t\t\t\t\t\t$text = explode(\"=\", $text[0]);\n\t\t\t\t\t\t\t\t\tif (isset($text[1])) {\n\t\t\t\t\t\t\t\t\t\t$adminList[$text[1]] = $admin;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\t$adminList[$text[0]] = $admin;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t$selectedAdmin = array();\n\t\t\t\t\t\t\t\tif (isset($_POST['username']) && in_array($_POST['username'], $adminList)) {\n\t\t\t\t\t\t\t\t\t$selectedAdmin = array($_POST['username']);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t$userSelect = new htmlSelect('username', $adminList, $selectedAdmin);\n\t\t\t\t\t\t\t\t$userSelect->setHasDescriptiveElements(true);\n\t\t\t\t\t\t\t\t$userSelect->setTransformSingleSelect(false);\n\t\t\t\t\t\t\t\tif (empty($_COOKIE['lam_login_name'])) {\n\t\t\t\t\t\t\t\t\t$userSelect->setCSSClasses(array('lam-initial-focus'));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t$row->addField(new htmlDiv(null, $userSelect));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tif ($config_object->getHttpAuthentication() == 'true') {\n\t\t\t\t\t\t\t\t\t$httpAuth = new htmlDiv(null, new htmlOutputText($_SERVER['PHP_AUTH_USER'] . '&nbsp;', false));\n\t\t\t\t\t\t\t\t\t$httpAuth->setCSSClasses(array('text-left', 'margin3'));\n\t\t\t\t\t\t\t\t\t$row->addField($httpAuth);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t$user = '';\n\t\t\t\t\t\t\t\t\tif (isset($_COOKIE[\"lam_login_name\"])) {\n\t\t\t\t\t\t\t\t\t\t$user = $_COOKIE[\"lam_login_name\"];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t$userNameInput = new htmlInputField('username', $user);\n\t\t\t\t\t\t\t\t\tif (empty($_COOKIE['lam_login_name'])) {\n\t\t\t\t\t\t\t\t\t\t$userNameInput->setCSSClasses(array('lam-initial-focus'));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t$userInput = new htmlDiv(null, $userNameInput);\n\t\t\t\t\t\t\t\t\t$row->addField($userInput);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// password\n\t\t\t\t\t\t\t$row->addLabel(new \\htmlOutputText(_(\"Password\")));\n\t\t\t\t\t\t\tif (($config_object->getLoginMethod() == LAMConfig::LOGIN_SEARCH) && ($config_object->getHttpAuthentication() == 'true')) {\n\t\t\t\t\t\t\t\t$passwordInputFake = new htmlDiv(null, new htmlOutputText('**********'));\n\t\t\t\t\t\t\t\t$passwordInputFake->setCSSClasses(array('text-left', 'margin3'));\n\t\t\t\t\t\t\t\t$row->addField($passwordInputFake);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t$passwordInput = new htmlInputField('passwd');\n\t\t\t\t\t\t\t\t$passwordInput->setIsPassword(true);\n\t\t\t\t\t\t\t\tif (($config_object->getLoginMethod() == LAMConfig::LOGIN_SEARCH) && !empty($_COOKIE['lam_login_name'])) {\n\t\t\t\t\t\t\t\t\t$passwordInput->setCSSClasses(array('lam-initial-focus'));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t$row->addField($passwordInput);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// language\n\t\t\t\t\t\t\t$row->addLabel(new htmlOutputText(_(\"Language\")));\n\t\t\t\t\t\t\t$possibleLanguages = getLanguages();\n\t\t\t\t\t\t\t$languageList = array();\n\t\t\t\t\t\t\t$defaultLanguage = array();\n\t\t\t\t\t\t\tforeach ($possibleLanguages as $lang) {\n\t\t\t\t\t\t\t\t$languageList[$lang->description] = $lang->code;\n\t\t\t\t\t\t\t\tif (strpos(trim($_SESSION[\"language\"]), $lang->code) === 0) {\n\t\t\t\t\t\t\t\t\t$defaultLanguage[] = $lang->code;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$languageSelect = new htmlSelect('language', $languageList, $defaultLanguage);\n\t\t\t\t\t\t\t$languageSelect->setHasDescriptiveElements(true);\n\t\t\t\t\t\t\t$row->addField($languageSelect, true);\n\t\t\t\t\t\t\t// remember login user\n\t\t\t\t\t\t\tif (($config_object->getLoginMethod() == LAMConfig::LOGIN_SEARCH) && !($config_object->getHttpAuthentication() == 'true')) {\n\t\t\t\t\t\t\t\t$row->add(new htmlOutputText('&nbsp;', false), 0, 6, 6);\n\t\t\t\t\t\t\t\t$rememberGroup = new htmlGroup();\n\t\t\t\t\t\t\t\t$doRemember = false;\n\t\t\t\t\t\t\t\tif (isset($_COOKIE[\"lam_login_name\"])) {\n\t\t\t\t\t\t\t\t\t$doRemember = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t$rememberGroup->addElement(new htmlInputCheckbox('rememberLogin', $doRemember));\n\t\t\t\t\t\t\t\t$rememberGroup->addElement(new htmlSpacer('1px', null));\n\t\t\t\t\t\t\t\t$rememberGroup->addElement(new htmlOutputText(_('Remember user name')));\n\t\t\t\t\t\t\t\t$rememberDiv = new htmlDiv(null, $rememberGroup);\n\t\t\t\t\t\t\t\t$rememberDiv->setCSSClasses(array('text-left', 'margin3'));\n\t\t\t\t\t\t\t\t$row->add($rememberDiv, 12, 6, 6);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// login button\n\t\t\t\t\t\t\t$row->add(new htmlSpacer(null, '20px'), 12);\n\t\t\t\t\t\t\t$loginButton = new htmlButton('checklogin', _(\"Login\"));\n\t\t\t\t\t\t\t$loginButton->setCSSClasses(array('lam-primary'));\n\t\t\t\t\t\t\t$row->add($loginButton);\n\n\t\t\t\t\t\t\tparseHtml(null, $row, array(), false, $tabindex, 'user');\n\t\t\t\t\t\t?>\n\t\t\t\t\t</form>\n\t\t\t\t</td>\n\t\t\t\t<td class=\"loginRightBox hide-for-small\" style=\"border-style:none\">\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td colspan=\"2\" style=\"border-style:none;\">\n                    <?php\n                    $row = new htmlResponsiveRow();\n                    // error message\n                    if (!empty($error_message)) {\n\t                    $row->add(new \\htmlSpacer(null, '5px'), 12);\n\t                    $message = new htmlStatusMessage('ERROR', $error_message, $errorDetails);\n\t                    $row->add($message, 12);\n                    }\n                    if (!empty($extraMessage)) {\n\t                    $extraMessage = new htmlStatusMessage('INFO', $extraMessage);\n\t                    $row->add($extraMessage, 12);\n                    }\n                    parseHtml(null, $row, array(), false, $tabindex, 'user');\n                    ?>\n\t\t\t\t\t<hr class=\"margin20\">\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td style=\"border-style:none;\">\n\t\t\t\t\t<form action=\"login.php\" method=\"post\">\n\t\t\t\t\t<?php\n\t\t\t\t\t\t$row = new htmlResponsiveRow();\n\t\t\t\t\t\t$row->addLabel(new htmlOutputText(_(\"LDAP server\")));\n\t\t\t\t\t\t$serverUrl = new htmlOutputText($config_object->getServerDisplayNameGUI());\n\t\t\t\t\t\t$serverUrlDiv = new htmlDiv(null, $serverUrl);\n\t\t\t\t\t\t$serverUrlDiv->setCSSClasses(array('text-left', 'margin3'));\n\t\t\t\t\t\t$row->addField($serverUrlDiv);\n\t\t\t\t\t\t$row->addLabel(new htmlOutputText(_(\"Server profile\")));\n\t\t\t\t\t\t$profileSelect = new htmlSelect('profile', $profiles, array($_SESSION['config']->getName()));\n\t\t\t\t\t\t$profileSelect->setOnchangeEvent('loginProfileChanged(this)');\n\t\t\t\t\t\t$row->addField($profileSelect);\n\n\t\t\t\t\t\tparseHtml(null, $row, array(), true, $tabindex, 'user');\n\t\t\t\t\t?>\n\t\t\t\t\t</form>\n\t\t\t\t</td>\n\t\t\t\t<td class=\"loginRightBox hide-for-small\" style=\"border-style:none\">\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</table>\n\t\t</div>\n\t\t</div>\n\t\t<?php\n\t\t}\n\t\t?>\n\t\t<br><br>\n\t\t<?PHP\n\t\t\tif (isLAMProVersion() && $licenseValidator->isExpiringSoon()) {\n\t\t\t\t$expirationDate = $licenseValidator->getLicense()->getExpirationDate()->format('Y-m-d');\n\t\t\t\t$expirationTimeStamp = $licenseValidator->getLicense()->getExpirationDate()->getTimestamp();\n\t\t\t\tif ($cfgMain->showLicenseWarningOnScreen()) {\n\t\t\t\t\t$licenseMessage = sprintf(_('Your licence expires on %s. You need to purchase a new licence to be able to use LAM Pro after this date.'), $expirationDate);\n\t\t\t\t\tStatusMessage('WARN', $licenseMessage);\n\t\t\t\t}\n\t\t\t\tif ($cfgMain->sendLicenseWarningByEmail() && !$cfgMain->wasLicenseWarningSent($expirationTimeStamp)) {\n\t\t\t\t    $cfgMain->licenseEmailDateSent = $expirationTimeStamp;\n\t\t\t\t    $cfgMain->save();\n\t\t\t\t\t$mailer = new \\LAM\\ENV\\LicenseWarningMailer($cfgMain);\n\t\t\t\t\t$mailer->sendMail($expirationDate);\n\t\t\t\t}\n\t\t\t}\n\t\t?>\n\t\t<br><br>\n\t</body>\n</html>\n<?php\n}\n\n/**\n * Displays the header on the login page.\n */\nfunction displayLoginHeader() : void {\n    ?>\n    <div id=\"lam-topnav\" class=\"lam-header\">\n        <div class=\"lam-header-left lam-menu-stay\">\n            <a href=\"https://www.ldap-account-manager.org/\" target=\"new_window\">\n                <img class=\"align-middle\" width=\"24\" height=\"24\" alt=\"help\" src=\"../graphics/logo24.png\">\n                <span class=\"hide-on-mobile\">\n                        <?php\n                        echo getLAMVersionText();\n                        ?>\n                </span>\n            </a>\n            <span class=\"hide-on-mobile lam-margin-small\">\n                        &nbsp;&nbsp;&nbsp;&nbsp;\n\t\t\t    <a href=\"http://www.ldap-account-manager.org/lamcms/lamPro\"> <?php if (!isLAMProVersion()) { echo _(\"Want more features? Get LAM Pro!\");} ?> </a>\n\t\t\t</span>\n        </div>\n        <a class=\"lam-header-right lam-menu-icon hide-on-tablet\" href=\"javascript:void(0);\" class=\"icon\" onclick=\"window.lam.topmenu.toggle();\">\n            <img class=\"align-middle\" width=\"16\" height=\"16\" alt=\"menu\" src=\"../graphics/menu.svg\">\n            <span class=\"padding0\"></span>\n        </a>\n        <div class=\"lam-header-right lam-header-menublock\">\n            <a class=\"lam-menu-entry\" href=\"config/index.php\" target=\"_top\">\n                <span class=\"padding0\"><?php echo _(\"LAM configuration\") ?></span>\n            </a>\n            <?php\n            if (is_dir(dirname(__FILE__) . '/../docs/manual')) {\n                ?>\n                <a class=\"lam-menu-entry\" target=\"_blank\" href=\"../docs/manual/index.html\">\n                    <span class=\"padding0\"><?php echo _(\"Help\") ?></span>\n                </a>\n                <?php\n            }\n            ?>\n        </div>\n\n    </div>\n\t<br>\n    <?php\n}\n\n// checking if the submitted username/password is correct.\nif (isset($_POST['checklogin'])) {\n\tinclude_once(__DIR__ . \"/../lib/ldap.inc\"); // Include ldap.php which provides Ldap class\n\n\t$_SESSION['ldap'] = new Ldap($_SESSION['config']); // Create new Ldap object\n\n\t$clientSource = $_SERVER['REMOTE_ADDR'];\n\tif (isset($_SERVER['REMOTE_HOST'])) {\n\t\t$clientSource .= '/' . $_SERVER['REMOTE_HOST'];\n\t}\n\tif (($_SESSION['config']->getLoginMethod() == LAMConfig::LOGIN_SEARCH) && ($_SESSION['config']->getHttpAuthentication() == 'true')) {\n\t\t$username = $_SERVER['PHP_AUTH_USER'];\n\t\t$password = $_SERVER['PHP_AUTH_PW'];\n\t}\n\telse {\n\t\tif (isset($_POST['rememberLogin']) && ($_POST['rememberLogin'] == 'on')) {\n\t\t\tsetcookie('lam_login_name', $_POST['username'], time() + 60*60*24*365, '/', '', false, true);\n\t\t}\n\t\telse if (isset($_COOKIE['lam_login_name']) && ($_SESSION['config']->getLoginMethod() == LAMConfig::LOGIN_SEARCH)) {\n\t\t\tsetcookie('lam_login_name', '', time() + 60*60*24*365, '/', '', false, true);\n\t\t}\n\t\tif($_POST['passwd'] == \"\") {\n\t\t\tlogNewMessage(LOG_DEBUG, \"Empty password for login\");\n\t\t\t$error_message = _(\"Empty password submitted. Please try again.\");\n\t\t\theader(\"HTTP/1.1 403 Forbidden\");\n\t\t\tdisplay_LoginPage($licenseValidator, $error_message); // Empty password submitted. Return to login page.\n\t\t\texit();\n\t\t}\n\t\t$username = $_POST['username'];\n\t\t$password = $_POST['passwd'];\n\t}\n\t// search user in LDAP if needed\n    $searchLDAP = null;\n\tif ($_SESSION['config']->getLoginMethod() == LAMConfig::LOGIN_SEARCH) {\n\t\t$searchFilter = $_SESSION['config']->getLoginSearchFilter();\n\t\t$searchFilter = str_replace('%USER%', $username, $searchFilter);\n\t\t$searchDN = '';\n\t\t$searchPassword = '';\n\t\t$configLoginSearchDn = $_SESSION['config']->getLoginSearchDN();\n\t\tif (!empty($configLoginSearchDn)) {\n\t\t\t$searchDN = $configLoginSearchDn;\n\t\t\t$searchPassword = $_SESSION['config']->getLoginSearchPassword();\n\t\t}\n\t\t$searchSuccess = true;\n\t\t$searchError = '';\n\t\t$searchLDAP = new Ldap($_SESSION['config']);\n\t\ttry {\n\t\t\t$searchLDAP->connect($searchDN, $searchPassword, true);\n            $searchResult = ldap_search($searchLDAP->server(), $_SESSION['config']->getLoginSearchSuffix(), $searchFilter, array('dn'), 0, 0, 0, LDAP_DEREF_NEVER);\n            if ($searchResult) {\n                $searchInfo = ldap_get_entries($searchLDAP->server(), $searchResult);\n                if ($searchInfo !== false) {\n                    cleanLDAPResult($searchInfo);\n                    if (empty($searchInfo)) {\n                        $searchSuccess = false;\n                        $searchError = _('Wrong password/user name combination. Please try again.');\n\t                    header(\"HTTP/1.1 403 Forbidden\");\n                    }\n                    elseif (sizeof($searchInfo) > 1) {\n                        $searchSuccess = false;\n                        $searchError = _('The given user name matches multiple LDAP entries.');\n\t                    header(\"HTTP/1.1 403 Forbidden\");\n                    }\n                    else {\n                        $username = $searchInfo[0]['dn'];\n                    }\n                }\n                else {\n                    $searchSuccess = false;\n                    $searchError = _('Unable to find the user name in LDAP.');\n\t                header(\"HTTP/1.1 403 Forbidden\");\n                    if (ldap_errno($searchLDAP->server()) != 0) {\n                        $searchError .= ' ' . getDefaultLDAPErrorString($searchLDAP->server());\n                    }\n                }\n            }\n            else {\n                $searchSuccess = false;\n                $searchError = _('Unable to find the user name in LDAP.');\n\t            header(\"HTTP/1.1 403 Forbidden\");\n                if (ldap_errno($searchLDAP->server()) != 0) {\n                    $searchError .= ' ' . getDefaultLDAPErrorString($searchLDAP->server());\n                }\n            }\n\t\t\tif (!$searchSuccess) {\n\t\t\t\t$error_message = $searchError;\n\t\t\t\tlogNewMessage(LOG_ERR, 'User ' . $username . ' (' . $clientSource . ') failed to log in. ' . $searchError . '');\n\t\t\t\t$searchLDAP->close();\n\t\t\t\tdisplay_LoginPage($licenseValidator, $error_message);\n\t\t\t\texit();\n\t\t\t}\n\t\t\t$searchLDAP->close();\n\t\t}\n        catch (LAMException $e) {\n\t        $searchLDAP->close();\n\t        display_LoginPage($licenseValidator, $e->getTitle(), $e->getMessage());\n\t        exit();\n        }\n\t}\n\t// try to connect to LDAP\n    try {\n\t    $_SESSION['ldap']->connect($username, $password); // Connect to LDAP server for verifying username/password\n\t\t$_SESSION['loggedIn'] = true;\n\t\t// set security settings for session\n\t\t$_SESSION['sec_session_id'] = session_id();\n\t\t$_SESSION['sec_client_ip'] = $_SERVER['REMOTE_ADDR'];\n\t\t$_SESSION['sec_sessionTime'] = time();\n\t\taddSecurityTokenToSession();\n\t\t// logging\n\t\tlogNewMessage(LOG_NOTICE, 'User ' . $username . ' (' . $clientSource . ') successfully logged in.');\n\t\t// Load main frame or 2 factor page\n\t\tif ($_SESSION['config']->getTwoFactorAuthentication() == TwoFactorProviderService::TWO_FACTOR_NONE) {\n\t\t\tmetaRefresh(\"./main.php\");\n\t\t}\n\t\telse {\n\t\t\t$_SESSION['2factorRequired'] = true;\n\t\t\tmetaRefresh(\"./login2Factor.php\");\n\t\t}\n\t\tdie();\n\t}\n\tcatch (LAMException $e) {\n\t\theader(\"HTTP/1.1 403 Forbidden\");\n\t\t$extraMessage = null;\n\t\tif (($searchLDAP !== null) && ($e->getLdapErrorCode() == 49)) {\n\t\t\t$extraMessage = getExtraInvalidCredentialsMessage($searchLDAP->server(), $username);\n\t\t\t$searchLDAP->close();\n\t\t}\n\t\tdisplay_LoginPage($licenseValidator, $e->getTitle(), $e->getMessage(), $extraMessage);\n\t\texit();\n    }\n}\n\n//displays the login window\ntry {\n\tdisplay_LoginPage($licenseValidator, $error_message);\n} catch (LAMException $e) {\n    logNewMessage(LOG_ERR, 'Unable to render login page: ' . $e->getTitle());\n}\n", "<?php\n/*\n\n  This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)\n  Copyright (C) 2003 - 2019  Roland Gruber\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n*/\n\n/**\n* User is logged off from LDAP server, session is destroyed.\n*\n* @package main\n* @author Roland Gruber\n*/\n\n\n// delete key and iv in cookie\nif (function_exists('openssl_random_pseudo_bytes')) {\n\tsetcookie(\"Key\", \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", 0, \"/\", '', false, true);\n\tsetcookie(\"IV\", \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", 0, \"/\", '', false, true);\n}\n\n/** security functions */\ninclude_once(__DIR__ . \"/../lib/security.inc\");\n/** Used to display status messages */\ninclude_once(__DIR__ . \"/../lib/status.inc\");\n/** LDAP settings are deleted at logout */\ninclude_once(__DIR__ . \"/../lib/ldap.inc\");\n\n// start session\nstartSecureSession();\n\n// log message\nif (isset($_SESSION['loggedIn']) || ($_SESSION['loggedIn'] === true)) {\n\tlogNewMessage(LOG_NOTICE, 'User logged off.');\n\n\t// close LDAP connection\n\tif (!empty($_SESSION[\"ldap\"])) {\n\t\t$_SESSION[\"ldap\"]->destroy();\n\t}\n}\n\nsetlanguage();\n\n// destroy session\nsession_destroy();\nunset($_SESSION);\n\n// redirect to login page\nmetaRefresh('login.php');\n?>\n", "<?php\nnamespace LAM\\PWA;\n/*\n\n  This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)\n  Copyright (C) 2019  Roland Gruber\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n*/\n\n/**\n* Manifest for progressive web app.\n*\n* @author Roland Gruber\n* @package tools\n*/\n\n/** security functions */\ninclude_once(__DIR__ . \"/../lib/security.inc\");\n/** common functions */\ninclude_once(__DIR__ . \"/../lib/account.inc\");\n\nif (!headers_sent()) {\n\theader('Content-Type: application/json; charset=utf-8');\n}\n\n$baseUrl = getCallingURL();\n$baseUrl = str_replace('/templates/manifest.php', '', $baseUrl);\n$baseUrl = preg_replace('/\\\\?.*/', '', $baseUrl);\n$baseUrl = preg_replace('/http(s)?:\\\\/\\\\/([^\\\\/])+/', '', $baseUrl);\n\necho '{\n  \"short_name\": \"LAM\",\n  \"name\": \"LDAP Account Manager\",\n  \"icons\": [\n    {\n      \"src\": \"' . $baseUrl . '/graphics/logo_192x192.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"192x192\"\n    },\n    {\n      \"src\": \"' . $baseUrl . '/graphics/logo_512x512.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"512x512\"\n    }\n  ],\n  \"start_url\": \"' . $baseUrl . '/templates/login.php\",\n  \"display\": \"standalone\"\n}';\n", "Couldn't find the requested file /lam/tests/lib/ModulesTest.php in LDAPAccountManager/lam.", "Options -Indexes\n"], "fixing_code": ["\nAlias /lam /usr/share/ldap-account-manager\n\n<Directory /usr/share/ldap-account-manager>\n  Options +FollowSymLinks\n  AllowOverride All\n  Require all granted\n  DirectoryIndex index.html\n</Directory>\n\n<Directory /var/lib/ldap-account-manager/tmp>\n  Options -Indexes\n  <Files ~ \".*\\.php.*\">\n    Require all denied\n  </Files>\n  <Files ~ \".*\\.inc\">\n    Require all denied\n  </Files>\n</Directory>\n\n<Directory /usr/share/ldap-account-manager/tmp>\n  Options -Indexes\n  <Files ~ \".*\\.php.*\">\n    Require all denied\n  </Files>\n  <Files ~ \".*\\.inc\">\n    Require all denied\n  </Files>\n</Directory>\n\n<Directory /var/lib/ldap-account-manager/tmp/internal>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n<Directory /usr/share/ldap-account-manager/tmp/internal>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n<Directory /var/lib/ldap-account-manager/sess>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n<Directory /usr/share/ldap-account-manager/sess>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n<Directory /var/lib/ldap-account-manager/config>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n<Directory /usr/share/ldap-account-manager/config>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n<Directory /usr/share/ldap-account-manager/lib>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n<Directory /usr/share/ldap-account-manager/help>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n<Directory /usr/share/ldap-account-manager/locale>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n", "location /lam {\n\tindex index.html;\n\talias /usr/share/ldap-account-manager;\n\tautoindex off;\n\n\tlocation ~ /lam/tmp/.*\\.(php|inc)$ {\n\t\tdeny all;\n\t\treturn 403;\n\t}\n\n\tlocation ~ /lam/(tmp/internal|sess|config|lib|help|locale) {\n\t\tdeny all;\n\t\treturn 403;\n\t}\n\n\tlocation ~ \\.php$ {\n\t\tfastcgi_split_path_info ^(.+\\.php)(/.+)$;\n\t\tfastcgi_pass unix:/var/run/php7-fpm.sock;\n\t\tfastcgi_index index.php;\n\t\tinclude fastcgi_params;\n\t\tfastcgi_param SCRIPT_FILENAME $request_filename;\n\t}\n\n}\n", "\nAlias /lam /usr/share/ldap-account-manager\n\n<Directory /usr/share/ldap-account-manager>\n  Options +FollowSymLinks\n  AllowOverride All\n  Require all granted\n  DirectoryIndex index.html\n</Directory>\n\n<Directory /var/lib/ldap-account-manager/tmp>\n  Options -Indexes\n  <Files ~ \".*\\.php.*\">\n    Require all denied\n  </Files>\n  <Files ~ \".*\\.inc\">\n    Require all denied\n  </Files>\n</Directory>\n\n<Directory /usr/share/ldap-account-manager/tmp>\n  Options -Indexes\n  <Files ~ \".*\\.php.*\">\n    Require all denied\n  </Files>\n  <Files ~ \".*\\.inc\">\n    Require all denied\n  </Files>\n</Directory>\n\n<Directory /var/lib/ldap-account-manager/tmp/internal>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n<Directory /usr/share/ldap-account-manager/tmp/internal>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n<Directory /var/lib/ldap-account-manager/sess>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n<Directory /usr/share/ldap-account-manager/sess>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n<Directory /var/lib/ldap-account-manager/config>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n<Directory /usr/share/ldap-account-manager/config>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n<Directory /usr/share/ldap-account-manager/lib>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n<Directory /usr/share/ldap-account-manager/help>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n<Directory /usr/share/ldap-account-manager/locale>\n  Options -Indexes\n  Require all denied\n</Directory>\n\n", "location /lam {\n\tindex index.html;\n\talias /usr/share/ldap-account-manager;\n\tautoindex off;\n\n\tlocation ~ /lam/tmp/.*\\.(php|inc)$ {\n\t\tdeny all;\n\t\treturn 403;\n\t}\n\n\tlocation ~ /lam/(tmp/internal|sess|config|lib|help|locale) {\n\t\tdeny all;\n\t\treturn 403;\n\t}\n\n\tlocation ~ \\.php$ {\n\t\tinclude snippets/fastcgi-php.conf;\n\t\tfastcgi_pass unix:/var/run/php/php7.4-fpm.sock;\n\t\tfastcgi_param SCRIPT_FILENAME $request_filename;\n\t}\n\n}\n", "27.06.2022 8.0\n  - PHP 8.1 compatibility\n  - Extended user account status and locking options\n  - Unix: added Gecos to profile editor\n  - 389ds: added hints why login failed if account is locked/deactivated/expired\n  - Removed Zarafa support (please switch to Kopano)\n  - Tree view: display binary data as base64 encoded text\n  - Tree view: better support for move operations and ordered attributes\n  - LAM Pro:\n   -> New captcha providers: hCaptcha and Friendly Captcha\n   -> PPolicy: allow to specify unlock value for \"pwdAccountLockedTime\"\n  - Fixed bugs:\n   -> Hidden account is displayed (257)\n   -> Change of RDN failed for OpenLDAP entries\n   -> Tree view issues with browser auto-completion (176)\n   -> Unauthenticated Arbitrary Object Instantiation / Unauthenticated Remote Code Execution (GHSA-r387-grjx-qgvw, CVE-2022-31084)\n   -> Incorrect Default Permissions (GHSA-q8g5-45m4-q95p, CVE-2022-31087)\n   -> Incorrect Regular Expressions (GHSA-q9pc-x84w-982x, CVE-2022-31086)\n   -> Unauthenticated LDAP Injection (GHSA-wxf8-9x99-6gp4, CVE-2022-31088)\n   -> Reflected XSS (Internet Explorer only) (GHSA-6m3q-5c84-6h6j, CVE-2022-31085)\n\n\n15.04.2022 7.9.1\n  - Fixed bugs:\n   -> Security issues in PDF editor and profile editor (GHSA-f2fr-cccr-583v, CVE-2022-24851)\n\n\n09.03.2022 7.9\n  - Tree view:\n   -> Support multiple roots (e.g. add \"cn=config\")\n   -> Added function to check password hashes against a given password\n  - Shadow: allow to set shadowLastChange in file upload\n  - Docker: upgrade OS to Debian Bullseye\n  - LAM Pro:\n   -> Support multiple TO addresses for license expiration email\n   -> Custom scripts: $INFO.debug$ wildcard prints all possible wildcards and their values\n   -> Custom scripts: extra INFO wildcards for password change options\n   -> Configuration import: allow to select self service profiles to import (168)\n  - Fixed bugs:\n   -> Tree view: check session expiration\n\n\n28.12.2021 7.8\n  - Restyling of LAM\n  - Allow to override global password policy in server profile (160)\n  - Do not print random password if sent via email (165)\n  - LAM Pro:\n   -> PowerDNS support\n   -> Device: allow multiple cn values\n  - Fixed bugs:\n   -> PDF does not contain all group members (249)\n   -> File upload issue on PHP 8 (153)\n   -> Export issue on non-Pro version (155)\n   -> Force password change for 389ds does not work on password quick change page (251)\n\n\n30.09.2021 7.7\n  - 2-factor authentication with OpenID\n  - Send proper response code on failed login\n  - LAM Pro:\n   -> OpenLDAP 2FA support for TOTP\n  ->Fixed bugs:\n   -> Issues with list filter if only one result is found (241)\n   -> Allow to sync empty list of groups in group of names user module (242)\n   -> Windows lockout duration and password maximum age computed incorrectly\n   -> Wrong status for nsAccountLock (245)\n\n\n05.07.2021 7.6\n  - Allow to store whole LAM configuration in MySQL database\n  - Docker: new options for configuration location and LAM Pro license\n  - Full PHP 8 compatibility\n  - Replaced tree view and moved it to tools menu\n  - Wildcards in edit screen support lower-case mode (e.g. \"$_firstname\")\n  - Windows: more fields can be hidden\n  - LAM Pro:\n   -> Export/Import of cron jobs\n   -> Mail server encryption type can be configured (TLS/SSL/none)\n   -> User self registration: support to define uid field to use constant or custom validation\n   -> Group of names user module: allow to sync memberships from other user\n   -> Custom fields:\n    * Support password change dialog in user edit view\n    * Added date and email validation for text fields\n    * Support password reset page for password fields\n    * New field types: LDAP date, LDAP date and time\n   -> Password self reset: fields on first page can be prefilled by URL parameter\n  - Fixed bugs:\n   -> Truncated mail text field in \"LAM Pro password mail settings\" and 2FA base URLs\n   -> 389ds: support password change and force password in one save action\n\n\n30.03.2021 7.5\n  - PHP 7.3 required\n  - PHP 8.0 compatibility (except tree view)\n  - Support copying LDAP entries from account list\n  - Account/PDF profiles: management of global templates and logos\n  - Group of names: allow filter by member/owner (#151)\n  - General information: link to groups (#152)\n  - LAM Pro:\n   -> Self registration: support binary attributes (e.g. for jpegPhoto)\n   -> Self registration: support custom mail attributes and mail from constant value (149)\n   -> Self registration: evaluate autorange at account creation (154)\n   -> MIT Kerberos: check Kerberos password policy on password change, better error handling\n   -> Self Service: new field to show user's quota values\n   -> Self Service: allow to create Unix home directory during registration\n   -> Custom type: allow for user/group/host to be able to reuse existing modules\n\n\n06.12.2020 7.4\n  - Argond2id support for password hashes (requires PHP 7.3) (#113)\n  - 2-factor authentication:\n   -> Support for Okta\n   -> WebAuthn devices can be named in Self Service and WebAuthn tool\n  - LAM Pro:\n   -> MIT Kerberos policies support\n   -> User self registration: added admin approval option and info mail for user after creation\n\n\n22.09.2020 7.3\n  - PHP 7.4 compatibility\n  - Configuration export and import\n  - Server profiles support to specify a part of the DN to hide\n  - Show password prompt when a user with expired password logs into LAM admin interface (requires PHP 7.2)\n  - Better error messages on login when account is expired/deactivated/...\n  - Personal/Windows: photo can be uploaded via webcam\n  - Windows users: group display format can be configured (cn/dn)\n  - Support PBKDF2-SHA512 password hashes\n  - LAM Pro:\n   -> Windows: new cron job to send users a summary of their managed groups\n  - Fixed bugs:\n   -> Unix groups: memberUid was not deleted correctly when forced sync with group of names is active\n\n\n01.05.2020 7.2\n  - Unix: allow to create group with same name during user creation\n  - LAM Pro:\n   -> EMail sending can be done via SMTP without local mail server\n   -> License expiration warning can be sent via email or disabled\n  - Fixed bugs:\n   -> Captcha don't show anymore in Self Service login page (213)\n   -> Unix memberships cannot be changed. This issue can also affect other membership relations.\n   -> Missing locales on Docker image\n\n\n17.03.2020 7.1\n  - PHP 7 required\n  - WebAuthn/FIDO2 support for 2-factor-authentication (requires PHP 7.2)\n  - IMAP: changed library to support latest TLS versions\n  - Personal: support display name (hidden by default in server profile)\n  - Windows users: support allowed workstations, more profile options\n  - Reactivated Polish translation\n  - LAM Pro:\n   -> PPolicy: support for password check module\n   -> Windows AD LDS support (users and groups)\n   -> User self registration: support Active Directory/Samba4\n\n\n21.12.2019 7.0\n  - Lamdaemon can be configured with directory prefix for homedirs\n  - Account list filters match on substrings instead of whole value\n  - YubiKey: support to configure multiple verification servers\n  - Windows hosts: added last password change and last login\n  - Deactivated non-maintained translations: Catalan, Czech, Hungarian, Polish and Turkish\n    Contact us if you would like to take over. Translators get LAM Pro for free (commercial use included).\n  - Docker updates\n  - Fixed bugs:\n   -> Missing CSS for Duo\n   -> Editing of DNs with comma on Windows (210)\n\n\n29.09.2019 6.9\n  - Group account types can show member+owner count in list view\n  - 2-factor authentication:\n   -> Duo support\n   -> user name attribute for privacyIDEA can be specified\n  - LAM Pro:\n   -> New self service settings for login and main page footer\n   -> Custom fields: custom labels for LDAP search select list\n  - Fixed bugs:\n   -> Configuration issue with Unix user/host module (206)\n\n\n02.07.2019 6.8\n  - Parallel editing of multiple entries in different browser tabs supported\n  - LAM supports the progressive web app standard which allows to install LAM as an icon on home screen\n  - Windows: added home drive and force password change to profile editor\n  - Unix: password management can be disabled in module settings\n  - LAM Pro:\n   -> Bind DLZ: entry table can show record data (use special attribute \"#records\" in server profile)\n   -> Self service: support legacy attribute \"email\" for password self reset and user self registration\n  - Fixed bugs:\n   -> Users: No drop-down filter box for account status (200)\n   -> Custom fields: Account type \"Groups\" not saving/deleting fields (66)\n\n\n25.03.2019 6.7\n  - Added YubiKey as 2-factor authentication provider\n  - Support logging to remote syslog server\n  - PHP 7.3 support\n  - LAM Pro:\n   -> Allow to mark text and text area fields as required\n   -> New self service fields:\n    -> Mail routing\n    -> Windows proxy addresses + mail alias\n    -> Shadow account expiration date\n    -> Unix and group of names memberships\n   -> Base URL for emails in self service can be configured in self service profile\n   -> Bind DLZ: support DNAME+XFR records and descriptions in records (requires latest LDAP schema)\n   -> Cron jobs: added Shadow account expiration notification job\n  - Fixed bugs:\n   -> Allow tree-only configurations without any other tab\n\n\n28.12.2018 6.6\n  - New import/export in tools menu\n  - YubiKey support\n  - Windows users:\n    -> Manage \"departmentNumber\" (needs to be activated via LAM server profile)\n    -> Sync group memberships from Unix and group of names\n  - LAM Pro:\n    -> Easy setting of background color in self service profile\n    -> Cron jobs: added Windows/Qmail/FreeRadius account expiration notification jobs\n    -> Bind DLZ: usability improvements and small fixes\n\n\n25.09.2018 6.5\n  - Password change possible via LDAP EXOP operation (set LDAP_EXOP as password hash, requires PHP 7.2)\n  - Support Imagick and GD\n  - Dropped support for Apache 2.2\n  - Upload: allow to overwrite existing accounts\n  - Personal: photos can be printed in PDF export\n  - Kolab updates\n  - LAM Pro:\n   -> Auto deletion of entries with dynamic directory services support (requires PHP 7.2)\n  - Fixed bugs:\n   -> Issue when changing key case of uid (#197)\n\n\n20.06.2018 6.4\n  - Imagick PHP extension required\n  - Passwords can be checked against external service (e.g. https://api.pwnedpasswords.com/range)\n  - Personal/Windows: image cropping support\n  - Better filtering of account lists\n  - Unix: Unix, Windows and group of names memberships can be synced in group selection\n  - IMAP: create mailbox via file upload\n  - PHP 7.2 support\n  - Support for \",\" in DN\n  - LAM Pro:\n   -> Better support for 389ds password expiration\n  - Fixed bugs:\n   -> Error on password reset page when custom fields is used (194)\n\n\n19.03.2018 6.3\n  - Server profile: added option if referential integrity overlay is active to skip cleanup actions\n  - Unix: several options are now specific to subaccount types (reconfiguration required!)\n  - Fixed bugs:\n   -> Security fixes (XSS vulnerabilities CVE-2018-8763 and CSRF token in URL CVE-2018-8764)\n   -> Quota for Windows groups did not work\n  - LAM Pro:\n   -> Support custom structural object classes with new custom type\n   -> Support dynamic lists\n   -> Self service login and password self reset can be secured with captcha\n\n\n04.02.2018 6.2.1\n  - Fixed bugs:\n   -> Login page not working when no server profile exists (44)\n   -> LAM Pro: Password Self Reset has issues when both security question and confirmation mail are activated.\n   -> LAM main configuration: certificate buttons do not work\n\n\n13.12.2017 6.2\n  - License changed from GPL v2 to GPL v3\n  - PHP 5.6 and Internet Explorer 11 or later required\n  - PDF export supports Chinese, Japan and Korean\n  - Account status also shows expired accounts\n  - Quota: support k/m/g/t/K/M/G/T to specify values in e.g. kB\n  - LAM Pro:\n   -> Cron jobs include better logging and support dry-run\n\n\n19.09.2017 6.1\n  - Automatically trim input fields to avoid trailing/leading spaces\n  - LAM Pro:\n   -> Custom fields: support wildcards in text fields such as $firstname\n   -> Custom fields: specify minimum/maximum count for multi-value entries\n   -> Custom fields: new type for constant values\n  - Fixed bugs:\n   -> Password modify page reports error on password change when posixAccount is present for users\n   -> Nginx configuration files did not include \"fastcgi_param SCRIPT_FILENAME $request_filename;\" (193)\n\n\n20.07.2017 6.0.1\n  - Fixed bugs:\n   -> Configuration file fills up with empty values\n   -> Tool visibility settings\n\n\n26.06.2017 6.0\n  - Support multiple configurations for same account type\n  - PHP 7.1 compatibility\n  - Courier users and mail aliases\n  - Windows: Support unlocking of users with too many failed login attempts\n  - Samba 3: added account expiration date to PDF fields\n  - LAM Pro:\n   -> Custom fields: can be used for file upload\n   -> Custom fields: new selection list type that gets options from LDAP search\n   -> Kopano support\n\n\n15.03.2017 5.7\n  - 2-factor authentication for admin login and self service with privacyIDEA\n  - PDF files use DejaVu serif font for better readability and more supported characters (e.g. Cyrillic)\n  - Windows users: the department option now uses attribute \"department\" instead of \"departmentNumber\"\n  - Updated Debian dependencies\n  - Fixed bugs:\n   -> Comparison issue prevents saving of values (185)\n\n\n18.12.2016 5.6\n  - New mechanism to replace wildcards in user edit screen. Personal/Unix support more wildcards like \"$firstname\".\n  - Windows: added support for pager, otherPager, mobile, otherMobile, company and proxyAddresses (disabled by default in server profile)\n  - Mail routing: enable for groups and allow to add/remove the extension\n  - LAM Pro:\n   -> Password self reset: support for up to 3 security questions\n   -> 389ds: new wildcards for custom scripts: $INFO.389lockingStatusChange$ and $INFO.389deactivationStatusChange$\n   -> Custom scripts: custom button label supported for manual scripts\n\n\n10.09.2016 5.5\n  - Windows: allow to show effective members of a group\n  - Lamdaemon: support SSH key authentication\n  - LAM Pro:\n   -> Group of names/members + roles: allow to show effective members of a group\n   -> Cron jobs:\n     * Move or delete expired accounts (Shadow, Windows, qmail, FreeRadius)\n     * 389ds: added job to notify before password expires\n   -> 389ds: manage password expiration time with module \"Account locking\"\n  - Fixed bugs:\n   -> PHP 7 issues on edit page\n\n\n21.06.2016 5.4\n  - Unix: support magic numbers for UIDs/GIDs (e.g. 389 server DNA plugin)\n  - Samba 3: support for Samba password history (RFE 133)\n  - LAM Pro:\n   -> New module for 389ds unlocking and account (de)activation\n   -> Self registration: support for Google reCAPTCHA\n   -> Password notification jobs support CC and BCC\n   -> Self Service: Samba 3 supports password history and minimum age check\n\n\n21.03.2016 5.3\n  - Requires PHP 5.4.0 or higher\n  - PHP 7 support\n  - Windows: support management of fax number\n  - Login can show display name instead of server URL\n  - Personal/Unix: support K5KEY hash type for smbk5pwd\n  - New NIS netgroup module for hosts\n  - Puppet: autocompletion for classes and variables, allow to enforce list of possible classes\n  - Fixed bugs:\n   -> Autoload errors in tree view\n   -> Set correct content type on JSON requests (174)\n  - LAM Pro:\n   -> Support for LDAP views based on nsview object class\n   -> Password notification jobs support to print expiration date in email\n   -> PPolicy password notification job takes pwdExpireWarning into account\n   -> Custom fields: support calendar fields\n   -> Zarafa contacts: allow to create contacts without Unix extension\n   -> Added options for password rest page to server profile\n\n\n15.12.2015 5.2\n  - Windows: support for additional attributes (jpegPhoto, title, carLicense,\n    employeeNumber, employeeType, businessCategory, departmentNumber, ou, o, manager)\n  - SSH public key: added possibility to add/remove SSH extension\n  - MIT Kerberos: set krbExtraData for new accounts\n  - IMAP: allow to specify initial folders to create\n  - LAM Pro:\n   -> Users: allow to manage IP addresses with ipHost module\n   -> Self Service: added time zone setting in self service profile\n   -> Shadow: added job to notify before Shadow password expires\n   -> Windows: added job to notify before Windows password expires\n\n\n31.08.2015 5.1\n  - IMAP: support Windows users\n  - SSH public key: check uploaded files if in right format\n  - LAM Pro:\n   -> Self Service optimized also for mobile devices\n   -> MySQL support for cron jobs\n   -> Self registration: support auto-numbering for attributes (e.g. to create Unix accounts)\n\n\n30.06.2015 5.0\n  - Microsoft IE 8 no longer supported\n  - Security: added CSRF protection\n  - NIS net groups: user module to manage NIS net groups on user page\n  - Zarafa users: allow to change display format of \"Send As\"\n  - User list: support to filter by account status\n  - Lamdaemon: update group of home directory if user's primary group changes\n  - Personal: allow to add ou=addressbook subentry for users (RFE 117)\n  - Unix: support auto-UID/GID with msSFU30DomainInfo\n  - Windows groups: support editing of member of\n  - Central time zone setting in server profile\n  - LAM Pro:\n   -> Cron job to notify users before password expires (PPolicy)\n   -> Password Self Reset: added 389 Directory Server schema file\n   -> Support for groupOfMembers (RFE 121)\n   -> Rfc2307bis Unix groups: added option to force syncing with group of names\n\n\n31.03.2015 4.9\n  - Requires PHP 5.3.2 or higher\n  - Templates for server profiles\n  - Unix/Personal: support SASL as password hash type\n  - PDF export: added option to print primary group members\n  - Use HTTP_X_REAL_IP/HTTP_X_FORWARDED_FOR to log IP addresses (RFE 120)\n  - LAM Pro:\n   -> Personal: support image file size limit and cropping (requires php-imagick) in self service\n   -> Password self reset: allow to enter custom security questions (RFE 115)\n   -> Unix groups (rfc2307bis): allow to sync members from group of (unique) names (RFE 116)\n   -> Self Service: support password change with old password (requires PHP >= 5.4.26)\n  - Fixed bugs:\n   -> Self Service shows password reuse error after password change was required\n\n\n16.12.2014 4.8\n  - Active Directory: support paged result as workaround for size limit exceeded\n  - FreeRadius: support dialupAccess and radiusProfileDn\n  - Usability improvements\n  - LAM Pro:\n   -> Self service: added option if referrals should be followed\n  - fixed bugs:\n   -> missing LDAP_DEREF_NEVER in some cases (169)\n\n\n07.10.2014 4.7.1\n  - fixed bugs:\n   -> Blank page and \"User tried to access entry of type ...\" log message when DN suffix does not exactly match case in LDAP\n\n\n28.09.2014 4.7\n  - Nginx webserver support\n  - DHCP: support pooling of IP ranges (RFE 107)\n  - Personal: support pager attribute (hidden by default)\n  - Renamed config/lam.conf_sample to lam.conf.sample and config.cfg_sample to config.cfg.sample\n  - LAM Pro:\n   -> Password dialog: preset alternate email address with backup email address (RFE 111)\n\n\n12.06.2014 4.6\n  - Unix groups: allow to disable membership management\n  - Extended LAM's internal password policies\n  - Lamdaemon: move home directory on server if changed\n  - Password policy check during typing\n  - LAM Pro:\n   -> Password self reset and user self registration support to set a header text\n   -> Sudo roles: support latest schema\n   -> Bind DLZ: automatic PTR management (disabled by default) and better formatting of e.g. TTL values\n\n\n18.03.2014 4.5\n  - IMAP: allow dynamic admin user names by replacing wildcards with LDAP attributes\n  - Personal: allow to set fields read-only\n  - NIS mail aliases can be managed on user page\n  - Added option to server profile if referrals should be followed (fixes problems with Samba 4 and AD)\n  - Windows user/group: NIS support (msSFU30NisDomain, msSFU30Name)\n  - LAM Pro:\n   -> Allow to set single account types read-only\n   -> Support for organizationalRole entries\n   -> Separate IP restriction list for self service\n   -> Bind DLZ: support TXT/SRV records\n   -> Self Service: added language selection\n   -> Password self reset: support backup email address\n   -> Custom fields: support help texts\n   -> Support for Oracle databases (orclNetService) (RFE 104)\n  - fixed bugs:\n   -> PDF export for multiple entries does not work (163)\n   -> Personal: fixed photo upload if Imagick is not installed (161)\n   -> Use account filters for Unix membership management (165)\n\n\n18.12.2013 4.4\n  - PyKota support: users, groups, printers, billing codes\n  - Kolab shared folder support\n  - New tool \"Multi edit\" allows LDAP operations on a large number of entries (e.g. adding attributes)\n  - Allow to set a custom label for each account type\n  - Unix: switch also additional membership if primary group is changed (RFE 108)\n  - Windows: fixed user name handling, sAMAccountName now optional\n  - Apache 2.4 support (requires Apache \"version\" module)\n  - Added Turkish, Ukrainian and US English translation\n  - LAM Pro:\n   -> Bind DLZ support\n   -> Samba/Shadow: display password change date in self service\n   -> Custom fields: support custom label and icon, auto-completion\n   -> User self registration: support constant attribute values\n   -> Self service: allow to set custom field labels\n  - Fixed bugs:\n   -> Format of photo in Personal tab (158)\n\n\n25.09.2013 4.3\n  - Custom SSL CA certificates can be setup in LAM main configuration\n  - Unix user and group support for Samba 4\n  - Samba 3 groups: support local members\n  - Kolab: support group accounts and allowed senders/receivers for users\n  - SSH public key: support file upload and self service enhancements (RFE 101)\n  - DHCP: support more options (RFE 99)\n  - LAM Pro:\n   -> PPolicy: check password history for password reuse\n   -> Custom fields: read-only fields for admin interface and file upload for binary data\n   -> Custom scripts: support user self registration\n   -> Password self reset: Samba 3 sync, identification with login attribute, Samba 4 support\n  - Fixed bugs:\n   -> Custom fields: auto-adding object classes via profile editor fixed\n   -> PHP 5.5 compatibility\n   -> Lamdaemon: do not show message if home directory to delete was not found (154)\n\n\n18.06.2013 4.2.1\n  - Fixed bugs:\n   -> Unix: suggested user name must be lower case\n   -> Quota: profile editor does not work in some cases\n\n\n04.06.2013 4.2\n  - Samba 4 support: users, groups, hosts\n  - Unix: allow to change format for suggested user name\n  - LAM Pro:\n   -> Zarafa support for Samba 4\n   -> allow to hide buttons to create/delete entries for each account type\n   -> Password self reset: support new identification methods: user, email, user or email, employee number\n   -> Custom fields: support PDF, profiles and multi-value text fields\n   -> Personal: support password mail sending in file upload\n\n\n19.03.2013 4.1\n  - Updated EDU person module (RFE 3599128)\n  - Personal: allow management of user certificates (RFE 1753030)\n  - Unix: Support Samba Unix Id pool for automatic UID/GID generation\n  - DHCP: support separated dhcpServer and dhcpService entries\n  - LAM Pro:\n   -> Support Qmail groups\n  - Fixed bugs:\n   -> changed user and group size limits (3601649)\n\n\n06.01.2013 4.0.1\n  - support additional LDAP filters for account types\n  - allow to hide account types (that are required by other account types)\n  - fixed bugs:\n   -> missing directories config/pdf and config/profiles on fresh installations\n\n\n17.12.2012 4.0\n  - account profiles and PDF structures are now bound to server profile\n  - IMAP: support \"/\" as path separator (RFE 3575692)\n  - show server profile name on config pages (RFE 3579768)\n  - LAM Pro:\n   -> Custom fields for admin interface\n   -> MIT Kerberos support\n   -> Qmail user support\n\n\n25.09.2012 3.9\n  - Kolab 2.4 support\n  - Puppet support\n  - LAM Pro\n   -> support RFC2307bis automount entries\n   -> read-only fields in self service\n  - fixed bugs\n   -> Hidden tools are still shown on the \"Tools\" page (3546092)\n\n\n19.07.2012 3.8\n  - quick (un)lock for users\n  - allow to disable tools\n  - LAM Pro:\n   -> Custom fields module allows to manage custom LDAP attributes in Self Service\n   -> Self service now supports user self registration\n   -> Separate group of names module for users allows to manage memberships if Unix module is not used (RFE 3504429)\n   -> Named object module for groups (used for rfc2307bis schema)\n   -> Password change page allows account (un)locking\n   -> Allow to send password mails on user edit page\n   -> Custom scripts: supports manual scripts that can be run from account edit pages\n   -> Zarafa 7.1 support (proxy URL for servers)\n  - fixed bugs\n   -> Asterisk extensions with same name (3528288)\n\n\n25.03.2012 3.7\n  - Login: support bind user for login search\n  - Personal: added labeledURI and cosmetic changes, description is now multi-valued (RFE 3446363)\n  - Asterisk extensions: group extension entries by name and context\n  - File upload:\n   -> support custom scripts postCreate (LAM Pro)\n   -> PDF export\n  - New translation: Slovakian\n  - removed phpGroupWare support (project no longer exists)\n  - Use new password after self password change (RFE 3446350)\n  - LAM Pro:\n   -> Password self reset can send password confirmation and notification mails\n   -> Zarafa archiver support\n   -> Heimdal Kerberos support\n  - Fixed bugs:\n   -> DHCP: error message not displayed properly (3441975)\n   -> Profile loading not possible if required fields are not filled (3444948)\n   -> Tree view: unable to add object class (3446037)\n   -> Edit page: unable to move accounts to different OU\n   -> Self Service: support forced password changes (PPolicy) (3483907)\n   -> XSS security patch (3496624)\n\n\n23.11.2011 3.6.1\n  - LAM Pro: fixed password reset function\n\n\n22.11.2011 3.6\n  - support HTTP authentication for admin pages and self service\n  - new modules\n   -> authorizedServiceObject\n   -> FreeRadius\n  - LAM Pro\n   -> added password self reset feature\n   -> Zarafa 7 support\n   -> Zarafa support for dynamic groups, address lists and contacts\n   -> Unix: group of names can be managed on user edit page\n  - Fixed bugs:\n   -> Unix: check for upper-case characters in user name (3416180)\n\n\n09.08.2011 3.5.0\n  - New modules:\n   -> \"General information\": shows internal data about accounts (e.g. creation time)\n   -> \"Quota\": manage filesystem quota inside LDAP (Linux DiskQuota) (RFE 1811449)\n  - Personal: New attributes o, employeeNumber, initials\n  - Unix: Support to create home directories on multiple servers and also for existing users\n  - Server information shows data from cn=monitor\n  - Lots of small improvements\n  - LAM Pro:\n   -> Automount: allow to create automount maps\n   -> Password policy: allow to (un)lock accounts\n  - Fixed bugs:\n   -> Owner attribute is multi-valued (3300727)\n\n2011-04-25 3.4.0\n  - IMAP mailboxes:\n   -> support to read user name from uid attribute\n   -> added quota management\n  - Personal: added additional options for account profiles\n  - Mail aliases: sort recipients (RFE 3170336)\n  - Asterisk: support all attributes (can be disabled in configuration)\n  - Samba 3/Shadow: allow to sync expiration date (RFE 3147751)\n  - LAM Pro:\n   -> support automount entries\n   -> Zarafa groups: allow combination with group of names\n   -> enhanced wildcards for custom scripts\n   -> Group of (unique) names: allow members to be optional\n  - Fixed bugs:\n   -> Renaming of default profile (3183920)\n   -> Profile editor: fixed problems with multi select\n\n\n12.02.2011 3.3.0\n  - additional usability enhancements\n  - new IMAP module (\"Mailbox (imapAccess)\") allows to create/delete user mailboxes\n  - LAM Pro: enhanced Zarafa to support users and groups for \"Send as\" (new configuration option)\n  - PDF export: higher resolution for logos\n  - reduced number of LDAP queries\n  - lamdaemon: support journaled quotas\n  - Fixed bugs:\n   -> ignore comment lines in shells file (3107124)\n   -> home directory creation on file upload\n\n\n28.10.2010 3.2.0\n  - large usability enhancements\n  - Shadow: allow to force password change when maximum password age is set\n  - DHCP: renamed module \"Fixed IPs\" to \"Hosts\", IP is now optional (3038797)\n  - PHP version 5.2.4 or higher required\n  - LAM Pro:\n   -> Zarafa support (user, group, server)\n   -> Password policy: allow to force password change (RFE 3026940)\n   -> Password reset page: mail subject, text and from address can be set in server profile\n   -> Self service: Asterisk (voicemail) password synchronisation\n  - Fixed bugs:\n   -> Email check did not include \"+\" (3033605)\n   -> Tab index on login page (3042622)\n\n\n04.07.2010 3.1.1\n  - LAM Pro: fix for user self service\n\n\n25.06.2010 3.1.0\n  - usability improvements\n  - Asterisk voicemail support\n  - new hosts module for user accounts to define valid login workstations (replaces inetOrgPerson schema hack) (2951116)\n  - PDF editor: descriptive fields\n  - lamdaemon:\n   -> sudo entry needs to be changed to \".../lamdaemon.pl *\"\n   -> replaced PHP SSH2 with phpseclib\n  - LAM Pro\n   -> custom scripts: new options to hide executed commands and define if output is HTML or plain text\n   -> support sudo entry management (object class sudoRole)\n  - fixed bugs:\n   -> Asterisk password handling (patch 2979728)\n   -> Samba domain SID check (2994528)\n   -> language selection at login (2996335)\n\n\n24.03.2010 3.0.0\n  - support to remove extension from an existing account: shadowAccount, sambaSamAccount, eduPerson\n  - file upload: allow to select account modules for upload\n  - removed frames\n  - Unix: automatic user name generation from first and last name (2492675)\n  - LAM Pro:\n   -> support OpenLDAP password policies (ppolicy)\n   -> manage host IP addresses (ipHost)\n  - fixed bugs:\n   -> Multi-delete not working (2931458)\n   -> Samba: can/must change password needs to be read from domain policy (2919236)\n   -> DNs which include \"#\" are not editable/deletable (2931461)\n   -> fixed configure/Makefile\n   -> Asterisk input fields and authentication realm (patch 2971792)\n\n\n16.12.2009 2.9.0\n  - Asterisk support\n  - new tool: server information\n  - consolidated LAM documentation in new manual (docs/manual/index.html)\n\t- DHCP: add host name to fixed IPs (RFE 2898948)\n\t- LAM Pro:\n\t -> enabled custom scripts for self service\n\t -> support for nisObject object class\n  - fixed bugs:\n\t -> unable to edit accounts with DNs that contain spaces next to a comma (2889473)\n\t -> login method \"LDAP search\" has problems if LDAP server is down (2889414)\n\t -> filter in account lists did not support non-ASCII letters\n\t -> alias handling (2901248)\n\t -> DHCP range check (2903267)\n\n\n28.10.2009 2.8.0\n  - ability to hide fields: inetOrgPerson, sambaSamAccount\n\t- compatibility with PHP 5.3\n\t- one central button to change passwords on account pages\n\t- removed support for Samba 2 accounts\n\t- removed lamdaemonOld script\n\n\n05.08.2009 2.7.0\n  - LAM Pro: allow to execute custom scripts\n  - log client IP at login attempt\n  - added separate configuration option to enable/disable TLS encryption\n  - Samba 3: allow to disable LM hashes (on by default) (RFE 2657140)\n  - DHCP: added description field and reordered fixed IP input fields\n  - fixed bugs:\n    * added additional check for creating home directories (2798489)\n\t\t* support memcache for session storage (2811505)\n\n\n08.04.2009 2.6.0\n  - support NIS netgroups\n  - support EDU person accounts (RFE 1413731)\n  - Personal: support departmentNumber attribute\n  - DHCP: allow file upload\n  - added config option to search LAM login users in LDAP (RFE 2494249)\n  - help messages are displayed as tooltips\n  - LAM Pro:\n   -> add businessCategory to self service (RFE 2494246)\n   -> allow to customize page headers and use custom CSS styles\n\n\n21.01.2009 2.5.0\n  - LAM Pro:\n   -> supports rfc2307bis schema for Unix groups (RFE 2111694)\n   -> added alias management (object classes alias + uidObject) (RFE 1912779)\n  - Shadow: module is now optional when creating new accounts\n  - Kolab:\n   -> account extension is now optional\n   -> can be used without Unix module\n   -> self service uses no extra LDAP suffix but uses global setting\n  - DHCP:\n   -> several bugfixes\n   -> added PDF support\n   -> support multiple Netbios name servers (RFE 2180179)\n  - Samba 3:\n   -> self service sets attribute \"sambaPwdLastSet\" on password change (LAM Pro)\n   -> password timestamps can be updated on password reset page (LAM Pro)\n   -> option to force password change on next login\n   -> profile options for time when the user can/must change the password\n\n\n15.10.2008 2.4.0\n  - added DHCP management (donated by Siedl networks GmbH)\n  - requires PHP 5.1.2\n  - MHash dependendy replaced by Hash\n  - save last selected server profile from login page\n  - lamdaemon: allow to specify SSH port\n  - lamdaemon: added Syslog logging\n  - Unix: added profile options for lamdaemon\n  - LAM Pro: password reset page is able to unlock Samba accounts and sets shadowLastChange\n  - fixed bugs:\n    * problems with DN containing ( and ) (2059740)\n    * problem with gecos field in file upload (2103936)\n\n\n30.04.2008 2.3.0\n  - added Polish translation\n  - support phpGroupWare accounts\n  - password policies\n  - redesigned PDF editor\n  - show mail addresses as link in account list\n  - Unix: allow primary group members to be added as memberUid\n  - Kolab: support LAM Pro self service\n  - LAM Pro: new account type for groupOf(Unique)Names\n  - fixed bugs:\n   -> XHTML headers should be removed (1912736)\n\n\n23.01.2008 2.2.0\n  - account lists:\n   -> allow to switch sorting\n   -> added separate configuration page and store settings in cookies\n   -> list size can now be set individually for each account type on the list configuration page\n   -> new PDF buttons\n  - use suffix from account list as default for new accounts (patch 1823583)\n  - Security: passwords in configuration files are now saved as hash values\n  - improved design\n  - style fixes for Internet Explorer users\n  - Unix: allow to set host passwords (RFE 1754069)\n  - Unix: allow to generate random passwords for users\n  - Samba 3 groups: Samba part is now optional\n  - Personal: add object classes person and organizationalPerson for new accounts (RFE 1830033)\n  - new LDAP schema check on tests page\n  - LAM Pro:\n   -> added possibility for deskside support to reset passwords at account list page\n   -> access levels (read only, change passwords, write access) for server profiles\n\n\n07.11.2007 2.1.0\n  - tabular design for account pages\n  - show DN on account pages\n  - Samba 3: made Samba account optional\n  - Samba 3: manages now terminal server settings\n  - fixed bugs:\n   -> LAM Pro: UTF-8 characters are invalid displayed on configuration page (1788752)\n   -> LAM works again on PHP 5.1.x (1792447)\n   -> Quota: managing group quotas does not work (1811728)\n   -> Samba 3 domains: lockout users after bad logon attempts must allow 0 - 999 (1814578)\n\n\n08.08.2007 2.0.0\n  - new translations: Chinese (Simplified), Czech and Portuguese\n  - usability improvements\n  - LDAP accounts including child entries can now be moved\n  - group list can show primary members (RFE 1517679 and patch 1722460)\n  - more translated example texts (RFE 1702140)\n  - inetOrgPerson: now manages homePhone, roomNumber, businessCategory\n  - posixAccount: allow to create home directories in file upload (RFE 1665034)\n  - account lists: display buttons on top and bottom (RFE 1702136)\n  - fixed bugs:\n   -> OU editor: help images (1702132)\n   -> config editor: extra space (1702269)\n   -> fixed some inconsistent help entries (1694863)\n   -> user list: refreshing GID translation did not work (1719168)\n   -> allow uid as RDN attribute for inetOrgPerson (1740499)\n   -> PHP Warning: mcrypt_decrypt(): The IV parameter must be ... (1742543)\n   -> uid attribute no longer required for InetOrgPerson (1757215)\n\n\n28.03.2007 1.3.0\n  - improved design\n  - user list can now display jpegPhoto attributes\n  - lamdaemon: support for multiple servers\n  - LAM Pro: users may change their photos (jpegPhoto)\n  - fixed bugs:\n   -> ShadowAccount: PDF entry for expire date was wrong (1658868)\n   -> Samba groups: fixed help entry (patch 1664542)\n   -> Debian package did not include lamdaemonOld.pl (1660493)\n   -> NIS mail aliases: allow more characters in alias name (1674198)\n   -> fixed syntax errors in some .htaccess files\n   -> security fix: HTML special characters in LDAP data were not escaped\n\n  Developers:\n    API changes:\n    - added listPrintTableCellContent() to class lamList\n    - added listPrintAdditionalOptions() to class lamList\n    - added preModifyActions() to class baseModule\n    - added postModifyActions() to class baseModule\n    - added preDeleteActions() to class baseModule\n    - added postDeleteActions() to class baseModule\n\n\n24.01.2007 1.2.0\n  - Samba 3: better handling of date values\n  - Samba 3: Handling of locked accounts (RFE 1609076)\n  - LAM Pro: modules can define configuration settings (Unix: password hashing)\n  - LAM Pro: management of groupOfNames and groupOfUniqueNames entries (RFE 875482)\n  - fixed bugs:\n   -> Lamdaemon test did not work on PHP 4\n   -> InetOrgPerson: Problems with error messages (1628799)\n\n  Developers:\n    API changes:\n    - removed get_configDescription() from module interface\n    - added functions to handle configuration settings for LAM Pro\n\n\n01.11.2006 1.1.1\n   - Lamdaemon: added test page (Tools -> Tests -> Lamdaemon test)\n   - LAM Pro: Samba passwords can now be synchronized with Unix password\n   - Shadow account: better management of expiration date\n   - fixed bugs:\n    -> Unix: password hashing problem (1562426)\n    -> Unix: No error message for wrong UID numbers in file upload\n    -> Filters in account lists get lost when sorting the table\n\n\n20.09.2006 1.1.0\n   - Lamdaemon now uses the SSH implementation from PECL which is much more stable\n   - Samba 2/3: \"Use Unix password\" now on by default (1517678)\n\n  Developers:\n    API changes:\n    - removed $post parameters from module functions (delete_attributes(),\n      process_...(), display_html_...()). Use $_POST instead.\n    - process_...() functions: returned messages are no longer grouped\n      (e.g. return: array(array('INFO', 'headline', 'text'), array('INFO', 'headline2', 'text2')))\n\n\n10.08.2006 1.0.4\n   - added Russian translation\n   - Samba 3: added policies for domain objects\n   - inetLocalMailRecipient: print warning if local address is already in use\n\n\n05.07.2006 1.0.3\n   - fixed bugs:\n    -> Kolab: fixed problem with message about missing password\n    -> Unix groups: fixed auto GID\n    -> Unix users/groups: fixed silent unlocking of passwords\n    -> Unix users/groups: removed invalid password option\n    -> Shadow: account expiration date was incorrect in some time zones\n    -> User list: fixed problems when deleting users and translated GIDs are activated (1503367)\n\n\n24.05.2006 1.0.2\n   - security enhancements: session timeout, logging, host restrictions\n   - handle LDAP attribute aliases correctly\n   - fixed bugs:\n    -> PDF creation bug when GID translation is activated (1477111)\n    -> allow \"@\" in passwords (1477878)\n    -> Samba 2/3: fixed NT hashes\n    -> fixed handling of multi-value attributes (e.g. in inetLocalMailRecipient)\n\n\n12.04.2006 1.0.1\n   - LAM can now be installed with \"configure\" and \"make install\"\n   - added workaround for misspelled object classes (e.g. sambaSAMAccount by smbldap-tools)\n   - Unix: merged password hash settings for Unix users and groups\n   - Samba 3: added Windows group to profile options\n   - security: LAM checks the session id and client IP\n   - fixed bugs:\n    -> Samba 3: hash values were wrong in some rare cases (1440021)\n    -> Samba 3: re-added time zone selection for logon hours (1407761)\n    -> Unix: call of unknown function (1450464)\n\n\n01.03.2006 1.0.0\n   - new architecture with support for more account types\n   - new translations: Traditional Chinese, Dutch\n   - fixed bugs:\n    -> Samba groups: editing of special groups fixed\n    -> changed check for mail addresses (patch 1403922)\n    -> fixed JPG upload when MCrypt is enabled\n    -> fixed login problems for AD servers\n    -> improved sorting of account lists\n    -> fixed language setting in default configuration profile\n    -> fixed PHP5 warnings (getdate() and mktime())\n    -> error messages in Samba domain module (1437425)\n    -> fixed expired passwords with shadowAccount module\n    -> added lamdaemon.pl compatibility and security patches by Tim Rice\n\n\n08.02.2006 1.0.rc2\n   - new translation: Dutch\n   - fixed bugs:\n    -> changed check for mail addresses (patch 1403922)\n    -> fixed JPG upload when MCrypt is enabled\n    -> fixed login problems for AD servers\n\n\n09.01.2006 1.0.rc1\n   - new architecture with support for more account types\n   - new translation: Traditional Chinese\n   - fixed bugs:\n    -> Samba groups: editing of special groups fixed\n\n\n14.12.2005 0.5.3\n   - accounts are now deleted with subentries\n   - big update for Italian translation\n   - inetOrgPerson: support jpegPhoto images\n   - less restrictive input checks\n   - fixed bugs:\n    -> fixed problems with case-insensitive DNs\n    -> file upload did not work when max_execution_time=0 (1367957)\n    -> posixGroup: fixed help entries\n\n\n16.11.2005 0.5.2\n   - New module for SSH public keys\n   - check file permissions on login page\n   - fixed bugs:\n    -> creation of home directories did not work\n    -> allow spaces in profile names (1333058)\n    -> fixed problem with magic_quotes_gpc in profile editor (1333069)\n    -> inetOrgPerson: deletion of postal address and fax number now works\n\n\n19.10.2005 0.5.1\n   - Samba 3: added support for account expiration\n   - fixed bugs:\n    -> automatic UID/GID assignment did not fully work\n    -> PDF: additional groups for Unix users\n    -> inetOrgPerson: fixed mobile number\n    -> Samba 2/3: passwords fixed for file uploads (1311561)\n    -> Samba 3: fixed logon hours (patch 1311915)\n    -> Samba 3: loading of domain setting from profile did not work\n    -> Quota: profile settings fixed\n    -> reduced memory usage\n\n\n28.09.2005 0.5.0\n   - Samba 2/3: added display name in account pages\n   - fixed bugs:\n    -> fixed error message when creating new accounts with shadowAccount\n    -> added missing help entries on main account page\n    -> Samba 2/3: fixed settings for password expiration, no password and deactivated account\n    -> changing of RDN caused problems in some cases\n\n\n08.09.2005 0.5.rc3\n   - INFO messages no longer prevent changing to subpages of a module\n   - fixed bugs:\n    -> buttons on account page are better sorted\n    -> account module: some problems solved when used for user accounts\n    -> nisMailAlias: fixed missing RDN possibility\n    -> fixed conflicts when accounts were built with other base modules\n    -> Samba 2/3: setting allowed workstations failed\n    -> magic_quotes_gpc = Off prevented editing of accounts\n    -> fixed help links on Samba and Unix pages\n\n\n18.08.2005 0.5.rc2\n   - allow user accounts based only on \"account\" module\n   - inetOrgPerson: allow setting a password if posixAccount is not active\n   - fixed bugs:\n    -> removed Blowfish encryption (bad performance)\n    -> Kolab now complains if no user password is set\n\n\n08.08.2005 0.5.rc1\n   - Kolab 2 support\n   - added manager and post office box for inetOrgPerson\n   - Samba 3: added support for logon hours\n   - Samba 3: added sambaSID as possible RDN attribute\n   - improved error handling in profile editor\n   - now quotas can be set on CSV upload\n   - new logo\n   - fixed bugs:\n    -> several fixes for PHP5\n    -> fixes for PDF editor and output\n    -> password changing in tree view did not work\n    -> fixed changing of group memberships for users\n\n\n28.07.2005 0.4.10\n  - PHP5 compatibility added\n\n\n30.06.2005 0.5.alpha2\n   - added documentation about schemas\n   - PDF now uses UTF-8 fonts\n   - added possibility to create plain inetOrgPerson accounts\n   - fixed bugs:\n    -> set DN suffix and RDN on profile loading\n    -> several fixes for PDF editor\n    -> creating Samba hosts now works\n\n\n11.05.2005 0.5.alpha1\n  - new modular architecture\n   -> possibility to create Unix-only accounts\n   -> plugins for more objectClasses planned\n   -> enhanced PDF output\n   -> enhanced file upload\n   -> enhanced editor for account profiles\n   -> dynamic configuration options (based on modules)\n  - all pages in UTF-8\n  - added developer documentation\n  - PHPDoc formatted comments\n  - new plugin for managing MAC addresses (RFE 926017)\n  - new plugin for managing NIS mail aliases (RFE 1050036)\n  - new plugin for managing mail routing with inetLocalMailRecipient (RFE 1092137)\n  - schema browser\n  - tree view\n\n\n09.03.2005 0.4.9\n  - fixed bugs:\n      fixed error messages when moving an user account\n      fixed problem with special group SIDs\n      lamdaemon.pl security fix\n\n\n26.01.2005 0.4.8\n  - allow \"%\" at the beginning of Samba home/profile path (1107998)\n  - fixed bugs:\n      fixed IE fix ;-)\n      no more warnings for profiles with no additional groups set\n\n\n19.12.2004 0.4.7\n  - added \"*.exe\" to Samba logon script regex (1081715)\n  - fixed bugs:\n      fixed doctype of main frame\n      removed syntax check for LDAP suffixes\n      fixed IE bug at login\n      fixed encoding in HTTP header\n      passwords with \"'\" are now handled correctly at login (1081460)\n      fixed Samba flags if multiple hosts were created\n      updated .htaccess files to be compatible with newer Apache versions\n\n\n26.05.2004 0.4.6\n  - fixed bugs:\n      password hashes were not disabled correctly\n      street was copied to postal code on modify (938502)\n      underscore was not allowed for host names (934445)\n      deleting postal address or facsimile number failed (948616)\n      TLS error handling (958497)\n      smaller fixes on personal settings page\n\n\n21.03.2004 0.4.5\n  - added French translation\n  - fixed bugs:\n      StatusMessages with additional variables did not work\n      Samba hosts had unnecessary objectClass shadowAccount (910084)\n      Samba host passwords were still wrong\n      LAM had problems with non-standard spelled object classes (907636)\n      Perl scripts did not work if Perl is not installed in /usr/bin/perl (913554)\n      problems when cn!=uid (915041)\n      home directories were not deleted by lamdaemon.pl (913552)\n\n\n29.02.2004 0.4.4 (stable)\n  - fixed bugs:\n      plain posix groups could not be used as Samba 3 primary group\n      if magic_quotes_gpc in php.ini is was set to \"Off\", several pages did not work\n      some smaller bugs in mass upload\n      Samba hash values for hosts were not correct\n      Unix passwords could be disabled but not re-enabled\n      fixed problem with eval() in status.inc (894433)\n\n\n08.02.2004 0.4.3\n  - new login layout\n  - added Hungarian and Japanese translations\n  - fixed bugs:\n      Samba passwords were sometimes empty for new users (892272)\n      links in list views may not work with web servers other than Apache\n\n\n21.01.2004 0.4.2\n  - added config wizard\n  - MHash is only needed for PHP < 4.3\n  - use Blowfish for encryption instead of MCrypt\n\n\n29.12.2003 0.4.1\n\n  - better error handling at login\n  - support spaces in DNs\n  - PDF text for users\n  - create missing OUs recursively\n  - fixed bugs:\n      SMD5 passwords were wrong\n      primaryGroupSID wrong if SID has no relation to Algorithmic RID Base\n      Samba 2 accounts could not be created\n\n\n29.10.2003 0.4 (Beta1)\n\n  - improved design\n  - improved documentation\n  - Fixed possible error which could delete entries if objectclass didn't fit\n  - Fixed many samba 3.0 related bugs, most related to SIDs\n  - edit group members directly\n  - support for several password hashes (CRYPT/SHA/SSHA/MD5/SMD5/PLAIN)\n  - PDF output for groups and hosts\n\n\n31.08.2003 0.3 (Alpha 3)\n\n  - Samba 3 support\n  - manage Samba 3 domains\n  - multiple configuration files\n  - PDF output\n  - better mass creation\n\n\n04.07.2003 0.2 (Alpha 2)\n\n  - support for multiple OUs + OU-Editor\n  - account creation via file upload\n  - profile editor\n  - experimental Samba 3 support\n  - fixed a lot of bugs\n\n\n23.05.2003 0.1 (Alpha 1)\n\n  Initial release\n", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE book PUBLIC \"-//OASIS//DTD DocBook XML V4.5//EN\"\n\"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\">\n<chapter id=\"a_configuration\">\n  <title>Configuration</title>\n\n  <para>After you <link linkend=\"a_installation\">installed</link> LAM you can\n  configure it to fit your needs. The complete configuration can be done\n  inside the application. There is no need to edit configuration files.</para>\n\n  <para>Please point you browser to the location where you installed LAM. E.g.\n  for Debian/RPM this is http://yourServer/lam. If you installed LAM via the\n  tar.bz2 then this may vary. You should see the following page:</para>\n\n  <screenshot>\n    <mediaobject>\n      <imageobject>\n        <imagedata fileref=\"images/login.png\"/>\n      </imageobject>\n    </mediaobject>\n  </screenshot>\n\n  <para>If you see an error message then you might need to install an\n  additional PHP extension. Please follow the instructions and reload the page\n  afterwards.</para>\n\n  <para>Now you are ready to configure LAM. Click on the \"LAM configuration\"\n  link to proceed.</para>\n\n  <screenshot>\n    <mediaobject>\n      <imageobject>\n        <imagedata fileref=\"images/configOverview.png\"/>\n      </imageobject>\n    </mediaobject>\n  </screenshot>\n\n  <para>Here you can change LAM's general settings, setup server profiles for\n  your LDAP server(s) and configure the <link linkend=\"a_selfService\">self\n  service</link> (LAM Pro). You should start with the general settings and\n  then setup a server profile.</para>\n\n  <section id=\"generalSettings\">\n    <title>General settings</title>\n\n    <para>After selecting \"Edit general settings\" you will need to enter the\n    <link linkend=\"a_configPasswords\">master configuration password</link>.\n    The default password for new installations is \"lam\". Now you can edit the\n    general settings.</para>\n\n    <section>\n      <title>Configuration Database</title>\n\n      <para>This defines where LAM should store the configuration settings. By\n      default, local file system is used. If you have installed the PHP PDO\n      extension incl. MySQL then you can also select MySQL here. This will\n      then store all data (server profiles, account profiles, PDF structures,\n      ...) in the database.</para>\n\n      <para>Exceptions:</para>\n\n      <itemizedlist>\n        <listitem>\n          <para>Configuration storage options</para>\n        </listitem>\n\n        <listitem>\n          <para>LAM Pro license</para>\n        </listitem>\n\n        <listitem>\n          <para>CA certificates</para>\n        </listitem>\n      </itemizedlist>\n\n      <para>This is very useful when running LAM cloud native e.g. inside\n      Docker.</para>\n\n      <screenshot>\n        <graphic fileref=\"images/configGeneral9.png\"/>\n      </screenshot>\n    </section>\n\n    <section>\n      <title>License (LAM Pro only)</title>\n\n      <para>This is only required when you run LAM Pro. Please enter the\n      license key from your <ulink\n      url=\"https://www.ldap-account-manager.org/lamcms/user/me\">customer\n      profile</ulink>. In case you have purchased multiple licenses please\n      only enter one license key block per installation.</para>\n\n      <para>When you entered the license key then the license details can be\n      seen on LAM configuration overview page.</para>\n\n      <para>By default, LAM Pro will show a warning message on the login page\n      3 weeks before expiration. You can disable this here and/or send out an\n      email instead.</para>\n\n      <screenshot>\n        <mediaobject>\n          <imageobject>\n            <imagedata fileref=\"images/configGeneral7.png\"/>\n          </imageobject>\n        </mediaobject>\n      </screenshot>\n    </section>\n\n    <section>\n      <title>Security settings</title>\n\n      <para>Here you can set a time period after which inactive sessions are\n      automatically invalidated. The selected value represents minutes of\n      inactivity.</para>\n\n      <para>You may also set a list of IP addresses which are allowed to\n      access LAM. The IPs can be specified as full IP (e.g. 123.123.123.123)\n      or with the \"*\" wildcard (e.g. 123.123.123.*). Users which try to access\n      LAM via an untrusted IP only get blank pages. There is a separate field\n      for LAM Pro self service.</para>\n\n      <screenshot>\n        <mediaobject>\n          <imageobject>\n            <imagedata fileref=\"images/configGeneral1.png\"/>\n          </imageobject>\n        </mediaobject>\n      </screenshot>\n\n      <para id=\"conf_sslCert\"><emphasis role=\"bold\">SSL certificate\n      setup:</emphasis></para>\n\n      <para>By default, LAM uses the CA certificates that are preinstalled on\n      your system. This will work if you connect via SSL/TLS to an LDAP server\n      that uses a certificate signed by a well-known CA. In case you use your\n      own CA (e.g. company internal CA) you can import the CA certificates\n      here.</para>\n\n      <para>Please note that this can affect other web applications on the\n      same server if they require different certificates. There seem to be\n      problems on Debian systems and you may also need to restart Apache. In\n      case of any problems please delete the uploaded certificates and use the\n      <link linkend=\"ssl_certSystem\">system setup</link>.</para>\n\n      <para>You can either upload a DER/PEM formatted certificate file or\n      import the certificates directly from an LDAP server that is available\n      with LDAP+SSL (ldaps://). LAM will automatically override system\n      certificates if at least one certificate is uploaded/imported.</para>\n\n      <para>The whole certificate list can be downloaded in PEM format. You\n      can also delete single certificates from the list.</para>\n\n      <para>Please note that you might need to restart your webserver if you\n      do any changes to this configuration.</para>\n\n      <screenshot>\n        <mediaobject>\n          <imageobject>\n            <imagedata fileref=\"images/configGeneral4.png\"/>\n          </imageobject>\n        </mediaobject>\n      </screenshot>\n    </section>\n\n    <section>\n      <title>Password policy</title>\n\n      <para>This allows you to specify a central password policy for LAM. The\n      policy is valid for all password fields inside LAM admin (excluding tree\n      view) and LAM self service. Configuration passwords do not need to\n      follow this policy.</para>\n\n      <screenshot>\n        <mediaobject>\n          <imageobject>\n            <imagedata fileref=\"images/configGeneral2.png\"/>\n          </imageobject>\n        </mediaobject>\n      </screenshot>\n\n      <para>You can set the minimum password length and also the complexity of\n      the passwords.</para>\n\n      <para><emphasis role=\"bold\">External password check</emphasis></para>\n\n      <para>Please note that this option is only displayed if you have\n      installed the PHP Curl extension for your web server.</para>\n\n      <para>This will validate passwords using an external service. LAM\n      supports the protocol used by <ulink\n      url=\"https://haveibeenpwned.com/API/v2#SearchingPwnedPasswordsByRange\">Have\n      I been Pwned</ulink>. You can use the service directly or setup any\n      custom service with the same API. If the service reports an error LAM\n      will log an error message and the password will be accepted.</para>\n\n      <para>Example URL:\n      https://api.pwnedpasswords.com/range/{SHA1PREFIX}</para>\n\n      <para>LAM will build a SHA1 hash of the password and send parts of it to\n      the service.</para>\n\n      <para>The configured URL must contain the wildcard \"{SHA1PREFIX}\" which\n      will be replaced with the 5 character hash prefix. The service must then\n      return a list of text lines in the format \"&lt;hash\n      suffix&gt;:&lt;number&gt;\".</para>\n\n      <para>\"&lt;hash suffix&gt;\" needs to be the suffix of a known insecure\n      password. The \"&lt;number&gt;\" can be any numeric value and will be\n      ignored by LAM.</para>\n\n      <para>Example:</para>\n\n      <para>Password hash: 21BD10018A45C4D1DEF81644B54AB7F969B88D65</para>\n\n      <para>Hash prefix sent to service: 21BD1</para>\n\n      <para>Returned line: 0018A45C4D1DEF81644B54AB7F969B88D65:1</para>\n\n      <para>This will reject the password.</para>\n    </section>\n\n    <section id=\"conf_logging\">\n      <title>Logging</title>\n\n      <para>LAM can log events (e.g. user logins). You can use e.g. system\n      logging (syslog for Unix, event viewer for Windows) or log to a separate\n      file. Please note that LAM may log sensitive data (e.g. passwords) at\n      log level \"Debug\". Production systems should be set to \"Warning\" or\n      \"Error\".</para>\n\n      <para>The PHP error reporting is only for developers. By default LAM\n      does not show PHP notice messages in the web pages. You can select to\n      use the php.ini setting here or printing all errors and notices.</para>\n\n      <para>Log destinations:</para>\n\n      <itemizedlist>\n        <listitem>\n          <para>File: all messages will be written to the given file. LAM will\n          create it if not yet existing.</para>\n        </listitem>\n\n        <listitem>\n          <para>Syslog: uses local system logging (syslog for Unix, event\n          viewer for Windows)</para>\n        </listitem>\n\n        <listitem>\n          <para>Remote: sends log messages to a remote server that supports\n          the Unix <ulink url=\"https://www.rsyslog.com/\">remote\n          Syslogd</ulink> protocol. Please enter destination as \"server:port\",\n          e.g. \"myserver:123\".</para>\n        </listitem>\n\n        <listitem>\n          <para>No logging: disabled logging</para>\n        </listitem>\n      </itemizedlist>\n\n      <screenshot>\n        <mediaobject>\n          <imageobject>\n            <imagedata fileref=\"images/configGeneral3.png\"/>\n          </imageobject>\n        </mediaobject>\n      </screenshot>\n    </section>\n\n    <section id=\"mailSetup\">\n      <title>Mail options (LAM Pro)</title>\n\n      <para>Here you can configure the mail server settings. If you do not set\n      a mail server then LAM will try to use a locally installed one (e.g.\n      postfix, exim, sendmail).</para>\n\n      <para>SMTP setup:</para>\n\n      <para>Mail server: enter name + port separated by \":\". E.g. \"server:25\"\n      will use \"server\" on port 25.</para>\n\n      <para>User name: enter the user name if your SMTP server requires\n      authentication</para>\n\n      <para>Password: enter the password for the user above</para>\n\n      <para>Encryption protocol: Use TLS when unsure. SSL is only for older\n      servers and deprecated. The no encryption setting should not be used for\n      production installations.</para>\n\n      <screenshot>\n        <mediaobject>\n          <imageobject>\n            <imagedata fileref=\"images/configGeneral6.png\"/>\n          </imageobject>\n        </mediaobject>\n      </screenshot>\n    </section>\n\n    <section id=\"confmain_webauthn\">\n      <title>WebAuthn/FIDO2 devices</title>\n\n      <para>See the <link linkend=\"a_webauthn\">WebAuthn/FIDO2 appendix</link>\n      for an overview about WebAuthn/FIDO2 in LAM.</para>\n\n      <para>Here you can delete any webauthn device registrations. This\n      section is only shown if at least one device is registered.</para>\n\n      <para>Enter a part of the user's DN in the input box and perform a\n      search. LAM will show users and devices that match the search. You can\n      then delete a device registration. If the user has no more registered\n      devices then LAM will ask for registration on next login.</para>\n\n      <para>Note: You cannot add any device here. This can only be done by the\n      user during login, <link linkend=\"tool_webauthn\">webauthn tool</link> or\n      self service.</para>\n\n      <para><screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/configGeneral8.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot></para>\n    </section>\n\n    <section>\n      <title>Change master password</title>\n\n      <para>If you would like to change the master configuration password then\n      enter a new password here.</para>\n\n      <screenshot>\n        <mediaobject>\n          <imageobject>\n            <imagedata fileref=\"images/configGeneral5.png\"/>\n          </imageobject>\n        </mediaobject>\n      </screenshot>\n    </section>\n  </section>\n\n  <section id=\"serverProfiles\">\n    <title>Server profiles</title>\n\n    <para>The server profiles store information about your LDAP server (e.g.\n    host name) and what kind of accounts (e.g. users and groups) you would\n    like to manage. There is no limit on the number of server profiles. See\n    the <link linkend=\"confTypicalScenarios\">typical scenarios</link> about\n    how to structure your server profiles.</para>\n\n    <section>\n      <title>Manage server profiles</title>\n\n      <para>Select \"Manage server profiles\" to open the profile management\n      page.</para>\n\n      <screenshot>\n        <mediaobject>\n          <imageobject>\n            <imagedata fileref=\"images/configProfiles1.png\"/>\n          </imageobject>\n        </mediaobject>\n      </screenshot>\n\n      <para>Here you can create, rename and delete server profiles. The <link\n      linkend=\"a_configPasswords\">passwords</link> of your server profiles can\n      also be reset.</para>\n\n      <para>You may also specify the default server profile. This is the\n      server profile which is preselected at the login page. It also specifies\n      the language of the login and configuration pages.</para>\n\n      <para><emphasis role=\"bold\">Templates for new server\n      profiles</emphasis></para>\n\n      <para>You can create a new server profile based on one of the built-in\n      templates or any existing profile. Of course, the account types and\n      selected modules can be changed after you created your profile.</para>\n\n      <para>Built-in templates:</para>\n\n      <itemizedlist>\n        <listitem>\n          <para>addressbook: simple profile for user management with\n          inetOrgPerson object class</para>\n        </listitem>\n\n        <listitem>\n          <para>samba3: Samba 3 users, groups, hosts and domains</para>\n        </listitem>\n\n        <listitem>\n          <para>unix: Unix users and groups (posixAccount/Group)</para>\n        </listitem>\n\n        <listitem>\n          <para>windows_samba4: Active Directory user, group and host\n          management</para>\n        </listitem>\n      </itemizedlist>\n\n      <screenshot>\n        <mediaobject>\n          <imageobject>\n            <imagedata fileref=\"images/configProfiles2.png\"/>\n          </imageobject>\n        </mediaobject>\n      </screenshot>\n\n      <para>All operations on the profile management page require that you\n      authenticate yourself with the <link\n      linkend=\"a_configPasswords\">configuration master password</link>.</para>\n    </section>\n\n    <section>\n      <title>Editing a server profile</title>\n\n      <para>Please select you server profile and enter its password to edit a\n      server profile.</para>\n\n      <screenshot>\n        <mediaobject>\n          <imageobject>\n            <imagedata fileref=\"images/configProfiles3.png\"/>\n          </imageobject>\n        </mediaobject>\n      </screenshot>\n\n      <para>Each server profile contains the following information:</para>\n\n      <itemizedlist>\n        <listitem>\n          <para><emphasis role=\"bold\">General settings:</emphasis> general\n          settings about your LDAP server (e.g. host name and security\n          settings)</para>\n        </listitem>\n\n        <listitem>\n          <para><emphasis role=\"bold\">Account types:</emphasis> list of\n          account types (e.g. users and groups) that you would like to manage\n          and type specific settings (e.g. LDAP suffix)</para>\n        </listitem>\n\n        <listitem>\n          <para><emphasis role=\"bold\">Modules:</emphasis> list of modules\n          which define what account aspects (e.g. Unix, Samba, Kolab) you\n          would like to manage</para>\n        </listitem>\n\n        <listitem>\n          <para><emphasis role=\"bold\">Module settings:</emphasis> settings\n          which are specific for the selected account modules on the page\n          before</para>\n        </listitem>\n      </itemizedlist>\n\n      <section id=\"general_settings\">\n        <title>General settings</title>\n\n        <para>Here you can specify the LDAP server and some security\n        settings.</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/configProfiles4.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para>The server address of your LDAP server can be a DNS name or an\n        IP address. Use ldap:// for unencrypted LDAP connections or TLS\n        encrypted connections. LDAP+SSL (LDAPS) encrypted connections are\n        specified with ldaps://. The port value is optional. TLS cannot be\n        combined with ldaps://.</para>\n\n        <para>Hint: If you use a master/slave setup with referrals then point\n        LAM to your master server. Due to bugs in the underlying LDAP\n        libraries pointing to a slave might cause issues on write\n        operations.</para>\n\n        <para>LAM includes an LDAP browser which allows direct modification of\n        LDAP entries. If you would like to use it then enter the LDAP suffix\n        at \"Tree suffix\".</para>\n\n        <para>The search limit is used to reduce the number of search results\n        which are returned by your LDAP server.</para>\n\n        <para>The access level specifies if LAM should allow to modify LDAP\n        entries. This feature is only available in LAM Pro. LAM non-Pro\n        releases use write access. See <link\n        linkend=\"a_accessLevelPasswordReset\">this page</link> for details on\n        the different access levels.</para>\n\n        <para><emphasis role=\"bold\">Advanced options</emphasis></para>\n\n        <para>Display name: Sometimes, you may not want to display the server\n        address on the login page. In this case you can setup a display name\n        here (e.g. \"Production\").</para>\n\n        <para>Follow referrals: By default LAM will not follow LDAP referrals.\n        This is ok for most installations. If you use LDAP referrals please\n        activate the referral option in advanced settings.</para>\n\n        <para>Paged results: Paged results should be activated only if you\n        encounter any problems regarding size limits on Active Directory. LAM\n        will then query LDAP to return results in chunks of 999\n        entries.</para>\n\n        <para>Referential integrity overlay: Activate this checkbox if you\n        have any server side extension for referential integrity in place. In\n        this case the server will cleanup references to LDAP entries that are\n        deleted.</para>\n\n        <para>The following actions are skipped in this case:</para>\n\n        <itemizedlist>\n          <listitem>\n            <para>Users: group of (unique) names: memberships are not deleted\n            when user is deleted</para>\n          </listitem>\n\n          <listitem>\n            <para>Users: organizational roles: role assignments are not\n            deleted when user is deleted</para>\n          </listitem>\n\n          <listitem>\n            <para>Groups: groupOf(Unique)Names: memberships are not deleted\n            when group is deleted</para>\n          </listitem>\n        </itemizedlist>\n\n        <para>Hide password prompt for expired password: Hides the password\n        prompt when a user with expired password logs into LAM.</para>\n\n        <literallayout>\n</literallayout>\n\n        <para>LAM is translated to many different languages. Here you can\n        select the default language for this server profile. The language\n        setting may be overridden at the LAM login page.</para>\n\n        <para>Please also set your time zone here.</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/configProfiles5.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para>LAM can manage user home directories and quotas with an external\n        script. You can specify the home directory server and where the script\n        is located. The default rights for new home directories can be set,\n        too.</para>\n\n        <para><emphasis role=\"bold\">Note:</emphasis> This requires lamdaemon\n        to be installed on the remote server. This comes as separate package\n        for DEB/RPM. See <link linkend=\"a_lamdaemon\">here</link>.</para>\n\n        <para>Script server format:</para>\n\n        <itemizedlist>\n          <listitem>\n            <para>\"server\": \"server\" is the DNS name of your script\n            server</para>\n          </listitem>\n\n          <listitem>\n            <para>\"server:NAME\": NAME is the display name of this\n            server</para>\n          </listitem>\n\n          <listitem>\n            <para>\"server:NAME:/prefix\": /prefix is the directory prefix for\n            all operations. E.g. creating a home directory \"/home/user\" would\n            create \"/prefix/home/user\" then.</para>\n          </listitem>\n        </itemizedlist>\n\n        <para>You can provide a fixed user name. If you leave the field empty\n        then LAM will use your current account (the account you used to login\n        to LAM).</para>\n\n        <para>There are two possibilities to connect to your home\n        directory/quota server:</para>\n\n        <itemizedlist>\n          <listitem>\n            <para>SSH key (recommended): Please generate a SSH key pair and\n            provide the location to the <emphasis\n            role=\"bold\">private</emphasis> key file. If the key is protected\n            by a password you can also specify it here.</para>\n          </listitem>\n\n          <listitem>\n            <para>Password: If you do not set a SSH key then LAM will try to\n            connect with your current account (the password you used to login\n            to LAM).</para>\n          </listitem>\n        </itemizedlist>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/configProfiles6.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para id=\"profile_mail\">LAM Pro users may directly set passwords from\n        list view. You can configure if it should be possible to set specific\n        passwords and showing password on screen is allowed.</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/configProfiles10.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para>LAM Pro users can send out changed passwords to their users.\n        Here you can specify the options for these mails.</para>\n\n        <para>If you select \"Allow alternate address\" then password mails can\n        be sent to any address (e.g. a secondary address if the user account\n        is also bound to the mailbox).</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/configProfiles9.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para>LAM supports two methods for login:</para>\n\n        <itemizedlist>\n          <listitem>\n            <para>Fixed list</para>\n          </listitem>\n\n          <listitem>\n            <para>LDAP search</para>\n          </listitem>\n        </itemizedlist>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/configProfiles8.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para>The first one is to specify a fixed list of LDAP DNs that are\n        allowed to login. Please enter one DN per line.</para>\n\n        <para>The second one is to let LAM search for the DN in your\n        directory. E.g. if a user logs in with the user name \"joe\" then LAM\n        will do an LDAP search for this user name. When it finds a matching DN\n        then it will use this to authenticate the user. The wildcard \"%USER%\"\n        will be replaced by \"joe\" in this example. This way you can provide\n        login by user name, email address or other LDAP attributes.</para>\n\n        <para>Additionally, you can enable HTTP authentication when using\n        \"LDAP search\". This way the web server is responsible to authenticate\n        your users. LAM will use the given user name + password for the LDAP\n        login. You can also configure this to setup advanced login\n        restrictions (e.g. require group memberships for login). To setup HTTP\n        authentication in Apache please see this <ulink\n        url=\"http://httpd.apache.org/docs/2.2/howto/auth.html\">link</ulink>\n        and an example for LDAP authentication <link lang=\"\"\n        linkend=\"apache_http_auth\">here</link>.</para>\n\n        <para><emphasis role=\"bold\">Hint:</emphasis> LDAP search with group\n        membership check can be done with either <link\n        linkend=\"apache_http_auth\">HTTP authentication</link> or LDAP overlays\n        like <ulink\n        url=\"http://www.openldap.org/doc/admin24/overlays.html\">\"memberOf\"</ulink>\n        or <ulink\n        url=\"http://www.openldap.org/doc/admin24/overlays.html\">\"Dynamic\n        lists\"</ulink>. Dynamic lists allow to insert virtual attributes to\n        your user entries. These can then be used for the LDAP filter (e.g.\n        \"(&amp;(uid=%USER%)(memberof=cn=admins,ou=groups,dc=company,dc=com))\").</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/configProfiles7.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para><emphasis role=\"bold\">Global password policy\n        override</emphasis></para>\n\n        <para>This allows you to override some password policy options of\n        LAM's global password policy (LAM main configuration). You can\n        increase and decrease the values of the global policy.</para>\n\n        <screenshot>\n          <graphic fileref=\"images/configProfiles14.png\"/>\n        </screenshot>\n\n        <para id=\"conf_serverprofile_2fa\"><emphasis role=\"bold\">2-factor\n        authentication</emphasis></para>\n\n        <para>LAM supports 2-factor authentication for your users. This means\n        the user will not only authenticate by user+password but also with\n        e.g. a token generated by a mobile device. This adds more security\n        because the token is generated on a physically separated device\n        (typically mobile phone).</para>\n\n        <screenshot>\n          <graphic fileref=\"images/configProfiles11.png\"/>\n        </screenshot>\n\n        <para>The token is validated by a second application. LAM currently\n        supports:</para>\n\n        <itemizedlist>\n          <listitem>\n            <para><ulink\n            url=\"https://www.privacyidea.org/\">privacyIdea</ulink></para>\n          </listitem>\n\n          <listitem>\n            <para><ulink url=\"https://www.yubico.com/\">YubiKey</ulink></para>\n          </listitem>\n\n          <listitem>\n            <para><ulink url=\"https://duo.com/\">Duo</ulink></para>\n          </listitem>\n\n          <listitem>\n            <para><ulink\n            url=\"https://webauthn.io/\">WebAuthn/FIDO2</ulink></para>\n          </listitem>\n\n          <listitem>\n            <para><ulink url=\"https://www.okta.com/\">Okta</ulink></para>\n          </listitem>\n\n          <listitem>\n            <para><ulink url=\"https://openid.net/\">OpenID</ulink></para>\n          </listitem>\n        </itemizedlist>\n\n        <para>Configuration options:</para>\n\n        <para><emphasis role=\"bold\">privacyIDEA</emphasis></para>\n\n        <itemizedlist>\n          <listitem>\n            <para>Base URL: please enter the URL of your privacyIDEA\n            instance</para>\n          </listitem>\n\n          <listitem>\n            <para>User name attribute: please enter the LDAP attribute name\n            that contains the user ID (e.g. \"uid\").</para>\n          </listitem>\n\n          <listitem>\n            <para>Optional: By default LAM will enforce to use a token and\n            reject users that did not setup one. You can set this check to\n            optional. But if a user has setup a token then this will always be\n            required.</para>\n          </listitem>\n\n          <listitem>\n            <para>Disable certificate check: This should be used on\n            development instances only. It skips the certificate check when\n            connecting to verification server.</para>\n          </listitem>\n        </itemizedlist>\n\n        <para>Please note that LAM needs to authenticate to privacyIdea with\n        the user's user name and password WITHOUT second factor. This is\n        needed to get the list of tokens that are setup for the user. You can\n        setup a separate policy (scope: authentication) for LAM inside\n        privacyIdea that has IP restriction (\"Client\" setting) to LAM's server\n        IP and an action \"otppin\" \"none\".</para>\n\n        <para><emphasis role=\"bold\">YubiKey</emphasis></para>\n\n        <itemizedlist>\n          <listitem>\n            <para>Base URLs: please enter the URL(s) of your YubiKey\n            verification server(s). If you run a custom verification API such\n            as yubiserver then enter its URL (e.g.\n            http://www.example.com:8000/wsapi/2.0/verify). The URL needs to\n            end with \"/wsapi/2.0/verify\". For YubiKey cloud these are\n            \"https://api.yubico.com/wsapi/2.0/verify\",\n            \"https://api2.yubico.com/wsapi/2.0/verify\",\n            \"https://api3.yubico.com/wsapi/2.0/verify\",\n            \"https://api4.yubico.com/wsapi/2.0/verify\" and\n            \"https://api5.yubico.com/wsapi/2.0/verify\". Enter one URL per\n            line.</para>\n          </listitem>\n\n          <listitem>\n            <para>Client id: this is only required for YubiKey cloud. You can\n            register here: https://upgrade.yubico.com/getapikey/</para>\n          </listitem>\n\n          <listitem>\n            <para>Secret key: this is only required for YubiKey cloud. You can\n            register here: https://upgrade.yubico.com/getapikey/</para>\n          </listitem>\n\n          <listitem>\n            <para>Optional: By default LAM will enforce to use a token and\n            reject users that did not setup one. You can set this check to\n            optional. But if a user has setup a token then this will always be\n            required.</para>\n          </listitem>\n\n          <listitem>\n            <para>Disable certificate check: This should be used on\n            development instances only. It skips the certificate check when\n            connecting to verification server.</para>\n          </listitem>\n        </itemizedlist>\n\n        <para><emphasis role=\"bold\">Duo</emphasis></para>\n\n        <para>This requires to register a new \"Web SDK\" application in your\n        Duo admin panel.</para>\n\n        <itemizedlist>\n          <listitem>\n            <para>User name attribute: please enter the LDAP attribute name\n            that contains the user ID (e.g. \"uid\").</para>\n          </listitem>\n\n          <listitem>\n            <para>Base URL: please enter the API-URL of your Duo instance\n            (e.g. api-12345.duosecurity.com).</para>\n          </listitem>\n\n          <listitem>\n            <para>Client id: please enter your integration key.</para>\n          </listitem>\n\n          <listitem>\n            <para>Secret key: please enter your secret key.</para>\n          </listitem>\n        </itemizedlist>\n\n        <para><emphasis role=\"bold\">WebAuthn/FIDO2</emphasis></para>\n\n        <para>See the <link linkend=\"a_webauthn\">WebAuthn/FIDO2\n        appendix</link> for an overview about WebAuthn/FIDO2 in LAM.</para>\n\n        <para>Users will be asked to register a device during login if no\n        device is setup.</para>\n\n        <itemizedlist>\n          <listitem>\n            <para>Domain: Please enter the WebAuthn domain. This is the public\n            domain of the web server (e.g. \"example.com\"). Do not include\n            protocol or port. Browsers will reject authentication if the\n            domain does not match the web server domain.</para>\n          </listitem>\n\n          <listitem>\n            <para>Optional: By default LAM will enforce to use a 2FA device\n            and reject users that do not setup one. You can set this check to\n            optional. But if a user has setup a device then this will always\n            be required.</para>\n          </listitem>\n        </itemizedlist>\n\n        <para><emphasis role=\"bold\">Okta</emphasis></para>\n\n        <para>This requires to register a new application of type\n        \"Web\".</para>\n\n        <para>There, you will need to configure LAM's 2-factor URLs as \"Login\n        redirect URIs\" in the new application. They are\n        \"https://YOURDOMAIN/lam/templates/login2Factor.php\" for admin\n        interface and\n        \"https://YOURDOMAIN/lam/templates/selfService/selfService2Factor.php\"\n        for self service. You will get an error message during login with the\n        URL to configure in case it was wrong.</para>\n\n        <para>On \"Sign On\" tab you need to add a rule that prompts for the\n        factor.</para>\n\n        <para>LAM options:</para>\n\n        <itemizedlist>\n          <listitem>\n            <para>User name attribute: please enter the LDAP attribute name\n            that contains the user ID (e.g. \"mail\").</para>\n          </listitem>\n\n          <listitem>\n            <para>Base URL: please enter the URL of your Okta domain (e.g.\n            https://mydomain.okta.com)</para>\n          </listitem>\n\n          <listitem>\n            <para>Client id: please enter your application client id.</para>\n          </listitem>\n\n          <listitem>\n            <para>Secret key: please enter your application secret key.</para>\n          </listitem>\n        </itemizedlist>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/okta1.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para><emphasis role=\"bold\">OpenID</emphasis></para>\n\n        <para>This will use an OpenID server as 2nd factor for\n        authentication.</para>\n\n        <para>LAM options:</para>\n\n        <itemizedlist>\n          <listitem>\n            <para>User name attribute: please enter the LDAP attribute name\n            that contains the user ID (e.g. \"uid\").</para>\n          </listitem>\n\n          <listitem>\n            <para>Base URL: please enter the URL of your OpenID client URL.\n            The URL is the one before the\n            \"/.well-known/openid-configuration\".</para>\n          </listitem>\n\n          <listitem>\n            <para>Client id: please enter your application client id.</para>\n          </listitem>\n\n          <listitem>\n            <para>Secret key: please enter your application secret key.</para>\n          </listitem>\n        </itemizedlist>\n\n        <para>KeyCloack example configuration:</para>\n\n        <para>Create a new client, select \"openid-connect\" protocol and enter\n        a client ID. Root URL can be left empty.</para>\n\n        <screenshot>\n          <graphic fileref=\"images/openid1.png\"/>\n        </screenshot>\n\n        <para>Now choose access type \"confidential\" and enter the valid\n        redirect URLs. They are\n        \"https://YOURDOMAIN/lam/templates/login2Factor.php\" for admin\n        interface and\n        \"https://YOURDOMAIN/lam/templates/selfService/selfService2Factor.php\"\n        for self service. You will get an error message during login in case\n        it was wrong. Then save the configuration.</para>\n\n        <para>Next, switch to tab \"Credentials\" to get the client\n        secret.</para>\n\n        <screenshot>\n          <graphic fileref=\"images/openid2.png\"/>\n        </screenshot>\n\n        <para>Example configuration values:</para>\n\n        <itemizedlist>\n          <listitem>\n            <para>User name: uid</para>\n          </listitem>\n\n          <listitem>\n            <para>Base URL: http://openidserver/auth/realms/master</para>\n          </listitem>\n\n          <listitem>\n            <para>Client id: demo</para>\n          </listitem>\n\n          <listitem>\n            <para>Secret key: 59bdf504-b76e-4138-8421-ef662b2c6c83</para>\n          </listitem>\n        </itemizedlist>\n\n        <para><emphasis role=\"bold\">Login</emphasis></para>\n\n        <para>After logging in with user + password LAM will ask for the 2nd\n        factor. If the user has setup multiple factors then he can choose one\n        of them.</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/configProfiles12.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para><emphasis role=\"bold\">Password</emphasis></para>\n\n        <para>You may also change the password of this server profile. Please\n        just enter the new password in both password fields.</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/configProfiles13.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n      </section>\n\n      <section>\n        <title>Account types</title>\n\n        <para>LAM supports to manage various types of LDAP entries (e.g.\n        users, groups, DHCP entries, ...). On this page you can select which\n        types of entries you want to manage with LAM.</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/configTypes1.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para>The section at the top shows a list of possible types. You can\n        activate them by simply clicking on the plus sign next to it.</para>\n\n        <para>Each account type has the following options:</para>\n\n        <itemizedlist>\n          <listitem>\n            <para><emphasis role=\"bold\">LDAP suffix:</emphasis> the LDAP\n            suffix where entries of this type should be managed</para>\n          </listitem>\n\n          <listitem>\n            <para><emphasis role=\"bold\">List attributes:</emphasis> a list of\n            attributes which are shown in the account lists</para>\n          </listitem>\n\n          <listitem>\n            <para><emphasis role=\"bold\">Additional LDAP filter:</emphasis> LAM\n            will automatically detect the right LDAP entries for each account\n            type. This can be used to further limit the number of visible\n            entries (e.g. if you want to manage only some specific groups).\n            You can use \"@@LOGIN_DN@@\" as wildcard (e.g.\n            \"(owner=@@LOGIN_DN@@)\"). It will be replaced by the DN of the user\n            who is logged in.</para>\n          </listitem>\n\n          <listitem>\n            <para><emphasis role=\"bold\">Hidden:</emphasis> This is used to\n            hide account types that should not be displayed but are required\n            by other account types. E.g. you can hide the Samba domains\n            account type and still assign domains when you edit your\n            users.</para>\n          </listitem>\n\n          <listitem>\n            <para><emphasis role=\"bold\">Read-only (LAM Pro only):</emphasis>\n            This allows to set a single account type to read-only mode. Please\n            note that this is a restriction on functional level (e.g. group\n            memberships can be changed on user page even if groups are\n            read-only) and is no replacement for setting up proper ACLs on\n            your LDAP server.</para>\n          </listitem>\n\n          <listitem>\n            <para><emphasis role=\"bold\">Custom label:</emphasis> Here you can\n            set a custom label for the account types. Use this if the standard\n            label does not fit for you (e.g. enter \"Servers\" for\n            hosts).</para>\n          </listitem>\n\n          <listitem>\n            <para><emphasis role=\"bold\">No new entries (LAM Pro\n            only):</emphasis> Use this if you want to prevent that new\n            accounts of this type are created by your users. The GUI will hide\n            buttons to create new entries and also disable file upload for\n            this type.</para>\n          </listitem>\n\n          <listitem>\n            <para><emphasis role=\"bold\">Disallow delete (LAM Pro\n            only):</emphasis> Use this if you want to prevent that accounts of\n            this type are deleted by your users.</para>\n          </listitem>\n        </itemizedlist>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/configTypes2.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para>On the next page you can specify in detail what extensions\n        should be enabled for each account type.</para>\n      </section>\n\n      <section>\n        <title>Modules</title>\n\n        <para>The modules specify the active extensions for each account type.\n        E.g. here you can setup if your user entries should be address book\n        entries only or also support Unix or Samba.</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/configModules1.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para>Each account type needs a so called \"base module\". This is the\n        basement for all LDAP entries of this type. Usually, it provides the\n        structural object class for the LDAP entries. There must be exactly\n        one active base module for each account type.</para>\n\n        <para>Furthermore, there may be any number of additional active\n        account modules. E.g. you may select \"Personal\" as base module and\n        Unix + Samba as additional modules.</para>\n      </section>\n\n      <section>\n        <title>Module settings</title>\n\n        <para>Depending on the activated account modules there may be\n        additional configuration options available. They can be found on the\n        \"Module settings\" tab. E.g. the Personal account module allows to hide\n        several input fields and the Unix module requires to specify ranges\n        for UID numbers.</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/configSettings1.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n      </section>\n    </section>\n\n    <section>\n      <title>Cron jobs (LAM Pro)</title>\n\n      <para>LAM Pro can execute common tasks via cron job. This can be used to\n      e.g. notify your users before their passwords expire.</para>\n\n      <section>\n        <title>LDAP and database configuration</title>\n\n        <para>Please add the LDAP bind user and password for all jobs. This\n        LDAP account will be used to perform all LDAP read and write\n        operations.</para>\n\n        <para>Next, select the database type where LAM should store job\n        related data. Supported databases are SQLite and MySQL.</para>\n\n        <para><emphasis role=\"bold\">SQLite</emphasis></para>\n\n        <para>This is a simple file based database. It needs no special\n        database server. The database file will be located next to the server\n        profile in config directory.</para>\n\n        <para>You will need to install the SQLite PDO module for PHP\n        (pdo_sqlite.so). For Debian this is located in package\n        php5-sqlite.</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/jobs1.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para><emphasis role=\"bold\">MySQL</emphasis></para>\n\n        <para>This will store all job data in an external MySQL\n        database.</para>\n\n        <para>You will need to install the MySQL PDO module for PHP\n        (pdo_mysql.so). For Debian this is located in package\n        php5-mysql.</para>\n\n        <para>Steps to create a MySQL database and user:</para>\n\n        <literallayout># login\nmysql -u root -p\n# create a database\nmysql&gt; create database lam_cron;\n#\nmysql&gt; CREATE USER 'lam_cron'@'%' IDENTIFIED BY 'password';\nmysql&gt; CREATE USER 'lam_cron'@'localhost' IDENTIFIED BY 'password';\n# grant access for new user\nmysql&gt; GRANT ALL PRIVILEGES ON lam_cron.* TO 'lam_cron'@'%';\nmysql&gt; GRANT ALL PRIVILEGES ON lam_cron.* TO 'lam_cron'@'localhost';\n</literallayout>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/jobs3.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para><literallayout>\n</literallayout><emphasis role=\"bold\">Test your settings</emphasis></para>\n\n        <para>After the LDAP and database settings are done you can test your\n        settings.</para>\n\n        <para><emphasis role=\"bold\">Cron entry</emphasis></para>\n\n        <para>LAM also prints the crontab line that you need to run the\n        configured jobs on a daily basis. The command must be run as the same\n        user as your webserver is running. You are free to change the starting\n        time of the script or run it more often.</para>\n\n        <para>Dry-run: You can perform a dry-run of the job. This will not\n        perform any actions but only print what would be done. For this please\n        put \"--dryRun\" at the end of the command. E.g.:</para>\n\n        <literallayout>  /usr/share/ldap-account-manager/lib/cron.sh lam 123456789 --dryRun</literallayout>\n\n        <para/>\n      </section>\n\n      <section>\n        <title>Adding jobs</title>\n\n        <para>To add a new job just click on the \"Add job\" button and select\n        the job type you need. The list of available jobs depends on your\n        active account modules. E.g. the PPolicy job will only be available if\n        you activated PPolicy user module.</para>\n\n        <para>Depending on the job type jobs may be added multiple times with\n        different configurations. For descriptions about the available job\n        types see next chapters.</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/jobs2.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para>Available jobs:</para>\n\n        <itemizedlist>\n          <listitem>\n            <para><link linkend=\"job_ppolicy_password_expire\">PPolicy: Notify\n            users about password expiration</link></para>\n          </listitem>\n\n          <listitem>\n            <para><link linkend=\"job_389_password_expire\">389ds: Notify users\n            about password expiration</link></para>\n          </listitem>\n\n          <listitem>\n            <para><link linkend=\"job_shadow_password_expire\">Shadow: Notify\n            users about password expiration</link></para>\n          </listitem>\n\n          <listitem>\n            <para><link linkend=\"job_shadow_move_expired\">Shadow: Delete or\n            move expired accounts</link></para>\n          </listitem>\n\n          <listitem>\n            <para><link linkend=\"job_shadow_account_expiration_note\">Shadow:\n            Notify users about account expiration</link></para>\n          </listitem>\n\n          <listitem>\n            <para><link linkend=\"job_windows_password_expire\">Windows: Notify\n            users about password expiration</link></para>\n          </listitem>\n\n          <listitem>\n            <para><link linkend=\"job_windows_account_expiration_note\">Windows:\n            Notify users about account expiration</link></para>\n          </listitem>\n\n          <listitem>\n            <para><link linkend=\"job_windows_move_expired\">Windows: Delete or\n            move expired accounts</link></para>\n          </listitem>\n\n          <listitem>\n            <para><link linkend=\"job_windows_notify_groups\">Windows: Notify\n            users about their managed groups</link></para>\n          </listitem>\n\n          <listitem>\n            <para><link linkend=\"job_freeradius_move_expired\">FreeRadius:\n            Delete or move expired accounts</link></para>\n          </listitem>\n\n          <listitem>\n            <para><link\n            linkend=\"job_freeradius_account_expiration_notification\">FreeRadius:\n            Notify users about account expiration</link></para>\n          </listitem>\n\n          <listitem>\n            <para><link linkend=\"job_qmail_move_expired\">Qmail: Delete or move\n            expired accounts</link></para>\n          </listitem>\n\n          <listitem>\n            <para><link linkend=\"job_qmail_account_expire_notify\">Qmail:\n            Notify users about account expiration</link></para>\n          </listitem>\n        </itemizedlist>\n\n        <section id=\"job_ppolicy_password_expire\">\n          <title>PPolicy: Notify users about password expiration</title>\n\n          <para>This will send your users an email reminder before their\n          password expires.</para>\n\n          <para>You need to activate the PPolicy module for users to be able\n          to add this job. The job can be added multiple times (e.g. to send a\n          second warning at a later time).</para>\n\n          <para>LAM calculates the expiration date based on the last password\n          change and the assigned password policy (or the default policy)\n          using attributes pwdMaxAge and pwdExpireWarning.</para>\n\n          <para>Examples:</para>\n\n          <para>Warning time (pwdExpireWarning) = 14 days, notification period\n          = 10: LAM will send out the email 24 days before the password\n          expires</para>\n\n          <para>Warning time (pwdExpireWarning) = 14 days, notification period\n          = 0: LAM will send out the email 14 days before the password\n          expires</para>\n\n          <para>No warning time (pwdExpireWarning), notification period = 10:\n          LAM will send out the email 10 days before the password\n          expires</para>\n\n          <screenshot>\n            <mediaobject>\n              <imageobject>\n                <imagedata fileref=\"images/jobs_ppolicy1.png\"/>\n              </imageobject>\n            </mediaobject>\n          </screenshot>\n\n          <table>\n            <title>Options</title>\n\n            <tgroup cols=\"2\">\n              <tbody>\n                <row>\n                  <entry><emphasis role=\"bold\">Option</emphasis></entry>\n\n                  <entry><emphasis role=\"bold\">Description</emphasis></entry>\n                </row>\n\n                <row>\n                  <entry>From address</entry>\n\n                  <entry>The email address to set as FROM.</entry>\n                </row>\n\n                <row>\n                  <entry>Reply-to address</entry>\n\n                  <entry>Optional Reply-to address for email.</entry>\n                </row>\n\n                <row>\n                  <entry>CC address</entry>\n\n                  <entry>Optional CC mail address.</entry>\n                </row>\n\n                <row>\n                  <entry>BCC address</entry>\n\n                  <entry>Optional BCC mail address.</entry>\n                </row>\n\n                <row>\n                  <entry>Subject</entry>\n\n                  <entry>The email subject line. Supports wildcards, see\n                  below.</entry>\n                </row>\n\n                <row>\n                  <entry>Text</entry>\n\n                  <entry>The email body text. Supports wildcards, see\n                  below.</entry>\n                </row>\n\n                <row>\n                  <entry>Notification period</entry>\n\n                  <entry>Number of days to notify before password\n                  expires.</entry>\n                </row>\n\n                <row>\n                  <entry>Default password policy</entry>\n\n                  <entry>Default PPolicy password policy entry (object class\n                  \"pwdPolicy\").</entry>\n                </row>\n              </tbody>\n            </tgroup>\n          </table>\n\n          <para>Wildcards:</para>\n\n          <para>You can enter LDAP attributes as wildcards in the form\n          @@ATTRIBUTE_NAME@@. E.g. to add the user's common name use \"@@cn@@\".\n          For the common name it would be \"@@cn@@\".</para>\n\n          <para>There are also two special wildcards for the expiration date.\n          @@EXPIRE_DATE_DDMMYYYY@@ will print the date as e.g. \"31.12.2016\".\n          @@EXPIRE_DATE_YYYYMMDD@@ will print the date as e.g.\n          \"2016-12-31\".</para>\n        </section>\n\n        <section id=\"job_389_password_expire\">\n          <title>389ds: Notify users about password expiration</title>\n\n          <para>This will send your users an email reminder before their\n          password expires.</para>\n\n          <para>You need to activate the Account Locking module for users to\n          be able to add this job. The job can be added multiple times (e.g.\n          to send a second warning at a later time).</para>\n\n          <para>LAM calculates the expiration date based on the attribute\n          passwordExpirationTime.</para>\n\n          <screenshot>\n            <mediaobject>\n              <imageobject>\n                <imagedata fileref=\"images/jobs_389dsPasswordMail1.png\"/>\n              </imageobject>\n            </mediaobject>\n          </screenshot>\n\n          <para><table>\n              <title>Options</title>\n\n              <tgroup cols=\"2\">\n                <tbody>\n                  <row>\n                    <entry><emphasis role=\"bold\">Option</emphasis></entry>\n\n                    <entry><emphasis\n                    role=\"bold\">Description</emphasis></entry>\n                  </row>\n\n                  <row>\n                    <entry>From address</entry>\n\n                    <entry>The email address to set as FROM.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Reply-to address</entry>\n\n                    <entry>Optional Reply-to address for email.</entry>\n                  </row>\n\n                  <row>\n                    <entry>CC address</entry>\n\n                    <entry>Optional CC mail address.</entry>\n                  </row>\n\n                  <row>\n                    <entry>BCC address</entry>\n\n                    <entry>Optional BCC mail address.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Subject</entry>\n\n                    <entry>The email subject line. Supports wildcards, see\n                    below.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Text</entry>\n\n                    <entry>The email body text. Supports wildcards, see\n                    below.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Notification period</entry>\n\n                    <entry>Number of days to notify before password\n                    expires.</entry>\n                  </row>\n                </tbody>\n              </tgroup>\n            </table></para>\n\n          <para>Wildcards:</para>\n\n          <para>You can enter LDAP attributes as wildcards in the form\n          @@ATTRIBUTE_NAME@@. E.g. to add the user's common name use \"@@cn@@\".\n          For the common name it would be \"@@cn@@\".</para>\n\n          <para>There are also two special wildcards for the expiration date.\n          @@EXPIRE_DATE_DDMMYYYY@@ will print the date as e.g. \"31.12.2016\".\n          @@EXPIRE_DATE_YYYYMMDD@@ will print the date as e.g.\n          \"2016-12-31\".</para>\n        </section>\n\n        <section id=\"job_shadow_password_expire\">\n          <title>Shadow: Notify users about password expiration</title>\n\n          <para>This will send your users an email reminder before their\n          password expires.</para>\n\n          <para>You need to activate the Shadow module for users to be able to\n          add this job. The job can be added multiple times (e.g. to send a\n          second warning at a later time).</para>\n\n          <para>LAM calculates the expiration date based on the last password\n          change, the password warning time (attribute \"shadowWarning\") and\n          the specified notification period.</para>\n\n          <para>Examples:</para>\n\n          <para>Warning time = 14, notification period = 10: LAM will send out\n          the email 24 days before the password expires</para>\n\n          <para>Warning time = 14, notification period = 0: LAM will send out\n          the email 14 days before the password expires</para>\n\n          <screenshot>\n            <mediaobject>\n              <imageobject>\n                <imagedata fileref=\"images/jobs_shadow1.png\"/>\n              </imageobject>\n            </mediaobject>\n          </screenshot>\n\n          <table>\n            <title>Options</title>\n\n            <tgroup cols=\"2\">\n              <tbody>\n                <row>\n                  <entry><emphasis role=\"bold\">Option</emphasis></entry>\n\n                  <entry><emphasis role=\"bold\">Description</emphasis></entry>\n                </row>\n\n                <row>\n                  <entry>From address</entry>\n\n                  <entry>The email address to set as FROM.</entry>\n                </row>\n\n                <row>\n                  <entry>Reply-to address</entry>\n\n                  <entry>Optional Reply-to address for email.</entry>\n                </row>\n\n                <row>\n                  <entry>CC address</entry>\n\n                  <entry>Optional CC mail address.</entry>\n                </row>\n\n                <row>\n                  <entry>BCC address</entry>\n\n                  <entry>Optional BCC mail address.</entry>\n                </row>\n\n                <row>\n                  <entry>Subject</entry>\n\n                  <entry>The email subject line. Supports wildcards, see\n                  below.</entry>\n                </row>\n\n                <row>\n                  <entry>Text</entry>\n\n                  <entry>The email body text. Supports wildcards, see\n                  below.</entry>\n                </row>\n\n                <row>\n                  <entry>Notification period</entry>\n\n                  <entry>Number of days to notify before password\n                  expires.</entry>\n                </row>\n              </tbody>\n            </tgroup>\n          </table>\n\n          <para>Wildcards:</para>\n\n          <para>You can enter LDAP attributes as wildcards in the form\n          @@ATTRIBUTE_NAME@@. E.g. to add the user's common name use \"@@cn@@\".\n          For the common name it would be \"@@cn@@\".</para>\n\n          <para>There are also two special wildcards for the expiration date.\n          @@EXPIRE_DATE_DDMMYYYY@@ will print the date as e.g. \"31.12.2016\".\n          @@EXPIRE_DATE_YYYYMMDD@@ will print the date as e.g.\n          \"2016-12-31\".</para>\n        </section>\n\n        <section id=\"job_shadow_move_expired\">\n          <title>Shadow: Delete or move expired accounts</title>\n\n          <para>You can automatically delete or move expired accounts. The job\n          checks Shadow account expiration dates (not password expiration\n          dates).</para>\n\n          <screenshot>\n            <mediaobject>\n              <imageobject>\n                <imagedata fileref=\"images/jobs_shadow2.png\"/>\n              </imageobject>\n            </mediaobject>\n          </screenshot>\n\n          <table>\n            <title>Options</title>\n\n            <tgroup cols=\"2\">\n              <tbody>\n                <row>\n                  <entry><emphasis role=\"bold\">Option</emphasis></entry>\n\n                  <entry><emphasis role=\"bold\">Description</emphasis></entry>\n                </row>\n\n                <row>\n                  <entry>Delay</entry>\n\n                  <entry>Number of days to wait after the account is\n                  expired.</entry>\n                </row>\n\n                <row>\n                  <entry>Action</entry>\n\n                  <entry>Delete or move accounts</entry>\n                </row>\n\n                <row>\n                  <entry>Target DN</entry>\n\n                  <entry>Move only: specifies the DN where accounts are\n                  moved</entry>\n                </row>\n              </tbody>\n            </tgroup>\n          </table>\n        </section>\n\n        <section id=\"job_shadow_account_expiration_note\">\n          <title>Shadow: Notify users about account expiration</title>\n\n          <para>This will send your users an email reminder before their whole\n          account expires.</para>\n\n          <para>You need to activate the Shadow module for users to be able to\n          add this job. The job can be added multiple times (e.g. to send a\n          second warning at a later time).</para>\n\n          <screenshot>\n            <graphic fileref=\"images/jobs_shadow3.png\"/>\n          </screenshot>\n\n          <para><table>\n              <title>Options</title>\n\n              <tgroup cols=\"2\">\n                <tbody>\n                  <row>\n                    <entry><emphasis role=\"bold\">Option</emphasis></entry>\n\n                    <entry><emphasis\n                    role=\"bold\">Description</emphasis></entry>\n                  </row>\n\n                  <row>\n                    <entry>From address</entry>\n\n                    <entry>The email address to set as FROM.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Reply-to address</entry>\n\n                    <entry>Optional Reply-to address for email.</entry>\n                  </row>\n\n                  <row>\n                    <entry>CC address</entry>\n\n                    <entry>Optional CC mail address.</entry>\n                  </row>\n\n                  <row>\n                    <entry>BCC address</entry>\n\n                    <entry>Optional BCC mail address.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Subject</entry>\n\n                    <entry>The email subject line. Supports wildcards, see\n                    below.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Text</entry>\n\n                    <entry>The email body text. Supports wildcards, see\n                    below.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Notification period</entry>\n\n                    <entry>Number of days to notify before account\n                    expires.</entry>\n                  </row>\n                </tbody>\n              </tgroup>\n            </table>Wildcards:</para>\n\n          <para>You can enter LDAP attributes as wildcards in the form\n          @@ATTRIBUTE_NAME@@. E.g. to add the user's common name use \"@@cn@@\".\n          For the common name it would be \"@@cn@@\".</para>\n\n          <para>There are also two special wildcards for the expiration date.\n          @@EXPIRE_DATE_DDMMYYYY@@ will print the date as e.g. \"31.12.2016\".\n          @@EXPIRE_DATE_YYYYMMDD@@ will print the date as e.g.\n          \"2016-12-31\".</para>\n        </section>\n\n        <section id=\"job_windows_password_expire\">\n          <title>Windows: Notify users about password expiration</title>\n\n          <para>This will send your users an email reminder before their\n          password expires.</para>\n\n          <para>You need to activate the Windows module for users to be able\n          to add this job. The job can be added multiple times (e.g. to send a\n          second warning at a later time).</para>\n\n          <para>LAM calculates the expiration date based on the last password\n          change and the domain policy.</para>\n\n          <screenshot>\n            <mediaobject>\n              <imageobject>\n                <imagedata fileref=\"images/jobs_windows1.png\"/>\n              </imageobject>\n            </mediaobject>\n          </screenshot>\n\n          <table>\n            <title>Options</title>\n\n            <tgroup cols=\"2\">\n              <tbody>\n                <row>\n                  <entry><emphasis role=\"bold\">Option</emphasis></entry>\n\n                  <entry><emphasis role=\"bold\">Description</emphasis></entry>\n                </row>\n\n                <row>\n                  <entry>From address</entry>\n\n                  <entry>The email address to set as FROM.</entry>\n                </row>\n\n                <row>\n                  <entry>Reply-to address</entry>\n\n                  <entry>Optional Reply-to address for email.</entry>\n                </row>\n\n                <row>\n                  <entry>CC address</entry>\n\n                  <entry>Optional CC mail address.</entry>\n                </row>\n\n                <row>\n                  <entry>BCC address</entry>\n\n                  <entry>Optional BCC mail address.</entry>\n                </row>\n\n                <row>\n                  <entry>Subject</entry>\n\n                  <entry>The email subject line. Supports wildcards, see\n                  below.</entry>\n                </row>\n\n                <row>\n                  <entry>Text</entry>\n\n                  <entry>The email body text. Supports wildcards, see\n                  below.</entry>\n                </row>\n\n                <row>\n                  <entry>Notification period</entry>\n\n                  <entry>Number of days to notify before password\n                  expires.</entry>\n                </row>\n              </tbody>\n            </tgroup>\n          </table>\n\n          <para>Wildcards:</para>\n\n          <para>You can enter LDAP attributes as wildcards in the form\n          @@ATTRIBUTE_NAME@@. E.g. to add the user's common name use \"@@cn@@\".\n          For the common name it would be \"@@cn@@\".</para>\n\n          <para>There are also two special wildcards for the expiration date.\n          @@EXPIRE_DATE_DDMMYYYY@@ will print the date as e.g. \"31.12.2016\".\n          @@EXPIRE_DATE_YYYYMMDD@@ will print the date as e.g.\n          \"2016-12-31\".</para>\n        </section>\n\n        <section id=\"job_windows_account_expiration_note\">\n          <title>Windows: Notify users about account expiration</title>\n\n          <para>This will send your users an email reminder before their whole\n          account expires.</para>\n\n          <para>You need to activate the Windows module for users to be able\n          to add this job. The job can be added multiple times (e.g. to send a\n          second warning at a later time).</para>\n\n          <screenshot>\n            <graphic fileref=\"images/jobs_windowsAccountExpiration.png\"/>\n          </screenshot>\n\n          <para><table>\n              <title>Options</title>\n\n              <tgroup cols=\"2\">\n                <tbody>\n                  <row>\n                    <entry><emphasis role=\"bold\">Option</emphasis></entry>\n\n                    <entry><emphasis\n                    role=\"bold\">Description</emphasis></entry>\n                  </row>\n\n                  <row>\n                    <entry>From address</entry>\n\n                    <entry>The email address to set as FROM.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Reply-to address</entry>\n\n                    <entry>Optional Reply-to address for email.</entry>\n                  </row>\n\n                  <row>\n                    <entry>CC address</entry>\n\n                    <entry>Optional CC mail address.</entry>\n                  </row>\n\n                  <row>\n                    <entry>BCC address</entry>\n\n                    <entry>Optional BCC mail address.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Subject</entry>\n\n                    <entry>The email subject line. Supports wildcards, see\n                    below.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Text</entry>\n\n                    <entry>The email body text. Supports wildcards, see\n                    below.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Notification period</entry>\n\n                    <entry>Number of days to notify before account\n                    expires.</entry>\n                  </row>\n                </tbody>\n              </tgroup>\n            </table>Wildcards:</para>\n\n          <para>You can enter LDAP attributes as wildcards in the form\n          @@ATTRIBUTE_NAME@@. E.g. to add the user's common name use \"@@cn@@\".\n          For the common name it would be \"@@cn@@\".</para>\n\n          <para>There are also two special wildcards for the expiration date.\n          @@EXPIRE_DATE_DDMMYYYY@@ will print the date as e.g. \"31.12.2016\".\n          @@EXPIRE_DATE_YYYYMMDD@@ will print the date as e.g.\n          \"2016-12-31\".</para>\n        </section>\n\n        <section id=\"job_windows_move_expired\">\n          <title>Windows: Delete or move expired accounts</title>\n\n          <para>You can automatically delete or move expired accounts.</para>\n\n          <screenshot>\n            <mediaobject>\n              <imageobject>\n                <imagedata fileref=\"images/jobs_windowsCleanup.png\"/>\n              </imageobject>\n            </mediaobject>\n          </screenshot>\n\n          <table>\n            <title>Options</title>\n\n            <tgroup cols=\"2\">\n              <tbody>\n                <row>\n                  <entry><emphasis role=\"bold\">Option</emphasis></entry>\n\n                  <entry><emphasis role=\"bold\">Description</emphasis></entry>\n                </row>\n\n                <row>\n                  <entry>Delay</entry>\n\n                  <entry>Number of days to wait after the account is\n                  expired.</entry>\n                </row>\n\n                <row>\n                  <entry>Action</entry>\n\n                  <entry>Delete or move accounts</entry>\n                </row>\n\n                <row>\n                  <entry>Target DN</entry>\n\n                  <entry>Move only: specifies the DN where accounts are\n                  moved</entry>\n                </row>\n              </tbody>\n            </tgroup>\n          </table>\n        </section>\n\n        <section id=\"job_windows_notify_groups\">\n          <title>Windows: Notify users about their managed groups</title>\n\n          <para>This will send your users an email with the groups they\n          manage. This also includes a list of users in these groups. The\n          users and groups are searched using the user+group account types\n          that are specified in server profile.</para>\n\n          <para>You need to activate the Windows module for users to be able\n          to add this job. The job can be added multiple times.</para>\n\n          <screenshot>\n            <graphic fileref=\"images/jobs_windowsNotifyGroups.png\"/>\n          </screenshot>\n\n          <para><table>\n              <title>Options</title>\n\n              <tgroup cols=\"2\">\n                <tbody>\n                  <row>\n                    <entry><emphasis role=\"bold\">Option</emphasis></entry>\n\n                    <entry><emphasis\n                    role=\"bold\">Description</emphasis></entry>\n                  </row>\n\n                  <row>\n                    <entry>From address</entry>\n\n                    <entry>The email address to set as FROM.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Reply-to address</entry>\n\n                    <entry>Optional Reply-to address for email.</entry>\n                  </row>\n\n                  <row>\n                    <entry>CC address</entry>\n\n                    <entry>Optional CC mail address.</entry>\n                  </row>\n\n                  <row>\n                    <entry>BCC address</entry>\n\n                    <entry>Optional BCC mail address.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Subject</entry>\n\n                    <entry>The email subject line. Supports wildcards, see\n                    below.</entry>\n                  </row>\n\n                  <row>\n                    <entry>HTML format</entry>\n\n                    <entry>Send email as HTML instead of plain text.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Text</entry>\n\n                    <entry>The email body text. Supports wildcards, see\n                    below.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Period</entry>\n\n                    <entry>Defines how often the mail is sent (e.g.\n                    quarterly).</entry>\n                  </row>\n                </tbody>\n              </tgroup>\n            </table>Wildcards:</para>\n\n          <para>You can enter LDAP attributes as wildcards in the form\n          @@ATTRIBUTE_NAME@@. E.g. to add the user's common name use \"@@cn@@\".\n          For the common name it would be \"@@cn@@\".</para>\n\n          <para>Use the wildcard \"@@LAM_MANAGED_GROUPS@@\" to insert the group\n          listing. This wildcard is mandatory.</para>\n        </section>\n\n        <section id=\"job_freeradius_move_expired\">\n          <title>FreeRadius: Delete or move expired accounts</title>\n\n          <para>You can automatically delete or move expired accounts.</para>\n\n          <screenshot>\n            <mediaobject>\n              <imageobject>\n                <imagedata fileref=\"images/jobs_freeRadiusCleanup.png\"/>\n              </imageobject>\n            </mediaobject>\n          </screenshot>\n\n          <table>\n            <title>Options</title>\n\n            <tgroup cols=\"2\">\n              <tbody>\n                <row>\n                  <entry><emphasis role=\"bold\">Option</emphasis></entry>\n\n                  <entry><emphasis role=\"bold\">Description</emphasis></entry>\n                </row>\n\n                <row>\n                  <entry>Delay</entry>\n\n                  <entry>Number of days to wait after the account is\n                  expired.</entry>\n                </row>\n\n                <row>\n                  <entry>Action</entry>\n\n                  <entry>Delete or move accounts</entry>\n                </row>\n\n                <row>\n                  <entry>Target DN</entry>\n\n                  <entry>Move only: specifies the DN where accounts are\n                  moved</entry>\n                </row>\n              </tbody>\n            </tgroup>\n          </table>\n        </section>\n\n        <section id=\"job_freeradius_account_expiration_notification\">\n          <title>FreeRadius: Notify users about account expiration</title>\n\n          <para>This will send your users an email reminder before their\n          FreeRadius account expires.</para>\n\n          <para>You need to activate the FreeRadius module for users to be\n          able to add this job. The job can be added multiple times (e.g. to\n          send a second warning at a later time).</para>\n\n          <screenshot>\n            <graphic fileref=\"images/jobs_freeradiusAccountExpiration.png\"/>\n          </screenshot>\n\n          <para><table>\n              <title>Options</title>\n\n              <tgroup cols=\"2\">\n                <tbody>\n                  <row>\n                    <entry><emphasis role=\"bold\">Option</emphasis></entry>\n\n                    <entry><emphasis\n                    role=\"bold\">Description</emphasis></entry>\n                  </row>\n\n                  <row>\n                    <entry>From address</entry>\n\n                    <entry>The email address to set as FROM.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Reply-to address</entry>\n\n                    <entry>Optional Reply-to address for email.</entry>\n                  </row>\n\n                  <row>\n                    <entry>CC address</entry>\n\n                    <entry>Optional CC mail address.</entry>\n                  </row>\n\n                  <row>\n                    <entry>BCC address</entry>\n\n                    <entry>Optional BCC mail address.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Subject</entry>\n\n                    <entry>The email subject line. Supports wildcards, see\n                    below.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Text</entry>\n\n                    <entry>The email body text. Supports wildcards, see\n                    below.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Notification period</entry>\n\n                    <entry>Number of days to notify before account\n                    expires.</entry>\n                  </row>\n                </tbody>\n              </tgroup>\n            </table>Wildcards:</para>\n\n          <para>You can enter LDAP attributes as wildcards in the form\n          @@ATTRIBUTE_NAME@@. E.g. to add the user's common name use \"@@cn@@\".\n          For the common name it would be \"@@cn@@\".</para>\n\n          <para>There are also two special wildcards for the expiration date.\n          @@EXPIRE_DATE_DDMMYYYY@@ will print the date as e.g. \"31.12.2016\".\n          @@EXPIRE_DATE_YYYYMMDD@@ will print the date as e.g.\n          \"2016-12-31\".</para>\n        </section>\n\n        <section id=\"job_qmail_move_expired\">\n          <title>Qmail: Delete or move expired accounts</title>\n\n          <para>You can automatically delete or move expired accounts. The job\n          reads the qmail deletion date of user accounts.</para>\n\n          <screenshot>\n            <mediaobject>\n              <imageobject>\n                <imagedata fileref=\"images/jobs_qmailCleanup1.png\"/>\n              </imageobject>\n            </mediaobject>\n          </screenshot>\n\n          <table>\n            <title>Options</title>\n\n            <tgroup cols=\"2\">\n              <tbody>\n                <row>\n                  <entry><emphasis role=\"bold\">Option</emphasis></entry>\n\n                  <entry><emphasis role=\"bold\">Description</emphasis></entry>\n                </row>\n\n                <row>\n                  <entry>Delay</entry>\n\n                  <entry>Number of days to wait after the account is\n                  expired.</entry>\n                </row>\n\n                <row>\n                  <entry>Action</entry>\n\n                  <entry>Delete or move accounts</entry>\n                </row>\n\n                <row>\n                  <entry>Target DN</entry>\n\n                  <entry>Move only: specifies the DN where accounts are\n                  moved</entry>\n                </row>\n              </tbody>\n            </tgroup>\n          </table>\n        </section>\n\n        <section id=\"job_qmail_account_expire_notify\">\n          <title>Qmail: Notify users about account expiration</title>\n\n          <para>This will send your users an email reminder before their Qmail\n          account expires.</para>\n\n          <para>You need to activate the Qmail module for users to be able to\n          add this job. The job can be added multiple times (e.g. to send a\n          second warning at a later time).</para>\n\n          <screenshot>\n            <graphic fileref=\"images/jobs_qmailAccountExpiration.png\"/>\n          </screenshot>\n\n          <para><table>\n              <title>Options</title>\n\n              <tgroup cols=\"2\">\n                <tbody>\n                  <row>\n                    <entry><emphasis role=\"bold\">Option</emphasis></entry>\n\n                    <entry><emphasis\n                    role=\"bold\">Description</emphasis></entry>\n                  </row>\n\n                  <row>\n                    <entry>From address</entry>\n\n                    <entry>The email address to set as FROM.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Reply-to address</entry>\n\n                    <entry>Optional Reply-to address for email.</entry>\n                  </row>\n\n                  <row>\n                    <entry>CC address</entry>\n\n                    <entry>Optional CC mail address.</entry>\n                  </row>\n\n                  <row>\n                    <entry>BCC address</entry>\n\n                    <entry>Optional BCC mail address.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Subject</entry>\n\n                    <entry>The email subject line. Supports wildcards, see\n                    below.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Text</entry>\n\n                    <entry>The email body text. Supports wildcards, see\n                    below.</entry>\n                  </row>\n\n                  <row>\n                    <entry>Notification period</entry>\n\n                    <entry>Number of days to notify before account\n                    expires.</entry>\n                  </row>\n                </tbody>\n              </tgroup>\n            </table>Wildcards:</para>\n\n          <para>You can enter LDAP attributes as wildcards in the form\n          @@ATTRIBUTE_NAME@@. E.g. to add the user's common name use \"@@cn@@\".\n          For the common name it would be \"@@cn@@\".</para>\n\n          <para>There are also two special wildcards for the expiration date.\n          @@EXPIRE_DATE_DDMMYYYY@@ will print the date as e.g. \"31.12.2016\".\n          @@EXPIRE_DATE_YYYYMMDD@@ will print the date as e.g.\n          \"2016-12-31\".</para>\n        </section>\n      </section>\n\n      <section>\n        <title>Job history</title>\n\n        <para>This will show the list of all executed job runs and their\n        result.</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/jobs4.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n      </section>\n    </section>\n\n    <section id=\"confTypicalScenarios\">\n      <title>Typical scenarios</title>\n\n      <para>This is a list of typical scenarios how your LDAP environment may\n      look like and how to structure the server profiles for it.</para>\n\n      <section>\n        <title>Simple: One LDAP directory managed by a small group of\n        admins</title>\n\n        <para>This is the easiest and most common scenario. You want to manage\n        a single LDAP server and there is only one or a few admins. In this\n        case just create one server profile and you are done. The admins may\n        be either specified as a fixed list or by using an LDAP search at\n        login time.</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/LDAPStructuresSimple.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n      </section>\n\n      <section>\n        <title>Advanced: One LDAP server which is managed by different admin\n        groups</title>\n\n        <para>Large organisations may have one big LDAP directory for all\n        user/group accounts. But the users are managed by different groups of\n        admins (e.g. departments, locations, subsidiaries, ...). The users are\n        typically divided into organisational units in the LDAP tree. Admins\n        may only manage the users in their part of the tree.</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/LDAPStructuresAdvanced.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n\n        <para>In this situation it is recommended to create one server profile\n        for each admin group (e.g. department). Setup the LDAP suffixes in the\n        server profiles to point to the needed organisational units. E.g. use\n        ou=people,ou=department1,dc=company,dc=com or\n        ou=department1,ou=people,dc=company,dc=com as LDAP suffix for users.\n        Do the same for groups, hosts, ... This way each admin group will only\n        see its own users. You may want to use LDAP search for the LAM login\n        in this scenario. This will prevent that you need to update a server\n        profile if the number of admins changes.</para>\n\n        <para><emphasis role=\"bold\">Attention:</emphasis> LAM's feature to\n        automatically find free UIDs/GIDs for new users/groups will not work\n        in this case. LAM uses the user/group suffix to search for already\n        assigned UIDs/GIDs. As an alternative you can specify different\n        UID/GID ranges for each department. Then the UIDs/GIDs will stay\n        unique for the whole directory.</para>\n      </section>\n\n      <section>\n        <title>Multiple LDAP servers</title>\n\n        <para>You can manage as many LDAP servers with LAM as you wish. This\n        scenario is similar to the advanced scenario above. Just create one\n        server profile for each LDAP server.</para>\n\n        <screenshot>\n          <mediaobject>\n            <imageobject>\n              <imagedata fileref=\"images/LDAPStructuresMultiServer.png\"/>\n            </imageobject>\n          </mediaobject>\n        </screenshot>\n      </section>\n\n      <section>\n        <title>Single LDAP directory with lots of users (&gt;10 000)</title>\n\n        <para>LAM was tested to work with 10 000 users. If you have a lot more\n        users then you have basically two options.</para>\n\n        <itemizedlist>\n          <listitem>\n            <para>Divide your LDAP tree in organisational units: This is\n            usually the best performing option. Put your accounts in several\n            organisational units and setup LAM as in the advanced scenario\n            above.</para>\n          </listitem>\n\n          <listitem>\n            <para>Increase memory limit: Increase the memory_limit parameter\n            in your php.ini. This will allow LAM to read more entries. But\n            this will slow down the response times of LAM.</para>\n          </listitem>\n        </itemizedlist>\n      </section>\n    </section>\n  </section>\n\n  <section>\n    <title>Self Service (LAM Pro)</title>\n\n    <para>See <link linkend=\"a_selfService\">Self Service\n    chapter</link>.</para>\n  </section>\n\n  <section>\n    <title>Import and export configuration</title>\n\n    <para>Here you can export and import LAM's whole configuration. You can\n    use this to backup the configuration or migrate from one server to\n    another.</para>\n\n    <para>You will need to login with the configuration master password to use\n    this feature.</para>\n\n    <screenshot>\n      <graphic fileref=\"images/confImportExport1.png\"/>\n    </screenshot>\n\n    <para><emphasis role=\"bold\">Export</emphasis></para>\n\n    <para>This will dump the whole configuration to one big single file. It is\n    not possible to dump only parts of the configuration. During import you\n    can select what exactly to import.</para>\n\n    <para><emphasis role=\"bold\">Import</emphasis></para>\n\n    <para>Please select the import file first and submit. LAM will then\n    present you possible import data. You can select what to import using the\n    checkboxes.</para>\n\n    <para>Please note that LAM will not delete e.g. server profiles that are\n    not in the import file.</para>\n\n    <para>Example: You have profile1+profile2 in your LAM installation and\n    profile2+profile3 in your import file. When you select to import all\n    server profiles then profile1 stays untouched, profile2 will be\n    overwritten and profile3 will be added.</para>\n\n    <screenshot>\n      <graphic fileref=\"images/confImportExport2.png\"/>\n    </screenshot>\n  </section>\n</chapter>\n", "<?php\nnamespace LAM\\HELP;\nuse \\LAM\\TYPES\\TypeManager;\n/*\n\n  This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)\n  Copyright (C) 2003 - 2006 Michael Duergner\n                2003 - 2022 Roland Gruber\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n\n  LDAP Account Manager help topics.\n*/\n\n/**\n * LDAP Account Manager help entries.\n *\n * @author Michael Duergner\n * @author Roland Gruber\n * @package Help\n */\n\n// generate help entry for translated list attributes\n$entry206Example = \"\";\nif (isset($_SESSION['conf_config'])) {\n\t$typeManager = new TypeManager($_SESSION['conf_config']);\n\t$types = $typeManager->getConfiguredTypes();\n\tforeach ($types as $type) {\n\t\t$entry206Example .= \"<b>\" . $type->getAlias() . \":</b><br>\\n\";\n\t\t$descriptions = $type->getBaseType()->getListAttributeDescriptions();\n\t\t$attributes = array_keys($descriptions);\n\t\tfor ($a = 0; $a < sizeof($attributes); $a++) {\n\t\t\t$entry206Example .= \"#\" . $attributes[$a] . \": \" . $descriptions[$attributes[$a]];\n\t\t\tif ($a < (sizeof($attributes) - 1)) {\n\t\t\t\t$entry206Example .= \", \";\n\t\t\t}\n\t\t}\n\t\t$entry206Example .= \"<br><br>\";\n\t}\n}\n\n$helpArray = array (\n\t\t\t\t// 200 - 299\n\t\t\t\t// configuration wizard\n\t\t\t\t// configuration login\n\t\t\t\t// config profile management\n\t\t\t\t\"200\" => array (\"Headline\" => _(\"Login\"),\n\t\t\t\t\t\"Text\" => _(\"Please enter the configuration password. This is NOT your LDAP password. It is stored in your .conf-file. If this is the first time you log in, enter \\\"lam\\\".\")),\n\t\t\t\t\"201\" => array (\"Headline\" => _(\"Server address\"),\n\t\t\t\t\t\"Text\" => _(\"This is the server address of your LDAP server. Use ldap:// for unencrypted LDAP connections or TLS encrypted connections. LDAP+SSL (LDAPS) encrypted connections are specified with ldaps://. The port value is optional.\") .\n\t\t\t\t\t\t\" \" . _(\"TLS cannot be combined with ldaps://.\") .\n\t\t\t\t\t\t\"<br><br><b> \" .\n\t\t\t\t\t\t_(\"Examples\") .\n\t\t\t\t\t\t\":</b><br><br> \" .\n\t\t\t\t\t\t_(\"ldap://localhost:389 connects to localhost using a standard LDAP connection on port 389\") .\n\t\t\t\t\t\t\"<br> \" .\n\t\t\t\t\t\t_(\"ldaps://ldap.domain.com connects to ldap.domain.com using an encrypted LDAP connection.\") .\n\t\t\t\t\t\t\"<br><br><br><b> \" .\n\t\t\t\t\t\t_(\"Note\") .\n\t\t\t\t\t\t\":</b><br><br>\" .\n\t\t\t\t\t\t_(\"When using ldaps:// or TLS be sure to use exactly the same IP/domain name as in your certificate!\")),\n\t\t\t\t\"202\" => array (\"Headline\" => _(\"LDAP suffix\"),\n\t\t\t\t\t\"Text\" => _(\"This is the suffix of the LDAP tree from where to search for LDAP entries. Only entries in this subtree will be displayed in the account list. When creating a new account this will be the DN where it is saved.\") .\n\t\t\t\t\t\t\"<br><br><b>\".\n\t\t\t\t\t\t_(\"Example\").\n\t\t\t\t\t\t\":</b><br><br>\".\n\t\t\t\t\t\t_(\"ou=People,dc=yourcompany,dc=com will read and store all accounts in this subtree.\")),\n\t\t\t\t\"203\" => array (\"Headline\" => _(\"Tree suffix\"),\n\t\t\t\t\t\"Text\" => _(\"This is the suffix for the LDAP tree viewer.\") . ' ' . _(\"Multiple values are separated by semicolon.\") .\n\t\t\t\t\t\t\"<br><br><b>\" .\n\t\t\t\t\t\t_(\"Example\") .\n\t\t\t\t\t\t\":</b><br><br>\" .\n\t\t\t\t\t\t_(\"dc=yourcompany,dc=com\") . '<br>' .\n\t\t\t\t\t\t_('dc=yourcompany,dc=com;cn=config')),\n\t\t\t\t\"204\" => array (\"Headline\" => _(\"SSL certificate\"),\n\t\t\t\t\t\"Text\" => _(\"This is only needed for TLS/SSL connections. By default, LAM will use the certificate authorities installed on your system. If you have a private CA in your company you can upload your CA certificates here and override the system certificates.\")),\n\t\t\t\t\"205\" => array (\"Headline\" => _(\"Follow referrals\"),\n\t\t\t\t\t\"Text\" => _(\"Specifies if LAM should automatically follow referrals. Activate if you use referrals in your LDAP directory.\")),\n\t\t\t\t\"206\" => array (\"Headline\" => _(\"List attributes\"),\n\t\t\t\t\t\"Text\" => _(\"This is the list of attributes to show in the account list. The entries can either be predefined values, \\\"#attribute\\\", or individual ones, \\\"attribute:description\\\". Several entries are separated by semicolons.\") .\n\t\t\t\t\t\t\"<br><br><br><big><b>\" .\n\t\t\t\t\t\t_(\"Example\") . \": </b></big>#homeDirectory;#uid;#uidNumber;#gidNumber;mail:Mail address<br><br>\" .\n\t\t\t\t\t\t\"<big><b>\" . _(\"Predefined values\") . \":</b></big><br><br>\" . $entry206Example),\n\t\t\t\t\"207\" => array (\"Headline\" => _(\"Valid users\"),\n\t\t\t\t\t\"Text\" => _(\"This is a list of valid DN entries of all users that are allowed to login to LDAP Account Manager. Please enter one DN per line.\") .\n\t\t\t\t\t\t\"<br><br><b>\" .\n\t\t\t\t\t\t_(\"Example\") .\n\t\t\t\t\t\t\": </b><br>cn=admin,dc=yourdomain,dc=org<br>cn=manager,dc=yourdomain,dc=org\"),\n\t\t\t\t\"208\" => array (\"Headline\" => _(\"Maximum list entries\"),\n\t\t\t\t\t\"Text\" => _(\"This is the number of rows to show in the account list. If more entries are found the list will be split into several pages.\")),\n\t\t\t\t\"209\" => array (\"Headline\" => _(\"Default language\"),\n\t\t\t\t\t\"Text\" => _(\"This defines the language of the login window and sets this language as the default language. Users can change the language at login.\")),\n\t\t\t\t\"210\" => array (\"Headline\" => _(\"Script path\"),\n\t\t\t\t\t\"Text\" => _(\"This is the absolute path to an external script for setting quotas and creating home directories.\")),\n\t\t\t\t\"211\" => array (\"Headline\" => _(\"Enforce language\"),\n\t\t\t\t\t\"Text\" => _(\"If enabled then the default language will be enforced and cannot be chosen by the user.\")),\n\t\t\t\t\"212\" => array (\"Headline\" => _(\"Change password\"),\n\t\t\t\t\t\"Text\" => _(\"If you want to change the current preferences password, please enter it here.\")),\n\t\t\t\t\"213\" => array (\"Headline\" => _('Time zone'),\n\t\t\t\t\t\"Text\" => _('Please select your local time zone.')),\n\t\t\t\t\"214\" => array (\"Headline\" => _(\"Cache timeout\"),\n\t\t\t\t\t\"Text\" => _(\"This is the time in minutes which LAM caches its LDAP searches. Shorter times will stress LDAP more but decrease the possibility that changes are not identified.\")),\n\t\t\t\t\"215\" => array (\"Headline\" => _(\"Access level\"),\n\t\t\t\t\t\"Text\" => _(\"You can specify if LAM allows full write access, password changes or only read access.\")),\n\t\t\t\t\"217\" => array (\"Headline\" => _(\"Account types and modules\"),\n\t\t\t\t\t\"Text\" => _(\"Here you can select which plugins you want to use for account management.\") . \"<br><br>\"\n\t\t\t\t\t\t. _(\"Account types define which sorts of LDAP entries (e.g. users and groups) should be managed. The account modules define which properties (e.g. Unix and Samba) can be edited.\")),\n\t\t\t\t\"218\" => array (\"Headline\" => _(\"Script servers\"),\n\t\t\t\t\t\"Text\" => _(\"This is a list of the servers where the lamdaemon scripts are stored. LDAP Account Manager will make a SSH connection to the servers with the user name and password provided at login. Multiple servers are separated by semicolons. You can append a descriptive name after a colon.\") . \"<br>\"\n\t\t\t\t\t\t. _(\"If your server runs on another port then add a comma and the port number after the server.\") . \"<br><br>\"\n\t\t\t\t\t\t. _(\"Examples\") . \": <br><b>my.server.name<br>127.0.0.1:LOCAL;192.168.0.2,12345:Servername<br>my.server.name:SERVER:/prefix</b>\"),\n\t\t\t\t\"219\" => array (\"Headline\" => _(\"Rights for the home directory\"),\n\t\t\t\t\t\"Text\" => _(\"This defines the rights for the home directories which are created by lamdaemon.\")),\n\t\t\t\t\"220\" => array (\"Headline\" => _(\"Login method\"),\n\t\t\t\t\t\"Text\" => _(\"The number of users who may login to LAM is restricted. This can be either a fixed list of DNs or LAM can search LDAP to find a DN which matches the given user name.\")),\n\t\t\t\t\"221\" => array (\"Headline\" => _(\"LDAP search\"),\n\t\t\t\t\t\"Text\" => _(\"Please enter the LDAP suffix where LAM should start to search for users. The LDAP filter needs to match the given user name to exactly one DN. The value \\\"%USER%\\\" will be replaced by the user name from the login page.\")),\n\t\t\t\t\"222\" => array (\"Headline\" => _(\"LDAP search limit\"),\n\t\t\t\t\t\"Text\" => _(\"Here you can set a limit for LDAP searches. This will restrict the number of results for LDAP searches. Please use this if LAM's LDAP queries produce too much load.\")),\n\t\t\t\t\"223\" => array (\"Headline\" => _(\"HTTP authentication\"),\n\t\t\t\t\t\"Text\" => _(\"If enabled then LAM will use user and password that is provided by the web server via HTTP authentication.\")),\n\t\t\t\t\"224\" => array (\"Headline\" => _(\"Bind user and password\"),\n\t\t\t\t\t\"Text\" => _(\"Here you can specify the DN and password of the bind user that will be used for the LDAP search. This is required if your LDAP server does not allow anonymous access.\")),\n\t\t\t\t\"225\" => array (\"Headline\" => _('Base URL'),\n\t\t\t\t\t\"Text\" => _(\"Please enter the base URL of your webserver (e.g. https://www.example.com). This is used to generate links in emails.\")),\n\t\t\t\t\"230\" => array (\"Headline\" => _(\"Profile management\") . \" - \" . _(\"Add profile\"),\n\t\t\t\t\t\"Text\" => _(\"Please enter the name of the new profile and the password to change its settings. Profile names may contain letters, numbers and -/_.\")),\n\t\t\t\t\"231\" => array (\"Headline\" => _(\"Profile management\") . \" - \" . _(\"Rename profile\"),\n\t\t\t\t\t\"Text\" => _(\"Please enter the new name of the profile. The name may contain letters, numbers and -/_.\")),\n\t\t\t\t\"232\" => array (\"Headline\" => _(\"Profile management\") . \" - \" . _(\"Delete profile\"),\n\t\t\t\t\t\"Text\" => _(\"This will delete the selected profile.\")),\n\t\t\t\t\"233\" => array (\"Headline\" => _(\"Profile management\") . \" - \" . _(\"Set profile password\"),\n\t\t\t\t\t\"Text\" => _(\"This changes the password of the selected profile.\")),\n\t\t\t\t\"234\" => array (\"Headline\" => _(\"Profile management\") . \" - \" . _(\"Change default profile\"),\n\t\t\t\t\t\"Text\" => _(\"This changes the profile which is selected by default at login.\")),\n\t\t\t\t\"235\" => array (\"Headline\" => _(\"Change master password\"),\n\t\t\t\t\t\"Text\" => _(\"If you want to change your master configuration password, please enter it here.\")),\n\t\t\t\t\"236\" => array (\"Headline\" => _(\"Master password\"),\n\t\t\t\t\t\"Text\" => _(\"Please enter the master configuration password. This is NOT your LDAP password. It is stored in your config.cfg file. If this is the first time you log in, enter \\\"lam\\\".\")),\n\t\t\t\t\"237\" => array (\"Headline\" => _(\"Base module\"),\n\t\t\t\t\t\"Text\" => _(\"Every account type needs exactly one base module. This module provides a structural object class.\")),\n\t\t\t\t\"238\" => array (\"Headline\" => _(\"Session timeout\"),\n\t\t\t\t\t\"Text\" => _(\"This is the time (in minutes) of inactivity after which a user is automatically logged off.\")),\n\t\t\t\t\"239\" => array (\"Headline\" => _(\"Log level\"),\n\t\t\t\t\t\"Text\" => _(\"Please select your preferred log level. Messages with a lower level will not be logged.\")),\n\t\t\t\t\"240\" => array (\"Headline\" => _(\"Log destination\"),\n\t\t\t\t\t\"Text\" => _(\"Here you can select where LAM should save its log messages. System logging will go to Syslog on Unix systems and event log on Windows. You can also select an extra file.\")),\n\t\t\t\t\"241\" => array (\"Headline\" => _(\"Allowed hosts\"),\n\t\t\t\t\t\"Text\" => _(\"This is a list of IP addresses from hosts who may access LAM. You can use \\\"*\\\" as wildcard (e.g. 192.168.0.*).\")),\n\t\t\t\t\"242\" => array (\"Headline\" => _(\"Password policy\"),\n\t\t\t\t\t\"Text\" => _(\"Here you can specify minimum requirements for passwords. The character classes are: lowercase, uppercase, numeric and symbols.\")),\n\t\t\t\t\"244\" => array (\"Headline\" => _('PHP error reporting'),\n\t\t\t\t\t\"Text\" => _('Defines if the PHP error reporting setting from php.ini is used or the setting preferred by LAM (\"E_ALL & ~E_NOTICE\"). If you do not develop LAM modules please use the default. This will prevent displaying messages that are useful only for developers.')),\n\t\t\t\t\"246\" => array (\"Headline\" => _('Number of rules that must match'),\n\t\t\t\t\t\"Text\" => _('Specifies the number of above password rules that must be fulfilled.')),\n\t\t\t\t\"247\" => array (\"Headline\" => _('Password must not contain user name'),\n\t\t\t\t\t\"Text\" => _('Specifies if the password must not contain the user name.')),\n\t\t\t\t\"248\" => array (\"Headline\" => _('Password must not contain part of user/first/last name'),\n\t\t\t\t\t\"Text\" => _('Specifies if the password must not contain 3 or more characters of the user/first/last name.')),\n\t\t\t\t\"249\" => array (\"Headline\" => _('External password check'),\n\t\t\t\t\t\"Text\" => _('Please specify the URL (e.g. \"https://api.pwnedpasswords.com/range/{SHA1PREFIX}\") of your external password check.')),\n\t\t\t\t\"250\" => array (\"Headline\" => _(\"Filter\"),\n\t\t\t\t\t\"Text\" => _(\"Here you can input simple filter expressions (e.g. 'value' or 'v*'). The filter is case-insensitive.\")),\n\t\t\t\t\"251\" => array (\"Headline\" => _(\"Remote server\"),\n\t\t\t\t\t\"Text\" => _(\"Please enter the syslog remote server in format \\\"server:port\\\".\")),\n\t\t\t\t\"252\" => array (\"Headline\" => _(\"User DN\"),\n\t\t\t\t\t\"Text\" => _(\"Please enter a part of the user's DN to search for registered devices.\")),\n\t\t\t\t\"253\" => array (\"Headline\" => _(\"Mail server\"),\n\t\t\t\t\t\"Text\" => _(\"Please enter the server name and port of your SMTP server (e.g. localhost:25). If this setting is left empty then LAM will try to use a locally installed mail server.\")),\n\t\t\t\t\"254\" => array (\"Headline\" => _(\"User name\"),\n\t\t\t\t\t\"Text\" => _(\"SMTP user name\")),\n\t\t\t\t\"255\" => array (\"Headline\" => _(\"Password\"),\n\t\t\t\t\t\"Text\" => _(\"SMTP password\")),\n\t\t\t\t\"256\" => array (\"Headline\" => _(\"Encryption protocol\"),\n\t\t\t\t\t\"Text\" => _(\"Please select if the connection should be encrypted via TLS, SSL or not at all.\")),\n\t\t\t\t\"260\" => array (\"Headline\" => _(\"Additional LDAP filter\"),\n\t\t\t\t\t\"Text\" => _('Use this to enter an additional LDAP filter (e.g. \"(cn!=admin)\") to reduce the number of visible elements for this account type.')\n\t\t\t\t\t\t. ' ' . _('You can use the wildcard @@LOGIN_DN@@ which will be substituted with the DN of the user who is currently logged in to LAM.')\n\t\t\t\t\t\t. ' ' . _('By default, LAM will show all accounts that match the selected account modules.')),\n\t\t\t\t\"261\" => array (\"Headline\" => _(\"Hidden\"),\n\t\t\t\t\t\"Text\" => _('Hidden account types will not show up in LAM. This is useful if you want to display e.g. only groups but still need to manage their members.')),\n\t\t\t\t\"262\" => array (\"Headline\" => _(\"No new entries\"),\n\t\t\t\t\t\"Text\" => _('If checked then the user will not be able to create new entries of this account type.')),\n\t\t\t\t\"263\" => array (\"Headline\" => _(\"Disallow delete\"),\n\t\t\t\t\t\"Text\" => _('If checked then the user will not be able to delete entries of this account type.')),\n\t\t\t\t\"264\" => array (\"Headline\" => _('Custom label'),\n\t\t\t\t\t\"Text\" => _('Here you can overwrite the display name for this account type.')),\n\t\t\t\t\"265\" => array (\"Headline\" => _('Read-only'),\n\t\t\t\t\t\"Text\" => _('Sets this account type to read-only.')),\n\t\t\t\t\"266\" => array (\"Headline\" => _(\"Paged results\"),\n\t\t\t\t\t\"Text\" => _(\"This is a workaround for Active Directory. Enable it if you get messages about size limit exceeded.\")),\n\t\t\t\t\"267\" => array (\"Headline\" => _('Template'),\n\t\t\t\t\t\"Text\" => _('Please select the template for the new server profile. You can either select an existing server profile or use one of the built-in templates.')),\n\t\t\t\t\"268\" => array (\"Headline\" => _('Display name'),\n\t\t\t\t\t\"Text\" => _('This name is shown on the login page as server name. Defaults to server address if empty.')),\n\t\t\t\t\"269\" => array (\"Headline\" => _('Referential integrity overlay'),\n\t\t\t\t\t\"Text\" => _('Activate this checkbox if you have any server side extension for referential integrity in place. LAM will then skip cleanup tasks like deletion of group memberships on account deletion.')),\n\t\t\t\t\"270\" => array (\"Headline\" => _('Bind user and password'),\n\t\t\t\t\t\"Text\" => _('Please enter the DN and password to use for all jobs.')),\n\t\t\t\t\"271\" => array (\"Headline\" => _('Database type'),\n\t\t\t\t\t\"Text\" => _('Please select the type of database to use for job data.')),\n\t\t\t\t\"272\" => array (\"Headline\" => _('Cron configuration'),\n\t\t\t\t\t\"Text\" => _('Please add this line to your webserver\\'s crontab.')),\n\t\t\t\t\"273\" => array (\"Headline\" => _('Database host'),\n\t\t\t\t\t\"Text\" => _('Enter the host name of your database server.')),\n\t\t\t\t\"274\" => array (\"Headline\" => _('Database port'),\n\t\t\t\t\t\"Text\" => _('Enter the port number of your database server. The default port will be used if empty.')),\n\t\t\t\t\"275\" => array (\"Headline\" => _('Database user and password'),\n\t\t\t\t\t\"Text\" => _('Please enter the user name and password to connect to the database.')),\n\t\t\t\t\"276\" => array (\"Headline\" => _('Database name'),\n\t\t\t\t\t\"Text\" => _('This is the database name on the server.')),\n\t\t\t\t'280' => array (\"Headline\" => _('Allow setting specific passwords'),\n\t\t\t\t\t\"Text\" => _('Allows to set a specific password via input field.')),\n\t\t\t\t'281' => array (\"Headline\" => _('Allow to display password on screen'),\n\t\t\t\t\t\"Text\" => _('Allows to display a randomly generated password on screen.')),\n\t\t\t\t'282' => array (\"Headline\" => _('Default password output'),\n\t\t\t\t\t\"Text\" => _('Default method to output a random password.')),\n\t\t\t\t'283' => array (\"Headline\" => _('Force password change by default'),\n\t\t\t\t\t\"Text\" => _('Enforce password change on next login by default.')),\n\t\t\t\t'284' => array (\"Headline\" => _('User name'),\n\t\t\t\t\t\"Text\" => _('User name for SSH connection to lamdaemon server. If empty the user name of the person who is logged into LAM will be used.')),\n\t\t\t\t'285' => array (\"Headline\" => _('SSH key file'),\n\t\t\t\t\t\"Text\" => _('Path to SSH key file to connect to lamdaemon server.') . ' ' . _('If empty then password authentication with the person\\'s password who is logged into LAM will be used.')),\n\t\t\t\t'285a' => array (\"Headline\" => _('SSH key file'),\n\t\t\t\t\t\"Text\" => _('Path to SSH key file to connect to lamdaemon server.')),\n\t\t\t\t'286' => array (\"Headline\" => _('SSH key password'),\n\t\t\t\t\t\"Text\" => _('Password to unlock SSH key file.')),\n\t\t\t\t'287' => array (\"Headline\" => _('Licence'),\n\t\t\t\t\t\"Text\" => _('Please enter your licence key.')),\n\t\t\t\t'288' => array (\"Headline\" => _('Expiration warning'),\n\t\t\t\t\t\"Text\" => _('Please select how to be warned before your licence expires.')),\n\t\t\t\t'289' => array (\"Headline\" => _('From address'),\n\t\t\t\t\t\"Text\" => _('This email address will be set as sender address of the mails.')),\n\t\t\t\t'290' => array (\"Headline\" => _('TO address'),\n\t\t\t\t\t\"Text\" => _('This email address will be set as TO address for the mails.') . ' '\n\t\t\t\t\t\t. _(\"Multiple values are separated by semicolon.\")),\n\t\t\t\t\"291\" => array (\"Headline\" => _('Hide password prompt for expired password'),\n\t\t\t\t\t\"Text\" => _('Hides the password prompt when a user with expired password logs into LAM.')),\n\t\t\t\t\"292\" => array (\"Headline\" => _('DN part to hide'),\n\t\t\t\t\t\"Text\" => _('Hides the given part of the DN when displaying a DN. E.g. if you set this to \"dc=example,dc=com\" then \"ou=department,dc=example,dc=com\" will be displayed as \"ou=department\". Use this if you have very long DNs.')),\n\t\t\t\t\"293\" => array (\"Headline\" => _('Database type'),\n\t\t\t\t\t\"Text\" => _('Please select the type of database to use for all configuration data. Please install PHP MySQL PDO extension for MySQL support.')),\n\t\t\t\t// 300 - 399\n\t\t\t\t// profile/PDF editor, file upload\n\t\t\t\t\"301\" => array (\"Headline\" => _(\"RDN identifier\"),\n\t\t\t\t\t\"Text\" => _(\"This is the identifier for the relative DN value. It must be one of the given allowed LDAP attributes (e.g. user accounts usually use \\\"uid\\\" while groups use \\\"cn\\\").\")),\n\t\t\t\t\"302\" => array (\"Headline\" => _(\"Overwrite\"),\n\t\t\t\t\t\"Text\" => _(\"Set to true to overwrite an existing LDAP entry.\")),\n\t\t\t\t\"360\" => array (\"Headline\" => _(\"Profile name\"),\n\t\t\t\t\t\"Text\" => _(\"Name under which the profile will be saved. If a profile with the same name exists, it will be overwritten.\")),\n\t\t\t\t\"361\" => array (\"Headline\" => _(\"DN suffix\"),\n\t\t\t\t\t\"Text\" => _(\"The account will be saved under this LDAP suffix.\")),\n\t\t\t\t\"362\" => array (\"Headline\" => _(\"Import profiles\"),\n\t\t\t\t\t\"Text\" => _(\"Here you can import account profiles from other server profiles (overwrite existing).\")),\n\t\t\t\t\"363\" => array (\"Headline\" => _(\"Export profile\"),\n\t\t\t\t\t\"Text\" => _(\"Here you can export account profiles to other server profiles (overwrite existing). You may also export a profile to the global templates. In this case it will always be copied to all server profiles that do not yet have a profile with this name.\")),\n\t\t\t\t\"364\" => array (\"Headline\" => _(\"Global templates\"),\n\t\t\t\t\t\"Text\" => _(\"Global templates will always be copied to all server profiles that do not yet have a profile with this name.\")),\n\t\t\t\t\"365\" => array (\"Headline\" => _(\"Global template logos\"),\n\t\t\t\t\t\"Text\" => _(\"Global template logos will always be copied to all server profiles that do not yet have a logo with this name.\")),\n\t\t\t\t// 400 - 499\n\t\t\t\t// account pages\n\t\t\t\t\"400\" => array (\"Headline\" => _(\"DN suffix\") . '/' . _(\"RDN identifier\"),\n\t\t\t\t\t\"Text\" => _(\"The account will be saved under this LDAP suffix.\") . '<br><br>' . _(\"This is the identifier for the relative DN value. It must be one of the given allowed LDAP attributes (e.g. user accounts usually use \\\"uid\\\" while groups use \\\"cn\\\").\")),\n\t\t\t\t\"401\" => array (\"Headline\" => _(\"Load profile\"),\n\t\t\t\t\t\"Text\" => _(\"Here you can load an account profile to set default settings for your account. The \\\"default\\\" profile is automatically loaded for new accounts.\")),\n\t\t\t\t\"403\" => array (\"Headline\" => _(\"Create PDF file\"),\n\t\t\t\t\t\"Text\" => _(\"Here you can select a PDF structure and export the account to a PDF file.\")),\n\t\t\t\t\"404\" => array (\"Headline\" => _(\"Password\"),\n\t\t\t\t\t\"Text\" => _(\"Please enter the password which you want to set for this account. You may also generate a random password (12 characters) which will be displayed on your screen.\")),\n\t\t\t\t\"405\" => array (\"Headline\" => _(\"PDF structure\"),\n\t\t\t\t\t\"Text\" => _(\"The PDF structure defines what information is exported as PDF file and how the pages are structured. You can manage the PDF structures in the PDF editor (under \\\"Tools\\\").\")),\n\t\t\t\t\"406\" => array (\"Headline\" => _(\"Force password change\"),\n\t\t\t\t\t\"Text\" => _(\"If you set this option then the user has to change his password at the next login.\")),\n\t\t\t\t\"407\" => array (\"Headline\" => _(\"Send via mail\"),\n\t\t\t\t\t\"Text\" => _(\"Sends the password to the user via mail. Please edit your LAM server profile to setup the mail settings.\")),\n\t\t\t\t\"408\" => array (\"Headline\" => _(\"Import PDF structures\"),\n\t\t\t\t\t\"Text\" => _(\"Here you can import PDF structures from other server profiles (overwrite existing).\")),\n\t\t\t\t\"409\" => array (\"Headline\" => _(\"Export PDF structure\"),\n\t\t\t\t\t\"Text\" => _(\"Here you can export PDF structures to other server profiles (overwrite existing). You may also export a structure to the global templates. In this case it will always be copied to all server profiles that do not yet have a structure with this name.\")),\n\t\t\t\t\"410\" => array (\"Headline\" => _(\"Alternate recipient\"),\n\t\t\t\t\t\"Text\" => _(\"Here you can enter an alternative mail address for the password. To use the user's primary email address please leave the field blank.\")),\n\t\t\t\t\"411\" => array (\"Headline\" => _(\"Font\"),\n\t\t\t\t\t\"Text\" => _(\"Please select the font for the PDF file. Dejavu will work on all systems but does not support e.g. Chinese and Japanese. The other fonts require that an appropriate font is installed on the system where the PDF is opened.\")),\n\t\t\t\t// 500 - 599\n\t\t\t\t// LAM Pro\n\t\t\t\t\"501\" => array (\"Headline\" => _(\"LDAP suffix\"),\n\t\t\t\t\t\"Text\" => _(\"LAM will search for accounts in this part of the LDAP tree.\")),\n\t\t\t\t\"502\" => array (\"Headline\" => _(\"LDAP user and password\"),\n\t\t\t\t\t\"Text\" => _(\"LAM will use this LDAP DN and password to search for accounts. It is sufficient to specify an account with read rights. If nothing is inserted then LAM will try to connect anonymously.\")),\n\t\t\t\t\"503\" => array (\"Headline\" => _(\"LDAP search attribute\"),\n\t\t\t\t\t\"Text\" => _(\"This is needed to find the LDAP DNs of your user accounts. E.g. if you use \\\"uid\\\" and your user inputs \\\"miller\\\" then LAM will search for an account with uid=miller.\")),\n\t\t\t\t\"504\" => array (\"Headline\" => _(\"Login attribute label\"),\n\t\t\t\t\t\"Text\" => _(\"This text should shortly describe your selected LDAP search attribute (e.g. email or user name).\")),\n\t\t\t\t\"505\" => array (\"Headline\" => _(\"Login caption\"),\n\t\t\t\t\t\"Text\" => _(\"This text is displayed on top of the self service login page. You can also input HTML code here.\")),\n\t\t\t\t\"506\" => array (\"Headline\" => _(\"Main page caption\"),\n\t\t\t\t\t\"Text\" => _(\"This text is displayed on top of the self service main page. You can also input HTML code here.\")),\n\t\t\t\t\"507\" => array (\"Headline\" => _(\"Add new group\"),\n\t\t\t\t\t\"Text\" => _(\"Adds a new group element to the list of self service options. Use this to structure the input fields.\")),\n\t\t\t\t\"508\" => array (\"Headline\" => _(\"Add input field\"),\n\t\t\t\t\t\"Text\" => _(\"Adds a new self service option to the selected group element.\")),\n\t\t\t\t\"509\" => array (\"Headline\" => _(\"Page header\"),\n\t\t\t\t\t\"Text\" => _(\"This HTML code will be placed on top of all self service pages. E.g. you can use this to place your custom logo. Any HTML code is permitted.\")),\n\t\t\t\t\"510\" => array (\"Headline\" => _(\"Additional CSS links\"),\n\t\t\t\t\t\"Text\" => _(\"Here you can specify additional CSS links to change the layout of the self service pages. This is useful to adapt them to your corporate design. Please enter one link per line.\")),\n\t\t\t\t\"511\" => array (\"Headline\" => _(\"Password field label\"),\n\t\t\t\t\t\"Text\" => _('This text is placed as label for the password field on the login page. LAM will use \"Password\" if you do not enter any text.')),\n\t\t\t\t\"512\" => array (\"Headline\" => _(\"Additional LDAP filter\"),\n\t\t\t\t\t\"Text\" => _('Use this to enter an additional LDAP filter (e.g. \"(objectClass=passwordSelfReset)\") to reduce the number of accounts who may use self service.')),\n\t\t\t\t\"513\" => array (\"Headline\" => _('Use for all operations'),\n\t\t\t\t\t\"Text\" => _('By default, all modifications are done as the user that authenticated in self service. If active then LAM will use the connection user for all LDAP modifications and searches.')),\n\t\t\t\t\"514\" => array (\"Headline\" => _('2-factor authentication'),\n\t\t\t\t\t\"Text\" => _('You can enable 2-factor authentication here (e.g. via mobile device).')),\n\t\t\t\t\"515\" => array (\"Headline\" => _('Base URL'),\n\t\t\t\t\t\"Text\" => _('URL of external 2-factor authentication service.')),\n\t\t\t\t\"515a\" => array (\"Headline\" => _('Base URLs'),\n\t\t\t\t\t\"Text\" => _('URLs of external 2-factor authentication service. Enter one per line.')),\n\t\t\t\t\"516\" => array (\"Headline\" => _('Disable certificate check'),\n\t\t\t\t\t\"Text\" => _('This will disable the check of the SSL certificates for the 2-factor authentication service. Not recommended for production usage.')),\n\t\t\t\t\"517\" => array (\"Headline\" => _('Label'),\n\t\t\t\t\t\"Text\" => _('Use this to overwrite the default label for the 2-factor input field. Default is \"PIN+Token\".')),\n\t\t\t\t\"518\" => array (\"Headline\" => _('Caption'),\n\t\t\t\t\t\"Text\" => _('This text is displayed on top of the 2-factor page. You can also input HTML code here.')),\n\t\t\t\t\"519\" => array (\"Headline\" => _('Optional'),\n\t\t\t\t\t\"Text\" => _('If checked then also users who did not setup a second factor are able to login.')),\n\t\t\t\t\"520\" => array (\"Headline\" => _(\"Generate random password\"),\n\t\t\t\t\t\"Text\" => _(\"This will set a random password and display it on the screen or send it to the user via mail. Please edit your LAM server profile to setup the mail settings.\")),\n\t\t\t\t\"521\" => array (\"Headline\" => _('Captcha'),\n\t\t\t\t\t\"Text\" => _('Please enter the site and secret/API key you got from your captcha provider.')),\n\t\t\t\t\"522\" => array (\"Headline\" => _('Secure login'),\n\t\t\t\t\t\"Text\" => _('Protect the self service login with a captcha.')),\n\t\t\t\t\"523\" => array (\"Headline\" => _('Base color'),\n\t\t\t\t\t\"Text\" => _('Background color for self service pages.')),\n\t\t\t\t\"524\" => array (\"Headline\" => _('Client id'),\n\t\t\t\t\t\"Text\" => _('Please enter your client id for the verification API.')),\n\t\t\t\t\"525\" => array (\"Headline\" => _('Secret key'),\n\t\t\t\t\t\"Text\" => _('Please enter your secret key for the verification API.')),\n\t\t\t\t\"526\" => array (\"Headline\" => _('Login footer'),\n\t\t\t\t\t\"Text\" => _('This text is displayed as footer on the self service login page.')),\n\t\t\t\t\"527\" => array (\"Headline\" => _('Main page footer'),\n\t\t\t\t\t\"Text\" => _('This text is displayed as footer on the self service main page.')),\n\t\t\t\t\"528\" => array (\"Headline\" => _('User name attribute'),\n\t\t\t\t\t\"Text\" => _('The attribute (e.g. \"uid\") that contains the user name for the 2-factor service.')),\n\t\t\t\t\"529\" => array (\"Headline\" => _('Domain'),\n\t\t\t\t\t\"Text\" => _('Please enter the WebAuthn domain. This is the public domain of the webserver (e.g. \"example.com\"). Do not include protocol or port.')),\n\t\t\t\t\"550\" => array (\"Headline\" => _(\"From address\"),\n\t\t\t\t\t\"Text\" => _(\"This email address will be set as sender address of all password mails. If empty the system default (php.ini) will be used.\")),\n\t\t\t\t\"551\" => array (\"Headline\" => _(\"Subject\"),\n\t\t\t\t\t\"Text\" => _('The subject of all password mails.')),\n\t\t\t\t\"552\" => array (\"Headline\" => _(\"Text\"),\n\t\t\t\t\t\"Text\" => _('The mail text of all password mails.') .\n\t\t\t\t\t\t'<br><br><b>' . _('Format') . ': </b><ul>' .\n\t\t\t\t\t\t'<li>' . _('You can use wildcards for LDAP attributes in the form @@attribute@@ (e.g. @@uid@@ for the user name).') . '</li>' .\n\t\t\t\t\t\t'<li>' . _('The wildcard for the new password is @@newPassword@@.') . '</li>'),\n\t\t\t\t\"553\" => array (\"Headline\" => _(\"HTML format\"),\n\t\t\t\t\t\"Text\" => _('Specifies if the mail should be sent as text or HTML.')),\n\t\t\t\t\"554\" => array (\"Headline\" => _(\"Reply-to address\"),\n\t\t\t\t\t\"Text\" => _(\"This email address will be set as reply-to address of all password mails.\")),\n\t\t\t\t\"555\" => array (\"Headline\" => _(\"Allow alternate address\"),\n\t\t\t\t\t\"Text\" => _('Specifies if password mails may be sent to mail addresses other than the user\\'s LDAP mail address.')),\n\t\t\t\t'556' => array(\n\t\t\t\t\t\"Headline\" => _('To address'),\n\t\t\t\t\t\"Text\" => _('This email address will be set as To address of all mails.')\n\t\t\t\t),\n\t\t\t\t'557' => array(\n\t\t\t\t\t\"Headline\" => _('To address'),\n\t\t\t\t\t\"Text\" => _('This email address will be set as To address of all mails.') . ' '\n\t\t\t\t\t\t. _('Multiple values are separated by comma.')\n\t\t\t\t),\n\t\t\t\t// 600 - 699\n\t\t\t\t// OU-editor, domain page\n\t\t\t\t\"601\" => array (\"Headline\" => _(\"OU-Editor\") . \" - \" . _(\"New organisational unit\"),\n\t\t\t\t\t\"Text\" => _(\"This will create a new organisational unit under the selected one.\")),\n\t\t\t\t\"602\" => array (\"Headline\" => _(\"OU-Editor\") . \" - \" . _(\"Delete organisational unit\"),\n\t\t\t\t\t\"Text\" => _(\"This will delete the selected organisational unit. The OU has to be empty.\")),\n\t\t\t\t// 700 - 749\n\t\t\t\t// multi edit tool\n\t\t\t\t\"700\" => array (\"Headline\" => _('LDAP suffix'),\n\t\t\t\t\t\"Text\" => _('Please select the suffix where changes should be done.')),\n\t\t\t\t\"701\" => array (\"Headline\" => _('LDAP filter'),\n\t\t\t\t\t\"Text\" => _('Use this to enter an additional LDAP filter (e.g. \"(cn!=admin)\") to reduce the number of entries to modify.')),\n\t\t\t\t\"702\" => array (\"Headline\" => _('Operations'),\n\t\t\t\t\t\"Text\" => _('Please specify which attributes should be changed. The modify operation will also add an value if the attribute does not yet exist. To delete all values of an attribute please leave the value field empty.')),\n\t\t\t\t// 750 - 799\n\t\t\t\t// import/export\n\t\t\t\t\"750\" => array (\"Headline\" => _('LDIF data'),\n\t\t\t\t\t\"Text\" => _('The input data must be formatted in LDIF format.')),\n\t\t\t\t\"751\" => array (\"Headline\" => _('Base DN'),\n\t\t\t\t\t\"Text\" => _('The export will read entries of this DN.')),\n\t\t\t\t\"752\" => array (\"Headline\" => _('Search filter'),\n\t\t\t\t\t\"Text\" => _('Please enter an LDAP filter to specify the exported entries.')),\n\t\t\t\t\"753\" => array (\"Headline\" => _('Attributes'),\n\t\t\t\t\t\"Text\" => _('Please enter a comma separated list of attributes to export. Using \"*\" will export all attributes.')),\n\t\t\t\t\"754\" => array (\"Headline\" => _('Include system attributes'),\n\t\t\t\t\t\"Text\" => _('Activate this option to export internal attributes that are not visible by default.')),\n\t\t\t\t// 800 - 899\n\t\t\t\t// jobs\n\t\t\t\t'800' => array(\n\t\t\t\t\t\"Headline\" => _('From address'),\n\t\t\t\t\t\"Text\" => _('This email address will be set as sender address of the mails.')\n\t\t\t\t),\n\t\t\t\t'801' => array(\n\t\t\t\t\t\"Headline\" => _('Reply-to address'),\n\t\t\t\t\t\"Text\" => _('This email address will be set as reply-to address of all mails.')\n\t\t\t\t),\n\t\t\t\t'802' => array(\n\t\t\t\t\t\"Headline\" => _('Subject'),\n\t\t\t\t\t\"Text\" => _('The subject of all mails.')\n\t\t\t\t),\n\t\t\t\t'803' => array(\n\t\t\t\t\t\"Headline\" => _('Text'),\n\t\t\t\t\t\"Text\" => _('The mail text of all mails.') .\n\t\t\t\t\t\t\t_('You can use wildcards for LDAP attributes in the form @@attribute@@ (e.g. @@uid@@ for the user name).')\n\t\t\t\t\t\t\t. ' ' . _('The expiration date can be added with @@EXPIRE_DATE_DDMMYYYY@@ or @@EXPIRE_DATE_YYYYMMDD@@.')\n\t\t\t\t),\n\t\t\t\t'804' => array(\n\t\t\t\t\t\"Headline\" => _('Notification period'),\n\t\t\t\t\t\"Text\" => _('Please enter the number of days before password expiration to send out the email.')\n\t\t\t\t),\n\t\t\t\t'805' => array(\n\t\t\t\t\t\"Headline\" => _('CC address'),\n\t\t\t\t\t\"Text\" => _('This email address will be set as CC address of all mails.')\n\t\t\t\t),\n\t\t\t\t'806' => array(\n\t\t\t\t\t\"Headline\" => _('BCC address'),\n\t\t\t\t\t\"Text\" => _('This email address will be set as BCC address of all mails.')\n\t\t\t\t),\n\t\t\t\t'807' => array(\n\t\t\t\t\t\"Headline\" => _('Delay'),\n\t\t\t\t\t\"Text\" => _('Delay this action by a number of days after account expiry.')\n\t\t\t\t),\n\t\t\t\t'808' => array(\n\t\t\t\t\t\"Headline\" => _('Action'),\n\t\t\t\t\t\"Text\" => _('You can delete or move expired accounts.')\n\t\t\t\t),\n\t\t\t\t'809' => array(\n\t\t\t\t\t\"Headline\" => _('Target DN'),\n\t\t\t\t\t\"Text\" => _('The expired accounts will be moved to this DN.')\n\t\t\t\t),\n\t\t\t\t'810' => array(\n\t\t\t\t\t\"Headline\" => _('Text'),\n\t\t\t\t\t\"Text\" => _('The mail text of all mails.') .\n\t\t\t\t\t\t_('You can use wildcards for LDAP attributes in the form @@attribute@@ (e.g. @@uid@@ for the user name).')\n\t\t\t\t\t\t. ' ' . _('The managed groups need to be added with @@LAM_MANAGED_GROUPS@@.')\n\t\t\t\t),\n\t\t\t\t'811' => array(\n\t\t\t\t\t\"Headline\" => _('Period'),\n\t\t\t\t\t\"Text\" => _('This defines how often the email is sent (e.g. each month).')\n\t\t\t\t),\n);\n\n/* This is a sample help entry. Just copy this line an modify the values between the [] brackets.\n\n\t\"[HelpNumber]\" => array (\"Headline\" => _(\"[Headline]\"), \"Text\" => _(\"[Text]\"), \"SeeAlso\" => array('link' => \"[SeeAlso link]\", 'text' => '[link text]')),\n\t\"999\" => array (\"Headline\" => _(\"This is a sample entry\"), \"Text\" => _(\"Sample text\"), \"SeeAlso\" => array('link' => \"http://www.ldap-account-manager.org/\", 'text' => 'Project page')),\n\n\n\n\tSyntax:\n\t=======\n\n\t\tHelpNumber: numeric value\n\t\tHeadline: topic of help entry\n\t\tText: help text (ext = FALSE)\n\t\tSeeAlso: URL to additional information (ext = FALSE, optional)\n\t\tLink: relative URL to external help page (ext = TRUE)\n*/\n", "<?php\n/*\n\n  This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)\n  Copyright (C) 2003 - 2006  Tilo Lutz\n                2009 - 2022  Roland Gruber\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n*/\n\n/**\n* This provides several helper function for the account modules.\n*\n* @author Tilo Lutz\n* @author Roland Gruber\n*\n* @package lib\n*/\n\nuse LAM\\PLUGINS\\EXTRA_INVALID_CREDENTIALS\\ExtraInvalidCredentials;\n\n\n/**\n* This function will return all values from $array without values of $values.\n*\n* @param array $values list of values which should be removed\n* @param array $array list of original values\n* @return array list of remaining values\n*/\nfunction array_delete($values, $array) {\n\t// Loop for every entry and check if it should be removed\n\tif (is_array($array)) {\n\t\t$return = array();\n\t\tforeach ($array as $array_value) {\n\t\t\tif (!@in_array($array_value, $values)) {\n\t\t\t\t$return[] = $array_value;\n\t\t\t}\n\t\t}\n\t\treturn $return;\n\t}\n\treturn array();\n}\n\n\n/**\n * Checks if a string exists in an array, ignoring case.\n *\n * @param String $needle search string\n * @param array $haystack array\n */\nfunction in_array_ignore_case($needle, $haystack) {\n    if (!is_array($haystack)) {\n        return false;\n    }\n    if (!is_string($needle)) {\n        return false;\n    }\n    foreach ($haystack as $element) {\n        if( is_string( $element ) && 0 == strcasecmp( $needle, $element ) ) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n* This function will return the days from 1.1.1970 until now.\n*\n* @return number of days\n*/\nfunction getdays() {\n\t$days = time() / 86400;\n\tsettype($days, 'integer');\n\treturn $days;\n}\n\n/**\n* Takes a list of Samba flags and creates the corresponding flag string.\n*\n* @param array $input is an array of Samba flags (e.g. X or D)\n* @return string Samba flag string\n*/\nfunction smbflag($input) {\n\t// Start character\n\t$flag = \"[\";\n\t// Add Options\n\tif ($input['W']) {\n\t\t$flag .= \"W\";\n\t}\n\telse {\n\t\t$flag .= \"U\";\n\t}\n\tif ($input['D']) {\n\t\t$flag .= \"D\";\n\t}\n\tif ($input['X']) {\n\t\t$flag .= \"X\";\n\t}\n\tif ($input['N']) {\n\t\t$flag .= \"N\";\n\t}\n\tif ($input['S']) {\n\t\t$flag .= \"S\";\n\t}\n\tif ($input['H']) {\n\t\t$flag .= \"H\";\n\t}\n\t// Expand string to fixed length\n\t$flag = str_pad($flag, 12);\n\t// End character\n\treturn $flag . \"]\";\n}\n\n/**\n* Generates the LM hash of a password.\n*\n* @param string password original password\n* @return string password hash\n*/\nfunction lmPassword($password) {\n\t// Needed to calculate Samba passwords\n\tinclude_once(__DIR__ . \"/createntlm.inc\");\n\t// get hash\n\t$hash = new smbHash();\n\treturn $hash->lmhash($password);\n}\n\n/**\n* Generates the NT hash of a password.\n*\n* @param string password original password\n* @return string password hash\n*/\nfunction ntPassword($password) {\n\t// Needed to calculate Samba passwords\n\tinclude_once(__DIR__ . \"/createntlm.inc\");\n\t// get hash\n\t$hash = new smbHash();\n\treturn $hash->nthash($password);\n}\n\n\n/**\n* Returns the hash value of a plain text password.\n* @see getSupportedHashTypes()\n*\n* @param string $password the password string\n* @param boolean $enabled marks the hash as enabled/disabled (e.g. by prefixing \"!\")\n* @param string $hashType password hash type (CRYPT, CRYPT-SHA512, SHA, SSHA, MD5, SMD5, PLAIN, K5KEY)\n* @return string the password hash\n*/\nfunction pwd_hash($password, $enabled = true, $hashType = 'SSHA') {\n\t// check for empty password\n\tif (! $password || ($password == \"\")) {\n\t\treturn \"\";\n\t}\n\tswitch ($hashType) {\n\t\tcase 'CRYPT':\n\t\t\t$hash = \"{CRYPT}\" . crypt($password, generateSalt(2));\n\t\t\tbreak;\n\t\tcase 'CRYPT-SHA512':\n\t\t\t$hash = \"{CRYPT}\" . crypt($password, '$6$' . generateSalt(16));\n\t\t\tbreak;\n\t\tcase 'PBKDF2-SHA512':\n\t\t\t$iterations = 200000;\n\t\t\t$salt = openssl_random_pseudo_bytes(16);\n\t\t\t$hashBinary = openssl_pbkdf2($password, $salt, 64, $iterations, 'sha512');\n\t\t\t$hash = \"{PBKDF2-SHA512}${iterations}\" . '$' . base64_encode($salt) . '$' . base64_encode($hashBinary);\n\t\t\tbreak;\n\t\tcase 'MD5':\n\t\t\t$hash = \"{MD5}\" . base64_encode(hex2bin(md5($password)));\n\t\t\tbreak;\n\t\tcase 'SMD5':\n\t\t\t$salt = generateSalt(4);\n\t\t\t$hash = \"{SMD5}\" . base64_encode(hex2bin(md5($password . $salt)) . $salt);\n\t\t\tbreak;\n\t\tcase 'SHA':\n\t\t\t$hash = \"{SHA}\" . base64_encode(hex2bin(sha1($password)));\n\t\t\tbreak;\n\t\tcase 'PLAIN':\n\t\t\t$hash = $password;\n\t\t\tbreak;\n\t\tcase 'K5KEY':\n\t\t\t$hash = '{K5KEY}';\n\t\t\tbreak;\n\t\tcase 'ARGON2ID':\n\t\t\t$threads = max(4, PASSWORD_ARGON2_DEFAULT_THREADS);\n\t\t\t$hash = \"{ARGON2}\" . password_hash($password, PASSWORD_ARGON2ID, array('threads' => $threads));\n\t\t\tbreak;\n\t\tcase 'SSHA':\n\t\tdefault: // use SSHA if the setting is invalid\n\t\t\t$salt = generateSalt(4);\n\t\t\t$hash = \"{SSHA}\" . base64_encode(hex2bin(sha1($password . $salt)) . $salt);\n\t\t\tbreak;\n\t}\n\t// enable/disable password\n\tif (!$enabled) {\n\t\treturn pwd_disable($hash);\n\t}\n\treturn $hash;\n}\n\n/**\n * Returns the hash type of the given password hash.\n * This will return PLAIN if no supported hash type was found.\n *\n * @param string|null $hash password hash\n * @return string type (e.g. SSHA)\n */\nfunction getHashType(?string $hash): string {\n\tif (empty($hash)) {\n\t\treturn 'PLAIN';\n\t}\n\t$matches = array();\n\tif (!preg_match('/\\\\{([A-Z0-9-]+)\\\\}.+/', $hash, $matches)) {\n\t\treturn 'PLAIN';\n\t}\n\t$type = $matches[1];\n\tif ($type === 'ARGON2') {\n\t\treturn 'ARGON2ID';\n\t}\n\tif (in_array($type, getSupportedHashTypes())) {\n\t\treturn $type;\n\t}\n\treturn 'PLAIN';\n}\n\n/**\n * Returns the list of supported hash types (e.g. SSHA).\n *\n * @return array hash types\n */\nfunction getSupportedHashTypes() {\n\treturn array('CRYPT', 'CRYPT-SHA512', 'SHA', 'SSHA', 'MD5', 'SMD5', 'PLAIN', 'SASL', 'K5KEY', 'LDAP_EXOP', 'ARGON2ID', 'PBKDF2-SHA512');\n}\n\n/**\n* Calculates a password salt of the given length.\n*\n* @param int $len salt length\n* @return String the salt string\n*\n*/\nfunction generateSalt($len) {\n\t$chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890./';\n\t$salt = '';\n\tfor ($i = 0; $i < $len; $i++) {\n\t\t$pos = abs(getRandomNumber() % strlen($chars));\n\t\t$salt .= $chars[$pos];\n\t}\n\treturn $salt;\n}\n\n/**\n* Marks an password hash as enabled and returns the new hash string\n*\n* @param string $hash hash value to enable\n* @return string enabled password hash\n*/\nfunction pwd_enable($hash) {\n\t// check if password is disabled (old wrong LAM method)\n\tif ((substr($hash, 0, 2) == \"!{\") || (substr($hash, 0, 2) == \"*{\")) {\n\t\treturn substr($hash, 1, strlen($hash));\n\t}\n\t// check for \"!\" or \"*\" at beginning of password hash\n\telse {\n\t\tif (substr($hash, 0, 1) == \"{\") {\n\t\t\t$pos = strpos($hash, \"}\");\n\t\t\tif ((substr($hash, $pos + 1, 1) == \"!\") || (substr($hash, $pos + 1, 1) == \"*\")) {\n\t\t\t\t// enable hash\n\t\t\t\treturn substr($hash, 0, $pos + 1) . substr($hash, $pos + 2, strlen($hash));\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn $hash;  // not disabled\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn $hash;  // password is plain text\n\t\t}\n\t}\n}\n\n/**\n* Marks an password hash as disabled and returns the new hash string\n*\n* @param string $hash hash value to disable\n* @return string disabled hash value\n*/\nfunction pwd_disable($hash) {\n\t// check if password is disabled (old wrong LAM method)\n\tif ((substr($hash, 0, 2) == \"!{\") || (substr($hash, 0, 2) == \"*{\")) {\n\t\treturn $hash;\n\t}\n\t// check for \"!\" or \"*\" at beginning of password hash\n\telse {\n\t\tif (substr($hash, 0, 1) == \"{\") {\n\t\t\t$pos = strpos($hash, \"}\");\n\t\t\tif ((substr($hash, $pos + 1, 1) == \"!\") || (substr($hash, $pos + 1, 1) == \"*\")) {\n\t\t\t\t// hash already disabled\n\t\t\t\treturn $hash;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn substr($hash, 0, $pos + 1) . \"!\" . substr($hash, $pos + 1, strlen($hash));  // not disabled\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn $hash;  // password is plain text\n\t\t}\n\t}\n}\n\n/**\n * Checks if a Unix password can be locked.\n * This checks if the password is not plain text but e.g. contains {SSHA}.\n *\n * @param String $password password value\n * @return boolean can be locked\n */\nfunction pwd_is_lockable($password) {\n\tif (($password == null) || (strlen($password) < 5)) {\n\t\treturn false;\n\t}\n\t// SASL is not lockable\n\tif (strpos($password, '{SASL}') === 0) {\n\t\treturn false;\n\t}\n\treturn ((substr($password, 0, 1) == \"{\") || (substr($password, 1, 1) == \"{\")) && (strpos($password, \"}\") > 3);\n}\n\n/**\n* Checks if a password hash is enabled/disabled\n*\n* @param string $hash password hash to check\n* @return boolean true if the password is marked as enabled\n*/\nfunction pwd_is_enabled($hash) {\n\t// disabled passwords have a \"!\" or \"*\" at the beginning (old wrong LAM method)\n\tif ((substr($hash, 0, 2) == \"!{\") || (substr($hash, 0, 2) == \"*{\")) {\n\t\treturn false;\n\t}\n\tif (substr($hash, 0, 1) == \"{\") {\n\t\t$pos = strrpos($hash, \"}\");\n\t\t// check if hash starts with \"!\" or \"*\"\n\t\treturn ((substr($hash, $pos + 1, 1) !== \"!\") && (substr($hash, $pos + 1, 1) !== \"*\"));\n\t}\n\telse {\n\t\treturn true;\n\t}\n}\n\n/**\n * Generates a random password with 12 digits by default.\n *\n * @param int $length length of password (defaults to 12)\n * @return String password\n */\nfunction generateRandomPassword($length = 12) {\n\t$list = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.-_';\n\t$password = '';\n\t$minLength = $_SESSION['cfgMain']->passwordMinLength;\n\tif ($minLength > $length) {\n\t\t$length = $minLength;\n\t}\n\tfor ($x = 0; $x < 10000; $x++) {\n\t\t$password = '';\n\t\tfor ($i = 0; $i < $length; $i++) {\n\t\t\t$rand = abs(getRandomNumber() % 65);\n\t\t\t$password .= $list[$rand];\n\t\t}\n\t\tif (checkPasswordStrength($password, null, null) === true) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $password;\n}\n\n/**\n * Checks if the given password matches the crypto hash.\n *\n * @param String type hash type (must be one of getSupportedHashTypes())\n * @param string $hash password hash value\n * @param string $password plain text password to check\n * @return bool hash matches\n * @see getSupportedHashTypes()\n */\nfunction checkPasswordHash($type, $hash, $password) {\n\tswitch ($type) {\n\t\tcase 'SSHA':\n\t\t\t$bin = base64_decode($hash);\n\t\t\t$salt = substr($bin, 20);\n\t\t\t$pwdHash = base64_encode(hex2bin(sha1($password . $salt)) . $salt);\n\t\t\treturn (strcmp($hash, $pwdHash) == 0);\n\t\tcase 'SHA':\n\t\t\treturn (strcmp($hash, base64_encode(hex2bin(sha1($password)))) == 0);\n\t\tcase 'SMD5':\n\t\t\t$bin = base64_decode($hash);\n\t\t\t$salt = substr($bin, 16);\n\t\t\t$pwdHash = base64_encode(hex2bin(md5($password . $salt)) . $salt);\n\t\t\treturn (strcmp($hash, $pwdHash) == 0);\n\t\tcase 'MD5':\n\t\t\treturn (strcmp($hash, base64_encode(hex2bin(md5($password)))) == 0);\n\t\tcase 'CRYPT':\n\t\t\t$parts = explode('$', $hash);\n\t\t\tif (sizeof($parts) === 1) {\n\t\t\t\t$salt = substr($hash, 0, 2);\n\t\t\t\t$pwdHash = crypt($password, $salt);\n\t\t\t\treturn (strcmp($hash, $pwdHash) == 0);\n\t\t\t}\n\t\t\tif (sizeof($parts) === 4) {\n\t\t\t\t$version = $parts[1];\n\t\t\t\t$salt = $parts[2];\n\t\t\t\t$pwdHash = crypt($password, '$' . $version . '$' . $salt);\n\t\t\t\treturn (strcmp($hash, $pwdHash) == 0);\n\t\t\t}\n\t\t\telseif (sizeof($parts) === 5) {\n\t\t\t\t$version = $parts[1];\n\t\t\t\t$rounds = $parts[2];\n\t\t\t\t$salt = $parts[3];\n\t\t\t\t$pwdHash = crypt($password, '$' . $version . '$' . $rounds . '$' . $salt);\n\t\t\t\treturn (strcmp($hash, $pwdHash) == 0);\n\t\t\t}\n\t\t\treturn false;\n\t\tcase 'ARGON2ID':\n\t\t\treturn password_verify($password, $hash);\n\t\tcase 'PLAIN':\n\t\t\treturn $password === $hash;\n\t\tdefault:\n\t\t\treturn false;\n\t}\n}\n\n/**\n * Returns the number of character classes in a password.\n *\n * @param string $password password\n * @return int number of classes\n */\nfunction getNumberOfCharacterClasses($password) : int {\n\tif (($password === null) || ($password === '')) {\n\t\treturn 0;\n\t}\n\t$classesCount = 0;\n\tif (preg_match(\"/[a-z]/\", $password)) {\n\t\t$classesCount++;\n\t}\n\tif (preg_match(\"/[A-Z]/\", $password)) {\n\t\t$classesCount++;\n\t}\n\tif (preg_match(\"/[0-9]/\", $password)) {\n\t\t$classesCount++;\n\t}\n\tif (preg_match(\"/[^a-z0-9]/i\", $password)) {\n\t\t$classesCount++;\n\t}\n\treturn $classesCount;\n}\n\n/**\n* Returns an array with all Samba 3 domain entries under the given suffix\n*\n* @param handle LDAP handle (if null then $_SESSION['ldap']->server() is used)\n* @param String $suffix LDAP suffix to search (if null then $_SESSION['config']->get_Suffix('smbDomain') is used)\n* @return array list of samba3domain objects\n*/\nfunction search_domains($server = null, $suffix = null) {\n\tif ($suffix == null) {\n\t\t$suffix = $_SESSION['config']->get_Suffix('smbDomain');\n\t}\n\t$ret = array();\n\t$attr = array(\"DN\", \"sambaDomainName\", \"sambaSID\", \"sambaNextRid\", \"sambaNextGroupRid\",\n\t\t\"sambaNextUserRid\", \"sambaAlgorithmicRidBase\", 'sambaMinPwdAge', 'sambaMaxPwdAge',\n\t\t'sambaPwdHistoryLength'\n\t);\n\tif ($server == null) {\n\t\t$server = $_SESSION['ldap']->server();\n\t}\n\t$filter = '(objectclass=sambaDomain)';\n\t$units = searchLDAPPaged($server, $suffix, $filter, $attr, false, 0);\n\t// extract attributes\n\tfor ($i = 0; $i < sizeof($units); $i++) {\n\t\t$ret[$i] = new samba3domain();\n\t\t$ret[$i]->dn = $units[$i]['dn'];\n\t\t$ret[$i]->name = $units[$i]['sambadomainname'][0];\n\t\t$ret[$i]->SID = $units[$i]['sambasid'][0];\n\t\tif (isset($units[$i]['sambanextrid'][0])) {\n\t\t\t$ret[$i]->nextRID = $units[$i]['sambanextrid'][0];\n\t\t}\n\t\tif (isset($units[$i]['sambanextgrouprid'][0])) {\n\t\t\t$ret[$i]->nextGroupRID = $units[$i]['sambanextgrouprid'][0];\n\t\t}\n\t\tif (isset($units[$i]['sambanextuserrid'][0])) {\n\t\t\t$ret[$i]->nextUserRID = $units[$i]['sambanextuserrid'][0];\n\t\t}\n\t\tif (isset($units[$i]['sambaalgorithmicridbase'][0])) {\n\t\t\t$ret[$i]->RIDbase = $units[$i]['sambaalgorithmicridbase'][0];\n\t\t}\n\t\tif (isset($units[$i]['sambaminpwdage'][0])) {\n\t\t\t$ret[$i]->minPwdAge = $units[$i]['sambaminpwdage'][0];\n\t\t}\n\t\tif (isset($units[$i]['sambamaxpwdage'][0])) {\n\t\t\t$ret[$i]->maxPwdAge = $units[$i]['sambamaxpwdage'][0];\n\t\t}\n\t\tif (isset($units[$i]['sambapwdhistorylength'][0])) {\n\t\t\t$ret[$i]->pwdHistoryLength = $units[$i]['sambapwdhistorylength'][0];\n\t\t}\n\t}\n\treturn $ret;\n}\n\n/**\n* Represents a Samba 3 domain entry\n*\n* @package modules\n*/\nclass samba3domain {\n\n\t/** DN */\n\tpublic $dn;\n\n\t/** Domain name */\n\tpublic $name;\n\n\t/** Domain SID */\n\tpublic $SID;\n\n\t/** Next RID */\n\tpublic $nextRID;\n\n\t/** Next user RID */\n\tpublic $nextUserRID;\n\n\t/** Next group RID */\n\tpublic $nextGroupRID;\n\n\t/** RID base to calculate RIDs, default 1000 */\n\tpublic $RIDbase = 1000;\n\n\t/** seconds after the password can be changed */\n\tpublic $minPwdAge;\n\n\t/** seconds after the password must be changed */\n\tpublic $maxPwdAge;\n\n\t/** password history length */\n\tpublic $pwdHistoryLength;\n}\n\n/**\n* Checks if a given value matches the selected regular expression.\n*\n* @param string $argument value to check\n* @param string $regexp pattern name\n* @return boolean true if matches, otherwise false\n*/\nfunction get_preg($argument, $regexp) {\n\t// First we check \"positive\" cases\n\t$pregexpr = '';\n\tswitch ($regexp) {\n\t\tcase 'password':\n\t\t\t\t\t$pregexpr = '/^([[:alnum:]\\\\^\\\\ \\\\|\\\\#\\\\*\\\\,\\\\.\\\\;\\\\:\\\\_\\\\+\\\\!\\\\%\\\\&\\\\/\\\\?\\\\{\\\\(\\\\)\\\\}\\\\[\\\\]\\\\$\u00a7\u00b0@=-])*$/u';\n\t\t\t\t\tbreak;\n\t\tcase 'groupname':\t// all letters, numbers, space and ._- are allowed characters\n\t\tcase 'username':\n\t\tcase 'hostname':\n\t\t\t\t\t$pregexpr = '/^([[:alnum:]%#@\\\\.\\\\ \\\\_\\\\$-])+$/u';\n\t\t\t\t\tbreak;\n\t\tcase 'krbUserName':\n\t\t\t\t\t$pregexpr = '/^([[:alnum:]#@\\\\/\\\\.\\\\ \\\\_\\\\$-])+$/u';\n\t\t\t\t\tbreak;\n\t\tcase 'hostObject':\n\t\t\t\t\t$pregexpr = '/^[!]?([[:alnum:]@\\\\.\\\\ \\\\_\\\\$\\\\*-])+$/u';\n\t\t\t\t\tbreak;\n\t\tcase 'usernameList':\t// comma separated list of user names\n\t\tcase 'groupnameList':\t// comma separated list of group names\n\t\t\t\t\t$pregexpr = '/^([[:alnum:]%#@\\\\.\\\\ \\\\_-])+(,([[:alnum:]%#@\\\\.\\\\ \\\\_-])+)*$/u';\n\t\t\t\t\tbreak;\n\t\tcase 'realname':\t// Allow all but \\, <, >, =, $, ?\n\t\tcase 'cn':\n\t\t\t\t\t$pregexpr = '/^[^\\\\\\<>=\\\\$\\\\?]+(\\\\$)?$/';\n\t\t\t\t\tbreak;\n\t\tcase \"telephone\":\t// Allow letters, numbers, space, brackets, /-+.\n\t\t\t\t\t$pregexpr = '/^(\\\\+)*([0-9a-zA-Z\\\\.\\\\ \\\\(\\\\)\\\\/-])*$/';\n\t\t\t\t\tbreak;\n\t\tcase \"email\":\n\t\t\t\t\t$pregexpr = '/^([0-9a-zA-Z\\'!~#+*%\\\\$\\\\/\\\\._-])+[@]([0-9a-zA-Z-])+([.]([0-9a-zA-Z-])+)*$/';\n\t\t\t\t\tbreak;\n\t\tcase \"emailWithName\":\n\t\t\t\t\t$pregexpr = '/^([[:alnum:] \\'!~#+*%\\\\$\\\\(\\\\)_-])+ <([0-9a-zA-Z\\'!~#+*%\\\\$\\\\/\\\\._-])+[@]([0-9a-zA-Z-])+([.]([0-9a-zA-Z-])+)*>$/u';\n\t\t\t\t\tbreak;\n\t\tcase \"mailLocalAddress\":\n\t\t\t\t\t$pregexpr = '/^([0-9a-zA-Z+\\\\/\\\\._-])+([@]([0-9a-zA-Z-])+([.]([0-9a-zA-Z-])+)*)?$/';\n\t\t\t\t\tbreak;\n\t\tcase 'kolabEmailPrefix':\n\t\t\t\t\t$pregexpr = '/^([-])?([0-9a-zA-Z+\\\\/\\\\._-])*([@]([0-9a-zA-Z\\\\.-])*)?$/';\n\t\t\t\t\tbreak;\n\t\tcase \"postalAddress\":\t// Allow all but \\, <, >, =, ?\n\t\t\t\t\t$pregexpr = '/^[^\\\\\\<>=\\\\?]*$/';\n\t\t\t\t\tbreak;\n\t\tcase \"postalCode\":\t// Allow all but \\, <, >, =, ?\n\t\tcase \"street\":\n\t\tcase \"title\":\n\t\tcase \"employeeType\":\n\t\tcase \"businessCategory\":\n\t\t\t\t\t$pregexpr = '/^[^\\\\\\<>=\\\\$\\\\?]*$/';\n\t\t\t\t\tbreak;\n\t\tcase \"homeDirectory\":\t\t// Homapath, /path/......\n\t\tcase \"filePath\":\n\t\t\t\t\t$pregexpr = '/^([\\/]([[:alnum:]@\\\\$\\\\.\\\\ \\\\_-])+)+(\\/)?$/u';\n\t\t\t\t\tbreak;\n\t\tcase \"digit\":\t\t// Normal number\n\t\t\t\t\t$pregexpr = '/^[[:digit:]]*$/';\n\t\t\t\t\tbreak;\n\t\tcase \"float\":\t\t// float value\n\t\t\t\t\t$pregexpr = '/^[[:digit:]]+(\\\\.[[:digit:]]+)?$/';\n\t\t\t\t\tbreak;\n\t\tcase \"UNC\":\t\t\t// UNC Path, e.g. \\\\server\\share\\folder\\...\n\t\t\t\t\t$pregexpr = '/^((([\\\\\\][\\\\\\])|(%))([a-zA-Z0-9@%\\\\.-])+)([\\\\\\]([[:alnum:]@%\\\\.\\\\$\\\\ \\\\_-])+)+$/u';\n\t\t\t\t\tbreak;\n\t\tcase \"logonscript\":\t// path to login-script. normal unix file\n\t\t\t\t\t$pregexpr = '/^(([\\/\\\\\\])*([[:alnum:]%\\\\.\\\\ \\\\$\\\\_-])+([\\/\\\\\\]([[:alnum:]%\\\\.\\\\ \\\\$\\\\_-])+)*((\\\\.bat)|(\\\\.cmd)|(\\\\.exe)|(\\\\.vbs)))*$/u';\n\t\t\t\t\tbreak;\n\t\tcase \"workstations\":\t// comma separated list with windows-hosts\n\t\t\t\t\t$pregexpr = '/^(([a-zA-Z0-9\\\\.\\\\_-])+(,[a-zA-Z0-9\\\\.\\\\_-])*)*$/';\n\t\t\t\t\tbreak;\n\t\tcase \"domainname\":\t\t// Windows Domainname\n\t\t\t\t\t$pregexpr = '/^([A-Za-z0-9\\\\.\\\\_-])+$/';\n\t\t\t\t\tbreak;\n\t\tcase \"unixhost\":\t\t// Unix hosts\n\t\t\t\t\t$pregexpr = '/^([a-z0-9,\\\\.\\\\*_-])*$/';\n\t\t\t\t\tbreak;\n\t\tcase 'digit2':\t\t\t// Same as digit but also -1\n\t\t\t\t\t$pregexpr = '/^(([-][1])|([[:digit:]]*))$/';\n\t\t\t\t\tbreak;\n\t\tcase 'gecos':\n\t\t\t\t\t$pregexpr = '/^[[:alnum:] \\\\._-]+([,][[:alnum:] \\\\._-]+)*$/u';\n\t\t\t\t\tbreak;\n\t\tcase 'macAddress':\n\t\t\t\t\t$pregexpr = '/^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$/';\n\t\t\t\t\tbreak;\n\t\tcase 'date':\t\t\t// 31-12-2012\n\t\t\t\t\t$pregexpr = '/^((0?[1-9])|([1-2][0-9])|30|31)\\\\-((0?[1-9])|(1[0-2]))\\\\-[1-3][0-9][0-9][0-9]$/';\n\t\t\t\t\tbreak;\n\t\tcase 'date2':\n\t\t\t\t\t$pregexpr = '/^((0[1-9])|([1-2][0-9])|30|31)\\\\.((0[1-9])|(1[0-2]))\\\\.[1-3][0-9][0-9][0-9]$/';\n\t\t\t\t\tbreak;\n\t\tcase 'dateTime':\n\t\t\t\t\t$pregexpr = '/^[1-3][0-9][0-9][0-9]\\\\-((0[1-9])|(1[0-2]))\\\\-((0[1-9])|([1-2][0-9])|30|31) ((0[0-9])|([1][0-9])|20|21|22|23):((0[0-9])|([1-5][0-9])):((0[0-9])|([1-5][0-9]))$/';\n\t\t\t\t\tbreak;\n\t\tcase 'sambaLogonHours':\n\t\t\t\t\t$pregexpr = '/^[0-9a-fA-F]{42}$/';\n\t\t\t\t\tbreak;\n\t\tcase 'DNSname':\n\t\t\t\t\t$pregexpr = '/^[0-9a-zA-Z_-]+(\\\\.[0-9a-zA-Z_-]+)*$/';\n\t\t\t\t\tbreak;\n\t\tcase 'nis_alias':\n\t\t\t\t\t$pregexpr = '/^([[:alnum:]@\\\\.\\\\ \\\\_-])+$/u';\n\t\t\t\t\tbreak;\n\t\tcase 'nis_recipient':\n\t\t\t\t\t$pregexpr = '/^([[:alnum:]+@\\\\.\\\\ \\\\_-])+$/u';\n\t\t\t\t\tbreak;\n\t\tcase 'country':\t// Allow all letters and space\n\t\t\t\t\t$pregexpr = '/^[[:alpha:]]([[:alpha:] ])+$/u';\n\t\t\t\t\tbreak;\n\t\tcase 'dn':\t// LDAP DN\n\t\t\t\t\t$pregexpr = '/^([^=,]+=[^=,]+)(,([^=,]+=[^=,]+))*$/';\n\t\t\t\t\tbreak;\n\t\tcase 'domainSID': // Samba domain SID\n\t\t\t\t\t$pregexpr = \"/^S\\\\-[0-9]\\\\-[0-9]\\\\-[0-9]{2,2}\\\\-[0-9]+\\\\-[0-9]+\\\\-[0-9]+$/\";\n\t\t\t\t\tbreak;\n\t\tcase 'ip': // IP address\n\t\t\t\t\t$pregexpr = '/^[0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}$/';\n\t\t\t\t\tbreak;\n\t\tcase 'ip6': // IPv6 address (only basic check)\n\t\t\t\t\t$pregexpr = '/^[0-9a-f:]+$/i';\n\t\t\t\t\tbreak;\n\t\tcase 'ascii': // ASCII\n\t\t\t\t\t$pregexpr = '/^[' . chr(1) . '-' . chr(128) . ']*$/';\n\t\t\t\t\tbreak;\n\t\tcase 'objectClass':\n\t\t\t\t\t$pregexpr = '/^[[:alnum:]_-]+$/';\n\t\t\t\t\tbreak;\n\t\tcase 'quotaNumber':\n\t\t\t\t\t$pregexpr = '/^[[:digit:]]+[KMGTkmgt]?$/';\n\t\t\t\t\tbreak;\n\t\tcase 'hostAndPort':\n\t\t\t\t\t$pregexpr = '/^[[:alnum:]\\\\._-]+:[[:digit:]]+$/';\n\t\t\t\t\tbreak;\n\t\tcase 'ldapDateAndTime':\n\t\t\t\t\t$pregexpr = '/^[0-9]{14}Z$/';\n\t\t\t\t\tbreak;\n\t}\n\tif (($pregexpr != '') && preg_match($pregexpr, $argument)) {\n\t\treturn true;\n\t}\n\t// Now we check \"negative\" cases, characters which are not allowed\n\t$pregexpr = '';\n\tswitch ($regexp) {\n\t\tcase \"!lower\":\n\t\t\t$pregexpr = '/[[:lower:]]/';\n\t\t\tbreak;\n\t\tcase \"!upper\":\n\t\t\t$pregexpr = '/[[:upper:]]/';\n\t\t\tbreak;\n\t\tcase \"!digit\":\n\t\t\t$pregexpr = '/[[:digit:]]/';\n\t\t\tbreak;\n\t}\n\tif (($pregexpr != '') && !preg_match($pregexpr, $argument)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n/**\n * Converts the comma escaping from Windows to OpenLDAP style.\n *\n * @param string $dn DN\n * @return string DN\n */\nfunction convertCommaEscaping($dn) {\n\treturn str_replace(\n\t\tarray('\\\\,'),\n\t\tarray('\\\\2C'),\n\t\t$dn);\n}\n\n/**\n * Connects to an LDAP server using the given URL.\n *\n * @param string $serverURL URL\n */\nfunction connectToLDAP($serverURL, $startTLS) {\n\t$server = ldap_connect($serverURL);\n\tif ($server === false) {\n\t\treturn null;\n\t}\n\tif (defined('LDAP_OPT_X_TLS_CACERTFILE')) {\n\t\t$cfgMain = new LAMCfgMain();\n\t\t$certificates = $cfgMain->getSSLCaCertificates();\n\t\tif (!empty($certificates)) {\n\t\t\tldap_set_option($server, LDAP_OPT_X_TLS_CACERTFILE, $cfgMain->getSSLCaCertPath());\n\t\t}\n\t}\n\t// use LDAPv3\n\tldap_set_option($server, LDAP_OPT_PROTOCOL_VERSION, 3);\n\t// start TLS if possible\n\tif ($startTLS) {\n\t\tldap_start_tls($server);\n\t\tif (ldap_errno($server) != 0) {\n\t\t\tldap_close($server);\n\t\t\tlogNewMessage(LOG_ERR, 'Unable to start TLS encryption. Please check if your server certificate is valid and if the LDAP server supports TLS at all.');\n\t\t\treturn null;\n\t\t}\n\t}\n\treturn $server;\n}\n\n/**\n * This will search the given LDAP suffix for all entries which have the given attribute.\n *\n * @param String $name attribute name (may be null)\n * @param String $value attribute value\n * @param String $objectClass object class (may be null)\n * @param array $attributes list of attributes to return\n * @param array $scopes account types\n * @return array list of found entries\n */\nfunction searchLDAPByAttribute($name, $value, $objectClass, $attributes, $scopes) {\n\t$return = array();\n\t// build filter\n\t$filter = '';\n\t$filterParts = array();\n\tif ($name != null) {\n\t\t$filterParts[] = '(' . $name . '=' . ldap_escape($value, '*', LDAP_ESCAPE_FILTER) . ')';\n\t}\n\tif ($objectClass != null) {\n\t\t$filterParts[] = '(objectClass=' . $objectClass . ')';\n\t}\n\tif (sizeof($filterParts) == 1) {\n\t\t$filter = $filterParts[0];\n\t}\n\telseif (sizeof($filterParts) > 1) {\n\t\t$filter = '(& ' . implode(' ', $filterParts) . ')';\n\t}\n\t$typeManager = new \\LAM\\TYPES\\TypeManager();\n\t$activeTypes = $typeManager->getConfiguredTypes();\n\tforeach ($activeTypes as $type) {\n\t\tif (!in_array($type->getScope(), $scopes)) {\n\t\t\tcontinue;  // skip non-active account types\n\t\t}\n\t\t// search LDAP\n\t\t$entries = searchLDAPPaged($_SESSION['ldap']->server(), $type->getSuffix(),\n\t\t\t\t\t$filter, $attributes, 0, $_SESSION['config']->get_searchLimit());\n\t\tif (ldap_errno($_SESSION['ldap']->server()) == 4) {\n\t\t\tlogNewMessage(LOG_WARNING, 'LDAP size limit exceeded. Please increase the limit on your server.');\n\t\t}\n\t\t$return = array_merge($return, $entries);\n\t}\n\treturn $return;\n}\n\n/**\n * This will search the given LDAP suffix for all entries which match the given filter.\n *\n * @param String $filter\n * @param array $attributes list of attributes to return\n * @param array $scopes account types\n * @param boolean $attrsOnly get only attributes but no values (default: false)\n * @return array list of found entries\n */\nfunction searchLDAPByFilter($filter, $attributes, $scopes, $attrsOnly = false) {\n\t$return = array();\n\t$readAttributesOnly = 0;\n\tif ($attrsOnly) {\n\t\t$readAttributesOnly = 1;\n\t}\n\t$typeManager = new \\LAM\\TYPES\\TypeManager();\n\t$types = $typeManager->getConfiguredTypesForScopes($scopes);\n\tforeach ($types as $type) {\n\t\t$additionalFilter = $type->getAdditionalLdapFilter();\n\t\tif (!empty($additionalFilter)) {\n\t\t\tif (strpos($additionalFilter, '(') !== 0) {\n\t\t\t\t$additionalFilter = '(' . $additionalFilter . ')';\n\t\t\t}\n\t\t\tif (strpos($filter, '(') !== 0) {\n\t\t\t\t$filter = '(' . $filter . ')';\n\t\t\t}\n\t\t\t$filter = '(&' . $additionalFilter . $filter . ')';\n\t\t}\n\t\t// search LDAP\n\t\t$entries = searchLDAPPaged($_SESSION['ldap']->server(), $type->getSuffix(),\n\t\t\t\t\t$filter, $attributes, $readAttributesOnly, $_SESSION['config']->get_searchLimit());\n\t\tif (ldap_errno($_SESSION['ldap']->server()) == 4) {\n\t\t\tlogNewMessage(LOG_WARNING, 'LDAP size limit exceeded. Please increase the limit on your server.');\n\t\t}\n\t\t$return = array_merge($return, $entries);\n\t}\n\treturn $return;\n}\n\n/**\n * Runs an LDAP search.\n *\n * @param String $suffix LDAP suffix\n * @param String $filter filter\n * @param array $attributes list of attributes to return\n * @param int $limit result limit\n * @return array list of found entries\n */\nfunction searchLDAP($suffix, $filter, $attributes, $limit = -1) {\n\tif ($limit === -1) {\n\t\t$limit = !empty($_SESSION['config']) ? $_SESSION['config']->get_searchLimit() : 0;\n\t}\n\t$return = searchLDAPPaged(getLDAPServerHandle(), $suffix, $filter, $attributes,\n\t\t\t\t0, $limit);\n\tif (ldap_errno(getLDAPServerHandle()) == 4) {\n\t\tlogNewMessage(LOG_WARNING, 'LDAP size limit exceeded. Please increase the limit on your server.');\n\t}\n\treturn $return;\n}\n\n/**\n * Returns the LDAP server handle.\n *\n * @return handle LDAP handle\n */\nfunction getLDAPServerHandle() {\n\tif (!empty($_SESSION['ldap'])) {\n\t\t// admin pages\n\t\treturn $_SESSION['ldap']->server();\n\t}\n\telse {\n\t\t// self service\n\t\treturn $_SESSION['ldapHandle'];\n\t}\n}\n\n/**\n * Runs an LDAP search and uses paging if configured.\n *\n * @param handle $server LDAP connection handle\n * @param String $dn DN\n * @param String $filter filter\n * @param array $attributes attribute list\n * @param boolean $attrsOnly return only attribute names\n * @param int $limit size limit\n * @return array results\n */\nfunction searchLDAPPaged($server, $dn, $filter, $attributes, $attrsOnly, $limit) {\n\tif (empty($_SESSION['config']) || ($_SESSION['config']->getPagedResults() !== 'true')) {\n\t\t$sr = @ldap_search($server, $dn, $filter, $attributes, $attrsOnly, $limit, 0, LDAP_DEREF_NEVER);\n\t\tif ($sr) {\n\t\t\t$entries = ldap_get_entries($server, $sr);\n\t\t\tif (!$entries) {\n\t\t\t\treturn array();\n\t\t\t}\n\t\t\tcleanLDAPResult($entries);\n\t\t\treturn $entries;\n\t\t}\n\t\telse {\n\t\t\treturn array();\n\t\t}\n\t}\n\t$pageSize = 999;\n\t$cookie = '';\n\t$controls = array(\n\t\tarray(\n\t\t\t'oid' => LDAP_CONTROL_PAGEDRESULTS,\n\t\t\t'size' => $pageSize,\n\t\t\t'cookie' => $cookie)\n\t);\n\t$return = array();\n\tdo {\n\t\t$sr  = @ldap_search($server, $dn, $filter, $attributes, $attrsOnly, $limit,\n\t\t\t0, LDAP_DEREF_NEVER, $controls);\n\t\tif (!$sr) {\n\t\t\tbreak;\n\t\t}\n\t\t$entries = ldap_get_entries($server, $sr);\n\t\tif (!$entries) {\n\t\t\tbreak;\n\t\t}\n\t\t$return = array_merge($return, $entries);\n\t}\n\twhile ($cookie !== null && $cookie != '');\n\tcleanLDAPResult($return);\n\treturn $return;\n}\n\n/**\n * Returns the given DN.\n *\n * @param String $dn DN\n * @param array $attributes list of attributes to fetch\n * @param handle $handle LDAP handle (optional for admin interface pages)\n * @return array attributes or null if not found\n */\nfunction ldapGetDN($dn, $attributes = array('dn'), $handle = null) {\n\tif ($handle == null) {\n\t\t$handle = getLDAPServerHandle();\n\t}\n\t$return = null;\n\t$sr = @ldap_read($handle, $dn, 'objectClass=*', $attributes, 0, 0, 0, LDAP_DEREF_NEVER);\n\tif ($sr) {\n\t\t$entries = ldap_get_entries($handle, $sr);\n\t\tif ($entries) {\n\t\t\tcleanLDAPResult($entries);\n\t\t\t$return = $entries[0];\n\t\t}\n\t\t@ldap_free_result($sr);\n\t}\n\treturn $return;\n}\n\n/**\n * Returns the DN and children of a given DN.\n *\n * @param String $dn DN\n * @param String $filter LDAP filter\n * @param array $attributes list of attributes to fetch\n * @param handle $handle LDAP handle (optional for admin interface pages)\n * @param int $limit result limit\n * @return array attributes or null if not found\n */\nfunction ldapListDN($dn, $filter = '(objectclass=*)', $attributes = array('dn'), $handle = null, $limit = -1) {\n\tif ($limit === -1) {\n\t\t$limit = !empty($_SESSION['config']) ? $_SESSION['config']->get_searchLimit() : 0;\n\t}\n\tif ($handle == null) {\n\t\t$handle = $_SESSION['ldap']->server();\n\t}\n\t$return = null;\n\t$sr = @ldap_list($handle, $dn, $filter, $attributes, 0, $limit, 0, LDAP_DEREF_NEVER);\n\tif ($sr) {\n\t\t$entries = ldap_get_entries($handle, $sr);\n\t\tif ($entries) {\n\t\t\tcleanLDAPResult($entries);\n\t\t\t$return = $entries;\n\t\t}\n\t\t@ldap_free_result($sr);\n\t}\n\treturn $return;\n}\n\n/**\n* Deletes a DN and all child entries.\n*\n* @param string $dn DN to delete\n* @param boolean $recursive recursive delete also child entries\n* @return array error messages\n*/\nfunction deleteDN($dn, $recursive) {\n\t$errors = array();\n\tif (($dn == null) || ($dn == '')) {\n\t\t$errors[] = array('ERROR', _('Entry does not exist'));\n\t\treturn $errors;\n\t}\n\tif ($recursive) {\n\t\t$sr = @ldap_list($_SESSION['ldap']->server(), $dn, 'objectClass=*', array('dn'), 0, 0, 0, LDAP_DEREF_NEVER);\n\t\tif ($sr) {\n\t\t\t$entries = ldap_get_entries($_SESSION['ldap']->server(), $sr);\n\t\t\tcleanLDAPResult($entries);\n\t\t\tfor ($i = 0; $i < sizeof($entries); $i++) {\n\t\t\t\t// delete recursively\n\t\t\t\t$subErrors = deleteDN($entries[$i]['dn'], $recursive);\n\t\t\t\tfor ($e = 0; $e < sizeof($subErrors); $e++) {\n\t\t\t\t\t$errors[] = $subErrors[$e];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t$errors[] = array ('ERROR', sprintf(_('Was unable to delete DN: %s.'), $dn), getDefaultLDAPErrorString($_SESSION['ldap']->server()));\n\t\t\treturn $errors;\n\t\t}\n\t}\n\t// delete parent DN\n\t$success = @ldap_delete($_SESSION['ldap']->server(), $dn);\n\tif (!$success) {\n\t\tlogNewMessage(LOG_ERR, 'Unable to delete DN: ' . $dn . ' (' . ldap_error($_SESSION['ldap']->server()) . ').');\n\t\t$errors[] = array ('ERROR', sprintf(_('Was unable to delete DN: %s.'), $dn), getDefaultLDAPErrorString($_SESSION['ldap']->server()));\n\t}\n\telse {\n\t\tlogNewMessage(LOG_NOTICE, 'Deleted DN: ' . $dn);\n\t}\n\treturn $errors;\n}\n\n/**\n * Performs a recursive copy from old DN under target DN.\n *\n * @param string $oldDn old DN to copy\n * @param string $targetDn copy nodes under this DN\n * @throws LAMException error on copy\n */\nfunction copyDnRecursive(string $oldDn, string $targetDn): void {\n\t$oldRdn = extractRDN($oldDn);\n\t$newDn = $oldRdn . ',' . $targetDn;\n\tlogNewMessage(LOG_DEBUG, 'Copy DN ' . $oldDn . ' to ' . $newDn);\n\t$attributes = ldapGetDN($oldDn, array('*'));\n\tif (empty($attributes)) {\n\t\tlogNewMessage(LOG_ERR, sprintf(_(\"Unable to read %s.\"), unescapeLdapSpecialCharacters($oldDn)));\n\t\tthrow new LAMException(sprintf(_(\"Unable to read %s.\"), htmlspecialchars(unescapeLdapSpecialCharacters($oldDn))));\n\t}\n\tunset($attributes['dn']);\n\t$systemAttributesToSkip = array('iscriticalsystemobject', 'primarygroupid', 'samaccounttype', 'objectsid');\n\tforeach ($systemAttributesToSkip as $systemAttributeToSkip) {\n\t\tif (isset($attributes[$systemAttributeToSkip])) {\n\t\t\tunset($attributes[$systemAttributeToSkip]);\n\t\t}\n\t}\n\t$success = ldap_add($_SESSION['ldap']->server(), $newDn, $attributes);\n\tif (!$success) {\n\t\tlogNewMessage(LOG_ERR, sprintf(_('Was unable to create DN: %s.'), unescapeLdapSpecialCharacters($oldDn)) . ' ' .\n\t\t\tgetExtendedLDAPErrorMessage($_SESSION['ldap']->server()));\n\t\tthrow new LAMException(sprintf(_('Was unable to create DN: %s.'), htmlspecialchars(unescapeLdapSpecialCharacters($oldDn))),\n\t\t\tgetExtendedLDAPErrorMessage($_SESSION['ldap']->server()));\n\t}\n\t$children = ldapListDN($oldDn);\n\tforeach ($children as $child) {\n\t\tcopyDnRecursive($child['dn'], $newDn);\n\t}\n}\n\n/**\n * Moves an LDAP entry.\n *\n * @param string $oldDn old DN\n * @param string $targetDn target container DN\n * @throws LAMException error during move\n */\nfunction moveDn(string $oldDn, string $targetDn): void {\n\t$deleteOldRdn = $_SESSION['ldap']->isActiveDirectory();\n\t$rdn = extractRDN($oldDn);\n\t$success = ldap_rename($_SESSION['ldap']->server(), $oldDn, $rdn, $targetDn, $deleteOldRdn);\n\tif (!$success) {\n\t\tthrow new LAMException(sprintf(_('Was unable to rename DN: %s.'), $oldDn), getDefaultLDAPErrorString($_SESSION['ldap']->server()));\n\t}\n}\n\n/**\n * Returns the parameters for a StatusMessage of the last LDAP search.\n *\n * @return array parameters for StatusMessage or null if all was ok\n */\nfunction getLastLDAPError() {\n\t$errorNumber = ldap_errno($_SESSION[\"ldap\"]->server());\n\tswitch ($errorNumber) {\n\t\t// all ok\n\t\tcase 0:\n\t\t\treturn null;\n\t\t\tbreak;\n\t\t// size limit exceeded\n\t\tcase 4:\n\t\t\t$error = array(\"WARN\", _(\"LDAP sizelimit exceeded, not all entries are shown.\"));\n\t\t\tif ($_SESSION['config']->get_searchLimit() == 0) {\n\t\t\t\t// server limit exceeded\n\t\t\t\t$error[] = _(\"See the manual for instructions to solve this problem.\");\n\t\t\t}\n\t\t\treturn $error;\n\t\t\tbreak;\n\t\t// other errors\n\t\tdefault:\n\t\t\treturn array(\"ERROR\", _(\"LDAP search failed! Please check your preferences.\"), ldap_error($_SESSION[\"ldap\"]->server()));\n\t\tbreak;\n\t}\n}\n\n/**\n * Cleans the result of an LDAP search.\n * This will remove all 'count' entries and also all numeric array keys.\n *\n * @param array $entries LDAP entries in format $entries[entry number][attribute name][attribute values]\n */\nfunction cleanLDAPResult(&$entries) {\n\tif (isset($entries['count'])) {\n\t\tunset($entries['count']);\n\t}\n\t// iterate over all results\n\t$count = sizeof($entries);\n\tfor ($e = 0; $e < $count; $e++) {\n\t\t// remove 'count' entries and numerical entries\n\t\tfor ($i = 0; $i < $entries[$e]['count']; $i++) {\n\t\t\tif (isset($entries[$e][$i])) {\n\t\t\t\tunset($entries[$e][$i]);\n\t\t\t}\n\t\t}\n\t\tunset($entries[$e]['count']);\n\t\t$attrNames = array_keys($entries[$e]);\n\t\t$attrCount = sizeof($attrNames);\n\t\tfor ($i = 0; $i < $attrCount; $i++) {\n\t\t\tif (is_array($entries[$e][$attrNames[$i]])) {\n\t\t\t\tunset($entries[$e][$attrNames[$i]]['count']);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Transforms a DN into a more user friendly format.\n * E.g. \"dc=company,dc=de\" is transformed to \"company > de\".\n *\n * @param String $dn DN\n * @return String transformed DN\n */\nfunction getAbstractDN($dn) {\n\tif ($dn == '') {\n\t\treturn '';\n\t}\n\t$dn = str_replace('\\\\,', '\\\\2C', $dn);\n\tif (!empty($_SESSION['config']) && !empty($_SESSION['config']->getHideDnPart())) {\n\t\t$partToCut = ',' . $_SESSION['config']->getHideDnPart();\n\t\t$dn = str_replace($partToCut, '', $dn);\n\t}\n\t$parts = explode(',', $dn);\n\tfor ($i = 0; $i < sizeof($parts); $i++) {\n\t\t$subparts = explode('=', $parts[$i]);\n\t\tif (sizeof($subparts) == 2) {\n\t\t\t$parts[$i] = $subparts[1];\n\t\t}\n\t}\n\t$abstractDn = implode(' > ', $parts);\n\treturn unescapeLdapSpecialCharacters($abstractDn);\n}\n\n/**\n * Unescapes LDAP special characters for readability.\n *\n * @param string $dn escaped DN\n * @return string unescaped DN\n */\nfunction unescapeLdapSpecialCharacters(string $dn): string {\n\treturn preg_replace_callback('/\\\\\\([0-9A-Fa-f]{2})/', 'unescapeLdapSpecialCharactersCallback', $dn);\n}\n\n/**\n * Callback function for unescaping DN.\n *\n * @param array $matches HEX value that was found\n * @return string unescaped string\n */\nfunction unescapeLdapSpecialCharactersCallback(array $matches): string {\n\treturn chr(hexdec($matches[1]));\n}\n\n/**\n* Helper function to sort DNs.\n*\n* @param string $a first argument to compare\n* @param string $b second argument to compare\n* @return integer 0 if equal, 1 if $a is greater, -1 if $b is greater\n*/\nfunction compareDN($a, $b) {\n\t// split DNs\n\t$array_a = explode(\",\", strtolower($a));\n\t$array_b = explode(\",\", strtolower($b));\n\t$len_a = sizeof($array_a);\n\t$len_b = sizeof($array_b);\n\t// check how many parts to compare\n\t$len = min($len_a, $len_b);\n\t// compare from last part on\n\tfor ($i = 0; $i < $len; $i++) {\n\t\t// get parts to compare\n\t\t$part_a = $array_a[$len_a - $i - 1];\n\t\t$part_a = explode('=', $part_a);\n\t\t$part_a = isset($part_a[1]) ? $part_a[1] : $part_a[0];\n\t\t$part_b = $array_b[$len_b - $i - 1];\n\t\t$part_b = explode('=', $part_b);\n\t\t$part_b = isset($part_b[1]) ? $part_b[1] : $part_b[0];\n\t\t// compare parts\n\t\tif ($part_a == $part_b) { // part is identical\n\t\t\tif ($i == ($len - 1)) {\n\t\t\t\treturn $len_a <=> $len_b;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn strnatcasecmp($part_a, $part_b);\n\t\t}\n\t}\n\treturn -1;\n}\n\n/**\n * Formats an LDAP time string (e.g. from createTimestamp).\n *\n * @param String $time LDAP time value\n * @return String formatted time\n */\nfunction formatLDAPTimestamp($time) {\n\t$dateTime = parseLDAPTimestamp($time);\n\treturn $dateTime->format('d.m.Y H:i:s');\n}\n\n/**\n * Parses an LDAP time stamp and returns a DateTime in current time zone.\n *\n * @param String $time LDAP time value\n * @return DateTime time\n */\nfunction parseLDAPTimestamp($time) {\n\t// Windows format:  20140118093807.0Z\n\t// OpenLDAP format: 20140118093807Z\n\t// cut off \"Z\"\n\t$timeNumbers = substr($time, 0, -1);\n\t// for Windows cut off \".0\"\n\tif (strpos($timeNumbers, '.') == (strlen($timeNumbers) - 2)) {\n\t\t$timeNumbers = substr($timeNumbers, 0, -2);\n\t}\n\t$dateTime = DateTime::createFromFormat('YmdHis', $timeNumbers, new DateTimeZone('UTC'));\n\t$dateTime->setTimezone(getTimeZone());\n\treturn $dateTime;\n}\n\n/**\n * Simple function to obfuscate strings.\n *\n * @param String $text text to obfuscate\n */\nfunction obfuscateText($text) {\n\tif (($text == null) || ($text == '')) {\n\t\treturn $text;\n\t}\n\treturn str_rot13(base64_encode('LAM_OBFUSCATE:'.$text));\n}\n\n/**\n * Simple function to deobfuscate strings.\n *\n * @param String $text text to deobfuscate\n */\nfunction deobfuscateText($text) {\n\tif (($text == null) || ($text == '')) {\n\t\treturn $text;\n\t}\n\tif (!isObfuscatedText($text)) {\n\t\treturn $text;\n\t}\n\treturn str_replace('LAM_OBFUSCATE:', '', base64_decode(str_rot13($text)));\n}\n\n/**\n * Checks if the given text is obfuscated.\n *\n * @param String $text text to check\n * @return boolean obfuscated or not\n */\nfunction isObfuscatedText($text) {\n\tif (($text == null) || ($text == '')) {\n\t\treturn false;\n\t}\n\t$deob = base64_decode(str_rot13($text));\n\treturn (strpos($deob, 'LAM_OBFUSCATE:') === 0);\n}\n\n/**\n * Extracts the RDN attribute name from a given DN.\n *\n * @param String $dn DN\n * @return String RDN attribute name\n */\nfunction extractRDNAttribute($dn) {\n\t$rdn = extractRDN($dn);\n\tif (empty($rdn)) {\n\t\treturn null;\n\t}\n\t$parts = explode(\"=\", $rdn);\n\treturn $parts[0];\n}\n\n/**\n * Extracts the RDN attribute value from a given DN.\n *\n * @param String $dn DN\n * @return String RDN attribute value\n */\nfunction extractRDNValue($dn) {\n\t$rdn = extractRDN($dn);\n\tif (empty($rdn)) {\n\t\treturn null;\n\t}\n\t$parts = explode(\"=\", $rdn);\n\treturn $parts[1];\n}\n\n/**\n * Extracts the RDN part of the DN.\n *\n * @param string|null $dn DN\n * @return string|null RDN part\n */\nfunction extractRDN(?string $dn): ?string {\n\tif (empty($dn)) {\n\t\treturn null;\n\t}\n\t$dn = convertCommaEscaping($dn);\n\t$parts = ldap_explode_dn($dn, 0);\n\tif (empty($parts[0])) {\n\t\treturn null;\n\t}\n\t$rdn = unescapeLdapSpecialCharacters($parts[0]);\n\t$rdn = str_replace(',', '\\\\2C', $rdn);\n\treturn $rdn;\n}\n\n/**\n * Extracts the DN suffix from a given DN.\n * E.g. ou=people,dc=test,dc=com will result in dc=test,dc=com.\n *\n * @param String $dn DN\n * @return String DN suffix\n */\nfunction extractDNSuffix($dn) {\n\tif ($dn == null) {\n\t\treturn null;\n\t}\n\t$dn = convertCommaEscaping($dn);\n\t$parts = ldap_explode_dn($dn, 0);\n\tif ($parts === false) {\n\t\treturn null;\n\t}\n\tunset($parts['count']);\n\tarray_shift($parts);\n\tfor ($i = 0; $i < sizeof($parts); $i++) {\n\t\t$parts[$i] = unescapeLdapSpecialCharacters($parts[$i]);\n\t\t$parts[$i] = str_replace(',', '\\\\2C', $parts[$i]);\n\t}\n\treturn implode(',', $parts);\n}\n\n/**\n * Sends the password mail.\n *\n * @param String $pwd new password\n * @param array $user LDAP attributes of user\n * @param String $recipient recipient address (optional, $user['mail'][0] used by default)\n * @return array list of arrays that can be used to create status messages\n */\nfunction sendPasswordMail($pwd, $user, $recipient = null) {\n\t$user = array_change_key_case($user, CASE_LOWER);\n\t// read mail data\n\t$mailTo = null;\n\tif (!empty($recipient)) {\n\t\t$mailTo = $recipient;\n\t}\n\telseif (!empty($user['mail'][0])) {\n\t\t$mailTo = $user['mail'][0];\n\t}\n\tif (empty($mailTo)) {\n\t\tlogNewMessage(LOG_ERR, 'Unable to send password mail, no TO address set.');\n\t\treturn array(\n\t\t\tarray('ERROR', _('Unable to send mail!'))\n\t\t);\n\t}\n\t$mailFrom = $_SESSION['config']->getLamProMailFrom();\n\t$mailReplyTo = $_SESSION['config']->getLamProMailReplyTo();\n\t$mailSubject = $_SESSION['config']->getLamProMailSubject();\n\t$mailText = $_SESSION['config']->getLamProMailText();\n\t$mailIsHTML = $_SESSION['config']->getLamProMailIsHTML();\n\t$subject = $mailSubject;\n\t$body = $mailText;\n\t$body = str_replace('@@newPassword@@', $pwd, $body);\n\t$results = array();\n\t$found = preg_match('/\\@\\@[^\\@]+\\@\\@/', $body, $results);\n\twhile ($found == 1) {\n\t\t$attr = str_replace('@', '', $results[0]);\n\t\t$value = '';\n\t\tif (isset($user[strtolower($attr)][0])) {\n\t\t\tif (is_array($user[strtolower($attr)])) {\n\t\t\t\t$value = $user[strtolower($attr)][0];\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$value = $user[strtolower($attr)];\n\t\t\t}\n\t\t}\n\t\t$body = str_replace('@@' . $attr . '@@', $value, $body);\n\t\t$found = preg_match('/\\@\\@[^\\@]+\\@\\@/', $body, $results);\n\t}\n\t$success = sendEMail($mailTo, $subject, $body, $mailFrom, ($mailIsHTML == 'true'), $mailReplyTo);\n\tif ($success) {\n\t\tlogNewMessage(LOG_DEBUG, 'Sent password mail to ' . $mailTo);\n\t\treturn array(\n\t\t\tarray('INFO', sprintf(_('Mail successfully sent to %s.'), htmlspecialchars($mailTo)))\n\t\t);\n\t}\n\telse {\n\t\tlogNewMessage(LOG_ERR, 'Unable to send password mail to ' . htmlspecialchars($mailTo));\n\t\treturn array(\n\t\t\tarray('ERROR', _('Unable to send mail!'))\n\t\t);\n\t}\n}\n\n/**\n * Sends out an email.\n *\n * @param String|array $to TO address\n * @param String $subject email subject\n * @param String $text mail body (with \\r\\n EOL)\n * @param String $from FROM address\n * @param bool $isHTML HTML format\n * @param String $replyTo REPLY-TO address (optional)\n * @param String $cc CC address (optional)\n * @param String $bcc BCC address (optional)\n */\nfunction sendEMail($to, $subject, $text, $from, $isHTML, $replyTo = null, $cc = null, $bcc = null) {\n\tinclude_once __DIR__ . '/3rdParty/composer/autoload.php';\n\t$returnPath = empty($replyTo) ? $from : $replyTo;\n\t$returnPathParsed = PHPMailer\\PHPMailer\\PHPMailer::parseAddresses($returnPath);\n\tlogNewMessage(LOG_DEBUG, \"Send mail to \" . print_r($to, true) . \"\\n\" . $text);\n\t$mailer = new PHPMailer\\PHPMailer\\PHPMailer(true);\n\ttry {\n\t\t$cfgMain = $_SESSION['cfgMain'];\n\t\tif (!empty($cfgMain->mailServer)) {\n\t\t\t$mailer->isSMTP();\n\t\t\t$serverParts = explode(':', $cfgMain->mailServer);\n\t\t\t$mailer->Host = $serverParts[0];\n\t\t\t$mailer->Port = $serverParts[1];\n\t\t\tif (!empty($cfgMain->mailUser)) {\n\t\t\t\t$mailer->SMTPAuth = true;\n\t\t\t\t$mailer->Username = $cfgMain->mailUser;\n\t\t\t\t$mailer->Password = $cfgMain->mailPassword;\n\t\t\t\t$mailEncryption = $cfgMain->mailEncryption;\n\t\t\t\tif (empty($mailEncryption) || ($mailEncryption === LAMCfgMain::SMTP_TLS)) {\n\t\t\t\t\t$mailer->SMTPSecure = PHPMailer\\PHPMailer\\PHPMailer::ENCRYPTION_STARTTLS;\n\t\t\t\t}\n\t\t\t\telseif ($mailEncryption === LAMCfgMain::SMTP_SSL) {\n\t\t\t\t\t$mailer->SMTPSecure = PHPMailer\\PHPMailer\\PHPMailer::ENCRYPTION_SMTPS;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$mailer->SMTPAutoTLS = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$mailer->CharSet = PHPMailer\\PHPMailer\\PHPMailer::CHARSET_UTF8;\n\t\tif (is_array($to)) {\n\t\t\tforeach ($to as $toAddress) {\n\t\t\t\t$mailer->addAddress($toAddress);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t$mailer->addAddress($to);\n\t\t}\n\t\t$mailer->Subject = $subject;\n\t\t$mailer->Body = $text;\n\t\t$mailer->Sender = $returnPathParsed[0]['address'];\n\t\t$fromParsed = PHPMailer\\PHPMailer\\PHPMailer::parseAddresses($from);\n\t\t$mailer->setFrom($fromParsed[0]['address'], $fromParsed[0]['name']);\n\t\t$mailer->isHTML($isHTML);\n\t\tif (!empty($replyTo)) {\n\t\t\t$replyToParsed = PHPMailer\\PHPMailer\\PHPMailer::parseAddresses($replyTo);\n\t\t\t$mailer->addReplyTo($replyToParsed[0]['address'], $replyToParsed[0]['name']);\n\t\t}\n\t\tif (!empty($cc)) {\n\t\t\t$ccParsed = PHPMailer\\PHPMailer\\PHPMailer::parseAddresses($cc);\n\t\t\t$mailer->addCC($ccParsed[0]['address'], $ccParsed[0]['name']);\n\t\t}\n\t\tif (!empty($bcc)) {\n\t\t\t$bccParsed = PHPMailer\\PHPMailer\\PHPMailer::parseAddresses($bcc);\n\t\t\t$mailer->addBCC($bccParsed[0]['address'], $bccParsed[0]['name']);\n\t\t}\n\t\t$mailer->XMailer = 'LDAP Account Manager';\n\t\t$mailSentOk = $mailer->send();\n\t\tif (!$mailSentOk) {\n\t\t\tlogNewMessage(LOG_ERR, 'Mail sending failed: ' . $mailer->ErrorInfo);\n\t\t}\n\t\telse {\n\t\t\tlogNewMessage(LOG_DEBUG, 'Mail sent');\n\t\t}\n\t\treturn $mailSentOk;\n\t}\n\tcatch (Exception $e) {\n\t\tlogNewMessage(LOG_ERR, 'Mail sending failed: ' . $e->getMessage());\n\t\treturn false;\n\t}\n}\n\n/**\n * Checks if an email address is safe for use on commandline\n *\n * @param $address email address\n * @return bool is safe\n */\nfunction isCommandlineSafeEmailAddress($address) {\n\t$cmdEscaped = escapeshellcmd($address);\n\t$argEscaped = escapeshellarg($address);\n\tif (($address !== $cmdEscaped) || (\"'$address'\" !== $argEscaped)) {\n\t\treturn false;\n\t}\n\t$addressLength = strlen($address);\n\t$allowedSpecialChars = array('@', '_', '-', '.');\n\tfor ($i = 0; $i < $addressLength; $i++) {\n\t\t$char = $address[$i];\n\t\tif (!ctype_alnum($char) && !in_array($char, $allowedSpecialChars)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n * Caches module objects.\n * This improves performance if the same module does not need to be created multiple times (calling get_metaData() each time).\n *\n * @author Roland Gruber\n */\nclass moduleCache {\n\n\t/** module cache (\"name:scope\" => module) */\n\tprivate static $cache = array();\n\n\t/**\n\t * Returns a new/cached module with the given name and scope.\n\t *\n\t * @param String $name module name\n\t * @param String $scope module scope (e.g. user)\n\t * @return null|object module object\n\t */\n\tpublic static function getModule($name, $scope): ?object {\n\t\tif (!ScopeAndModuleValidation::isValidModuleName($name) || !ScopeAndModuleValidation::isValidScopeName($scope)) {\n\t\t\treturn null;\n\t\t}\n\t\tif (isset(self::$cache[$name . ':' . $scope])) {\n\t\t\treturn self::$cache[$name . ':' . $scope];\n\t\t}\n\t\telse {\n\t\t\tif (!class_exists($name)) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tself::$cache[$name . ':' . $scope] = new $name($scope);\n\t\t\treturn self::$cache[$name . ':' . $scope];\n\t\t}\n\t}\n\n}\n\n/**\n * Returns a random number.\n *\n * @return int random number\n */\nfunction getRandomNumber() {\n\treturn abs(hexdec(bin2hex(openssl_random_pseudo_bytes(5))));\n}\n\n/**\n * Connects to the LDAP server and extracts the certificates.\n *\n * @param String $server server name\n * @param String $port server port\n * @return mixed false on error and certificate if extracted successfully\n */\nfunction getLDAPSSLCertificate($server, $port) {\n\t$stream = @stream_context_create(array(\"ssl\" => array(\"capture_peer_cert_chain\" => true, \"verify_peer\" => false, \"allow_self_signed\" => true)));\n\tif (!$stream) {\n\t\treturn false;\n\t}\n\t$client = @stream_socket_client('ssl://' . $server . ':' . $port, $errno, $errstr, 30, STREAM_CLIENT_CONNECT, $stream);\n\tif (!$client) {\n\t\treturn false;\n\t}\n\t$context = stream_context_get_params($client);\n\tif (!isset($context['options']['ssl']['peer_certificate_chain'])) {\n\t\treturn false;\n\t}\n\t$finalPEM = '';\n\tfor ($i = 0; $i < sizeof($context['options']['ssl']['peer_certificate_chain']); $i++) {\n\t\t$cert = $context['options']['ssl']['peer_certificate_chain'][$i];\n\t\t$pemData = null;\n\t\t$pemResult = @openssl_x509_export($cert, $pemData);\n\t\tif ($pemResult) {\n\t\t\t$finalPEM .= $pemData;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $finalPEM;\n}\n\n/**\n * Returns the extended LDAP error message if any.\n *\n * @param handle $server LDAP server handle\n * @return String error message\n */\nfunction getExtendedLDAPErrorMessage($server) {\n\t$ldapMsg = null;\n\tldap_get_option($server, LDAP_OPT_ERROR_STRING, $ldapMsg);\n\tif (empty($ldapMsg)) {\n\t\treturn ldap_error($server);\n\t}\n\treturn $ldapMsg;\n}\n\n/**\n * Returns the default error message to display on the web page.\n * HTML special characters are already escaped.\n *\n * @param handle $server LDAP server handle\n * @return String error message\n */\nfunction getDefaultLDAPErrorString($server) {\n\t$extError = htmlspecialchars(getExtendedLDAPErrorMessage($server));\n\t// Active Directory message translations\n\tif (strpos($extError, 'DSID') !== false) {\n\t\tif (strpos($extError, '5003') !== false) {\n\t\t\tlogNewMessage(LOG_DEBUG, 'Password change failed because of ' . $extError);\n\t\t\t$extError = _('Your password does not meet the password strength qualifications. Please retry with another one.');\n\t\t}\n\t\telseif (strpos($extError, 'data 530,') !== false) {\n\t\t\tlogNewMessage(LOG_DEBUG, 'Login failed because of ' . $extError);\n\t\t\t$extError = _('Logon not permitted at this time');\n\t\t}\n\t\telseif (strpos($extError, 'data 532,') !== false) {\n\t\t\tlogNewMessage(LOG_DEBUG, 'Login failed because of ' . $extError);\n\t\t\t$extError = _('Password expired');\n\t\t}\n\t\telseif (strpos($extError, 'data 533,') !== false) {\n\t\t\tlogNewMessage(LOG_DEBUG, 'Login failed because of ' . $extError);\n\t\t\t$extError = _('Account is deactivated');\n\t\t}\n\t\telseif (strpos($extError, 'data 701,') !== false) {\n\t\t\tlogNewMessage(LOG_DEBUG, 'Login failed because of ' . $extError);\n\t\t\t$extError = _('Account is expired');\n\t\t}\n\t\telseif (strpos($extError, 'data 773,') !== false) {\n\t\t\tlogNewMessage(LOG_DEBUG, 'Login failed because of ' . $extError);\n\t\t\t$extError = _('Password change required');\n\t\t}\n\t\telseif (strpos($extError, 'data 775,') !== false) {\n\t\t\tlogNewMessage(LOG_DEBUG, 'Login failed because of ' . $extError);\n\t\t\t$extError = _('Account is locked');\n\t\t}\n\t}\n\t$genericErrorMessage = ldap_error($server);\n\t$message = _('LDAP error, server says:') . ' ' . $genericErrorMessage;\n\tif (!empty($extError) && ($genericErrorMessage != $extError)) {\n\t\t$message .= ' - ' . $extError;\n\t}\n\treturn $message;\n}\n\n/**\n * Tries to get additional information why invalid credentials was returned. E.g. account is locked.\n *\n * @param handle $ldap LDAP object to connect for getting extra data\n * @param string $userDn failed DN\n * @return string extra message\n */\nfunction getExtraInvalidCredentialsMessage($ldap, $userDn) {\n\tinclude_once __DIR__ . '/plugins/extendedInvalidCredentials/ExtraInvalidCredentials.inc';\n\t$extraInvalidCredentials = new ExtraInvalidCredentials();\n\treturn $extraInvalidCredentials->getExtraMessage($ldap, $userDn);\n}\n\n/**\n * Returns the URL under which the page was loaded.\n * This includes any GET parameters set.\n *\n * @param $baseUrl base URL (e.g. http://www.example.com)\n * @return String URL\n */\nfunction getCallingURL($baseUrl = '') {\n\t$url = null;\n\tif (!empty($baseUrl) && !empty($_SERVER['REQUEST_URI'])) {\n\t\t$url = $baseUrl . $_SERVER['REQUEST_URI'];\n\t}\n\telseif (!empty($_SERVER['REQUEST_URI']) && !empty($_SERVER['HTTP_HOST'])) {\n\t\t$proto = 'http://';\n\t\tif (!empty($_SERVER['HTTPS']) && ($_SERVER['HTTPS'] != 'off')) {\n\t\t\t$proto = 'https://';\n\t\t}\n\t\t$url = $proto . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];\n\t}\n\telseif (!empty($_SERVER['HTTP_REFERER'])) {\n\t\t$url = $_SERVER['HTTP_REFERER'];\n\t}\n\treturn $url;\n}\n\n/**\n * Returns the offset in hours from configured time zone to GMT.\n *\n * @return int offset\n */\nfunction getTimeZoneOffsetHours() {\n\t$dtz = getTimeZone();\n\treturn round($dtz->getOffset(new DateTime('UTC')) / 3600);\n}\n\n/**\n * Returns the configured time zone.\n *\n * @return DateTimeZone time zone\n */\nfunction getTimeZone() {\n\t$timeZoneName = 'UTC';\n\tif (!empty($_SESSION['config'])) {\n\t\t$timeZoneName = $_SESSION['config']->getTimeZone();\n\t}\n\telseif (!empty($_SESSION['selfServiceProfile']->timeZone)) {\n\t\t$timeZoneName = $_SESSION['selfServiceProfile']->timeZone;\n\t}\n\treturn new DateTimeZone($timeZoneName);\n}\n\n/**\n * Returns the current time in formatted form.\n *\n * @param unknown $format format to use (e.g. 'Y-m-d H:i:s')\n */\nfunction getFormattedTime($format) {\n\t$time = new DateTime('now', getTimeZone());\n\treturn $time->format($format);\n}\n\n/**\n * Formats a number of seconds to a more human readable format with minutes, hours, etc.\n * E.g. 70 seconds will return 1m10s.\n *\n * @param int $numSeconds number of seconds\n * @return String formatted number\n */\nfunction formatSecondsToShortFormat($numSeconds) {\n\tif (($numSeconds === '0') || ($numSeconds === 0)) {\n\t\treturn '0';\n\t}\n\tif (empty($numSeconds)) {\n\t\treturn '';\n\t}\n\tif (!is_numeric($numSeconds)) {\n\t\treturn $numSeconds;\n\t}\n\t$years = '';\n\tif ($numSeconds >= 31536000) {\n\t\t$years = floor($numSeconds / 31536000);\n\t\t$numSeconds = $numSeconds - ($years * 31536000);\n\t\t$years .= 'y';\n\t}\n\t$seconds = $numSeconds % 60;\n\t$seconds = ($seconds == 0) ? '' : $seconds . 's';\n\t$minutes = floor(($numSeconds % 3600) / 60);\n\t$minutes = ($minutes == 0) ? '' : $minutes . 'm';\n\t$hours = floor(($numSeconds % 86400) / 3600);\n\t$hours = ($hours == 0) ? '' : $hours . 'h';\n\t$days = floor(($numSeconds % 604800) / 86400);\n\t$days = ($days == 0) ? '' : $days . 'd';\n\t$weeks = floor($numSeconds / 604800);\n\t$weeks = ($weeks == 0) ? '' : $weeks . 'w';\n\treturn $years . $weeks . $days . $hours . $minutes . $seconds;\n}\n\n/**\n * Unformats text like 1m10s back to number of seconds.\n *\n * @param String $text formatted text\n * @return int number of seconds\n */\nfunction unformatShortFormatToSeconds($text) {\n\tif (empty($text)) {\n\t\treturn $text;\n\t}\n\t$matches = array();\n\tif (preg_match('/^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?$/', $text, $matches)) {\n\t\t$newValue = 0;\n\t\tif (!empty($matches[2])) {\n\t\t\t$newValue += $matches[2] * 31536000;\n\t\t}\n\t\tif (!empty($matches[4])) {\n\t\t\t$newValue += $matches[4] * 604800;\n\t\t}\n\t\tif (!empty($matches[6])) {\n\t\t\t$newValue += $matches[6] * 86400;\n\t\t}\n\t\tif (!empty($matches[8])) {\n\t\t\t$newValue += $matches[8] * 3600;\n\t\t}\n\t\tif (!empty($matches[10])) {\n\t\t\t$newValue += $matches[10] * 60;\n\t\t}\n\t\tif (!empty($matches[12])) {\n\t\t\t$newValue += $matches[12];\n\t\t}\n\t\treturn $newValue;\n\t}\n\treturn $text;\n}\n\n/**\n * Checks if the user is logged in. Stops script execution if not.\n *\n * @param boolean $check2ndFactor check if the 2nd factor was provided if required\n */\nfunction enforceUserIsLoggedIn($check2ndFactor = true) {\n\tif ((!isset($_SESSION['loggedIn']) || ($_SESSION['loggedIn'] !== true)) && empty($_SESSION['selfService_clientPassword'])) {\n\t\tlogNewMessage(LOG_WARNING, 'Detected unauthorized access to page that requires login: ' . $_SERVER[\"SCRIPT_FILENAME\"]);\n\t\tdie();\n\t}\n\tif ($check2ndFactor && isset($_SESSION['2factorRequired'])) {\n\t\tlogNewMessage(LOG_WARNING, 'Detected unauthorized access to page that requires login (2nd factor not provided): ' . $_SERVER[\"SCRIPT_FILENAME\"]);\n\t\tdie();\n\t}\n}\n\n/**\n * Prints the content of the header part.\n *\n * @param string $title page title\n * @param string $prefix prefix to LAM main folder (e.g. \"..\")\n */\nfunction printHeaderContents($title, $prefix) {\n\techo '<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">';\n\techo '<title>';\n\techo $title;\n\techo \"</title>\\n\";\n\t// include CSS files\n\t$cssDirName = dirname(__FILE__) . '/../style';\n\t$cssDir = dir($cssDirName);\n\t$cssFiles = array();\n\t$cssEntry = $cssDir->read();\n\twhile ($cssEntry !== false) {\n\t\tif (substr($cssEntry, strlen($cssEntry) - 4, 4) == '.css') {\n\t\t\t$cssFiles[] = $cssEntry;\n\t\t}\n\t\t$cssEntry = $cssDir->read();\n\t}\n\tsort($cssFiles);\n\tforeach ($cssFiles as $cssEntry) {\n\t\techo \"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"$prefix/style/$cssEntry\\\">\\n\";\n\t}\n\techo '<link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"' . $prefix . '/graphics/favicon.ico\">';\n\techo '<link rel=\"icon\" href=\"' . $prefix . '/graphics/logo136.png\">';\n}\n\n/**\n * Prints script tags for all LAM JS files.\n *\n * @param string $prefix prefix to LAM main folder (e.g. \"..\")\n */\nfunction printJsIncludes($prefix) {\n\t$jsDirName = dirname(__FILE__) . '/../templates/lib';\n\t$jsDir = dir($jsDirName);\n\t$jsFiles = array();\n\t$jsEntry = $jsDir->read();\n\twhile ($jsEntry !== false) {\n\t\tif ((substr($jsEntry, strlen($jsEntry) - 3, 3) == '.js') || (substr($jsEntry, strlen($jsEntry) - 4, 4) == '.php')) {\n\t\t\t$jsFiles[] = $jsEntry;\n\t\t}\n\t\t$jsEntry = $jsDir->read();\n\t}\n\tsort($jsFiles);\n\tforeach ($jsFiles as $jsEntry) {\n\t\techo \"<script type=\\\"text/javascript\\\" src=\\\"$prefix/templates/lib/\" . $jsEntry . \"\\\"></script>\\n\";\n\t}\n}\n\n/**\n * Converts an UTF-8 string to UTF16LE.\n *\n * @param string $input UTF-8 value\n */\nfunction convertUtf8ToUtf16Le($input) {\n\tif (($input == null) || (strlen($input) == 0)) {\n\t\treturn $input;\n\t}\n\t$output = iconv('UTF-8', 'UTF-16LE', $input);\n\tif (($output === false) || ($output == '')) {\n\t\t$output = mb_convert_encoding($input, 'UTF-8', 'UTF-16LE');\n\t}\n\treturn $output;\n}\n\n/**\n * Returns the text with LAM and its version for header area.\n *\n * @return string LAM version text\n */\nfunction getLAMVersionText() {\n\t$text = 'LDAP Account Manager';\n\tif (isLAMProVersion()) {\n\t\t$text .= ' Pro';\n\t}\n\treturn $text . ' - ' . LAMVersion();\n}\n\n/**\n * Returns if the given release is a developer version.\n *\n * @param string version\n * @return bool is developer version\n */\nfunction isDeveloperVersion($version) {\n\treturn strpos($version, 'DEV') !== false;\n}\n\n/**\n * LAM exception with title and message.\n *\n * @author Roland Gruber\n */\nclass LAMException extends Exception {\n\n\tprivate $title;\n\t\n\tprivate $ldapErrorCode;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param string $title title\n\t * @param string $message message (optional)\n\t * @param Exception $cause (optional)\n\t * @param int $ldapErrorCode original LDAP error code\n\t */\n\tpublic function __construct($title, $message = null, $cause = null, $ldapErrorCode = null) {\n\t\tparent::__construct($message, null, $cause);\n\t\t$this->title = $title;\n\t\t$this->ldapErrorCode = $ldapErrorCode;\n\t}\n\n\t/**\n\t * Returns the message title.\n\t *\n\t * @return string title\n\t */\n\tpublic function getTitle() {\n\t\treturn $this->title;\n\t}\n\n\t/**\n\t * Returns the original LDAP error code.\n\t *\n\t * @return int error code\n\t */\n\tpublic function getLdapErrorCode() {\n\t\treturn $this->ldapErrorCode;\n\t}\n\n}\n", "<?php\nuse \\LAM\\LIB\\TWO_FACTOR\\TwoFactorProviderService;\nuse LAM\\PDF\\PdfStructurePersistenceManager;\nuse LAM\\PERSISTENCE\\ConfigurationDatabase;\nuse LAM\\PROFILES\\AccountProfilePersistenceManager;\nuse \\LAM\\REMOTE\\RemoteServerConfiguration;\nuse LAM\\TYPES\\TypeManager;\nuse function LAM\\PERSISTENCE\\dbTableExists;\n\n/*\n\n  This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)\n  Copyright (C) 2003 - 2022  Roland Gruber\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n\n*/\n\n/**\n* This file includes functions to manage the configuration files.\n*\n* @package configuration\n* @author Roland Gruber\n* @author Thomas Manninger\n*/\n\n/** persistence */\ninclude_once 'persistence.inc';\n/** Used to print messages. */\ninclude_once \"status.inc\";\n/** Used to get module information. */\ninclude_once \"modules.inc\";\n/** Used to get type information. */\ninclude_once \"types.inc\";\n/** 2-factor */\ninclude_once '2factor.inc';\n\n/**\n * Sets the environment variables for custom SSL CA certificates.\n */\nfunction setSSLCaCert() {\n\t$config = null;\n\tif (isset($_SESSION['cfgMain'])) {\n\t\t$config = $_SESSION['cfgMain'];\n\t}\n\telse {\n\t\t$config = new LAMCfgMain();\n\t}\n\t// set SSL certificate if set\n\t$sslCaPath = $config->getSSLCaCertPath();\n\tif ($sslCaPath != null) {\n\t\tputenv('LDAPTLS_CACERT=' . $sslCaPath);\n\t\tputenv('TLS_CACERT=' . $sslCaPath);\n\t}\n}\n\n/**\n* Sets language settings for automatic translation\n*/\nfunction setlanguage() {\n\t$code = 'en_GB.utf8';\n\t$fallbackCode = 'en_GB.UTF-8';\n\t$encoding = 'UTF-8';\n\tif (!isset($_SESSION['language'])) {\n\t\t$_SESSION['language'] = \"en_GB.utf8\";\n\t}\n\t$possibleLanguages = getLanguages();\n\tforeach ($possibleLanguages as $lang) {\n\t\tif ($lang->code == $_SESSION['language']) {\n\t\t\t$code = $lang->code;\n\t\t\t$fallbackCode = str_replace('utf8', 'UTF-8', $code);\n\t\t\t$encoding = $lang->encoding;\n\t\t\tbreak;\n\t\t}\n\t}\n\tputenv(\"LANG=$code\");  // e.g. LANG=de_DE\n\tputenv(\"LC_ALL=$code\");\n\tputenv(\"LC_LANG=$code\");\n\tputenv(\"LC_LANGUAGE=$code\");\n\t$setLocaleResult = setlocale(LC_ALL, array($code, $fallbackCode));  // set LC_ALL\n\tif ($setLocaleResult === false) {\n\t\tlogNewMessage(LOG_WARNING, \"Unable to set locale, check if 'locale -a' returns $code\");\n\t}\n\t$locdir = substr(__FILE__, 0, strlen(__FILE__) - 15) . \"/locale\";  // set path to translations\n\tbindtextdomain(\"messages\", $locdir);\n\t$bindTextResult = bind_textdomain_codeset(\"messages\", $encoding);\n\tif (!is_string($bindTextResult)) {\n\t\tlogNewMessage(LOG_WARNING, \"Unable to bind text domain, check if 'locale -a' returns $code\");\n\t}\n\t$textDomainResult = textdomain(\"messages\");\n\tif (!is_string($textDomainResult)) {\n\t\tlogNewMessage(LOG_WARNING, \"Unable to set text domain, check if 'locale -a' returns $code\");\n\t}\n\theader(\"Content-type: text/html; charset=\" . $encoding, true);\n}\n\n/**\n * Checks whether a specific flag in the rights string is set.\n *\n * @param string $right read, write or execute\n * @param string $target owner, group or other\n * @param string $chmod the chmod rights\n *\n * @return true, if the chmod $right for $target were set\n */\nfunction checkChmod($right, $target, $chmod) {\n\t$right_arr = array(\"read\",\"write\",\"execute\");\n\t$target_arr = array(\"owner\",\"group\",\"other\");\n\n\t// Check, if $right and $target has right parameters\n\tif (!in_array($right, $right_arr) ||!in_array($target, $target_arr)) {\n\t\treturn false;\n\t}\n\n\t$chmod_num = -1;\n\t// owner:\n\tif ($target == \"owner\") {\n\t\t$chmod_num = 0;\n\t}\n\tif ($target == \"group\") {\n\t\t$chmod_num = 1;\n\t}\n\tif ($target == \"other\") {\n\t\t$chmod_num = 2;\n\t}\n\n\t// Cut the number from the chmod:\n\t$chmod_num = $chmod[$chmod_num];\n\n\t// Now check, if the chmod_num can be right with the $right\n\t// What numbers allow \"read\"\n\t$read = array(4,5,6,7);\n\t// What numbers allow \"write\"\n\t$write = array(2,3,6,7);\n\t// What numbers allow \"execute\"\n\t$execute = array(1,3,5,7);\n\tif ((($right == \"read\") && in_array($chmod_num, $read))\n\t\t\t|| (($right == \"write\") && in_array($chmod_num, $write))\n\t\t\t|| (($right == \"execute\") && in_array($chmod_num, $execute))) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n/**\n* Returns the version number of this LAM installation.\n* Format: <major version>.<minor version>.<patch level>\n* <br> Major/minor version are always numbers, patch level may contain letters for unofficial releases only (e.g. 0.5.alpha1).\n*\n* @return string version number\n*/\nfunction LAMVersion() {\n\t$file = substr(__FILE__, 0, strlen(__FILE__) - 15) . \"/VERSION\";\n\tif (is_readable($file)) {\n\t\t$handle = fopen($file, \"r\");\n\t\tif (!feof($handle)) {\n\t\t\treturn trim(fgets($handle, 20));\n\t\t}\n\t}\n\t// file was not readable\n\treturn '0.0.unknown';\n}\n\n/**\n * Extracts config options from HTTP POST data.\n *\n * @param array $confTypes array (option name => type (e.g. multiselect))\n * @return array list of config options (name => array(values))\n */\nfunction extractConfigOptionsFromPOST($confTypes) {\n\t$options = array();\n\tforeach ($confTypes as $element => $type) {\n\t\t// text fields\n\t\tif ($type == \"text\") {\n\t\t\t$options[$element] = array($_POST[$element]);\n\t\t}\n\t\t// text fields\n\t\telseif ($type == \"text_obfuscated\") {\n\t\t\t$options[$element] = array(obfuscateText($_POST[$element]));\n\t\t}\n\t\t// hidden fields\n\t\telseif ($type == \"hidden\") {\n\t\t\t$options[$element] = array($_POST[$element]);\n\t\t}\n\t\t// checkboxes\n\t\telseif ($type == \"checkbox\") {\n\t\t\tif (isset($_POST[$element]) && ($_POST[$element] == \"on\")) {\n\t\t\t\t$options[$element] = array('true');\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$options[$element] = array('false');\n\t\t\t}\n\t\t}\n\t\t// dropdownbox\n\t\telseif ($type == \"select\") {\n\t\t\t$options[$element] = array($_POST[$element]);\n\t\t}\n\t\t// multiselect\n\t\telseif ($type == \"multiselect\") {\n\t\t\t$options[$element] = $_POST[$element];  // value is already an array\n\t\t}\n\t\t// textarea\n\t\telseif ($type == \"textarea\") {\n\t\t\t$options[$element] = explode(\"\\r\\n\", $_POST[$element]);\n\t\t}\n\t}\n\treturn $options;\n}\n\n\n/**\n* Prints a meta refresh page\n*\n* @param string $page the URL of the target page\n*/\nfunction metaRefresh($page) {\n\tif (!headers_sent()) {\n\t\theader('Location: ' . $page);\n\t\treturn;\n\t}\n\tif (isset($_SESSION['header'])) {\n\t\techo $_SESSION['header'];\n\t}\n\telse {\n\t\techo '<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">';\n\t\techo \"<html><head>\\n\";\n\t}\n\techo \"<meta http-equiv=\\\"refresh\\\" content=\\\"0; URL=\" . $page . \"\\\">\\n\";\n\techo \"<title></title>\\n\";\n\techo \"</head>\\n\";\n\techo \"<body>\\n\";\n\t// print link if refresh does not work\n\techo \"<p>\\n\";\n\techo \"<a href=\\\"\" . $page . \"\\\">\" . _(\"Click here if you are not directed to the next page.\") . \"</a>\\n\";\n\techo \"</p>\\n\";\n\techo \"</body>\\n\";\n\techo \"</html>\\n\";\n}\n\n/**\n * Checks if the given account type is hidden.\n *\n * @param String $type account type (e.g. user)\n * @return boolean is hidden\n */\nfunction isAccountTypeHidden($type) {\n\t$typeSettings = $_SESSION['config']->get_typeSettings();\n\treturn isset($typeSettings['hidden_' . $type]) && ($typeSettings['hidden_' . $type]);\n}\n\n/**\n * Returns a list of all supported languages.\n *\n * @return LAMLanguage[] languages\n */\nfunction getLanguages() {\n\t$languages = array();\n\t// loading available languages from language.conf file\n\t$languagefile = dirname(__FILE__) . \"/../config/language\";\n\tif(is_file($languagefile)) {\n\t\t$file = fopen($languagefile, \"r\");\n\t\twhile(!feof($file)) {\n\t\t\t$line = fgets($file, 1024);\n\t\t\tif($line == \"\" || $line == \"\\n\" || $line[0] == \"#\") {\n\t\t\t\tcontinue; // ignore comment and empty lines\n\t\t\t}\n\t\t\t$value = explode(\":\", $line);\n\t\t\t$languages[] = new LAMLanguage($value[0], $value[1], $value[2]);\n\t\t}\n\t\tfclose($file);\n\t}\n\treturn $languages;\n}\n\n/**\n * Represents a supported language.\n *\n * @package configuration\n */\nclass LAMLanguage {\n\t/** language code (e.g. en_GB.utf8) */\n\tpublic $code;\n\t/** character encoding (e.g. UTF-8) */\n\tpublic $encoding;\n\t/** description for GUI */\n\tpublic $description;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param String $code language code (e.g. en_GB.utf8)\n\t * @param String $encoding character encoding (e.g. UTF-8)\n\t * @param String $description description for GUI\n\t */\n\tpublic function __construct($code, $encoding, $description) {\n\t\t$this->code = $code;\n\t\t$this->encoding = $encoding;\n\t\t$this->description = $description;\n\t}\n\n}\n\n/**\n * Manages the persistence of server profiles.\n */\nclass ServerProfilePersistenceManager {\n\n\t/**\n\t * @var ServerProfilePersistenceStrategy\n\t */\n\tprivate $strategy;\n\n\tpublic function __construct() {\n\t\t$configDb = new ConfigurationDatabase(new LAMCfgMain());\n\t\tif ($configDb->useRemoteDb()) {\n\t\t\t$this->strategy = new ServerProfilePersistenceStrategyPdo($configDb->getPdo());\n\t\t}\n\t\telse {\n\t\t\t$this->strategy = new ServerProfilePersistenceStrategyFiles();\n\t\t}\n\t}\n\n\t/**\n\t * Returns a lis of available server profiles.\n\t *\n\t * @return string[] list of server profile names\n\t * @throws LAMException error listing profiles\n\t */\n\tpublic function getProfiles() : array {\n\t\treturn $this->strategy->getProfiles();\n\t}\n\n\t/**\n\t * Loads the given server profile\n\t *\n\t * @param string $name profile name\n\t * @return LAMConfig profile\n\t * @throws LAMException error loading profile\n\t */\n\tpublic function loadProfile(string $name) : LAMConfig {\n\t\t$config = $this->strategy->loadProfile($name);\n\t\t$config->setName($name);\n\t\treturn $config;\n\t}\n\n\t/**\n\t * Saves a server profile.\n\t *\n\t * @param LAMConfig $profile profile\n\t * @param $name profile name\n\t * @throws LAMException error saving profile\n\t */\n\tpublic function saveProfile(LAMConfig $profile, $name) : void {\n\t\t$this->strategy->saveProfile($profile, $name);\n\t}\n\n\t/**\n\t * Returns an array of string with all available configuration templates (without .sample.conf)\n\t *\n\t * @return array template names\n\t */\n\tfunction getConfigTemplates() : array {\n\t\t$dir = dir(__DIR__ . \"/../config\");\n\t\t$ret = array();\n\t\t$pos = 0;\n\t\twhile ($entry = $dir->read()){\n\t\t\t$ext = substr($entry, strlen($entry)-12, 12);\n\t\t\t$name = substr($entry, 0, strlen($entry) - 12);\n\t\t\t// check if extension is right, add to profile list\n\t\t\tif ($ext == \".sample.conf\") {\n\t\t\t\t$ret[$pos] = $name;\n\t\t\t\t$pos ++;\n\t\t\t}\n\t\t}\n\t\tsort($ret);\n\t\treturn $ret;\n\t}\n\n\t/**\n\t * Creates a new server profile using a template/existing profile.\n\t *\n\t * @param string $name profile name\n\t * @param string $templateName template name\n\t * @param string $password new profile password\n\t * @throws LAMException error saving profile\n\t */\n\tpublic function createProfileFromTemplate(string $name, string $templateName, string $password) : void {\n\t\tif (!LAMConfig::isValidName($name) || !preg_match(\"/^[a-z0-9\\\\._-]+$/i\", $templateName) || in_array($name, $this->getProfiles())) {\n\t\t\tthrow new LAMException(_(\"Profile name is invalid!\"));\n\t\t}\n\t\t$copyFromTemplate = true;\n\t\t$existingTemplateNames = $this->getConfigTemplates();\n\t\tif (strpos($templateName, '.sample') !== false) {\n\t\t\t$templateNameShort = str_replace('.sample', '', $templateName);\n\t\t\tif (!in_array($templateNameShort, $existingTemplateNames)) {\n\t\t\t\tthrow new LAMException(_(\"Profile name is invalid!\"));\n\t\t\t}\n\t\t\t// built-in templates are loaded via file system\n\t\t\t$filesStrategy = new ServerProfilePersistenceStrategyFiles();\n\t\t\t$config = $filesStrategy->loadProfile($templateName);\n\t\t}\n\t\telse {\n\t\t\t$copyFromTemplate = false;\n\t\t\t$config = $this->loadProfile($templateName);\n\t\t}\n\t\t$config->set_Passwd($password);\n\t\t$this->saveProfile($config, $name);\n\t\t$accountProfilePersistenceManager = new AccountProfilePersistenceManager();\n\t\t$pdfStructurePersistenceManager = new PdfStructurePersistenceManager();\n\t\tif (!$copyFromTemplate) {\n\t\t\t$typeManager = new TypeManager($config);\n\t\t\tforeach ($typeManager->getConfiguredTypes() as $type) {\n\t\t\t\t$profilesToCopy = $accountProfilePersistenceManager->getAccountProfileNames($type->getId(), $templateName);\n\t\t\t\tforeach ($profilesToCopy as $profileToCopy) {\n\t\t\t\t\t$profile = $accountProfilePersistenceManager->loadAccountProfile($type->getId(), $profileToCopy, $templateName);\n\t\t\t\t\t$accountProfilePersistenceManager->writeAccountProfile($type->getId(), $profileToCopy, $name, $profile);\n\t\t\t\t}\n\t\t\t\t$structuresToCopy = $pdfStructurePersistenceManager->getPDFStructures($templateName, $type->getId());\n\t\t\t\tforeach ($structuresToCopy as $structureToCopy) {\n\t\t\t\t\t$structure = $pdfStructurePersistenceManager->readPdfStructure($templateName, $type->getId(), $structureToCopy);\n\t\t\t\t\t$pdfStructurePersistenceManager->savePdfStructure($name, $type->getId(), $structureToCopy, $structure);\n\t\t\t\t}\n\t\t\t\t$logosToCopy = $pdfStructurePersistenceManager->getPdfLogos($templateName);\n\t\t\t\tforeach ($logosToCopy as $logoToCopy) {\n\t\t\t\t\t$binary = $pdfStructurePersistenceManager->getPdfLogoBinary($templateName, $logoToCopy->getName());\n\t\t\t\t\t$pdfStructurePersistenceManager->savePdfLogo($name, $logoToCopy->getName(), $binary);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$accountProfilePersistenceManager->installAccountProfileTemplates($name);\n\t\t$pdfStructurePersistenceManager->installPDFTemplates($name);\n\t}\n\n\t/**\n\t * Renames an existing server profile.\n\t *\n\t * @param string $oldName old profile name\n\t * @param string $newName new profile name\n\t * @throws LAMException error during rename\n\t */\n\tpublic function renameProfile(string $oldName, string $newName) : void {\n\t\t$this->strategy->renameProfile($oldName, $newName);\n\t\t// update default profile setting if needed\n\t\t$mainConfig = new LAMCfgMain();\n\t\tif ($mainConfig->default == $oldName) {\n\t\t\t$mainConfig->default = $newName;\n\t\t\t$mainConfig->save();\n\t\t}\n\t}\n\n\t/**\n\t * Deletes a server profile.\n\t *\n\t * @param string $name profile name\n\t * @throws LAMException error deleting profile\n\t */\n\tpublic function deleteProfile(string $name) : void {\n\t\t$this->strategy->deleteProfile($name);\n\t}\n\n\t/**\n\t * Returns if the configuration is writable.\n\t *\n\t * @param string $name profile name\n\t * @return bool is writable\n\t */\n\tpublic function isWritable(string $name) : bool {\n\t\treturn $this->strategy->isWritable($name);\n\t}\n\n}\n\n/**\n * Interface to store server profiles.\n */\ninterface ServerProfilePersistenceStrategy {\n\n\t/**\n\t * Returns a lis of available server profiles.\n\t *\n\t * @return string[] list of server profile names\n\t * @throws LAMException error listing profiles\n\t */\n\tpublic function getProfiles() : array;\n\n\t/**\n\t * Loads the given server profile\n\t *\n\t * @param string $name profile name\n\t * @return LAMConfig profile\n\t * @throws LAMException error loading profile\n\t */\n\tpublic function loadProfile(string $name) : LAMConfig;\n\n\t/**\n\t * Saves a server profile.\n\t *\n\t * @param LAMConfig $profile profile\n\t * @param string $name profile name\n\t * @throws LAMException error saving profile\n\t */\n\tpublic function saveProfile(LAMConfig $profile, string $name) : void;\n\n\t/**\n\t * Renames an existing server profile.\n\t *\n\t * @param string $oldName old profile name\n\t * @param string $newName new profile name\n\t * @throws LAMException error saving profile\n\t */\n\tpublic function renameProfile(string $oldName, string $newName) : void;\n\n\t/**\n\t * Deletes a server profile.\n\t *\n\t * @param string $name profile name\n\t * @throws LAMException error deleting profile\n\t */\n\tpublic function deleteProfile(string $name) : void;\n\n\t/**\n\t * Returns if the configuration is writable.\n\t *\n\t * @param string $name profile name\n\t * @return bool is writable\n\t */\n\tpublic function isWritable(string $name) : bool;\n\n}\n\n/**\n * Uses local file system to store server profiles.\n */\nclass ServerProfilePersistenceStrategyFiles implements ServerProfilePersistenceStrategy {\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getProfiles(): array {\n\t\t$dirName = __DIR__ . \"/../config\";\n\t\t$dir = dir($dirName);\n\t\t$ret = array();\n\t\twhile ($entry = $dir->read()) {\n\t\t\t$ext = substr($entry, strlen($entry) - 5, 5);\n\t\t\t$name = substr($entry, 0, strlen($entry) - 5);\n\t\t\t// check if extension is right, add to profile list\n\t\t\tif (($ext == \".conf\") && (strpos($name, '.sample') === false) && is_readable($dirName . '/' . $entry)) {\n\t\t\t\t$ret[] = $name;\n\t\t\t}\n\t\t}\n\t\tsort($ret);\n\t\treturn $ret;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function loadProfile(string $name): LAMConfig {\n\t\t$config = new LAMConfig();\n\t\t$reflectionConfig = new ReflectionObject($config);\n\t\t$confFilePath = $this->getPath($name);\n\t\tif (!is_file($confFilePath)) {\n\t\t\tthrow new LAMException(_('Unable to read file.'));\n\t\t}\n\t\t$file = @fopen($confFilePath, \"r\");\n\t\tif (!$file) {\n\t\t\tthrow new LAMException(_('Unable to read file.'));\n\t\t}\n\t\t$moduleSettings = array();\n\t\t$typeSettings = array();\n\t\t$toolSettings = array();\n\t\t$jobSettings = array();\n\t\twhile (!feof($file)) {\n\t\t\t$line = fgets($file, 1000000);\n\t\t\t$line = trim($line);  // remove spaces at the beginning and end\n\t\t\tif (($line == \"\")||($line[0] == \"#\")) {\n\t\t\t\tcontinue; // ignore comments and empty lines\n\t\t\t}\n\t\t\t// search keywords\n\t\t\t$parts = explode(': ', $line);\n\t\t\t$keyword = $parts[0];\n\t\t\t$startIndex = strlen($keyword) + 2;\n\t\t\tif (sizeof($parts) == 1) {\n\t\t\t\t// empty global settings\n\t\t\t\ttry {\n\t\t\t\t\t$property = $reflectionConfig->getProperty($keyword);\n\t\t\t\t\t$property->setAccessible(true);\n\t\t\t\t\t$property->setValue($config, '');\n\t\t\t\t} catch (ReflectionException $e) {\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif ((sizeof($parts) > 1) && !in_array($keyword, array('modules', 'types', 'tools', 'jobs'))) {\n\t\t\t\t// global setting with value\n\t\t\t\ttry {\n\t\t\t\t\t$property = $reflectionConfig->getProperty($keyword);\n\t\t\t\t\t$property->setAccessible(true);\n\t\t\t\t\t$property->setValue($config, substr($line, $startIndex));\n\t\t\t\t} catch (ReflectionException $e) {\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$subKeyword = $parts[1];\n\t\t\t\t$startIndex = $startIndex + strlen($subKeyword) + 2;\n\t\t\t\t$option = substr($line, $startIndex);\n\t\t\t\tif (empty($option)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// module settings\n\t\t\t\tif ($keyword == 'modules') {\n\t\t\t\t\t$moduleSettings[$subKeyword] = explode(LAMConfig::LINE_SEPARATOR, $option);\n\t\t\t\t}\n\t\t\t\t// type settings\n\t\t\t\tif ($keyword == 'types') {\n\t\t\t\t\t$typeSettings[$subKeyword] = $option;\n\t\t\t\t}\n\t\t\t\t// tool settings\n\t\t\t\tif ($keyword == 'tools') {\n\t\t\t\t\t$toolSettings[$subKeyword] = $option;\n\t\t\t\t}\n\t\t\t\t// job settings\n\t\t\t\tif ($keyword == 'jobs') {\n\t\t\t\t\t$jobSettings[$subKeyword] = explode(LAMConfig::LINE_SEPARATOR, $option);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfclose($file);\n\t\t$config->set_moduleSettings($moduleSettings);\n\t\t$config->set_typeSettings($typeSettings);\n\t\t$config->setToolSettings($toolSettings);\n\t\t$config->setJobSettings($jobSettings);\n\t\t$config->removeInvalidTypes();\n\t\t$config->removeInvalidModules();\n\t\treturn $config;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function saveProfile(LAMConfig $profile, string $name): void {\n\t\t$confFile = $this->getPath($name);\n\t\tif (!file_exists($confFile)) {\n\t\t\t$newFile = fopen($confFile, 'wb');\n\t\t\tfclose($newFile);\n\t\t}\n\t\tif (is_file($confFile) && is_readable($confFile)) {\n\t\t\t$file_array = array();\n\t\t\t$file_array[] = \"\\n\" . \"ServerURL: \" . $profile->get_ServerURL() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"serverDisplayName: \" . $profile->getServerDisplayName() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"useTLS: \" . $profile->getUseTLS() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"followReferrals: \" . $profile->getFollowReferrals() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"pagedResults: \" . $profile->getPagedResults() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"referentialIntegrityOverlay: \" . $profile->getReferentialIntegrityOverlay() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"hidePasswordPromptForExpiredPasswords: \" . $profile->getHidePasswordPromptForExpiredPasswords() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"Passwd: \" . $profile->getPasswd() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"Admins: \" . $profile->get_Adminstring() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"defaultLanguage: \" . $profile->get_defaultLanguage() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"timeZone: \" . $profile->getTimeZone() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"scriptPath: \" . $profile->get_scriptPath() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"scriptServer: \" . $profile->get_scriptServers() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"scriptRights: \" . $profile->get_scriptRights() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"scriptUserName: \" . $profile->getScriptUserName() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"scriptSSHKey: \" . $profile->getScriptSSHKey() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"scriptSSHKeyPassword: \" . $profile->getScriptSSHKeyPassword() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"searchLimit: \" . $profile->get_searchLimit() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"activeTypes: \" . $profile->getActiveTypesString() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"accessLevel: \" . $profile->getAccessLevel() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"loginMethod: \" . $profile->getLoginMethod() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"loginSearchSuffix: \" . $profile->getLoginSearchSuffix() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"loginSearchFilter: \" . $profile->getLoginSearchFilter() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"loginSearchDN: \" . $profile->getLoginSearchDN() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"loginSearchPassword: \" . $profile->getLoginSearchPassword() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"httpAuthentication: \" . $profile->getHttpAuthentication() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"lamProMailFrom: \" . $profile->getLamProMailFrom() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"lamProMailReplyTo: \" . $profile->getLamProMailReplyTo() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"lamProMailSubject: \" . $profile->getLamProMailSubject() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"lamProMailIsHTML: \" . $profile->getLamProMailIsHTML() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"lamProMailAllowAlternateAddress: \" . $profile->getLamProMailAllowAlternateAddress() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"lamProMailText: \" . $profile->getLamProMailTextRaw() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"jobsBindPassword: \" . $profile->getJobsBindPassword() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"jobsBindUser: \" . $profile->getJobsBindUser() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"jobsDatabase: \" . $profile->getJobsDatabase() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"jobsDBHost: \" . $profile->getJobsDBHost() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"jobsDBPort: \" . $profile->getJobsDBPort() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"jobsDBUser: \" . $profile->getJobsDBUser() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"jobsDBPassword: \" . $profile->getJobsDBPassword() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"jobsDBName: \" . $profile->getJobsDBName() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"jobToken: \" . $profile->getJobToken() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"pwdResetAllowSpecificPassword: \" . $profile->getPwdResetAllowSpecificPassword() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"pwdResetAllowScreenPassword: \" . $profile->getPwdResetAllowScreenPassword() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"pwdResetForcePasswordChange: \" . $profile->getPwdResetForcePasswordChange() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"pwdResetDefaultPasswordOutput: \" . $profile->getPwdResetDefaultPasswordOutput() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"twoFactorAuthentication: \" . $profile->getTwoFactorAuthentication() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"twoFactorAuthenticationURL: \" . $profile->getTwoFactorAuthenticationURLRaw() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"twoFactorAuthenticationClientId: \" . $profile->getTwoFactorAuthenticationClientId() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"twoFactorAuthenticationSecretKey: \" . $profile->getTwoFactorAuthenticationSecretKey() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"twoFactorAuthenticationDomain: \" . $profile->getTwoFactorAuthenticationDomain() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"twoFactorAuthenticationInsecure: \" . $profile->getTwoFactorAuthenticationInsecure() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"twoFactorAuthenticationLabel: \" . $profile->getTwoFactorAuthenticationLabel() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"twoFactorAuthenticationOptional: \" . $profile->getTwoFactorAuthenticationOptional() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"twoFactorAuthenticationCaption: \" . $profile->getTwoFactorAuthenticationCaption() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"twoFactorAuthenticationAttribute: \" . $profile->getTwoFactorAuthenticationAttribute() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"hideDnPart: \" . $profile->getHideDnPart() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"pwdPolicyMinLength: \" . $profile->getPwdPolicyMinLength() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"pwdPolicyMinLowercase: \" . $profile->getPwdPolicyMinLowercase() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"pwdPolicyMinUppercase: \" . $profile->getPwdPolicyMinUppercase() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"pwdPolicyMinNumeric: \" . $profile->getPwdPolicyMinNumeric() . \"\\n\";\n\t\t\t$file_array[] = \"\\n\" . \"pwdPolicyMinSymbolic: \" . $profile->getPwdPolicyMinSymbolic() . \"\\n\";\n\t\t\t// module settings\n\t\t\t$moduleSettings = $profile->get_moduleSettings();\n\t\t\tforeach ($moduleSettings as $moduleSettingKey => $moduleSettingValue) {\n\t\t\t\t$file_array[] = \"modules: \" . $moduleSettingKey . \": \" . implode(LAMConfig::LINE_SEPARATOR, $moduleSettingValue) . \"\\n\";\n\t\t\t}\n\t\t\t// type settings\n\t\t\t$typeSettings = $profile->get_typeSettings();\n\t\t\tforeach ($typeSettings as $typeSettingKey => $typeSettingValue) {\n\t\t\t\t$file_array[] = \"types: \" . $typeSettingKey . \": \" . $typeSettingValue . \"\\n\";\n\t\t\t}\n\t\t\t// tool settings\n\t\t\t$toolSettings = $profile->getToolSettings();\n\t\t\tforeach ($toolSettings as $toolSettingKey => $toolSettingValue) {\n\t\t\t\t$file_array[] = \"tools: \" . $toolSettingKey . \": \" . $toolSettingValue . \"\\n\";\n\t\t\t}\n\t\t\t// job settings\n\t\t\t$jobSettings = $profile->getJobSettings();\n\t\t\tforeach ($jobSettings as $jobSettingKey => $jobSettingValue) {\n\t\t\t\t$file_array[] = \"jobs: \" . $jobSettingKey . \": \" . implode(LAMConfig::LINE_SEPARATOR, $jobSettingValue) . \"\\n\";\n\t\t\t}\n\t\t\t$file = @fopen($confFile, \"w\");\n\t\t\tif ($file) {\n\t\t\t\tforeach ($file_array as $line) {\n\t\t\t\t\tfputs($file, $line);\n\t\t\t\t}\n\t\t\t\tfclose($file);\n\t\t\t\t@chmod($confFile, 0600);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new LAMException(_('Unable to save server profile.'), $name);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function renameProfile(string $oldName, string $newName): void {\n\t\t$existingProfileNames = $this->getProfiles();\n\t\tif (!LAMConfig::isValidName($oldName)\n\t\t\t|| !LAMConfig::isValidName($newName)\n\t\t\t|| in_array($newName, $existingProfileNames)) {\n\t\t\tthrow new LAMException(_(\"Profile name is invalid!\"));\n\t\t}\n\t\tif (rename(\"../../config/\" . $oldName . \".conf\", \"../../config/\" . $newName . \".conf\")) {\n\t\t\t// rename pdf and profiles folder\n\t\t\trename(\"../../config/profiles/\" . $oldName, \"../../config/profiles/\" . $newName);\n\t\t\trename(\"../../config/pdf/\" . $oldName, \"../../config/pdf/\" . $newName);\n\t\t\t// rename sqlite database if any\n\t\t\tif (file_exists(\"../../config/\" . $oldName . \".sqlite\")) {\n\t\t\t\trename(\"../../config/\" . $oldName . \".sqlite\", \"../../config/\" . $newName . \".sqlite\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow new LAMException(_(\"Could not rename file!\"));\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function deleteProfile(string $name): void {\n\t\tif (!LAMConfig::isValidName($name)) {\n\t\t\tthrow new LAMException(_(\"Unable to delete profile!\"));\n\t\t}\n\t\t$dir = __DIR__ . \"/../config/\";\n\t\t// delete account profiles and PDF structures\n\t\t$subDirs = array($dir . 'pdf/' . $name . '/logos', $dir . 'pdf/' . $name, $dir . 'profiles/' . $name);\n\t\tfor ($i = 0; $i < sizeof($subDirs); $i++) {\n\t\t\tif (is_dir($subDirs[$i]) && is_readable($subDirs[$i])) {\n\t\t\t\t$dirHandle = @opendir($subDirs[$i]);\n\t\t\t\twhile (false !== ($path = readdir($dirHandle))) {\n\t\t\t\t\tif (($path != '.')  && ($path != '..') && !@unlink($subDirs[$i] . '/' . $path)) {\n\t\t\t\t\t\tlogNewMessage(LOG_ERR, 'Unable to delete ' . $subDirs[$i] . '/' . $path);\n\t\t\t\t\t\tthrow new LAMException(_(\"Unable to delete profile!\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t@closedir($dirHandle);\n\t\t\t\tif (!@rmdir($subDirs[$i])) {\n\t\t\t\t\tlogNewMessage(LOG_ERR, 'Unable to delete ' . $subDirs[$i]);\n\t\t\t\t\tthrow new LAMException(_(\"Unable to delete profile!\"));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// delete config file\n\t\t$confFile = $dir . $name . \".conf\";\n\t\tif (!@unlink($confFile)) {\n\t\t\tlogNewMessage(LOG_ERR, 'Unable to delete ' . $confFile);\n\t\t\tthrow new LAMException(_(\"Unable to delete profile!\"));\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function isWritable(string $name): bool {\n\t\treturn is_writeable($this->getPath($name));\n\t}\n\n\t/**\n\t * Returns the path to the config file.\n\t *\n\t * @param string $name profile name\n\t * @return string path on filesystem\n\t */\n\tprivate function getPath(string $name) : string {\n\t\treturn __DIR__ . \"/../config/\" . $name . \".conf\";\n\t}\n\n}\n\n/**\n * Stores server profiles in a database.\n */\nclass ServerProfilePersistenceStrategyPdo implements ServerProfilePersistenceStrategy {\n\n\tconst TABLE_NAME = 'server_profiles';\n\n\t/**\n\t * @var PDO\n\t */\n\tprivate $pdo;\n\n\t/**\n\t * Constructor\n\t * \n\t * @param PDO $pdo PDO\n\t */\n\tpublic function __construct(PDO $pdo) {\n\t\t$this->pdo = $pdo;\n\t\t$this->checkSchema();\n\t}\n\n\t/**\n\t * Checks if the schema has latest version.\n\t */\n\tprivate function checkSchema() : void {\n\t\tif (!dbTableExists($this->pdo, self::TABLE_NAME)) {\n\t\t\t$this->createInitialSchema();\n\t\t}\n\t}\n\n\t/**\n\t * Creates the initial schema.\n\t */\n\tpublic function createInitialSchema() : void {\n\t\tlogNewMessage(LOG_DEBUG, 'Creating database table ' . self::TABLE_NAME);\n\t\t$sql = 'create table ' . self::TABLE_NAME . '('\n\t\t\t. 'name VARCHAR(300) NOT NULL,'\n\t\t\t. 'data TEXT NOT NULL,'\n\t\t\t. 'PRIMARY KEY(name)'\n\t\t\t. ');';\n\t\t$this->pdo->exec($sql);\n\t\t$sql = 'insert into ' . ConfigurationDatabase::TABLE_SCHEMA_VERSIONS . ' (name, version) VALUES (\"server_profiles\", 1);';\n\t\t$this->pdo->exec($sql);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getProfiles(): array {\n\t\t$statement = $this->pdo->prepare(\"SELECT name FROM \" . self::TABLE_NAME);\n\t\t$statement->execute();\n\t\t$results = $statement->fetchAll();\n\t\t$profiles = array();\n\t\tforeach ($results as $result) {\n\t\t\t$profiles[] = $result['name'];\n\t\t}\n\t\treturn $profiles;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function loadProfile(string $name): LAMConfig {\n\t\t$statement = $this->pdo->prepare(\"SELECT data FROM \" . self::TABLE_NAME . \" WHERE name = ?\");\n\t\t$statement->execute(array($name));\n\t\t$results = $statement->fetchAll();\n\t\tif (empty($results)) {\n\t\t\tlogNewMessage(LOG_ERR, 'Server profile not found: ' . $name);\n\t\t\tthrow new LAMException(_(\"Unable to load profile!\"), $name);\n\t\t}\n\t\t$data = json_decode($results[0]['data'], true);\n\t\t$config = new LAMConfig();\n\t\t$config->importData($data);\n\t\treturn $config;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function saveProfile(LAMConfig $profile, string $name): void {\n\t\t$data = json_encode($profile->exportData());\n\t\t$statement = $this->pdo->prepare(\"SELECT data FROM \" . self::TABLE_NAME . \" WHERE name = ?\");\n\t\t$statement->execute(array($name));\n\t\t$results = $statement->fetchAll();\n\t\tif (empty($results)) {\n\t\t\t$statement = $this->pdo->prepare(\"INSERT INTO \" . self::TABLE_NAME . \" (name, data) VALUES (?, ?)\");\n\t\t\t$statement->execute(array($name, $data));\n\t\t}\n\t\telse {\n\t\t\t$statement = $this->pdo->prepare(\"UPDATE \" . self::TABLE_NAME . \" SET data = ? WHERE name = ?\");\n\t\t\t$statement->execute(array($data, $name));\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function renameProfile(string $oldName, string $newName): void {\n\t\t$statement = $this->pdo->prepare(\"UPDATE \" . self::TABLE_NAME . \" SET name = ? WHERE name = ?\");\n\t\t$statement->execute(array($newName, $oldName));\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function deleteProfile(string $name): void {\n\t\t$statement = $this->pdo->prepare(\"DELETE FROM \" . self::TABLE_NAME . \" WHERE name = ?\");\n\t\t$statement->execute(array($name));\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function isWritable(string $name): bool {\n\t\treturn true;\n\t}\n}\n\n/**\n* This class manages conf files.\n*\n* @package configuration\n*/\nclass LAMConfig {\n\n\t/* access levels */\n\tconst ACCESS_ALL = 100;\n\tconst ACCESS_PASSWORD_CHANGE = 20;\n\tconst ACCESS_READ_ONLY = 0;\n\n\t/* login method: predefined list or LDAP search */\n\tconst LOGIN_LIST = 'list';\n\tconst LOGIN_SEARCH = 'search';\n\n\t/** line separator */\n\tconst LINE_SEPARATOR = '+::+';\n\n\t/** show password on screen by default */\n\tconst PWDRESET_DEFAULT_SCREEN = 1;\n\t/** send password via email by default */\n\tconst PWDRESET_DEFAULT_MAIL = 2;\n\t/** show password on screen and send via email by default */\n\tconst PWDRESET_DEFAULT_BOTH = 3;\n\n\t/** Server address (e.g. ldap://127.0.0.1:389) */\n\tprivate $ServerURL;\n\n\t/** Display name of LDAP server */\n\tprivate $serverDisplayName;\n\n\t/** enables/disables TLS encryption */\n\tprivate $useTLS;\n\n\t/** automatically follow referrals */\n\tprivate $followReferrals = 'false';\n\n\t/** use paged results */\n\tprivate $pagedResults = 'false';\n\n\t/** overlay for referential integrity is activated */\n\tprivate $referentialIntegrityOverlay = 'false';\n\n\t/** hide password prompt for expired passwords */\n\tprivate $hidePasswordPromptForExpiredPasswords = 'false';\n\n\t/** Array of string: users with admin rights */\n\tprivate $Admins;\n\n\t/** Password to edit preferences */\n\tprivate $Passwd;\n\n\t/** Default language */\n\tprivate $defaultLanguage;\n\t/** time zone */\n\tprivate $timeZone = 'Europe/London';\n\n\t/** module settings */\n\tprivate $moduleSettings = array();\n\n\t/** type settings */\n\tprivate $typeSettings = array();\n\n\t/** tool settings */\n\tprivate $toolSettings = array();\n\n\t/**\n\t* Path to external lamdaemon script on server where it is executed\n\t*\n\t* This is used for managing quota and home directories.\n\t* optional setting, may not be defined\n\t*/\n\tprivate $scriptPath;\n\n\t/**\n\t * The rights for the home directory\n\t */\n\tprivate $scriptRights = '750';\n\n\t/**\n\t* Servers where lamdaemon script is executed\n\t*\n\t* This is used for managing quota and home directories.\n\t* optional setting, may not be defined\n\t*/\n\tprivate $scriptServer;\n\n\t/**\n\t * user name for lamdaemon\n\t */\n\tprivate $scriptUserName;\n\n\t/**\n\t * File name of SSH key for lamdaemon.\n\t */\n\tprivate $scriptSSHKey;\n\n\t/**\n\t * Password for lamdaemon SSH key.\n\t */\n\tprivate $scriptSSHKeyPassword;\n\n\t/** LDAP search limit */\n\tprivate $searchLimit = 0;\n\n\t/** Active account types */\n\tprivate $activeTypes = \"\";\n\n\t/** Name of configuration file */\n\tprivate $name;\n\n\t/** access level */\n\tprivate $accessLevel = LAMconfig::ACCESS_ALL;\n\n\t/** login method */\n\tprivate $loginMethod = LAMconfig::LOGIN_LIST;\n\n\t/** search suffix for login */\n\tprivate $loginSearchSuffix = 'dc=yourdomain,dc=org';\n\n\t/** search filter for login */\n\tprivate $loginSearchFilter = 'uid=%USER%';\n\n\t/** bind user for login search */\n\tprivate $loginSearchDN = '';\n\n\t/** bind password for login search */\n\tprivate $loginSearchPassword = '';\n\n\t/** specifies if HTTP authentication should be used */\n\tprivate $httpAuthentication = 'false';\n\n\t/** email address for sender of password reset mails */\n\tprivate $lamProMailFrom = '';\n\t/** reply-to email address for password reset mails */\n\tprivate $lamProMailReplyTo = '';\n\t/** subject for password reset mails */\n\tprivate $lamProMailSubject = '';\n\t/** treat password reset mail body as HTML */\n\tprivate $lamProMailIsHTML = 'false';\n\t/** allow sending mails to an alternative address */\n\tprivate $lamProMailAllowAlternateAddress = 'true';\n\t/** mail body for password reset mails */\n\tprivate $lamProMailText = '';\n\n\t/** password reset page: allow to set a specific password */\n\tprivate $pwdResetAllowSpecificPassword = 'true';\n\t/** password reset page: allow to show password on screen */\n\tprivate $pwdResetAllowScreenPassword = 'true';\n\t/** password reset page: force password change by default */\n\tprivate $pwdResetForcePasswordChange = 'true';\n\t/** password reset page: default selection for password output\n\t * PWDRESET_DEFAULT_SCREEN, PWDRESET_DEFAULT_MAIL, PWDRESET_DEFAULT_BOTH */\n\tprivate $pwdResetDefaultPasswordOutput = LAMconfig::PWDRESET_DEFAULT_MAIL;\n\n\t/** LDAP user for jobs */\n\tprivate $jobsBindUser = null;\n\t/** LDAP password for jobs */\n\tprivate $jobsBindPassword = null;\n\t/** database type for jobs */\n\tprivate $jobsDatabase = null;\n\t/** host of job database */\n\tprivate $jobsDBHost = null;\n\t/** port of job database */\n\tprivate $jobsDBPort = null;\n\t/** user of job database */\n\tprivate $jobsDBUser = null;\n\t/** password of job database */\n\tprivate $jobsDBPassword = null;\n\t/** name of job database */\n\tprivate $jobsDBName = null;\n\t/** random job token */\n\tprivate $jobToken = null;\n\t/** job configuration */\n\tprivate $jobSettings = array();\n\n\tprivate $twoFactorAuthentication = TwoFactorProviderService::TWO_FACTOR_NONE;\n\tprivate $twoFactorAuthenticationURL = 'https://localhost';\n\tprivate $twoFactorAuthenticationClientId = null;\n\tprivate $twoFactorAuthenticationSecretKey = null;\n\tprivate $twoFactorAuthenticationDomain = null;\n\tprivate $twoFactorAuthenticationInsecure = false;\n\tprivate $twoFactorAuthenticationLabel = null;\n\tprivate $twoFactorAuthenticationOptional = false;\n\tprivate $twoFactorAuthenticationCaption = '';\n\tprivate $twoFactorAuthenticationAttribute = '';\n\n\tprivate $hideDnPart = '';\n\n\tprivate $pwdPolicyMinLength = '';\n\tprivate $pwdPolicyMinLowercase = '';\n\tprivate $pwdPolicyMinUppercase = '';\n\tprivate $pwdPolicyMinNumeric = '';\n\tprivate $pwdPolicyMinSymbolic = '';\n\n\t/** List of all settings in config file */\n\tprivate $settings = array(\"ServerURL\", \"useTLS\", \"followReferrals\", 'pagedResults', \"Passwd\", \"Admins\",\n\t\t\"defaultLanguage\", \"scriptPath\", \"scriptServer\", \"scriptRights\", 'serverDisplayName',\n\t\t\"modules\", \"activeTypes\", \"types\", \"tools\", \"accessLevel\", 'loginMethod', 'loginSearchSuffix',\n\t\t'loginSearchFilter', 'searchLimit', 'lamProMailFrom', 'lamProMailReplyTo', 'lamProMailSubject',\n\t\t'lamProMailText', 'lamProMailIsHTML', 'lamProMailAllowAlternateAddress', 'httpAuthentication', 'loginSearchDN',\n\t\t'loginSearchPassword', 'timeZone', 'jobsBindUser', 'jobsBindPassword', 'jobsDatabase', 'jobToken', 'jobs',\n\t\t'jobsDBHost', 'jobsDBPort', 'jobsDBUser', 'jobsDBPassword', 'jobsDBName', 'pwdResetAllowSpecificPassword',\n\t\t'pwdResetAllowScreenPassword', 'pwdResetForcePasswordChange', 'pwdResetDefaultPasswordOutput',\n\t\t'scriptUserName', 'scriptSSHKey', 'scriptSSHKeyPassword', 'twoFactorAuthentication', 'twoFactorAuthenticationURL',\n\t\t'twoFactorAuthenticationInsecure', 'twoFactorAuthenticationLabel', 'twoFactorAuthenticationOptional',\n\t\t'twoFactorAuthenticationCaption', 'twoFactorAuthenticationClientId', 'twoFactorAuthenticationSecretKey',\n\t\t'twoFactorAuthenticationDomain', 'twoFactorAuthenticationAttribute', 'referentialIntegrityOverlay',\n\t\t'hidePasswordPromptForExpiredPasswords', 'hideDnPart', 'pwdPolicyMinLength', 'pwdPolicyMinLowercase',\n\t\t'pwdPolicyMinUppercase', 'pwdPolicyMinNumeric', 'pwdPolicyMinSymbolic'\n\t);\n\n\t/**\n\t * Returns the server profile data.\n\t *\n\t * @return array data\n\t */\n\tpublic function exportData() {\n\t\t$data = array();\n\t\t$settingsToIgnore = array('modules', 'types', 'tools', 'jobs');\n\t\tforeach ($this->settings as $setting) {\n\t\t\tif (in_array($setting, $settingsToIgnore)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$data[$setting] = $this->$setting;\n\t\t}\n\t\t$data['typeSettings'] = $this->typeSettings;\n\t\t$data['moduleSettings'] = $this->moduleSettings;\n\t\t$data['toolSettings'] = $this->toolSettings;\n\t\t$data['jobSettings'] = $this->jobSettings;\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Imports server profile data.\n\t *\n\t * @param array $data config data\n\t * @throws LAMException import error\n\t */\n\tpublic function importData($data) {\n\t\t$settingsToIgnore = array('modules', 'types', 'tools', 'jobs', 'typeSettings',\n\t\t\t'moduleSettings', 'toolSettings', 'jobSettings');\n\t\tforeach ($data as $dataKey => $dataValue) {\n\t\t\tif (in_array($dataKey, $settingsToIgnore)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!in_array($dataKey, $this->settings)) {\n\t\t\t\tlogNewMessage(LOG_WARNING, 'Ignored setting during import: ' . $dataKey);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!(($dataValue === null) || is_array($dataValue) || is_string($dataValue) || is_int($dataValue) || is_bool($dataValue))) {\n\t\t\t\tthrow new LAMException('Invalid import data type for ' . htmlspecialchars($dataKey) . ': ' . gettype($dataValue));\n\t\t\t}\n\t\t\t$this->$dataKey = $dataValue;\n\t\t}\n\t\t$typeSettingsData = !empty($data['typeSettings']) && is_array($data['typeSettings']) ? $data['typeSettings'] : array();\n\t\t$this->typeSettings = $typeSettingsData;\n\t\t$moduleSettingsData = !empty($data['moduleSettings']) && is_array($data['moduleSettings']) ? $data['moduleSettings'] : array();\n\t\t$this->moduleSettings = $moduleSettingsData;\n\t\t$toolSettingsData = !empty($data['toolSettings']) && is_array($data['toolSettings']) ? $data['toolSettings'] : array();\n\t\t$this->toolSettings = $toolSettingsData;\n\t\t$jobSettingsData = !empty($data['jobSettings']) && is_array($data['jobSettings']) ? $data['jobSettings'] : array();\n\t\t$this->jobSettings = $jobSettingsData;\n\t}\n\n\t/**\n\t * Removes any non-existing types from the configuration.\n\t */\n\tpublic function removeInvalidTypes() {\n\t\t$allTypes = LAM\\TYPES\\getTypes();\n\t\t$activeTypes = $this->get_ActiveTypes();\n\t\tfor ($i = 0; $i < sizeof($activeTypes); $i++) {\n\t\t\tif (!in_array(\\LAM\\TYPES\\getScopeFromTypeId($activeTypes[$i]), $allTypes)) {\n\t\t\t\tunset($activeTypes[$i]);\n\t\t\t}\n\t\t}\n\t\t$activeTypes = array_values($activeTypes);\n\t\t$this->set_ActiveTypes($activeTypes);\n\t}\n\n\t/**\n\t * Removes any non-existing modules from the configuration.\n\t */\n\tpublic function removeInvalidModules() {\n\t\t$types = $this->get_ActiveTypes();\n\t\t$availableByScope = array();\n\t\tforeach ($types as $type) {\n\t\t\t$scope = \\LAM\\TYPES\\getScopeFromTypeId($type);\n\t\t\t$moduleVar = \"modules_\" . $type;\n\t\t\tif (isset($this->typeSettings[$moduleVar])){\n\t\t\t\t$modules = explode(\",\", $this->typeSettings[$moduleVar]);\n\t\t\t\tif (empty($availableByScope[$scope])) {\n\t\t\t\t\t$availableByScope[$scope] = getAvailableModules($scope);\n\t\t\t\t}\n\t\t\t\t$available = $availableByScope[$scope];\n\t\t\t\t// only return available modules\n\t\t\t\t$ret = array();\n\t\t\t\tfor ($i = 0; $i < sizeof($modules); $i++) {\n\t\t\t\t\tif (in_array($modules[$i], $available)) {\n\t\t\t\t\t\t$ret[] = $modules[$i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$this->typeSettings[$moduleVar] = implode(\",\", $ret);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the given server profile name is valid.\n\t *\n\t * @param string $name server profile name\n\t * @return bool is valid\n\t */\n\tpublic static function isValidName(string $name) : bool {\n\t\treturn preg_match(\"/^[a-z0-9_-]+$/i\", $name);\n\t}\n\n\t/**\n\t * Returns the name of the config file\n\t *\n\t * @return string name\n\t */\n\tpublic function getName() : string {\n\t\treturn $this->name;\n\t}\n\n\t/**\n\t * Sets the name of the config file\n\t *\n\t * @param string $name name\n\t */\n\tpublic function setName(string $name) : void {\n\t\t$this->name = $name;\n\t}\n\n\t// functions to read/write preferences\n\n\t/**\n\t* Returns the server address as string\n\t*\n\t* @return string server address\n\t*/\n\tpublic function get_ServerURL() {\n\t\treturn $this->ServerURL;\n\t}\n\n\t/**\n\t* Sets the server address\n\t*\n\t* @param string $value new server address\n\t* @return boolean true if $value has correct format\n\t*/\n\tpublic function set_ServerURL($value) {\n\t\tif (is_string($value)) {\n\t\t\t$this->ServerURL = $value;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t* Returns the server display name. Defaults to server URL if empty display name.\n\t*\n\t* @return string server display name\n\t*/\n\tpublic function getServerDisplayNameGUI() {\n\t\tif (empty($this->serverDisplayName)) {\n\t\t\treturn $this->ServerURL;\n\t\t}\n\t\treturn $this->serverDisplayName;\n\t}\n\n\t/**\n\t* Returns the server display name.\n\t*\n\t* @return string server display name\n\t*/\n\tpublic function getServerDisplayName() {\n\t\treturn $this->serverDisplayName;\n\t}\n\n\t/**\n\t* Sets the server display name\n\t*\n\t* @param string $value new server display name\n\t* @return boolean true if $value has correct format\n\t*/\n\tpublic function setServerDisplayName($value) {\n\t\tif (is_string($value)) {\n\t\t\t$this->serverDisplayName = $value;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns if TLS is activated.\n\t *\n\t * @return String yes or no\n\t */\n\tpublic function getUseTLS() {\n\t\treturn $this->useTLS;\n\t}\n\n\t/**\n\t * Sets if TLS is activated.\n\t *\n\t * @param String $useTLS yes or no\n\t * @return boolean true if $useTLS has correct format\n\t */\n\tpublic function setUseTLS($useTLS) {\n\t\tif (($useTLS == \"yes\") || ($useTLS == \"no\")) {\n\t\t\t$this->useTLS = $useTLS;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns if referrals should be followed.\n\t *\n\t * @return String true or false\n\t */\n\tpublic function getFollowReferrals() {\n\t\treturn $this->followReferrals;\n\t}\n\n\t/**\n\t * Sets if referrals should be followed.\n\t *\n\t * @param String $followReferrals true or false\n\t */\n\tpublic function setFollowReferrals($followReferrals) {\n\t\t$this->followReferrals = $followReferrals;\n\t}\n\n\t/**\n\t * Returns if paged results should be used.\n\t *\n\t * @return String true or false\n\t */\n\tpublic function getPagedResults() {\n\t\treturn $this->pagedResults;\n\t}\n\n\t/**\n\t * Sets if paged results should be used.\n\t *\n\t * @param String $pagedResults true or false\n\t */\n\tpublic function setPagedResults($pagedResults) {\n\t\t$this->pagedResults = $pagedResults;\n\t}\n\n\t/**\n\t * Returns if referential integrity overlay is in place.\n\t *\n\t * @return String true or false\n\t */\n\tpublic function getReferentialIntegrityOverlay() {\n\t\treturn $this->referentialIntegrityOverlay;\n\t}\n\n\t/**\n\t * Sets if referential integrity overlay is in place.\n\t *\n\t * @param String $referentialIntegrityOverlay true or false\n\t */\n\tpublic function setReferentialIntegrityOverlay($referentialIntegrityOverlay) {\n\t\t$this->referentialIntegrityOverlay = $referentialIntegrityOverlay;\n\t}\n\n\t/**\n\t * Returns if referential integrity overlay is in place.\n\t *\n\t * @return bool overlay in place\n\t */\n\tpublic function isReferentialIntegrityOverlayActive() {\n\t\treturn $this->referentialIntegrityOverlay === 'true';\n\t}\n\n\t/**\n\t * Hide password prompt for expired passwords.\n\t *\n\t * @return String true or false\n\t */\n\tpublic function getHidePasswordPromptForExpiredPasswords() {\n\t\treturn $this->hidePasswordPromptForExpiredPasswords;\n\t}\n\n\t/**\n\t * Sets if password prompt for expired passwords is hidden.\n\t *\n\t * @param String $hidePasswordPromptForExpiredPasswords true or false\n\t */\n\tpublic function setHidePasswordPromptForExpiredPasswords($hidePasswordPromptForExpiredPasswords) {\n\t\t$this->hidePasswordPromptForExpiredPasswords = $hidePasswordPromptForExpiredPasswords;\n\t}\n\n\t/**\n\t * Hide password prompt for expired passwords.\n\t *\n\t * @return bool is hidden\n\t */\n\tpublic function isHidePasswordPromptForExpiredPasswords() {\n\t\treturn $this->hidePasswordPromptForExpiredPasswords === 'true';\n\t}\n\n\t/**\n\t* Returns an array of string with all admin names\n\t*\n\t* @return array the admin names\n\t*/\n\tpublic function get_Admins() {\n\t\treturn explode(\";\", $this->Admins);\n\t}\n\n\t/**\n\t* Returns all admin users separated by semicolons\n\t*\n\t* @return string the admin string\n\t*/\n\tpublic function get_Adminstring() {\n\t\treturn $this->Admins;\n\t}\n\n\t/**\n\t* Sets the admin string\n\t*\n\t* @param string $value new admin string that contains all admin users separated by semicolons\n\t* @return boolean true if $value has correct format\n\t*/\n\tpublic function set_Adminstring($value) {\n\t\tif (is_string($value) &&\n\t\t\tpreg_match(\"/^[^;]+(;[^;]+)*$/\", $value)) {\n\t\t\t$this->Admins = $value;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Checks if the given password matches.\n\t *\n\t * @param String $password\n\t * @return boolean true, if matches\n\t */\n\tpublic function check_Passwd($password) {\n\t\tif (strpos($this->Passwd, \"{SSHA}\") === 0) {\n\t\t\t$value = substr($this->Passwd, strlen(\"{SSHA}\"));\n\t\t\t$parts = explode(\" \", $value);\n\t\t\t$salt = base64_decode($parts[1]);\n\t\t\t$hash = \"{SSHA}\" . base64_encode(hex2bin(sha1($password . $salt))) . \" \" . base64_encode($salt);\n\t\t\treturn ($hash === $this->Passwd);\n\t\t}\n\t\telseif (strpos($this->Passwd, \"{CRYPT-SHA512}\") === 0) {\n\t\t\t$value = substr($this->Passwd, strlen(\"{CRYPT-SHA512}\"));\n\t\t\t$parts = explode(\" \", $value);\n\t\t\t$salt = base64_decode($parts[1]);\n\t\t\treturn ($this->hashPassword($password, $salt) === $this->Passwd);\n\t\t}\n\t\telse {\n\t\t\t// old nonhashed password\n\t\t\treturn ($password === $this->Passwd);\n\t\t}\n\t}\n\n\t/**\n\t* Sets the preferences wizard password\n\t*\n\t* @param string $value new password\n\t* @return boolean true if $value has correct format\n\t*/\n\tpublic function set_Passwd($value) {\n\t\tif (is_string($value)) {\n\t\t\t$this->Passwd = $this->hashPassword($value, generateSalt(16));\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the password hash.\n\t *\n\t * @return string password hash\n\t */\n\tpublic function getPasswd() {\n\t\treturn $this->Passwd;\n\t}\n\n\t/**\n\t * Returns the hashed password.\n\t *\n\t * @param String $password password\n\t * @param String $salt salt\n\t * @return String hash value\n\t */\n\tprivate function hashPassword($password, $salt) {\n\t\treturn \"{CRYPT-SHA512}\" . crypt($password, '$6$' . $salt) . \" \" . base64_encode($salt);\n\t}\n\n\t/**\n\t* Returns the LDAP suffix for the given account type\n\t*\n\t* @param string $typeId account type\n\t* @return string the LDAP suffix\n\t*/\n\tpublic function get_Suffix($typeId) {\n\t\treturn $this->typeSettings['suffix_' . $typeId];\n\t}\n\n\t/**\n\t* Sets the LDAP suffix where accounts are saved\n\t*\n\t* @param string $scope account type\n\t* @param string $value new LDAP suffix\n\t* @return boolean true if $value has correct format\n\t*/\n\tpublic function set_Suffix($scope, $value) {\n\t\tif (!$value) {\n\t\t\t$value = \"\";\n\t\t}\n\t\telseif (!is_string($value)) {\n\t\t\treturn false;\n\t\t}\n\t\t$this->typeSettings['suffix_' . $scope] = $value;\n\t\treturn true;\n\t}\n\n\t/**\n\t* Returns the list of attributes to show in user list\n\t*\n\t* @param string $scope account type\n\t* @return string the attribute list\n\t*/\n\tpublic function get_listAttributes($scope) {\n\t\treturn $this->typeSettings['attr_' . $scope];\n\t}\n\n\t/**\n\t* Sets the list of attributes to show in user list\n\t*\n\t* @param string $value new attribute string\n\t* @param string $scope account type\n\t* @return boolean true if $value has correct format\n\t*/\n\tpublic function set_listAttributes($value, $scope) {\n\t\tif (is_string($value) && preg_match(\"/^((#[^:;]+)|([^:;]*:[^:;]+))(;((#[^:;]+)|([^:;]*:[^:;]+)))*$/\", $value)) {\n\t\t\t$this->typeSettings['attr_' . $scope] = $value;\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t* Returns the default language string\n\t*\n\t* @return string default language\n\t*/\n\tpublic function get_defaultLanguage() {\n\t\treturn $this->defaultLanguage;\n\t}\n\n\t/**\n\t* Sets the default language string\n\t*\n\t* @param string $value new default language\n\t* @return boolean true if $value has correct format\n\t*/\n\tpublic function set_defaultLanguage($value) {\n\t\tif (is_string($value)) {\n\t\t\t$this->defaultLanguage = $value;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t* Returns the time zone name.\n\t*\n\t* @return string time zone\n\t*/\n\tpublic function getTimeZone() {\n\t\treturn ($this->timeZone == null) ? 'Europe/London' : $this->timeZone;\n\t}\n\n\t/**\n\t* Sets the time zone name.\n\t*\n\t* @param string $value new time zone\n\t* @return boolean true if $value has correct format\n\t*/\n\tpublic function setTimeZone($value) {\n\t\tif (is_string($value)) {\n\t\t\t$this->timeZone = $value;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t* Returns the path to the external script\n\t*\n\t* @return string script path\n\t*/\n\tpublic function get_scriptPath() {\n\t\treturn $this->scriptPath;\n\t}\n\n\t/**\n\t* Sets the path to the external script\n\t*\n\t* @param string $value new script path\n\t* @return boolean true if $value has correct format\n\t*/\n\tpublic function set_scriptPath($value) {\n\t\tif (!$value) {\n\t\t\t$this->scriptPath = \"\"; // optional parameter\n\t\t}\n\t\telseif (is_string($value) && preg_match(\"/^\\\\/([a-z0-9_-])+(\\\\/([a-z0-9_\\\\.-])+)+$/i\", $value)) {\n\t\t\t$this->scriptPath = $value;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t* Returns the servers of the external script as a Array\n\t*\n\t* @return string script servers\n\t*/\n\tpublic function get_scriptServers() {\n\t    return $this->scriptServer;\n\t}\n\n\t/**\n\t * Returns the list of configureed servers.\n\t *\n\t * @return RemoteServerConfiguration[] servers\n\t */\n\tpublic function getConfiguredScriptServers() {\n\t\treturn LAMConfig::parseConfiguredScriptServers($this->scriptServer, $this->get_scriptPath(),\n\t\t\t$this->getScriptUserName(), $this->getScriptSSHKey(), $this->getScriptSSHKeyPassword());\n\t}\n\n\t/**\n\t * Parses the configured server config.\n\t *\n\t * @param string $value configured value\n\t * @param string $scriptPath script path\n\t * @param string $userName user name\n\t * @param string $sshKey SSH key path\n\t * @param string $sshKeyPassword SSH key password\n\t * @return RemoteServerConfiguration[] configurations\n\t */\n\tpublic static function parseConfiguredScriptServers($value, $scriptPath, $userName, $sshKey, $sshKeyPassword) : array {\n\t\t$servers = array();\n\t\tif (empty($value)) {\n\t\t\treturn $servers;\n\t\t}\n\t\t$serverChunks = explode(';', $value);\n\t\tforeach ($serverChunks as $serverChunk) {\n\t\t\tif (empty($serverChunk)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$serverSettings = explode(':', $serverChunk);\n\t\t\t$serverName = $serverSettings[0];\n\t\t\t$serverLabel = isset($serverSettings[1]) ? $serverSettings[1] : null;\n\t\t\t$serverHomedirPrefix = isset($serverSettings[2]) ? $serverSettings[2] : null;\n\t\t\t$servers[] = new RemoteServerConfiguration($serverName, $serverLabel, $serverHomedirPrefix, $scriptPath, $userName, $sshKey, $sshKeyPassword);\n\t\t}\n\t\treturn $servers;\n\t}\n\n\t/**\n\t * Returns the script server object for the given name.\n\t *\n\t * @param string $serverName server name\n\t * @return RemoteServerConfiguration server\n\t */\n\tpublic function getScriptServerByName($serverName) {\n\t\t$serverList = $this->getConfiguredScriptServers();\n\t\tforeach ($serverList as $server) {\n\t\t\tif ($serverName === $server->getServer()) {\n\t\t\t\treturn $server;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t* Sets the servers of the external script\n\t*\n\t* @param string $value new script servers\n\t* @return boolean true if $value has correct format\n\t*/\n\tpublic function set_scriptServers($value) {\n\t\t$parsedValue = LAMConfig::parseScriptServerValue($value);\n\t\tif ($parsedValue === false) {\n\t\t\treturn false;\n\t\t}\n\t\t$this->scriptServer = $parsedValue;\n\t\treturn true;\n\t}\n\n\t/**\n\t * Parses the script server value from input field.\n\t *\n\t * @param $value input field value\n\t * @return string|false value to store in configuration\n\t */\n\tpublic static function parseScriptServerValue($value) {\n\t\tif (!$value) {\n\t\t\treturn \"\"; // optional parameter\n\t\t}\n\t\t// Explode the value to an array\n\t\t$array_string = explode(\";\", $value);\n\t\tif (count($array_string) > 0) {\n\t\t\t// Check all IPs in the exploded Array\n\t\t\t$valid_ips = array();\n\t\t\tforeach($array_string as $arr_value) {\n\t\t\t\t// Explode name and IP, if a name exists\n\t\t\t\tif (preg_match(\"/:/\", $arr_value)) {\n\t\t\t\t\t$arr_value_explode = explode(\":\", $arr_value);\n\t\t\t\t\t$servername = $arr_value_explode[0];\n\t\t\t\t\t$label = $arr_value_explode[1];\n\t\t\t\t\t$homedirPrefix = isset($arr_value_explode[2]) ? $arr_value_explode[2] : '';\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$servername = $arr_value;\n\t\t\t\t\t$label = '';\n\t\t\t\t\t$homedirPrefix = '';\n\t\t\t\t}\n\t\t\t\tif (isset($servername) && is_string($servername) && preg_match(\"/^[a-z0-9-]+(\\\\.[a-z0-9-]+)*(,[0-9]+)?$/i\", $servername)) {\n\t\t\t\t\t$serverData = array($servername);\n\t\t\t\t\tif (!empty($label)) {\n\t\t\t\t\t\t$serverData[] = $label;\n\t\t\t\t\t}\n\t\t\t\t\tif (!empty($homedirPrefix)) {\n\t\t\t\t\t\t$serverData[] = $homedirPrefix;\n\t\t\t\t\t}\n\t\t\t\t\t$serverChunk = implode(':', $serverData);\n\t\t\t\t\t$valid_ips[] = $serverChunk;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// wrong format\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check that the array is not empty\n\t\t\tif (!empty($array_string)) {\n\t\t\t\treturn implode(\";\", $valid_ips);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// The array is empty, there was no valid IP\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the chmod value for new home directories.\n\t *\n\t * @return string rights\n\t */\n\tpublic function get_scriptRights() {\n\t\tif (!isset($this->scriptRights)) {\n\t\t\treturn '755';\n\t\t}\n\t\treturn $this->scriptRights;\n\t}\n\n\t/**\n\t* Sets the rights for the home directory.\n\t*\n\t* @param string $chmod the rights\n\t* @return boolean true if values has correct format\n\t*/\n\tpublic function set_scriptRights($chmod) {\n\t\t// check if the chmod is correct:\n\t\tif ($chmod > 0 && $chmod <=777) {\n\t\t    $this->scriptRights=$chmod;\n\t\t    return true;\n\t\t}\n\t\telse {\n\t\t    return false;\n\t\t}\n\t}\n\n\t/**\n\t* Returns the path to lamdamon SSH key.\n\t*\n\t* @return string key path\n\t*/\n\tpublic function getScriptSSHKey() {\n\t\treturn $this->scriptSSHKey;\n\t}\n\n\t/**\n\t* Sets the path to lamdamon SSH key.\n\t*\n\t* @param string $value key path\n\t*/\n\tpublic function setScriptSSHKey($value) {\n\t\t$this->scriptSSHKey = $value;\n\t}\n\n\t/**\n\t* Returns the password for the lamdamon SSH key.\n\t*\n\t* @return string password\n\t*/\n\tpublic function getScriptSSHKeyPassword() {\n\t\treturn deobfuscateText($this->scriptSSHKeyPassword);\n\t}\n\n\t/**\n\t* Sets the password for the lamdamon SSH key.\n\t*\n\t* @param string $value password\n\t*/\n\tpublic function setScriptSSHKeyPassword($value) {\n\t\t$this->scriptSSHKeyPassword = obfuscateText($value);\n\t}\n\n\t/**\n\t* Returns the lamdaemon user name.\n\t*\n\t* @return string user name\n\t*/\n\tpublic function getScriptUserName() {\n\t\treturn $this->scriptUserName;\n\t}\n\n\t/**\n\t* Sets the lamdaemon user name.\n\t*\n\t* @param string $value user name\n\t*/\n\tpublic function setScriptUserName($value) {\n\t\t$this->scriptUserName = $value;\n\t}\n\n\t/**\n\t* Returns the LDAP search limit.\n\t*\n\t* @return integer search limit\n\t*/\n\tpublic function get_searchLimit() {\n\t\treturn $this->searchLimit;\n\t}\n\n\t/**\n\t* Sets the LDAP search limit.\n\t*\n\t* @param integer $value new search limit\n\t* @return boolean true if $value has correct format\n\t*/\n\tpublic function set_searchLimit($value) {\n\t\tif (is_numeric($value) && ($value > -1)) {\n\t\t\t$this->searchLimit = $value;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t* Returns an array of all selected account modules\n\t*\n\t* @param string $scope account type\n\t* @return array user modules\n\t*/\n\tpublic function get_AccountModules($scope) {\n\t\tif (isset($this->typeSettings[\"modules_\" . $scope])) {\n\t\t\t$modulesTmp = explode(\",\", $this->typeSettings[\"modules_\" . $scope]);\n\t\t\t$modules = array();\n\t\t\tforeach ($modulesTmp as $mod) {\n\t\t\t\tif (trim($mod) != '') {\n\t\t\t\t\t$modules[] = $mod;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $modules;\n\t\t}\n\t\telse {\n\t\t\treturn array();\n\t\t}\n\t}\n\n\t/**\n\t* Sets the selected account modules\n\t*\n\t* @param array $modules array with module names (not aliases!)\n\t* @param string $scope account type\n\t* @return boolean true if $modules has correct format\n\t*/\n\tpublic function set_AccountModules($modules, $scope) {\n\t\tif (!is_array($modules)) {\n\t\t\treturn false;\n\t\t}\n\t\t// check module names\n\t\t$available = getAvailableModules($scope);\n\t\tfor ($i = 0; $i < sizeof($modules); $i++) {\n\t\t\tif (! in_array($modules[$i], $available)) return false;\n\t\t}\n\t\t// check depends/conflicts\n\t\tif (check_module_conflicts($modules, getModulesDependencies($scope))) {\n\t\t\treturn false;\n\t\t}\n\t\tif (check_module_depends($modules, getModulesDependencies($scope))) {\n\t\t\treturn false;\n\t\t}\n\t\t$this->typeSettings[\"modules_\" . $scope] = implode(\",\", $modules);\n\t\treturn true;\n\t}\n\n\t/**\n\t* Sets the settings for the account modules.\n\t*\n\t* @param array $settings list of module setting array(name => value)\n\t* @return boolean true if $settings has correct format\n\t*/\n\tpublic function set_moduleSettings($settings) {\n\t\tif (!is_array($settings)) {\n\t\t\treturn false;\n\t\t}\n\t\t$this->moduleSettings = $settings;\n\t\treturn true;\n\t}\n\n\t/**\n\t* Returns a list of saved module settings\n\t*\n\t* @return array list of settings: array(name => value)\n\t*/\n\tpublic function get_moduleSettings() {\n\t\treturn $this->moduleSettings;\n\t}\n\n\t/**\n\t* Returns a list of active account types.\n\t*\n\t* @return string[] list of types\n\t*/\n\tpublic function get_ActiveTypes() {\n\t\tif (($this->activeTypes == '') || !isset($this->activeTypes)) {\n\t\t\treturn array();\n\t\t}\n\t\telse {\n\t\t\treturn explode(\",\", $this->activeTypes);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a list of active account types as string.\n\t *\n\t * @return string list of types\n\t */\n\tpublic function getActiveTypesString() {\n\t\treturn $this->activeTypes;\n\t}\n\n\t/**\n\t* Sets the list of active types.\n\t*\n\t* @param string[] list of types\n\t*/\n\tpublic function set_ActiveTypes($types) {\n\t\t$this->activeTypes = implode(\",\", $types);\n\t}\n\n\t/**\n\t* Sets the settings for the account types.\n\t*\n\t* @param array $settings list of type setting array(name => value)\n\t* @return boolean true if $settings has correct format\n\t*/\n\tpublic function set_typeSettings($settings) {\n\t\tif (!is_array($settings)) {\n\t\t\treturn false;\n\t\t}\n\t\t$this->typeSettings = $settings;\n\t\treturn true;\n\t}\n\n\t/**\n\t* Returns a list of saved type settings\n\t*\n\t* @return array list of settings: array(name => value)\n\t*/\n\tpublic function get_typeSettings() {\n\t\treturn $this->typeSettings;\n\t}\n\n\t/**\n\t * Returns the tool settings.\n\t *\n\t * @return array $toolSettings tool settings\n\t */\n\tpublic function getToolSettings() {\n\t\treturn $this->toolSettings;\n\t}\n\n\t/**\n\t * Sets the tool settings.\n\t *\n\t * @param array $toolSettings tool settings\n\t * @return boolean true if ok\n\t */\n\tpublic function setToolSettings($toolSettings) {\n\t\tif (!is_array($toolSettings)) {\n\t\t\treturn false;\n\t\t}\n\t\t$this->toolSettings = $toolSettings;\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks if the given tool is activated.\n\t *\n\t * @param string $toolName tool name\n\t * @return bool is active\n\t */\n\tpublic function isToolActive(string $toolName): bool {\n\t\treturn !isset($this->toolSettings['tool_hide_' . $toolName]) || ($this->toolSettings['tool_hide_' . $toolName] !== 'true');\n\t}\n\n\t/**\n\t * Returns the access level for this profile.\n\t *\n\t * @return int level\n\t */\n\tpublic function getAccessLevel() {\n\t\treturn $this->accessLevel;\n\t}\n\n\t/**\n\t * Sets the access level for this profile.\n\t *\n\t * @param int $level level\n\t */\n\tpublic function setAccessLevel($level) {\n\t\t$this->accessLevel = $level;\n\t}\n\n\t/**\n\t * Returns the login method.\n\t *\n\t * @return String login method\n\t * @see LAMconfig::LOGIN_LIST\n\t * @see LAMconfig::LOGIN_SEARCH\n\t */\n\tpublic function getLoginMethod() {\n\t\treturn $this->loginMethod;\n\t}\n\n\t/**\n\t * Sets the login method.\n\t *\n\t * @param String $loginMethod\n\t */\n\tpublic function setLoginMethod($loginMethod) {\n\t\t$this->loginMethod = $loginMethod;\n\t}\n\n\t/**\n\t * Returns the login search filter.\n\t *\n\t * @return String search filter\n\t */\n\tpublic function getLoginSearchFilter() {\n\t\treturn $this->loginSearchFilter;\n\t}\n\n\t/**\n\t * Sets the login search filter.\n\t *\n\t * @param String $loginSearchFilter search filter\n\t */\n\tpublic function setLoginSearchFilter($loginSearchFilter) {\n\t\t$this->loginSearchFilter = $loginSearchFilter;\n\t}\n\n\t/**\n\t * Returns the login search suffix.\n\t *\n\t * @return String suffix\n\t */\n\tpublic function getLoginSearchSuffix() {\n\t\treturn $this->loginSearchSuffix;\n\t}\n\n\t/**\n\t * Sets the login search suffix.\n\t *\n\t * @param String $loginSearchSuffix suffix\n\t */\n\tpublic function setLoginSearchSuffix($loginSearchSuffix) {\n\t\t$this->loginSearchSuffix = $loginSearchSuffix;\n\t}\n\n\t/**\n\t * Sets the DN for the login search bind user.\n\t *\n\t * @param String $loginSearchDN DN\n\t * @return boolean true if DN is valid\n\t */\n\tpublic function setLoginSearchDN($loginSearchDN) {\n\t\t$this->loginSearchDN = $loginSearchDN;\n\t\tif (($loginSearchDN == '') || get_preg($loginSearchDN, 'dn')) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns the DN for the login search bind user.\n\t *\n\t * @return String DN\n\t */\n\tpublic function getLoginSearchDN() {\n\t\treturn $this->loginSearchDN;\n\t}\n\n\t/**\n\t * Sets the password for the login search bind user.\n\t *\n\t * @param String $loginSearchPassword password\n\t */\n\tpublic function setLoginSearchPassword($loginSearchPassword) {\n\t\t$this->loginSearchPassword = obfuscateText($loginSearchPassword);\n\t}\n\n\t/**\n\t * Returns the password for the login search bind user.\n\t *\n\t * @return String password\n\t */\n\tpublic function getLoginSearchPassword() {\n\t\treturn deobfuscateText($this->loginSearchPassword);\n\t}\n\n\t/**\n\t * Returns if HTTP authentication should be used.\n\t *\n\t * @return String $httpAuthentication use HTTP authentication ('true' or 'false')\n\t */\n\tpublic function getHttpAuthentication() {\n\t\treturn $this->httpAuthentication;\n\t}\n\n\t/**\n\t * Specifies if HTTP authentication should be used.\n\t *\n\t * @param String $httpAuthentication use HTTP authentication ('true' or 'false')\n\t */\n\tpublic function setHttpAuthentication($httpAuthentication) {\n\t\t$this->httpAuthentication = $httpAuthentication;\n\t}\n\n\t/**\n\t * Returns the sender address for password reset mails.\n\t *\n\t * @return String mail address\n\t */\n\tpublic function getLamProMailFrom() {\n\t\treturn $this->lamProMailFrom;\n\t}\n\n\t/**\n\t * Sets the sender address for password reset mails.\n\t *\n\t * @param String $lamProMailFrom mail address\n\t * @return boolean true if address is valid\n\t */\n\tpublic function setLamProMailFrom($lamProMailFrom) {\n\t\t$this->lamProMailFrom = $lamProMailFrom;\n\t\tif (($lamProMailFrom != '') && !get_preg($lamProMailFrom, 'email') && !get_preg($lamProMailFrom, 'emailWithName')) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns the reply-to address for password reset mails.\n\t *\n\t * @return String mail address\n\t */\n\tpublic function getLamProMailReplyTo() {\n\t\treturn $this->lamProMailReplyTo;\n\t}\n\n\t/**\n\t * Sets the reply-to address for password reset mails.\n\t *\n\t * @param String $lamProMailReplyTo mail address\n\t * @return boolean true if address is valid\n\t */\n\tpublic function setLamProMailReplyTo($lamProMailReplyTo) {\n\t\t$this->lamProMailReplyTo = $lamProMailReplyTo;\n\t\tif (($lamProMailReplyTo != '') && !get_preg($lamProMailReplyTo, 'email') && !get_preg($lamProMailReplyTo, 'emailWithName')) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns the subject for password reset mails.\n\t *\n\t * @return String subject\n\t */\n\tpublic function getLamProMailSubject() {\n\t\treturn $this->lamProMailSubject;\n\t}\n\n\t/**\n\t * Sets the subject for password reset mails.\n\t *\n\t * @param String $lamProMailSubject subject\n\t */\n\tpublic function setLamProMailSubject($lamProMailSubject) {\n\t\t$this->lamProMailSubject = $lamProMailSubject;\n\t}\n\n\t/**\n\t * Returns if the password reset mail content should be treated as HTML.\n\t *\n\t * @return boolean HTML or text\n\t */\n\tpublic function getLamProMailIsHTML() {\n\t\treturn $this->lamProMailIsHTML;\n\t}\n\n\t/**\n\t * Sets if the password reset mail content should be treated as HTML.\n\t *\n\t * @param boolean $lamProMailIsHTML true if HTML\n\t */\n\tpublic function setLamProMailIsHTML($lamProMailIsHTML) {\n\t\t$this->lamProMailIsHTML = $lamProMailIsHTML;\n\t}\n\n\t/**\n\t * Returns if sending to an alternate address is allowed.\n\t *\n\t * @return boolean alternate address allowed\n\t */\n\tpublic function getLamProMailAllowAlternateAddress() {\n\t\treturn $this->lamProMailAllowAlternateAddress;\n\t}\n\n\t/**\n\t * Sets if sending to an alternate address is allowed.\n\t *\n\t * @param boolean $lamProMailAllowAlternateAddress alternate address allowed\n\t */\n\tpublic function setLamProMailAllowAlternateAddress($lamProMailAllowAlternateAddress) {\n\t\t$this->lamProMailAllowAlternateAddress = $lamProMailAllowAlternateAddress;\n\t}\n\n\t/**\n\t * Returns the mail body for password reset mails.\n\t *\n\t * @return String body\n\t */\n\tpublic function getLamProMailText() {\n\t\treturn implode(\"\\r\\n\", explode(LAMConfig::LINE_SEPARATOR, $this->lamProMailText));\n\t}\n\n\t/**\n\t * Returns the mail body for password reset mails without formatting.\n\t *\n\t * @return String body\n\t */\n\tpublic function getLamProMailTextRaw() {\n\t\treturn $this->lamProMailText;\n\t}\n\n\t/**\n\t * Sets the mail body for password reset mails.\n\t *\n\t * @param String $lamProMailText body\n\t */\n\tpublic function setLamProMailText($lamProMailText) {\n\t\t$this->lamProMailText = implode(LAMConfig::LINE_SEPARATOR, explode(\"\\r\\n\", $lamProMailText));\n\t}\n\n\t/**\n\t * Returns the bind user for jobs.\n\t *\n\t * @return String $jobsBindUser bind user\n\t */\n\tpublic function getJobsBindUser() {\n\t\treturn $this->jobsBindUser;\n\t}\n\n\t/**\n\t * Sets the bind user for jobs.\n\t *\n\t * @param String $jobsBindUser bind user\n\t */\n\tpublic function setJobsBindUser($jobsBindUser) {\n\t\t$this->jobsBindUser = $jobsBindUser;\n\t}\n\n\t/**\n\t * Returns the bind password for jobs.\n\t *\n\t * @return String $jobsBindPassword password\n\t */\n\tpublic function getJobsBindPassword() {\n\t\treturn $this->jobsBindPassword;\n\t}\n\n\t/**\n\t * Sets the bind password for jobs.\n\t *\n\t * @param String $jobsBindPassword password\n\t */\n\tpublic function setJobsBindPassword($jobsBindPassword) {\n\t\t$this->jobsBindPassword = $jobsBindPassword;\n\t}\n\n\t/**\n\t * Returns the database type for jobs.\n\t *\n\t * @return String $jobsDatabase database type\n\t */\n\tpublic function getJobsDatabase() {\n\t\tif (empty($this->jobsDatabase)) {\n\t\t\treturn 'SQLite';\n\t\t}\n\t\treturn $this->jobsDatabase;\n\t}\n\n\t/**\n\t * Sets the database type for jobs.\n\t *\n\t * @param String $jobsDatabase database type\n\t */\n\tpublic function setJobsDatabase($jobsDatabase) {\n\t\t$this->jobsDatabase = $jobsDatabase;\n\t}\n\n\t/**\n\t * Returns the host.\n\t *\n\t * @return String host\n\t */\n\tpublic function getJobsDBHost() {\n\t\treturn $this->jobsDBHost;\n\t}\n\n\t/**\n\t * Sets the host.\n\t *\n\t * @param String $jobsDBHost host\n\t */\n\tpublic function setJobsDBHost($jobsDBHost) {\n\t\t$this->jobsDBHost = $jobsDBHost;\n\t}\n\n\t/**\n\t * Returns the port.\n\t *\n\t * @return String port\n\t */\n\tpublic function getJobsDBPort() {\n\t\treturn $this->jobsDBPort;\n\t}\n\n\t/**\n\t * Sets the port.\n\t *\n\t * @param int $jobsDBPort port\n\t */\n\tpublic function setJobsDBPort($jobsDBPort) {\n\t\t$this->jobsDBPort = $jobsDBPort;\n\t}\n\n\t/**\n\t * Returns the DB user.\n\t *\n\t * @return String user name\n\t */\n\tpublic function getJobsDBUser() {\n\t\treturn $this->jobsDBUser;\n\t}\n\n\t/**\n\t * Sets the DB user.\n\t *\n\t * @param String $jobsDBUser user name\n\t */\n\tpublic function setJobsDBUser($jobsDBUser) {\n\t\t$this->jobsDBUser = $jobsDBUser;\n\t}\n\n\t/**\n\t * Returns the DB password.\n\t *\n\t * @return String password\n\t */\n\tpublic function getJobsDBPassword() {\n\t\treturn $this->jobsDBPassword;\n\t}\n\n\t/**\n\t * Sets the DB password.\n\t *\n\t * @param String $jobsDBPassword password\n\t */\n\tpublic function setJobsDBPassword($jobsDBPassword) {\n\t\t$this->jobsDBPassword = $jobsDBPassword;\n\t}\n\n\t/**\n\t * Returns the database name.\n\t *\n\t * @return String DB name\n\t */\n\tpublic function getJobsDBName() {\n\t\treturn $this->jobsDBName;\n\t}\n\n\t/**\n\t * Sets the database name\n\t *\n\t * @param String $jobsDBName DB name\n\t */\n\tpublic function setJobsDBName($jobsDBName) {\n\t\t$this->jobsDBName = $jobsDBName;\n\t}\n\n\t/**\n\t* Sets the settings for the jobs.\n\t*\n\t* @param array $settings list of job settings array(name => value)\n\t* @return boolean true if $settings has correct format\n\t*/\n\tpublic function setJobSettings($settings) {\n\t\tif (!is_array($settings)) {\n\t\t\treturn false;\n\t\t}\n\t\t$this->jobSettings = $settings;\n\t\treturn true;\n\t}\n\n\t/**\n\t* Returns a list of saved job settings.\n\t*\n\t* @return array list of settings: array(name => value)\n\t*/\n\tpublic function getJobSettings() {\n\t\treturn $this->jobSettings;\n\t}\n\n\t/**\n\t * Returns the job token.\n\t *\n\t * @return String job token\n\t */\n\tpublic function getJobToken() {\n\t\tif (empty($this->jobToken)) {\n\t\t\t$this->jobToken = getRandomNumber();\n\t\t}\n\t\treturn $this->jobToken;\n\t}\n\n\t/**\n\t * Returns if setting a specific password is allowed on password reset page.\n\t *\n\t * @return String 'true' or 'false'\n\t */\n\tpublic function getPwdResetAllowSpecificPassword() {\n\t\treturn $this->pwdResetAllowSpecificPassword;\n\t}\n\n\t/**\n\t * Sets if setting a specific password is allowed on password reset page.\n\t *\n\t * @param String $pwdResetAllowSpecificPassword 'true' or 'false'\n\t */\n\tpublic function setPwdResetAllowSpecificPassword($pwdResetAllowSpecificPassword) {\n\t\t$this->pwdResetAllowSpecificPassword = $pwdResetAllowSpecificPassword;\n\t}\n\n\t/**\n\t * Returns if displaying password on screen is allowed on password reset page.\n\t *\n\t * @return String 'true' or 'false'\n\t */\n\tpublic function getPwdResetAllowScreenPassword() {\n\t\treturn $this->pwdResetAllowScreenPassword;\n\t}\n\n\t/**\n\t * Sets if displaying password on screen is allowed on password reset page.\n\t *\n\t * @param String $pwdResetAllowScreenPassword 'true' or 'false'\n\t */\n\tpublic function setPwdResetAllowScreenPassword($pwdResetAllowScreenPassword) {\n\t\t$this->pwdResetAllowScreenPassword = $pwdResetAllowScreenPassword;\n\t}\n\n\t/**\n\t * Returns if force password change is set by default on password reset page.\n\t *\n\t * @return String 'true' or 'false'\n\t */\n\tpublic function getPwdResetForcePasswordChange() {\n\t\treturn $this->pwdResetForcePasswordChange;\n\t}\n\n\t/**\n\t * Sets if force password change is set by default on password reset page.\n\t *\n\t * @param String $pwdResetForcePasswordChange 'true' or 'false'\n\t */\n\tpublic function setPwdResetForcePasswordChange($pwdResetForcePasswordChange) {\n\t\t$this->pwdResetForcePasswordChange = $pwdResetForcePasswordChange;\n\t}\n\n\t/**\n\t * Returns default password output method on password reset page.\n\t *\n\t * @return integer LAMConfig::PWDRESET_DEFAULT_SCREEN/PWDRESET_DEFAULT_MAIL/PWDRESET_DEFAULT_BOTH\n\t */\n\tpublic function getPwdResetDefaultPasswordOutput() {\n\t\treturn $this->pwdResetDefaultPasswordOutput;\n\t}\n\n\t/**\n\t * Sets default password output method on password reset page.\n\t *\n\t * @param integer $pwdResetDefaultPasswordOutput LAMConfig::PWDRESET_DEFAULT_SCREEN/PWDRESET_DEFAULT_MAIL/PWDRESET_DEFAULT_BOTH\n\t */\n\tpublic function setPwdResetDefaultPasswordOutput($pwdResetDefaultPasswordOutput) {\n\t\t$this->pwdResetDefaultPasswordOutput = $pwdResetDefaultPasswordOutput;\n\t}\n\t/**\n\t * Returns the authentication type.\n\t *\n\t * @return string $twoFactorAuthentication authentication type\n\t */\n\tpublic function getTwoFactorAuthentication() {\n\t\tif (empty($this->twoFactorAuthentication)) {\n\t\t\treturn TwoFactorProviderService::TWO_FACTOR_NONE;\n\t\t}\n\t\treturn $this->twoFactorAuthentication;\n\t}\n\n\t/**\n\t * Sets the authentication type.\n\t *\n\t * @param string $twoFactorAuthentication authentication type\n\t */\n\tpublic function setTwoFactorAuthentication($twoFactorAuthentication) {\n\t\t$this->twoFactorAuthentication = $twoFactorAuthentication;\n\t}\n\n\t/**\n\t * Returns the authentication URL.\n\t *\n\t * @return string authentication URL\n\t */\n\tpublic function getTwoFactorAuthenticationURL() {\n\t\treturn implode(\"\\r\\n\", explode(LAMConfig::LINE_SEPARATOR, $this->twoFactorAuthenticationURL));\n\t}\n\n\t/**\n\t * Returns the authentication URL without formatting.\n\t *\n\t * @return string authentication URL\n\t */\n\tpublic function getTwoFactorAuthenticationURLRaw() {\n\t\treturn $this->twoFactorAuthenticationURL;\n\t}\n\n\t/**\n\t * Sets the authentication URL.\n\t *\n\t * @param string $twoFactorAuthenticationURL authentication URL\n\t */\n\tpublic function setTwoFactorAuthenticationURL($twoFactorAuthenticationURL) {\n\t\t$this->twoFactorAuthenticationURL = implode(LAMConfig::LINE_SEPARATOR, explode(\"\\r\\n\", $twoFactorAuthenticationURL));\n\t}\n\n\t/**\n\t * Sets the client id.\n\t *\n\t * @param string $clientId client id\n\t */\n\tpublic function setTwoFactorAuthenticationClientId($clientId) {\n\t\t$this->twoFactorAuthenticationClientId = $clientId;\n\t}\n\n\t/**\n\t * Returns the client id.\n\t *\n\t * @return string client id\n\t */\n\tpublic function getTwoFactorAuthenticationClientId() {\n\t\treturn $this->twoFactorAuthenticationClientId;\n\t}\n\n\t/**\n\t * Sets the secret key.\n\t *\n\t * @param string $secretKey secret key\n\t */\n\tpublic function setTwoFactorAuthenticationSecretKey($secretKey) {\n\t\t$this->twoFactorAuthenticationSecretKey = $secretKey;\n\t}\n\n\t/**\n\t * Returns the secret key.\n\t *\n\t * @return string secret key\n\t */\n\tpublic function getTwoFactorAuthenticationSecretKey() {\n\t\treturn $this->twoFactorAuthenticationSecretKey;\n\t}\n\n\t/**\n\t * Sets the domain.\n\t *\n\t * @param string $domain domain\n\t */\n\tpublic function setTwoFactorAuthenticationDomain($domain) {\n\t\t$this->twoFactorAuthenticationDomain = $domain;\n\t}\n\n\t/**\n\t * Returns the domain.\n\t *\n\t * @return string domain\n\t */\n\tpublic function getTwoFactorAuthenticationDomain() {\n\t\treturn $this->twoFactorAuthenticationDomain;\n\t}\n\n\t/**\n\t * Returns if SSL certificate verification is turned off.\n\t *\n\t * @return bool SSL certificate verification is turned off\n\t */\n\tpublic function getTwoFactorAuthenticationInsecure() {\n\t\treturn $this->twoFactorAuthenticationInsecure;\n\t}\n\n\t/**\n\t * Sets if SSL certificate verification is turned off.\n\t *\n\t * @param boolean $twoFactorAuthenticationInsecure SSL certificate verification is turned off\n\t */\n\tpublic function setTwoFactorAuthenticationInsecure($twoFactorAuthenticationInsecure) {\n\t\t$this->twoFactorAuthenticationInsecure = $twoFactorAuthenticationInsecure;\n\t}\n\n\t/**\n\t * Returns the authentication label.\n\t *\n\t * @return string authentication label\n\t */\n\tpublic function getTwoFactorAuthenticationLabel() {\n\t\treturn $this->twoFactorAuthenticationLabel;\n\t}\n\n\t/**\n\t * Sets the authentication label.\n\t *\n\t * @param string $twoFactorAuthenticationLabel authentication label\n\t */\n\tpublic function setTwoFactorAuthenticationLabel($twoFactorAuthenticationLabel) {\n\t\t$this->twoFactorAuthenticationLabel = $twoFactorAuthenticationLabel;\n\t}\n\n\t/**\n\t * Returns if 2nd factor is optional.\n\t *\n\t * @return bool 2nd factor is optional\n\t */\n\tpublic function getTwoFactorAuthenticationOptional() {\n\t\treturn boolval($this->twoFactorAuthenticationOptional);\n\t}\n\n\t/**\n\t * Sets if 2nd factor is optional.\n\t *\n\t * @param boolean $twoFactorAuthenticationOptional 2nd factor is optional\n\t */\n\tpublic function setTwoFactorAuthenticationOptional($twoFactorAuthenticationOptional) {\n\t\t$this->twoFactorAuthenticationOptional = $twoFactorAuthenticationOptional;\n\t}\n\n\t/**\n\t * Returns the caption HTML.\n\t *\n\t * @return string caption HTML\n\t */\n\tpublic function getTwoFactorAuthenticationCaption() {\n\t\treturn $this->twoFactorAuthenticationCaption;\n\t}\n\n\t/**\n\t * Sets the caption HTML.\n\t *\n\t * @param string $twoFactorAuthenticationCaption caption HTML\n\t */\n\tpublic function setTwoFactorAuthenticationCaption($twoFactorAuthenticationCaption) {\n\t\t$this->twoFactorAuthenticationCaption = $twoFactorAuthenticationCaption;\n\t}\n\n\t/**\n\t * Returns the user attribute.\n\t *\n\t * @return string user attribute\n\t */\n\tpublic function getTwoFactorAuthenticationAttribute() {\n\t\tif (empty($this->twoFactorAuthenticationAttribute)) {\n\t\t\treturn 'uid';\n\t\t}\n\t\treturn $this->twoFactorAuthenticationAttribute;\n\t}\n\n\t/**\n\t * Sets the user attribute.\n\t *\n\t * @param string $twoFactorAuthenticationAttribute user attribute\n\t */\n\tpublic function setTwoFactorAuthenticationAttribute($twoFactorAuthenticationAttribute) {\n\t\t$this->twoFactorAuthenticationAttribute = $twoFactorAuthenticationAttribute;\n\t}\n\n\t/**\n\t * Returns the DN part to hide.\n\t *\n\t * @return string DN part\n\t */\n\tpublic function getHideDnPart() {\n\t\treturn $this->hideDnPart;\n\t}\n\n\t/**\n\t * Sets the DN part to hide.\n\t *\n\t * @param string $hideDnPart DN part\n\t */\n\tpublic function setHideDnPart($hideDnPart) {\n\t\t$this->hideDnPart = $hideDnPart;\n\t}\n\n\t/**\n\t * Returns the minimum password length.\n\t *\n\t * @return string minimum length\n\t */\n\tpublic function getPwdPolicyMinLength() {\n\t\treturn $this->pwdPolicyMinLength;\n\t}\n\n\t/**\n\t * Sets the minimum password length.\n\t *\n\t * @param string $pwdPolicyMinLength minimum length\n\t */\n\tpublic function setPwdPolicyMinLength($pwdPolicyMinLength) {\n\t\t$this->pwdPolicyMinLength = $pwdPolicyMinLength;\n\t}\n\n\t/**\n\t * Returns the minimum of lowercase characters.\n\t *\n\t * @return string minimum\n\t */\n\tpublic function getpwdPolicyMinLowercase() {\n\t\treturn $this->pwdPolicyMinLowercase;\n\t}\n\n\t/**\n\t * Sets the minimum of lowercase characters.\n\t *\n\t * @param string $pwdPolicyMinLowercase minimum\n\t */\n\tpublic function setPwdPolicyMinLowercase($pwdPolicyMinLowercase) {\n\t\t$this->pwdPolicyMinLowercase = $pwdPolicyMinLowercase;\n\t}\n\n\t/**\n\t * Returns the minimum of uppercase characters.\n\t *\n\t * @return string minimum\n\t */\n\tpublic function getPwdPolicyMinUppercase() {\n\t\treturn $this->pwdPolicyMinUppercase;\n\t}\n\n\t/**\n\t * Sets the minimum of uppercase characters.\n\t *\n\t * @param string $pwdPolicyMinUppercase minimum\n\t */\n\tpublic function setPwdPolicyMinUppercase($pwdPolicyMinUppercase) {\n\t\t$this->pwdPolicyMinUppercase = $pwdPolicyMinUppercase;\n\t}\n\n\t/**\n\t * Returns the minimum of numeric characters.\n\t *\n\t * @return string minimum\n\t */\n\tpublic function getPwdPolicyMinNumeric() {\n\t\treturn $this->pwdPolicyMinNumeric;\n\t}\n\n\t/**\n\t * Sets the minimum of numeric characters.\n\t *\n\t * @param string $pwdPolicyMinNumeric minimum\n\t */\n\tpublic function setPwdPolicyMinNumeric($pwdPolicyMinNumeric) {\n\t\t$this->pwdPolicyMinNumeric = $pwdPolicyMinNumeric;\n\t}\n\n\t/**\n\t * Returns the minimum of symbolic characters.\n\t *\n\t * @return string minimum\n\t */\n\tpublic function getPwdPolicyMinSymbolic() {\n\t\treturn $this->pwdPolicyMinSymbolic;\n\t}\n\n\t/**\n\t * Sets the minimum of symbolic characters.\n\t *\n\t * @param string $pwdPolicyMinSymbolic minimum\n\t */\n\tpublic function setPwdPolicyMinSymbolic($pwdPolicyMinSymbolic) {\n\t\t$this->pwdPolicyMinSymbolic = $pwdPolicyMinSymbolic;\n\t}\n\n}\n\n\n/**\n* This class manages config.cfg.\n*\n* @package configuration\n*/\nclass LAMCfgMain {\n\n\t/** PHP error reporting setting as E_ALL & ~E_NOTICE */\n\tconst ERROR_REPORTING_DEFAULT = 'default';\n\t/** PHP error reporting setting from php.ini */\n\tconst ERROR_REPORTING_SYSTEM = 'system';\n\t/** PHP error reporting setting as E_ALL | E_STRICT */\n\tconst ERROR_REPORTING_ALL = 'all';\n\n\t/** send license warnings via email */\n\tconst LICENSE_WARNING_EMAIL = 'email';\n\t/** display license warnings on screen */\n\tconst LICENSE_WARNING_SCREEN = 'screen';\n\t/** send license warnings via email + display on screen */\n\tconst LICENSE_WARNING_ALL = 'all';\n\t/** no license warning */\n\tconst LICENSE_WARNING_NONE = 'none';\n\n\t/** SSL encryption for mail sending */\n\tconst SMTP_SSL = 'SSL';\n\t/** TLS encryption for mail sending */\n\tconst SMTP_TLS = 'TLS';\n\t/** No encryption for mail sending */\n\tconst SMTP_NONE = 'NONE';\n\n\t/** store configuration on local file system */\n\tconst DATABASE_FILE_SYSTEM = 'files';\n\t/** store configuration in MySQL database */\n\tconst DATABASE_MYSQL = 'mysql';\n\n\t/** Default profile */\n\tpublic $default;\n\n\t/** Password to change config.cfg */\n\tprivate $password;\n\n\t/** Time of inactivity before session times out (minutes) */\n\tpublic $sessionTimeout;\n\n\t/** log level */\n\tpublic $logLevel;\n\n\t/** log destination (\"SYSLOG\":syslog, \"/...\":file, \"NONE\":none, \"REMOTE\":server:port) */\n\tpublic $logDestination;\n\n\t/** list of hosts which may access LAM */\n\tpublic $allowedHosts;\n\n\t/** list of hosts which may access LAM Pro self service */\n\tpublic $allowedHostsSelfService;\n\n\t/** minimum length for passwords */\n\tpublic $passwordMinLength = 0;\n\n\t/** minimum uppercase characters */\n\tpublic $passwordMinUpper = 0;\n\n\t/** minimum lowercase characters */\n\tpublic $passwordMinLower = 0;\n\n\t/** minimum numeric characters */\n\tpublic $passwordMinNumeric = 0;\n\n\t/** minimum symbol characters */\n\tpublic $passwordMinSymbol = 0;\n\n\t/** minimum character classes (upper, lower, numeric, symbols) */\n\tpublic $passwordMinClasses = 0;\n\n\t/** number of password rules that must match (-1 = all) */\n\tpublic $checkedRulesCount = -1;\n\n\t/** password may contain the user name */\n\tpublic $passwordMustNotContainUser = 'false';\n\n\t/** password may contain more than 2 characters of user/first/last name */\n\tpublic $passwordMustNotContain3Chars = 'false';\n\n\t/** external URL for password checking (e.g. https://domain.com/url/{SHA1}) */\n\tpublic $externalPwdCheckUrl = null;\n\n\t/** path to config file */\n\tprivate $conffile;\n\n\t/** uploaded SSL certificate that is stored to disk on save() */\n\tprivate $uploadedSSLCaCert = null;\n\n\t/** SSL certificate should be deleted on save() */\n\tprivate $delSSLCaCert = false;\n\n\t/** error reporting */\n\tpublic $errorReporting = self::ERROR_REPORTING_DEFAULT;\n\n\t/** license data */\n\tprivate $license = '';\n\n\t/** license warning email from address */\n\tpublic $licenseEmailFrom = '';\n\n\t/** license warning email TO address(es) separated by \";\" */\n\tpublic $licenseEmailTo = '';\n\n\t/** license warning email was last sent for this expiration date */\n\tpublic $licenseEmailDateSent = '';\n\n\t/** type of license warning (email/screen/both/none) */\n\tpublic $licenseWarningType = '';\n\n\t/** mail server (server:port) */\n\tpublic $mailServer = '';\n\n\t/** mail server user */\n\tpublic $mailUser = '';\n\n\t/** mail server password */\n\tpublic $mailPassword = '';\n\n\t/**\n\t * @var string encryption type for SMTP connection\n\t */\n\tpublic $mailEncryption = '';\n\n\t/** database type */\n\tpublic $configDatabaseType = self::DATABASE_FILE_SYSTEM;\n\n\t/** database server name */\n\tpublic $configDatabaseServer = '';\n\n\t/** database port */\n\tpublic $configDatabasePort = '';\n\n\t/** database name */\n\tpublic $configDatabaseName = '';\n\n\t/** database user */\n\tpublic $configDatabaseUser = '';\n\n\t/** database password */\n\tpublic $configDatabasePassword = '';\n\n\t/** list of data fields to save in config file */\n\tprivate $settings = array(\"password\", \"default\", \"sessionTimeout\",\n\t\t\"logLevel\", \"logDestination\", \"allowedHosts\", \"passwordMinLength\",\n\t\t\"passwordMinUpper\", \"passwordMinLower\", \"passwordMinNumeric\",\n\t\t\"passwordMinClasses\", \"passwordMinSymbol\", 'checkedRulesCount',\n\t\t'passwordMustNotContainUser', 'passwordMustNotContain3Chars',\n\t\t'externalPwdCheckUrl',\n\t\t'errorReporting', 'allowedHostsSelfService',\n\t\t'license', 'licenseEmailFrom', 'licenseEmailTo', 'licenseWarningType', 'licenseEmailDateSent',\n\t\t'mailServer', 'mailUser', 'mailPassword', 'mailEncryption', 'configDatabaseType',\n\t\t'configDatabaseServer', 'configDatabasePort', 'configDatabaseName', 'configDatabaseUser',\n\t\t'configDatabasePassword'\n\t);\n\n\t/** persistence settings are always stored on local file system */\n\tprivate $persistenceSettings = array(\n\t\t'configDatabaseType', 'configDatabaseServer',\n\t\t'configDatabasePort', 'configDatabaseName', 'configDatabaseUser',\n\t\t'configDatabasePassword', 'license'\n\t);\n\n\t/**\n\t * Loads preferences from config file\n\t *\n\t * @param string $fileName file path for config file\n\t */\n\tfunction __construct($fileName = null) {\n\t\tif ($fileName === null) {\n\t\t\t$this->conffile = __DIR__ . \"/../config/config.cfg\";\n\t\t}\n\t\telse {\n\t\t\t$this->conffile = $fileName;\n\t\t}\n\t\t// set default values\n\t\t$this->sessionTimeout = 30;\n\t\t$this->logLevel = LOG_NOTICE;\n\t\t$this->logDestination = \"SYSLOG\";\n\t\t$this->allowedHosts = \"\";\n\t\t$this->allowedHostsSelfService = '';\n\t\ttry {\n\t\t\t$this->reload();\n\t\t} catch (LAMException $e) {\n\t\t\tsyslog(LOG_ERR, 'Error loading main config: ' . $e->getTitle() . ' ' . $e->getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * Exports the configuration data.\n\t *\n\t * @return array config data\n\t */\n\tpublic function exportData($skipPersistenceSettings = false): array {\n\t\t$data = array();\n\t\tforeach ($this->settings as $setting) {\n\t\t\tif ($skipPersistenceSettings && in_array($setting, $this->persistenceSettings)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$data[$setting] = $this->$setting;\n\t\t}\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Imports configuration data.\n\t *\n\t * @param array $data config data\n\t * @throws LAMException import error\n\t */\n\tpublic function importData($data) {\n\t\tforeach ($data as $dataKey => $dataValue) {\n\t\t\tif (!in_array($dataKey, $this->settings)) {\n\t\t\t\tlogNewMessage(LOG_WARNING, 'Ignored setting during import: ' . $dataKey);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!(($dataValue === null) || is_array($dataValue) || is_string($dataValue) || is_int($dataValue) || is_bool($dataValue))) {\n\t\t\t\tthrow new LAMException('Invalid import data type for ' . htmlspecialchars($dataKey) . ': ' . gettype($dataValue));\n\t\t\t}\n\t\t\t$this->$dataKey = $dataValue;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the content of the server certificates file\n\t *\n\t * @return null|string certificates\n\t */\n\tpublic function exportCertificates() {\n\t\t$fileName = $this->getSSLCaCertPath();\n\t\tif ($fileName === null) {\n\t\t\treturn null;\n\t\t}\n\t\t$content = null;\n\t\t$handle = @fopen($fileName, \"r\");\n\t\tif ($handle) {\n\t\t\t$content = fread($handle, 10000000);\n\t\t\tfclose($handle);\n\t\t}\n\t\treturn $content;\n\t}\n\n\t/**\n\t * Imports the server certificates.\n\t *\n\t * @param null|string $certsContent certificates\n\t * @throws LAMException write to file failed\n\t */\n\tpublic function importCertificates($certsContent) {\n\t\t$fileName = $this->getSSLCaCertPath();\n\t\tif (empty($certsContent)) {\n\t\t\tif ($fileName !== null) {\n\t\t\t\tunlink($fileName);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\t$fileName = $this->getInternalSSLCaCertFileName();\n\t\t$handle = @fopen($fileName, \"wb\");\n\t\tif ($handle) {\n\t\t\tfputs($handle, $certsContent);\n\t\t\tfclose($handle);\n\t\t\t@chmod($fileName, 0600);\n\t\t}\n\t\telse {\n\t\t\tthrow new LAMException(printf(_('Unable to write file %s.'), $fileName));\n\t\t}\n\t}\n\n\t/**\n\t * Reloads preferences from config file config.cfg\n\t *\n\t * @throws LAMException error reading config\n\t */\n\tprivate function reload() : void {\n\t\tif (is_file($this->conffile)) {\n\t\t\t$file = @fopen($this->conffile, \"r\");\n\t\t\tif (!$file) {\n\t\t\t\tthrow new LAMException(_('The config file is not readable.'));\n\t\t\t}\n\t\t\twhile (!feof($file)) {\n\t\t\t\t$line = fgets($file, 1024);\n\t\t\t\t$line = trim($line);  // remove spaces at the beginning and end\n\t\t\t\tif (($line == \"\")||($line[0] == \"#\")) {\n\t\t\t\t\tcontinue; // ignore comments\n\t\t\t\t}\n\t\t\t\t// search keywords\n\t\t\t\tfor ($i = 0; $i < sizeof($this->settings); $i++) {\n\t\t\t\t\t$keyword = $this->settings[$i];\n\t\t\t\t\t$keylen = strlen($keyword);\n\t\t\t\t\tif (strtolower(substr($line, 0, $keylen + 2)) == strtolower($keyword . \": \")) {\n\t\t\t\t\t\t$this->$keyword = substr($line, $keylen + 2, strlen($line) - $keylen - 2);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfclose($file);\n\t\t}\n\t\tif ($this->configDatabaseType === self::DATABASE_MYSQL) {\n\t\t\t$this->loadFromDb();\n\t\t}\n\t}\n\n\t/**\n\t * Loads the settings from the database.\n\t * Persistence settings are ignored as they must be on local file system.\n\t *\n\t * @return bool true when ok\n\t * @throws LAMException error reading config\n\t */\n\tprivate function loadFromDb() : void {\n\t\t$configDb = new ConfigurationDatabase($this);\n\t\ttry {\n\t\t\t$pdo = $configDb->getPdo();\n\t\t\t$result = $pdo->query(\"SELECT value FROM \" . ConfigurationDatabase::TABLE_MAIN_CONFIG . ' WHERE name=\\'config\\'');\n\t\t\tif ($result === false) {\n\t\t\t\tsyslog(LOG_ERR, 'Main configuration table query failed.');\n\t\t\t\tthrow new LAMException(_('Unable to connect to configuration database.'));\n\t\t\t}\n\t\t\t$data = $result->fetchAll();\n\t\t\tif (empty($data)) {\n\t\t\t\tsyslog(LOG_ERR, 'Main configuration table is empty.');\n\t\t\t\tthrow new LAMException(_('Unable to connect to configuration database.'));\n\t\t\t}\n\t\t\t$jsonData = json_decode($data[0]['value'], true);\n\t\t\tforeach ($this->persistenceSettings as $persistenceSetting) {\n\t\t\t\tif (isset($jsonData[$persistenceSetting])) {\n\t\t\t\t\tunset($jsonData[$persistenceSetting]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->importData($jsonData);\n\t\t}\n\t\tcatch (PDOException $e) {\n\t\t\tsyslog(LOG_ERR, 'Unable to read main config: ' . $e->getMessage());\n\t\t\tthrow new LAMException(_('Unable to connect to configuration database.'));\n\t\t}\n\t\tcatch (LAMException $e) {\n\t\t\tsyslog(LOG_ERR, 'Unable to import main config: ' . $e->getMessage());\n\t\t\tthrow new LAMException(_('Unable to connect to configuration database.'));\n\t\t}\n\t}\n\n\t/**\n\t * Saves the configuration to the persistence layer.\n\t */\n\tpublic function save() {\n\t\tif ($this->configDatabaseType === self::DATABASE_MYSQL) {\n\t\t\t$this->saveLocal(true);\n\t\t\t$this->saveDb();\n\t\t}\n\t\telse {\n\t\t\t$this->saveLocal(false);\n\t\t}\n\t\t// store SSL certificate\n\t\tif ($this->uploadedSSLCaCert != null) {\n\t\t\t$sslPath = $this->getInternalSSLCaCertFileName();\n\t\t\t$file = @fopen($sslPath, \"w\");\n\t\t\tif ($file) {\n\t\t\t\tfputs($file, $this->uploadedSSLCaCert);\n\t\t\t\tfclose($file);\n\t\t\t\t@chmod($sslPath, 0600);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tStatusMessage(\"ERROR\", _(\"Cannot write certificate file. Please check the permissions of config/serverCerts.pem.\"));\n\t\t\t}\n\t\t}\n\t\t// delete SSL certificate\n\t\tif ($this->delSSLCaCert === true) {\n\t\t\t$sslPath = $this->getInternalSSLCaCertFileName();\n\t\t\t$result = @unlink($sslPath);\n\t\t\tif (!$result) {\n\t\t\t\tStatusMessage(\"ERROR\", _(\"Cannot write certificate file. Please check the permissions of config/serverCerts.pem.\"));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Saves the config data to the database.\n\t */\n\tprivate function saveDb() : void {\n\t\t$configDb = new ConfigurationDatabase($this);\n\t\t$pdo = $configDb->getPdo();\n\t\t$json = json_encode($this->exportData(true));\n\t\t$nameKey = 'config';\n\t\t$pdo->beginTransaction();\n\t\t// remove existing data\n\t\t$sql = 'delete from ' . ConfigurationDatabase::TABLE_MAIN_CONFIG . ' where name = \"' . $nameKey . '\";';\n\t\t$pdo->exec($sql);\n\t\t// new data\n\t\t$stmt = $pdo->prepare('insert into ' . ConfigurationDatabase::TABLE_MAIN_CONFIG . ' (name, value) VALUES (?, ?)');\n\t\t$stmt->execute(array($nameKey, $json));\n\t\t$pdo->commit();\n\t}\n\n\t/**\n\t * Saves preferences to config file config.cfg\n\t *\n\t * @param bool $persistenceOnly store only persistence related data\n\t */\n\tpublic function saveLocal(bool $persistenceOnly) : void {\n\t\tif (is_file($this->conffile)) {\n\t\t\t$file = fopen($this->conffile, \"r\");\n\t\t\t$file_array = array();\n\t\t\t// read config file\n\t\t\twhile (!feof($file)) {\n\t\t\t\t$configLine = fgets($file, 1024);\n\t\t\t\tif (($configLine === false) || ($configLine === \"\") || ($configLine === \"\\n\") || ($configLine[0] == \"#\")) {\n\t\t\t\t\tcontinue; // ignore comments and empty lines\n\t\t\t\t}\n\t\t\t\tarray_push($file_array, $configLine);\n\t\t\t}\n\t\t\tfclose($file);\n\t\t\t// generate new configuration file\n\t\t\t$saved = array();\n\t\t\tfor ($i = 0; $i < sizeof($file_array); $i++) {\n\t\t\t\t$line = trim($file_array[$i]);\n\t\t\t\tif (($line == \"\")||($line[0] == \"#\")) {\n\t\t\t\t\tcontinue; // ignore comments and empty lines\n\t\t\t\t}\n\t\t\t\t// search keywords\n\t\t\t\tfor ($k = 0; $k < sizeof($this->settings); $k++) {\n\t\t\t\t\t$keyword = $this->settings[$k];\n\t\t\t\t\tif ($persistenceOnly && !in_array($keyword, $this->persistenceSettings)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t$keylen = strlen($keyword);\n\t\t\t\t\tif (strtolower(substr($line, 0, $keylen + 1)) == strtolower($keyword . \":\")) {\n\t\t\t\t\t\t$file_array[$i] = $keyword . \": \" . $this->$keyword . \"\\n\";\n\t\t\t\t\t\t$saved[] = $keyword;\t// mark keyword as saved\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!$persistenceOnly) {\n\t\t\t// check if we have to add new entries (e.g. if user upgraded LAM and has an old config file)\n\t\t\tif (!in_array(\"password\", $saved)) {\n\t\t\t\tarray_push($file_array, \"password: \" . $this->password . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"default\", $saved)) {\n\t\t\t\tarray_push($file_array, \"default: \" . $this->default . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"sessionTimeout\", $saved)) {\n\t\t\t\tarray_push($file_array, \"sessionTimeout: \" . $this->sessionTimeout . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"logLevel\", $saved)) {\n\t\t\t\tarray_push($file_array, \"logLevel: \" . $this->logLevel . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"logDestination\", $saved)) {\n\t\t\t\tarray_push($file_array, \"logDestination: \" . $this->logDestination . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"allowedHosts\", $saved)) {\n\t\t\t\tarray_push($file_array, \"allowedHosts: \" . $this->allowedHosts . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"allowedHostsSelfService\", $saved)) {\n\t\t\t\tarray_push($file_array, \"allowedHostsSelfService: \" . $this->allowedHostsSelfService . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"passwordMinLength\", $saved)) {\n\t\t\t\tarray_push($file_array, \"passwordMinLength: \" . $this->passwordMinLength . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"passwordMinUpper\", $saved)) {\n\t\t\t\tarray_push($file_array, \"passwordMinUpper: \" . $this->passwordMinUpper . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"passwordMinLower\", $saved)) {\n\t\t\t\tarray_push($file_array, \"passwordMinLower: \" . $this->passwordMinLower . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"passwordMinNumeric\", $saved)) {\n\t\t\t\tarray_push($file_array, \"passwordMinNumeric: \" . $this->passwordMinNumeric . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"passwordMinSymbol\", $saved)) {\n\t\t\t\tarray_push($file_array, \"passwordMinSymbol: \" . $this->passwordMinSymbol . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"passwordMinClasses\", $saved)) {\n\t\t\t\tarray_push($file_array, \"passwordMinClasses: \" . $this->passwordMinClasses . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"checkedRulesCount\", $saved)) {\n\t\t\t\tarray_push($file_array, \"checkedRulesCount: \" . $this->checkedRulesCount . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"passwordMustNotContain3Chars\", $saved)) {\n\t\t\t\tarray_push($file_array, \"passwordMustNotContain3Chars: \" . $this->passwordMustNotContain3Chars . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"passwordMustNotContainUser\", $saved)) {\n\t\t\t\tarray_push($file_array, \"passwordMustNotContainUser: \" . $this->passwordMustNotContainUser . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"externalPwdCheckUrl\", $saved)) {\n\t\t\t\tarray_push($file_array, \"externalPwdCheckUrl: \" . $this->externalPwdCheckUrl . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"errorReporting\", $saved)) {\n\t\t\t\tarray_push($file_array, \"errorReporting: \" . $this->errorReporting . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"license\", $saved)) {\n\t\t\t\tarray_push($file_array, \"license: \" . $this->license . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"licenseEmailFrom\", $saved)) {\n\t\t\t\tarray_push($file_array, \"licenseEmailFrom: \" . $this->licenseEmailFrom . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"licenseEmailTo\", $saved)) {\n\t\t\t\tarray_push($file_array, \"licenseEmailTo: \" . $this->licenseEmailTo . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"licenseEmailDateSent\", $saved)) {\n\t\t\t\tarray_push($file_array, \"licenseEmailDateSent: \" . $this->licenseEmailDateSent . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"licenseWarningType\", $saved)) {\n\t\t\t\tarray_push($file_array, \"licenseWarningType: \" . $this->licenseWarningType . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"mailServer\", $saved)) {\n\t\t\t\tarray_push($file_array, \"mailServer: \" . $this->mailServer . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"mailUser\", $saved)) {\n\t\t\t\tarray_push($file_array, \"mailUser: \" . $this->mailUser . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"mailPassword\", $saved)) {\n\t\t\t\tarray_push($file_array, \"mailPassword: \" . $this->mailPassword . \"\\n\");\n\t\t\t}\n\t\t\tif (!in_array(\"mailEncryption\", $saved)) {\n\t\t\t\tarray_push($file_array, \"mailEncryption: \" . $this->mailEncryption . \"\\n\");\n\t\t\t}\n\t\t}\n\t\tif (!in_array(\"configDatabaseType\", $saved)) {\n\t\t\tarray_push($file_array, \"configDatabaseType: \" . $this->configDatabaseType . \"\\n\");\n\t\t}\n\t\tif (!in_array(\"configDatabaseServer\", $saved)) {\n\t\t\tarray_push($file_array, \"configDatabaseServer: \" . $this->configDatabaseServer . \"\\n\");\n\t\t}\n\t\tif (!in_array(\"configDatabasePort\", $saved)) {\n\t\t\tarray_push($file_array, \"configDatabasePort: \" . $this->configDatabasePort . \"\\n\");\n\t\t}\n\t\tif (!in_array(\"configDatabaseName\", $saved)) {\n\t\t\tarray_push($file_array, \"configDatabaseName: \" . $this->configDatabaseName . \"\\n\");\n\t\t}\n\t\tif (!in_array(\"configDatabaseUser\", $saved)) {\n\t\t\tarray_push($file_array, \"configDatabaseUser: \" . $this->configDatabaseUser . \"\\n\");\n\t\t}\n\t\tif (!in_array(\"configDatabasePassword\", $saved)) {\n\t\t\tarray_push($file_array, \"configDatabasePassword: \" . $this->configDatabasePassword . \"\\n\");\n\t\t}\n\n\t\t$file = @fopen($this->conffile, \"w\");\n\t\tif ($file) {\n\t\t\tfor ($i = 0; $i < sizeof($file_array); $i++) {\n\t\t\t\tfputs($file, $file_array[$i]);\n\t\t\t}\n\t\t\tfclose($file);\n\t\t}\n\t\telse {\n\t\t\tStatusMessage(\"ERROR\", \"\", _(\"Cannot open config file!\") . \" (\" . $this->conffile . \")\");\n\t\t}\n\t}\n\n\t/**\n\t * Sets a new config password.\n\t *\n\t * @param String $password new password\n\t */\n\tpublic function setPassword($password) {\n\t\t$this->password = $this->hashPassword($password, generateSalt(16));\n\t}\n\n\t/**\n\t * Checks if the given password matches.\n\t *\n\t * @param String $password password\n\t * @return boolean true, if password matches\n\t */\n\tpublic function checkPassword($password) {\n\t\tif (strpos($this->password, \"{SSHA}\") === 0) {\n\t\t\t$value = substr($this->password, strlen(\"{SSHA}\"));\n\t\t\t$parts = explode(\" \", $value);\n\t\t\t$salt = base64_decode($parts[1]);\n\t\t\t$hash = \"{SSHA}\" . base64_encode(hex2bin(sha1($password . $salt))) . \" \" . base64_encode($salt);\n\t\t\treturn ($hash === $this->password);\n\t\t}\n\t\telseif (strpos($this->password, \"{CRYPT-SHA512}\") === 0) {\n\t\t\t$value = substr($this->password, strlen(\"{CRYPT-SHA512}\"));\n\t\t\t$parts = explode(\" \", $value);\n\t\t\t$salt = base64_decode($parts[1]);\n\t\t\treturn ($this->hashPassword($password, $salt) === $this->password);\n\t\t}\n\t\telse {\n\t\t\t// old nonhashed password\n\t\t\treturn ($password === $this->password);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the hashed password.\n\t *\n\t * @param String $password password\n\t * @param String $salt salt\n\t * @return String hash value\n\t */\n\tprivate function hashPassword($password, $salt) {\n\t\treturn \"{CRYPT-SHA512}\" . crypt($password, '$6$' . $salt) . \" \" . base64_encode($salt);\n\t}\n\n\t/**\n\t * Returns if the configuration file is writable.\n\t *\n\t * @return boolean writable\n\t */\n\tpublic function isWritable() : bool {\n\t\treturn is_writeable($this->conffile);\n\t}\n\n\t/**\n\t * Returns if the configuration file is existing.\n\t *\n\t * @return boolean exists\n\t */\n\tpublic function isConfigFileExisting() {\n\t\treturn file_exists($this->conffile);\n\t}\n\n\t/**\n\t * Tries to copy the config file from sample config.\n\t *\n\t * @return boolean copied\n\t */\n\tpublic function installSampleConfig() {\n\t\t$samplePath = dirname(dirname(__FILE__)) . '/config/config.cfg.sample';\n\t\treturn file_exists($samplePath) && copy($samplePath, $this->conffile);\n\t}\n\n\t/**\n\t * Returns the path to the SSL CA certificate file that overrides the system certificates.\n\t *\n\t * @return String path to certificate file or null if certificate is not overridden\n\t */\n\tpublic function getSSLCaCertPath() {\n\t\t$path = $this->getInternalSSLCaCertFileName();\n\t\tif (file_exists($path)) {\n\t\t\treturn $path;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the file name that will be used internally to store the CA file.\n\t *\n\t * @return String file name\n\t */\n\tprivate function getInternalSSLCaCertFileName() {\n\t\treturn dirname(__FILE__) . '/../config/serverCerts.pem';\n\t}\n\n\t/**\n\t * Uploads a new SSL CA cert.\n\t *\n\t * @param String $cert file content in DER/PEM format\n\t * @return mixed TRUE if format is correct, error message if file is not accepted\n\t */\n\tpublic function uploadSSLCaCert($cert) {\n\t\tif (strpos($cert, '-----BEGIN CERTIFICATE-----') === false) {\n\t\t\t$pem = @chunk_split(@base64_encode($cert), 64, \"\\n\");\n\t\t\t$cert = \"-----BEGIN CERTIFICATE-----\\n\" . $pem . \"-----END CERTIFICATE-----\\n\";\n\t\t}\n\t\telse {\n\t\t\t// remove any junk before first \"-----BEGIN CERTIFICATE-----\"\n\t\t\t$pos = strpos($cert, '-----BEGIN CERTIFICATE-----');\n\t\t\t$cert = substr($cert, $pos);\n\t\t}\n\t\t$pemData = @openssl_x509_parse($cert);\n\t\tif ($pemData === false) {\n\t\t\treturn _('Please provide a file in DER or PEM format.');\n\t\t}\n\t\t$existingCerts = $this->getSSLCaCertificateContent();\n\t\tif (!empty($existingCerts)) {\n\t\t\t// merge with existing certificates\n\t\t\t$existingList = $this->splitSSLCaCertificateContent($existingCerts);\n\t\t\t$newList = $this->splitSSLCaCertificateContent($cert);\n\t\t\t$this->uploadedSSLCaCert = implode(\"\\n\", array_unique(array_merge($existingList, $newList)));\n\t\t}\n\t\telse {\n\t\t\t$this->uploadedSSLCaCert = $cert;\n\t\t}\n\t\t$this->delSSLCaCert = false;\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns the name of a temporary file in tmp that contains the SSL certificate.\n\t * The file contains either the stored data in serverCerts or the uploaded data.\n\t *\n\t * @return String file name or null if no certificate was set\n\t */\n\tpublic function getSSLCaCertTempFileName() {\n\t\tif ($this->delSSLCaCert) {\n\t\t\treturn null;\n\t\t}\n\t\t// get certificate data\n\t\t$content = $this->getSSLCaCertificateContent();\n\t\tif ($content == null) {\n\t\t\treturn null;\n\t\t}\n\t\t// write to temp file\n\t\t$fileName = time() . getRandomNumber() . '.pem';\n\t\t$path = dirname(__FILE__) . '/../tmp/' . $fileName;\n\t\t$handle = @fopen($path, \"wb\");\n\t\t@chmod($path, 0600);\n\t\tif ($handle) {\n\t\t\t$content = fputs($handle, $content);\n\t\t\tfclose($handle);\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t\treturn $fileName;\n\t}\n\n\t/**\n\t * Marks a single or all SSL CA certificate files for deletion.\n\t * The changes take effect on save().\n\t *\n\t * @param int $index certificate index, null deletes all certificates (default: null)\n\t */\n\tpublic function deleteSSLCaCert($index = null) {\n\t\tif ($index == null) {\n\t\t\t// delete all\n\t\t\t$this->delSSLCaCert = true;\n\t\t\treturn;\n\t\t}\n\t\t$content = $this->getSSLCaCertificateContent();\n\t\t$list = $this->splitSSLCaCertificateContent($content);\n\t\tunset($list[$index]);\n\t\tif (sizeof($list) < 1) {\n\t\t\t$this->delSSLCaCert = true;\n\t\t\t$this->uploadedSSLCaCert = null;\n\t\t}\n\t\telse {\n\t\t\t$this->uploadedSSLCaCert = implode(\"\\n\", $list);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a list of all CA certificates.\n\t *\n\t * @return array list of certificates as output of openssl_x509_parse()\n\t */\n\tpublic function getSSLCaCertificates() {\n\t\tif ($this->delSSLCaCert) {\n\t\t\treturn array();\n\t\t}\n\t\t$content = $this->getSSLCaCertificateContent();\n\t\tif (empty($content)) {\n\t\t\treturn array();\n\t\t}\n\t\t$list = $this->splitSSLCaCertificateContent($content);\n\t\tfor ($i = 0; $i < sizeof($list); $i++) {\n\t\t\t$list[$i] = @openssl_x509_parse($list[$i]);\n\t\t}\n\t\treturn $list;\n\t}\n\n\t/**\n\t * Returns the content of the certificate file or uploaded data.\n\t *\n\t * @return String null or certificate content\n\t */\n\tprivate function getSSLCaCertificateContent() {\n\t\t$content = null;\n\t\tif ($this->delSSLCaCert) {\n\t\t\treturn null;\n\t\t}\n\t\tif ($this->uploadedSSLCaCert != null) {\n\t\t\t$content = $this->uploadedSSLCaCert;\n\t\t}\n\t\telseif ($this->getSSLCaCertPath() != null) {\n\t\t\t$path = $this->getSSLCaCertPath();\n\t\t\t$handle = @fopen($path, \"r\");\n\t\t\tif ($handle) {\n\t\t\t\t$content = fread($handle, 10000000);\n\t\t\t\tfclose($handle);\n\t\t\t}\n\t\t}\n\t\treturn $content;\n\t}\n\n\t/**\n\t * Splits the certificate content into single PEM data chunks.\n\t *\n\t * @param String $content PEM file content\n\t * @return array one element for each certificate chunk\n\t */\n\tprivate function splitSSLCaCertificateContent($content) {\n\t\tif (empty($content)) {\n\t\t\treturn array();\n\t\t}\n\t\t$content = str_replace(\"\\n\\n\", \"\\n\", $content);\n\t\tif (empty($content)) {\n\t\t\treturn array();\n\t\t}\n\t\tif (!(strpos($content, '-----BEGIN CERTIFICATE-----') === 0)) {\n\t\t\treturn array();\n\t\t}\n\t\t$lines = explode(\"\\n\", $content);\n\t\t$list = array();\n\t\t$pos = -1;\n\t\tforeach ($lines as $line) {\n\t\t\tif (strpos($line, '-----BEGIN CERTIFICATE-----') === 0) {\n\t\t\t\t$pos++;\n\t\t\t}\n\t\t\tif (!isset($list[$pos])) {\n\t\t\t\t$list[$pos] = '';\n\t\t\t}\n\t\t\t$list[$pos] .= $line . \"\\n\";\n\t\t}\n\t\treturn $list;\n\t}\n\n\t/**\n\t * Returns the license key as multiple lines.\n\t *\n\t * @return String license\n\t */\n\tpublic function getLicenseLines() {\n\t\treturn explode(LAMConfig::LINE_SEPARATOR, $this->license);\n\t}\n\n\t/**\n\t * Sets the license key as multiple lines.\n\t *\n\t * @param String[] $licenseLines license lines\n\t */\n\tpublic function setLicenseLines($licenseLines) {\n\t\t$this->license = implode(LAMConfig::LINE_SEPARATOR, $licenseLines);\n\t}\n\n\t/**\n\t * Returns the license warning type (screen/email/both/none).\n\t *\n\t * @return string warning type\n\t */\n\tpublic function getLicenseWarningType() {\n\t\tif (empty($this->licenseWarningType)) {\n\t\t\treturn self::LICENSE_WARNING_SCREEN;\n\t\t}\n\t\treturn $this->licenseWarningType;\n\t}\n\n\t/**\n\t * Returns if the license warning should be shown on screen.\n\t *\n\t * @return bool show on screen\n\t */\n\tpublic function showLicenseWarningOnScreen() {\n\t\t$type = $this->getLicenseWarningType();\n\t\treturn ($type === self::LICENSE_WARNING_ALL) || ($type === self::LICENSE_WARNING_SCREEN);\n\t}\n\n\t/**\n\t * Returns if the license warning should be sent via email.\n\t *\n\t * @return bool send via email\n\t */\n\tpublic function sendLicenseWarningByEmail() {\n\t\t$type = $this->getLicenseWarningType();\n\t\treturn ($type === self::LICENSE_WARNING_ALL) || ($type === self::LICENSE_WARNING_EMAIL);\n\t}\n\n\t/**\n\t * Returns if the license warning was already sent.\n\t *\n\t * @param int $timeStamp time stamp\n\t */\n\tpublic function wasLicenseWarningSent($timeStamp) {\n\t\tif (empty($this->licenseEmailDateSent)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn $timeStamp == $this->licenseEmailDateSent;\n\t}\n\n}\n", "<?php\n\nuse LAM\\PDF\\PdfStructurePersistenceManager;\nuse LAM\\PROFILES\\AccountProfilePersistenceManager;\nuse LAM\\TYPES\\ConfiguredType;\nuse \\LAM\\TYPES\\TypeManager;\n/*\n\n  This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)\n  Copyright (C) 2003 - 2022  Roland Gruber\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n\n*/\n\n/**\n* Interface between modules and other parts of LAM.\n*\n* @package modules\n* @author Tilo Lutz\n* @author Michael Duergner\n* @author Roland Gruber\n*/\n\n/** self service functions */\ninclude_once(__DIR__ . \"/selfService.inc\");\nif (isLAMProVersion()) {\n\t/** job interface */\n\tinclude_once(__DIR__ . \"/jobs.inc\");\n}\n/** some helper functions */\ninclude_once(__DIR__ . \"/account.inc\");\n/** parent class of account modules */\ninclude_once(__DIR__ . \"/baseModule.inc\");\n/** access to LDAP server */\ninclude_once(__DIR__ . \"/ldap.inc\");\n/** remote functions */\ninclude_once(__DIR__ . \"/remote.inc\");\n/** security functions */\ninclude_once(__DIR__ . \"/security.inc\");\n/** meta HTML classes */\ninclude_once(__DIR__ . \"/html.inc\");\n\n/**\n* This includes all module files.\n*/\n$modulesINC_dirname = substr(__FILE__, 0, strlen(__FILE__) - 12) . \"/modules\";\n$modulesINC_dir = dir($modulesINC_dirname);\n// get module names.\nwhile ($entry = $modulesINC_dir->read()) {\n\tif ((substr($entry, strlen($entry) - 4, 4) == '.inc') && is_file($modulesINC_dirname . '/'.$entry)) {\n\t\tinclude_once($modulesINC_dirname . '/'.$entry);\n\t}\n}\n\n/**\n* Returns the alias name of a module\n*\n* @param string $name the module name\n* @param string $scope the account type (\"user\", \"group\", \"host\")\n* @return string|null alias name\n*/\nfunction getModuleAlias($name, $scope) {\n\t$module = moduleCache::getModule($name, $scope);\n\tif ($module === null) {\n\t\treturn null;\n\t}\n\treturn $module->get_alias();\n}\n\n/**\n* Returns true if the module is a base module\n*\n* @param string $name the module name\n* @param string $scope the account type (\"user\", \"group\", \"host\")\n* @return boolean true if base module\n*/\nfunction is_base_module($name, $scope) {\n\t$module = moduleCache::getModule($name, $scope);\n\treturn $module->is_base_module();\n}\n\n/**\n* Returns the LDAP filter used by the account lists\n*\n* @param string $typeId the account type (\"user\", \"group\", \"host\")\n* @return string LDAP filter\n*/\nfunction get_ldap_filter($typeId) {\n\t$typeManager = new \\LAM\\TYPES\\TypeManager();\n\t$type = $typeManager->getConfiguredType($typeId);\n\t$mods = $_SESSION['config']->get_AccountModules($typeId);\n\t$filters = array('or' => array(), 'and' => array());\n\t$orFilter = '';\n\tfor ($i = 0; $i < sizeof($mods); $i++) {\n\t\t$module = moduleCache::getModule($mods[$i], $type->getScope());\n\t\t$modinfo = $module->get_ldap_filter($typeId);\n\t\tif (isset($modinfo['or'])) {\n\t\t\t$filters['or'][] = $modinfo['or'];\n\t\t}\n\t\tif (isset($modinfo['and'])) {\n\t\t\t$filters['and'][] = $modinfo['and'];\n\t\t}\n\t}\n\t// build OR filter\n\tif (sizeof($filters['or']) == 1) {\n\t\t$orFilter = $filters['or'][0];\n\t}\n\telseif (sizeof($filters['or']) > 1) {\n\t\t$orFilter = \"(|\" . implode(\"\", $filters['or']) . \")\";\n\t}\n\t// add built OR filter to AND filters\n\tif (!empty($orFilter)) {\n\t\t$filters['and'][] = $orFilter;\n\t}\n\t// add type filter\n\t$typeSettings = $_SESSION['config']->get_typeSettings();\n\tif (isset($typeSettings['filter_' . $typeId]) && ($typeSettings['filter_' . $typeId] != '')) {\n\t\tif (strpos($typeSettings['filter_' . $typeId], '(') === 0) {\n\t\t\t$filters['and'][] = $typeSettings['filter_' . $typeId];\n\t\t}\n\t\telse {\n\t\t\t$filters['and'][] = '(' . $typeSettings['filter_' . $typeId] . ')';\n\t\t}\n\t}\n\t// collapse AND filters\n\t$finalFilter = '';\n\tif (sizeof($filters['and']) < 2) {\n\t\t$finalFilter = $filters['and'][0];\n\t}\n\telse {\n\t\t$finalFilter = \"(&\" . implode(\"\", $filters['and']) . \")\";\n\t}\n\t$loginData = $_SESSION['ldap']->getUserName();\n\treturn str_replace('@@LOGIN_DN@@', $loginData, $finalFilter);\n}\n\n/**\n* Returns a list of LDAP attributes which can be used to form the RDN.\n*\n* The list is already sorted by the priority given by the nodules.\n*\n* @param string $typeId account type (user, group, host)\n* @param array $selectedModules return only RDN attributes of these modules\n* @return array list of LDAP attributes\n*/\nfunction getRDNAttributes($typeId, $selectedModules=null) {\n\t$mods = $_SESSION['config']->get_AccountModules($typeId);\n\tif ($selectedModules != null) {\n\t\t$mods = $selectedModules;\n\t}\n\t$return = array();\n\t$attrs_low = array();\n\t$attrs_normal = array();\n\t$attrs_high = array();\n\tfor ($i = 0; $i < sizeof($mods); $i++) {\n\t\t// get list of attributes\n\t\t$module = moduleCache::getModule($mods[$i], \\LAM\\TYPES\\getScopeFromTypeId($typeId));\n\t\t$attrs = $module->get_RDNAttributes($typeId);\n\t\t$keys = array_keys($attrs);\n\t\t// sort attributes\n\t\tfor ($k = 0; $k < sizeof($keys); $k++) {\n\t\t\tswitch ($attrs[$keys[$k]]) {\n\t\t\t\tcase \"low\":\n\t\t\t\t\t$attrs_low[] = $keys[$k];\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"normal\":\n\t\t\t\t\t$attrs_normal[] = $keys[$k];\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"high\":\n\t\t\t\t\t$attrs_high[] = $keys[$k];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t$attrs_low[] = $keys[$k];\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t// merge arrays\n\t$return = array_values(array_unique($attrs_high));\n\tfor ($i = 0; $i < sizeof($attrs_normal); $i++) {\n\t\tif (!in_array($attrs_normal[$i], $return)) {\n\t\t\t$return[] = $attrs_normal[$i];\n\t\t}\n\t}\n\tfor ($i = 0; $i < sizeof($attrs_low); $i++) {\n\t\tif (!in_array($attrs_low[$i], $return)) {\n\t\t\t$return[] = $attrs_low[$i];\n\t\t}\n\t}\n\treturn $return;\n}\n\n/**\n* Returns a hash array (module name => dependencies) of all module dependencies\n*\n* \"dependencies\" contains an array with two sub arrays: depends, conflicts\n* <br>The elements of \"depends\" are either module names or an array of module names (OR-case).\n* <br>The elements of conflicts are module names.\n*\n* @param string $scope the account type (user, group, host)\n* @return array dependencies\n*/\nfunction getModulesDependencies($scope) {\n\t$mods = getAvailableModules($scope);\n\tfor ($i = 0; $i < sizeof($mods); $i++) {\n\t\t$module = moduleCache::getModule($mods[$i], $scope);\n\t\t$return[$mods[$i]] = $module->get_dependencies();\n\t}\n\treturn $return;\n}\n\n\n/**\n* Checks if there are missing dependencies between modules.\n*\n* @param array $selected selected module names\n* @param array $deps module dependencies\n* @return mixed false if no missing dependency was found,\n* otherwise an array of array(selected module, depending module) if missing dependencies were found\n*/\nfunction check_module_depends($selected, $deps) {\n\t$ret = array();\n\tfor ($m = 0; $m < sizeof($selected); $m++) {  // check selected modules\n\t\tfor ($i = 0; $i < sizeof($deps[$selected[$m]]['depends']); $i++) {  // check dependencies of module\n\t\t\t// check if we have OR-combined modules\n\t\t\tif (is_array($deps[$selected[$m]]['depends'][$i])) {\n\t\t\t\t// one of the elements is needed\n\t\t\t\t$found = false;\n\t\t\t\t$depends = $deps[$selected[$m]]['depends'][$i];\n\t\t\t\tfor ($d = 0; $d < sizeof($depends); $d++) {\n\t\t\t\t\tif (in_array($depends[$d], $selected)) {\n\t\t\t\t\t\t$found = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (! $found) {\n\t\t\t\t\t// missing dependency, add to return value\n\t\t\t\t\t$ret[] = array($selected[$m], implode(\" || \", $depends));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// single dependency\n\t\t\t\tif (! in_array($deps[$selected[$m]]['depends'][$i], $selected)) {\n\t\t\t\t\t// missing dependency, add to return value\n\t\t\t\t\t$ret[] = array($selected[$m], $deps[$selected[$m]]['depends'][$i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (sizeof($ret) > 0) {\n\t\treturn $ret;\n\t}\n\treturn false;\n}\n\n/**\n* Checks if there are conflicts between modules\n*\n* @param array $selected selected module names\n* @param array $deps module dependencies\n* @return boolean false if no conflict was found,\n* otherwise an array of array(selected module, conflicting module) if conflicts were found\n*/\nfunction check_module_conflicts($selected, $deps) {\n\t$ret = array();\n\tfor ($m = 0; $m < sizeof($selected); $m++) {\n\t\tfor ($i = 0; $i < sizeof($deps[$selected[$m]]['conflicts']); $i++) {\n\t\t\tif (in_array($deps[$selected[$m]]['conflicts'][$i], $selected)) {\n\t\t\t\t$ret[] = array($selected[$m], $deps[$selected[$m]]['conflicts'][$i]);\n\t\t\t}\n\t\t}\n\t}\n\tif (sizeof($ret) > 0) {\n\t\treturn $ret;\n\t}\n\treturn false;\n}\n\n/**\n* Returns an array with all available user module names\n*\n* @param string $scope account type (user, group, host)\n* @param boolean $mustSupportAdminInterface module must support LAM admin interface (default: false)\n* @return array list of possible modules\n*/\nfunction getAvailableModules($scope, $mustSupportAdminInterface = false) {\n\t$dirname = substr(__FILE__, 0, strlen(__FILE__) - 12) . \"/modules\";\n\t$dir = dir($dirname);\n\t$return = array();\n\t// get module names.\n\twhile ($entry = $dir->read()) {\n\t\tif ((substr($entry, strlen($entry) - 4, 4) == '.inc') && is_file($dirname . '/'.$entry)) {\n\t\t\t$entry = substr($entry, 0, strpos($entry, '.'));\n\t\t\t$temp = moduleCache::getModule($entry, $scope);\n\t\t\tif ($temp === null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif ($mustSupportAdminInterface && !$temp->supportsAdminInterface()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif ($temp->can_manage()) {\n\t\t\t\t$return[] = $entry;\n\t\t\t}\n\t\t}\n\t}\n\treturn $return;\n}\n\n/**\n* Returns the elements for the profile page.\n*\n* @param string $typeId account type (user, group, host)\n* @return array profile elements\n*/\nfunction getProfileOptions($typeId) {\n\t$typeManager = new TypeManager();\n\t$type = $typeManager->getConfiguredType($typeId);\n\t$mods = $type->getModules();\n\t$return = array();\n\tfor ($i = 0; $i < sizeof($mods); $i++) {\n\t\t$module = moduleCache::getModule($mods[$i], $type->getScope());\n\t\t$return[$mods[$i]] = $module->get_profileOptions($typeId);\n\t}\n\treturn $return;\n}\n\n/**\n* Checks if the profile options are valid\n*\n* @param string $typeId account type (user, group, host)\n* @param array $options hash array containing all options (name => array(...))\n* @return array list of error messages\n*/\nfunction checkProfileOptions($typeId, $options) {\n\t$typeManager = new TypeManager();\n\t$type = $typeManager->getConfiguredType($typeId);\n\t$mods = $type->getModules();\n\t$return = array();\n\tfor ($i = 0; $i < sizeof($mods); $i++) {\n\t\t$module = moduleCache::getModule($mods[$i], $type->getScope());\n\t\t$temp = $module->check_profileOptions($options, $type->getId());\n\t\t$return = array_merge($return, $temp);\n\t}\n\treturn $return;\n}\n\n/**\n* Returns a hash array (module name => elements) of all module options for the configuration page.\n*\n* @param array $scopes hash array (module name => array(account types))\n* @return array configuration options\n*/\nfunction getConfigOptions($scopes) {\n\t$return = array();\n\t$modules = array_keys($scopes);\n\tfor ($i = 0; $i < sizeof($modules); $i++) {\n\t\t$m = moduleCache::getModule($modules[$i], 'none');\n\t\t$return[$modules[$i]] = $m->get_configOptions($scopes[$modules[$i]], $scopes);\n\t}\n\treturn $return;\n}\n\n/**\n* Checks if the configuration options are valid\n*\n* @param array $scopes hash array (module name => array(account type ids))\n* @param array $options hash array containing all options (name => array(...))\n* @return array list of error messages\n*/\nfunction checkConfigOptions($scopes, &$options) {\n\t$return = array();\n\t$modules = array_keys($scopes);\n\tfor ($i = 0; $i < sizeof($modules); $i++) {\n\t\t$m = moduleCache::getModule($modules[$i], 'none');\n\t\t$errors = $m->check_configOptions($scopes[$modules[$i]], $options);\n\t\tif (isset($errors) && is_array($errors)) {\n\t\t\t$return = array_merge($return, $errors);\n\t\t}\n\t}\n\treturn $return;\n}\n\n/**\n* Returns a help entry from an account module.\n*\n* @param string $module module name\n* @param string $helpID help identifier\n* @param string $scope account type\n* @return array help entry\n*/\nfunction getHelp($module, $helpID, $scope) {\n\tglobal $helpArray;\n\tif (!isset($module) || ($module == '') || ($module == 'main')) {\n\t\t$helpPath = \"../help/help.inc\";\n\t\tif (is_file(\"../../help/help.inc\")) {\n\t\t\t$helpPath = \"../../help/help.inc\";\n\t\t}\n\t\tif (!isset($helpArray)) {\n\t\t\tinclude_once($helpPath);\n\t\t}\n\t\treturn $helpArray[$helpID];\n\t}\n\t$moduleObject = moduleCache::getModule($module, $scope);\n\treturn $moduleObject->get_help($helpID);\n}\n\n/**\n* Returns a list of available PDF entries.\n*\n* @param string $typeId account type (user, group, host)\n* @return array PDF entries (field ID => field label)\n*/\nfunction getAvailablePDFFields($typeId) {\n\t$typeManager = new TypeManager();\n\t$_SESSION['pdfContainer'] = new accountContainer($typeManager->getConfiguredType($typeId), 'pdfContainer');\n\t$_SESSION['pdfContainer']->initModules();\n\t$mods = $_SESSION['pdfContainer']->getAccountModules();\n\t$return = array();\n\tforeach ($mods as $module) {\n\t\t$fields = $module->get_pdfFields($typeId);\n\t\t$moduleName = get_class($module);\n\t\t$return[$moduleName] = array();\n\t\tif (is_array($fields)) {\n\t\t\tforeach ($fields as $fieldID => $fieldLabel) {\n\t\t\t\tif (is_integer($fieldID)) {\n\t\t\t\t\t// support old PDF field list which did not contain a label\n\t\t\t\t\t$return[$moduleName][$fieldLabel] = $fieldLabel;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$return[$moduleName][$fieldID] = $fieldLabel;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t$return['main'] = array('dn' => _('DN'));\n\tunset($_SESSION['pdfContainer']);\n\treturn $return;\n}\n\n/**\n* Returns an array containing all input columns for the file upload.\n*\n* Syntax:\n* <br> array(\n* <br>  string: name,  // fixed non-translated name which is used as column name (should be of format: <module name>_<column name>)\n* <br>  string: description,  // short descriptive name\n* <br>  string: help,  // help ID\n* <br>  string: example,  // example value\n* <br>  boolean: required  // true, if user must set a value for this column\n* <br> )\n*\n* @param ConfiguredType $type account type\n* @param array $selectedModules selected account modules\n* @return array column list\n*/\nfunction getUploadColumns(&$type, $selectedModules) {\n\t$return = array();\n\tfor ($i = 0; $i < sizeof($selectedModules); $i++) {\n\t\t$module = moduleCache::getModule($selectedModules[$i], $type->getScope());\n\t\t$return[$selectedModules[$i]] = $module->get_uploadColumns($selectedModules, $type);\n\t}\n\treturn $return;\n}\n\n/**\n* This function builds the LDAP accounts for the file upload.\n*\n* If there are problems status messages will be printed automatically.\n*\n* @param ConfiguredType $type account type\n* @param array $data array containing one account in each element\n* @param array $ids array(<column_name> => <column number>)\n* @param array $selectedModules selected account modules\n* @param htmlResponsiveRow $container HTML container\n* @return mixed array including accounts or false if there were errors\n*/\nfunction buildUploadAccounts($type, $data, $ids, $selectedModules, htmlResponsiveRow $container) {\n\t// build module order\n\t$unOrdered = $selectedModules;\n\t$ordered = array();\n\t$predepends = array();\n\t// get dependencies\n\tfor ($i = 0; $i < sizeof($unOrdered); $i++) {\n\t\t$mod = moduleCache::getModule($unOrdered[$i], $type->getScope());\n\t\t$predepends[$unOrdered[$i]] = $mod->get_uploadPreDepends();\n\t}\n\t// first all modules without predepends can be ordered\n\tfor ($i = 0; $i < sizeof($unOrdered); $i++) {\n\t\tif (sizeof($predepends[$unOrdered[$i]]) == 0) {\n\t\t\t$ordered[] = $unOrdered[$i];\n\t\t\tunset($unOrdered[$i]);\n\t\t\t$unOrdered = array_values($unOrdered);\n\t\t\t$i--;\n\t\t}\n\t}\n\t$unOrdered = array_values($unOrdered);  // fix indexes\n\t// now add all modules with fulfilled dependencies until all are in order\n\twhile (sizeof($unOrdered) > 0) {\n\t\t$newRound = false;\n\t\tfor ($i = 0; $i < sizeof($unOrdered); $i++) {\n\t\t\t$deps = $predepends[$unOrdered[$i]];\n\t\t\t$depends = false;\n\t\t\tfor ($d = 0; $d < sizeof($deps); $d++) {\n\t\t\t\tif (in_array($deps[$d], $unOrdered)) {\n\t\t\t\t\t$depends = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!$depends) {  // add to order if dependencies are fulfilled\n\t\t\t\t$ordered[] = $unOrdered[$i];\n\t\t\t\tunset($unOrdered[$i]);\n\t\t\t\t$unOrdered = array_values($unOrdered);\n\t\t\t\t$newRound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($newRound) {\n\t\t\tcontinue;\n\t\t}\n\t\t// this point should never be reached, LAM was unable to find a correct module order\n\t\t$container->add(new htmlStatusMessage(\"ERROR\", \"Internal Error: Unable to find correct module order.\"), 12);\n\t\treturn false;\n\t}\n\t// give raw data to modules\n\t$errors = array();\n\t$partialAccounts = array();\n\tforeach ($data as $i => $dataRow) {\n\t\t$partialAccounts[$i]['objectClass'] = array();\n\t}\n\t$stopUpload = false;\n\tfor ($i = 0; $i < sizeof($ordered); $i++) {\n\t\t$module = new $ordered[$i]($type->getScope());\n\t\t$moduleErrors = $module->build_uploadAccounts($data, $ids, $partialAccounts, $selectedModules, $type);\n\t\tif (sizeof($moduleErrors) > 0) {\n\t\t\t$errors = array_merge($errors, $moduleErrors);\n\t\t\tforeach ($moduleErrors as $error) {\n\t\t\t\tif ($error[0] == 'ERROR') {\n\t\t\t\t\tarray_unshift($errors, array(\"INFO\", _(\"Displayed account numbers start at \\\"0\\\". Add 2 to get the row in your spreadsheet.\"), \"\"));\n\t\t\t\t\t$errors[] = array(\"ERROR\", _(\"Upload was stopped after errors in %s module!\"), \"\", array($module->get_alias()));\n\t\t\t\t\t// skip other modules if error was found\n\t\t\t\t\t$stopUpload = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ($stopUpload) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (sizeof($errors) > 0) {\n\t\tfor ($i = 0; (($i < sizeof($errors)) && ($i < 50)); $i++) {\n\t\t\t$text = empty($errors[$i][2]) ? null : $errors[$i][2];\n\t\t\t$values = empty($errors[$i][3]) ? null : $errors[$i][3];\n\t\t\t$container->add(new htmlStatusMessage($errors[$i][0], $errors[$i][1], $text, $values), 12);\n\t\t}\n\t}\n\tif ($stopUpload) {\n\t\treturn false;\n\t}\n\treturn $partialAccounts;\n}\n\n/**\n * Runs any actions that need to be done before an LDAP entry is created.\n *\n * @param ConfiguredType $type account type\n * @param array $selectedModules list of selected account modules\n * @param array $attributes LDAP attributes of this entry (attributes are provided as reference, handle modifications of $attributes with care)\n * @return array array which contains status messages. Each entry is an array containing the status message parameters.\n */\nfunction doUploadPreActions($type, $selectedModules, $attributes) {\n\t$messages = array();\n\tfor ($i = 0; $i < sizeof($selectedModules); $i++) {\n\t\t$activeModule = $selectedModules[$i];\n\t\t$module = moduleCache::getModule($activeModule, $type->getScope());\n\t\t$messages = array_merge($messages, $module->doUploadPreActions($attributes, $type));\n\t}\n\treturn $messages;\n}\n\n/**\n* This function executes one post upload action.\n*\n* @param ConfiguredType $type account type\n* @param array $data array containing one account in each element\n* @param array $ids array(<column_name> => <column number>)\n* @param array $failed list of accounts which were not created successfully\n* @param array $selectedModules list of selected account modules\n* @param array $accounts list of LDAP entries\n* @return array current status\n* <br> array (\n* <br>  'status' => 'finished' | 'inProgress'\n* <br>  'module' => <name of active module>\n* <br>  'progress' => 0..100\n* <br>  'errors' => array (<array of parameters for StatusMessage>)\n* <br> )\n*/\nfunction doUploadPostActions($type, &$data, $ids, $failed, $selectedModules, &$accounts) {\n\t// check if function is called the first time\n\tif (! isset($_SESSION['mass_postActions']['remainingModules'])) {\n\t\t// make list of remaining modules\n\t\t$moduleList = $selectedModules;\n\t\t$_SESSION['mass_postActions']['remainingModules'] = $moduleList;\n\t}\n\t$activeModule = $_SESSION['mass_postActions']['remainingModules'][0];\n\t// initialize temporary variable\n\tif (!isset($_SESSION['mass_postActions'][$activeModule])) {\n\t\t$_SESSION['mass_postActions'][$activeModule] = array();\n\t}\n\t// let first module do one post action\n\t$module = moduleCache::getModule($activeModule, $type->getScope());\n\t$return = $module->doUploadPostActions($data, $ids, $failed, $_SESSION['mass_postActions'][$activeModule], $accounts, $selectedModules, $type);\n\t// remove active module from list if already finished\n\tif ($return['status'] == 'finished') {\n\t\tunset($_SESSION['mass_postActions']['remainingModules'][0]);\n\t\t$_SESSION['mass_postActions']['remainingModules'] = array_values($_SESSION['mass_postActions']['remainingModules']);\n\t}\n\t// update status and return back to upload page\n\t$return['module'] = $activeModule;\n\tif (sizeof($_SESSION['mass_postActions']['remainingModules']) > 0) {\n\t\t$return['status'] = 'inProgress';\n\t}\n\telse {\n\t\t$return['status'] = 'finished';\n\t}\n\treturn $return;\n}\n\n/**\n* Returns true if the module is a base module\n*\n* @return array required extensions\n*/\nfunction getRequiredExtensions() {\n\t$extList = array();\n\t$typeManager = new \\LAM\\TYPES\\TypeManager();\n\t$types = $typeManager->getConfiguredTypes();\n\tforeach ($types as $type) {\n\t\t$mods = $_SESSION['config']->get_AccountModules($type->getId());\n\t\tfor ($m = 0; $m < sizeof($mods); $m++) {\n\t\t\t$module = moduleCache::getModule($mods[$m], $type->getScope());\n\t\t\t$ext = $module->getRequiredExtensions();\n\t\t\tfor ($e = 0; $e < sizeof($ext); $e++) {\n\t\t\t\tif (!in_array($ext[$e], $extList)) {\n\t\t\t\t\t$extList[] = $ext[$e];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn $extList;\n}\n\n/**\n* Takes a list of meta-HTML elements and prints the equivalent HTML output.\n*\n* The modules are not allowed to display HTML code directly but return\n* meta HTML code. This allows to have a common design for all module pages.\n*\n* @param string $module Name of account module\n* @param mixed $input htmlElement or array of htmlElement elements\n* @param array $values List of values which override the defaults in $input (name => value)\n* @param boolean $restricted If true then no buttons will be displayed\n* @param integer $tabindex Start value of tabulator index for input fields\n* @param string $scope Account type\n* @return array List of input field names and their type (name => type)\n*/\nfunction parseHtml($module, $input, $values, $restricted, &$tabindex, $scope) {\n\tif ($input instanceof htmlElement) {\n\t\treturn $input->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t}\n\tif (is_array($input) && (sizeof($input) > 0)) {\n\t\t$return = array();\n\t\tfor ($i = 0; $i < sizeof($input); $i++) {\n\t\t\t$return = array_merge($return, $input[$i]->generateHTML($module, $input, $values, $restricted, $tabindex, $scope));\n\t\t}\n\t\treturn $return;\n\t}\n\treturn array();\n}\n\n/**\n * Helper function to sort descriptive options in parseHTML().\n * It compares the second entries of two arrays.\n *\n * @param array $a first array\n * @param array $b second array\n * @return integer compare result\n */\nfunction lamCompareDescriptiveOptions(&$a, &$b) {\n\t// check parameters\n\tif (!is_array($a) || !isset($a[1]) || !is_array($b) || !isset($b[1])) {\n\t\treturn 0;\n\t}\n\treturn strnatcasecmp($a[1], $b[1]);\n}\n\n/**\n * Prints a LAM help link.\n *\n * @param array $entry help entry\n * @param String $number help number\n * @param String $module module name\n * @param String $scope account scope\n * @param array $classes CSS classes\n */\nfunction printHelpLink($entry, $number, $module = '', $scope = '', $classes = array()) {\n\t$helpPath = \"../\";\n\tif (is_file(\"./help.php\")) {\n\t\t$helpPath = \"\";\n\t}\n\t$title = $entry['Headline'];\n\t$message = $entry['Text'];\n\tif (isset($entry['attr'])) {\n\t\t$message .= '<br><br><hr class=\"dotted\">' . _('Technical name') . ': <i>' . $entry['attr'] . '</i>';\n\t}\n\t// replace special characters\n\t$message = htmlspecialchars($message);\n\t$title = htmlspecialchars($title);\n\t$selfServiceOption = '';\n\tif (isSelfService()) {\n\t\t$selfServiceOption = '&amp;selfService=1';\n\t}\n\techo \"<a class=\\\"margin2 \" . implode(\" \", $classes) . \"\\\" href=\\\"\" . $helpPath . \"help.php?module=$module&amp;HelpNumber=\". $number . \"&amp;scope=\" . $scope . $selfServiceOption . \"\\\" \";\n\t\techo \"target=\\\"help\\\">\";\n\t\techo \"<img helptitle=\\\"\" . $title . \"\\\" helpdata=\\\"\" . $message . \"\\\" class=\\\"align-middle help-icon\\\" src=\\\"../${helpPath}graphics/help.svg\\\" alt=\\\"\" . _('Help') . \"\\\" width=\\\"16px\\\" height=\\\"16px\\\">\";\n\techo \"</a>\";\n}\n\n\n/**\n* This class includes all modules and attributes of an account.\n*\n* @package modules\n*/\nclass accountContainer {\n\n\t/**\n\t* Constructor\n\t*\n\t* @param ConfiguredType $type account type\n\t* @param string $base key in $_SESSION where this object is saved\n\t*/\n\tfunction __construct($type, $base) {\n\t\tif (!($type instanceof ConfiguredType)) {\n\t\t\ttrigger_error('Argument of accountContainer must be ConfiguredType.', E_USER_ERROR);\n\t\t}\n\t\tif (!is_string($base)) {\n\t\t\ttrigger_error('Argument of accountContainer must be string.', E_USER_ERROR);\n\t\t}\n\t\t$this->type = $type;\n\t\t$this->base = $base;\n\t\t// Set startpage\n\t\t$this->current_page=0;\n\t\t$this->subpage='attributes';\n\t\t$this->isNewAccount = false;\n\t\treturn 0;\n\t}\n\n\t/**\n\t* Array of all used attributes\n\t* Syntax is attribute => array ( objectClass => MUST or MAY, ...)\n\t*/\n\tpublic $attributes;\n\n\t/**\n\t* This variale stores the account type.\n\t* Currently \"user\", \"group\" and \"host\" are supported.\n\t*/\n\tprivate $type;\n\n\t/** This is an array with all module objects\n\t *\n\t *  @var baseModule[] modules\n\t */\n\tprivate $module;\n\n\t/** DN suffix of the account */\n\tpublic $dnSuffix;\n\n\t/** DN of account when it was loaded */\n\tpublic $dn_orig;\n\n\t/** RDN attribute of this account */\n\tpublic $rdn;\n\n\t/** DN of saved account */\n\tpublic $finalDN;\n\n\t/** original LDAP attributes when account was loaded from LDAP */\n\tpublic $attributes_orig;\n\n\t/** Module order */\n\tprivate $order;\n\n\t/** Name of accountContainer variable in session */\n\tprivate $base;\n\n\t/** This variable stores the page number of the currently displayed page */\n\tprivate $current_page = 0;\n\n\t/** This variable is set to the pagename of a subpage if it should be displayed */\n\tprivate $subpage;\n\n\t/** True if this is a newly created account */\n\tpublic $isNewAccount;\n\n\t/** name of last loaded account profile */\n\tprivate $lastLoadedProfile = '';\n\n\t/** cache for existing OUs */\n\tprivate $cachedOUs = null;\n\n\t/** main title in title bar */\n\tprivate $titleBarTitle = null;\n\t/** subtitle in title bar */\n\tprivate $titleBarSubtitle = null;\n\t/** send password via mail */\n\tprivate $sendPasswordViaMail = null;\n\t/** send password via mail to this alternate address */\n\tprivate $sendPasswordViaMailAlternateAddress = null;\n\n\t/**\n\t * @var array additional attributes for pre/post actions\n\t */\n\tprivate $extraInfoAttributes = array();\n\n\n\t/**\n\t * Returns the account module with the given class name\n\t *\n\t * @param string $name class name (e.g. posixAccount)\n\t * @return baseModule account module\n\t */\n\tpublic function getAccountModule($name) {\n\t\tif (isset($this->module[$name])) {\n\t\t\treturn $this->module[$name];\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the included account modules.\n\t *\n\t * @return baseModule[] modules\n\t */\n\tpublic function getAccountModules() {\n\t\treturn $this->module;\n\t}\n\n\t/**\n\t* Returns the account type of this object (e.g. user, group, host).\n\t*\n\t* @return ConfiguredType account type\n\t*/\n\tpublic function get_type() {\n\t\treturn $this->type;\n\t}\n\n\t/**\n\t * Returns the session edit key for this container.\n\t *\n\t * @return string key\n\t */\n\tpublic function getEditKey() {\n\t\treturn $this->base;\n\t}\n\n\t/**\n\t* This function is called when the user clicks on any button on the account pages.\n\t* It prints the HTML code of each account page.\n\t*/\n\tpublic function continue_main() {\n\t\t$oldPage = $this->current_page;\n\t\t$oldSubpage = $this->subpage;\n\t\t$result = array();\n\t\t$errorsOccurred = false;\n\t\t$typeObject = $this->type->getBaseType();\n\t\t$profileLoaded = $this->loadProfileIfRequested();\n\t\tif ($this->subpage == '') {\n\t\t\t$this->subpage='attributes';\n\t\t}\n\t\tif (isset($_POST['accountContainerReset'])) {\n\t\t\t$result = $this->load_account($this->dn_orig);\n\t\t}\n\t\telseif (isset($_POST['accountContainerDelete'])) {\n\t\t\tmetaRefresh(\"../lists/deletelink.php?type=\" . $this->type->getId() . \"&DN='\" . rawurlencode($this->dn_orig) . \"'\");\n\t\t\tunset($_SESSION[$this->base]);\n\t\t\texit();\n\t\t}\n\t\telseif (!$profileLoaded) {\n\t\t\t// change dn suffix\n\t\t\tif (isset($_GET['suffix']) && ($_GET['suffix'] != '') && ($this->dnSuffix == null)) {\n\t\t\t\t$this->dnSuffix = $_GET['suffix'];\n\t\t\t}\n\t\t\tif (isset($_POST['accountContainerSuffix']) && ($_POST['accountContainerSuffix'] != '')) {\n\t\t\t\t$this->dnSuffix = $_POST['accountContainerSuffix'];\n\t\t\t}\n\t\t\t// change RDN\n\t\t\tif (isset($_POST['accountContainerRDN'])) {\n\t\t\t\t$this->rdn = $_POST['accountContainerRDN'];\n\t\t\t}\n\t\t\t// create another account\n\t\t\tif (isset($_POST['accountContainerCreateAgain'])) {\n\t\t\t\t// open fresh account page\n\t\t\t\tunset($_SESSION[$this->base]);\n\t\t\t\tmetaRefresh(\"edit.php?type=\" . $this->type->getId() . \"&suffix=\" . $this->dnSuffix);\n\t\t\t\texit();\n\t\t\t}\n\t\t\t// reedit account\n\t\t\tif (isset($_POST['accountContainerBackToEdit'])) {\n\t\t\t\t// open fresh account page\n\t\t\t\tunset($_SESSION[$this->base]);\n\t\t\t\tmetaRefresh(\"edit.php?type=\" . $this->type->getId() . \"&DN=\" . urlencode($this->finalDN));\n\t\t\t\texit();\n\t\t\t}\n\t\t\t// back to account list\n\t\t\tif (isset($_POST['accountContainerBackToList'])) {\n\t\t\t\t// Return to account list\n\t\t\t\tunset($_SESSION[$this->base]);\n\t\t\t\tmetaRefresh(\"../lists/list.php?type=\" . $this->type->getId() . '&accountEditBack=true');\n\t\t\t\texit;\n\t\t\t}\n\t\t\t// create PDF file\n\t\t\tif (isset($_POST['accountContainerCreatePDF'])) {\n\t\t\t\tmetaRefresh('../lists/list.php?printPDF=1&type=' . $this->type->getId() . \"&refresh=true&PDFSessionID=\" . $this->base);\n\t\t\t\texit;\n\t\t\t}\n\t\t\t// module actions\n\t\t\tif ((sizeof($_POST) > 0) && checkIfWriteAccessIsAllowed($this->type->getId())) {\n\t\t\t\t$result = call_user_func(array(&$this->module[$this->order[$this->current_page]], 'process_'.$this->subpage));\n\t\t\t\tif (is_array($result)) {  // messages were returned, check for errors\n\t\t\t\t\tfor ($i = 0; $i < sizeof($result); $i++) {\n\t\t\t\t\t\tif ($result[$i][0] == 'ERROR') {\n\t\t\t\t\t\t\t$errorsOccurred = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$this->sortModules();\n\t\t\t}\n\t\t\t// run type post actions\n\t\t\t$typeObject->runEditPagePostAction($this);\n\t\t\t// save account\n\t\t\tif (!$errorsOccurred && isset($_POST['accountContainerSaveAccount'])) {\n\t\t\t\t// check if all modules are complete\n\t\t\t\t$modules = array_keys($this->module);\n\t\t\t\t$incompleteModules = array();\n\t\t\t\tforeach ($modules as $module) {\n\t\t\t\t\tif (!$this->module[$module]->module_complete()) {\n\t\t\t\t\t\t$incompleteModules[] = $this->module[$module]->get_alias();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (sizeof($incompleteModules) > 0) {\n\t\t\t\t\t$result[] = array('INFO', _('Some required information is missing'),\n\t\t\t\t\t\tsprintf(_('Please set up all required attributes on page: %s'), implode(\", \", $incompleteModules)));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// save account\n\t\t\t\t\t$saveMessages = $this->save_account();\n\t\t\t\t\t$saveOk = true;\n\t\t\t\t\tfor ($i = 0; $i < sizeof($saveMessages); $i++) {\n\t\t\t\t\t\tif ($saveMessages[$i][0] == 'ERROR') {\n\t\t\t\t\t\t\t$saveOk = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!$saveOk) {\n\t\t\t\t\t\t$result = $saveMessages;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$this->printSuccessPage($saveMessages);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// change to next page\n\t\tif (is_array($result)) {  // messages were returned, check for errors\n\t\t\tfor ($i = 0; $i < sizeof($result); $i++) {\n\t\t\t\tif ($result[$i][0] == 'ERROR') {\n\t\t\t\t\t$errorsOccurred = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!$errorsOccurred) {\n\t\t\t// go to subpage of current module\n\t\t\t$postKeys = array_keys($_POST);\n\t\t\tfor ($p = 0; $p < sizeof($postKeys); $p++) {\n\t\t\t\tif (is_string($postKeys[$p]) && (strpos($postKeys[$p], 'form_subpage_' . $this->order[$this->current_page]) === 0)) {\n\t\t\t\t\t$temp = substr($postKeys[$p], strlen($this->order[$this->current_page]) + 14);\n\t\t\t\t\t$temp = explode('_', $temp);\n\t\t\t\t\tif (sizeof($temp) == 2) {\n\t\t\t\t\t\t$this->subpage = $temp[0];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor ($i=0; $i<count($this->order); $i++ ) {\n\t\t\t\tif (isset($_POST['form_main_'.$this->order[$i]])) {\n\t\t\t\t\tif ($this->module[$this->order[$i]]->module_ready()) {\n\t\t\t\t\t\t$this->current_page = $i;\n\t\t\t\t\t\t$this->subpage='attributes';\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tStatusMessage('ERROR', _('The module %s is not yet ready.'),\n\t\t\t\t\t\t\t_('Please enter the account information on the other pages first.'),\n\t\t\t\t\t\t\tarray($this->module[$this->order[$i]]->get_alias()));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ($profileLoaded) {\n\t\t\t$profileName = $_POST['accountContainerSelectLoadProfile'];\n\t\t\t$result[] = array('INFO', _('Profile \"%s\" loaded.'), '<div class=\"hidden lam-dialog-msg\" id=\"lam-make-default-profile-dlg\">' . _('Setting saved') . '</div>' .\n\t\t\t\t'<a href=\"#\" id=\"lam-make-default-profile\" data-name=\"%s\" data-typeid=\"%s\" data-ok=\"%s\">' . _('Click here to make this your default profile.') . '</a>', array($profileName, $profileName, $this->get_type()->getId(), _('Ok')));\n\t\t}\n\t\t// update titles\n\t\t$this->titleBarTitle = $typeObject->getTitleBarTitle($this);\n\t\t$this->titleBarSubtitle = $typeObject->getTitleBarSubtitle($this);\n\t\t// prints a module content page\n\t\t$this->printModuleContent($result);\n\t\tif (!$errorsOccurred && ($oldPage == $this->current_page) && ($oldSubpage == $this->subpage)\n\t\t\t&& isset($_POST['scrollPositionTop']) && isset($_POST['scrollPositionLeft'])) {\n\t\t\t// scroll to last position\n\t\t\techo '<script type=\"text/javascript\">\n\t\t\t\tjQuery(document).ready(function() {\n\t\t\t\t\tjQuery(window).scrollTop(' . $_POST['scrollPositionTop'] . ');\n\t\t\t\t\tjQuery(window).scrollLeft('. $_POST['scrollPositionLeft'] . ');\n\t\t\t});\n\t\t\t</script>';\n\t\t}\n\t\t$this->printPageFooter();\n\t}\n\n\t/**\n\t * Prints the content part provided by the current module.\n\t *\n\t * @param array $result list of messages\n\t */\n\tprivate function printModuleContent($result) {\n\t\t$tabindex = 1;\n\t\t$this->printPageHeader();\n\t\t$this->printPasswordPromt();\n\t\t// display error messages\n\t\tif (is_array($result)) {\n\t\t\tfor ($i=0; $i<sizeof($result); $i++) {\n\t\t\t\tcall_user_func_array(\"StatusMessage\", $result[$i]);\n\t\t\t}\n\t\t}\n\t\techo '<div id=\"passwordMessageArea\"></div>';\n\t\techo \"<table border=0 width=\\\"100%\\\" style=\\\"border-collapse: collapse;\\\">\\n\";\n\t\tif (checkIfWriteAccessIsAllowed($this->type->getId())) {\n\t\t\techo \"<tr><td style=\\\"padding: 5px 0px 0px 0px;\\\">\\n\";\n\t\t\t$this->printCommonControls($tabindex);\n\t\t\techo \"</td></tr>\\n\";\n\t\t}\n\t\techo \"<tr valign=\\\"top\\\"><td style=\\\"padding: 15px;\\\">\";\n\t\t// print title bar\n\t\t$titleBarContainer = new htmlResponsiveRow();\n\t\t$titleBarContainer->setCSSClasses(array('maxrow'));\n\t\t$titleBarTitleText = new htmlOutputText($this->titleBarTitle, false);\n\t\t$titleBarContainer->add(new htmlDiv(null, $titleBarTitleText, array('titleBarTitle', 'text-left')), 12, 12, 4);\n\t\t$titleBarSubtitleText = new htmlOutputText($this->titleBarSubtitle, false);\n\t\t$titleBarContainer->add(new htmlDiv(null, $titleBarSubtitleText, array('titleBarSubtitle', 'responsiveLabel')), 12, 12, 8);\n\t\t$titleBarSuffixRdn = new htmlResponsiveRow();\n\t\t$titleBarSuffixRdn->add(new htmlHorizontalLine(), 12);\n\t\t// suffix\n\t\t$suffixList = array();\n\t\tforeach ($this->getOUs() as $suffix) {\n\t\t\t$suffixList[getAbstractDN($suffix)] = $suffix;\n\t\t}\n\t\tif (!($this->dnSuffix == '') && !in_array_ignore_case($this->dnSuffix, $this->getOUs())) {\n\t\t\t$suffixList[getAbstractDN($this->dnSuffix)] = $this->dnSuffix;\n\t\t}\n\t\t$selectedSuffix = array($this->dnSuffix);\n\t\t$suffixSelect = new htmlResponsiveSelect('accountContainerSuffix', $suffixList, $selectedSuffix, _('Suffix'));\n\t\t$suffixSelect->setHasDescriptiveElements(true);\n\t\t$suffixSelect->setRightToLeftTextDirection(true);\n\t\t$suffixSelect->setShortLabel();\n\t\t$suffixSelect->setSortElements(false);\n\t\t$titleBarSuffixRdn->add($suffixSelect, 12, 12, 7);\n\t\t// RDN selection\n\t\t$rdnlist = getRDNAttributes($this->type->getId());\n\t\t$rdnSelect = new htmlResponsiveSelect('accountContainerRDN', $rdnlist, array($this->rdn), _('RDN identifier'), '400');\n\t\t$rdnSelect->setShortLabel();\n\t\t$titleBarSuffixRdn->add($rdnSelect, 12, 12, 5);\n\t\t$titleBarContainer->add($titleBarSuffixRdn, 12);\n\n\t\t$titleBarDiv = new htmlDiv(null, $titleBarContainer, array('titleBar', 'ui-corner-top'));\n\t\tparseHtml(null, $titleBarDiv, array(), false, $tabindex, $this->type->getScope());\n\n\t\techo '<div id=\"lamVerticalTabs\" class=\"ui-tabs ui-widget ui-widget-content ui-corner-bottom ui-helper-clearfix\">';\n\t\techo '<table class=\"fullwidth\">';\n\t\t\techo '<tr><td style=\"vertical-align: top;\">';\n\t\t\t// tab menu\n\t\t\t$this->printModuleTabs();\n\t\t\techo '</td><td style=\"vertical-align: top;\" width=\"100%\">';\n\t\t\techo \"<div class=\\\"ui-tabs-panel ui-widget-content ui-corner-bottom fullwidth module-content-row\\\">\\n\";\n\t\t\t// content area\n\t\t\t// display html-code from modules\n\t\t\t$return = call_user_func(array($this->module[$this->order[$this->current_page]], 'display_html_'.$this->subpage));\n\t\t\t$y = 5000;\n\t\t\tparseHtml($this->order[$this->current_page], $return, array(), false, $y, $this->type->getScope());\n\t\t\techo \"</div>\\n\";\n\t\t\techo '</td>';\n\t\t\techo '</tr>';\n\t\techo '</table>';\n\t\techo \"</div>\\n\";\n\t\techo \"</td></tr>\\n\";\n\t\t// Display rest of html-page\n\t\techo \"</table>\\n\";\n\t}\n\n\t/**\n\t * Prints the input fields of the central password service.\n\t */\n\tprivate function printPasswordPromt() {\n\t\techo \"<div id=\\\"passwordDialog\\\" class=\\\"hidden\\\">\\n\";\n\t\techo '<div id=\"passwordDialogMessageArea\"></div>';\n\t\t$printContainer = false;\n\t\t$container = new htmlTable();\n\t\t// password fields\n\t\t$container->addElement(new htmlOutputText(_('Password')));\n\t\t$pwdInput1 = new htmlInputField('newPassword1');\n\t\t$pwdInput1->setIsPassword(true, true);\n\t\t$container->addElement($pwdInput1);\n\t\t$container->addElement(new htmlHelpLink('404'), true);\n\t\t$container->addElement(new htmlOutputText(_('Repeat password')));\n\t\t$pwdInput2 = new htmlInputField('newPassword2');\n\t\t$pwdInput2->setIsPassword(true);\n\t\t$pwdInput2->setSameValueFieldID('newPassword1');\n\t\t$container->addElement($pwdInput2, true);\n\t\t// print force password change option\n\t\t$forceChangeSupported = array();\n\t\tforeach ($this->module as $name => $module) {\n\t\t\tif (($module instanceof passwordService) && $module->supportsForcePasswordChange()) {\n\t\t\t\t$forceChangeSupported[] = $module;\n\t\t\t}\n\t\t}\n\t\tif (!empty($forceChangeSupported)) {\n\t\t\t$container->addElement(new htmlOutputText(_('Force password change')));\n\t\t\t$forcePwdGroup = new htmlGroup();\n\t\t\t$forcePwdGroup->addElement(new htmlInputCheckbox('lamForcePasswordChange', false));\n\t\t\t$forcePwdGroup->addElement(new htmlSpacer('1rem', null));\n\t\t\tforeach ($forceChangeSupported as $module) {\n\t\t\t\t$forcePwdGroup->addElement(new htmlImage('../../graphics/' . $module->getIcon(), '16px', '16px', $module->get_alias(), $module->get_alias()));\n\t\t\t\t$forcePwdGroup->addElement(new htmlSpacer('0.1rem', null));\n\t\t\t}\n\t\t\t$container->addElement($forcePwdGroup);\n\t\t\t$container->addElement(new htmlHelpLink('406'), true);\n\t\t}\n\t\tif (isLAMProVersion() && (isset($this->attributes_orig['mail'][0]) || $this->anyModuleManagesMail())) {\n\t\t\t$pwdMailCheckbox = new htmlTableExtendedInputCheckbox('lamPasswordChangeSendMail', false, _('Send via mail'));\n\t\t\t$pwdMailCheckbox->setTableRowsToShow(array('lamPasswordChangeSendMailAddress'));\n\t\t\t$container->addElement($pwdMailCheckbox);\n\t\t\t$container->addElement(new htmlHelpLink('407'), true);\n\t\t\tif ($_SESSION['config']->getLamProMailAllowAlternateAddress() != 'false') {\n\t\t\t\t$alternateMail = '';\n\t\t\t\t$pwdResetModule = $this->getAccountModule('passwordSelfReset');\n\t\t\t\tif (!empty($pwdResetModule)) {\n\t\t\t\t\t$backupMail = $pwdResetModule->getBackupEmail();\n\t\t\t\t\tif (!empty($backupMail)) {\n\t\t\t\t\t\t$alternateMail = $pwdResetModule->getBackupEmail();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$container->addElement(new htmlTableExtendedInputField(_('Alternate recipient'), 'lamPasswordChangeSendMailAddress', $alternateMail, '410'));\n\t\t\t}\n\t\t}\n\t\t$container->addElement(new htmlSpacer(null, '10px'), true);\n\t\t// password modules\n\t\t$moduleContainer = new htmlTable();\n\t\tforeach ($this->module as $name => $module) {\n\t\t\tif (($module instanceof passwordService) && $module->managesPasswordAttributes()) {\n\t\t\t\t$printContainer = true;\n\t\t\t\t$buttonImage = $module->getIcon();\n\t\t\t\tif ($buttonImage != null) {\n\t\t\t\t\tif (!(strpos($buttonImage, 'http') === 0) && !(strpos($buttonImage, '/') === 0)) {\n\t\t\t\t\t\t$buttonImage = '../../graphics/' . $buttonImage;\n\t\t\t\t\t}\n\t\t\t\t\t$moduleContainer->addElement(new htmlImage($buttonImage, null, null, getModuleAlias($name, $this->type->getScope())));\n\t\t\t\t}\n\t\t\t\t$moduleContainer->addElement(new htmlTableExtendedInputCheckbox('password_cb_' . $name, true, getModuleAlias($name, $this->type->getScope()), null, false));\n\t\t\t\t$moduleContainer->addElement(new htmlSpacer('10px', null));\n\t\t\t}\n\t\t}\n\t\t$moduleContainer->colspan = 5;\n\t\t$container->addElement($moduleContainer, true);\n\t\t// generate HTML\n\t\t$tabindex = 2000;\n\t\tif ($printContainer) {\n\t\t\tparseHtml(null, $container, array(), false, $tabindex, $this->type->getScope());\n\t\t}\n\t\techo \"</div>\\n\";\n\t}\n\n\t/**\n\t * Sets the new password in all selected account modules.\n\t *\n\t * @param array $input input parameters\n\t */\n\tpublic function setNewPassword($input) {\n\t\t$password1 = $input['password1'];\n\t\t$password2 = $input['password2'];\n\t\t$random = $input['random'] === 'true';\n\t\t$modules = array();\n\t\tforeach ($input['modules'] as $moduleName) {\n\t\t\t$moduleName = str_replace('password_cb_', '', $moduleName);\n\t\t\tif (array_key_exists($moduleName, $this->module)) {\n\t\t\t\t$modules[] = $moduleName;\n\t\t\t}\n\t\t}\n\t\t$return = array(\n\t\t\t'messages' => '',\n\t\t\t'errorsOccurred' => 'false'\n\t\t);\n\t\t$sendMail = false;\n\t\tif (isset($input['sendMail']) && ($input['sendMail'] == 'true')) {\n\t\t\t$sendMail = true;\n\t\t}\n\t\tif ($random) {\n\t\t\t$password1 = generateRandomPassword();\n\t\t\tif (!$sendMail) {\n\t\t\t\t$return['messages'] .= StatusMessage('INFO', _('The password was set to:') . ' ' . htmlspecialchars($password1), '', array(), true);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// check if passwords match\n\t\t\tif ($password1 != $password2) {\n\t\t\t\t$return['messages'] .= StatusMessage('ERROR', _('Passwords are different!'), '', array(), true);\n\t\t\t\t$return['errorsOccurred'] = 'true';\n\t\t\t}\n\t\t\t// check passsword strength\n\t\t\t$pwdPolicyResult = checkPasswordStrength($password1, null, null);\n\t\t\tif ($pwdPolicyResult !== true) {\n\t\t\t\t$return['messages'] .= StatusMessage('ERROR', $pwdPolicyResult, '', array(), true);\n\t\t\t\t$return['errorsOccurred'] = 'true';\n\t\t\t}\n\t\t}\n\t\t$forcePasswordChange = false;\n\t\tif (isset($input['forcePasswordChange']) && ($input['forcePasswordChange'] == 'true')) {\n\t\t\t$forcePasswordChange = true;\n\t\t}\n\t\t$return['forcePasswordChange'] = $forcePasswordChange;\n\t\tif ($return['errorsOccurred'] == 'false') {\n\t\t\t// set new password\n\t\t\tforeach ($this->module as $module) {\n\t\t\t\tif ($module instanceof passwordService) {\n\t\t\t\t\t$messages = $module->passwordChangeRequested($password1, $modules, $forcePasswordChange);\n\t\t\t\t\tfor ($m = 0; $m < sizeof($messages); $m++) {\n\t\t\t\t\t\tif ($messages[$m][0] == 'ERROR') {\n\t\t\t\t\t\t\t$return['errorsOccurred'] = 'true';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (sizeof($messages[$m]) == 2) {\n\t\t\t\t\t\t\t$return['messages'] .= StatusMessage($messages[$m][0], $messages[$m][1], '', array(), true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telseif (sizeof($messages[$m]) == 3) {\n\t\t\t\t\t\t\t$return['messages'] .= StatusMessage($messages[$m][0], $messages[$m][1], $messages[$m][2], array(), true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telseif (sizeof($messages[$m]) == 4) {\n\t\t\t\t\t\t\t$return['messages'] .= StatusMessage($messages[$m][0], $messages[$m][1], $messages[$m][2], $messages[$m][3], true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (isLAMProVersion() && $sendMail) {\n\t\t\t$this->sendPasswordViaMail = $password1;\n\t\t\tif (($_SESSION['config']->getLamProMailAllowAlternateAddress() != 'false') && !empty($input['sendMailAlternateAddress'])) {\n\t\t\t\tif (!get_preg($input['sendMailAlternateAddress'], 'email')) {\n\t\t\t\t\t$return['messages'] .= StatusMessage('ERROR', _('Alternate recipient'), _('Please enter a valid email address!'), array(), true);\n\t\t\t\t\t$return['errorsOccurred'] = 'true';\n\t\t\t\t}\n\t\t\t\t$this->sendPasswordViaMailAlternateAddress = $input['sendMailAlternateAddress'];\n\t\t\t}\n\t\t}\n\t\tif ($return['errorsOccurred'] == 'false') {\n\t\t\t$return['messages'] .= StatusMessage('INFO', _('The new password will be stored in the directory after you save this account.'), '', array(), true);\n\t\t\t$this->extraInfoAttributes['INFO.passwordUpdated'] = 'yes';\n\t\t\t$this->extraInfoAttributes['INFO.forcePasswordChange'] = $forcePasswordChange ? 'yes' : 'no';\n\t\t\t$this->extraInfoAttributes['INFO.passwordChangeModules'] = implode(', ', $modules);\n\t\t\t$this->extraInfoAttributes['INFO.passwordChangeType'] = $random ? 'random' : 'manual';\n\t\t\t$this->extraInfoAttributes['INFO.sendPasswordViaEmail'] = $sendMail ? 'yes' : 'no';\n\t\t\tif (!empty($input['sendMailAlternateAddress'])) {\n\t\t\t\t$this->extraInfoAttributes['INFO.sendPasswordAlternateAddress'] = $input['sendMailAlternateAddress'];\n\t\t\t}\n\t\t}\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Returns if any module manages the mail attribute.\n\t *\n\t * @return boolean mail is managed\n\t */\n\tprivate function anyModuleManagesMail() {\n\t\tforeach ($this->module as $mod) {\n\t\t\tif (in_array('mail', $mod->getManagedAttributes($this->get_type()->getId()))) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Prints common controls like the save button and the ou selection.\n\t *\n\t * @param int $tabindex tabindex for GUI elements\n\t */\n\tprivate function printCommonControls(&$tabindex) {\n\t\t$row = new htmlResponsiveRow();\n\t\t$row->setCSSClasses(array('maxrow'));\n\t\t$leftButtonGroup = new htmlGroup();\n\t\t$leftButtonGroup->alignment = htmlElement::ALIGN_LEFT;\n\t\t// save button\n\t\t$saveButton = new htmlButton('accountContainerSaveAccount', _('Save'));\n\t\t$saveButton->setCSSClasses(array('fullwidth-mobile-only lam-primary'));\n\t\t$leftButtonGroup->addElement($saveButton);\n\t\t$leftButtonGroup->addElement(new htmlSpacer('1px', null));\n\t\t// set password button\n\t\tif ($this->showSetPasswordButton()) {\n\t\t\t$leftButtonGroup->addElement(new htmlSpacer('15px', null));\n\t\t\t$passwordButton = new htmlButton('accountContainerPassword', _('Set password'));\n\t\t\t$passwordButton->setCSSClasses(array('fullwidth-mobile-only lam-secondary'));\n\t\t\t$passwordButton->setOnClick('passwordShowChangeDialog(\\'' . _('Set password') . '\\', \\'' . _('Ok') . '\\', \\''\n\t\t\t\t. _('Cancel') . '\\', \\'' . _('Set random password') . '\\', \\'../misc/ajax.php?function=passwordChange&editKey=' . htmlspecialchars($this->base) . '\\',\\''\n\t\t\t\t. getSecurityTokenName() . '\\',\\'' . getSecurityTokenValue() . '\\');');\n\t\t\t$leftButtonGroup->addElement($passwordButton);\n\t\t}\n\t\t// delete button\n\t\tif (!$this->isNewAccount && checkIfDeleteEntriesIsAllowed($this->get_type()->getId())) {\n\t\t\t$leftButtonGroup->addElement(new htmlSpacer('15px', null));\n\t\t\t$deleteButton = new htmlButton('accountContainerDelete', _('Delete'));\n\t\t\t$deleteButton->setCSSClasses(array('fullwidth-mobile-only lam-danger'));\n\t\t\t$leftButtonGroup->addElement($deleteButton);\n\t\t}\n\t\t$leftButtonGroup->addElement(new htmlSpacer('15px', null));\n\t\t// reset button\n\t\tif (!$this->isNewAccount) {\n\t\t\t$resetButton = new htmlButton('accountContainerReset', _('Reset changes'));\n\t\t\t$resetButton->setCSSClasses(array('fullwidth-mobile-only'));\n\t\t\t$leftButtonGroup->addElement($resetButton);\n\t\t}\n\t\t$type = $this->type->getBaseType();\n\t\t$backToListButton = new htmlButton('accountContainerBackToList', $type->LABEL_BACK_TO_ACCOUNT_LIST);\n\t\t$backToListButton->setCSSClasses(array('fullwidth-mobile-only'));\n\t\t$leftButtonGroup->addElement($backToListButton);\n\t\t$row->add($leftButtonGroup, 12, 9);\n\n\t\t$rightGroup = new htmlGroup();\n\t\t// profile selection\n\t\t$accountProfilePersistenceManager = new AccountProfilePersistenceManager();\n\t\t$profilelist = $accountProfilePersistenceManager->getAccountProfileNames($this->type->getId(), $_SESSION['config']->getName());\n\t\tif (sizeof($profilelist) > 0) {\n\t\t\t$profilesSelect = new htmlSelect('accountContainerSelectLoadProfile', $profilelist, array($this->lastLoadedProfile));\n\t\t\t$profilesSelect->setCSSClasses(array('auto-width'));\n\t\t\t$rightGroup->addElement($profilesSelect);\n\t\t\t$profileButton = new htmlButton('accountContainerLoadProfile', _('Load profile'));\n\t\t\tif (!$this->isNewAccount) {\n\t\t\t\t$profileButton->setType('submit');\n\t\t\t\t$profileButton->setOnClick('confirmOrStopProcessing(\\'' . _('This may overwrite existing values with profile data. Continue?') . '\\', event);');\n\t\t\t}\n\t\t\t$rightGroup->addElement($profileButton);\n\t\t\t$rightGroup->addElement(new htmlSpacer('1px', null));\n\t\t\t$rightGroup->addElement(new htmlHelpLink('401'));\n\t\t}\n\t\t$row->add($rightGroup, 12, 3, 3, 'text-right');\n\n\t\tparseHtml(null, $row, array(), false, $tabindex, $this->type->getScope());\n\t}\n\n\t/**\n\t * Returns if the page should show a button to set the password.\n\t *\n\t * @return boolean show or hide button\n\t */\n\tprivate function showSetPasswordButton() {\n\t\tforeach ($this->module as $module) {\n\t\t\tif (($module instanceof passwordService) && $module->managesPasswordAttributes()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Prints the header of the account pages.\n\t */\n\tprivate function printPageHeader() {\n\t\tif (!empty($_POST)) {\n\t\t\tvalidateSecurityToken();\n\t\t}\n\t\tinclude '../../lib/adminHeader.inc';\n\t\techo '<script type=\"text/javascript\">\n\t\t\t\tjQuery(document).ready(function() {\n\t\t\t\t\tjQuery(\"#inputForm\").validationEngine({promptPosition: \"topLeft\", addFailureCssClassToField: \"lam-input-error\", autoHidePrompt: true, autoHideDelay: 5000});\n\t\t\t\t});\n\t\t\t</script>';\n\t\techo \"<form id=\\\"inputForm\\\" enctype=\\\"multipart/form-data\\\" action=\\\"edit.php?editKey=\" . htmlspecialchars($this->base) . \"\\\" method=\\\"post\\\" onSubmit=\\\"saveScrollPosition('inputForm')\\\" autocomplete=\\\"off\\\">\\n\";\n\t\techo '<input type=\"hidden\" name=\"' . getSecurityTokenName() . '\" value=\"' . getSecurityTokenValue() . '\">';\n\t}\n\n\t/**\n\t * Prints the footer of the account pages.\n\t */\n\tprivate function printPageFooter() {\n\t\techo \"</form>\\n\";\n\t\tinclude '../../lib/adminFooter.inc';\n\t}\n\n\t/**\n\t * Prints the HTML code to notify the user about the successful saving.\n\t *\n\t * @param array $messages array which contains status messages. Each entry is an array containing the status message parameters.\n\t */\n\tprivate function printSuccessPage($messages) {\n\t\t$this->printPageHeader();\n\t\t// Show success message\n\t\tif ($this->dn_orig == '') {\n\t\t\t$text = _(\"Account was created successfully.\");\n\t\t}\n\t\telse {\n\t\t\t$text = _(\"Account was modified successfully.\");\n\t\t}\n\t\techo \"<div smallPaddingContent\\\">\";\n\n\t\t$container = new htmlResponsiveRow();\n\t\t$container->addVerticalSpacer('2rem');\n\t\t// show messages\n\t\tfor ($i = 0; $i < sizeof($messages); $i++) {\n\t\t\tif (sizeof($messages[$i]) == 2) {\n\t\t\t\t$message = new htmlStatusMessage($messages[$i][0], $messages[$i][1]);\n\t\t\t\t$container->add($message);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$message = new htmlStatusMessage($messages[$i][0], $messages[$i][1], $messages[$i][2]);\n\t\t\t\t$container->add($message);\n\t\t\t}\n\t\t}\n\t\t$message = new htmlStatusMessage('INFO', _('LDAP operation successful.'), $text);\n\t\t$container->add($message);\n\t\t$container->addVerticalSpacer('2rem');\n\n\t\t$type = $this->type->getBaseType();\n\t\t$buttonGroup = new htmlGroup();\n\t\t$backToListButton = new htmlButton('accountContainerBackToList', $type->LABEL_BACK_TO_ACCOUNT_LIST);\n\t\t$backToListButton->setCSSClasses(array('lam-primary fullwidth-mobile-only'));\n\t\t$buttonGroup->addElement($backToListButton);\n\t\t$buttonGroup->addElement(new htmlSpacer('1rem', null));\n\t\tif (checkIfNewEntriesAreAllowed($this->type->getId())) {\n\t\t\t$createButton = new htmlButton('accountContainerCreateAgain', $type->LABEL_CREATE_ANOTHER_ACCOUNT);\n\t\t\t$createButton->setCSSClasses(array('lam-secondary fullwidth-mobile-only'));\n\t\t\t$buttonGroup->addElement($createButton);\n\t\t\t$buttonGroup->addElement(new htmlSpacer('0.5rem', null));\n\t\t}\n\t\t$pdfStructurePersistenceManager = new PdfStructurePersistenceManager();\n\t\t$pdfStructures = $pdfStructurePersistenceManager->getPDFStructures($_SESSION['config']->getName(), $this->type->getId());\n\t\tif ($pdfStructures) {\n\t\t\t$pdfButton = new htmlButton('accountContainerCreatePDF', _('Create PDF file'));\n\t\t\t$pdfButton->setCSSClasses(array('lam-secondary fullwidth-mobile-only'));\n\t\t\t$buttonGroup->addElement($pdfButton);\n\t\t\t$buttonGroup->addElement(new htmlSpacer('1rem', null));\n\t\t}\n\t\t$backToEditButton = new htmlButton('accountContainerBackToEdit', _('Edit again'));\n\t\t$backToEditButton->setCSSClasses(array('fullwidth-mobile-only'));\n\t\t$buttonGroup->addElement($backToEditButton);\n\t\t$container->add($buttonGroup);\n\n\t\t$tabindex = 1;\n\t\tparseHtml(null, $container, array(), false, $tabindex, $this->type->getScope());\n\n\t\techo \"</div>\\n\";\n\t\t$this->printPageFooter();\n\t}\n\n\t/**\n\t * Checks if the user requested to load a profile.\n\t *\n\t * @return boolean true, if profile was loaded\n\t */\n\tprivate function loadProfileIfRequested() {\n\t\tif (isset($_POST['accountContainerLoadProfile']) && isset($_POST['accountContainerSelectLoadProfile'])) {\n\t\t\t$accountProfilePersistenceManager = new AccountProfilePersistenceManager();\n\t\t\t$profile = $accountProfilePersistenceManager->loadAccountProfile($this->type->getId(), $_POST['accountContainerSelectLoadProfile'], $_SESSION['config']->getName());\n\t\t\t$this->lastLoadedProfile = $_POST['accountContainerSelectLoadProfile'];\n\t\t\t// pass profile to each module\n\t\t\t$modules = array_keys($this->module);\n\t\t\tforeach ($modules as $module) {\n\t\t\t\t$this->module[$module]->load_profile($profile);\n\t\t\t}\n\t\t\tif (isset($profile['ldap_rdn'][0])\n\t\t\t\t\t&& in_array($profile['ldap_rdn'][0], getRDNAttributes($this->type->getId()))) {\n\t\t\t\t$this->rdn = $profile['ldap_rdn'][0];\n\t\t\t}\n\t\t\tif (isset($profile['ldap_suffix'][0]) && ($profile['ldap_suffix'][0] != '-')) {\n\t\t\t\t$this->dnSuffix = $profile['ldap_suffix'][0];\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Prints the HTML code of the module tabs.\n\t */\n\tprivate function printModuleTabs() {\n\t\t// $x is used to count up tabindex\n\t\t$x=1;\n\t\techo '<ul class=\"ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all\">';\n\t\t// Loop for each module\n\t\tfor ($i = 0; $i < count($this->order); $i++) {\n\t\t\t$buttonStatus = $this->module[$this->order[$i]]->getButtonStatus();\n\t\t\t$alias = $this->module[$this->order[$i]]->get_alias();\n\t\t\t// skip hidden buttons\n\t\t\tif ($buttonStatus == 'hidden') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$buttonImage = $this->module[$this->order[$i]]->getIcon();\n\t\t\t$activatedClass = '';\n\t\t\tif ($this->order[$this->current_page] == $this->order[$i]) {\n\t\t\t\t$activatedClass = ' lam-tabs-selected';\n\t\t\t}\n\t\t\t// print button\n\t\t\techo '<li class=\"ui-state-default ui-corner-left' . $activatedClass . '\">';\n\t\t\techo \"<button class=\\\"lam-account-type\\\" name=\\\"form_main_\".$this->order[$i].\"\\\"\";\n\t\t\techo \" tabindex=$x\";\n\t\t\tif ($buttonStatus == 'disabled') {\n\t\t\t\techo \" disabled\";\n\t\t\t}\n\t\t\techo ' onmouseover=\"jQuery(this).addClass(\\'tabs-hover\\');\" onmouseout=\"jQuery(this).removeClass(\\'tabs-hover\\');\">';\n\t\t\tif ($buttonImage != null) {\n\t\t\t\tif (!(strpos($buttonImage, 'http') === 0) && !(strpos($buttonImage, '/') === 0)) {\n\t\t\t\t\t$buttonImage = '../../graphics/' . $buttonImage;\n\t\t\t\t}\n\t\t\t\techo \"<img height=32 width=32 class=\\\"align-middle\\\" style=\\\"padding: 3px;\\\" alt=\\\"\\\" src=\\\"$buttonImage\\\">&nbsp;\";\n\t\t\t}\n\t\t\techo '<span class=\"hide-on-mobile\">';\n\t\t\techo $alias;\n\t\t\techo '<span>';\n\t\t\techo \"&nbsp;</button>\\n\";\n\t\t\techo \"</li>\\n\";\n\t\t\t$x++;\n\t\t}\n\t\techo '</ul>';\n\t}\n\n\t/**\n\t* This function checks which LDAP attributes have changed while the account was edited.\n\t*\n\t* @param array $attributes list of current LDAP attributes\n\t* @param array $orig list of old attributes when account was loaded\n\t* @return array an array which can be passed to $this->saveAccount()\n\t*/\n\tfunction save_module_attributes($attributes, $orig) {\n\t\t$return = array();\n\t\t$toadd = array();\n\t\t$tomodify = array();\n\t\t$torem = array();\n\t\t$notchanged = array();\n\t\t// get list of all attributes\n\t\t$attr_names = array_keys($attributes);\n\t\t$orig_names = array_keys($orig);\n\t\t// find deleted attributes (in $orig but no longer in $attributes)\n\t\tforeach ($orig_names as $i => $value) {\n\t\t\tif (!isset($attributes[$value])) {\n\t\t\t\t$torem[$value] = $orig[$value];\n\t\t\t}\n\t\t}\n\t\t// find changed attributes\n\t\tforeach ($attr_names as $i => $name) {\n\t\t\t// find deleted attributes\n\t\t\tif (isset($orig[$name]) && is_array($orig[$name])) {\n\t\t\t\tforeach ($orig[$name] as $value) {\n\t\t\t\t\tif (is_array($attributes[$name])) {\n\t\t\t\t\t\tif (!in_array($value, $attributes[$name], true)\n\t\t\t\t\t\t\t\t&& ($value !== null)\n\t\t\t\t\t\t\t\t&& ($value !== '')) {\n\t\t\t\t\t\t\t$torem[$name][] = $value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telseif (($value !== null) && ($value !== '')) {\n\t\t\t\t\t\t$torem[$name][] = $value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// find new attributes\n\t\t\tif (isset($attributes[$name]) && is_array($attributes[$name])) {\n\t\t\t\tforeach ($attributes[$name] as $value) {\n\t\t\t\t\tif (isset($orig[$name]) && is_array($orig[$name])) {\n\t\t\t\t\t\tif (!in_array($value, $orig[$name], true)\n\t\t\t\t\t\t\t\t&& ($value !== null)\n\t\t\t\t\t\t\t\t&& ($value !== ''))\n\t\t\t\t\t\t\t$toadd[$name][] = $value;\n\t\t\t\t\t}\n\t\t\t\t\telseif (($value !== null) && ($value !== '')) {\n\t\t\t\t\t\t$toadd[$name][] = $value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// find unchanged attributes\n\t\t\tif (isset($orig[$name]) && is_array($orig[$name]) && is_array($attributes[$name])) {\n\t\t\t\tforeach ($attributes[$name] as $value) {\n\t\t\t\t\tif (($value !== null) && ($value !== '') && in_array($value, $orig[$name], true)) {\n\t\t\t\t\t\t$notchanged[$name][] = $value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// create modify with add and remove\n\t\t$attributes2 = array_keys($toadd);\n\t\tfor ($i=0; $i<count($attributes2); $i++) {\n\t\t\tif (isset($torem[$attributes2[$i]]) && (count($toadd[$attributes2[$i]]) > 0) && (count($torem[$attributes2[$i]]) > 0)) {\n\t\t\t\t// found attribute which should be modified\n\t\t\t\t$tomodify[$attributes2[$i]] = $toadd[$attributes2[$i]];\n\t\t\t\t// merge unchanged values\n\t\t\t\tif (isset($notchanged[$attributes2[$i]])) {\n\t\t\t\t\t$tomodify[$attributes2[$i]] = array_merge($tomodify[$attributes2[$i]], $notchanged[$attributes2[$i]]);\n\t\t\t\t\tunset($notchanged[$attributes2[$i]]);\n\t\t\t\t}\n\t\t\t\t// remove old add and remove commands\n\t\t\t\tunset($toadd[$attributes2[$i]]);\n\t\t\t\tunset($torem[$attributes2[$i]]);\n\t\t\t}\n\t\t}\n\t\tif (count($toadd) > 0) {\n\t\t\t$return[$this->dn_orig]['add'] = $toadd;\n\t\t}\n\t\tif (count($torem) > 0) {\n\t\t\t$return[$this->dn_orig]['remove'] = $torem;\n\t\t}\n\t\tif (count($tomodify) > 0) {\n\t\t\t$return[$this->dn_orig]['modify'] = $tomodify;\n\t\t}\n\t\tif (count($notchanged) > 0) {\n\t\t\t$return[$this->dn_orig]['notchanged'] = $notchanged;\n\t\t}\n\t\treturn $return;\n\t}\n\n\t/**\n\t* Loads an LDAP account with the given DN.\n\t*\n\t* @param string $dn the DN of the account\n\t* @param array $infoAttributes list of additional informational attributes that are added to the LDAP attributes\n\t* E.g. this is used to inject the clear text password in the file upload. Informational attribute names must start with \"INFO.\".\n\t* @return array error messages\n\t*/\n\tfunction load_account($dn, $infoAttributes = array()) {\n\t\tlogNewMessage(LOG_DEBUG, \"Edit account \" . $dn);\n\t\t$this->extraInfoAttributes['INFO.isNewAccount'] = 'no';\n\t\t$this->extraInfoAttributes['INFO.passwordUpdated'] = 'no';\n\t\t$this->extraInfoAttributes['INFO.passwordChangeType'] = 'none';\n\t\t$this->module = array();\n\t\t$modules = $_SESSION['config']->get_AccountModules($this->type->getId());\n\t\t$filter = 'objectClass=*';\n\t\t$searchAttrs = array('*', '+');\n\t\tforeach ($modules as $module) {\n\t\t\t$modTmp = new $module($this->type->getScope());\n\t\t\t$searchAttrs = array_merge($searchAttrs, $modTmp->getManagedHiddenAttributes($this->type->getId()));\n\t\t}\n\t\t$result = @ldap_read($_SESSION['ldap']->server(), $dn, $filter, $searchAttrs, 0, 0, 0, LDAP_DEREF_NEVER);\n\t\tif (!$result) {\n\t\t\treturn array(array(\"ERROR\", _(\"Unable to load LDAP entry:\") . \" \" . htmlspecialchars($dn), getDefaultLDAPErrorString($_SESSION['ldap']->server())));\n\t\t}\n\t\t$entry = @ldap_first_entry($_SESSION['ldap']->server(), $result);\n\t\tif (!$entry) {\n\t\t\treturn array(array(\"ERROR\", _(\"Unable to load LDAP entry:\") . \" \" . htmlspecialchars($dn), getDefaultLDAPErrorString($_SESSION['ldap']->server())));\n\t\t}\n\t\t$this->dnSuffix = extractDNSuffix($dn);\n\t\t$this->dn_orig = $dn;\n\t\t// extract RDN\n\t\t$this->rdn = extractRDNAttribute($dn);\n\t\t$attr = ldap_get_attributes($_SESSION['ldap']->server(), $entry);\n\t\t$attr = array($attr);\n\t\tcleanLDAPResult($attr);\n\t\t$attr = $attr[0];\n\t\t// fix spelling errors\n\t\t$attr = $this->fixLDAPAttributes($attr, $modules);\n\t\t// get binary attributes\n\t\t$binaryAttr = array('jpegPhoto');\n\t\tfor ($i = 0; $i < sizeof($binaryAttr); $i++) {\n\t\t\tif (isset($attr[$binaryAttr[$i]][0])) {\n\t\t\t\t$binData = ldap_get_values_len($_SESSION['ldap']->server(), $entry, $binaryAttr[$i]);\n\t\t\t\tunset($binData['count']);\n\t\t\t\t$attr[$binaryAttr[$i]] = $binData;\n\t\t\t}\n\t\t}\n\t\t// add informational attributes\n\t\t$attr = array_merge($attr, $infoAttributes);\n\t\t// save original attributes\n\t\t$this->attributes_orig = $attr;\n\n\t\tforeach ($modules as $module) {\n\t\t\tif (!isset($this->module[$module])) {\n\t\t\t\t$this->module[$module] = new $module($this->type->getScope());\n\t\t\t\t$this->module[$module]->init($this->base);\n\t\t\t}\n\t\t\t$this->module[$module]->load_attributes($attr);\n\t\t}\n\n\t\t// sort module buttons\n\t\t$this->sortModules();\n\t\t// get titles\n\t\t$typeObject = $this->type->getBaseType();\n\t\t$this->titleBarTitle = $typeObject->getTitleBarTitle($this);\n\t\t$this->titleBarSubtitle = $typeObject->getTitleBarSubtitle($this);\n\t\treturn array();\n\t}\n\n\t/**\n\t * Fixes spelling errors in the attribute names.\n\t *\n\t * @param array $attributes LDAP attributes\n\t * @param array $modules list of active modules\n\t * @return array fixed attributes\n\t */\n\tfunction fixLDAPAttributes($attributes, $modules) {\n\t\tif (!is_array($attributes)) {\n\t\t\treturn $attributes;\n\t\t}\n\t\t$keys = array_keys($attributes);\n\t\t// get correct object class names, aliases and attributes\n\t\t$objectClasses = array();\n\t\t$aliases = array();\n\t\t$ldapAttributesTemp = array();\n\t\tforeach ($modules as $module) {\n\t\t\t$moduleObj = moduleCache::getModule($module, $this->type->getScope());\n\t\t\t$objectClasses = array_merge($objectClasses, $moduleObj->getManagedObjectClasses($this->type->getId()));\n\t\t\t$aliases = array_merge($aliases, $moduleObj->getLDAPAliases($this->type->getId()));\n\t\t\t$ldapAttributesTemp = array_merge($ldapAttributesTemp,\n\t\t\t\t$moduleObj->getManagedAttributes($this->type->getId()),\n\t\t\t\t$moduleObj->getManagedHiddenAttributes($this->type->getId()));\n\t\t}\n\t\t// build lower case attribute names\n\t\t$ldapAttributes = array();\n\t\tfor ($i = 0; $i < sizeof($ldapAttributesTemp); $i++) {\n\t\t\t$ldapAttributes[strtolower($ldapAttributesTemp[$i])] = $ldapAttributesTemp[$i];\n\t\t\tunset($ldapAttributes[$i]);\n\t\t}\n\t\t$ldapAttributesKeys = array_keys($ldapAttributes);\n\t\t// convert alias names to lower case (for easier comparison)\n\t\t$aliasKeys = array_keys($aliases);\n\t\tfor ($i = 0; $i < sizeof($aliasKeys); $i++) {\n\t\t\tif ($aliasKeys[$i] != strtolower($aliasKeys[$i])) {\n\t\t\t\t$aliases[strtolower($aliasKeys[$i])] = $aliases[$aliasKeys[$i]];\n\t\t\t\tunset($aliases[$aliasKeys[$i]]);\n\t\t\t\t$aliasKeys[$i] = strtolower($aliasKeys[$i]);\n\t\t\t}\n\t\t}\n\t\t// fix object classes and attributes\n\t\tfor ($i = 0; $i < sizeof($keys); $i++) {\n\t\t\t// check object classes\n\t\t\tif (strtolower($keys[$i]) == 'objectclass') {\n\t\t\t\t// fix object class attribute\n\t\t\t\tif ($keys[$i] != 'objectClass') {\n\t\t\t\t\t$temp = $attributes[$keys[$i]];\n\t\t\t\t\tunset($attributes[$keys[$i]]);\n\t\t\t\t\t$attributes['objectClass'] = $temp;\n\t\t\t\t}\n\t\t\t\t// fix object classes\n\t\t\t\tfor ($attrClass = 0; $attrClass < sizeof($attributes['objectClass']); $attrClass++) {\n\t\t\t\t\tfor ($modClass = 0; $modClass < sizeof($objectClasses); $modClass++) {\n\t\t\t\t\t\tif (strtolower($attributes['objectClass'][$attrClass]) == strtolower($objectClasses[$modClass])) {\n\t\t\t\t\t\t\tif ($attributes['objectClass'][$attrClass] != $objectClasses[$modClass]) {\n\t\t\t\t\t\t\t\tunset($attributes['objectClass'][$attrClass]);\n\t\t\t\t\t\t\t\t$attributes['objectClass'][] = $objectClasses[$modClass];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// fix aliases\n\t\t\t\tif (in_array(strtolower($keys[$i]), $aliasKeys)) {\n\t\t\t\t\t$attributes[$aliases[strtolower($keys[$i])]] = $attributes[$keys[$i]];\n\t\t\t\t\tunset($attributes[$keys[$i]]);\n\t\t\t\t}\n\t\t\t\t// fix attribute names\n\t\t\t\telseif (in_array(strtolower($keys[$i]), $ldapAttributesKeys)) {\n\t\t\t\t\tif ($keys[$i] != $ldapAttributes[strtolower($keys[$i])]) {\n\t\t\t\t\t\t$attributes[$ldapAttributes[strtolower($keys[$i])]] = $attributes[$keys[$i]];\n\t\t\t\t\t\tunset($attributes[$keys[$i]]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $attributes;\n\t}\n\n\t/**\n\t* This function will prepare the object for a new account.\n\t*/\n\tpublic function new_account() {\n\t\tlogNewMessage(LOG_DEBUG, \"New account with type \" . $this->type->getId());\n\t\t$this->isNewAccount = true;\n\t\t$this->lastLoadedProfile = 'default';\n\t\t$this->initModules();\n\t\t$this->extraInfoAttributes['INFO.isNewAccount'] = 'yes';\n\t\t$this->extraInfoAttributes['INFO.passwordUpdated'] = 'no';\n\t\t// sort module buttons\n\t\t$this->sortModules();\n\t\t$profileName = 'default';\n\t\t$profileCookieKey = 'defaultProfile_' . $this->get_type()->getId();\n\t\ttry {\n\t\t\t$accountProfilePersistenceManager = new AccountProfilePersistenceManager();\n\t\t\tif (!empty($_COOKIE[$profileCookieKey])) {\n\t\t\t\t$cookieProfileName = $_COOKIE[$profileCookieKey];\n\t\t\t\tif ($accountProfilePersistenceManager->isAccountProfileExisting($this->get_type()->getId(), $cookieProfileName, $_SESSION['config']->getName())) {\n\t\t\t\t\t$profileName = $cookieProfileName;\n\t\t\t\t\t$this->lastLoadedProfile = $cookieProfileName;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$profile = $accountProfilePersistenceManager->loadAccountProfile($this->type->getId(), $profileName, $_SESSION['config']->getName());\n\t\t\t// pass profile to each module\n\t\t\t$modules = array_keys($this->module);\n\t\t\tforeach ($modules as $module) {\n\t\t\t\t$this->module[$module]->load_profile($profile);\n\t\t\t}\n\t\t\tif (isset($profile['ldap_rdn'][0]) && in_array($profile['ldap_rdn'][0], getRDNAttributes($this->type->getId()))) {\n\t\t\t\t$this->rdn = $profile['ldap_rdn'][0];\n\t\t\t}\n\t\t\tif (isset($profile['ldap_suffix'][0]) && ($profile['ldap_suffix'][0] != '-')) {\n\t\t\t\t$this->dnSuffix = $profile['ldap_suffix'][0];\n\t\t\t}\n\t\t}\n\t\tcatch (LAMException $e) {\n\t\t\tlogNewMessage(LOG_ERR, $e->getTitle());\n\t\t}\n\t\t// get titles\n\t\t$typeObject = $this->type->getBaseType();\n\t\t$this->titleBarTitle = $typeObject->getTitleBarTitle($this);\n\t\t$this->titleBarSubtitle = $typeObject->getTitleBarSubtitle($this);\n\t\treturn 0;\n\t}\n\n\t/**\n\t * Copies the data from the given account to this one.\n\t *\n\t * @param string $copyDn DN to copy from\n\t */\n\tpublic function copyFromExistingAccount(string $copyDn) : void {\n\t\t$copyData = ldapGetDN($copyDn, array('*', '+'));\n\t\t$modules = $_SESSION['config']->get_AccountModules($this->type->getId());\n\t\t$copyData = $this->fixLDAPAttributes($copyData, $modules);\n\t\tforeach ($this->module as $accountModule) {\n\t\t\t$accountModule->loadAttributesFromAccountCopy($copyData);\n\t\t}\n\t}\n\n\t/**\n\t * Creates the account modules and initializes them.\n\t */\n\tpublic function initModules() {\n\t\t$modules = $_SESSION['config']->get_AccountModules($this->type->getId());\n\t\tforeach ($modules as $module) {\n\t\t\t$this->module[$module] = new $module($this->type->getScope());\n\t\t\t$this->module[$module]->init($this->base);\n\t\t}\n\t}\n\n\t/**\n\t* This function will save an account to the LDAP database.\n\t*\n\t* @return array list of status messages\n\t*/\n\tprivate function save_account() {\n\t\tif (!checkIfWriteAccessIsAllowed($this->type->getId())) {\n\t\t\tdie();\n\t\t}\n\t\t$this->finalDN = $this->dn_orig;\n\t\t$errors = array();\n\t\t$module = array_keys($this->module);\n\t\t$attributes = array();\n\t\t// load attributes\n\t\tforeach ($module as $singlemodule) {\n\t\t\t// load changes\n\t\t\t$temp = $this->module[$singlemodule]->save_attributes();\n\t\t\tif (!is_array($temp)) {\n\t\t\t\t$temp = array();\n\t\t\t}\n\t\t\t// merge changes\n\t\t\t$DNs = array_keys($temp);\n\t\t\tif (is_array($temp)) {\n\t\t\t\t$attributes = array_merge_recursive($temp, $attributes);\n\t\t\t}\n\t\t\tfor ($i = 0; $i < count($DNs); $i++) {\n\t\t\t\t$ops = array_keys($temp[$DNs[$i]]);\n\t\t\t\tfor ($j=0; $j<count($ops); $j++) {\n\t\t\t\t\t$attrs = array_keys($temp[$DNs[$i]][$ops[$j]]);\n\t\t\t\t\tfor ($k=0; $k<count($attrs); $k++) {\n\t\t\t\t\t\t$attributes[$DNs[$i]][$ops[$j]][$attrs[$k]] = array_values(array_unique($attributes[$DNs[$i]][$ops[$j]][$attrs[$k]]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// build DN for new accounts and change it for existing ones if needed\n\t\tif (isset($attributes[$this->dn_orig]['modify'][$this->rdn][0])) {\n\t\t\t$this->finalDN = $this->rdn . '=' . ldap_escape($attributes[$this->dn_orig]['modify'][$this->rdn][0], '', LDAP_ESCAPE_DN) . ',' . $this->dnSuffix;\n\t\t\tif ($this->dn_orig != $this->finalDN) {\n\t\t\t\t$attributes[$this->finalDN] = $attributes[$this->dn_orig];\n\t\t\t\tunset($attributes[$this->dn_orig]);\n\t\t\t}\n\t\t}\n\t\telseif (isset($attributes[$this->dn_orig]['add'][$this->rdn][0])) {\n\t\t\t$this->finalDN = $this->rdn . '=' . ldap_escape($attributes[$this->dn_orig]['add'][$this->rdn][0], '', LDAP_ESCAPE_DN) . ',' . $this->dnSuffix;\n\t\t\tif ($this->dn_orig != $this->finalDN) {\n\t\t\t\t$attributes[$this->finalDN] = $attributes[$this->dn_orig];\n\t\t\t\tunset($attributes[$this->dn_orig]);\n\t\t\t}\n\t\t}\n\t\telseif (isset($attributes[$this->dn_orig]['remove'][$this->rdn][0]) && isset($attributes[$this->dn_orig]['notchanged'][$this->rdn][0])) {\n\t\t\t$this->finalDN = $this->rdn . '=' . ldap_escape($attributes[$this->dn_orig]['notchanged'][$this->rdn][0], '', LDAP_ESCAPE_DN) . ',' . $this->dnSuffix;\n\t\t\tif ($this->dn_orig != $this->finalDN) {\n\t\t\t\t$attributes[$this->finalDN] = $attributes[$this->dn_orig];\n\t\t\t\tunset($attributes[$this->dn_orig]);\n\t\t\t}\n\t\t}\n\t\telseif (!$this->isNewAccount && (($this->dnSuffix != extractDNSuffix($this->dn_orig)) || ($this->rdn != extractRDNAttribute($this->dn_orig)))) {\n\t\t\t$this->finalDN = $this->rdn . '=' . ldap_escape($attributes[$this->dn_orig]['notchanged'][$this->rdn][0], '', LDAP_ESCAPE_DN) . ',' . $this->dnSuffix;\n\t\t\t$attributes[$this->finalDN] = $attributes[$this->dn_orig];\n\t\t\tunset($attributes[$this->dn_orig]);\n\t\t}\n\t\t// remove pwdAccountLockedTime attribute change if also userPassword is changed (PPolicy will remove this attribute itself)\n\t\tif (isset($attributes[$this->finalDN]['modify']['userpassword']) || isset($attributes[$this->finalDN]['remove']['userpassword'])) {\n\t\t\tif (isset($attributes[$this->finalDN]['modify']['pwdAccountLockedTime'])) {\n\t\t\t\tunset($attributes[$this->finalDN]['modify']['pwdAccountLockedTime']);\n\t\t\t}\n\t\t\tif (isset($attributes[$this->finalDN]['remove']['pwdAccountLockedTime'])) {\n\t\t\t\tunset($attributes[$this->finalDN]['remove']['pwdAccountLockedTime']);\n\t\t\t}\n\t\t}\n\t\t// pre modify actions\n\t\t$prePostModifyAttributes = $this->extraInfoAttributes;\n\t\tif (isset($attributes[$this->finalDN]) && is_array($attributes[$this->finalDN])) {\n\t\t\tif (isset($attributes[$this->finalDN]['notchanged'])) {\n\t\t\t\t$prePostModifyAttributes = array_merge($prePostModifyAttributes, $attributes[$this->finalDN]['notchanged']);\n\t\t\t}\n\t\t\tif (isset($attributes[$this->finalDN]['modify'])) {\n\t\t\t\tforeach ($attributes[$this->finalDN]['modify'] as $key => $value) {\n\t\t\t\t\t$prePostModifyAttributes[$key] = &$attributes[$this->finalDN]['modify'][$key];\n\t\t\t\t}\n\t\t\t\tforeach ($attributes[$this->finalDN]['modify'] as $key => $value) {\n\t\t\t\t\t$prePostModifyAttributes['MOD.' . $key] = $value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isset($attributes[$this->finalDN]['add'])) {\n\t\t\t\tforeach ($attributes[$this->finalDN]['add'] as $key => $value) {\n\t\t\t\t\t$prePostModifyAttributes[$key] = &$attributes[$this->finalDN]['add'][$key];\n\t\t\t\t}\n\t\t\t\tforeach ($attributes[$this->finalDN]['add'] as $key => $value) {\n\t\t\t\t\t$prePostModifyAttributes['NEW.' . $key] = $value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isset($attributes[$this->finalDN]['remove'])) {\n\t\t\t\tforeach ($attributes[$this->finalDN]['remove'] as $key => $value) {\n\t\t\t\t\t$prePostModifyAttributes['DEL.' . $key] = $value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isset($attributes[$this->finalDN]['info'])) {\n\t\t\t\tforeach ($attributes[$this->finalDN]['info'] as $key => $value) {\n\t\t\t\t\t$prePostModifyAttributes['INFO.' . $key] = $value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!$this->isNewAccount) {\n\t\t\tforeach ($this->attributes_orig as $key => $value) {\n\t\t\t\t$prePostModifyAttributes['ORIG.' . $key] = $value;\n\t\t\t}\n\t\t\t$prePostModifyAttributes['ORIG.dn'][0] = $this->dn_orig;\n\t\t}\n\t\t$prePostModifyAttributes['dn'][0] = $this->finalDN;\n\t\tif (!$this->isNewAccount && ($this->finalDN != $this->dn_orig)) {\n\t\t\t$prePostModifyAttributes['MOD.dn'][0] = $this->finalDN;\n\t\t}\n\t\tlogNewMessage(LOG_DEBUG, 'Edit page pre/postModify attributes: ' . print_r($prePostModifyAttributes, true));\n\t\t$preModifyOk = true;\n\t\tforeach ($module as $singlemodule) {\n\t\t\t$preModifyMessages = $this->module[$singlemodule]->preModifyActions($this->isNewAccount, $prePostModifyAttributes);\n\t\t\t$errors = array_merge($errors, $preModifyMessages);\n\t\t\tfor ($i = 0; $i < sizeof($preModifyMessages); $i++) {\n\t\t\t\tif ($preModifyMessages[$i][0] == 'ERROR') {\n\t\t\t\t\t$preModifyOk = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!$preModifyOk) {\n\t\t\t$errors[] = array('ERROR', _('The operation was stopped because of the above errors.'));\n\t\t\treturn $errors;\n\t\t}\n\t\t// Set to true if an real error has happened\n\t\t$stopprocessing = false;\n\t\t$finalDnLower = strtolower($this->finalDN);\n\t\t$dnOrigLower = strtolower($this->dn_orig);\n\t\tif (($finalDnLower !== $dnOrigLower) && (unescapeLdapSpecialCharacters($finalDnLower) !== unescapeLdapSpecialCharacters($dnOrigLower))) {\n\t\t\t// move existing DN\n\t\t\tif ($this->dn_orig != '') {\n\t\t\t\t$removeOldRDN = $_SESSION['ldap']->isActiveDirectory();\n\t\t\t\tif (isset($attributes[$this->finalDN]['modify'])) {\n\t\t\t\t\t$attributes[$this->finalDN]['modify'] = array_change_key_case($attributes[$this->finalDN]['modify'], CASE_LOWER);\n\t\t\t\t}\n\t\t\t\t$rdnAttr = strtolower(extractRDNAttribute($this->finalDN));\n\t\t\t\tif (isset($attributes[$this->finalDN]['modify'][$rdnAttr])\n\t\t\t\t\t\t&& (sizeof($attributes[$this->finalDN]['modify'][$rdnAttr]) == 1)\n\t\t\t\t\t\t&& (($attributes[$this->finalDN]['modify'][$rdnAttr][0] == extractRDNValue($this->finalDN))\n\t\t\t\t\t\t\t|| (unescapeLdapSpecialCharacters($attributes[$this->finalDN]['modify'][$rdnAttr][0]) == unescapeLdapSpecialCharacters(extractRDNValue($this->finalDN))))) {\n\t\t\t\t\t// remove old RDN if attribute is single valued\n\t\t\t\t\t$removeOldRDN = true;\n\t\t\t\t\tunset($attributes[$this->finalDN]['modify'][extractRDNAttribute($this->finalDN)]);\n\t\t\t\t}\n\t\t\t\tlogNewMessage(LOG_DEBUG, 'Rename ' . $this->dn_orig . ' to ' . $this->finalDN);\n\t\t\t\t$success = ldap_rename($_SESSION['ldap']->server(), $this->dn_orig, $this->getRDN($this->finalDN), $this->getParentDN($this->finalDN), $removeOldRDN);\n\t\t\t\tif ($success) {\n\t\t\t\t\tlogNewMessage(LOG_NOTICE, 'Renamed DN ' . $this->dn_orig . \" to \" . $this->finalDN);\n\t\t\t\t\t// do not add attribute value as new one if added via rename operation\n\t\t\t\t\tif (!empty($attributes[$this->finalDN]['add'][$rdnAttr]) && in_array(extractRDNValue($this->finalDN), $attributes[$this->finalDN]['add'][$rdnAttr])) {\n\t\t\t\t\t\t$attributes[$this->finalDN]['add'][$rdnAttr] = array_delete(array(extractRDNValue($this->finalDN)), $attributes[$this->finalDN]['add'][$rdnAttr]);\n\t\t\t\t\t\tif (empty($attributes[$this->finalDN]['add'][$rdnAttr])) {\n\t\t\t\t\t\t\tunset($attributes[$this->finalDN]['add'][$rdnAttr]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlogNewMessage(LOG_ERR, 'Unable to rename DN: ' . $this->dn_orig . ' (' . ldap_error($_SESSION['ldap']->server()) . '). '\n\t\t\t\t\t\t. getExtendedLDAPErrorMessage($_SESSION['ldap']->server()));\n\t\t\t\t\t$errors[] = array('ERROR', sprintf(_('Was unable to rename DN: %s.'), $this->dn_orig), getDefaultLDAPErrorString($_SESSION['ldap']->server()));\n\t\t\t\t\t$stopprocessing = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// create complete new dn\n\t\t\telse {\n\t\t\t\t$attr = array();\n\t\t\t\tif (isset($attributes[$this->finalDN]['add']) && is_array($attributes[$this->finalDN]['add'])) {\n\t\t\t\t\t$attr = array_merge_recursive($attr, $attributes[$this->finalDN]['add']);\n\t\t\t\t}\n\t\t\t\tif (isset($attributes[$this->finalDN]['notchanged']) && is_array($attributes[$this->finalDN]['notchanged'])) {\n\t\t\t\t\t$attr = array_merge_recursive($attr, $attributes[$this->finalDN]['notchanged']);\n\t\t\t\t}\n\t\t\t\tif (isset($attributes[$this->finalDN]['modify']) && is_array($attributes[$this->finalDN]['modify'])) {\n\t\t\t\t\t$attr = array_merge_recursive($attr, $attributes[$this->finalDN]['modify']);\n\t\t\t\t}\n\t\t\t\t$success = @ldap_add($_SESSION['ldap']->server(), $this->finalDN, $attr);\n\t\t\t\tif (!$success) {\n\t\t\t\t\tlogNewMessage(LOG_ERR, 'Unable to create DN: ' . $this->finalDN . ' (' . ldap_error($_SESSION['ldap']->server()) . '). '\n\t\t\t\t\t\t. getExtendedLDAPErrorMessage($_SESSION['ldap']->server()));\n\t\t\t\t\t$errors[] = array('ERROR', sprintf(_('Was unable to create DN: %s.'), $this->finalDN), getDefaultLDAPErrorString($_SESSION['ldap']->server()));\n\t\t\t\t\t$stopprocessing = true;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlogNewMessage(LOG_NOTICE, 'Created DN: ' . $this->finalDN);\n\t\t\t\t}\n\t\t\t\tunset($attributes[$this->finalDN]);\n\t\t\t}\n\t\t}\n\t\t$DNs = array_keys($attributes);\n\t\tfor ($i=0; $i<count($DNs); $i++) {\n\t\t\tif (!$stopprocessing) {\n\t\t\t\tlogNewMessage(LOG_DEBUG, 'Attribute changes for ' . $DNs[$i] . \":\\n\" . print_r($attributes[$DNs[$i]], true));\n\t\t\t\t// modify attributes\n\t\t\t\tif (!empty($attributes[$DNs[$i]]['modify']) && !$stopprocessing) {\n\t\t\t\t\t$success = @ldap_mod_replace($_SESSION['ldap']->server(), $DNs[$i], $attributes[$DNs[$i]]['modify']);\n\t\t\t\t\tif (!$success) {\n\t\t\t\t\t\tlogNewMessage(LOG_ERR, 'Unable to modify attributes of DN: ' . $DNs[$i] . ' (' . ldap_error($_SESSION['ldap']->server()) . '). '\n\t\t\t\t\t\t\t. getExtendedLDAPErrorMessage($_SESSION['ldap']->server()));\n\t\t\t\t\t\tlogNewMessage(LOG_DEBUG, print_r($attributes[$DNs[$i]]['modify'], true));\n\t\t\t\t\t\t$errors[] = array('ERROR', sprintf(_('Was unable to modify attributes of DN: %s.'), $DNs[$i]), getDefaultLDAPErrorString($_SESSION['ldap']->server()));\n\t\t\t\t\t\t$stopprocessing = true;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tlogNewMessage(LOG_NOTICE, 'Modified DN: ' . $DNs[$i]);\n\t\t\t\t\t\t// check if the password of the currently logged in user was changed\n\t\t\t\t\t\t$lamAdmin = $_SESSION['ldap']->getUserName();\n\t\t\t\t\t\tif ((strtolower($DNs[$i]) == strtolower($lamAdmin)) && isset($attributes[$DNs[$i]]['info']['userPasswordClearText'][0])) {\n\t\t\t\t\t\t\t$_SESSION['ldap']->tryAndApplyNewPassword($attributes[$DNs[$i]]['info']['userPasswordClearText'][0]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// add attributes\n\t\t\t\tif (!empty($attributes[$DNs[$i]]['add']) && !$stopprocessing) {\n\t\t\t\t\t$success = @ldap_mod_add($_SESSION['ldap']->server(), $DNs[$i], $attributes[$DNs[$i]]['add']);\n\t\t\t\t\tif (!$success) {\n\t\t\t\t\t\tlogNewMessage(LOG_ERR, 'Unable to add attributes to DN: ' . $DNs[$i] . ' (' . ldap_error($_SESSION['ldap']->server()) . '). '\n\t\t\t\t\t\t\t. getExtendedLDAPErrorMessage($_SESSION['ldap']->server()));\n\t\t\t\t\t\t$errors[] = array('ERROR', sprintf(_('Was unable to add attributes to DN: %s.'), $DNs[$i]), getDefaultLDAPErrorString($_SESSION['ldap']->server()));\n\t\t\t\t\t\t$stopprocessing = true;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tlogNewMessage(LOG_NOTICE, 'Modified DN: ' . $DNs[$i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// remove attributes\n\t\t\t\tif (!empty($attributes[$DNs[$i]]['remove']) && !$stopprocessing) {\n\t\t\t\t\t$success = @ldap_mod_del($_SESSION['ldap']->server(), $DNs[$i], $attributes[$DNs[$i]]['remove']);\n\t\t\t\t\tif (!$success) {\n\t\t\t\t\t\tlogNewMessage(LOG_ERR, 'Unable to delete attributes from DN: ' . $DNs[$i] . ' (' . ldap_error($_SESSION['ldap']->server()) . '). '\n\t\t\t\t\t\t\t. getExtendedLDAPErrorMessage($_SESSION['ldap']->server()));\n\t\t\t\t\t\t$errors[] = array('ERROR', sprintf(_('Was unable to remove attributes from DN: %s.'), $DNs[$i]), getDefaultLDAPErrorString($_SESSION['ldap']->server()));\n\t\t\t\t\t\t$stopprocessing = true;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tlogNewMessage(LOG_NOTICE, 'Modified DN: ' . $DNs[$i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// send password mail\n\t\tif (!$stopprocessing && isLAMProVersion() && ($this->sendPasswordViaMail != null)) {\n\t\t\t$mailMessages = sendPasswordMail($this->sendPasswordViaMail, $prePostModifyAttributes, $this->sendPasswordViaMailAlternateAddress);\n\t\t\tif (sizeof($mailMessages) > 0) {\n\t\t\t\t$errors = array_merge($errors, $mailMessages);\n\t\t\t}\n\t\t\t$this->sendPasswordViaMail = null;\n\t\t\t$this->sendPasswordViaMailAlternateAddress = null;\n\t\t}\n\t\tif (!$stopprocessing) {\n\t\t\t// post modify actions\n\t\t\tforeach ($module as $singlemodule) {\n\t\t\t\t$postMessages = $this->module[$singlemodule]->postModifyActions($this->isNewAccount, $prePostModifyAttributes);\n\t\t\t\t$errors = array_merge($errors, $postMessages);\n\t\t\t}\n\t\t}\n\t\treturn $errors;\n\t}\n\n\t/**\n\t * Defines if the LDAP entry has only virtual child entries. This is the case for e.g. LDAP views.\n\t *\n\t * @return boolean has only virtual children\n\t */\n\tpublic function hasOnlyVirtualChildren() {\n\t\tforeach ($this->module as $module) {\n\t\t\tif ($module->hasOnlyVirtualChildren()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns a list of possible PDF entries for this account.\n\t *\n\t * @param array $pdfKeys list of PDF keys that are included in document\n\t * @param string $typeId type id (user, group, host)\n\t * @return PDFEntry[] list of key => PDFEntry\n\t */\n\tfunction get_pdfEntries($pdfKeys, $typeId) {\n\t\t$return = array();\n\t\twhile(($current = current($this->module)) != null) {\n\t\t\t$return = array_merge($return,$current->get_pdfEntries($pdfKeys, $typeId));\n\t\t\tnext($this->module);\n\t\t}\n\t\t$dn = $this->dn_orig;\n\t\tif (isset($this->finalDN)) {\n\t\t\t$dn = $this->finalDN;\n\t\t}\n\t\treturn array_merge($return,array('main_dn' => array(new \\LAM\\PDF\\PDFLabelValue(_('DN'), $dn))));\n\t}\n\n\t/**\n\t* Sorts the module buttons for the account page.\n\t*/\n\tfunction sortModules() {\n\t\t$order = array();\n\t\t$modules = array_keys($this->module);\n\t\t$depModules = array();\n\t\tif (isset($this->order)) {\n\t\t\t$currentPage = $this->order[$this->current_page];\n\t\t}\n\t\tfor ($i = 0; $i < sizeof($modules); $i++) {\n\t\t\t// insert waiting modules\n\t\t\tfor ($w = 0; $w < sizeof($depModules); $w++) {\n\t\t\t\t$dependencies = $this->module[$depModules[$w]]->get_dependencies($this->type->getScope());\n\t\t\t\t$dependencies = $dependencies['depends'];\n\t\t\t\t$everything_found = true;\n\t\t\t\tfor ($d = 0; $d < sizeof($dependencies); $d++) {\n\t\t\t\t\tif (!in_array($dependencies[$d], $order)) {\n\t\t\t\t\t\t$everything_found = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// inser after depending module\n\t\t\t\tif ($everything_found) {\n\t\t\t\t\t$order[] = $depModules[$w];\n\t\t\t\t\tunset($depModules[$w]);\n\t\t\t\t\t$depModules = array_values($depModules);\n\t\t\t\t\t$w--;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// check next module\n\t\t\t$dependencies = $this->module[$modules[$i]]->get_dependencies($this->type->getScope());\n\t\t\tif (is_array($dependencies['depends'])) {\n\t\t\t\t$everything_found = true;\n\t\t\t\t$dependencies = $dependencies['depends'];\n\t\t\t\tfor ($d = 0; $d < sizeof($dependencies); $d++) {\n\t\t\t\t\tif (is_array($dependencies[$d])) { // or-combined dependencies\n\t\t\t\t\t\t$noneFound = true;\n\t\t\t\t\t\tforeach ($dependencies[$d] as $or) {\n\t\t\t\t\t\t\tif (in_array($or, $order)) {\n\t\t\t\t\t\t\t\t$noneFound = false;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($noneFound) {\n\t\t\t\t\t\t\t$everything_found = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telseif (!in_array($dependencies[$d], $order)) { // single dependency\n\t\t\t\t\t\t$everything_found = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// remove module if dependencies are not satisfied\n\t\t\t\tif (!$everything_found) {\n\t\t\t\t\t$depModules[] = $modules[$i];\n\t\t\t\t\tunset($modules[$i]);\n\t\t\t\t\t$modules = array_values($modules);\n\t\t\t\t\t$i--;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$order[] = $modules[$i];\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$order[] = $modules[$i];\n\t\t\t}\n\t\t}\n\t\t// add modules which could not be sorted (e.g. because of cyclic dependencies)\n\t\tif (sizeof($depModules) > 0) {\n\t\t\tfor ($i = 0; $i < sizeof($depModules); $i++) {\n\t\t\t\t$order[] = $depModules[$i];\n\t\t\t}\n\t\t}\n\t\t// move disabled modules to end\n\t\t$activeModules = array();\n\t\t$passiveModules = array();\n\t\tfor ($i = 0; $i < sizeof($order); $i++) {\n\t\t\tif ($this->module[$order[$i]]->getButtonStatus() == 'enabled') {\n\t\t\t\t$activeModules[] = $order[$i];\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$passiveModules[] = $order[$i];\n\t\t\t}\n\t\t}\n\t\t$this->order = array_merge($activeModules, $passiveModules);\n\t\t// check if ordering changed and current page number must be updated\n\t\tif (isset($currentPage) && ($currentPage != $this->order[$this->current_page])) {\n\t\t\t$this->current_page = array_search($currentPage, $this->order);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the RDN part of a given DN.\n\t *\n\t * @param String $dn DN\n\t * @return String RDN\n\t */\n\tfunction getRDN($dn) {\n\t\tif (($dn == \"\") || ($dn == null)) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn substr($dn, 0, strpos($dn, \",\"));\n\t}\n\n\t/**\n\t * Returns the parent DN of a given DN.\n\t *\n\t * @param String $dn DN\n\t * @return String DN\n\t */\n\tfunction getParentDN($dn) {\n\t\tif (($dn == \"\") || ($dn == null)) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn substr($dn, strpos($dn, \",\") + 1);\n\t}\n\n\t/**\n\t * Returns a list of OUs that exist for this account type.\n\t *\n\t * @return array OU list\n\t */\n\tpublic function getOUs() {\n\t\tif ($this->cachedOUs != null) {\n\t\t\treturn $this->cachedOUs;\n\t\t}\n\t\t$this->cachedOUs = $this->type->getSuffixList();\n\t\treturn $this->cachedOUs;\n\t}\n\n\t/**\n\t * Returns the account status.\n\t *\n\t * @return AccountStatus status\n\t */\n\tpublic function getAccountStatus(): AccountStatus {\n\t\t$details = array();\n\t\tforeach ($this->module as $name => $module) {\n\t\t\tif (($module instanceof AccountStatusProvider)) {\n\t\t\t\t$details = array_merge($details, $module->getAccountStatusDetails());\n\t\t\t}\n\t\t}\n\t\treturn new AccountStatus($details);\n\t}\n\n\t/**\n\t * Replaces POST data with wildcard values from modules.\n\t *\n\t * @param array $keyPrefixes POST keys as full name or prefix (e.g. \"key\" matches \"key1\")\n\t */\n\tpublic function replaceWildcardsInPOST($keyPrefixes) {\n\t\t$replacements = array();\n\t\tforeach ($this->module as $module) {\n\t\t\t$replacements = array_merge($replacements, $module->getWildCardReplacements());\n\t\t}\n\t\twhile (true) {\n\t\t\tif (!$this->replaceWildcards($replacements, $keyPrefixes, $_POST)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Replaces wildcards in an array.\n\t *\n\t * @param array $replacements replacements (key => value)\n\t * @param array $keyPrefixes prefixes of $data array keys that should be replaced\n\t * @param array $data data array\n\t * @return boolean replacement done\n\t */\n\tprivate function replaceWildcards($replacements, $keyPrefixes, &$data) {\n\t\t$found = false;\n\t\tforeach ($data as $key => $value) {\n\t\t\tforeach ($keyPrefixes as $keyPrefix) {\n\t\t\t\tif (strpos($key, $keyPrefix) === 0) {\n\t\t\t\t\t$found = $this->doReplace($replacements, $data[$key]) || $found;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $found;\n\t}\n\n\t/**\n\t * Replaces wildcards in a value.\n\t *\n\t * @param array $replacements replacements (key => value)\n\t * @param String $value value to perform replacements\n\t * @return boolean replacement done\n\t */\n\tprivate function doReplace($replacements, &$value) {\n\t\t$found = false;\n\t\tforeach ($replacements as $replKey => $replValue) {\n\t\t\t$searchString = '$' . $replKey;\n\t\t\tif (strpos($value, $searchString) !== false) {\n\t\t\t\t$found = true;\n\t\t\t\t$value = str_replace($searchString, $replValue, $value);\n\t\t\t}\n\t\t\t$searchString = '$_' . $replKey;\n\t\t\tif (strpos($value, $searchString) !== false) {\n\t\t\t\t$found = true;\n\t\t\t\t$value = str_replace($searchString, strtolower($replValue), $value);\n\t\t\t}\n\t\t}\n\t\treturn $found;\n\t}\n\n\t/**\n\t* Encrypts sensitive data before storing in session.\n\t*\n\t* @return array list of attributes which are serialized\n\t*/\n\tfunction __sleep() {\n\t\t// encrypt data\n\t\t$this->attributes = lamEncrypt(serialize($this->attributes));\n\t\t$this->attributes_orig = lamEncrypt(serialize($this->attributes_orig));\n\t\t$this->module = lamEncrypt(serialize($this->module));\n\t\t// save all attributes\n\t\treturn array_keys(get_object_vars($this));\n\t}\n\n\t/**\n\t* Decrypts sensitive data after accountContainer was loaded from session.\n\t*/\n\tfunction __wakeup() {\n\t\t// decrypt data\n\t\t$this->attributes = unserialize(lamDecrypt($this->attributes));\n\t\t$this->attributes_orig = unserialize(lamDecrypt($this->attributes_orig));\n\t\t$this->module = unserialize(lamDecrypt($this->module));\n\t}\n\n}\n\n/**\n * This interface needs to be implemented by all account modules which manage passwords.\n * It allows LAM to provide central password changes.\n *\n * @package modules\n */\ninterface passwordService {\n\n\t/**\n\t * This method specifies if a module manages password attributes. The module alias will\n\t * then appear as option in the GUI.\n\t * <br>If the module only wants to get notified about password changes then return false.\n\t *\n\t * @return boolean true if this module manages password attributes\n\t */\n\tpublic function managesPasswordAttributes();\n\n\t/**\n\t * Specifies if this module supports to force that a user must change his password on next login.\n\t *\n\t * @return boolean force password change supported\n\t */\n\tpublic function supportsForcePasswordChange();\n\n\t/**\n\t * This function is called whenever the password should be changed. Account modules\n\t * must change their password attributes only if the modules list contains their module name.\n\t *\n\t * @param String $password new password\n\t * @param array $modules list of modules for which the password should be changed\n\t * @param boolean $forcePasswordChange force the user to change his password at next login\n\t * @return array list of error messages if any as parameter array for StatusMessage\n\t *               e.g. return array(array('ERROR', 'Password change failed.'))\n\t */\n\tpublic function passwordChangeRequested($password, $modules, $forcePasswordChange);\n\n\t/**\n\t * Specifies if the module support password quick change for the current account.\n\t *\n\t * @return bool password quick change page supported\n\t */\n\tpublic function supportsPasswordQuickChangePage(): bool;\n\n\t/**\n\t * Adds account details such as first/last name for the current account.\n\t *\n\t * @param htmlResponsiveRow $row row where to add content\n\t */\n\tpublic function addPasswordQuickChangeAccountDetails(htmlResponsiveRow $row): void;\n\n\t/**\n\t * Returns a list of password quick change options.\n\t *\n\t * @return PasswordQuickChangeOption[] options\n\t */\n\tpublic function getPasswordQuickChangeOptions(): array;\n\n\t/**\n\t * Returns a list of LDAP attribute changes to perform.\n\t *\n\t * @param string $password new password\n\t * @return array LDAP attribute values (attr_name => array(attr_value))\n\t * @throws LAMException error getting changes\n\t */\n\tpublic function getPasswordQuickChangeChanges(string $password): array;\n\n\t/**\n\t * Returns the user name if known to be validated for password strength.\n\t *\n\t * @return string|null user name\n\t */\n\tpublic function getPasswordQuickChangePasswordStrengthUserName(): ?string;\n\n\t/**\n\t * Returns additional attribute values to check when password strength is validated.\n\t *\n\t * @return array attribute values\n\t */\n\tpublic function getPasswordQuickChangePasswordStrengthAttributes(): array;\n\n\t/**\n\t * Returns if the password is not same as an old password from history.\n\t *\n\t * @param string $password new password\n\t * @return bool is in history\n\t */\n\tpublic function getPasswordQuickChangeIsPasswordInHistory(string $password): bool;\n\n}\n\n/**\n * Option for the password quick change page.\n */\nclass PasswordQuickChangeOption {\n\n\tpublic $label;\n\n\tpublic $id;\n\n\tpublic $preSelected;\n\n\t/**\n\t * PasswordQuickChangeOption constructor.\n\t * @param string $id unique id for this option\n\t * @param string $label descriptive label\n\t * @param bool $preSelected is preselected\n\t */\n\tpublic function __construct(string $id, string $label, bool $preSelected = true) {\n\t\t$this->label = $label;\n\t\t$this->id = $id;\n\t\t$this->preSelected = $preSelected;\n\t}\n\n}\n\n/**\n * Provides module information about the status of an LDAP account.\n */\ninterface AccountStatusProvider {\n\n\t/**\n\t * Returns the list of account status detail lines.\n\t *\n\t * @param ConfiguredType $type\n\t * @param array|null $attributes LDAP attributes (use account container attributes if not provided)\n\t * @return AccountStatusDetails[] status details\n\t */\n\tpublic function getAccountStatusDetails(ConfiguredType $type, ?array &$attributes): array;\n\n\t/**\n\t * Returns the list of LDAP attributes that must be read to get the account status.\n\t *\n\t * @param ConfiguredType $type type\n\t * @return array attribute names\n\t */\n\tpublic function getAccountStatusRequiredAttributes(ConfiguredType $type): array;\n\n\t/**\n\t * Returns a list of options how the account could be locked.\n\t *\n\t * @param ConfiguredType $type type\n\t * @param array|null $attributes LDAP attributes\n\t * @return AccountStatusDetails[] lock options\n\t */\n\tpublic function getAccountStatusPossibleLockOptions(ConfiguredType $type, ?array &$attributes): array;\n\n\t/**\n\t * Locks the account with the given lock IDs.\n\t *\n\t * @param ConfiguredType $type type\n\t * @param array|null $attributes LDAP attributes\n\t * @param array $lockIds IDs from AccountStatusDetails\n\t * @throws LAMException error during locking\n\t */\n\tpublic function accountStatusPerformLock(ConfiguredType $type, ?array &$attributes, array $lockIds): void;\n\n\t/**\n\t * Unlocks the account with the given lock IDs.\n\t *\n\t * @param ConfiguredType $type type\n\t * @param array|null $attributes LDAP attributes\n\t * @param array $lockIds IDs from AccountStatusDetails\n\t */\n\tpublic function accountStatusPerformUnlock(ConfiguredType $type, ?array &$attributes, array $lockIds): void;\n\n}\n\n/**\n * Provides the complete information about the status of an LDAP account.\n */\nclass AccountStatus {\n\n\t/** @var AccountStatusDetails[] list of details */\n\tprivate $details;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param AccountStatusDetails[] $details details\n\t */\n\tpublic function __construct(array $details) {\n\t\t$this->details = $details;\n\t}\n\n\t/**\n\t * Creates the account status from the given type and LDAP attributes.\n\t *\n\t * @param ConfiguredType $type type\n\t * @param array $attributes LDAP attributes\n\t * @return AccountStatus status\n\t */\n\tpublic static function fromAttributes(ConfiguredType $type, array $attributes): AccountStatus {\n\t\t$modules = $_SESSION['config']->get_AccountModules($type->getId());\n\t\t$details = array();\n\t\tforeach ($modules as $module) {\n\t\t\t$interfaces = class_implements($module);\n\t\t\tif (!in_array('AccountStatusProvider', $interfaces)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$moduleObject = moduleCache::getModule($module, $type->getScope());\n\t\t\t$details = array_merge($details, $moduleObject->getAccountStatusDetails($type, $attributes));\n\t\t}\n\t\treturn new AccountStatus($details);\n\t}\n\n\t/**\n\t * Creates the lockable account status from the given type and LDAP attributes.\n\t *\n\t * @param ConfiguredType $type type\n\t * @param array $attributes LDAP attributes\n\t * @return AccountStatus lockable status\n\t */\n\tpublic static function lockableFromAttributes(ConfiguredType $type, array $attributes): AccountStatus {\n\t\t$modules = $_SESSION['config']->get_AccountModules($type->getId());\n\t\t$details = array();\n\t\tforeach ($modules as $module) {\n\t\t\t$interfaces = class_implements($module);\n\t\t\tif (!in_array('AccountStatusProvider', $interfaces)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$moduleObject = moduleCache::getModule($module, $type->getScope());\n\t\t\t$details = array_merge($details, $moduleObject->getAccountStatusPossibleLockOptions($type, $attributes));\n\t\t}\n\t\treturn new AccountStatus($details);\n\t}\n\n\t/**\n\t * Returns the account details.\n\t *\n\t * @return AccountStatusDetails[] details\n\t */\n\tpublic function getDetails(): array {\n\t\treturn $this->details;\n\t}\n\n\t/**\n\t * Returns if the account/password is fully expired (e.g. login no longer possible without password change).\n\t *\n\t * @return bool is expired\n\t */\n\tpublic function isExpired(): bool {\n\t\tforeach ($this->details as $detail) {\n\t\t\tif ($detail->isExpired()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns if the account/password is partially expired (e.g. a single application is expired).\n\t *\n\t * @return bool is expired\n\t */\n\tpublic function isPartiallyExpired(): bool {\n\t\tforeach ($this->details as $detail) {\n\t\t\tif ($detail->isPartiallyExpired()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns if the account is fully locked (login no longer possible).\n\t *\n\t * @return bool is locked\n\t */\n\tpublic function isLocked(): bool {\n\t\tforeach ($this->details as $detail) {\n\t\t\tif ($detail->isLocked()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns if the account is partially locked (e.g. a single application is locked).\n\t *\n\t * @return bool is locked\n\t */\n\tpublic function isPartiallyLocked(): bool {\n\t\tforeach ($this->details as $detail) {\n\t\t\tif ($detail->isPartiallyLocked()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n}\n\nclass AccountStatusDetails {\n\n\tprivate $details;\n\tprivate $id;\n\tprivate $expired = false;\n\tprivate $partiallyExpired = false;\n\tprivate $locked = false;\n\tprivate $partiallyLocked = false;\n\tprivate $icon;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param string $details details message\n\t * @param string $id ID for reference\n\t * @param string $icon icon name\n\t */\n\tpublic function __construct(string $details, string $id, string $icon) {\n\t\t$this->details = $details;\n\t\t$this->id = $id;\n\t\t$this->icon = $icon;\n\t}\n\n\t/**\n\t * Creates a new expired status entry.\n\t *\n\t * @param string $details details message\n\t * @param string $id ID for reference\n\t * @param string $icon icon name\n\t * @return AccountStatusDetails status entry\n\t */\n\tpublic static function newExpired(string $details, string $id, ?string $icon = null): AccountStatusDetails {\n\t\tif ($icon === null) {\n\t\t\t$icon = 'expired.svg';\n\t\t}\n\t\t$details = new AccountStatusDetails($details, $id, $icon);\n\t\t$details->expired = true;\n\t\treturn $details;\n\t}\n\n\t/**\n\t * Creates a new partially expired status entry.\n\t *\n\t * @param string $details details message\n\t * @param string $id ID for reference\n\t * @param string $icon icon name\n\t * @return AccountStatusDetails status entry\n\t */\n\tpublic static function newPartiallyExpired(string $details, string $id, ?string $icon = null): AccountStatusDetails {\n\t\tif ($icon === null) {\n\t\t\t$icon = 'expired.svg';\n\t\t}\n\t\t$details = new AccountStatusDetails($details, $id, $icon);\n\t\t$details->partiallyExpired = true;\n\t\treturn $details;\n\t}\n\n\t/**\n\t * Creates a new locked status entry.\n\t *\n\t * @param string $details details message\n\t * @param string $id ID for reference\n\t * @param string $icon icon name\n\t * @return AccountStatusDetails status entry\n\t */\n\tpublic static function newLocked(string $details, string $id, ?string $icon = null): AccountStatusDetails {\n\t\tif ($icon === null) {\n\t\t\t$icon = 'locked.svg';\n\t\t}\n\t\t$details = new AccountStatusDetails($details, $id, $icon);\n\t\t$details->locked = true;\n\t\treturn $details;\n\t}\n\n\t/**\n\t * Creates a new partially locked status entry.\n\t *\n\t * @param string $details details message\n\t * @param string $id ID for reference\n\t * @param string $icon icon name\n\t * @return AccountStatusDetails status entry\n\t */\n\tpublic static function newPartiallyLocked(string $details, string $id, ?string $icon = null): AccountStatusDetails {\n\t\tif ($icon === null) {\n\t\t\t$icon = 'partiallyLocked.svg';\n\t\t}\n\t\t$details = new AccountStatusDetails($details, $id, $icon);\n\t\t$details->partiallyLocked = true;\n\t\treturn $details;\n\t}\n\n\t/**\n\t * Returns if the account/password is fully expired (e.g. login no longer possible without password change).\n\t *\n\t * @return bool is expired\n\t */\n\tpublic function isExpired(): bool {\n\t\treturn $this->expired;\n\t}\n\n\t/**\n\t * Returns if the account/password is partially expired (e.g. a single application is expired).\n\t *\n\t * @return bool is expired\n\t */\n\tpublic function isPartiallyExpired(): bool {\n\t\treturn $this->partiallyExpired;\n\t}\n\n\t/**\n\t * Returns if the account is fully locked (login no longer possible).\n\t *\n\t * @return bool is locked\n\t */\n\tpublic function isLocked(): bool {\n\t\treturn $this->locked;\n\t}\n\n\t/**\n\t * Returns if the account is partially locked (e.g. a single application is locked).\n\t *\n\t * @return bool is locked\n\t */\n\tpublic function isPartiallyLocked(): bool {\n\t\treturn $this->partiallyLocked;\n\t}\n\n\t/**\n\t * Returns the icon name.\n\t *\n\t * @return string icon name\n\t */\n\tpublic function getIcon(): string {\n\t\treturn $this->icon;\n\t}\n\n\t/**\n\t * Returns the details.\n\t *\n\t * @return string details\n\t */\n\tpublic function getDetails(): string {\n\t\treturn $this->details;\n\t}\n\n\t/**\n\t * Returns the id.\n\t *\n\t * @return string id\n\t */\n\tpublic function getId(): string {\n\t\treturn $this->id;\n\t}\n\n}\n\n/**\n * Validation of scope and module names.\n */\nclass ScopeAndModuleValidation {\n\n\tprivate static $cachedModuleNames = null;\n\n\tprivate static $cachedScopeNames = null;\n\n\tconst REGEX_SCOPE = \"/^[a-z0-9_-]+$/i\";\n\tconst REGEX_MODULE = \"/^[a-z0-9_-]+$/i\";\n\n\t/**\n\t * Checks if the provided scope name is valid.\n\t *\n\t * @param string $scope scope name\n\t * @return bool is existing\n\t */\n\tpublic static function isValidScopeName(string $scope): bool {\n\t\tif (!preg_match(self::REGEX_SCOPE, $scope)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (self::$cachedScopeNames === null) {\n\t\t\t$dirname = dirname(__FILE__) . \"/types\";\n\t\t\t$dir = dir($dirname);\n\t\t\t$scopeNames = array();\n\t\t\twhile ($entry = $dir->read()) {\n\t\t\t\tif ((substr($entry, strlen($entry) - 4, 4) === '.inc')\n\t\t\t\t\t&& (is_file($dirname . '/'.$entry) || is_link($dirname . '/'.$entry))) {\n\t\t\t\t\t$entry = substr($entry, 0, -4);\n\t\t\t\t\tif (preg_match(self::REGEX_SCOPE, $entry)) {\n\t\t\t\t\t\t$scopeNames[] = $entry;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tself::$cachedScopeNames = $scopeNames;\n\t\t}\n\t\treturn in_array($scope, self::$cachedScopeNames);\n\t}\n\n\t/**\n\t * Checks if the provided module name is valid.\n\t *\n\t * @param string $moduleName module name\n\t * @return bool is existing\n\t */\n\tpublic static function isValidModuleName(string $moduleName): bool {\n\t\tif (!preg_match(self::REGEX_MODULE, $moduleName)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (self::$cachedModuleNames === null) {\n\t\t\t$dirname = dirname(__FILE__) . \"/modules\";\n\t\t\t$dir = dir($dirname);\n\t\t\t$moduleNames = array();\n\t\t\twhile ($entry = $dir->read()) {\n\t\t\t\tif ((substr($entry, strlen($entry) - 4, 4) === '.inc')\n\t\t\t\t\t&& (is_file($dirname . '/' . $entry) || is_link($dirname . '/' . $entry))) {\n\t\t\t\t\t$entry = substr($entry, 0, -4);\n\t\t\t\t\tif (preg_match(self::REGEX_MODULE, $entry)) {\n\t\t\t\t\t\t$moduleNames[] = $entry;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tself::$cachedModuleNames = $moduleNames;\n\t\t}\n\t\treturn in_array($moduleName, self::$cachedModuleNames);\n\t}\n\n}\n", "<?php\n\nuse \\LAM\\TYPES\\TypeManager;\nuse LAM\\ImageUtils\\ImageManipulationFactory;\nuse LAM\\TYPES\\ConfiguredType;\n\n/*\n\n  This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)\n  Copyright (C) 2003 - 2006  Tilo Lutz\n                2005 - 2022  Roland Gruber\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\n/**\n* Manages the attributes of object class inetOrgPerson.\n*\n* @package modules\n* @author Tilo Lutz\n* @author Roland Gruber\n* @author Michael Duergner\n*/\n\n/**\n* This module manages LDAP attributes of the object class inetOrgPerson (e.g. name and address).\n*\n* @package modules\n*/\nclass inetOrgPerson extends baseModule implements passwordService,AccountStatusProvider {\n\n\t/**\n\t * ID for locked password status.\n\t */\n\tconst STATUS_PASSWORD_LOCKED = \"INETORG_PERSON_PASSWORD_LOCKED\";\n\n\t/** clear text password */\n\tprivate $clearTextPassword = null;\n\t/** cache for departments */\n\tprivate $departmentCache = null;\n\t/** organization cache */\n\tprivate $oCache = null;\n\t/** organizational unit cache */\n\tprivate $ouCache = null;\n\t/** title cache */\n\tprivate $titleCache = null;\n\t/** employee type cache */\n\tprivate $employeeTypeCache = null;\n\t/** business category cache */\n\tprivate $businessCategoryCache = null;\n\t/** cache for email duplication checks */\n\tprivate $emailCheckCache = array();\n\n\t/** session variable for existing user certificates in self service */\n\tconst SESS_CERTIFICATES_LIST = 'inetOrgPerson_certificatesList';\n\t/** session variable for existing user certificates in self service */\n\tconst SESS_PHOTO = 'inetOrgPerson_jpegPhoto';\n\n\t/**\n\t* This function fills the message array.\n\t**/\n\tfunction load_Messages() {\n\t\t$this->messages['givenName'][0] = array('ERROR', _('First name'), _('First name contains invalid characters!'));\n\t\t$this->messages['givenName'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_firstName', _('First name contains invalid characters!'));\n\t\t$this->messages['lastname'][0] = array('ERROR', _('Last name'), _('Last name contains invalid characters or is empty!'));\n\t\t$this->messages['lastname'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_lastName', _('Last name contains invalid characters or is empty!'));\n\t\t$this->messages['telephoneNumber'][0] = array('ERROR', _('Telephone number'), _('Please enter a valid telephone number!'));\n\t\t$this->messages['telephoneNumber'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_telephone', _('Please enter a valid telephone number!'));\n\t\t$this->messages['homePhone'][0] = array('ERROR', _('Home telephone number'), _('Please enter a valid telephone number!'));\n\t\t$this->messages['homePhone'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_homePhone', _('Please enter a valid telephone number!'));\n\t\t$this->messages['mobile'][0] = array('ERROR', _('Mobile number'), _('Please enter a valid mobile number!'));\n\t\t$this->messages['mobileTelephone'][1] = array('ERROR', _('Account %s:') . \" inetOrgPerson_mobile\", _('Please enter a valid mobile number!'));\n\t\t$this->messages['facsimileTelephoneNumber'][0] = array('ERROR', _('Fax number'), _('Please enter a valid fax number!'));\n\t\t$this->messages['facsimileNumber'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_fax', _('Please enter a valid fax number!'));\n\t\t$this->messages['pager'][0] = array('ERROR', _('Pager'), _('Please enter a valid telephone number!'));\n\t\t$this->messages['pager'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_pager', _('Please enter a valid telephone number!'));\n\t\t$this->messages['mail'][0] = array('ERROR', _('Email address'), _('Please enter a valid email address!'));\n\t\t$this->messages['mail'][1] = array('WARN', _('Email address'), _('Email \"%s\" already in use.'));\n\t\t$this->messages['mail'][2] = array('WARN', _('Account %s:') . ' inetOrgPerson_email', _('Email \"%s\" already in use.'));\n\t\t$this->messages['email'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_email', _('Please enter a valid email address!'));\n\t\t$this->messages['street'][0] = array('ERROR', _('Street'), _('Please enter a valid street name!'));\n\t\t$this->messages['street'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_street', _('Please enter a valid street name!'));\n\t\t$this->messages['postalAddress'][0] = array('ERROR', _('Postal address'), _('Please enter a valid postal address!'));\n\t\t$this->messages['postalAddress'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_address', _('Please enter a valid postal address!'));\n\t\t$this->messages['registeredAddress'][0] = array('ERROR', _('Registered address'), _('Please enter a valid registered address.'));\n\t\t$this->messages['registeredAddress'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_registeredAddress', _('Please enter a valid registered address.'));\n\t\t$this->messages['postalCode'][0] = array('ERROR', _('Postal code'), _('Please enter a valid postal code!'));\n\t\t$this->messages['postalCode'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_postalCode', _('Please enter a valid postal code!'));\n\t\t$this->messages['title'][0] = array('ERROR', _('Job title'), _('Please enter a valid job title!'));\n\t\t$this->messages['title'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_title', _('Please enter a valid job title!'));\n\t\t$this->messages['employeeType'][0] = array('ERROR', _('Employee type'), _('Please enter a valid employee type!'));\n\t\t$this->messages['employeeType'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_type', _('Please enter a valid employee type!'));\n\t\t$this->messages['cn'][0] = array('ERROR', _('Common name'), _('Please enter a valid common name!'));\n\t\t$this->messages['cn'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_cn', _('Please enter a valid common name!'));\n\t\t$this->messages['uid'][0] = array('ERROR', _('User name'), _('User name contains invalid characters. Valid characters are: a-z, A-Z, 0-9 and .-_ !'));\n\t\t$this->messages['uid'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_userName', _('User name contains invalid characters. Valid characters are: a-z, A-Z, 0-9 and .-_ !'));\n\t\t$this->messages['uid'][3] = array('WARN', _('Account %s:') . ' inetOrgPerson_userName', _('User name already exists!'));\n\t\t$this->messages['manager'][0] = array('ERROR', _('Account %s:') . ' inetOrgPerson_manager', _('This is not a valid DN!'));\n\t\t$this->messages['file'][0] = array('ERROR', _('No file selected.'));\n\t\t$this->messages['file'][2] = array('ERROR', _('Unable to process this file.'));\n\t\t$this->messages['file'][3] = array('ERROR', _('File is too large. Maximum allowed size is %s kB.'));\n\t\t$this->messages['businessCategory'][0] = array('ERROR', _('Business category'), _('Please enter a valid business category!'));\n\t\t$this->messages['businessCategory'][1] = array('ERROR', _('Account %s:') . ' inetOrgPerson_businessCategory', _('Please enter a valid business category!'));\n\t\t$this->messages['userPassword'][0] = array('ERROR', _('Account %s:') . ' posixAccount_password', _('Password contains invalid characters. Valid characters are:') . ' a-z, A-Z, 0-9 and #*,.;:_-+!%&/|?{[()]}=@$ \u00a7\u00b0!');\n\t\t$this->messages['sendPasswordMail'][0] = array('ERROR', _('Account %s:') . ' inetOrgPerson_sendPasswordMail', _('This value can only be \"true\" or \"false\".'));\n\t}\n\n\t/**\n\t* Returns true if this module can manage accounts of the current type, otherwise false.\n\t*\n\t* @return boolean true if module fits\n\t*/\n\tpublic function can_manage() {\n\t\treturn in_array($this->get_scope(), array('user'));\n\t}\n\n\t/**\n\t* Returns meta data that is interpreted by parent class\n\t*\n\t* @return array array with meta data\n\t*\n\t* @see baseModule::get_metaData()\n\t*/\n\tfunction get_metaData() {\n\t\t$return = array();\n\t\t// icon\n\t\t$return['icon'] = 'user.svg';\n\t\t// alias name\n\t\t$return[\"alias\"] = _('Personal');\n\t\t// this is a base module\n\t\t$return[\"is_base\"] = true;\n\t\t// RDN attribute\n\t\t$return[\"RDN\"] = array(\"cn\" => \"normal\", 'uid' => 'low');\n\t\t// LDAP filter\n\t\t$return[\"ldap_filter\"] = array('or' => \"(objectClass=inetOrgPerson)\");\n\t\t// module dependencies\n\t\t$return['dependencies'] = array('depends' => array(), 'conflicts' => array());\n\t\t// managed object classes\n\t\t$return['objectClasses'] = array('inetOrgPerson');\n\t\t// LDAP aliases\n\t\t$return['LDAPaliases'] = array('commonName' => 'cn', 'surname' => 'sn', 'streetAddress' => 'street',\n\t\t\t'fax' => 'facsimileTelephoneNumber', 'gn' => 'givenName', 'userid' => 'uid', 'rfc822Mailbox' => 'mail',\n\t\t\t'mobileTelephoneNumber' => 'mobile', 'organizationName' => 'o', 'organizationalUnitName' => 'ou');\n\t\t// managed attributes\n\t\t$return['attributes'] = array('uid', 'employeeType', 'givenName', 'jpegPhoto', 'mail', 'manager', 'mobile',\n\t\t\t'title', 'telephoneNumber', 'facsimileTelephoneNumber', 'street', 'postOfficeBox', 'postalCode', 'postalAddress',\n\t\t\t'sn', 'userpassword', 'description', 'homePhone', 'pager', 'roomNumber', 'businessCategory', 'l', 'st',\n\t\t\t'physicalDeliveryOfficeName', 'carLicense', 'departmentNumber', 'o', 'employeeNumber', 'initials',\n\t\t\t'registeredAddress', 'labeledURI', 'ou', 'userCertificate;binary', 'INFO.userPasswordClearText');\n\t\t// self service search attributes\n\t\t$return['selfServiceSearchAttributes'] = array('uid', 'mail', 'cn', 'surname', 'givenName', 'employeeNumber');\n\t\t// self service field settings\n\t\t$return['selfServiceFieldSettings'] = array('firstName' => _('First name'), 'lastName' => _('Last name'),\n\t\t\t'mail' => _('Email address'), 'telephoneNumber' => _('Telephone number'), 'mobile' => _('Mobile number'),\n\t\t\t'faxNumber' => _('Fax number'), 'street' => _('Street'), 'postalAddress' => _('Postal address'), 'registeredAddress' => _('Registered address'),\n\t\t\t'postalCode' => _('Postal code'), 'postOfficeBox' => _('Post office box'), 'jpegPhoto' => _('Photo'),\n\t\t\t'homePhone' => _('Home telephone number'), 'pager' => _('Pager'), 'roomNumber' => _('Room number'), 'carLicense' => _('Car license'),\n\t\t\t'location' => _('Location'), 'state' => _('State'), 'officeName' => _('Office name'), 'businessCategory' => _('Business category'),\n\t\t\t'departmentNumber' => _('Department'), 'initials' => _('Initials'), 'title' => _('Job title'), 'labeledURI' => _('Web site'),\n\t\t\t'userCertificate' => _('User certificates'), 'o' => _('Organisation'), 'ou' => _('Organisational unit'), 'description' => _('Description'),\n\t\t\t'uid' => _('User name'), 'displayName' => _('Display name'));\n\t\t// possible self service read-only fields\n\t\t$return['selfServiceReadOnlyFields'] = array('firstName', 'lastName', 'mail', 'telephoneNumber', 'mobile', 'faxNumber', 'pager', 'street',\n\t\t\t'postalAddress', 'registeredAddress', 'postalCode', 'postOfficeBox', 'jpegPhoto', 'homePhone', 'roomNumber', 'carLicense',\n\t\t\t'location', 'state', 'officeName', 'businessCategory', 'departmentNumber', 'initials', 'title', 'labeledURI', 'userCertificate',\n\t\t\t'o', 'ou', 'description', 'uid', 'displayName');\n\t\t// profile checks and mappings\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideInitials')) {\n\t\t\t$return['profile_mappings']['inetOrgPerson_initials'] = 'initials';\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideDescription')) {\n\t\t\t$return['profile_mappings']['inetOrgPerson_description'] = 'description';\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideJobTitle')) {\n\t\t\t$return['profile_checks']['inetOrgPerson_title'] = array(\n\t\t\t\t'type' => 'ext_preg',\n\t\t\t\t'regex' => 'title',\n\t\t\t\t'error_message' => $this->messages['title'][0]);\n\t\t\t$return['profile_mappings']['inetOrgPerson_title'] = 'title';\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEmployeeType')) {\n\t\t\t$return['profile_checks']['inetOrgPerson_employeeType'] = array(\n\t\t\t\t'type' => 'ext_preg',\n\t\t\t\t'regex' => 'employeeType',\n\t\t\t\t'error_message' => $this->messages['employeeType'][0]);\n\t\t\t$return['profile_mappings']['inetOrgPerson_employeeType'] = 'employeeType';\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideBusinessCategory')) {\n\t\t    $return['profile_checks']['inetOrgPerson_businessCategory'] = array(\n\t\t    \t'type' => 'ext_preg',\n\t\t    \t'regex' => 'businessCategory',\n\t\t    \t'error_message' => $this->messages['businessCategory'][0]);\n\t\t    $return['profile_mappings']['inetOrgPerson_businessCategory'] = 'businessCategory';\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideStreet')) {\n\t\t\t$return['profile_checks']['inetOrgPerson_street'] = array(\n\t\t\t\t'type' => 'ext_preg',\n\t\t\t\t'regex' => 'street',\n\t\t\t\t'error_message' => $this->messages['street'][0]);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalCode')) {\n\t\t\t$return['profile_checks']['inetOrgPerson_postalCode'] = array(\n\t\t\t\t'type' => 'ext_preg',\n\t\t\t\t'regex' => 'postalCode',\n\t\t\t\t'error_message' => $this->messages['postalCode'][0]);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalAddress')) {\n\t\t\t$return['profile_checks']['inetOrgPerson_postalAddress'] = array(\n\t\t\t\t'type' => 'ext_preg',\n\t\t\t\t'regex' => 'postalAddress',\n\t\t\t\t'error_message' => $this->messages['postalAddress'][0]);\n\t\t\t$return['profile_mappings']['inetOrgPerson_postalAddress'] = 'postalAddress';\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideRegisteredAddress')) {\n\t\t\t$return['profile_checks']['inetOrgPerson_registeredAddress'] = array(\n\t\t\t\t'type' => 'ext_preg',\n\t\t\t\t'regex' => 'postalAddress',\n\t\t\t\t'error_message' => $this->messages['registeredAddress'][0]);\n\t\t\t$return['profile_mappings']['inetOrgPerson_registeredAddress'] = 'registeredAddress';\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideOfficeName')) {\n\t\t\t$return['profile_mappings']['inetOrgPerson_physicalDeliveryOfficeName'] = 'physicalDeliveryOfficeName';\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideRoomNumber')) {\n\t\t\t$return['profile_mappings']['inetOrgPerson_roomNumber'] = 'roomNumber';\n\t\t}\n\t\t// upload fields\n\t\t$return['upload_columns'] = array(\n\t\t\tarray(\n\t\t\t\t'name' => 'inetOrgPerson_firstName',\n\t\t\t\t'description' => _('First name'),\n\t\t\t\t'help' => 'givenName',\n\t\t\t\t'example' => _('Steve')\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'name' => 'inetOrgPerson_lastName',\n\t\t\t\t'description' => _('Last name'),\n\t\t\t\t'help' => 'sn',\n\t\t\t\t'example' => _('Miller'),\n\t\t\t\t'required' => true\n\t\t\t)\n\t\t);\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideInitials')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_initials',\n\t\t\t\t'description' => _('Initials'),\n\t\t\t\t'help' => 'initials',\n\t\t\t\t'example' => 'A.B.'\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideDescription')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_description',\n\t\t\t\t'description' => _('Description'),\n\t\t\t\t'help' => 'description',\n\t\t\t\t'example' => _('Temp, contract till December')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideJobTitle')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_title',\n\t\t\t\t'description' => _('Job title'),\n\t\t\t\t'help' => 'titleList',\n\t\t\t\t'example' => _('President')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEmployeeNumber')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_employeeNumber',\n\t\t\t\t'description' => _('Employee number'),\n\t\t\t\t'help' => 'employeeNumber',\n\t\t\t\t'example' => '123456'\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEmployeeType')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_type',\n\t\t\t\t'description' => _('Employee type'),\n\t\t\t\t'help' => 'employeeType',\n\t\t\t\t'example' => _('Temp')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideManager')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_manager',\n\t\t\t\t'description' => _('Manager'),\n\t\t\t\t'help' => 'managerList',\n\t\t\t\t'example' => _('uid=smiller,ou=People,dc=company,dc=com')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideBusinessCategory')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_businessCategory',\n\t\t\t\t'description' => _('Business category'),\n\t\t\t\t'help' => 'businessCategoryList',\n\t\t\t\t'example' => _('Administration')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideStreet')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_street',\n\t\t\t\t'description' => _('Street'),\n\t\t\t\t'help' => 'streetList',\n\t\t\t\t'example' => _('Mystreetname 42')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalCode')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_postalCode',\n\t\t\t\t'description' => _('Postal code'),\n\t\t\t\t'help' => 'postalCodeList',\n\t\t\t\t'example' => _('GB-12345')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalAddress')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_address',\n\t\t\t\t'description' => _('Postal address'),\n\t\t\t\t'help' => 'postalAddress',\n\t\t\t\t'example' => _('MyCity')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideRegisteredAddress')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_registeredAddress',\n\t\t\t\t'description' => _('Registered address'),\n\t\t\t\t'help' => 'registeredAddress',\n\t\t\t\t'example' => _('MyCity')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostOfficeBox')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_postOfficeBox',\n\t\t\t\t'description' => _('Post office box'),\n\t\t\t\t'help' => 'postOfficeBoxList',\n\t\t\t\t'example' => _('12345')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideTelephoneNumber')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_telephone',\n\t\t\t\t'description' => _('Telephone number'),\n\t\t\t\t'help' => 'telephoneNumberList',\n\t\t\t\t'example' => _('123-123-1234')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideHomeTelephoneNumber')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_homePhone',\n\t\t\t\t'description' => _('Home telephone number'),\n\t\t\t\t'help' => 'homePhoneList',\n\t\t\t\t'example' => _('123-124-1234')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideMobileNumber')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_mobile',\n\t\t\t\t'description' => _('Mobile number'),\n\t\t\t\t'help' => 'mobileTelephoneNumberList',\n\t\t\t\t'example' => _('123-123-1235')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideFaxNumber')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_fax',\n\t\t\t\t'description' => _('Fax number'),\n\t\t\t\t'help' => 'facsimileTelephoneNumberList',\n\t\t\t\t'example' => _('123-123-1236')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePager', true)) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_pager',\n\t\t\t\t'description' => _('Pager'),\n\t\t\t\t'help' => 'pagerList',\n\t\t\t\t'example' => _('123-123-1236')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEMailAddress')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_email',\n\t\t\t\t'description' => _('Email address'),\n\t\t\t\t'help' => 'mailList',\n\t\t\t\t'example' => _('user@company.com')\n\t\t\t);\n\t\t\tif (isLAMProVersion()) {\n\t\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t\t'name' => 'inetOrgPerson_sendPasswordMail',\n\t\t\t\t\t'description' => _('Send password via mail'),\n\t\t\t\t\t'help' => 'mailPassword',\n\t\t\t\t\t'values' => 'true, false',\n\t\t\t\t\t'default' => 'false',\n\t\t\t\t\t'example' => 'false'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideLabeledURI')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_labeledURI',\n\t\t\t\t'description' => _('Web site'),\n\t\t\t\t'help' => 'labeledURIList',\n\t\t\t\t'example' => _('http://www.company.com')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideRoomNumber')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_roomNumber',\n\t\t\t\t'description' => _('Room number'),\n\t\t\t\t'help' => 'roomNumber',\n\t\t\t\t'example' => 'A 2.24'\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideDepartments')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_departmentNumber',\n\t\t\t\t'description' => _('Department'),\n\t\t\t\t'help' => 'departmentNumberList',\n\t\t\t\t'example' => _('Administration')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideOu')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_ou',\n\t\t\t\t'description' => _('Organisational unit'),\n\t\t\t\t'help' => 'ouList',\n\t\t\t\t'example' => _('Administration')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideO')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_o',\n\t\t\t\t'description' => _('Organisation'),\n\t\t\t\t'help' => 'oList',\n\t\t\t\t'example' => _('YourCompany')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideLocation')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_l',\n\t\t\t\t'description' => _('Location'),\n\t\t\t\t'help' => 'lList',\n\t\t\t\t'example' => _('MyCity')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideState')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_st',\n\t\t\t\t'description' => _('State'),\n\t\t\t\t'help' => 'stList',\n\t\t\t\t'example' => _('New York')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideCarLicense')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_carLicense',\n\t\t\t\t'description' => _('Car license'),\n\t\t\t\t'help' => 'carLicense',\n\t\t\t\t'example' => _('yes')\n\t\t\t);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideOfficeName')) {\n\t\t\t$return['upload_columns'][] = array(\n\t\t\t\t'name' => 'inetOrgPerson_physicalDeliveryOfficeName',\n\t\t\t\t'description' => _('Office name'),\n\t\t\t\t'help' => 'physicalDeliveryOfficeNameList',\n\t\t\t\t'example' => _('YourCompany')\n\t\t\t);\n\t\t}\n\t\t// available PDF fields\n\t\t$return['PDF_fields'] = array(\n\t\t\t'givenName' => _('First name'),\n\t\t\t'sn' => _('Last name')\n\t\t);\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideDescription')) {\n\t\t\t$return['PDF_fields']['description'] = _('Description');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideStreet')) {\n\t\t\t$return['PDF_fields']['street'] = _('Street');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostOfficeBox')) {\n\t\t\t$return['PDF_fields']['postOfficeBox'] = _('Post office box');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalCode')) {\n\t\t\t$return['PDF_fields']['postalCode'] = _('Postal code');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideLocation')) {\n\t\t\t$return['PDF_fields']['location'] = _('Location');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideState')) {\n\t\t\t$return['PDF_fields']['state'] = _('State');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalAddress')) {\n\t\t\t$return['PDF_fields']['postalAddress'] = _('Postal address');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideRegisteredAddress')) {\n\t\t\t$return['PDF_fields']['registeredAddress'] = _('Registered address');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideOfficeName')) {\n\t\t\t$return['PDF_fields']['officeName'] = _('Office name');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideRoomNumber')) {\n\t\t\t$return['PDF_fields']['roomNumber'] = _('Room number');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideTelephoneNumber')) {\n\t\t\t$return['PDF_fields']['telephoneNumber'] = _('Telephone number');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideHomeTelephoneNumber')) {\n\t\t\t$return['PDF_fields']['homePhone'] = _('Home telephone number');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideMobileNumber')) {\n\t\t\t$return['PDF_fields']['mobileTelephoneNumber'] = _('Mobile number');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideFaxNumber')) {\n\t\t\t$return['PDF_fields']['facsimileTelephoneNumber'] = _('Fax number');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePager', true)) {\n\t\t\t$return['PDF_fields']['pager'] = _('Pager');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEMailAddress')) {\n\t\t\t$return['PDF_fields']['mail'] = _('Email address');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideLabeledURI')) {\n\t\t\t$return['PDF_fields']['labeledURI'] = _('Web site');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideJobTitle')) {\n\t\t\t$return['PDF_fields']['title'] = _('Job title');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideCarLicense')) {\n\t\t\t$return['PDF_fields']['carLicense'] = _('Car license');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEmployeeType')) {\n\t\t\t$return['PDF_fields']['employeeType'] = _('Employee type');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideBusinessCategory')) {\n\t\t\t$return['PDF_fields']['businessCategory'] = _('Business category');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideDepartments')) {\n\t\t\t$return['PDF_fields']['departmentNumber'] = _('Department');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideManager')) {\n\t\t\t$return['PDF_fields']['manager'] = _('Manager');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideO')) {\n\t\t\t$return['PDF_fields']['o'] = _('Organisation');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideOu')) {\n\t\t\t$return['PDF_fields']['ou'] = _('Organisational unit');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEmployeeNumber')) {\n\t\t\t$return['PDF_fields']['employeeNumber'] = _('Employee number');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideInitials')) {\n\t\t\t$return['PDF_fields']['initials'] = _('Initials');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidejpegPhoto')) {\n\t\t\t$return['PDF_fields']['jpegPhoto'] = _('Photo');\n\t\t}\n\t\t// help Entries\n\t\t$return['help'] = array (\n\t\t\t'description' => array (\n\t\t\t\t\"Headline\" => _(\"Description\"), 'attr' => 'description',\n\t\t\t\t\"Text\" => _(\"User description. If left empty sur- and give name will be used.\")\n\t\t\t),\n\t\t\t'title' => array (\n\t\t\t\t\"Headline\" => _(\"Job title\"), 'attr' => 'title',\n\t\t\t\t\"Text\" => _(\"Job title of user: President, department manager, ...\")\n\t\t\t),\n\t\t\t'titleList' => array (\n\t\t\t\t\"Headline\" => _(\"Job title\"), 'attr' => 'title',\n\t\t\t\t\"Text\" => _(\"Job title of user: President, department manager, ...\") . ' ' . _(\"Multiple values are separated by semicolon.\")\n\t\t\t),\n\t\t\t'givenName' => array (\n\t\t\t\t\"Headline\" => _(\"First name\"), 'attr' => 'givenName',\n\t\t\t\t\"Text\" => _(\"First name of user. Only letters, - and spaces are allowed.\")\n\t\t\t),\n\t\t\t'sn' => array (\n\t\t\t\t\"Headline\" => _(\"Last name\"), 'attr' => 'sn',\n\t\t\t\t\"Text\" => _(\"Last name of user. Only letters, - and spaces are allowed.\")\n\t\t\t),\n\t\t\t'employeeType' => array (\n\t\t\t\t\"Headline\" => _(\"Employee type\"), 'attr' => 'employeeType',\n\t\t\t\t\"Text\" => _(\"Employee type: Contractor, Employee, Intern, Temp, External, ...\")\n\t\t\t),\n\t\t\t'manager' => array (\n\t\t\t\t\"Headline\" => _(\"Manager\"), 'attr' => 'manager',\n\t\t\t\t\"Text\" => _(\"This is the LDAP DN of the user's manager. Use this property to represent hierarchies in your company.\")\n\t\t\t),\n\t\t\t'managerList' => array (\n\t\t\t\t\"Headline\" => _(\"Manager\"), 'attr' => 'manager',\n\t\t\t\t\"Text\" => _(\"This is the LDAP DN of the user's manager. Use this property to represent hierarchies in your company.\") . ' ' . _(\"Multiple values are separated by semicolon.\")\n\t\t\t),\n\t\t\t'street' => array (\n\t\t\t\t\"Headline\" => _(\"Street\"), 'attr' => 'street',\n\t\t\t\t\"Text\" => _(\"The street name of the user's address.\")\n\t\t\t),\n\t\t\t'streetList' => array (\n\t\t\t\t\"Headline\" => _(\"Street\"), 'attr' => 'street',\n\t\t\t\t\"Text\" => _(\"The street name of the user's address.\") . ' ' . _(\"Multiple values are separated by semicolon.\")\n\t\t\t),\n\t\t\t'postOfficeBox' => array (\n\t\t\t\t\"Headline\" => _(\"Post office box\"), 'attr' => 'postOfficeBox',\n\t\t\t\t\"Text\" => _(\"The post office box of the user's address.\")\n\t\t\t),\n\t\t\t'postOfficeBoxList' => array (\n\t\t\t\t\"Headline\" => _(\"Post office box\"), 'attr' => 'postOfficeBox',\n\t\t\t\t\"Text\" => _(\"The post office box of the user's address.\") . ' ' . _(\"Multiple values are separated by semicolon.\")\n\t\t\t),\n\t\t\t'postalCode' => array (\n\t\t\t\t\"Headline\" => _(\"Postal code\"), 'attr' => 'postalCode',\n\t\t\t\t\"Text\" => _(\"The postal code of the user's address.\")\n\t\t\t),\n\t\t\t'postalCodeList' => array (\n\t\t\t\t\"Headline\" => _(\"Postal code\"), 'attr' => 'postalCode',\n\t\t\t\t\"Text\" => _(\"The postal code of the user's address.\") . ' ' . _(\"Multiple values are separated by semicolon.\")\n\t\t\t),\n\t\t\t'postalAddress' => array (\n\t\t\t\t\"Headline\" => _(\"Postal address\"), 'attr' => 'postalAddress',\n\t\t\t\t\"Text\" => _(\"Postal address, city\")\n\t\t\t),\n\t\t\t'registeredAddress' => array (\n\t\t\t\t\"Headline\" => _(\"Registered address\"), 'attr' => 'registeredAddress',\n\t\t\t\t\"Text\" => _(\"Registered address, city\")\n\t\t\t),\n\t\t\t'telephoneNumber' => array (\n\t\t\t\t\"Headline\" => _(\"Telephone number\"), 'attr' => 'telephoneNumber',\n\t\t\t\t\"Text\" => _(\"The user's telephone number.\")\n\t\t\t),\n\t\t\t'telephoneNumberList' => array (\n\t\t\t\t\"Headline\" => _(\"Telephone number\"), 'attr' => 'telephoneNumber',\n\t\t\t\t\"Text\" => _(\"The user's telephone number.\") . ' ' . _('Multiple values are separated by semicolon.')\n\t\t\t),\n\t\t\t'mobile' => array (\n\t\t\t\t\"Headline\" => _(\"Mobile number\"), 'attr' => 'mobile',\n\t\t\t\t\"Text\" => _(\"The user's mobile number.\")\n\t\t\t),\n\t\t\t'mobileTelephoneNumberList' => array (\n\t\t\t\t\"Headline\" => _(\"Mobile number\"), 'attr' => 'mobile',\n\t\t\t\t\"Text\" => _(\"The user's mobile number.\") . ' ' . _('Multiple values are separated by semicolon.')\n\t\t\t),\n\t\t\t'facsimileTelephoneNumber' => array (\n\t\t\t\t\"Headline\" => _(\"Fax number\"), 'attr' => 'facsimileTelephoneNumber',\n\t\t\t\t\"Text\" => _(\"The user's fax number.\")\n\t\t\t),\n\t\t\t'facsimileTelephoneNumberList' => array (\n\t\t\t\t\"Headline\" => _(\"Fax number\"), 'attr' => 'facsimileTelephoneNumber',\n\t\t\t\t\"Text\" => _(\"The user's fax number.\") . ' ' . _('Multiple values are separated by semicolon.')\n\t\t\t),\n\t\t\t'pager' => array (\n\t\t\t\t\"Headline\" => _('Pager'), 'attr' => 'pager',\n\t\t\t\t\"Text\" => _(\"The user's pager number.\")\n\t\t\t),\n\t\t\t'pagerList' => array (\n\t\t\t\t\"Headline\" => _('Pager'), 'attr' => 'pager',\n\t\t\t\t\"Text\" => _(\"The user's pager number.\") . ' ' . _('Multiple values are separated by semicolon.')\n\t\t\t),\n\t\t\t'mail' => array (\n\t\t\t\t\"Headline\" => _(\"Email address\"), 'attr' => 'mail',\n\t\t\t\t\"Text\" => _(\"The user's email address.\")\n\t\t\t),\n\t\t\t'mailList' => array (\n\t\t\t\t\"Headline\" => _(\"Email address\"), 'attr' => 'mail',\n\t\t\t\t\"Text\" => _(\"The user's email address.\") . ' ' . _('Multiple values are separated by semicolon.')\n\t\t\t),\n\t\t\t\"mailPassword\" => array (\n\t\t\t\t\"Headline\" => _(\"Send password via mail\"),\n\t\t\t\t\"Text\" => _(\"Sends the password to the user via mail. Please edit your LAM server profile to setup the mail settings.\")),\n\t\t\t'labeledURI' => array(\n\t\t\t\t\"Headline\" => _(\"Web site\"), 'attr' => 'labeledURI',\n\t\t\t\t\"Text\" => _(\"The user's web site (e.g. http://www.company.com).\")\n\t\t\t),\n\t\t\t'labeledURIList' => array(\n\t\t\t\t\"Headline\" => _(\"Web site\"), 'attr' => 'labeledURI',\n\t\t\t\t\"Text\" => _(\"The user's web site (e.g. http://www.company.com).\") . ' ' . _('Multiple values are separated by semicolon.')\n\t\t\t),\n\t\t\t'cn' => array (\n\t\t\t\t\"Headline\" => _(\"Common name\"), 'attr' => 'cn',\n\t\t\t\t\"Text\" => _(\"This is the natural name of the user. If empty, the first and last name is used.\")\n\t\t\t),\n\t\t\t'displayName' => array (\n\t\t\t\t\"Headline\" => _(\"Display name\"), 'attr' => 'displayName',\n\t\t\t\t\"Text\" => _(\"This is the user's preferred name to be used when displaying entries.\")\n\t\t\t),\n\t\t\t'uid' => array(\n\t\t\t\t\"Headline\" => _(\"User name\"), 'attr' => 'uid',\n\t\t\t\t\"Text\" => _(\"User name of the user who should be created. Valid characters are: a-z,A-Z,0-9, @.-_.\")\n\t\t\t),\n\t\t\t'photoUpload' => array(\n\t\t\t\t\"Headline\" => _(\"Add photo\"), 'attr' => 'jpegPhoto',\n\t\t\t\t\"Text\" => _(\"Please select an image file to upload. It must be in JPG format (.jpg/.jpeg).\")\n\t\t\t),\n\t\t\t'homePhone' => array(\n\t\t\t\t\"Headline\" => _(\"Home telephone number\"), 'attr' => 'homePhone',\n\t\t\t\t\"Text\" => _(\"The user's private telephone number.\")\n\t\t\t),\n\t\t\t'homePhoneList' => array(\n\t\t\t\t\"Headline\" => _(\"Home telephone number\"), 'attr' => 'homePhone',\n\t\t\t\t\"Text\" => _(\"The user's private telephone number.\") . ' ' . _('Multiple values are separated by semicolon.')\n\t\t\t),\n\t\t\t'roomNumber' => array(\n\t\t\t\t\"Headline\" => _(\"Room number\"), 'attr' => 'roomNumber',\n\t\t\t\t\"Text\" => _(\"The room number of the employee's office.\")\n\t\t\t),\n\t\t\t'businessCategory' => array(\n\t\t\t\t\"Headline\" => _(\"Business category\"), 'attr' => 'businessCategory',\n\t\t\t\t\"Text\" => _(\"Business category (e.g. Administration, IT-Services, Management, ...)\")\n\t\t\t),\n\t\t\t'businessCategoryList' => array(\n\t\t\t\t\"Headline\" => _(\"Business category\"), 'attr' => 'businessCategory',\n\t\t\t\t\"Text\" => _(\"Business category (e.g. Administration, IT-Services, Management, ...)\") . '. ' . _(\"Multiple values are separated by semicolon.\")\n\t\t\t),\n\t\t\t'l' => array(\n\t\t\t\t\"Headline\" => _(\"Location\"), 'attr' => 'l',\n\t\t\t\t\"Text\" => _(\"This describes the location of the user.\")\n\t\t\t),\n\t\t\t'lList' => array(\n\t\t\t\t\"Headline\" => _(\"Location\"), 'attr' => 'l',\n\t\t\t\t\"Text\" => _(\"This describes the location of the user.\") . ' ' . _(\"Multiple values are separated by semicolon.\")\n\t\t\t),\n\t\t\t'st' => array(\n\t\t\t\t\"Headline\" => _(\"State\"), 'attr' => 'st',\n\t\t\t\t\"Text\" => _(\"The state where the user resides or works.\")\n\t\t\t),\n\t\t\t'stList' => array(\n\t\t\t\t\"Headline\" => _(\"State\"), 'attr' => 'st',\n\t\t\t\t\"Text\" => _(\"The state where the user resides or works.\") . ' ' . _(\"Multiple values are separated by semicolon.\")\n\t\t\t),\n\t\t\t'carLicense' => array(\n\t\t\t\t\"Headline\" => _(\"Car license\"), 'attr' => 'carLicense',\n\t\t\t\t\"Text\" => _(\"This can be used to specify if the user has a car license.\")\n\t\t\t),\n\t\t\t'physicalDeliveryOfficeName' => array(\n\t\t\t\t\"Headline\" => _(\"Office name\"), 'attr' => 'physicalDeliveryOfficeName',\n\t\t\t\t\"Text\" => _(\"The office name of the user (e.g. YourCompany, Human Resources).\")\n\t\t\t),\n\t\t\t'physicalDeliveryOfficeNameList' => array(\n\t\t\t\t\"Headline\" => _(\"Office name\"), 'attr' => 'physicalDeliveryOfficeName',\n\t\t\t\t\"Text\" => _(\"The office name of the user (e.g. YourCompany, Human Resources).\") . ' ' . _(\"Multiple values are separated by semicolon.\")\n\t\t\t),\n\t\t\t'departmentNumber' => array(\n\t\t\t\t\"Headline\" => _(\"Department\"), 'attr' => 'departmentNumber',\n\t\t\t\t\"Text\" => _(\"Here you can enter the user's department.\")\n\t\t\t),\n\t\t\t'departmentNumberList' => array(\n\t\t\t\t\"Headline\" => _(\"Department\"), 'attr' => 'departmentNumber',\n\t\t\t\t\"Text\" => _(\"Here you can enter the user's department.\") . ' ' . _(\"Multiple values are separated by semicolon.\")\n\t\t\t),\n\t\t\t'hiddenOptions' => array(\n\t\t\t\t\"Headline\" => _(\"Hidden options\"),\n\t\t\t\t\"Text\" => _(\"The selected options will not be managed inside LAM. You can use this to reduce the number of displayed input fields.\")\n\t\t\t),\n\t\t\t'pwdHash' => array(\n\t\t\t\t\"Headline\" => _(\"Password hash type\"),\n\t\t\t\t\"Text\" => _(\"LAM supports a large number of possibilities to generate the hash value of passwords. CRYPT-SHA512 and SSHA are the most common. We do not recommend to use plain text passwords unless passwords are hashed server-side.\")\n\t\t\t\t\t\t. ' ' . _('K5KEY is only needed if you use Kerberos with smbk5pwd.')\n\t\t\t),\n\t\t\t'ou' => array(\n\t\t\t\t\"Headline\" => _(\"Organisational unit\"), 'attr' => 'ou',\n\t\t\t\t\"Text\" => _(\"The user's organisational unit.\")\n\t\t\t),\n\t\t\t'ouList' => array(\n\t\t\t\t\"Headline\" => _(\"Organisational unit\"), 'attr' => 'ou',\n\t\t\t\t\"Text\" => _(\"The user's organisational unit.\") . ' ' . _('Multiple values are separated by semicolon.')\n\t\t\t),\n\t\t\t'o' => array(\n\t\t\t\t\"Headline\" => _(\"Organisation\"), 'attr' => 'o',\n\t\t\t\t\"Text\" => _(\"The user's organisation name.\")\n\t\t\t),\n\t\t\t'oList' => array(\n\t\t\t\t\"Headline\" => _(\"Organisation\"), 'attr' => 'o',\n\t\t\t\t\"Text\" => _(\"The user's organisation name.\") . ' ' . _('Multiple values are separated by semicolon.')\n\t\t\t),\n\t\t\t'employeeNumber' => array(\n\t\t\t\t\"Headline\" => _(\"Employee number\"), 'attr' => 'employeeNumber',\n\t\t\t\t\"Text\" => _(\"The user's unique employee number.\")\n\t\t\t),\n\t\t\t'initials' => array(\n\t\t\t\t\"Headline\" => _(\"Initials\"), 'attr' => 'initials',\n\t\t\t\t\"Text\" => _(\"The initials of the user's first names.\") . ' ' . _('Multiple values are separated by semicolon.')\n\t\t\t),\n\t\t\t'userPassword' => array(\n\t\t\t\t\"Headline\" => _(\"Password\"),\n\t\t\t\t\"Text\" => _(\"Please enter the password which you want to set for this account.\")\n\t\t\t),\n\t\t\t'userCertificate' => array(\n\t\t\t\t\"Headline\" => _('User certificates'),\n\t\t\t\t\"Text\" => _('These are the user\\'s certificates.')\n\t\t\t),\n\t\t\t'crop' => array(\n\t\t\t\t\"Headline\" => _('Image cropping'),\n\t\t\t\t\"Text\" => _('Uploaded images will be cropped to these maximum values.')\n\t\t\t),\n\t\t\t'addAddressbook' => array(\n\t\t\t\t\"Headline\" => _('Add addressbook (ou=addressbook)'),\n\t\t\t\t\"Text\" => _('Adds an \"ou=addressbook\" subentry to each user.')\n\t\t\t),\n\t\t);\n\t\treturn $return;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see baseModule::getManagedAttributes()\n\t */\n\tpublic function getManagedAttributes($typeId) {\n\t\t$attrs = parent::getManagedAttributes($typeId);\n\t\tif (!$this->isUnixActive()) {\n\t\t\t$attrs[] = 'cn';\n\t\t}\n\t\tif (!$this->isSamba3Active()) {\n\t\t\t$attrs[] = 'displayName';\n\t\t}\n\t\treturn $attrs;\n\t}\n\n\t/**\n\t* This functions return true if all needed settings are done.\n\t*\n\t* @return boolean true, if all is ok\n\t*/\n\tfunction module_complete() {\n\t\tif (!$this->getAccountContainer()->isNewAccount) {\n\t\t\t// check if account is based on our object class\n\t\t\t$objectClasses = $this->getAccountContainer()->attributes_orig['objectClass'];\n\t\t\tif (is_array($objectClasses) && !in_array('inetOrgPerson', $objectClasses)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tif (!isset($this->attributes['sn'][0]) || ($this->attributes['sn'][0] == '')) return false;\n\t\tif (!$this->isUnixActive()) {\n\t\t\tif (($this->getAccountContainer()->rdn == 'uid') && !isset($this->attributes['uid'][0])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t* Controls if the module button the account page is visible and activated.\n\t*\n\t* @return string status (\"enabled\", \"disabled\", \"hidden\")\n\t*/\n\tfunction getButtonStatus() {\n\t\tif (!$this->getAccountContainer()->isNewAccount) {\n\t\t\t// check if account is based on our object class\n\t\t\t$objectClasses = $this->getAccountContainer()->attributes_orig['objectClass'];\n\t\t\tif (is_array($objectClasses) && !in_array('inetOrgPerson', $objectClasses)) {\n\t\t\t\treturn \"disabled\";\n\t\t\t}\n\t\t}\n\t\treturn \"enabled\";\n\t}\n\n\t/**\n\t* Returns a list of modifications which have to be made to the LDAP account.\n\t*\n\t* @return array list of modifications\n\t* <br>This function returns an array with 3 entries:\n\t* <br>array( DN1 ('add' => array($attr), 'remove' => array($attr), 'modify' => array($attr)), DN2 .... )\n\t* <br>DN is the DN to change. It may be possible to change several DNs (e.g. create a new user and add him to some groups via attribute memberUid)\n\t* <br>\"add\" are attributes which have to be added to LDAP entry\n\t* <br>\"remove\" are attributes which have to be removed from LDAP entry\n\t* <br>\"modify\" are attributes which have to been modified in LDAP entry\n\t* <br>\"info\" are values with informational value (e.g. to be used later by pre/postModify actions)\n\t*/\n\tfunction save_attributes() {\n\t\t// skip saving if account is based on another structural object class\n\t\tif (!$this->getAccountContainer()->isNewAccount && !in_array('inetOrgPerson', $this->getAccountContainer()->attributes_orig['objectClass'])) {\n\t\t\treturn array();\n\t\t}\n\t\t$return = $this->getAccountContainer()->save_module_attributes($this->attributes, $this->orig);\n\t\t// postalAddress, registeredAddress, facsimileTelephoneNumber and jpegPhoto need special removing\n\t\tif (isset($return[$this->getAccountContainer()->dn_orig]['remove']['postalAddress'])) {\n\t\t\t$return[$this->getAccountContainer()->dn_orig]['modify']['postalAddress'] = $this->attributes['postalAddress'];\n\t\t\tunset($return[$this->getAccountContainer()->dn_orig]['remove']['postalAddress']);\n\t\t}\n\t\tif (isset($return[$this->getAccountContainer()->dn_orig]['remove']['registeredAddress'])) {\n\t\t\t$return[$this->getAccountContainer()->dn_orig]['modify']['registeredAddress'] = $this->attributes['registeredAddress'];\n\t\t\tunset($return[$this->getAccountContainer()->dn_orig]['remove']['registeredAddress']);\n\t\t}\n\t\tif (isset($return[$this->getAccountContainer()->dn_orig]['remove']['facsimileTelephoneNumber'])) {\n\t\t\t$return[$this->getAccountContainer()->dn_orig]['modify']['facsimileTelephoneNumber'] = $this->attributes['facsimileTelephoneNumber'];\n\t\t\tunset($return[$this->getAccountContainer()->dn_orig]['remove']['facsimileTelephoneNumber']);\n\t\t}\n\t\tif (isset($return[$this->getAccountContainer()->dn_orig]['add']['facsimileTelephoneNumber'])\n\t\t\t&& isset($this->orig['facsimileTelephoneNumber']) && (sizeof($this->orig['facsimileTelephoneNumber']) > 0)) {\n\t\t\t$return[$this->getAccountContainer()->dn_orig]['modify']['facsimileTelephoneNumber'] = $this->attributes['facsimileTelephoneNumber'];\n\t\t\tunset($return[$this->getAccountContainer()->dn_orig]['add']['facsimileTelephoneNumber']);\n\t\t}\n\t\tif (isset($return[$this->getAccountContainer()->dn_orig]['remove']['jpegPhoto'])) {\n\t\t\t$return[$this->getAccountContainer()->dn_orig]['modify']['jpegPhoto'] = array();\n\t\t\tunset($return[$this->getAccountContainer()->dn_orig]['remove']['jpegPhoto']);\n\t\t}\n\t\t// add information about clear text password\n\t\tif ($this->clearTextPassword != null) {\n\t\t\t$return[$this->getAccountContainer()->dn_orig]['info']['userPasswordClearText'][0] = $this->clearTextPassword;\n\t\t}\n\t\t// password status change\n\t\tif (!$this->isUnixActive()) {\n\t\t\t$pwdOrig = empty($this->orig['userpassword'][0]) ? '' : $this->orig['userpassword'][0];\n\t\t\t$pwdNew = empty($this->attributes['userpassword'][0]) ? '' : $this->attributes['userpassword'][0];\n\t\t\tif ((pwd_is_enabled($pwdOrig) && pwd_is_enabled($pwdNew)) || (!pwd_is_enabled($pwdOrig) && !pwd_is_enabled($pwdNew))) {\n\t\t\t\t$return[$this->getAccountContainer()->dn_orig]['info']['userPasswordStatusChange'][0] = 'unchanged';\n\t\t\t}\n\t\t\telseif (pwd_is_enabled($pwdOrig)) {\n\t\t\t\t$return[$this->getAccountContainer()->dn_orig]['info']['userPasswordStatusChange'][0] = 'locked';\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$return[$this->getAccountContainer()->dn_orig]['info']['userPasswordStatusChange'][0] = 'unlocked';\n\t\t\t}\n\t\t}\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Runs the postmodify actions.\n\t *\n\t * @see baseModule::postModifyActions()\n\t *\n\t * @param boolean $newAccount\n\t * @param array $attributes LDAP attributes of this entry\n\t * @return array array which contains status messages. Each entry is an array containing the status message parameters.\n\t */\n\tpublic function postModifyActions($newAccount, $attributes) {\n\t\t$messages = array();\n\t\t// set exop password\n\t\t$messages = array_merge($messages, $this->setExopPassword($this->moduleSettings));\n\t\t// add address book\n\t\t$accountContainer = $this->getAccountContainer();\n\t\tif ($this->isBooleanConfigOptionSet('inetOrgPerson_addAddressbook')\n\t\t\t&& !empty($accountContainer)\n\t\t\t&& !empty($accountContainer->finalDN)) {\n\t\t\t$dn = 'ou=addressbook,' . $accountContainer->finalDN;\n\t\t\t$result = ldapGetDN($dn);\n\t\t\tif (empty($result)) {\n\t\t\t\t$attrs = array(\n\t\t\t\t\t'objectClass' => array('organizationalUnit'),\n\t\t\t\t\t'ou' => 'addressbook'\n\t\t\t\t);\n\t\t\t\t$success = @ldap_add($_SESSION['ldap']->server(), $dn, $attrs);\n\t\t\t\tif (!$success) {\n\t\t\t\t\tlogNewMessage(LOG_ERR, 'Unable to add addressbook for user ' . $accountContainer->finalDN . ' (' . ldap_error($_SESSION['ldap']->server()) . ').');\n\t\t\t\t\t$messages[] = array('ERROR', sprintf(_(\"Was unable to create DN: %s.\"), htmlspecialchars($dn)), getDefaultLDAPErrorString($_SESSION['ldap']->server()));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlogNewMessage(LOG_NOTICE, 'Added addressbook for user ' . $accountContainer->finalDN);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $messages;\n\t}\n\n\t/**\n\t * Sets the password via ldap_exop if configured.\n\t *\n\t * @param array $settings settings\n\t * @return array error message parameters if any\n\t */\n\tprivate function setExopPassword($settings) {\n\t\tif (!empty($this->clearTextPassword) && !empty($settings['posixAccount_pwdHash'][0])\n\t\t\t\t&& ($settings['posixAccount_pwdHash'][0] === 'LDAP_EXOP')) {\n\t\t\t$success = ldap_exop_passwd($_SESSION['ldap']->server(), $this->getAccountContainer()->finalDN, null, $this->clearTextPassword);\n\t\t\tif (!$success) {\n\t\t\t\treturn array(array('ERROR', _('Unable to set password'), getExtendedLDAPErrorMessage($_SESSION['ldap']->server())));\n\t\t\t}\n\t\t}\n\t\treturn array();\n\t}\n\n\t/**\n\t* Processes user input of the primary module page.\n\t* It checks if all input values are correct and updates the associated LDAP attributes.\n\t*\n\t* @return array list of info/error messages\n\t*/\n\tfunction process_attributes() {\n\t\t$errors = array();\n\t\t$keysToReplace = array('mail', 'description', 'postalAddress', 'cn',\n\t\t\t'registeredAddress', 'labeledURI');\n\t\tif ($this->isUnixActive()) {\n\t\t\t$keysToReplace[] = 'uid';\n\t\t}\n\t\t$this->getAccountContainer()->replaceWildcardsInPOST($keysToReplace);\n\t\t// add parent object classes\n\t\tif ($this->getAccountContainer()->isNewAccount) {\n\t\t\tif (!in_array('organizationalPerson', $this->attributes['objectClass'])) {\n\t\t\t\t$this->attributes['objectClass'][] = 'organizationalPerson';\n\t\t\t}\n\t\t\tif (!in_array('person', $this->attributes['objectClass'])) {\n\t\t\t\t$this->attributes['objectClass'][] = 'person';\n\t\t\t}\n\t\t}\n\t\t// load and check attributes\n\t\t// description\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideDescription') && !$this->isAdminReadOnly('description')) {\n\t\t\t$this->processMultiValueInputTextField('description', $errors);\n\t\t}\n\t\t// last name\n\t\tif (!$this->isAdminReadOnly('sn')) {\n\t\t\t$this->attributes['sn'][0] = trim($_POST['sn']);\n\t\t\tif (!get_preg($this->attributes['sn'][0], 'realname')) $errors[] = $this->messages['lastname'][0];\n\t\t}\n\t\t// first name\n\t\tif (!$this->isAdminReadOnly('givenName')) {\n\t\t\t$this->attributes['givenName'][0] = trim($_POST['givenName']);\n\t\t\tif (($this->attributes['givenName'][0] != '') && !get_preg($this->attributes['givenName'][0], 'realname')) $errors[] = $this->messages['givenName'][0];\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideJobTitle') && !$this->isAdminReadOnly('title')) {\n\t\t\t$this->processMultiValueInputTextField('title', $errors, 'title');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEMailAddress') && !$this->isAdminReadOnly('mail')) {\n\t\t\t$this->processMultiValueInputTextField('mail', $errors, 'email');\n\t\t\tif (!empty($this->attributes['mail'])) {\n\t\t\t\tforeach ($this->attributes['mail'] as &$mail) {\n\t\t\t\t\tif (empty($this->orig['mail']) || !in_array($mail, $this->orig['mail'])) {\n\t\t\t\t\t\tif ($this->emailExists($mail)) {\n\t\t\t\t\t\t\t$msg = $this->messages['mail'][1];\n\t\t\t\t\t\t\t$msg[] = array(htmlspecialchars($mail));\n\t\t\t\t\t\t\t$errors[] = $msg;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!$this->isSamba3Active() && !$this->isBooleanConfigOptionSet('inetOrgPerson_hidedisplayName', true)) {\n\t\t\t$this->attributes['displayName'][0] = $_POST['displayName'];\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideTelephoneNumber') && !$this->isAdminReadOnly('telephoneNumber')) {\n\t\t\t$this->processMultiValueInputTextField('telephoneNumber', $errors, 'telephone');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideMobileNumber') && !$this->isAdminReadOnly('mobile')) {\n\t\t\t$this->processMultiValueInputTextField('mobile', $errors, 'telephone');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideFaxNumber') && !$this->isAdminReadOnly('facsimileTelephoneNumber')) {\n\t\t\t$this->processMultiValueInputTextField('facsimileTelephoneNumber', $errors, 'telephone');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePager', true) && !$this->isAdminReadOnly('pager')) {\n\t\t\t$this->processMultiValueInputTextField('pager', $errors, 'telephone');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideHomeTelephoneNumber') && !$this->isAdminReadOnly('homePhone')) {\n\t\t\t$this->processMultiValueInputTextField('homePhone', $errors, 'telephone');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideStreet') && !$this->isAdminReadOnly('street')) {\n\t\t\t$this->processMultiValueInputTextField('street', $errors, 'street');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostOfficeBox') && !$this->isAdminReadOnly('postOfficeBox')) {\n\t\t\t$this->processMultiValueInputTextField('postOfficeBox', $errors);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalCode') && !$this->isAdminReadOnly('postalCode')) {\n\t\t\t$this->processMultiValueInputTextField('postalCode', $errors, 'postalCode');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalAddress') && !$this->isAdminReadOnly('postalAddress')) {\n\t\t\t$addressCounter = 0;\n\t\t\twhile (isset($_POST['postalAddress' . $addressCounter])) {\n\t\t\t\t$this->attributes['postalAddress'][$addressCounter] = implode('$', preg_split('/[\\r][\\n]/', $_POST['postalAddress' . $addressCounter]));\n\t\t\t\tif (!get_preg($this->attributes['postalAddress'][$addressCounter], 'postalAddress')) $errors[] = $this->messages['postalAddress'][0];\n\t\t\t\tif ($this->attributes['postalAddress'][$addressCounter] == '') {\n\t\t\t\t\tunset($this->attributes['postalAddress'][$addressCounter]);\n\t\t\t\t}\n\t\t\t\t$addressCounter++;\n\t\t\t}\n\t\t\tif (isset($_POST['addPostalAddress'])) {\n\t\t\t\t$this->attributes['postalAddress'][] = '';\n\t\t\t}\n\t\t\t$this->attributes['postalAddress'] = array_values($this->attributes['postalAddress']);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideLabeledURI') && !$this->isAdminReadOnly('labeledURI')) {\n\t\t\t$this->processMultiValueInputTextField('labeledURI', $errors);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideRegisteredAddress') && !$this->isAdminReadOnly('registeredAddress')) {\n\t\t\t$addressCounter = 0;\n\t\t\twhile (isset($_POST['registeredAddress' . $addressCounter])) {\n\t\t\t\t$this->attributes['registeredAddress'][$addressCounter] = implode('$', preg_split('/[\\r][\\n]/', $_POST['registeredAddress' . $addressCounter]));\n\t\t\t\tif (!get_preg($this->attributes['registeredAddress'][$addressCounter], 'postalAddress')) $errors[] = $this->messages['registeredAddress'][0];\n\t\t\t\tif ($this->attributes['registeredAddress'][$addressCounter] == '') {\n\t\t\t\t\tunset($this->attributes['registeredAddress'][$addressCounter]);\n\t\t\t\t}\n\t\t\t\t$addressCounter++;\n\t\t\t}\n\t\t\tif (isset($_POST['addRegisteredAddress'])) {\n\t\t\t\t$this->attributes['registeredAddress'][] = '';\n\t\t\t}\n\t\t\t$this->attributes['registeredAddress'] = array_values($this->attributes['registeredAddress']);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEmployeeType') && !$this->isAdminReadOnly('employeeType')) {\n\t\t\t$this->attributes['employeeType'][0] = $_POST['employeeType'];\n\t\t\tif (!get_preg($this->attributes['employeeType'][0], 'employeeType')) $errors[] = $this->messages['employeeType'][0];\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideRoomNumber') && !$this->isAdminReadOnly('roomNumber')) {\n\t\t\t$this->attributes['roomNumber'][0] = $_POST['roomNumber'];\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideLocation') && !$this->isAdminReadOnly('l')) {\n\t\t\t$this->processMultiValueInputTextField('l', $errors);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideState') && !$this->isAdminReadOnly('st')) {\n\t\t\t$this->processMultiValueInputTextField('st', $errors);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideCarLicense') && !$this->isAdminReadOnly('carLicense')) {\n\t\t\t$this->attributes['carLicense'][0] = $_POST['carLicense'];\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideOfficeName') && !$this->isAdminReadOnly('physicalDeliveryOfficeName')) {\n\t\t\t$this->processMultiValueInputTextField('physicalDeliveryOfficeName', $errors);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideBusinessCategory') && !$this->isAdminReadOnly('businessCategory')) {\n\t\t\t$this->processMultiValueInputTextField('businessCategory', $errors, 'businessCategory');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideDepartments') && !$this->isAdminReadOnly('departmentNumber')) {\n\t\t\t$this->processMultiValueInputTextField('departmentNumber', $errors);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEmployeeNumber') && !$this->isAdminReadOnly('employeeNumber')) {\n\t\t\t$this->attributes['employeeNumber'][0] = $_POST['employeeNumber'];\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideOu') && !$this->isAdminReadOnly('ou')) {\n\t\t\t$this->processMultiValueInputTextField('ou', $errors);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideO') && !$this->isAdminReadOnly('o')) {\n\t\t\t$this->processMultiValueInputTextField('o', $errors);\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideInitials') && !$this->isAdminReadOnly('initials')) {\n\t\t\t$this->attributes['initials'] = preg_split('/;[ ]*/', $_POST['initials']);\n\t\t}\n\n\t\tif (!$this->isUnixActive()) {\n\t\t\t// uid\n\t\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideUID') && !$this->isAdminReadOnly('uid')) {\n\t\t\t\tif (isset($_POST['uid']) && ($_POST['uid'] != '')) {\n\t\t\t\t\tif (!get_preg($_POST['uid'], 'username')) {\n\t\t\t\t\t\t$errors[] = $this->messages['uid'][0];\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$this->attributes['uid'][0] = $_POST['uid'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telseif (isset($this->attributes['uid'][0])) {\n\t\t\t\t\tunset($this->attributes['uid'][0]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// cn\n\t\t\tif (!$this->isAdminReadOnly('cn')) {\n\t\t\t\t$this->processMultiValueInputTextField('cn', $errors, 'cn');\n\t\t\t\tif (empty($this->attributes['cn'][0])) {\n\t\t\t\t\tif ($_POST['givenName'] != '') {\n\t\t\t\t\t\t$this->attributes['cn'][0] = $_POST['givenName'] . \" \" . $_POST['sn'];\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$this->attributes['cn'][0] = $_POST['sn'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!$this->isAdminReadOnly('userPassword')) {\n\t\t\t\tif (isset($_POST['lockPassword'])) {\n\t\t\t\t\t$this->attributes['userpassword'][0] = pwd_disable($this->attributes['userpassword'][0]);\n\t\t\t\t}\n\t\t\t\tif (isset($_POST['unlockPassword'])) {\n\t\t\t\t\t$this->attributes['userpassword'][0] = pwd_enable($this->attributes['userpassword'][0]);\n\t\t\t\t}\n\t\t\t\tif (isset($_POST['removePassword'])) {\n\t\t\t\t\tunset($this->attributes['userpassword']);\n\t\t\t\t}\n\t\t\t\t// set SASL password for new and renamed users\n\t\t\t\tif (!empty($this->attributes['uid'][0]) && !empty($this->moduleSettings['posixAccount_pwdHash'][0])\n\t\t\t\t\t\t&& ($this->moduleSettings['posixAccount_pwdHash'][0] === 'SASL')\n\t\t\t\t\t\t&& ($this->getAccountContainer()->isNewAccount || ($this->attributes['uid'][0] != $this->orig['uid'][0]))) {\n\t\t\t\t\t$this->attributes['userpassword'][0] = '{SASL}' . $this->attributes['uid'][0];\n\t\t\t\t}\n\t\t\t\t// set K5KEY password for new users\n\t\t\t\tif (!empty($this->moduleSettings['posixAccount_pwdHash'][0]) && ($this->moduleSettings['posixAccount_pwdHash'][0] === 'K5KEY')) {\n\t\t\t\t\t$this->attributes[$this->getPasswordAttrName()][0] = pwd_hash('x', true, $this->moduleSettings['posixAccount_pwdHash'][0]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidejpegPhoto') && isset($_POST['delPhoto']) && !$this->isAdminReadOnly('jpegPhoto')) {\n\t\t\t$this->attributes['jpegPhoto'] = array();\n\t\t}\n\t\t// Return error-messages\n\t\treturn $errors;\n\t}\n\n\t/**\n\t * Returns the HTML meta data for the main account page.\n\t *\n\t * @return array HTML meta data\n\t */\n\tfunction display_html_attributes() {\n\t\t$this->initCache();\n\t\t$container = new htmlResponsiveRow();\n\t\t$fieldContainer = new htmlResponsiveRow();\n\t\t$fieldTabletColumns = $this->isBooleanConfigOptionSet('inetOrgPerson_hidejpegPhoto') ? 12 : 8;\n\t\t$container->add($fieldContainer, 12, 12, $fieldTabletColumns);\n\t\t// uid\n\t\tif (!$this->isUnixActive() && !$this->isBooleanConfigOptionSet('inetOrgPerson_hideUID')) {\n\t\t\tif ($this->isAdminReadOnly('uid')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'uid', _('User name'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addSimpleInputTextField($fieldContainer, 'uid', _('User name'));\n\t\t\t}\n\t\t}\n\t\t// first name\n\t\tif ($this->isAdminReadOnly('givenName')) {\n\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'givenName', _('First name'));\n\t\t}\n\t\telse {\n\t\t\t$this->addSimpleInputTextField($fieldContainer, 'givenName', _('First name'));\n\t\t}\n\t\t// last name\n\t\tif ($this->isAdminReadOnly('sn')) {\n\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'sn', _('Last name'));\n\t\t}\n\t\telse {\n\t\t\t$this->addSimpleInputTextField($fieldContainer, 'sn', _('Last name'), true);\n\t\t}\n\t\t// initials\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideInitials')) {\n\t\t\tif ($this->isAdminReadOnly('initials')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'initials', _('Initials'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addSimpleInputTextField($fieldContainer, 'initials', _('Initials'));\n\t\t\t}\n\t\t}\n\t\t// common name\n\t\tif (!$this->isUnixActive()) {\n\t\t\tif ($this->isAdminReadOnly('cn')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'cn', _('Common name'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'cn', _('Common name'), true);\n\t\t\t}\n\t\t}\n\t\t// display name\n\t\tif (!$this->isSamba3Active() && !$this->isBooleanConfigOptionSet('inetOrgPerson_hidedisplayName', true)) {\n\t\t\t$this->addSimpleInputTextField($fieldContainer, 'displayName', _('Display name'));\n\t\t}\n\t\t// description\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideDescription')) {\n\t\t\tif ($this->isAdminReadOnly('description')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'description', _('Description'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'description', _('Description'));\n\t\t\t}\n\t\t}\n\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideStreet') || !$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostOfficeBox')\n\t\t\t\t|| !$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalCode') || !$this->isBooleanConfigOptionSet('inetOrgPerson_hideLocation')\n\t\t\t\t|| !$this->isBooleanConfigOptionSet('inetOrgPerson_hideState') || !$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalAddress')\n\t\t\t\t|| !$this->isBooleanConfigOptionSet('inetOrgPerson_hideOfficeName') || !$this->isBooleanConfigOptionSet('inetOrgPerson_hideRoomNumber')\n\t\t\t\t|| !$this->isBooleanConfigOptionSet('inetOrgPerson_hideRegisteredAddress')) {\n\t\t\t$fieldContainer->add(new htmlSubTitle(_('Address')), 12);\n\t\t}\n\n\t\t// street\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideStreet')) {\n\t\t\tif ($this->isAdminReadOnly('street')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'street', _('Street'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'street', _('Street'));\n\t\t\t}\n\t\t}\n\t\t// post office box\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostOfficeBox')) {\n\t\t\tif ($this->isAdminReadOnly('postOfficeBox')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'postOfficeBox', _('Post office box'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'postOfficeBox', _('Post office box'));\n\t\t\t}\n\t\t}\n\t\t// postal code\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalCode')) {\n\t\t\tif ($this->isAdminReadOnly('postalCode')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'postalCode', _('Postal code'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'postalCode', _('Postal code'));\n\t\t\t}\n\t\t}\n\t\t// location\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideLocation')) {\n\t\t\tif ($this->isAdminReadOnly('l')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'l', _('Location'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'l', _('Location'));\n\t\t\t}\n\t\t}\n\t\t// state\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideState')) {\n\t\t\tif ($this->isAdminReadOnly('st')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'st', _('State'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'st', _('State'));\n\t\t\t}\n\t\t}\n\t\t// postal address\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalAddress')) {\n\t\t\t$postalAddresses = array();\n\t\t\tif (isset($this->attributes['postalAddress'][0])) {\n\t\t\t\tfor ($i = 0; $i < sizeof($this->attributes['postalAddress']); $i++) {\n\t\t\t\t\t$postalAddresses[] = implode(\"\\r\\n\", explode('$', $this->attributes['postalAddress'][$i]));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (sizeof($postalAddresses) == 0) {\n\t\t\t\t$postalAddresses[] = '';\n\t\t\t}\n\t\t\t$addressLabel = new htmlOutputText(_('Postal address'));\n\t\t\t$addressLabel->alignment = htmlElement::ALIGN_TOP;\n\t\t\t$fieldContainer->addLabel($addressLabel);\n\t\t\t$addressContainer = new htmlGroup();\n\t\t\tfor ($i = 0; $i < sizeof($postalAddresses); $i++) {\n\t\t\t\tif ($this->isAdminReadOnly('postalAddress')) {\n\t\t\t\t\t$val = str_replace(\"\\r\\n\", '<br>', htmlspecialchars($postalAddresses[$i]));\n\t\t\t\t\t$addressContainer->addElement(new htmlOutputText($val, false));\n\t\t\t\t\tif ($i < (sizeof($postalAddresses) - 1)) {\n\t\t\t\t\t\t$addressContainer->addElement(new htmlOutputText('<br>', false));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$addressContainer->addElement(new htmlInputTextarea('postalAddress' . $i, $postalAddresses[$i], 30, 3));\n\t\t\t\t\tif ($i < (sizeof($postalAddresses) - 1)) {\n\t\t\t\t\t\t$addressContainer->addElement(new htmlOutputText('<br>', false));\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$addressContainer->addElement(new htmlButton('addPostalAddress', 'add.svg', true));\n\t\t\t\t\t\t$addressHelp = new htmlHelpLink('postalAddress');\n\t\t\t\t\t\t$addressContainer->addElement($addressHelp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$fieldContainer->addField($addressContainer);\n\t\t}\n\t\t// registered address\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideRegisteredAddress')) {\n\t\t\t$registeredAddresses = array();\n\t\t\tif (isset($this->attributes['registeredAddress'][0])) {\n\t\t\t\tfor ($i = 0; $i < sizeof($this->attributes['registeredAddress']); $i++) {\n\t\t\t\t\t$registeredAddresses[] = implode(\"\\r\\n\", explode('$', $this->attributes['registeredAddress'][$i]));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (sizeof($registeredAddresses) == 0) {\n\t\t\t\t$registeredAddresses[] = '';\n\t\t\t}\n\t\t\t$registeredAddressLabel = new htmlOutputText(_('Registered address'));\n\t\t\t$registeredAddressLabel->alignment = htmlElement::ALIGN_TOP;\n\t\t\t$fieldContainer->addLabel($registeredAddressLabel);\n\t\t\t$registeredAddressContainer = new htmlGroup();\n\t\t\tfor ($i = 0; $i < sizeof($registeredAddresses); $i++) {\n\t\t\t\tif ($this->isAdminReadOnly('registeredAddress')) {\n\t\t\t\t\t$val = str_replace(\"\\r\\n\", '<br>', htmlspecialchars($registeredAddresses[$i]));\n\t\t\t\t\t$registeredAddressContainer->addElement(new htmlOutputText($val, false));\n\t\t\t\t\tif ($i < (sizeof($registeredAddresses) - 1)) {\n\t\t\t\t\t\t$registeredAddressContainer->addElement(new htmlOutputText('<br>', false));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$registeredAddressContainer->addElement(new htmlInputTextarea('registeredAddress' . $i, $registeredAddresses[$i], 30, 3));\n\t\t\t\t\tif ($i < (sizeof($registeredAddresses) - 1)) {\n\t\t\t\t\t\t$registeredAddressContainer->addElement(new htmlOutputText('<br>', false));\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$registeredAddressContainer->addElement(new htmlButton('addRegisteredAddress', 'add.svg', true));\n\t\t\t\t\t\t$registeredAddressHelp = new htmlHelpLink('registeredAddress');\n\t\t\t\t\t\t$registeredAddressContainer->addElement($registeredAddressHelp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$fieldContainer->addField($registeredAddressContainer);\n\t\t}\n\t\t// office name\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideOfficeName')) {\n\t\t\tif ($this->isAdminReadOnly('physicalDeliveryOfficeName')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'physicalDeliveryOfficeName', _('Office name'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'physicalDeliveryOfficeName', _('Office name'));\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideRoomNumber')) {\n\t\t\tif ($this->isAdminReadOnly('roomNumber')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'roomNumber', _('Room number'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addSimpleInputTextField($fieldContainer, 'roomNumber', _('Room number'));\n\t\t\t}\n\t\t}\n\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideTelephoneNumber') || !$this->isBooleanConfigOptionSet('inetOrgPerson_hideHomeTelephoneNumber')\n\t\t\t\t|| !$this->isBooleanConfigOptionSet('inetOrgPerson_hideMobileNumber') || !$this->isBooleanConfigOptionSet('inetOrgPerson_hideFaxNumber')\n\t\t\t\t|| !$this->isBooleanConfigOptionSet('inetOrgPerson_hideEMailAddress') || !$this->isBooleanConfigOptionSet('inetOrgPerson_hideLabeledURI')) {\n\t\t\t$fieldContainer->add(new htmlSubTitle(_('Contact data')), 12);\n\t\t}\n\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideTelephoneNumber')) {\n\t\t\tif ($this->isAdminReadOnly('telephoneNumber')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'telephoneNumber', _('Telephone number'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'telephoneNumber', _('Telephone number'));\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideHomeTelephoneNumber')) {\n\t\t\tif ($this->isAdminReadOnly('homePhone')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'homePhone', _('Home telephone number'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'homePhone', _('Home telephone number'));\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideMobileNumber')) {\n\t\t\tif ($this->isAdminReadOnly('mobile')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'mobile', _('Mobile number'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'mobile', _('Mobile number'));\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideFaxNumber')) {\n\t\t\tif ($this->isAdminReadOnly('facsimileTelephoneNumber')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'facsimileTelephoneNumber', _('Fax number'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'facsimileTelephoneNumber', _('Fax number'));\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePager', true)) {\n\t\t\tif ($this->isAdminReadOnly('pager')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'pager', _('Pager'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'pager', _('Pager'));\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEMailAddress')) {\n\t\t\tif ($this->isAdminReadOnly('mail')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'mail', _('Email address'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'mail', _('Email address'));\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideLabeledURI')) {\n\t\t\tif ($this->isAdminReadOnly('labeledURI')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'labeledURI', _('Web site'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'labeledURI', _('Web site'));\n\t\t\t}\n\t\t}\n\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideJobTitle') || !$this->isBooleanConfigOptionSet('inetOrgPerson_hideCarLicense')\n\t\t\t\t|| !$this->isBooleanConfigOptionSet('inetOrgPerson_hideEmployeeType') || !$this->isBooleanConfigOptionSet('inetOrgPerson_hideBusinessCategory')\n\t\t\t\t|| !$this->isBooleanConfigOptionSet('inetOrgPerson_hideDepartments') || !$this->isBooleanConfigOptionSet('inetOrgPerson_hideManager')\n\t\t\t\t|| !$this->isBooleanConfigOptionSet('inetOrgPerson_hideuserCertificate')) {\n\t\t\t$fieldContainer->add(new htmlSubTitle(_('Work details')), 12);\n\t\t}\n\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideJobTitle')) {\n\t\t\tif ($this->isAdminReadOnly('title')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'title', _('Job title'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'title', _('Job title'), false, null, false, array_slice($this->titleCache, 0, 300));\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideCarLicense')) {\n\t\t\tif ($this->isAdminReadOnly('carLicense')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'carLicense', _('Car license'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addSimpleInputTextField($fieldContainer, 'carLicense', _('Car license'));\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEmployeeNumber')) {\n\t\t\tif ($this->isAdminReadOnly('employeeNumber')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'employeeNumber', _('Employee number'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addSimpleInputTextField($fieldContainer, 'employeeNumber', _('Employee number'));\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEmployeeType')) {\n\t\t\tif ($this->isAdminReadOnly('employeeType')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'employeeType', _('Employee type'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addSimpleInputTextField($fieldContainer, 'employeeType', _('Employee type'), false, null, false, array_slice($this->employeeTypeCache, 0, 300));\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideBusinessCategory')) {\n\t\t\tif ($this->isAdminReadOnly('businessCategory')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'businessCategory', _('Business category'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'businessCategory', _('Business category'), false, null, false, array_slice($this->businessCategoryCache, 0, 300));\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideDepartments')) {\n\t\t\tif ($this->isAdminReadOnly('departmentNumber')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'departmentNumber', _('Department'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'departmentNumber', _('Department'), false, null, false, array_slice($this->departmentCache, 0, 300));\n\t\t\t}\n\t\t}\n\t\t// organisational unit\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideOu')) {\n\t\t\tif ($this->isAdminReadOnly('ou')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'ou', _('Organisational unit'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'ou', _('Organisational unit'), false, null, false, array_slice($this->ouCache, 0, 300));\n\t\t\t}\n\t\t}\n\t\t// organisation\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideO')) {\n\t\t\tif ($this->isAdminReadOnly('o')) {\n\t\t\t\t$this->addSimpleReadOnlyField($fieldContainer, 'o', _('Organisation'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->addMultiValueInputTextField($fieldContainer, 'o', _('Organisation'), false, null, false, array_slice($this->oCache, 0, 300));\n\t\t\t}\n\t\t}\n\t\t// user certificates\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideuserCertificate')) {\n\t\t\t$fieldContainer->addVerticalSpacer('0.5rem');\n\t\t\t$fieldContainer->addLabel(new htmlOutputText(_('User certificates')));\n\t\t\t$userCertificateGroup = new htmlGroup();\n\t\t\t$userCertificateCount = 0;\n\t\t\tif (isset($this->attributes['userCertificate;binary'])) {\n\t\t\t\t$userCertificateCount = sizeof($this->attributes['userCertificate;binary']);\n\t\t\t}\n\t\t\t$userCertificateGroup->addElement(new htmlOutputText($userCertificateCount));\n\t\t\t$userCertificateGroup->addElement(new htmlSpacer('10px', null));\n\t\t\tif (!$this->isAdminReadOnly('manager')) {\n\t\t\t\t$userCertificateGroup->addElement(new htmlAccountPageButton(get_class($this), 'userCertificate', 'manage', _('Manage')));\n\t\t\t\t$userCertificateGroup->addElement(new htmlHelpLink('userCertificate'));\n\t\t\t}\n\t\t\t$fieldContainer->addField($userCertificateGroup);\n\t\t}\n\t\t// manager\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideManager')) {\n\t\t\t$fieldContainer->addVerticalSpacer('0.5rem');\n\t\t\t$fieldContainer->addLabel(new htmlOutputText(_('Manager')));\n\t\t\tif (!$this->isAdminReadOnly('manager')) {\n\t\t\t\t$managerButtonGroup = new htmlGroup();\n\t\t\t\t$managerButtonGroup->addElement(new htmlAccountPageButton(get_class($this), 'manager', 'change', _(\"Change\")));\n\t\t\t\t$managerButtonGroup->addElement(new htmlHelpLink('manager'));\n\t\t\t\t$fieldContainer->addField($managerButtonGroup);\n\t\t\t}\n\t\t\tif (isset($this->attributes['manager'][0])) {\n\t\t\t\t$managerList = array();\n\t\t\t\tfor ($i = 0; $i < sizeof($this->attributes['manager']); $i++) {\n\t\t\t\t\t$managerList[] = $this->attributes['manager'][$i];\n\t\t\t\t}\n\t\t\t\tusort($managerList, 'compareDN');\n\t\t\t\t$managers = new htmlTable();\n\t\t\t\t$managers->alignment = htmlElement::ALIGN_RIGHT;\n\t\t\t\t$managers->colspan = 3;\n\t\t\t\tfor ($i = 0; $i < sizeof($managerList); $i++) {\n\t\t\t\t\t$manager = new htmlOutputText(getAbstractDN($managerList[$i]));\n\t\t\t\t\t$manager->alignment = htmlElement::ALIGN_RIGHT;\n\t\t\t\t\t$managers->addElement($manager, true);\n\t\t\t\t}\n\t\t\t\t$fieldContainer->addLabel(new htmlOutputText('&nbsp;', false));\n\t\t\t\t$fieldContainer->addField($managers);\n\t\t\t}\n\t\t}\n\t\t// password buttons\n\t\tif (!$this->isUnixActive() && checkIfWriteAccessIsAllowed($this->get_scope()) && isset($this->attributes['userpassword'][0]) && !$this->isAdminReadOnly('userPassword')) {\n\t\t\t$fieldContainer->add(new htmlSubTitle(_('Password')), 12);\n\t\t\t$pwdContainer = new htmlGroup();\n\t\t\tif (pwd_is_enabled($this->attributes['userpassword'][0])) {\n\t\t\t\t$pwdContainer->addElement(new htmlButton('lockPassword', _('Lock password')));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$pwdContainer->addElement(new htmlButton('unlockPassword', _('Unlock password')));\n\t\t\t}\n\t\t\t$pwdContainer->addElement(new htmlSpacer('0.5rem', null));\n\t\t\t$pwdContainer->addElement(new htmlButton('removePassword', _('Remove password')));\n\t\t\t$fieldContainer->add($pwdContainer, 12, 12, 12, 'text-center');\n\t\t}\n\t\t// photo\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidejpegPhoto')) {\n\t\t\t$imageContainer = new htmlTable();\n\t\t\t$imageContainer->setCSSClasses(array('div-center'));\n\t\t\t$imageContainer->alignment = htmlElement::ALIGN_TOP;\n\t\t\t$photoFile = '../../graphics/user.svg';\n\t\t\t$noPhoto = true;\n\t\t\tif (isset($this->attributes['jpegPhoto'][0])) {\n\t\t\t\t$jpeg_filename = 'jpg' . getRandomNumber() . '.jpg';\n\t\t\t\t$outjpeg = @fopen(dirname(__FILE__) . '/../../tmp/' . $jpeg_filename, \"wb\");\n\t\t\t\tfwrite($outjpeg, $this->attributes['jpegPhoto'][0]);\n\t\t\t\tfclose ($outjpeg);\n\t\t\t\t$photoFile = '../../tmp/' . $jpeg_filename;\n\t\t\t\t$noPhoto = false;\n\t\t\t}\n\t\t\t$img = new htmlImage($photoFile);\n\t\t\t$img->setCSSClasses(array('photo'));\n\t\t\t$img->enableLightbox();\n\t\t\t$imageContainer->addElement($img, true);\n\t\t\tif (!$this->isAdminReadOnly('jpegPhoto')) {\n\t\t\t\tif ($noPhoto) {\n\t\t\t\t\t$imageContainer->addElement(new htmlAccountPageButton(get_class($this), 'photo', 'open', _('Add photo')));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$imageContainer->addElement(new htmlButton('delPhoto', _('Delete photo')));\n\t\t\t\t}\n\t\t\t}\n\t\t\t$container->add($imageContainer, 12, 12, 4);\n\t\t}\n\t\treturn $container;\n\t}\n\n\t/**\n\t* Sets a new photo.\n\t*\n\t* @return array list of error messages if any\n\t*/\n\tpublic function process_photo() {\n\t\tif (isset($_POST['form_subpage_' . get_class($this) . '_attributes_back'])) {\n\t\t\treturn array();\n\t\t}\n\t\tif ($this->isAdminReadOnly('jpegPhoto')) {\n\t\t\treturn array();\n\t\t}\n\t\tif (isset($_POST['form_subpage_' . get_class($this) . '_photo_upload']) || isset($_POST['webcamData'])) {\n\t\t\treturn $this->uploadPhoto();\n\t\t}\n\t\tif (isset($_POST['form_subpage_' . get_class($this) . '_attributes_crop'])) {\n\t\t\t$messages = array();\n\t\t\ttry {\n\t\t\t\tinclude_once dirname(__FILE__) . '/../imageutils.inc';\n\t\t\t\t$imageManipulator = ImageManipulationFactory::getImageManipulator($this->attributes['jpegPhoto'][0]);\n\t\t\t\t$imageManipulator->crop($_POST['croppingDataX'], $_POST['croppingDataY'], $_POST['croppingDataWidth'], $_POST['croppingDataHeight']);\n\t\t\t\t$this->attributes['jpegPhoto'][0] = $imageManipulator->getImageData();\n\t\t\t}\n\t\t\tcatch (Exception $e) {\n\t\t\t\t$msg =  $this->messages['file'][2];\n\t\t\t\t$msg[] = htmlspecialchars($e->getMessage());\n\t\t\t\t$messages[] = $msg;\n\t\t\t}\n\t\t\treturn $messages;\n\t\t}\n\t}\n\n\t/**\n\t * Uploads the photo file.\n\t *\n\t * @return array error messages if any\n\t */\n\tprivate function uploadPhoto() {\n\t\t$messages = array();\n\t\tif ((empty($_FILES['photoFile']) || ($_FILES['photoFile']['size'] <= 0)) && empty($_POST['webcamData'])) {\n\t\t\t$messages[] = $this->messages['file'][0];\n\t\t\treturn $messages;\n\t\t}\n\t\tif (!empty($_FILES['photoFile']['tmp_name'])) {\n\t\t\t$handle = fopen($_FILES['photoFile']['tmp_name'], \"r\");\n\t\t\t$data = fread($handle, 100000000);\n\t\t\tfclose($handle);\n\t\t\tif (!empty($this->moduleSettings['inetOrgPerson_jpegPhoto_maxSize'][0]) && (strlen($data) > (1024 * $this->moduleSettings['inetOrgPerson_jpegPhoto_maxSize'][0]))) {\n\t\t\t\t$errMsg = $this->messages['file'][3];\n\t\t\t\t$errMsg[] = null;\n\t\t\t\t$errMsg[] = array($this->moduleSettings['inetOrgPerson_jpegPhoto_maxSize'][0]);\n\t\t\t\treturn array($errMsg);\n\t\t\t}\n\t\t}\n\t\telseif (isset($_POST['webcamData'])) {\n\t\t\t$data = $_POST['webcamData'];\n\t\t\t$data = str_replace('data:image/png;base64,', '', $data);\n\t\t\t$data = base64_decode($data);\n\t\t}\n\t\t// convert to JPG\n\t\ttry {\n\t\t\tinclude_once dirname(__FILE__) . '/../imageutils.inc';\n\t\t\t$imageManipulator = ImageManipulationFactory::getImageManipulator($data);\n\t\t\t// resize if maximum values specified\n\t\t\tif (!empty($this->moduleSettings['inetOrgPerson_jpegPhoto_maxWidth'][0]) || !empty($this->moduleSettings['inetOrgPerson_jpegPhoto_maxHeight'][0])) {\n\t\t\t\t$maxWidth = empty($this->moduleSettings['inetOrgPerson_jpegPhoto_maxWidth'][0]) ? $imageManipulator->getWidth() : $this->moduleSettings['inetOrgPerson_jpegPhoto_maxWidth'][0];\n\t\t\t\t$maxHeight = empty($this->moduleSettings['inetOrgPerson_jpegPhoto_maxHeight'][0]) ? $imageManipulator->getHeight() : $this->moduleSettings['inetOrgPerson_jpegPhoto_maxHeight'][0];\n\t\t\t\t$imageManipulator->thumbnail($maxWidth, $maxHeight);\n\t\t\t}\n\t\t\t$imageManipulator->convertToJpeg();\n\t\t\t$data = $imageManipulator->getImageData();\n\t\t}\n\t\tcatch (Exception $e) {\n\t\t\t$msg =  $this->messages['file'][2];\n\t\t\t$msg[] = htmlspecialchars($e->getMessage());\n\t\t\t$messages[] = $msg;\n\t\t\treturn $messages;\n\t\t}\n\t\t$this->attributes['jpegPhoto'][0] = $data;\n\t\treturn $messages;\n\t}\n\n\t/**\n\t* Displays the photo upload page.\n\t*\n\t* @return array meta HTML code\n\t*/\n\tpublic function display_html_photo() {\n\t\t$container = new htmlResponsiveRow();\n\t\tif (empty($this->attributes['jpegPhoto'][0])) {\n\t\t\t$container->add(new htmlSubTitle(_('Upload image')), 12);\n\t\t\t$label = _('Photo file');\n\t\t\t$container->add(new htmlResponsiveInputFileUpload('photoFile', $label, 'photoUpload'), 12);\n\t\t\t$container->addVerticalSpacer('0.5rem');\n\t\t\t$container->addLabel(new htmlOutputText('&nbsp;', false));\n\t\t\t$container->addField(new htmlAccountPageButton(get_class($this), 'photo', 'upload', _('Upload')));\n\t\t\t$container->addVerticalSpacer('1rem');\n\t\t\t$webcamContent = new htmlResponsiveRow();\n\t\t\t$webcamContent->add(new htmlSubTitle(_('Use webcam')), 12);\n\t\t\t$errorMessage = new htmlStatusMessage('ERROR', '');\n\t\t\t$errorMessage->setCSSClasses(array('hidden', 'lam-webcam-message'));\n\t\t\t$webcamContent->add($errorMessage, 12);\n\t\t\t$captureButton = new htmlButton('lam-webcam-capture', _('Start capture'));\n\t\t\t$captureButton->setOnClick('window.lam.tools.webcam.capture(event);');\n\t\t\t$webcamContent->add($captureButton, 12, 12, 12, 'text-center');\n\t\t\t$video = new htmlVideo('lam-webcam-video');\n\t\t\t$video->setCSSClasses(array('hidden'));\n\t\t\t$webcamContent->add($video, 12, 12, 12, 'text-center');\n\t\t\t$webcamContent->addVerticalSpacer('0.5rem');\n\t\t\t$webcamUploadButton = new htmlButton('uploadWebcam', _('Upload'));\n\t\t\t$webcamUploadButton->setCSSClasses(array('btn-lam-webcam-upload', 'hidden'));\n\t\t\t$webcamUploadButton->setOnClick('window.lam.tools.webcam.upload();');\n\t\t\t$webcamContent->add($webcamUploadButton, 12, 12, 12, 'text-center');\n\t\t\t$canvas = new htmlCanvas('lam-webcam-canvas');\n\t\t\t$canvas->setCSSClasses(array('hidden'));\n\t\t\t$webcamContent->add($canvas, 12);\n\t\t\t$webcamDiv = new htmlDiv('lam_webcam_div', $webcamContent, array('hidden'));\n\t\t\t$container->add($webcamDiv, 12);\n\t\t\t$container->addVerticalSpacer('1rem');\n\t\t\t$container->add(new htmlAccountPageButton(get_class($this), 'attributes', 'back', _('Back')), 12);\n\t\t}\n\t\telse {\n\t\t\t$container->add(new htmlSubTitle(_('Crop image')), 12);\n\t\t\t$jpeg_filename = 'jpg' . getRandomNumber() . '.jpg';\n\t\t\t$outjpeg = @fopen(dirname(__FILE__) . '/../../tmp/' . $jpeg_filename, \"wb\");\n\t\t\tfwrite($outjpeg, $this->attributes['jpegPhoto'][0]);\n\t\t\tfclose ($outjpeg);\n\t\t\t$photoFile = '../../tmp/' . $jpeg_filename;\n\t\t\t$img = new htmlImage($photoFile);\n\t\t\t$img->setCSSClasses(array('photo'));\n\t\t\t$img->enableCropping();\n\t\t\t$container->add($img, 12);\n\t\t\t$container->addVerticalSpacer('1rem');\n\t\t\t$doneButton = new htmlAccountPageButton(get_class($this), 'attributes', 'crop', _('Done'));\n\t\t\t$container->add($doneButton, 12);\n\t\t}\n\t\treturn $container;\n\t}\n\n\t/**\n\t* This function will create the meta HTML code to show a page to change the manager attribute.\n\t*\n\t* @return htmlElement HTML meta data\n\t*/\n\tfunction display_html_manager() {\n\t\t$return = new htmlResponsiveRow();\n\t\tif (!isset($this->attributes['manager'])) {\n\t\t\t$this->attributes['manager'] = array();\n\t\t}\n\t\t// show list of possible new managers\n\t\tif (isset($_POST['form_subpage_' . get_class($this) . '_manager_select'])) {\n\t\t\t$options = array();\n\t\t\t$filter = get_ldap_filter('user');\n\t\t\t$entries = searchLDAPByFilter('(|' . $filter . '(objectclass=organizationalRole))', array('dn'), array('user'));\n\t\t\tfor ($i = 0; $i < sizeof($entries); $i++) {\n\t\t\t\t$entries[$i] = $entries[$i]['dn'];\n\t\t\t}\n\t\t\t// sort by DN\n\t\t\tusort($entries, 'compareDN');\n\t\t\tfor ($i = 0; $i < sizeof($entries); $i++) {\n\t\t\t\tif (!isset($this->attributes['manager']) || !in_array($entries[$i], $this->attributes['manager'])) {\n\t\t\t\t\t$options[getAbstractDN($entries[$i])] = $entries[$i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t$size = 20;\n\t\t\tif (sizeof($options) < 20) {\n\t\t\t\t$size = sizeof($options);\n\t\t\t}\n\t\t\t$managerSelect = new htmlSelect('manager', $options, array(), $size);\n\t\t\t$managerSelect->setHasDescriptiveElements(true);\n\t\t\t$managerSelect->setMultiSelect(true);\n\t\t\t$managerSelect->setRightToLeftTextDirection(true);\n\t\t\t$managerSelect->setSortElements(false);\n\t\t\t$managerSelect->setTransformSingleSelect(false);\n\t\t\t$return->add($managerSelect, 12);\n\t\t\t$return->addVerticalSpacer('1rem');\n\t\t\t$return->addLabel(new htmlAccountPageButton(get_class($this), 'manager', 'addManagers', _('Add')));\n\t\t\t$return->addField(new htmlAccountPageButton(get_class($this), 'manager', 'cancel', _('Cancel')));\n\t\t\treturn $return;\n\t\t}\n\t\t// show existing managers\n\t\t$managerTemp = array();\n\t\tif (isset($this->attributes['manager'])) {\n\t\t\t$managerTemp = $this->attributes['manager'];\n\t\t}\n\t\t// sort by DN\n\t\tusort($managerTemp, 'compareDN');\n\t\t$managers = array();\n\t\tfor ($i = 0; $i < sizeof($managerTemp); $i++) {\n\t\t\t$managers[getAbstractDN($managerTemp[$i])] = $managerTemp[$i];\n\t\t}\n\t\t$size = 20;\n\t\tif (sizeof($this->attributes['manager']) < 20) {\n\t\t\t$size = sizeof($this->attributes['manager']);\n\t\t}\n\t\tif (sizeof($managers) > 0) {\n\t\t\t$managerSelect = new htmlSelect('manager', $managers, array(), $size);\n\t\t\t$managerSelect->setHasDescriptiveElements(true);\n\t\t\t$managerSelect->setMultiSelect(true);\n\t\t\t$managerSelect->setRightToLeftTextDirection(true);\n\t\t\t$managerSelect->setSortElements(false);\n\t\t\t$managerSelect->setTransformSingleSelect(false);\n\t\t\t$return->add($managerSelect, 12);\n\t\t\t$return->addVerticalSpacer('0.5rem');\n\t\t\t$removeButton = new htmlAccountPageButton(get_class($this), 'manager', 'remove', _('Remove selected entries'));\n\t\t\t$return->add($removeButton, 12, 12, 12, 'text-center');\n\t\t\t$return->addVerticalSpacer('1rem');\n\t\t\t$return->add(new htmlHorizontalLine(), 12);\n\t\t}\n\t\t$return->addVerticalSpacer('1rem');\n\t\t$return->addLabel(new htmlAccountPageButton(get_class($this), 'manager', 'select', _('Add entries')));\n\t\t$return->addField(new htmlAccountPageButton(get_class($this), 'attributes', 'managerBack', _('Back')));\n\t\treturn $return;\n\t}\n\n\t/**\n\t* Processes user input of the manager page.\n\t* It checks if all input values are correct and updates the associated LDAP attributes.\n\t*\n\t* @return array list of info/error messages\n\t*/\n\tfunction process_manager() {\n\t\t$return = array();\n\t\tif ($this->isAdminReadOnly('manager')) {\n\t\t\treturn $return;\n\t\t}\n\t\tif (isset($_POST['form_subpage_' . get_class($this) . '_manager_remove']) && isset($_POST['manager'])) {\n\t\t\t$managers = array_flip($this->attributes['manager']);\n\t\t\tfor ($i = 0; $i < sizeof($_POST['manager']); $i++) {\n\t\t\t\tif (isset($managers[$_POST['manager'][$i]])) {\n\t\t\t\t\tunset($managers[$_POST['manager'][$i]]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->attributes['manager'] = array_values(array_flip($managers));\n\t\t}\n\t\telseif (isset($_POST['form_subpage_' . get_class($this) . '_manager_addManagers']) && isset($_POST['manager'])) {\n\t\t\tfor ($i = 0; $i < sizeof($_POST['manager']); $i++) {\n\t\t\t\t$this->attributes['manager'][] = $_POST['manager'][$i];\n\t\t\t\t$this->attributes['manager'] = array_unique($this->attributes['manager']);\n\t\t\t}\n\t\t}\n\t\treturn $return;\n\t}\n\n\t/**\n\t* Displays the certificate upload page.\n\t*\n\t* @return array meta HTML code\n\t*/\n\tfunction display_html_userCertificate() {\n\t\t$container = new htmlResponsiveRow();\n\t\tif (isset($this->attributes['userCertificate;binary'])) {\n\t\t\t$table = new htmlTable();\n\t\t\t$table->colspan = 10;\n\t\t\tfor ($i = 0; $i < sizeof($this->attributes['userCertificate;binary']); $i++) {\n\t\t\t\t$filename = 'userCertificate' . getRandomNumber() . '.der';\n\t\t\t\t$pathOut = dirname(__FILE__) . '/../../tmp/' . $filename;\n\t\t\t\t$out = @fopen($pathOut, \"wb\");\n\t\t\t\t@chmod($pathOut, 0640);\n\t\t\t\tfwrite($out, $this->attributes['userCertificate;binary'][$i]);\n\t\t\t\tfclose ($out);\n\t\t\t\t$path = '../../tmp/' . $filename;\n\t\t\t\t$link = new htmlLink('', $path, '../../graphics/save.svg');\n\t\t\t\t$link->setTargetWindow('_blank');\n\t\t\t\t$link->setCSSClasses(array('icon'));\n\t\t\t\t$table->addElement($link);\n\t\t\t\t$deleteButton = new htmlAccountPageButton(get_class($this), 'userCertificate', 'delete_' . $i, 'del.svg', true);\n\t\t\t\t$table->addElement($deleteButton);\n\t\t\t\t$pem = @chunk_split(@base64_encode($this->attributes['userCertificate;binary'][$i]), 64, \"\\n\");\n\t\t\t\tif (!empty($pem)) {\n\t\t\t\t\t$pem = \"-----BEGIN CERTIFICATE-----\\n\" . $pem . \"-----END CERTIFICATE-----\\n\";\n\t\t\t\t\t$pemData = @openssl_x509_parse($pem);\n\t\t\t\t\t$data = array();\n\t\t\t\t\tif (isset($pemData['serialNumber'])) {\n\t\t\t\t\t\t$data[] = $pemData['serialNumber'];\n\t\t\t\t\t}\n\t\t\t\t\tif (isset($pemData['name'])) {\n\t\t\t\t\t\t$data[] = $pemData['name'];\n\t\t\t\t\t}\n\t\t\t\t\tif (sizeof($data) > 0) {\n\t\t\t\t\t\t$table->addElement(new htmlOutputText(implode(': ', $data)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$table->addNewLine();\n\t\t\t}\n\t\t\t$container->add($table, 12);\n\t\t\t$container->addVerticalSpacer('2rem');\n\t\t}\n\t\t$container->add(new htmlResponsiveInputFileUpload('userCertificateUpload', _('New user certificate')), 12, 6);\n\n\t\t$uploadButton = new htmlAccountPageButton(get_class($this), 'userCertificate', 'submit', _('Upload'));\n\t\t$container->add($uploadButton, 12, 6);\n\t\t$container->addVerticalSpacer('2rem');\n\t\t$container->add(new htmlAccountPageButton(get_class($this), 'attributes', 'back', _('Back')), 12);\n\t\treturn $container;\n\t}\n\n\t/**\n\t* Sets a new certificate or deletes old ones.\n\t*\n\t* @return array list of info/error messages\n\t*/\n\tfunction process_userCertificate() {\n\t\t$messages = array();\n\t\tif ($this->isAdminReadOnly('userCertificate')) {\n\t\t\treturn $messages;\n\t\t}\n\t\tif (isset($_POST['form_subpage_' . get_class($this) . '_userCertificate_submit'])) {\n\t\t\tif ($_FILES['userCertificateUpload'] && ($_FILES['userCertificateUpload']['size'] > 0)) {\n\t\t\t\t$handle = fopen($_FILES['userCertificateUpload']['tmp_name'], \"r\");\n\t\t\t\t$data = fread($handle, 10000000);\n\t\t\t\tfclose($handle);\n\t\t\t\tif (strpos($data, '-----BEGIN CERTIFICATE-----') === 0) {\n\t\t\t\t\t$pemData = str_replace(\"\\r\", '', $data);\n\t\t\t\t\t$pemData = explode(\"\\n\", $pemData);\n\t\t\t\t\tarray_shift($pemData);\n\t\t\t\t\t$last = array_pop($pemData);\n\t\t\t\t\twhile (($last != '-----END CERTIFICATE-----') && sizeof($pemData) > 2) {\n\t\t\t\t\t\t$last = array_pop($pemData);\n\t\t\t\t\t}\n\t\t\t\t\t$pemData = implode('', $pemData);\n\t\t\t\t\t$data = base64_decode($pemData);\n\t\t\t\t}\n\t\t\t\t$this->attributes['userCertificate;binary'][] = $data;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$messages[] = $this->messages['file'][0];\n\t\t\t}\n\t\t}\n\t\telseif (isset($this->attributes['userCertificate;binary'])) {\n\t\t\tfor ($i = 0; $i < sizeof($this->attributes['userCertificate;binary']); $i++) {\n\t\t\t\tif (isset($_POST['form_subpage_' . get_class($this) . '_userCertificate_delete_' . $i])) {\n\t\t\t\t\tunset($this->attributes['userCertificate;binary'][$i]);\n\t\t\t\t\t$this->attributes['userCertificate;binary'] = array_values($this->attributes['userCertificate;binary']);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $messages;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see baseModule::get_pdfFields()\n\t */\n\tpublic function get_pdfFields($typeId) {\n\t\t$fields = parent::get_pdfFields($typeId);\n\t\t$typeManager = new TypeManager();\n\t\t$modules = $typeManager->getConfiguredType($typeId)->getModules();\n\t\tif (!$this->isUnixActive($modules)) {\n\t\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideUID')) {\n\t\t\t\t$fields['uid'] = _('User name');\n\t\t\t}\n\t\t\t$fields['cn'] = _('Common name');\n\t\t\t$fields['userPassword'] = _('Password');\n\t\t}\n\t\tif (!$this->isSamba3Active($modules)) {\n\t\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidedisplayName', true)) {\n\t\t\t\t$fields['displayName'] = _('Display name');\n\t\t\t}\n\t\t}\n\t\treturn $fields;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see baseModule::get_pdfEntries()\n\t */\n\tfunction get_pdfEntries($pdfKeys, $typeId) {\n\t\t$return = array();\n\t\t$this->addSimplePDFField($return, 'description', _('Description'));\n\t\t$this->addSimplePDFField($return, 'title', _('Job title'));\n\t\t$this->addSimplePDFField($return, 'givenName', _('First name'));\n\t\t$this->addSimplePDFField($return, 'sn', _('Last name'));\n\t\t$this->addSimplePDFField($return, 'manager', _('Manager'));\n\t\t$this->addSimplePDFField($return, 'street', _('Street'));\n\t\t$this->addSimplePDFField($return, 'postOfficeBox', _('Post office box'));\n\t\t$this->addSimplePDFField($return, 'postalCode', _('Postal code'));\n\t\tif (!empty($this->attributes['postalAddress'])) {\n\t\t\t$this->addPDFKeyValue($return, 'postalAddress', _('Postal address'), str_replace('$', \"\\n\", implode(\"\\n\\n\", $this->attributes['postalAddress'])));\n\t\t}\n\t\t$this->addSimplePDFField($return, 'registeredAddress', _('Registered address'));\n\t\t$this->addSimplePDFField($return, 'telephoneNumber', _('Telephone number'));\n\t\t$this->addSimplePDFField($return, 'homePhone', _('Home telephone number'));\n\t\t$this->addSimplePDFField($return, 'mobileTelephoneNumber', _('Mobile number'), 'mobile');\n\t\t$this->addSimplePDFField($return, 'pager', _('Pager'));\n\t\t$this->addSimplePDFField($return, 'mail', _('Email address'));\n\t\t$this->addSimplePDFField($return, 'cn', _('Common name'));\n\t\t$this->addSimplePDFField($return, 'facsimileTelephoneNumber', _('Fax number'));\n\t\t$this->addSimplePDFField($return, 'roomNumber', _('Room number'));\n\t\t$this->addSimplePDFField($return, 'businessCategory', _('Business category'));\n\t\t$this->addSimplePDFField($return, 'uid', _('User name'));\n\t\t$this->addSimplePDFField($return, 'carLicense', _('Car license'));\n\t\t$this->addSimplePDFField($return, 'state', _('State'), 'st');\n\t\t$this->addSimplePDFField($return, 'officeName', _('Office name'), 'physicalDeliveryOfficeName');\n\t\t$this->addSimplePDFField($return, 'employeeType', _('Employee type'));\n\t\t$this->addSimplePDFField($return, 'location', _('Location'), 'l');\n\t\t$this->addSimplePDFField($return, 'employeeNumber', _('Employee number'));\n\t\t$this->addSimplePDFField($return, 'ou', _('Organisational unit'));\n\t\t$this->addSimplePDFField($return, 'o', _('Organisation'));\n\t\t$this->addSimplePDFField($return, 'initials', _('Initials'));\n\t\t$this->addSimplePDFField($return, 'labeledURI', _('Web site'));\n\t\t$this->addSimplePDFField($return, 'departmentNumber', _('Department'));\n\t\t$this->addSimplePDFField($return, 'displayName', _('Display name'));\n\t\tif (isset($this->clearTextPassword)) {\n\t\t\t$this->addPDFKeyValue($return, 'userPassword', _('Password'), $this->clearTextPassword);\n\t\t}\n\t\telse if (isset($this->attributes['INFO.userPasswordClearText'])) {\n\t\t\t$this->addPDFKeyValue($return, 'userPassword', _('Password'), $this->attributes['INFO.userPasswordClearText']);\n\t\t}\n\t\t$this->addPDFImage($return, 'jpegPhoto');\n\t\treturn $return;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see baseModule::get_profileOptions()\n\t */\n\tpublic function get_profileOptions($typeId) {\n\t\t$typeManager = new TypeManager();\n\t\t$modules = $typeManager->getConfiguredType($typeId)->getModules();\n\t\t$profileElements = array();\n\t\tif (!$this->isUnixActive($modules)) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Common name'), 'inetOrgPerson_cn', null, 'cn');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideInitials')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Initials'), 'inetOrgPerson_initials', null, 'initials');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideDescription')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Description'), 'inetOrgPerson_description', null, 'description');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideStreet')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Street'), 'inetOrgPerson_street', null, 'streetList');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostOfficeBox')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Post office box'), 'inetOrgPerson_postOfficeBox', null, 'postOfficeBoxList');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalCode')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Postal code'), 'inetOrgPerson_postalCode', null, 'postalCodeList');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideLocation')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Location'), 'inetOrgPerson_l', null, 'lList');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideState')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('State'), 'inetOrgPerson_st', null, 'stList');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalAddress')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Postal address'), 'inetOrgPerson_postalAddress', null, 'postalAddress');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideRegisteredAddress')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Registered address'), 'inetOrgPerson_registeredAddress', null, 'registeredAddress');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideOfficeName')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Office name'), 'inetOrgPerson_physicalDeliveryOfficeName', null, 'physicalDeliveryOfficeName');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideRoomNumber')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Room number'), 'inetOrgPerson_roomNumber', null, 'roomNumber');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideTelephoneNumber')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Telephone number'), 'inetOrgPerson_telephoneNumber', null, 'telephoneNumberList');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideFaxNumber')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Fax number'), 'inetOrgPerson_facsimileTelephoneNumber', null, 'facsimileTelephoneNumberList');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEMailAddress')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Email address'), 'inetOrgPerson_mail', null, 'mailList');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideLabeledURI')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Web site'), 'inetOrgPerson_labeledURI', null, 'labeledURIList');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideDepartments')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Department'), 'inetOrgPerson_departmentNumber', null, 'departmentNumberList');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideOu')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Organisational unit'), 'inetOrgPerson_ou', null, 'ouList');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideO')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Organisation'), 'inetOrgPerson_o', null, 'oList');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideJobTitle')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Job title'), 'inetOrgPerson_title', null, 'title');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEmployeeType')) {\n\t\t\t$profileElements[] = new htmlResponsiveInputField(_('Employee type'), 'inetOrgPerson_employeeType', null, 'employeeType');\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideBusinessCategory')) {\n\t\t    $profileElements[] = new htmlResponsiveInputField(_('Business category'), 'inetOrgPerson_businessCategory', null, 'businessCategory');\n\t\t}\n\t\tif (sizeof($profileElements) > 0) {\n\t\t\t$profileContainer = new htmlResponsiveRow();\n\t\t\tfor ($i = 0; $i < sizeof($profileElements); $i++) {\n\t\t\t\t$profileContainer->add($profileElements[$i], 12);\n\t\t\t}\n\t\t\treturn $profileContainer;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t* Loads the values of an account profile into internal variables.\n\t*\n\t* @param array $profile hash array with profile values (identifier => value)\n\t*/\n\tfunction load_profile($profile) {\n\t\t// profile mappings in meta data\n\t\tparent::load_profile($profile);\n\t\tif (!$this->isUnixActive() && !empty($profile['inetOrgPerson_cn'][0])) {\n\t\t\t$this->attributes['cn'][0] = $profile['inetOrgPerson_cn'][0];\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideDepartments')) {\n\t\t\t// departments\n\t\t\tif (isset($profile['inetOrgPerson_departmentNumber'][0]) && $profile['inetOrgPerson_departmentNumber'][0] != '') {\n\t\t\t\t$departments = explode(';', $profile['inetOrgPerson_departmentNumber'][0]);\n\t\t\t\t// remove extra spaces and set attributes\n\t\t\t\t$this->attributes['departmentNumber'] = array_map('trim', $departments);\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideOu') && isset($profile['inetOrgPerson_ou'][0])) {\n\t\t\t$oList = preg_split('/;[ ]*/', $profile['inetOrgPerson_ou'][0]);\n\t\t\t$this->attributes['ou'] = $oList;\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideO') && isset($profile['inetOrgPerson_o'][0])) {\n\t\t\t$oList = preg_split('/;[ ]*/', $profile['inetOrgPerson_o'][0]);\n\t\t\t$this->attributes['o'] = $oList;\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEMailAddress') && isset($profile['inetOrgPerson_mail'][0])) {\n\t\t\t$mailList = preg_split('/;[ ]*/', $profile['inetOrgPerson_mail'][0]);\n\t\t\t$this->attributes['mail'] = $mailList;\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideLabeledURI') && isset($profile['inetOrgPerson_labeledURI'][0])) {\n\t\t\t$labeledURIList = preg_split('/;[ ]*/', $profile['inetOrgPerson_labeledURI'][0]);\n\t\t\t$this->attributes['labeledURI'] = $labeledURIList;\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideTelephoneNumber') && isset($profile['inetOrgPerson_telephoneNumber'][0])) {\n\t\t\t$telephoneNumberList = preg_split('/;[ ]*/', $profile['inetOrgPerson_telephoneNumber'][0]);\n\t\t\t$this->attributes['telephoneNumber'] = $telephoneNumberList;\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideFaxNumber') && isset($profile['inetOrgPerson_facsimileTelephoneNumber'][0])) {\n\t\t\t$facsimileTelephoneNumberList = preg_split('/;[ ]*/', $profile['inetOrgPerson_facsimileTelephoneNumber'][0]);\n\t\t\t$this->attributes['facsimileTelephoneNumber'] = $facsimileTelephoneNumberList;\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideStreet') && isset($profile['inetOrgPerson_street'][0])) {\n\t\t\t$list = preg_split('/;[ ]*/', $profile['inetOrgPerson_street'][0]);\n\t\t\t$this->attributes['street'] = $list;\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostOfficeBox') && isset($profile['inetOrgPerson_postOfficeBox'][0])) {\n\t\t\t$list = preg_split('/;[ ]*/', $profile['inetOrgPerson_postOfficeBox'][0]);\n\t\t\t$this->attributes['postOfficeBox'] = $list;\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hidePostalCode') && isset($profile['inetOrgPerson_postalCode'][0])) {\n\t\t\t$list = preg_split('/;[ ]*/', $profile['inetOrgPerson_postalCode'][0]);\n\t\t\t$this->attributes['postalCode'] = $list;\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideLocation') && isset($profile['inetOrgPerson_l'][0])) {\n\t\t\t$list = preg_split('/;[ ]*/', $profile['inetOrgPerson_l'][0]);\n\t\t\t$this->attributes['l'] = $list;\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideState') && isset($profile['inetOrgPerson_st'][0])) {\n\t\t\t$list = preg_split('/;[ ]*/', $profile['inetOrgPerson_st'][0]);\n\t\t\t$this->attributes['st'] = $list;\n\t\t}\n\t}\n\n\t/**\n\t* {@inheritDoc}\n\t*/\n\tfunction check_profileOptions($options, $typeId) {\n\t\t$messages = parent::check_profileOptions($options, $typeId);\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideTelephoneNumber')) {\n\t\t\t$telephoneNumberList = preg_split('/;[ ]*/', $options['inetOrgPerson_telephoneNumber'][0]);\n\t\t\tfor ($i = 0; $i < sizeof($telephoneNumberList); $i++) {\n\t\t\t\tif (!get_preg($telephoneNumberList[$i], 'telephone')) {\n\t\t\t\t\t$messages[] = $this->messages['telephoneNumber'][0];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideFaxNumber')) {\n\t\t\t$facsimileTelephoneNumberList = preg_split('/;[ ]*/', $options['inetOrgPerson_facsimileTelephoneNumber'][0]);\n\t\t\tfor ($i = 0; $i < sizeof($facsimileTelephoneNumberList); $i++) {\n\t\t\t\tif (!get_preg($facsimileTelephoneNumberList[$i], 'telephone')) {\n\t\t\t\t\t$messages[] = $this->messages['facsimileTelephoneNumber'][0];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $messages;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see baseModule::getManagedAttributes()\n\t */\n\tfunction get_uploadColumns($selectedModules, &$type) {\n\t\t$return = parent::get_uploadColumns($selectedModules, $type);\n\t\t// cn and uid for upload (only if posixAccount is not selected)\n\t\tif (!$this->isUnixActive($selectedModules)) {\n\t\t\t$return[] = array(\n\t\t\t\t'name' => 'inetOrgPerson_cn',\n\t\t\t\t'description' => _('Common name'),\n\t\t\t\t'help' => 'cn',\n\t\t\t\t'example' => _('Steve Miller'),\n\t\t\t\t'default' => '{inetOrgPerson_firstName} {inetOrgPerson_lastName}'\n\t\t\t);\n\t\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideUID')) {\n\t\t\t\t$return[] = array(\n\t\t\t\t\t'name' => 'inetOrgPerson_userName',\n\t\t\t\t\t'description' => _('User name'),\n\t\t\t\t\t'help' => 'uid',\n\t\t\t\t\t'example' => _('smiller'),\n\t\t\t\t\t'unique' => true,\n\t\t\t\t\t'required' => false\n\t\t\t\t);\n\t\t\t}\n\t\t\t$return[] = array(\n\t\t\t\t'name' => 'inetOrgPerson_userPassword',\n\t\t\t\t'description' => _('Password'),\n\t\t\t\t'help' => 'userPassword',\n\t\t\t\t'example' => _('secret'),\n\t\t\t);\n\t\t}\n\t\tif (!$this->isSamba3Active() && !$this->isBooleanConfigOptionSet('inetOrgPerson_hidedisplayName', true)) {\n\t\t\t$return[] = array(\n\t\t\t\t'name' => 'inetOrgPerson_displayName',\n\t\t\t\t'description' => _('Display name'),\n\t\t\t\t'help' => 'displayName',\n\t\t\t\t'example' => _('Steve Miller'),\n\t\t\t);\n\t\t}\n\t\treturn $return;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see baseModule::build_uploadAccounts()\n\t */\n\tfunction build_uploadAccounts($rawAccounts, $ids, &$partialAccounts, $selectedModules, &$type) {\n\t\t$errors = array();\n\t\t// get list of existing users\n\t\t$existingUsers = searchLDAPByAttribute('uid', '*', 'inetOrgPerson', array('uid'), array('user'));\n\t\tfor ($e = 0; $e < sizeof($existingUsers); $e++) {\n\t\t\t$existingUsers[$e] = $existingUsers[$e]['uid'][0];\n\t\t}\n\t\t$existingMails = searchLDAPByAttribute('mail', '*', 'inetOrgPerson', array('mail'), array('user'));\n\t\tfor ($e = 0; $e < sizeof($existingMails); $e++) {\n\t\t\t$existingMails[$e] = $existingMails[$e]['mail'][0];\n\t\t}\n\t\tfor ($i = 0; $i < sizeof($rawAccounts); $i++) {\n\t\t\tif (!in_array(\"inetOrgPerson\", $partialAccounts[$i]['objectClass'])) $partialAccounts[$i]['objectClass'][] = \"inetOrgPerson\";\n\t\t\t// last name\n\t\t\tif (get_preg($rawAccounts[$i][$ids['inetOrgPerson_lastName']], 'realname')) {\n\t\t\t\t$partialAccounts[$i]['sn'] = trim($rawAccounts[$i][$ids['inetOrgPerson_lastName']]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$errMsg = $this->messages['lastname'][1];\n\t\t\t\tarray_push($errMsg, array($i));\n\t\t\t\t$errors[] = $errMsg;\n\t\t\t}\n\t\t\t// first name\n\t\t\tif ($rawAccounts[$i][$ids['inetOrgPerson_firstName']] != \"\") {\n\t\t\t\tif (get_preg($rawAccounts[$i][$ids['inetOrgPerson_firstName']], 'realname')) {\n\t\t\t\t\t$partialAccounts[$i]['givenName'] = trim($rawAccounts[$i][$ids['inetOrgPerson_firstName']]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$errMsg = $this->messages['givenName'][1];\n\t\t\t\t\tarray_push($errMsg, array($i));\n\t\t\t\t\t$errors[] = $errMsg;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!$this->isUnixActive($selectedModules)) {\n\t\t\t\t// uid\n\t\t\t\tif (isset($ids['inetOrgPerson_userName']) && !empty($rawAccounts[$i][$ids['inetOrgPerson_userName']])) {\n\t\t\t\t\tif (in_array($rawAccounts[$i][$ids['inetOrgPerson_userName']], $existingUsers)) {\n\t\t\t\t\t\t$errMsg = $this->messages['uid'][3];\n\t\t\t\t\t\tarray_push($errMsg, array($i));\n\t\t\t\t\t\t$errors[] = $errMsg;\n\t\t\t\t\t}\n\t\t\t\t\tif (get_preg($rawAccounts[$i][$ids['inetOrgPerson_userName']], 'username')) {\n\t\t\t\t\t\t$partialAccounts[$i]['uid'] = $rawAccounts[$i][$ids['inetOrgPerson_userName']];\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$errMsg = $this->messages['uid'][1];\n\t\t\t\t\t\tarray_push($errMsg, array($i));\n\t\t\t\t\t\t$errors[] = $errMsg;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// initials\n\t\t\tif (isset($ids['inetOrgPerson_initials']) && ($rawAccounts[$i][$ids['inetOrgPerson_initials']] != \"\")) {\n\t\t\t\t$partialAccounts[$i]['initials'] = preg_split('/;[ ]*/', $rawAccounts[$i][$ids['inetOrgPerson_initials']]);\n\t\t\t}\n\t\t\t// display name\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_displayName', 'displayName');\n\t\t\t// description\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_description', 'description');\n\t\t\t// title\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_title', 'title', 'title', $this->messages['title'][1], $errors, '/;[ ]*/');\n\t\t\t// employee number\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_employeeNumber', 'employeeNumber');\n\t\t\t// employee type\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_type', 'employeeType',\n\t\t\t\t'employeeType', $this->messages['employeeType'][1], $errors);\n\t\t\t// business category\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_businessCategory', 'businessCategory', 'businessCategory', $this->messages['businessCategory'][1], $errors, '/;[ ]*/');\n\t\t\t// manager\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_manager', 'manager', 'dn', $this->messages['manager'][0], $errors, '/;[ ]*/');\n\t\t\t// street\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_street', 'street', 'street', $this->messages['street'][1], $errors, '/;[ ]*/');\n\t\t\t// post office box\n\t\t\tif (isset($ids['inetOrgPerson_postOfficeBox']) && ($rawAccounts[$i][$ids['inetOrgPerson_postOfficeBox']] != \"\")) {\n\t\t\t\t$partialAccounts[$i]['postOfficeBox'] = preg_split('/;[ ]*/', $rawAccounts[$i][$ids['inetOrgPerson_postOfficeBox']]);\n\t\t\t}\n\t\t\t// room number\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_roomNumber', 'roomNumber');\n\t\t\t// departments\n\t\t\tif (isset($ids['inetOrgPerson_departmentNumber']) && ($rawAccounts[$i][$ids['inetOrgPerson_departmentNumber']] != \"\")) {\n\t\t\t\t$partialAccounts[$i]['departmentNumber'] = explode(';', $rawAccounts[$i][$ids['inetOrgPerson_departmentNumber']]);\n\t\t\t\t// remove extra spaces\n\t\t\t\t$partialAccounts[$i]['departmentNumber'] = array_map('trim', $partialAccounts[$i]['departmentNumber']);\n\t\t\t}\n\t\t\t// organisational unit\n\t\t\tif (isset($ids['inetOrgPerson_ou']) && ($rawAccounts[$i][$ids['inetOrgPerson_ou']] != \"\")) {\n\t\t\t\t$partialAccounts[$i]['ou'] = preg_split('/;[ ]*/', $rawAccounts[$i][$ids['inetOrgPerson_ou']]);\n\t\t\t}\n\t\t\t// organisation\n\t\t\tif (isset($ids['inetOrgPerson_o']) && ($rawAccounts[$i][$ids['inetOrgPerson_o']] != \"\")) {\n\t\t\t\t$partialAccounts[$i]['o'] = preg_split('/;[ ]*/', $rawAccounts[$i][$ids['inetOrgPerson_o']]);\n\t\t\t}\n\t\t\t// location\n\t\t\tif (isset($ids['inetOrgPerson_l']) && ($rawAccounts[$i][$ids['inetOrgPerson_l']] != \"\")) {\n\t\t\t\t$partialAccounts[$i]['l'] = preg_split('/;[ ]*/', $rawAccounts[$i][$ids['inetOrgPerson_l']]);\n\t\t\t}\n\t\t\t// state\n\t\t\tif (isset($ids['inetOrgPerson_st']) && ($rawAccounts[$i][$ids['inetOrgPerson_st']] != \"\")) {\n\t\t\t\t$partialAccounts[$i]['st'] = preg_split('/;[ ]*/', $rawAccounts[$i][$ids['inetOrgPerson_st']]);\n\t\t\t}\n\t\t\t// physicalDeliveryOfficeName\n\t\t\tif (isset($ids['inetOrgPerson_physicalDeliveryOfficeName']) && ($rawAccounts[$i][$ids['inetOrgPerson_physicalDeliveryOfficeName']] != \"\")) {\n\t\t\t\t$partialAccounts[$i]['physicalDeliveryOfficeName'] = preg_split('/;[ ]*/', $rawAccounts[$i][$ids['inetOrgPerson_physicalDeliveryOfficeName']]);\n\t\t\t}\n\t\t\t// carLicense\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_carLicense', 'carLicense');\n\t\t\t// postal code\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_postalCode', 'postalCode', 'postalCode', $this->messages['postalCode'][1], $errors, '/;[ ]*/');\n\t\t\t// postal address\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_address', 'postalAddress',\n\t\t\t\t'postalAddress',$this->messages['postalAddress'][1] , $errors);\n\t\t\t// registered address\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_registeredAddress', 'registeredAddress',\n\t\t\t\t'postalAddress',$this->messages['registeredAddress'][1] , $errors);\n\t\t\t// telephone\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_telephone', 'telephoneNumber', 'telephone', $this->messages['telephoneNumber'][1], $errors, '/;[ ]*/');\n\t\t\t// home telephone\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_homePhone', 'homePhone', 'telephone', $this->messages['homePhone'][1], $errors, '/;[ ]*/');\n\t\t\t// mobile\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_mobile', 'mobile', 'telephone', $this->messages['mobileTelephone'][1], $errors, '/;[ ]*/');\n\t\t\t// facsimile\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_fax', 'facsimileTelephoneNumber', 'telephone', $this->messages['facsimileNumber'][1], $errors, '/;[ ]*/');\n\t\t\t// pager\n\t\t\t$this->mapSimpleUploadField($rawAccounts, $ids, $partialAccounts, $i, 'inetOrgPerson_pager', 'pager', 'telephone', $this->messages['pager'][1], $errors, '/;[ ]*/');\n\t\t\t// eMail\n\t\t\tif (isset($ids['inetOrgPerson_email']) && ($rawAccounts[$i][$ids['inetOrgPerson_email']] != \"\")) {\n\t\t\t\t$mailList = preg_split('/;[ ]*/', trim($rawAccounts[$i][$ids['inetOrgPerson_email']]));\n\t\t\t\t$partialAccounts[$i]['mail'] = $mailList;\n\t\t\t\tfor ($x = 0; $x < sizeof($mailList); $x++) {\n\t\t\t\t\tif (!get_preg($mailList[$x], 'email')) {\n\t\t\t\t\t\t$errMsg = $this->messages['email'][1];\n\t\t\t\t\t\tarray_push($errMsg, array($i));\n\t\t\t\t\t\t$errors[] = $errMsg;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telseif (in_array($mailList[$x], $existingMails)) {\n\t\t\t\t\t\t$errMsg = $this->messages['mail'][2];\n\t\t\t\t\t\tarray_push($errMsg, array($i, $mailList[$x]));\n\t\t\t\t\t\t$errors[] = $errMsg;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isLAMProVersion() && isset($ids['inetOrgPerson_sendPasswordMail']) && ($rawAccounts[$i][$ids['inetOrgPerson_sendPasswordMail']] != \"\")) {\n\t\t\t\tif (!in_array($rawAccounts[$i][$ids['inetOrgPerson_sendPasswordMail']], array('true', 'false'))) {\n\t\t\t\t\t$errMsg = $this->messages['sendPasswordMail'][0];\n\t\t\t\t\tarray_push($errMsg, array($i));\n\t\t\t\t\t$errors[] = $errMsg;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// labeledURI\n\t\t\tif (isset($ids['inetOrgPerson_labeledURI']) && ($rawAccounts[$i][$ids['inetOrgPerson_labeledURI']] != \"\")) {\n\t\t\t\t$partialAccounts[$i]['labeledURI'] = preg_split('/;[ ]*/', trim($rawAccounts[$i][$ids['inetOrgPerson_labeledURI']]));\n\t\t\t}\n\t\t\tif (!$this->isUnixActive($selectedModules)) {\n\t\t\t\t// cn\n\t\t\t\tif ($rawAccounts[$i][$ids['inetOrgPerson_cn']] != \"\") {\n\t\t\t\t\tif (get_preg($rawAccounts[$i][$ids['inetOrgPerson_cn']], 'cn')) {\n\t\t\t\t\t\t$partialAccounts[$i]['cn'] = $rawAccounts[$i][$ids['inetOrgPerson_cn']];\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$errMsg = $this->messages['cn'][1];\n\t\t\t\t\t\tarray_push($errMsg, array($i));\n\t\t\t\t\t\t$errors[] = $errMsg;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif ($partialAccounts[$i]['givenName'] != \"\") {\n\t\t\t\t\t\t$partialAccounts[$i]['cn'] = $partialAccounts[$i]['givenName'] . \" \" . $partialAccounts[$i]['sn'];\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$partialAccounts[$i]['cn'] = $partialAccounts[$i]['sn'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// password\n\t\t\t\t// delay exop passwords\n\t\t\t\tif (!empty($this->moduleSettings['posixAccount_pwdHash'][0]) && ($this->moduleSettings['posixAccount_pwdHash'][0] === 'LDAP_EXOP')) {\n\t\t\t\t\t// changed in post action\n\t\t\t\t}\n\t\t\t\t// set SASL password\n\t\t\t\telseif (!empty($this->moduleSettings['posixAccount_pwdHash'][0]) && ($this->moduleSettings['posixAccount_pwdHash'][0] === 'SASL')) {\n\t\t\t\t\t$partialAccounts[$i]['userpassword'] = '{SASL}' . $partialAccounts[$i]['uid'];\n\t\t\t\t}\n\t\t\t\t// set K5KEY password\n\t\t\t\telseif (!empty($this->moduleSettings['posixAccount_pwdHash'][0]) && ($this->moduleSettings['posixAccount_pwdHash'][0] === 'K5KEY')) {\n\t\t\t\t\t$partialAccounts[$i]['userpassword'] = pwd_hash('x', true, $this->moduleSettings['posixAccount_pwdHash'][0]);\n\t\t\t\t}\n\t\t\t\t// set normal password\n\t\t\t\telse {\n\t\t\t\t\tif (($rawAccounts[$i][$ids['inetOrgPerson_userPassword']] != \"\") && (get_preg($rawAccounts[$i][$ids['inetOrgPerson_userPassword']], 'password'))) {\n\t\t\t\t\t\t$partialAccounts[$i]['userpassword'] = pwd_hash($rawAccounts[$i][$ids['inetOrgPerson_userPassword']], true, $this->moduleSettings['posixAccount_pwdHash'][0]);\n\t\t\t\t\t\t$partialAccounts[$i]['INFO.userPasswordClearText'] = $rawAccounts[$i][$ids['inetOrgPerson_userPassword']]; // for custom scripts etc.\n\t\t\t\t\t}\n\t\t\t\t\telseif ($rawAccounts[$i][$ids['inetOrgPerson_userPassword']] != \"\") {\n\t\t\t\t\t\t$errMsg = $this->messages['userPassword'][0];\n\t\t\t\t\t\t$errMsg[2] = str_replace('%', '%%', $errMsg[2]); // double \"%\" because of later sprintf\n\t\t\t\t\t\tarray_push($errMsg, array($i));\n\t\t\t\t\t\t$errors[] = $errMsg;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $errors;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see baseModule::doUploadPostActions()\n\t */\n\tfunction doUploadPostActions(&$data, $ids, $failed, &$temp, &$accounts, $selectedModules, $type) {\n\t\tif (!checkIfWriteAccessIsAllowed($this->get_scope())) {\n\t\t\tdie();\n\t\t}\n\t\tif (!isset($temp['counter'])) {\n\t\t\t$temp['counter'] = 0;\n\t\t}\n\t\t$errors = array();\n\t\t$dataSize = sizeof($data);\n\t\tif (($temp['counter'] < $dataSize) && !in_array($temp['counter'], $failed)) {\n\t\t\t// mail sending is LAM Pro only\n\t\t\tif (isLAMProVersion()\n\t\t\t\t&& isset($ids['inetOrgPerson_email'])\n\t\t\t\t&& ($data[$temp['counter']][$ids['inetOrgPerson_email']] != \"\")) {\n\t\t\t\tif (isset($ids['inetOrgPerson_sendPasswordMail']) && ($data[$temp['counter']][$ids['inetOrgPerson_sendPasswordMail']] == \"true\")\n\t\t\t\t\t\t&& isset($accounts[$temp['counter']]['INFO.userPasswordClearText'])) {\n\t\t\t\t\t$mailMessages = sendPasswordMail($accounts[$temp['counter']]['INFO.userPasswordClearText'], $accounts[$temp['counter']]);\n\t\t\t\t\tfor ($i = 0; $i < sizeof($mailMessages); $i++) {\n\t\t\t\t\t\tif ($mailMessages[$i][0] == 'ERROR') {\n\t\t\t\t\t\t\t$errors[] = $mailMessages[$i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// add addressbook entry\n\t\t\tif ($this->isBooleanConfigOptionSet('inetOrgPerson_addAddressbook')) {\n\t\t\t\t$attrs = array(\n\t\t\t\t\t'objectClass' => array('organizationalUnit'),\n\t\t\t\t\t'ou' => 'addressbook'\n\t\t\t\t);\n\t\t\t\t$dn = 'ou=addressbook,' . $accounts[$temp['counter']]['dn'];\n\t\t\t\t$success = @ldap_add($_SESSION['ldap']->server(), $dn, $attrs);\n\t\t\t\tif (!$success) {\n\t\t\t\t\tlogNewMessage(LOG_ERR, 'Unable to add addressbook for user ' . $accounts[$temp['counter']]['dn'] . ' (' . ldap_error($_SESSION['ldap']->server()) . ').');\n\t\t\t\t\t$messages[] = array('ERROR', sprintf(_(\"Was unable to create DN: %s.\"), htmlspecialchars($dn)), getDefaultLDAPErrorString($_SESSION['ldap']->server()));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlogNewMessage(LOG_NOTICE, 'Added addressbook for user ' . $accounts[$temp['counter']]['dn']);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// set password via exop\n\t\t\tif (!empty($this->moduleSettings['posixAccount_pwdHash'][0]) && ($this->moduleSettings['posixAccount_pwdHash'][0] === 'LDAP_EXOP')) {\n\t\t\t\tif (isset($ids['inetOrgPerson_userPassword']) && !empty($data[$temp['counter']][$ids['inetOrgPerson_userPassword']])) {\n\t\t\t\t\t$dn = $accounts[$temp['counter']]['dn'];\n\t\t\t\t\t$password = $data[$temp['counter']][$ids['inetOrgPerson_userPassword']];\n\t\t\t\t\t$success = ldap_exop_passwd($_SESSION['ldap']->server(), $dn, null, $password);\n\t\t\t\t\tif (!$success) {\n\t\t\t\t\t\t$errors[] = array(\n\t\t\t\t\t\t\t\"ERROR\",\n\t\t\t\t\t\t\t_('Unable to set password'),\n\t\t\t\t\t\t\t$dn . '<br>' . getDefaultLDAPErrorString($_SESSION['ldap']->server()),\n\t\t\t\t\t\t\tarray($temp['groups'][$temp['counter']])\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$temp['counter']++;\n\t\tif ($temp['counter'] < $dataSize) {\n\t\t\treturn array (\n\t\t\t\t'status' => 'inProgress',\n\t\t\t\t'progress' => ($temp['counter'] * 100) / $dataSize,\n\t\t\t\t'errors' => $errors\n\t\t\t);\n\t\t}\n\t\telse {\n\t\t\treturn array (\n\t\t\t\t'status' => 'finished',\n\t\t\t\t'progress' => 100,\n\t\t\t\t'errors' => $errors\n\t\t\t);\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Returns a list of self service configuration settings.\n\t *\n\t * @param selfServiceProfile $profile currently edited profile\n\t * @return htmlElement meta HTML object\n\t */\n\tpublic function getSelfServiceSettings($profile) {\n\t\t$container = new htmlResponsiveRow();\n\t\t$container->add(new htmlSubTitle(_('Photo')), 12);\n\t\t$container->add(new htmlResponsiveInputField(_('Maximum width (px)'), 'inetOrgPerson_jpegPhoto_maxWidth', null, array('crop', get_class($this))), 12);\n\t\t$container->add(new htmlResponsiveInputField(_('Maximum height (px)'), 'inetOrgPerson_jpegPhoto_maxHeight', null, array('crop', get_class($this))), 12);\n\t\t$container->add(new htmlResponsiveInputField(_('Maximum file size (kB)'), 'inetOrgPerson_jpegPhoto_maxSize'), 12);\n\t\treturn $container;\n\t}\n\n\t/**\n\t * Checks if the self service settings are valid.\n\t *\n\t * If the input data is invalid the return value is an array that contains arrays\n\t * to build StatusMessages (message type, message head, message text). If no errors\n\t * occurred the function returns an empty array.\n\t *\n\t * @param array $options hash array (option name => value) that contains the input. The option values are all arrays containing one or more elements.\n\t * @param selfServiceProfile $profile self service profile\n\t * @return array error messages\n\t */\n\tpublic function checkSelfServiceSettings(&$options, &$profile) {\n\t\t$errors = array();\n\t\tif (!empty($options['inetOrgPerson_jpegPhoto_maxWidth'][0]) && !is_numeric($options['inetOrgPerson_jpegPhoto_maxWidth'][0])) {\n\t\t\t$errors[] = array('ERROR', _('Please enter a number.'), _('Maximum width (px)'));\n\t\t}\n\t\tif (!empty($options['inetOrgPerson_jpegPhoto_maxHeight'][0]) && !is_numeric($options['inetOrgPerson_jpegPhoto_maxHeight'][0])) {\n\t\t\t$errors[] = array('ERROR', _('Please enter a number.'), _('Maximum height (px)'));\n\t\t}\n\t\tif (!empty($options['inetOrgPerson_jpegPhoto_maxSize'][0]) && !is_numeric($options['inetOrgPerson_jpegPhoto_maxSize'][0])) {\n\t\t\t$errors[] = array('ERROR', _('Please enter a number.'), _('Maximum file size (kB)'));\n\t\t}\n\t\treturn $errors;\n\t}\n\n\t/**\n\t * Returns the meta HTML code for each input field.\n\t * format: array(<field1> => array(<META HTML>), ...)\n\t * It is not possible to display help links.\n\t *\n\t * @param array $fields list of active fields\n\t * @param array $attributes attributes of LDAP account\n\t * @param boolean $passwordChangeOnly indicates that the user is only allowed to change his password and no LDAP content is readable\n\t * @param array $readOnlyFields list of read-only fields\n\t * @return array list of meta HTML elements (field name => htmlResponsiveRow)\n\t */\n\tfunction getSelfServiceOptions($fields, $attributes, $passwordChangeOnly, $readOnlyFields) {\n\t\t$return = array();\n\t\tif ($passwordChangeOnly) {\n\t\t\treturn $return; // no fields as long no LDAP content can be read\n\t\t}\n\t\tif (in_array('firstName', $fields)) {\n\t\t\t$firstName = '';\n\t\t\tif (isset($attributes['givenName'][0])) {\n\t\t\t\t$firstName = $attributes['givenName'][0];\n\t\t\t}\n\t\t\t$firstNameField = new htmlInputField('inetOrgPerson_firstName', $firstName);\n\t\t\tif (in_array('firstName', $readOnlyFields)) {\n\t\t\t\t$firstNameField = new htmlOutputText($firstName);\n\t\t\t}\n\t\t\t$return['firstName'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('firstName', _('First name'))), $firstNameField\n\t\t\t);\n\t\t}\n\t\tif (in_array('lastName', $fields)) {\n\t\t\t$lastName = '';\n\t\t\tif (isset($attributes['sn'][0])) {\n\t\t\t\t$lastName = $attributes['sn'][0];\n\t\t\t}\n\t\t\t$lastNameField = new htmlInputField('inetOrgPerson_lastName', $lastName);\n\t\t\tif (in_array('lastName', $readOnlyFields)) {\n\t\t\t\t$lastNameField = new htmlOutputText($lastName);\n\t\t\t}\n\t\t\t$return['lastName'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('lastName', _('Last name'))), $lastNameField\n\t\t\t);\n\t\t}\n\t\tif (in_array('mail', $fields)) {\n\t\t\t$mail = '';\n\t\t\tif (isset($attributes['mail'][0])) {\n\t\t\t\t$mail = $attributes['mail'][0];\n\t\t\t}\n\t\t\t$mailField = new htmlInputField('inetOrgPerson_mail', $mail);\n\t\t\tif (in_array('mail', $readOnlyFields)) {\n\t\t\t\t$mailField = new htmlOutputText($mail);\n\t\t\t}\n\t\t\t$return['mail'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('mail', _('Email address'))), $mailField\n\t\t\t);\n\t\t}\n\t\tif (in_array('labeledURI', $fields)) {\n\t\t\t$labeledURI = '';\n\t\t\tif (isset($attributes['labeledURI'][0])) {\n\t\t\t\t$labeledURI = implode('; ', $attributes['labeledURI']);\n\t\t\t}\n\t\t\t$labeledURIField = new htmlInputField('inetOrgPerson_labeledURI', $labeledURI);\n\t\t\tif (in_array('labeledURI', $readOnlyFields)) {\n\t\t\t\t$labeledURIField = new htmlOutputText($labeledURI);\n\t\t\t}\n\t\t\t$return['labeledURI'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('labeledURI', _('Web site'))), $labeledURIField\n\t\t\t);\n\t\t}\n\t\tif (in_array('telephoneNumber', $fields)) {\n\t\t\t$telephoneNumber = '';\n\t\t\tif (isset($attributes['telephoneNumber'][0])) {\n\t\t\t\t$telephoneNumber = $attributes['telephoneNumber'][0];\n\t\t\t}\n\t\t\t$telephoneNumberField = new htmlInputField('inetOrgPerson_telephoneNumber', $telephoneNumber);\n\t\t\tif (in_array('telephoneNumber', $readOnlyFields)) {\n\t\t\t\t$telephoneNumberField = new htmlOutputText($telephoneNumber);\n\t\t\t}\n\t\t\t$return['telephoneNumber'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('telephoneNumber', _('Telephone number'))), $telephoneNumberField\n\t\t\t);\n\t\t}\n\t\tif (in_array('homePhone', $fields)) {\n\t\t\t$homePhone = '';\n\t\t\tif (isset($attributes['homePhone'][0])) {\n\t\t\t\t$homePhone = $attributes['homePhone'][0];\n\t\t\t}\n\t\t\t$homePhoneField = new htmlInputField('inetOrgPerson_homePhone', $homePhone);\n\t\t\tif (in_array('homePhone', $readOnlyFields)) {\n\t\t\t\t$homePhoneField = new htmlOutputText($homePhone);\n\t\t\t}\n\t\t\t$return['homePhone'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('homePhone', _('Home telephone number'))), $homePhoneField\n\t\t\t);\n\t\t}\n\t\tif (in_array('mobile', $fields)) {\n\t\t\t$mobile = '';\n\t\t\tif (isset($attributes['mobile'][0])) {\n\t\t\t\t$mobile = $attributes['mobile'][0];\n\t\t\t}\n\t\t\t$mobileField = new htmlInputField('inetOrgPerson_mobile', $mobile);\n\t\t\tif (in_array('mobile', $readOnlyFields)) {\n\t\t\t\t$mobileField = new htmlOutputText($mobile);\n\t\t\t}\n\t\t\t$return['mobile'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('mobile', _('Mobile telephone number'))), $mobileField\n\t\t\t);\n\t\t}\n\t\tif (in_array('faxNumber', $fields)) {\n\t\t\t$faxNumber = '';\n\t\t\tif (isset($attributes['facsimileTelephoneNumber'][0])) {\n\t\t\t\t$faxNumber = $attributes['facsimileTelephoneNumber'][0];\n\t\t\t}\n\t\t\t$faxNumberField = new htmlInputField('inetOrgPerson_faxNumber', $faxNumber);\n\t\t\tif (in_array('faxNumber', $readOnlyFields)) {\n\t\t\t\t$faxNumberField = new htmlOutputText($faxNumber);\n\t\t\t}\n\t\t\t$return['faxNumber'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('faxNumber', _('Fax number'))), $faxNumberField\n\t\t\t);\n\t\t}\n\t\tif (in_array('pager', $fields)) {\n\t\t\t$pager = '';\n\t\t\tif (isset($attributes['pager'][0])) {\n\t\t\t\t$pager = $attributes['pager'][0];\n\t\t\t}\n\t\t\t$pagerField = new htmlInputField('inetOrgPerson_pager', $pager);\n\t\t\tif (in_array('pager', $readOnlyFields)) {\n\t\t\t\t$pagerField = new htmlOutputText($pager);\n\t\t\t}\n\t\t\t$return['pager'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('pager', _('Pager'))), $pagerField\n\t\t\t);\n\t\t}\n\t\tif (in_array('street', $fields)) {\n\t\t\t$street = '';\n\t\t\tif (isset($attributes['street'][0])) {\n\t\t\t\t$street = $attributes['street'][0];\n\t\t\t}\n\t\t\t$streetField = new htmlInputField('inetOrgPerson_street', $street);\n\t\t\tif (in_array('street', $readOnlyFields)) {\n\t\t\t\t$streetField = new htmlOutputText($street);\n\t\t\t}\n\t\t\t$return['street'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('street', _('Street'))), $streetField\n\t\t\t);\n\t\t}\n\t\tif (in_array('postalAddress', $fields)) {\n\t\t\t$postalAddress = '';\n\t\t\tif (isset($attributes['postalAddress'][0])) {\n\t\t\t\t$postalAddress = $attributes['postalAddress'][0];\n\t\t\t}\n\t\t\t$postalAddressField = new htmlInputField('inetOrgPerson_postalAddress', $postalAddress);\n\t\t\tif (in_array('postalAddress', $readOnlyFields)) {\n\t\t\t\t$postalAddressField = new htmlOutputText($postalAddress);\n\t\t\t}\n\t\t\t$return['postalAddress'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('postalAddress', _('Postal address'))), $postalAddressField\n\t\t\t);\n\t\t}\n\t\tif (in_array('registeredAddress', $fields)) {\n\t\t\t$registeredAddress = '';\n\t\t\tif (isset($attributes['registeredAddress'][0])) {\n\t\t\t\t$registeredAddress = $attributes['registeredAddress'][0];\n\t\t\t}\n\t\t\t$registeredAddressField = new htmlInputField('inetOrgPerson_registeredAddress', $registeredAddress);\n\t\t\tif (in_array('registeredAddress', $readOnlyFields)) {\n\t\t\t\t$registeredAddressField = new htmlOutputText($registeredAddress);\n\t\t\t}\n\t\t\t$return['registeredAddress'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText(_('Registered address')), $registeredAddressField\n\t\t\t);\n\t\t}\n\t\tif (in_array('postalCode', $fields)) {\n\t\t\t$postalCode = '';\n\t\t\tif (isset($attributes['postalCode'][0])) {\n\t\t\t\t$postalCode = $attributes['postalCode'][0];\n\t\t\t}\n\t\t\t$postalCodeField = new htmlInputField('inetOrgPerson_postalCode', $postalCode);\n\t\t\tif (in_array('postalCode', $readOnlyFields)) {\n\t\t\t\t$postalCodeField = new htmlOutputText($postalCode);\n\t\t\t}\n\t\t\t$return['postalCode'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('postalCode', _('Postal code'))), $postalCodeField\n\t\t\t);\n\t\t}\n\t\tif (in_array('postOfficeBox', $fields)) {\n\t\t\t$postOfficeBox = '';\n\t\t\tif (isset($attributes['postOfficeBox'][0])) {\n\t\t\t\t$postOfficeBox = $attributes['postOfficeBox'][0];\n\t\t\t}\n\t\t\t$postOfficeBoxField = new htmlInputField('inetOrgPerson_postOfficeBox', $postOfficeBox);\n\t\t\tif (in_array('postOfficeBox', $readOnlyFields)) {\n\t\t\t\t$postOfficeBoxField = new htmlOutputText($postOfficeBox);\n\t\t\t}\n\t\t\t$return['postOfficeBox'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('postOfficeBox', _('Post office box'))), $postOfficeBoxField\n\t\t\t);\n\t\t}\n\t\tif (in_array('roomNumber', $fields)) {\n\t\t\t$roomNumber = '';\n\t\t\tif (isset($attributes['roomNumber'][0])) {\n\t\t\t\t$roomNumber = $attributes['roomNumber'][0];\n\t\t\t}\n\t\t\t$roomNumberField = new htmlInputField('inetOrgPerson_roomNumber', $roomNumber);\n\t\t\tif (in_array('roomNumber', $readOnlyFields)) {\n\t\t\t\t$roomNumberField = new htmlOutputText($roomNumber);\n\t\t\t}\n\t\t\t$return['roomNumber'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('roomNumber', _('Room number'))), $roomNumberField\n\t\t\t);\n\t\t}\n\t\tif (in_array('location', $fields)) {\n\t\t\t$l = '';\n\t\t\tif (isset($attributes['l'][0])) {\n\t\t\t\t$l = $attributes['l'][0];\n\t\t\t}\n\t\t\t$lField = new htmlInputField('inetOrgPerson_location', $l);\n\t\t\tif (in_array('location', $readOnlyFields)) {\n\t\t\t\t$lField = new htmlOutputText($l);\n\t\t\t}\n\t\t\t$return['location'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('location', _('Location'))), $lField\n\t\t\t);\n\t\t}\n\t\tif (in_array('state', $fields)) {\n\t\t\t$st = '';\n\t\t\tif (isset($attributes['st'][0])) {\n\t\t\t\t$st = $attributes['st'][0];\n\t\t\t}\n\t\t\t$stField = new htmlInputField('inetOrgPerson_state', $st);\n\t\t\tif (in_array('state', $readOnlyFields)) {\n\t\t\t\t$stField = new htmlOutputText($st);\n\t\t\t}\n\t\t\t$return['state'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('state', _('State'))), $stField\n\t\t\t);\n\t\t}\n\t\tif (in_array('carLicense', $fields)) {\n\t\t\t$carLicense = '';\n\t\t\tif (isset($attributes['carLicense'][0])) {\n\t\t\t\t$carLicense = $attributes['carLicense'][0];\n\t\t\t}\n\t\t\t$carLicenseField = new htmlInputField('inetOrgPerson_carLicense', $carLicense);\n\t\t\tif (in_array('carLicense', $readOnlyFields)) {\n\t\t\t\t$carLicenseField = new htmlOutputText($carLicense);\n\t\t\t}\n\t\t\t$return['carLicense'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('carLicense', _('Car license'))), $carLicenseField\n\t\t\t);\n\t\t}\n\t\tif (in_array('officeName', $fields)) {\n\t\t\t$physicalDeliveryOfficeName = '';\n\t\t\tif (isset($attributes['physicalDeliveryOfficeName'][0])) {\n\t\t\t\t$physicalDeliveryOfficeName = $attributes['physicalDeliveryOfficeName'][0];\n\t\t\t}\n\t\t\t$physicalDeliveryOfficeNameField = new htmlInputField('inetOrgPerson_officeName', $physicalDeliveryOfficeName);\n\t\t\tif (in_array('officeName', $readOnlyFields)) {\n\t\t\t\t$physicalDeliveryOfficeNameField = new htmlOutputText($physicalDeliveryOfficeName);\n\t\t\t}\n\t\t\t$return['officeName'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('officeName', _('Office name'))), $physicalDeliveryOfficeNameField\n\t\t\t);\n\t\t}\n\t\tif (in_array('businessCategory', $fields)) {\n\t\t\t$businessCategory = '';\n\t\t\tif (isset($attributes['businessCategory'][0])) {\n\t\t\t\t$businessCategory = $attributes['businessCategory'][0];\n\t\t\t}\n\t\t\t$businessCategoryField = new htmlInputField('inetOrgPerson_businessCategory', $businessCategory);\n\t\t\tif (in_array('businessCategory', $readOnlyFields)) {\n\t\t\t\t$businessCategoryField = new htmlOutputText($businessCategory);\n\t\t\t}\n\t\t\t$return['businessCategory'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('businessCategory', _('Business category'))), $businessCategoryField\n\t\t\t);\n\t\t}\n\t\tif (in_array('jpegPhoto', $fields)) {\n\t\t\t$_SESSION[self::SESS_PHOTO] = null;\n\t\t\tif (isset($attributes['jpegPhoto'][0])) {\n\t\t\t\t$_SESSION[self::SESS_PHOTO] = $attributes['jpegPhoto'][0];\n\t\t\t}\n\t\t\t$readOnlyPhoto = in_array('jpegPhoto', $readOnlyFields);\n\t\t\tif (!empty($attributes['jpegPhoto'][0]) || !$readOnlyPhoto) {\n\t\t\t\t$photoSub = new htmlDiv('inetOrgPersonPhotoUploadContent', $this->getSelfServicePhoto($readOnlyPhoto, false));\n\t\t\t\t$photoRow = new htmlResponsiveRow();\n\t\t\t\t$photoRow->add($this->getSelfServicePhotoJS($readOnlyPhoto), 0);\n\t\t\t\t$photoRow->addLabel(new htmlOutputText($this->getSelfServiceLabel('jpegPhoto', _('Photo'))));\n\t\t\t\t$photoRow->addField(new htmlDiv('jpegPhotoDiv', $photoSub));\n\t\t\t\t$return['jpegPhoto'] = $photoRow;\n\t\t\t}\n\t\t}\n\t\tif (in_array('departmentNumber', $fields)) {\n\t\t\t$departmentNumber = '';\n\t\t\tif (isset($attributes['departmentNumber'][0])) {\n\t\t\t\t$departmentNumber = implode('; ', $attributes['departmentNumber']);\n\t\t\t}\n\t\t\t$departmentNumberField = new htmlInputField('inetOrgPerson_departmentNumber', $departmentNumber);\n\t\t\tif (in_array('departmentNumber', $readOnlyFields)) {\n\t\t\t\t$departmentNumberField = new htmlOutputText($departmentNumber);\n\t\t\t}\n\t\t\t$return['departmentNumber'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('departmentNumber', _('Department'))), $departmentNumberField\n\t\t\t);\n\t\t}\n\t\tif (in_array('initials', $fields)) {\n\t\t\t$initials = '';\n\t\t\tif (isset($attributes['initials'][0])) {\n\t\t\t\t$initials = implode('; ', $attributes['initials']);\n\t\t\t}\n\t\t\t$initialsField = new htmlInputField('inetOrgPerson_initials', $initials);\n\t\t\tif (in_array('initials', $readOnlyFields)) {\n\t\t\t\t$initialsField = new htmlOutputText($initials);\n\t\t\t}\n\t\t\t$return['initials'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('initials', _('Initials'))), $initialsField\n\t\t\t);\n\t\t}\n\t\tif (in_array('title', $fields)) {\n\t\t\t$title = '';\n\t\t\tif (isset($attributes['title'][0])) {\n\t\t\t\t$title = $attributes['title'][0];\n\t\t\t}\n\t\t\t$titleField = new htmlInputField('inetOrgPerson_title', $title);\n\t\t\tif (in_array('title', $readOnlyFields)) {\n\t\t\t\t$titleField = new htmlOutputText($title);\n\t\t\t}\n\t\t\t$return['title'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('title', _('Job title'))), $titleField\n\t\t\t);\n\t\t}\n\t\tif (in_array('userCertificate', $fields)) {\n\t\t\t$userCertificates = array();\n\t\t\tif (isset($attributes['userCertificate'][0])) {\n\t\t\t\t$userCertificates = $attributes['userCertificate'];\n\t\t\t}\n\t\t\telseif (isset($attributes['userCertificate;binary'][0])) {\n\t\t\t\t$userCertificates = $attributes['userCertificate;binary'];\n\t\t\t}\n\t\t\t$_SESSION[self::SESS_CERTIFICATES_LIST] = $userCertificates;\n\t\t\t$certTable = new htmlResponsiveRow();\n\t\t\t$certTable->add(new htmlDiv('userCertificateDiv', $this->getSelfServiceUserCertificates()), 12);\n\t\t\t// JavaScript functions\n\t\t\t$certTable->add($this->getSelfServiceUserCertificatesJSBlock(), 12);\n\t\t\t// upload button\n\t\t\t$uploadButtons = new htmlGroup();\n\t\t\t$uploadButtons->addElement(new htmlDiv('inetOrgPersonCertUploadId', new htmlOutputText('')), true);\n\t\t\t$certUpload = new htmlJavaScript('inetOrgPersonUploadCert(\\'inetOrgPersonCertUploadId\\');');\n\t\t\t$uploadButtons->addElement($certUpload);\n\t\t\t$certTable->add($uploadButtons, 12);\n\t\t\t// upload status\n\t\t\t$uploadStatus = new htmlDiv('inetOrgPerson_upload_status_cert', new htmlOutputText(''));\n\t\t\t$uploadStatus->setCSSClasses(array('qq-upload-list'));\n\t\t\t$certTable->add($uploadStatus, 12);\n\t\t\t$certLabel = new htmlOutputText($this->getSelfServiceLabel('userCertificate', _('User certificates')));\n\t\t\t$return['userCertificate'] = new htmlResponsiveRow($certLabel, $certTable);\n\t\t}\n\t\t// o\n\t\tif (in_array('o', $fields)) {\n\t\t\t$o = '';\n\t\t\tif (isset($attributes['o'][0])) {\n\t\t\t\t$o = $attributes['o'][0];\n\t\t\t}\n\t\t\tif (in_array('o', $readOnlyFields)) {\n\t\t\t\t$oField = new htmlOutputText(getAbstractDN($o));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$filter = '(|(objectClass=organizationalunit)(objectClass=country)(objectClass=organization)(objectClass=krbRealmContainer)(objectClass=container))';\n\t\t\t\t$suffix = $_SESSION['selfServiceProfile']->LDAPSuffix;\n\t\t\t\t$foundOs = searchLDAPPaged($_SESSION['ldapHandle'], $suffix, $filter, array('dn'), false, 0);\n\t\t\t\t$oList = array();\n\t\t\t\tforeach ($foundOs as $foundO) {\n\t\t\t\t\t$oList[] = $foundO['dn'];\n\t\t\t\t}\n\t\t\t\tif (!empty($attributes['o'][0]) && !in_array($attributes['o'][0], $oList)) {\n\t\t\t\t\t$oList[] = $attributes['o'][0];\n\t\t\t\t\tusort($oList, 'compareDN');\n\t\t\t\t}\n\t\t\t\t$oSelectionList = array('' => '');\n\t\t\t\tforeach ($oList as $singleOU) {\n\t\t\t\t\t$oSelectionList[getAbstractDN($singleOU)] = $singleOU;\n\t\t\t\t}\n\t\t\t\t$oSelectionListSelected = array();\n\t\t\t\tif (!empty($attributes['o'][0])) {\n\t\t\t\t\t$oSelectionListSelected[] = $attributes['o'][0];\n\t\t\t\t}\n\t\t\t\t$oField = new htmlSelect('inetOrgPerson_o', $oSelectionList, $oSelectionListSelected);\n\t\t\t\t$oField->setHasDescriptiveElements(true);\n\t\t\t\t$oField->setRightToLeftTextDirection(true);\n\t\t\t\t$oField->setSortElements(false);\n\t\t\t}\n\t\t\t$return['o'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('o', _('Organisation'))), $oField\n\t\t\t);\n\t\t}\n\t\t// ou\n\t\tif (in_array('ou', $fields)) {\n\t\t\t$ou = '';\n\t\t\tif (isset($attributes['ou'][0])) {\n\t\t\t\t$ou = $attributes['ou'][0];\n\t\t\t}\n\t\t\tif (in_array('ou', $readOnlyFields)) {\n\t\t\t\t$ouField = new htmlOutputText(getAbstractDN($ou));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$filter = '(|(objectClass=organizationalunit)(objectClass=country)(objectClass=organization)(objectClass=krbRealmContainer)(objectClass=container))';\n\t\t\t\t$suffix = $_SESSION['selfServiceProfile']->LDAPSuffix;\n\t\t\t\t$foundOus = searchLDAPPaged($_SESSION['ldapHandle'], $suffix, $filter, array('dn'), false, 0);\n\t\t\t\t$ouList = array();\n\t\t\t\tforeach ($foundOus as $foundOu) {\n\t\t\t\t\t$ouList[] = $foundOu['dn'];\n\t\t\t\t}\n\t\t\t\tif (!empty($attributes['ou'][0]) && !in_array($attributes['ou'][0], $ouList)) {\n\t\t\t\t\t$ouList[] = $attributes['ou'][0];\n\t\t\t\t\tusort($ouList, 'compareDN');\n\t\t\t\t}\n\t\t\t\t$ouSelectionList = array('' => '');\n\t\t\t\tforeach ($ouList as $singleOU) {\n\t\t\t\t\t$ouSelectionList[getAbstractDN($singleOU)] = $singleOU;\n\t\t\t\t}\n\t\t\t\t$ouSelectionListSelected = array();\n\t\t\t\tif (!empty($attributes['ou'][0])) {\n\t\t\t\t\t$ouSelectionListSelected[] = $attributes['ou'][0];\n\t\t\t\t}\n\t\t\t\t$ouField = new htmlSelect('inetOrgPerson_ou', $ouSelectionList, $ouSelectionListSelected);\n\t\t\t\t$ouField->setHasDescriptiveElements(true);\n\t\t\t\t$ouField->setRightToLeftTextDirection(true);\n\t\t\t\t$ouField->setSortElements(false);\n\t\t\t}\n\t\t\t$return['ou'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('ou', _('Organisational unit'))), $ouField\n\t\t\t);\n\t\t}\n\t\t// description\n\t\tif (in_array('description', $fields)) {\n\t\t\t$description = '';\n\t\t\tif (isset($attributes['description'][0])) {\n\t\t\t\t$description = $attributes['description'][0];\n\t\t\t}\n\t\t\t$descriptionField = new htmlInputField('inetOrgPerson_description', $description);\n\t\t\tif (in_array('description', $readOnlyFields)) {\n\t\t\t\t$descriptionField = new htmlOutputText($description);\n\t\t\t}\n\t\t\t$return['description'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('description', _('Description'))), $descriptionField\n\t\t\t);\n\t\t}\n\t\t// uid\n\t\tif (in_array('uid', $fields)) {\n\t\t\t$uid = '';\n\t\t\tif (isset($attributes['uid'][0])) {\n\t\t\t\t$uid = $attributes['uid'][0];\n\t\t\t}\n\t\t\t$uidField = new htmlInputField('inetOrgPerson_uid', $uid);\n\t\t\tif (in_array('uid', $readOnlyFields)) {\n\t\t\t\t$uidField = new htmlOutputText($uid);\n\t\t\t}\n\t\t\t$return['uid'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('uid', _('User name'))), $uidField\n\t\t\t);\n\t\t}\n\t\tif (in_array('displayName', $fields)) {\n\t\t\t$displayName = '';\n\t\t\tif (isset($attributes['displayName'][0])) {\n\t\t\t\t$displayName = $attributes['displayName'][0];\n\t\t\t}\n\t\t\t$displayNameField = new htmlInputField('inetOrgPerson_displayName', $displayName);\n\t\t\tif (in_array('displayName', $readOnlyFields)) {\n\t\t\t\t$displayNameField = new htmlOutputText($displayName);\n\t\t\t}\n\t\t\t$return['displayName'] = new htmlResponsiveRow(\n\t\t\t\tnew htmlOutputText($this->getSelfServiceLabel('displayName', _('Display name'))), $displayNameField\n\t\t\t);\n\t\t}\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Renders the photo area for self service.\n\t *\n\t * @param boolean $readOnly content is read-only\n\t * @param boolean $crop enable cropping\n\t * @return htmlResponsiveRow content\n\t */\n\tprivate function getSelfServicePhoto($readOnly, $crop) {\n\t\t$photo = $_SESSION[self::SESS_PHOTO];\n\t\t$row = new htmlResponsiveRow();\n\t\tif (!empty($photo)) {\n\t\t\t$jpeg_filename = 'jpegPhoto' . getRandomNumber() . '.jpg';\n\t\t\t$outjpeg = fopen(realpath('../../') . '/tmp/' . $jpeg_filename, \"wb\");\n\t\t\tfwrite($outjpeg, $photo);\n\t\t\tfclose ($outjpeg);\n\t\t\t$photoFile = '../../tmp/' . $jpeg_filename;\n\t\t\t$img = new htmlImage($photoFile);\n\t\t\t$img->setCSSClasses(array('photo'));\n\t\t\tif ($crop) {\n\t\t\t\t$img->enableCropping();\n\t\t\t}\n\t\t\t$row->add($img, 12);\n\t\t\tif (!$readOnly) {\n\t\t\t\t$row->addVerticalSpacer('0.5rem');\n\t\t\t\t$deleteButton = new htmlLink(_('Delete'), '#', '../../graphics/del.svg', true);\n\t\t\t\t$deleteButton->setOnClick('inetOrgPersonDeletePhoto(); return false;');\n\t\t\t\t$row->add($deleteButton, 12);\n\t\t\t}\n\t\t\t$row->addVerticalSpacer('0.5rem');\n\t\t}\n\t\t// upload button\n\t\t$row->add(new htmlDiv('inetOrgPersonPhotoUploadId', new htmlOutputText('')), 12);\n\t\t$row->add(new htmlJavaScript('inetOrgPersonUploadPhoto(\\'inetOrgPersonPhotoUploadId\\');'), 0);\n\t\t$uploadStatus = new htmlDiv('inetOrgPersonPhotoUploadStatus', new htmlOutputText(''));\n\t\t$uploadStatus->setCSSClasses(array('qq-upload-list'));\n\t\t$row->add($uploadStatus, 12);\n\t\t// webcam button\n\t\t$webcamContent = new htmlResponsiveRow();\n\t\t$webcamContent->addVerticalSpacer('0.5rem');\n\t\t$errorMessage = new htmlStatusMessage('ERROR', '');\n\t\t$errorMessage->setCSSClasses(array('hidden', 'lam-webcam-message'));\n\t\t$webcamContent->add($errorMessage, 12);\n\t\t$webcamContent->addVerticalSpacer('0.5rem');\n\t\t$captureButton = new htmlLink(_('Use webcam'), '#', '../../graphics/webcam.png', true);\n\t\t$captureButton->setId('btn_lam-webcam-capture');\n\t\t$captureButton->setOnClick('window.lam.tools.webcam.capture(event);');\n\t\t$webcamContent->add($captureButton, 12, 12, 12);\n\t\t$video = new htmlVideo('lam-webcam-video');\n\t\t$video->setCSSClasses(array('hidden'));\n\t\t$webcamContent->add($video, 12, 12, 12, 'text-center');\n\t\t$webcamContent->addVerticalSpacer('1rem');\n\t\t$webcamUploadButton = new htmlLink(_('Upload'), '#', '../../graphics/upload.svg', true);\n\t\t$webcamUploadButton->setId('btn-lam-webcam-upload');\n\t\t$webcamUploadButton->setCSSClasses(array('btn-lam-webcam-upload', 'hidden'));\n\t\t$webcamUploadButton->setOnClick('window.lam.tools.webcam.uploadSelfService(event, \"' . getSecurityTokenName()\n\t\t\t.  '\", \"' . getSecurityTokenValue() . '\", \"inetOrgPerson\", \"user\", \"' . _('File upload failed!') . '\", \"inetOrgPersonPhotoUploadContent\");');\n\t\t$webcamContent->add($webcamUploadButton, 12, 12, 12);\n\t\t$canvas = new htmlCanvas('lam-webcam-canvas');\n\t\t$canvas->setCSSClasses(array('hidden'));\n\t\t$webcamContent->add($canvas, 12);\n\t\t$webcamDiv = new htmlDiv('lam_webcam_div', $webcamContent, array('hidden'));\n\t\t$webcamContent->addVerticalSpacer('1rem');\n\t\t$row->add($webcamDiv, 12);\n\t\treturn $row;\n\t}\n\n\t/**\n\t * Returns the Java Script functions to manage the photo.\n\t *\n\t * @param boolean $readOnly content is read-only\n\t * @return htmlJavaScript JS block\n\t */\n\tprivate static function getSelfServicePhotoJS($readOnly) {\n\t\tif ($readOnly) {\n\t\t\treturn new htmlGroup();\n\t\t}\n\t\t$content = '\n\t\t\t\tfunction inetOrgPersonUploadPhoto(elementID) {\n\t\t\t\tvar uploadStatus = document.getElementById(\\'inetOrgPersonPhotoUploadStatus\\');\n\t\t\t\tvar params = { action: \\'ajaxPhotoUpload\\' };\n\t\t\t\tparams[\"' . getSecurityTokenName() . '\"] = \"' . getSecurityTokenValue() . '\";\n\t\t\t\tvar uploader = new qq.FineUploader({\n\t\t\t\t\telement: document.getElementById(elementID),\n\t\t\t\t\tlistElement: uploadStatus,\n\t\t\t\t\trequest: {\n\t\t\t\t\t\tendpoint: \\'../misc/ajax.php?selfservice=1&module=inetOrgPerson&scope=user'\n\t\t\t\t\t\t . '&' . getSecurityTokenName() . '=' . getSecurityTokenValue() . '\\',\n\t\t\t\t\t\tforceMultipart: true,\n\t\t\t\t\t\tparams: params\n\t\t\t\t\t},\n\t\t\t\t\tmultiple: false,\n\t\t\t\t\tcallbacks: {\n\t\t\t\t\t\tonComplete: function(id, fileName, data) {\n\t\t\t\t\t\t\tif (data.success) {\n\t\t\t\t\t\t\t\tif (data.html) {\n\t\t\t\t\t\t\t\t\tjQuery(\\'#inetOrgPersonPhotoUploadContent\\').html(data.html);\n\t\t\t\t\t\t\t\t\twindow.lam.tools.webcam.init();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\talert(data.error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfunction inetOrgPersonDeletePhoto(id) {\n\t\t\t\tvar actionJSON = {\n\t\t\t\t\t\"action\": \"deletePhoto\",\n\t\t\t\t\t\"id\": id\n\t\t\t\t};\n\t\t\t\tvar data = {jsonInput: actionJSON};\n\t\t\t\tdata[\"' . getSecurityTokenName() . '\"] = \"' . getSecurityTokenValue() . '\";\n\t\t\t\tjQuery.post(\\'../misc/ajax.php?selfservice=1&module=inetOrgPerson&scope=user\\',\n\t\t\t\t\t\tdata, function(data) {inetOrgPersonDeletePhotoHandleReply(data);}, \\'json\\');\n\t\t\t}\n\n\t\t\tfunction inetOrgPersonDeletePhotoHandleReply(data) {\n\t\t\t\tif (data.errorsOccurred == \"false\") {\n\t\t\t\t\tjQuery(\\'#inetOrgPersonPhotoUploadContent\\').html(data.html);\n\t\t\t\t\twindow.lam.tools.webcam.init();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\talert(data.errormessage);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\t';\n\t\treturn new htmlJavaScript($content);\n\t}\n\n\n\t/**\n\t * Returns the meta HTML code to display the certificate area.\n\t * This also includes the file upload.\n\t *\n\t * @return htmlTable certificate content\n\t */\n\tprivate function getSelfServiceUserCertificates() {\n\t\t$userCertificates = $_SESSION[self::SESS_CERTIFICATES_LIST];\n\t\t$content = new htmlGroup();\n\t\tif (sizeof($userCertificates) > 0) {\n\t\t\t$certTable = new htmlResponsiveRow();\n\t\t\tfor ($i = 0; $i < sizeof($userCertificates); $i++) {\n\t\t\t\t$group = new htmlGroup();\n\t\t\t\t$filename = 'userCertificate' . getRandomNumber() . '.der';\n\t\t\t\t$out = @fopen(dirname(__FILE__) . '/../../tmp/' . $filename, \"wb\");\n\t\t\t\tfwrite($out, $userCertificates[$i]);\n\t\t\t\tfclose ($out);\n\t\t\t\t$path = '../../tmp/' . $filename;\n\t\t\t\t$pem = @chunk_split(@base64_encode($userCertificates[$i]), 64, \"\\n\");\n\t\t\t\tif (!empty($pem)) {\n\t\t\t\t\t$pem = \"-----BEGIN CERTIFICATE-----\\n\" . $pem . \"-----END CERTIFICATE-----\\n\";\n\t\t\t\t\t$pemData = @openssl_x509_parse($pem);\n\t\t\t\t\t$data = array();\n\t\t\t\t\tif (isset($pemData['serialNumber'])) {\n\t\t\t\t\t\t$data[] = $pemData['serialNumber'];\n\t\t\t\t\t}\n\t\t\t\t\tif (isset($pemData['name'])) {\n\t\t\t\t\t\t$data[] = $pemData['name'];\n\t\t\t\t\t}\n\t\t\t\t\tif (sizeof($data) > 0) {\n\t\t\t\t\t\t$group->addElement(new htmlOutputText(implode(': ', $data)));\n\t\t\t\t\t\t$group->addElement(new htmlSpacer('5px', null));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$saveLink = new htmlLink('', $path, '../../graphics/save.svg');\n\t\t\t\t$saveLink->setTitle(_('Save'));\n\t\t\t\t$saveLink->setTargetWindow('_blank');\n\t\t\t\t$saveLink->setCSSClasses(array('icon'));\n\t\t\t\t$group->addElement($saveLink);\n\t\t\t\t$delLink = new htmlLink('', '#', '../../graphics/del.svg');\n\t\t\t\t$delLink->setTitle(_('Delete'));\n\t\t\t\t$delLink->setOnClick('inetOrgPersonDeleteCertificate(' . $i . '); return false;');\n\t\t\t\t$delLink->setCSSClasses(array('icon'));\n\t\t\t\t$group->addElement($delLink);\n\t\t\t\t$certTable->add($group, 12);\n\t\t\t}\n\t\t\t$content->addElement($certTable);\n\t\t}\n\t\treturn $content;\n\t}\n\n\t/**\n\t * Returns the Java Script functions to manage the certificates.\n\t *\n\t * @return htmlJavaScript JS block\n\t */\n\tprivate static function getSelfServiceUserCertificatesJSBlock() {\n\t\t$content = '\n\t\t\tfunction inetOrgPersonDeleteCertificate(id) {\n\t\t\t\tvar actionJSON = {\n\t\t\t\t\t\"action\": \"deleteCert\",\n\t\t\t\t\t\"id\": id\n\t\t\t\t};\n\t\t\t\tvar data = {jsonInput: actionJSON};\n\t\t\t\tdata[\"' . getSecurityTokenName() . '\"] = \"' . getSecurityTokenValue() . '\";\n\t\t\t\tjQuery.post(\\'../misc/ajax.php?selfservice=1&module=inetOrgPerson&scope=user\\',\n\t\t\t\t\t\tdata, function(data) {inetOrgPersonDeleteCertificateHandleReply(data);}, \\'json\\');\n\t\t\t}\n\n\t\t\tfunction inetOrgPersonDeleteCertificateHandleReply(data) {\n\t\t\t\tif (data.errorsOccurred == \"false\") {\n\t\t\t\t\tjQuery(\\'#userCertificateDiv\\').html(data.html);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\talert(data.errormessage);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction inetOrgPersonUploadCert(elementID) {\n\t\t\t\tvar uploadStatus = document.getElementById(\\'inetOrgPerson_upload_status_cert\\');\n\t\t\t\tvar params = { action: \\'ajaxCertUpload\\' };\n\t\t\t\tparams[\"' . getSecurityTokenName() . '\"] = \"' . getSecurityTokenValue() . '\";\n\t\t\t\tvar uploader = new qq.FineUploader({\n\t\t\t\t\telement: document.getElementById(elementID),\n\t\t\t\t\tlistElement: uploadStatus,\n\t\t\t\t\trequest: {\n\t\t\t\t\t\tendpoint: \\'../misc/ajax.php?selfservice=1&module=inetOrgPerson&scope=user'\n\t\t\t\t\t\t . '&' . getSecurityTokenName() . '=' . getSecurityTokenValue() . '\\',\n\t\t\t\t\t\tforceMultipart: true,\n\t\t\t\t\t\tparams: params\n\t\t\t\t\t},\n\t\t\t\t\tmultiple: false,\n\t\t\t\t\tcallbacks: {\n\t\t\t\t\t\tonComplete: function(id, fileName, data) {\n\t\t\t\t\t\t\tif (data.success) {\n\t\t\t\t\t\t\t\tif (data.html) {\n\t\t\t\t\t\t\t\t\tjQuery(\\'#userCertificateDiv\\').html(data.html);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\talert(data.error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t';\n\t\treturn new htmlJavaScript($content);\n\t}\n\n\t/**\n\t * Checks if all input values are correct and returns the LDAP attributes which should be changed.\n\t * <br>Return values:\n\t * <br>messages: array of parameters to create status messages\n\t * <br>add: array of attributes to add\n\t * <br>del: array of attributes to remove\n\t * <br>mod: array of attributes to modify\n\t * <br>info: array of values with informational value (e.g. to be used later by pre/postModify actions)\n\t *\n\t * Calling this method does not require the existence of an enclosing {@link accountContainer}.\n\t *\n\t * @param string $fields input fields\n\t * @param array $attributes LDAP attributes\n\t * @param boolean $passwordChangeOnly indicates that the user is only allowed to change his password and no LDAP content is readable\n\t * @param array $readOnlyFields list of read-only fields\n\t * @return array messages and attributes (array('messages' => array(), 'add' => array('mail' => array('test@test.com')), 'del' => array(), 'mod' => array(), 'info' => array()))\n\t */\n\tfunction checkSelfServiceOptions($fields, $attributes, $passwordChangeOnly, $readOnlyFields) {\n\t\t$return = array('messages' => array(), 'add' => array(), 'del' => array(), 'mod' => array(), 'info' => array());\n\t\tif ($passwordChangeOnly) {\n\t\t\treturn $return; // skip processing if only a password change is done\n\t\t}\n\t\t$attributeNames = array(); // list of attributes which should be checked for modification\n\t\t$attributesNew = $attributes;\n\t\t// first name\n\t\tif (in_array('firstName', $fields) && !in_array('firstName', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'givenName';\n\t\t\tif (isset($_POST['inetOrgPerson_firstName']) && ($_POST['inetOrgPerson_firstName'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_firstName'], 'realname')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['givenName'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['givenName'][0] = $_POST['inetOrgPerson_firstName'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (isset($attributes['givenName'])) {\n\t\t\t\tunset($attributesNew['givenName']);\n\t\t\t}\n\t\t}\n\t\t// last name\n\t\tif (in_array('lastName', $fields) && !in_array('lastName', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'sn';\n\t\t\tif (isset($_POST['inetOrgPerson_lastName']) && ($_POST['inetOrgPerson_lastName'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_lastName'], 'realname')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['lastname'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['sn'][0] = $_POST['inetOrgPerson_lastName'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// last name is required attribute\n\t\t\t\t$return['messages'][] = $this->messages['lastname'][0];\n\t\t\t}\n\t\t}\n\t\t// email\n\t\tif (in_array('mail', $fields) && !in_array('mail', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'mail';\n\t\t\tif (isset($_POST['inetOrgPerson_mail']) && ($_POST['inetOrgPerson_mail'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_mail'], 'email')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['email'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['mail'][0] = $_POST['inetOrgPerson_mail'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (isset($attributes['mail'])) {\n\t\t\t\tunset($attributesNew['mail']);\n\t\t\t}\n\t\t}\n\t\t// labeledURI\n\t\tif (in_array('labeledURI', $fields) && !in_array('labeledURI', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'labeledURI';\n\t\t\tif (isset($_POST['inetOrgPerson_labeledURI']) && ($_POST['inetOrgPerson_labeledURI'] != '')) {\n\t\t\t\t$attributesNew['labeledURI'] = preg_split('/;[ ]*/', $_POST['inetOrgPerson_labeledURI']);\n\t\t\t}\n\t\t\telseif (isset($attributes['labeledURI'])) {\n\t\t\t\tunset($attributesNew['labeledURI']);\n\t\t\t}\n\t\t}\n\t\t// telephone number\n\t\tif (in_array('telephoneNumber', $fields) && !in_array('telephoneNumber', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'telephoneNumber';\n\t\t\tif (isset($_POST['inetOrgPerson_telephoneNumber']) && ($_POST['inetOrgPerson_telephoneNumber'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_telephoneNumber'], 'telephone')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['telephoneNumber'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['telephoneNumber'][0] = $_POST['inetOrgPerson_telephoneNumber'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (isset($attributes['telephoneNumber'])) {\n\t\t\t\tunset($attributesNew['telephoneNumber']);\n\t\t\t}\n\t\t}\n\t\t// home telephone number\n\t\tif (in_array('homePhone', $fields) && !in_array('homePhone', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'homePhone';\n\t\t\tif (isset($_POST['inetOrgPerson_homePhone']) && ($_POST['inetOrgPerson_homePhone'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_homePhone'], 'telephone')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['homePhone'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['homePhone'][0] = $_POST['inetOrgPerson_homePhone'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (isset($attributes['homePhone'])) {\n\t\t\t\tunset($attributesNew['homePhone']);\n\t\t\t}\n\t\t}\n\t\t// fax number\n\t\tif (in_array('faxNumber', $fields) && !in_array('faxNumber', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'facsimileTelephoneNumber';\n\t\t\tif (isset($_POST['inetOrgPerson_faxNumber']) && ($_POST['inetOrgPerson_faxNumber'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_faxNumber'], 'telephone')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['facsimileNumber'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['facsimileTelephoneNumber'][0] = $_POST['inetOrgPerson_faxNumber'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (isset($attributes['facsimileTelephoneNumber'])) {\n\t\t\t\t$attributesNew['facsimileTelephoneNumber'] = array();\n\t\t\t}\n\t\t}\n\t\t// mobile telephone number\n\t\tif (in_array('mobile', $fields) && !in_array('mobile', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'mobile';\n\t\t\tif (isset($_POST['inetOrgPerson_mobile']) && ($_POST['inetOrgPerson_mobile'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_mobile'], 'telephone')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['mobileTelephone'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['mobile'][0] = $_POST['inetOrgPerson_mobile'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (isset($attributes['mobile'])) {\n\t\t\t\tunset($attributesNew['mobile']);\n\t\t\t}\n\t\t}\n\t\t// pager\n\t\tif (in_array('pager', $fields) && !in_array('pager', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'pager';\n\t\t\tif (isset($_POST['inetOrgPerson_pager']) && ($_POST['inetOrgPerson_pager'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_pager'], 'telephone')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['pager'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['pager'][0] = $_POST['inetOrgPerson_pager'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (isset($attributes['pager'])) {\n\t\t\t\tunset($attributesNew['pager']);\n\t\t\t}\n\t\t}\n\t\t// street\n\t\tif (in_array('street', $fields) && !in_array('street', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'street';\n\t\t\tif (isset($_POST['inetOrgPerson_street']) && ($_POST['inetOrgPerson_street'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_street'], 'street')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['street'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['street'][0] = $_POST['inetOrgPerson_street'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (isset($attributes['street'])) {\n\t\t\t\tunset($attributesNew['street']);\n\t\t\t}\n\t\t}\n\t\t// postal address\n\t\tif (in_array('postalAddress', $fields) && !in_array('postalAddress', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'postalAddress';\n\t\t\tif (isset($_POST['inetOrgPerson_postalAddress']) && ($_POST['inetOrgPerson_postalAddress'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_postalAddress'], 'postalAddress')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['postalAddress'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['postalAddress'][0] = $_POST['inetOrgPerson_postalAddress'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (isset($attributes['postalAddress'])) {\n\t\t\t\t$attributesNew['postalAddress'] = array();\n\t\t\t}\n\t\t}\n\t\t// registered address\n\t\tif (in_array('registeredAddress', $fields) && !in_array('registeredAddress', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'registeredAddress';\n\t\t\tif (isset($_POST['inetOrgPerson_registeredAddress']) && ($_POST['inetOrgPerson_registeredAddress'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_registeredAddress'], 'postalAddress')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['registeredAddress'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['registeredAddress'][0] = $_POST['inetOrgPerson_registeredAddress'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (isset($attributes['registeredAddress'])) {\n\t\t\t\t$attributesNew['registeredAddress'] = array();\n\t\t\t}\n\t\t}\n\t\t// postal code\n\t\tif (in_array('postalCode', $fields) && !in_array('postalCode', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'postalCode';\n\t\t\tif (isset($_POST['inetOrgPerson_postalCode']) && ($_POST['inetOrgPerson_postalCode'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_postalCode'], 'postalCode')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['postalCode'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['postalCode'][0] = $_POST['inetOrgPerson_postalCode'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (isset($attributes['postalCode'])) {\n\t\t\t\tunset($attributesNew['postalCode']);\n\t\t\t}\n\t\t}\n\t\t// post office box\n\t\tif (in_array('postOfficeBox', $fields) && !in_array('postOfficeBox', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'postOfficeBox';\n\t\t\tif (isset($_POST['inetOrgPerson_postOfficeBox']) && ($_POST['inetOrgPerson_postOfficeBox'] != '')) {\n\t\t\t\t$attributesNew['postOfficeBox'][0] = $_POST['inetOrgPerson_postOfficeBox'];\n\t\t\t}\n\t\t\telseif (isset($attributes['postOfficeBox'])) {\n\t\t\t\tunset($attributesNew['postOfficeBox']);\n\t\t\t}\n\t\t}\n\t\t// room number\n\t\tif (in_array('roomNumber', $fields) && !in_array('roomNumber', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'roomNumber';\n\t\t\tif (isset($_POST['inetOrgPerson_roomNumber']) && ($_POST['inetOrgPerson_roomNumber'] != '')) {\n\t\t\t\t$attributesNew['roomNumber'][0] = $_POST['inetOrgPerson_roomNumber'];\n\t\t\t}\n\t\t\telseif (isset($attributes['roomNumber'])) {\n\t\t\t\tunset($attributesNew['roomNumber']);\n\t\t\t}\n\t\t}\n\t\t// l\n\t\tif (in_array('location', $fields) && !in_array('location', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'l';\n\t\t\tif (isset($_POST['inetOrgPerson_location']) && ($_POST['inetOrgPerson_location'] != '')) {\n\t\t\t\t$attributesNew['l'][0] = $_POST['inetOrgPerson_location'];\n\t\t\t}\n\t\t\telseif (isset($attributes['l'])) {\n\t\t\t\tunset($attributesNew['l']);\n\t\t\t}\n\t\t}\n\t\t// st\n\t\tif (in_array('state', $fields) && !in_array('state', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'st';\n\t\t\tif (isset($_POST['inetOrgPerson_state']) && ($_POST['inetOrgPerson_state'] != '')) {\n\t\t\t\t$attributesNew['st'][0] = $_POST['inetOrgPerson_state'];\n\t\t\t}\n\t\t\telseif (isset($attributes['st'])) {\n\t\t\t\tunset($attributesNew['st']);\n\t\t\t}\n\t\t}\n\t\t// car license\n\t\tif (in_array('carLicense', $fields) && !in_array('carLicense', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'carLicense';\n\t\t\tif (isset($_POST['inetOrgPerson_carLicense']) && ($_POST['inetOrgPerson_carLicense'] != '')) {\n\t\t\t\t$attributesNew['carLicense'][0] = $_POST['inetOrgPerson_carLicense'];\n\t\t\t}\n\t\t\telseif (isset($attributes['carLicense'])) {\n\t\t\t\tunset($attributesNew['carLicense']);\n\t\t\t}\n\t\t}\n\t\t// office name\n\t\tif (in_array('officeName', $fields) && !in_array('officeName', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'physicalDeliveryOfficeName';\n\t\t\tif (isset($_POST['inetOrgPerson_officeName']) && ($_POST['inetOrgPerson_officeName'] != '')) {\n\t\t\t\t$attributesNew['physicalDeliveryOfficeName'][0] = $_POST['inetOrgPerson_officeName'];\n\t\t\t}\n\t\t\telseif (isset($attributes['physicalDeliveryOfficeName'])) {\n\t\t\t\tunset($attributesNew['physicalDeliveryOfficeName']);\n\t\t\t}\n\t\t}\n\t\t// business category\n\t\tif (in_array('businessCategory', $fields) && !in_array('businessCategory', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'businessCategory';\n\t\t\tif (isset($_POST['inetOrgPerson_businessCategory']) && ($_POST['inetOrgPerson_businessCategory'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_businessCategory'], 'businessCategory')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['businessCategory'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['businessCategory'][0] = $_POST['inetOrgPerson_businessCategory'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (isset($attributes['businessCategory'])) {\n\t\t\t\tunset($attributesNew['businessCategory']);\n\t\t\t}\n\t\t}\n\t\t// photo\n\t\tif (in_array('jpegPhoto', $fields) && !in_array('jpegPhoto', $readOnlyFields)) {\n\t\t\t$data = $_SESSION[self::SESS_PHOTO];\n\t\t\t// remove photo\n\t\t\tif (!empty($attributes['jpegPhoto'][0]) && empty($data)) {\n\t\t\t\t$return['mod']['jpegPhoto'] = array();\n\t\t\t}\n\t\t\t// set/replace photo\n\t\t\telseif (!empty($data) && (empty($attributes['jpegPhoto'][0]) || ($data != $attributes['jpegPhoto'][0]))) {\n\t\t\t\t$moduleSettings = $this->selfServiceSettings->moduleSettings;\n\t\t\t\ttry {\n\t\t\t\t\tinclude_once dirname(__FILE__) . '/../imageutils.inc';\n\t\t\t\t\t$imageManipulator = ImageManipulationFactory::getImageManipulator($data);\n\t\t\t\t\t$imageManipulator->crop($_POST['croppingDataX'], $_POST['croppingDataY'], $_POST['croppingDataWidth'], $_POST['croppingDataHeight']);\n\t\t\t\t\t$data = $imageManipulator->getImageData();\n\t\t\t\t\t$data = inetOrgPerson::resizeAndConvertImage($data, $moduleSettings);\n\t\t\t\t\tif (!empty($moduleSettings['inetOrgPerson_jpegPhoto_maxSize'][0]) && ($moduleSettings['inetOrgPerson_jpegPhoto_maxSize'][0] < (strlen($data) / 1024))) {\n\t\t\t\t\t\t$msg =  $this->messages['file'][3];\n\t\t\t\t\t\t$msg[] = null;\n\t\t\t\t\t\t$msg[] = htmlspecialchars($moduleSettings['inetOrgPerson_jpegPhoto_maxSize'][0]);\n\t\t\t\t\t\t$return['messages'][] = $msg;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (!empty($attributes['jpegPhoto'][0])) {\n\t\t\t\t\t\t\t$return['mod']['jpegPhoto'][0] = $data;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t$return['add']['jpegPhoto'][0] = $data;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (Exception $e) {\n\t\t\t\t\t$msg =  $this->messages['file'][2];\n\t\t\t\t\t$msg[] = htmlspecialchars($e->getMessage());\n\t\t\t\t\t$return['messages'][] = $msg;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// departments\n\t\tif (in_array('departmentNumber', $fields) && !in_array('departmentNumber', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'departmentNumber';\n\t\t\tif (isset($_POST['inetOrgPerson_departmentNumber']) && ($_POST['inetOrgPerson_departmentNumber'] != '')) {\n\t\t\t\t$attributesNew['departmentNumber'] = preg_split('/;[ ]*/', $_POST['inetOrgPerson_departmentNumber']);\n\t\t\t}\n\t\t\telseif (isset($attributes['departmentNumber'])) {\n\t\t\t\tunset($attributesNew['departmentNumber']);\n\t\t\t}\n\t\t}\n\t\t// initials\n\t\tif (in_array('initials', $fields) && !in_array('initials', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'initials';\n\t\t\tif (isset($_POST['inetOrgPerson_initials']) && ($_POST['inetOrgPerson_initials'] != '')) {\n\t\t\t\t$attributesNew['initials'] = preg_split('/;[ ]*/', $_POST['inetOrgPerson_initials']);\n\t\t\t}\n\t\t\telseif (isset($attributes['initials'])) {\n\t\t\t\tunset($attributesNew['initials']);\n\t\t\t}\n\t\t}\n\t\t// title\n\t\tif (in_array('title', $fields) && !in_array('title', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'title';\n\t\t\tif (isset($_POST['inetOrgPerson_title']) && ($_POST['inetOrgPerson_title'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_title'], 'title')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['title'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['title'][0] = $_POST['inetOrgPerson_title'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (isset($attributes['title'])) {\n\t\t\t\tunset($attributesNew['title']);\n\t\t\t}\n\t\t}\n\t\t// user certificates\n\t\tif (in_array('userCertificate', $fields)) {\n\t\t\t$userCertificates = $_SESSION[inetOrgPerson::SESS_CERTIFICATES_LIST];\n\t\t\t$userCertificatesAttrName = 'userCertificate;binary';\n\t\t\tif (isset($attributes['userCertificate'])) {\n\t\t\t\t$userCertificatesAttrName = 'userCertificate';\n\t\t\t}\n\t\t\t$attributeNames[] = $userCertificatesAttrName;\n\t\t\tif (sizeof($userCertificates) > 0) {\n\t\t\t\t$attributesNew[$userCertificatesAttrName] = $userCertificates;\n\t\t\t}\n\t\t\telseif (isset($attributesNew[$userCertificatesAttrName])) {\n\t\t\t\tunset($attributesNew[$userCertificatesAttrName]);\n\t\t\t}\n\t\t}\n\t\t// description\n\t\tif (in_array('description', $fields) && !in_array('description', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'description';\n\t\t\tif (!empty($_POST['inetOrgPerson_description'])) {\n\t\t\t\t$attributesNew['description'][0] = $_POST['inetOrgPerson_description'];\n\t\t\t}\n\t\t\telseif (isset($attributes['description'])) {\n\t\t\t\tunset($attributesNew['description']);\n\t\t\t}\n\t\t}\n\t\t// ou\n\t\tif (in_array('ou', $fields) && !in_array('ou', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'ou';\n\t\t\tif (!empty($_POST['inetOrgPerson_ou'])) {\n\t\t\t\t$attributesNew['ou'][0] = $_POST['inetOrgPerson_ou'];\n\t\t\t}\n\t\t\telseif (isset($attributes['ou'])) {\n\t\t\t\tunset($attributesNew['ou']);\n\t\t\t}\n\t\t}\n\t\t// o\n\t\tif (in_array('o', $fields) && !in_array('o', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'o';\n\t\t\tif (!empty($_POST['inetOrgPerson_o'])) {\n\t\t\t\t$attributesNew['o'][0] = $_POST['inetOrgPerson_o'];\n\t\t\t}\n\t\t\telseif (isset($attributes['o'])) {\n\t\t\t\tunset($attributesNew['o']);\n\t\t\t}\n\t\t}\n\t\t// uid\n\t\tif (in_array('uid', $fields) && !in_array('uid', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'uid';\n\t\t\tif (isset($_POST['inetOrgPerson_uid']) && ($_POST['inetOrgPerson_uid'] != '')) {\n\t\t\t\tif (!get_preg($_POST['inetOrgPerson_uid'], 'username')) {\n\t\t\t\t\t$return['messages'][] = $this->messages['uid'][0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$attributesNew['uid'][0] = $_POST['inetOrgPerson_uid'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (isset($attributes['uid'])) {\n\t\t\t\tunset($attributesNew['uid']);\n\t\t\t}\n\t\t}\n\t\t// display name\n\t\tif (in_array('displayName', $fields) && !in_array('displayName', $readOnlyFields)) {\n\t\t\t$attributeNames[] = 'displayName';\n\t\t\tif (!empty($_POST['inetOrgPerson_displayName'])) {\n\t\t\t\t$attributesNew['displayName'][0] = $_POST['inetOrgPerson_displayName'];\n\t\t\t}\n\t\t\telseif (isset($attributes['displayName'])) {\n\t\t\t\tunset($attributesNew['displayName']);\n\t\t\t}\n\t\t}\n\t\t// find differences\n\t\tfor ($i = 0; $i < sizeof($attributeNames); $i++) {\n\t\t\t$attrName = $attributeNames[$i];\n\t\t\tif (isset($attributes[$attrName]) && !isset($attributesNew[$attrName])) $return['del'][$attrName] = $attributes[$attrName];\n\t\t\telseif (!isset($attributes[$attrName]) && isset($attributesNew[$attrName])) $return['add'][$attrName] = $attributesNew[$attrName];\n\t\t\telse {\n\t\t\t\tif (isset($attributes[$attrName])) {\n\t\t\t\t\tfor ($a = 0; $a < sizeof($attributes[$attrName]); $a++) {\n\t\t\t\t\t\tif (!in_array($attributes[$attrName][$a], $attributesNew[$attrName])) {\n\t\t\t\t\t\t\t$return['mod'][$attrName] = $attributesNew[$attrName];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isset($attributesNew[$attrName])) {\n\t\t\t\t\tfor ($a = 0; $a < sizeof($attributesNew[$attrName]); $a++) {\n\t\t\t\t\t\tif (!in_array($attributesNew[$attrName][$a], $attributes[$attrName])) {\n\t\t\t\t\t\t\t$return['mod'][$attrName] = $attributesNew[$attrName];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Resizes the given image data to the settings provided.\n\t *\n\t * @param array $data binary image data\n\t * @param array $settings settings\n\t * @return array binary image data\n\t */\n\tprivate static function resizeAndConvertImage($data, $settings) {\n\t\tinclude_once dirname(__FILE__) . '/../imageutils.inc';\n\t\t$imageManipulator = ImageManipulationFactory::getImageManipulator($data);\n\t\t// resize if maximum values specified\n\t\tif (!empty($settings['inetOrgPerson_jpegPhoto_maxWidth'][0]) || !empty($settings['inetOrgPerson_jpegPhoto_maxHeight'][0])) {\n\t\t\t$maxWidth = empty($settings['inetOrgPerson_jpegPhoto_maxWidth'][0]) ? $imageManipulator->getWidth() : $settings['inetOrgPerson_jpegPhoto_maxWidth'][0];\n\t\t\t$maxHeight = empty($settings['inetOrgPerson_jpegPhoto_maxHeight'][0]) ? $imageManipulator->getHeight() : $settings['inetOrgPerson_jpegPhoto_maxHeight'][0];\n\t\t\t$imageManipulator->thumbnail($maxWidth, $maxHeight);\n\t\t}\n\t\t$imageManipulator->convertToJpeg();\n\t\treturn $imageManipulator->getImageData();\n\t}\n\n\t/**\n\t * Manages AJAX requests.\n\t * This function may be called with or without an account container.\n\t */\n\tpublic function handleAjaxRequest() {\n\t\t// AJAX uploads are non-JSON\n\t\tif (isset($_GET['action']) && ($_GET['action'] == 'ajaxCertUpload')) {\n\t\t\t$this->ajaxUploadCert();\n\t\t\treturn;\n\t\t}\n\t\tif (isset($_GET['action']) && ($_GET['action'] == 'ajaxPhotoUpload')) {\n\t\t\t$this->ajaxUploadPhoto();\n\t\t\treturn;\n\t\t}\n\t\t$jsonInput = $_POST['jsonInput'];\n\t\t$jsonReturn = self::invalidAjaxRequest();\n\t\tif (isset($jsonInput['action'])) {\n\t\t\tif ($jsonInput['action'] == 'deleteCert') {\n\t\t\t\t$jsonReturn = $this->ajaxDeleteSelfServiceUserCertificate($jsonInput);\n\t\t\t}\n\t\t\telseif ($jsonInput['action'] == 'deletePhoto') {\n\t\t\t\t$jsonReturn = $this->ajaxDeleteSelfServicePhoto($jsonInput);\n\t\t\t}\n\t\t}\n\t\techo json_encode($jsonReturn);\n\t}\n\n\t/**\n\t * Handles an AJAX certificate file upload and prints the JSON result.\n\t */\n\tprivate function ajaxUploadCert() {\n\t\t$result = array('success' => true);\n\t\tif (!isset($_FILES['qqfile']) || ($_FILES['qqfile']['size'] < 100)) {\n\t\t\t$result = array('error' => _('No file received.'));\n\t\t}\n\t\telse {\n\t\t\t$handle = fopen($_FILES['qqfile']['tmp_name'], \"r\");\n\t\t\t$data = fread($handle, 100000000);\n\t\t\tfclose($handle);\n\t\t\tif (strpos($data, '-----BEGIN CERTIFICATE-----') === 0) {\n\t\t\t\t$pemData = str_replace(\"\\r\", '', $data);\n\t\t\t\t$pemData = explode(\"\\n\", $pemData);\n\t\t\t\tarray_shift($pemData);\n\t\t\t\t$last = array_pop($pemData);\n\t\t\t\twhile (($last != '-----END CERTIFICATE-----') && sizeof($pemData) > 2) {\n\t\t\t\t\t$last = array_pop($pemData);\n\t\t\t\t}\n\t\t\t\t$pemData = implode('', $pemData);\n\t\t\t\t$data = base64_decode($pemData);\n\t\t\t}\n\t\t\t$_SESSION[inetOrgPerson::SESS_CERTIFICATES_LIST][] = $data;\n\t\t\tob_start();\n\t\t\t$contentElement = $this->getSelfServiceUserCertificates();\n\t\t\tob_end_clean();\n\t\t\tob_start();\n\t\t\t$tabindex = 999;\n\t\t\tparseHtml(null, $contentElement, array(), true, $tabindex, $this->get_scope());\n\t\t\t$content = ob_get_contents();\n\t\t\tob_end_clean();\n\t\t\t$result['html'] = $content;\n\t\t}\n\t\techo json_encode($result);\n\t}\n\n\t/**\n\t * Handles an AJAX photo file upload and prints the JSON result.\n\t */\n\tprivate function ajaxUploadPhoto() {\n\t\t$result = array('success' => true);\n\t\tif ((!isset($_FILES['qqfile']) || ($_FILES['qqfile']['size'] < 100)) && empty($_POST['webcamData'])) {\n\t\t\t$result = array('error' => _('No file received.'));\n\t\t}\n\t\telse {\n\t\t\tif (empty($_POST['webcamData'])) {\n\t\t\t\t$handle = fopen($_FILES['qqfile']['tmp_name'], \"r\");\n\t\t\t\t$data = fread($handle, 100000000);\n\t\t\t\tfclose($handle);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$data = $_POST['webcamData'];\n\t\t\t\t$data = str_replace('data:image/png;base64,', '', $data);\n\t\t\t\t$data = base64_decode($data);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tinclude_once dirname(__FILE__) . '/../imageutils.inc';\n\t\t\t\t$imageManipulator = ImageManipulationFactory::getImageManipulator($data);\n\t\t\t\t$imageManipulator->convertToJpeg();\n\t\t\t\t$data = $imageManipulator->getImageData();\n\t\t\t}\n\t\t\tcatch (Exception $e) {\n\t\t\t\t$result = array('success' => false, 'error' => htmlspecialchars($e->getMessage()));\n\t\t\t\techo json_encode($result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t$_SESSION[inetOrgPerson::SESS_PHOTO] = $data;\n\t\t\tob_start();\n\t\t\t$contentElement = $this->getSelfServicePhoto(false, true);\n\t\t\tob_end_clean();\n\t\t\tob_start();\n\t\t\t$tabindex = 999;\n\t\t\tparseHtml(null, $contentElement, array(), true, $tabindex, $this->get_scope());\n\t\t\t$content = ob_get_contents();\n\t\t\tob_end_clean();\n\t\t\t$result['html'] = $content;\n\t\t}\n\t\techo json_encode($result);\n\t}\n\n\t/**\n\t * Manages the deletion of a photo.\n\t *\n\t * @param array $data JSON data\n\t */\n\tprivate function ajaxDeleteSelfServicePhoto($data) {\n\t\t$_SESSION[self::SESS_PHOTO] = null;\n\t\tob_start();\n\t\t$contentElement = $this->getSelfServicePhoto(false, false);\n\t\tob_end_clean();\n\t\tob_start();\n\t\t$tabindex = 999;\n\t\tparseHtml(null, $contentElement, array(), true, $tabindex, $this->get_scope());\n\t\t$content = ob_get_contents();\n\t\tob_end_clean();\n\t\treturn array(\n\t\t\t'errorsOccurred' => 'false',\n\t\t\t'html' => $content,\n\t\t);\n\t}\n\n\t/**\n\t * Manages the deletion of a certificate.\n\t *\n\t * @param array $data JSON data\n\t */\n\tprivate function ajaxDeleteSelfServiceUserCertificate($data) {\n\t\tif (!isset($data['id'])) {\n\t\t\treturn self::invalidAjaxRequest();\n\t\t}\n\t\t$index = $data['id'];\n\t\tif (array_key_exists($index, $_SESSION[inetOrgPerson::SESS_CERTIFICATES_LIST])) {\n\t\t\tunset($_SESSION[inetOrgPerson::SESS_CERTIFICATES_LIST][$index]);\n\t\t\t$_SESSION[inetOrgPerson::SESS_CERTIFICATES_LIST] = array_values($_SESSION[inetOrgPerson::SESS_CERTIFICATES_LIST]);\n\t\t}\n\t\tob_start();\n\t\t$contentElement = $this->getSelfServiceUserCertificates();\n\t\tob_end_clean();\n\t\tob_start();\n\t\t$tabindex = 999;\n\t\tparseHtml(null, $contentElement, array(), true, $tabindex, $this->get_scope());\n\t\t$content = ob_get_contents();\n\t\tob_end_clean();\n\t\treturn array(\n\t\t\t'errorsOccurred' => 'false',\n\t\t\t'html' => $content,\n\t\t);\n\t}\n\n\t/**\n\t * Invalid AJAX request received.\n\t *\n\t * @param String $message error message\n\t */\n\tpublic static function invalidAjaxRequest($message = null) {\n\t\tif ($message == null) {\n\t\t\t$message = _('Invalid request');\n\t\t}\n\t\treturn array('errorsOccurred' => 'true', 'errormessage' => $message);\n\t}\n\n\t/**\n\t * This method specifies if a module manages password attributes.\n\t * @see passwordService::managesPasswordAttributes\n\t *\n\t * @return boolean true if this module manages password attributes\n\t */\n\tpublic function managesPasswordAttributes() {\n\t\tif (!$this->isUnixActive()) {\n\t\t\treturn !$this->isAdminReadOnly('userPassword');\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Specifies if this module supports to force that a user must change his password on next login.\n\t *\n\t * @return boolean force password change supported\n\t */\n\tpublic function supportsForcePasswordChange() {\n\t\treturn false;\n\t}\n\n\t/**\n\t * This function is called whenever the password should be changed. Account modules\n\t * must change their password attributes only if the modules list contains their module name.\n\t *\n\t * @param String $password new password\n\t * @param $modules list of modules for which the password should be changed\n\t * @param boolean $forcePasswordChange force the user to change his password at next login\n\t * @return array list of error messages if any as parameter array for StatusMessage\n\t *               e.g. return array(array('ERROR', 'Password change failed.'))\n\t * @see passwordService::passwordChangeRequested\n\t */\n\tpublic function passwordChangeRequested($password, $modules, $forcePasswordChange) {\n\t\tif (!in_array(get_class($this), $modules)) {\n\t\t\treturn array();\n\t\t}\n\t\t// check password strength\n\t\t$user = empty($this->attributes['uid'][0]) ? null : $this->attributes['uid'][0];\n\t\t$additionalAttrs = array();\n\t\tif (!empty($this->attributes['sn'][0])) {\n\t\t\t$additionalAttrs[] = $this->attributes['sn'][0];\n\t\t}\n\t\tif (!empty($this->attributes['givenName'][0])) {\n\t\t\t$additionalAttrs[] = $this->attributes['givenName'][0];\n\t\t}\n\t\t$checkResult = checkPasswordStrength($password, $user, $additionalAttrs);\n\t\tif ($checkResult !== true) {\n\t\t\treturn array(array('ERROR', $checkResult));\n\t\t}\n\t\t// set new password\n\t\t$this->clearTextPassword = $password;\n\t\t// set SASL password\n\t\tif (!empty($this->attributes['uid'][0]) && !empty($this->moduleSettings['posixAccount_pwdHash'][0])\n\t\t\t\t&& ($this->moduleSettings['posixAccount_pwdHash'][0] === 'SASL')) {\n\t\t\t$this->attributes['userpassword'][0] = '{SASL}' . $this->attributes['uid'][0];\n\t\t}\n\t\t// delay on ldap_exop\n\t\telseif (!empty($this->moduleSettings['posixAccount_pwdHash'][0]) && ($this->moduleSettings['posixAccount_pwdHash'][0] === 'LDAP_EXOP')) {\n\t\t\tlogNewMessage(LOG_DEBUG, 'Setting password in post action, exop');\n\t\t}\n\t\t// set normal password\n\t\telse {\n\t\t\t$this->attributes['userpassword'][0] = pwd_hash($password, true, $this->moduleSettings['posixAccount_pwdHash'][0]);\n\t\t}\n\t\treturn array();\n\t}\n\n\t/**\n\t * Loads cached data from LDAP such as departmets etc.\n\t */\n\tprivate function initCache() {\n\t\tif ($this->departmentCache != null) {\n\t\t\treturn;\n\t\t}\n\t\t$attrs = array();\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideDepartments')) {\n\t\t\t$attrs[] = 'departmentNumber';\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideOu')) {\n\t\t\t$attrs[] = 'ou';\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideO')) {\n\t\t\t$attrs[] = 'o';\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideJobTitle')) {\n\t\t\t$attrs[] = 'title';\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideEmployeeType')) {\n\t\t\t$attrs[] = 'employeeType';\n\t\t}\n\t\tif (!$this->isBooleanConfigOptionSet('inetOrgPerson_hideBusinessCategory')) {\n\t\t\t$attrs[] = 'businessCategory';\n\t\t}\n\t\t$departments = array();\n\t\t$ous = array();\n\t\t$os = array();\n\t\t$titles = array();\n\t\t$employeeTypes = array();\n\t\t$businessCategories = array();\n\t\tif (sizeof($attrs) > 0) {\n\t\t\t$result = searchLDAPByFilter('(objectClass=inetOrgPerson)', $attrs, array($this->get_scope()));\n\t\t\tforeach ($result as $attributes) {\n\t\t\t\tif (isset($attributes['departmentnumber'])) {\n\t\t\t\t\tforeach ($attributes['departmentnumber'] as $val) {\n\t\t\t\t\t\t$departments[] = $val;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isset($attributes['ou'])) {\n\t\t\t\t\tforeach ($attributes['ou'] as $val) {\n\t\t\t\t\t\t$ous[] = $val;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isset($attributes['o'])) {\n\t\t\t\t\tforeach ($attributes['o'] as $val) {\n\t\t\t\t\t\t$os[] = $val;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isset($attributes['title'])) {\n\t\t\t\t\tforeach ($attributes['title'] as $val) {\n\t\t\t\t\t\t$titles[] = $val;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isset($attributes['employeetype'])) {\n\t\t\t\t\tforeach ($attributes['employeetype'] as $val) {\n\t\t\t\t\t\t$employeeTypes[] = $val;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isset($attributes['businesscategory'])) {\n\t\t\t\t\tforeach ($attributes['businesscategory'] as $val) {\n\t\t\t\t\t\t$businessCategories[] = $val;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$this->departmentCache = array_values(array_unique($departments));\n\t\t$this->oCache = array_values(array_unique($os));\n\t\t$this->ouCache = array_values(array_unique($ous));\n\t\t$this->titleCache = array_values(array_unique($titles));\n\t\t$this->employeeTypeCache = array_values(array_unique($employeeTypes));\n\t\t$this->businessCategoryCache = array_values(array_unique($businessCategories));\n\t}\n\n\t/**\n\t * Returns if the attribute is read-only in admin interface.\n\t *\n\t * @param String $attrName attribute name\n\t * @return boolean attribute is read-only\n\t */\n\tprivate function isAdminReadOnly($attrName) {\n\t\t// for new accounts all fields can be edited\n\t\tif ($this->getAccountContainer()->isNewAccount) {\n\t\t\treturn false;\n\t\t}\n\t\treturn $this->isBooleanConfigOptionSet('inetOrgPerson_readOnly_' . $attrName);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see baseModule::get_configOptions()\n\t */\n\tpublic function get_configOptions($scopes, $allScopes) {\n\t\t$configContainer = new htmlResponsiveRow();\n\t\tif (isset($_SESSION['conf_config'])) {\n\t\t\t// add password hash type if posixAccount is inactive\n\t\t\t$unixModuleFound = false;\n\t\t\t$typeManager = new TypeManager($_SESSION['conf_config']);\n\t\t\t$types = $typeManager->getConfiguredTypesForScopes(array('user', 'group'));\n\t\t\tforeach ($types as $type) {\n\t\t\t\t$modules = $type->getModules();\n\t\t\t\tif (in_array('posixAccount', $modules) || in_array('posixGroup', $modules)) {\n\t\t\t\t\t$unixModuleFound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!$unixModuleFound) {\n\t\t\t\t$optionsSelected = array('CRYPT-SHA512');\n\t\t\t\t$hashOption = new htmlResponsiveSelect('posixAccount_pwdHash', getSupportedHashTypes(), $optionsSelected, _(\"Password hash type\"), 'pwdHash');\n\t\t\t\t$configContainer->add($hashOption, 12);\n\t\t\t}\n\t\t}\n\t\t$configContainerHead = new htmlGroup();\n\t\t$configContainerHead->addElement(new htmlOutputText(_('Hidden options')));\n\t\t$configContainerHead->addElement(new htmlHelpLink('hiddenOptions'));\n\t\t$configContainer->add($configContainerHead, 12);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideDescription', false, _('Description'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideStreet', false, _('Street'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hidePostOfficeBox', false, _('Post office box'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hidePostalCode', false, _('Postal code'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideLocation', false, _('Location'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideState', false, _('State'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hidePostalAddress', false, _('Postal address'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideRegisteredAddress', false, _('Registered address'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideOfficeName', false, _('Office name'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideRoomNumber', false, _('Room number'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideTelephoneNumber', false, _('Telephone number'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideHomeTelephoneNumber', false, _('Home telephone number'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideMobileNumber', false, _('Mobile number'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideFaxNumber', false, _('Fax number'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hidePager', true, _('Pager'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideEMailAddress', false, _('Email address'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideJobTitle', false, _('Job title'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideCarLicense', false, _('Car license'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideEmployeeType', false, _('Employee type'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideBusinessCategory', false, _('Business category'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideDepartments', false, _('Department'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideManager', false, _('Manager'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideOu', false, _('Organisational unit'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideO', false, _('Organisation'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideEmployeeNumber', false, _('Employee number'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideInitials', false, _('Initials'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideLabeledURI', false, _('Web site'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideuserCertificate', false, _('User certificates'), null, true), 12, 4);\n\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hidejpegPhoto', false, _('Photo'), null, true), 12, 4);\n\t\tif (isset($_SESSION['conf_config'])) {\n\t\t\t$confActiveUserModules = $_SESSION['conf_config']->get_AccountModules('user');\n\t\t\tif (!in_array('sambaSamAccount', $confActiveUserModules)) {\n\t\t\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hidedisplayName', true, _('Display name'), null, true), 12, 4);\n\t\t\t}\n\t\t\t// option to hide uid\n\t\t\tif (!in_array('posixAccount', $confActiveUserModules)) {\n\t\t\t\t$configContainer->add(new htmlResponsiveInputCheckbox('inetOrgPerson_hideUID', false, _('User name'), null, true), 12, 4);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$configContainer->add(new htmlOutputText(''), 0, 4);\n\t\t\t}\n\t\t}\n\t\t$configContainer->addVerticalSpacer('1rem');\n\t\t$advancedOptions = new htmlResponsiveRow();\n\t\t$advancedOptions->add(new htmlResponsiveInputCheckbox('inetOrgPerson_addAddressbook', false, _('Add addressbook (ou=addressbook)'), 'addAddressbook'), 12);\n\t\t$advancedOptions->add(new htmlSubTitle(_('Read-only fields')), 12);\n\t\t$readOnlyOptions = array(\n\t\t\t_('Description') => 'inetOrgPerson_readOnly_description', _('Street') => 'inetOrgPerson_readOnly_street',\n\t\t\t_('First name') => 'inetOrgPerson_readOnly_givenName', _('Last name') => 'inetOrgPerson_readOnly_sn',\n\t\t\t_('Post office box') => 'inetOrgPerson_readOnly_postOfficeBox', _('Postal code') => 'inetOrgPerson_readOnly_postalCode',\n\t\t\t_('Location') => 'inetOrgPerson_readOnly_l', _('State') => 'inetOrgPerson_readOnly_st',\n\t\t\t_('Postal address') => 'inetOrgPerson_readOnly_postalAddress', _('Registered address') => 'inetOrgPerson_readOnly_registeredAddress',\n\t\t\t_('Office name') => 'inetOrgPerson_readOnly_physicalDeliveryOfficeName', _('Room number') => 'inetOrgPerson_readOnly_roomNumber',\n\t\t\t_('Telephone number') => 'inetOrgPerson_readOnly_telephoneNumber', _('Home telephone number') => 'inetOrgPerson_readOnly_homePhone',\n\t\t\t_('Mobile number') => 'inetOrgPerson_readOnly_mobile', _('Fax number') => 'inetOrgPerson_readOnly_facsimileTelephoneNumber',\n\t\t\t_('Pager') => 'inetOrgPerson_readOnly_pager', _('Email address') => 'inetOrgPerson_readOnly_mail',\n\t\t\t_('Web site') => 'inetOrgPerson_readOnly_labeledURI', _('Job title') => 'inetOrgPerson_readOnly_title',\n\t\t\t_('Car license') => 'inetOrgPerson_readOnly_carLicense', _('Employee type') => 'inetOrgPerson_readOnly_employeeType',\n\t\t\t_('Business category') => 'inetOrgPerson_readOnly_businessCategory',\n\t\t\t_('Department') => 'inetOrgPerson_readOnly_departmentNumber', _('Manager') => 'inetOrgPerson_readOnly_manager',\n\t\t\t_('Organisation') => 'inetOrgPerson_readOnly_o', _('Organisational unit') => 'inetOrgPerson_readOnly_ou',\n\t\t\t_('Employee number') => 'inetOrgPerson_readOnly_employeeNumber', _('Initials') => 'inetOrgPerson_readOnly_initials',\n\t\t\t_('Photo') => 'inetOrgPerson_readOnly_jpegPhoto', _('Password') => 'inetOrgPerson_readOnly_userPassword'\n\t\t);\n\t\tif (isset($_SESSION['conf_config'])) {\n\t\t\t$readOnlyOptions[_('User name')] = 'inetOrgPerson_readOnly_uid';\n\t\t\t$readOnlyOptions[_('Common name')] = 'inetOrgPerson_readOnly_cn';\n\t\t}\n\t\tksort($readOnlyOptions);\n\t\tforeach ($readOnlyOptions as $label => $id) {\n\t\t\t$advancedOptions->add(new htmlResponsiveInputCheckbox($id, false, $label, null, true), 12, 4);\n\t\t}\n\t\t$advancedOptions->add(new htmlSubTitle(_('Photo')), 12);\n\t\t$advancedOptions->add(new htmlResponsiveInputField(_('Maximum width (px)'), 'inetOrgPerson_jpegPhoto_maxWidth', null, 'crop'), 12);\n\t\t$advancedOptions->add(new htmlResponsiveInputField(_('Maximum height (px)'), 'inetOrgPerson_jpegPhoto_maxHeight', null, 'crop'), 12);\n\t\t$advancedOptions->add(new htmlResponsiveInputField(_('Maximum file size (kB)'), 'inetOrgPerson_jpegPhoto_maxSize'), 12);\n\t\t$advancedOptionsAccordion = new htmlAccordion('inetOrgPersonAdvancedOptions', array(_('Advanced options') => $advancedOptions), false);\n\t\t$configContainer->add($advancedOptionsAccordion, 12);\n\t\treturn $configContainer;\n\t}\n\n\t/**\n\t * Checks if the given email address already exists in LDAP.\n\t *\n\t * @param String $mail email address\n\t * @return boolean true if already exists\n\t */\n\tprivate function emailExists($mail) {\n\t\tif (empty($mail)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (isset($this->emailCheckCache[$mail])) {\n\t\t\treturn $this->emailCheckCache[$mail];\n\t\t}\n\t\t$result = searchLDAPByAttribute('mail', $mail, 'inetOrgPerson', array('dn'), array('user'));\n\t\t$this->emailCheckCache[$mail] = (sizeof($result) > 0);\n\t\treturn $this->emailCheckCache[$mail];\n\t}\n\n\t/**\n\t * Returns if the Unix module is also active.\n\t *\n\t * @param string[] $modules active account mdules\n\t * @return boolean Unix is active\n\t */\n\tprivate function isUnixActive($modules = null) {\n\t\tif (!empty($modules)) {\n\t\t\treturn in_array('posixAccount', $modules);\n\t\t}\n\t\tif ($this->getAccountContainer() == null) {\n\t\t\treturn false;\n\t\t}\n\t\t$modules = $this->getAccountContainer()->get_type()->getModules();\n\t\treturn in_array('posixAccount', $modules);\n\t}\n\n\t/**\n\t * Returns if the Samba 3 module is also active.\n\t *\n\t * @param string[] $modules active account mdules\n\t * @return boolean Samba 3 is active\n\t */\n\tprivate function isSamba3Active($modules = null) {\n\t\tif (!empty($modules)) {\n\t\t\treturn in_array('sambaSamAccount', $modules);\n\t\t}\n\t\tif ($this->getAccountContainer() == null) {\n\t\t\treturn false;\n\t\t}\n\t\t$modules = $this->getAccountContainer()->get_type()->getModules();\n\t\treturn in_array('sambaSamAccount', $modules);\n\t}\n\n\t/**\n\t * {@inheritdoc}\n\t */\n\tpublic function getWildCardReplacements() {\n\t\t$replacements = array();\n\t\t// first name\n\t\tif (!empty($_POST['givenName'])) {\n\t\t\t$replacements['firstname'] = $_POST['givenName'];\n\t\t}\n\t\telseif (!empty($this->attributes['givenName'][0])) {\n\t\t\t$replacements['firstname'] = $this->attributes['givenName'][0];\n\t\t}\n\t\t// last name\n\t\tif (!empty($_POST['sn'])) {\n\t\t\t$replacements['lastname'] = $_POST['sn'];\n\t\t}\n\t\telseif (!empty($this->attributes['sn'][0])) {\n\t\t\t$replacements['lastname'] = $this->attributes['sn'][0];\n\t\t}\n\t\t// user name\n\t\tif (!$this->isUnixActive()) {\n\t\t\tif (!empty($_POST['uid'])) {\n\t\t\t\t$replacements['user'] = $_POST['uid'];\n\t\t\t}\n\t\t\telseif (!empty($this->attributes['uid'][0])) {\n\t\t\t\t$replacements['user'] = $this->attributes['uid'][0];\n\t\t\t}\n\t\t}\n\t\t// cn\n\t\tif (!empty($_POST['cn_0'])) {\n\t\t\t$replacements['commonname'] = $_POST['cn_0'];\n\t\t}\n\t\telseif (!empty($this->attributes['cn'][0])) {\n\t\t\t$replacements['commonname'] = $this->attributes['cn'][0];\n\t\t}\n\t\t// mail\n\t\tif (!empty($_POST['mail_0'])) {\n\t\t\t$replacements['email'] = $_POST['mail_0'];\n\t\t}\n\t\telseif (!empty($this->attributes['mail'][0])) {\n\t\t\t$replacements['email'] = $this->attributes['mail'][0];\n\t\t}\n\t\treturn $replacements;\n\t}\n\n\t/**\n\t * Returns if the password of the current account is locked.\n\t *\n\t * @param ?array $attributes LDAP attribute data\n\t * @return bool password is locked\n\t */\n\tpublic function isLocked(?array $attributes = null): bool {\n\t\tif ($attributes === null) {\n\t\t\t$attributes = array_change_key_case($this->attributes, CASE_LOWER);\n\t\t}\n\t\treturn isset($attributes['userpassword'][0])\n\t\t\t&& !pwd_is_enabled($attributes['userpassword'][0]);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function supportsPasswordQuickChangePage(): bool {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function addPasswordQuickChangeAccountDetails(htmlResponsiveRow $row): void {\n\t\tif (!$this->isUnixActive() && !empty($this->attributes['uid'][0])) {\n\t\t\t$row->addLabel(new htmlOutputText(_('User name')));\n\t\t\t$row->addField(new htmlOutputText($this->attributes['uid'][0]));\n\t\t}\n\t\t$nameParts = array();\n\t\tif (isset($this->attributes['givenName'][0])) {\n\t\t\t$nameParts[] = $this->attributes['givenName'][0];\n\t\t}\n\t\tif (isset($this->attributes['sn'][0])) {\n\t\t\t$nameParts[] = $this->attributes['sn'][0];\n\t\t}\n\t\tif (!empty($nameParts)) {\n\t\t\t$row->addLabel(new htmlOutputText(_('Full name')));\n\t\t\t$row->addField(new htmlOutputText(implode(' ', $nameParts)));\n\t\t}\n\t\tif (!empty($this->attributes['mail'][0])) {\n\t\t\t$row->addLabel(new htmlOutputText(_('Email address')));\n\t\t\t$row->addField(new htmlOutputText($this->attributes['mail'][0]));\n\t\t}\n\t\tif (!empty($this->attributes['telephoneNumber'][0])) {\n\t\t\t$row->addLabel(new htmlOutputText(_('Telephone number')));\n\t\t\t$row->addField(new htmlOutputText($this->attributes['telephoneNumber'][0]));\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPasswordQuickChangeOptions(): array {\n\t\tif ($this->isUnixActive() && in_array_ignore_case('posixAccount', $this->attributes['objectClass'])) {\n\t\t\treturn array();\n\t\t}\n\t\tif (!in_array_ignore_case('inetOrgPerson', $this->attributes['objectClass'])) {\n\t\t\treturn array();\n\t\t}\n\t\treturn array(\n\t\t\tnew PasswordQuickChangeOption('updateUnixPwd', _('Change password'))\n\t\t);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPasswordQuickChangeChanges(string $password): array {\n\t\tif ($this->isUnixActive() && in_array_ignore_case('posixAccount', $this->attributes['objectClass'])) {\n\t\t\treturn array();\n\t\t}\n\t\tif (!in_array_ignore_case('inetOrgPerson', $this->attributes['objectClass'])) {\n\t\t\treturn array();\n\t\t}\n\t\t$attrs = array();\n\t\tif (isset($_POST['updateUnixPwd'])) {\n\t\t\t$hashType = $this->moduleSettings['posixAccount_pwdHash'][0];\n\t\t\tif ($hashType === 'LDAP_EXOP') {\n\t\t\t\t$this->clearTextPassword = $password;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$attrs['userpassword'][0] = pwd_hash($password, true, $hashType);\n\t\t\t}\n\t\t}\n\t\treturn $attrs;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPasswordQuickChangePasswordStrengthUserName(): ?string {\n\t\tif (isset($this->attributes['uid'][0])) {\n\t\t\treturn $this->attributes['uid'][0];\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPasswordQuickChangePasswordStrengthAttributes(): array {\n\t\t$values = array();\n\t\tif (isset($this->attributes['sn'][0])) {\n\t\t\t$values[] = $this->attributes['sn'][0];\n\t\t}\n\t\tif (isset($this->attributes['givenName'][0])) {\n\t\t\t$values[] = $this->attributes['givenName'][0];\n\t\t}\n\t\treturn $values;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPasswordQuickChangeIsPasswordInHistory(string $password): bool {\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getAccountStatusDetails(ConfiguredType $type, ?array &$attributes): array {\n\t\tif ($this->isUnixActive($type->getModules())) {\n\t\t\treturn array();\n\t\t}\n\t\tif ($attributes === null) {\n\t\t\t$attributes = $this->attributes;\n\t\t}\n\t\t$details = array();\n\t\tif (self::isLocked($attributes)) {\n\t\t\t$details[] = AccountStatusDetails::newLocked(_('Personal'), self::STATUS_PASSWORD_LOCKED);\n\t\t}\n\t\treturn $details;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getAccountStatusRequiredAttributes(ConfiguredType $type): array {\n\t\tif ($this->isUnixActive($type->getModules())) {\n\t\t\treturn array();\n\t\t}\n\t\treturn array('userpassword');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getAccountStatusPossibleLockOptions(ConfiguredType $type, ?array &$attributes): array {\n\t\tif ($this->isUnixActive($type->getModules())) {\n\t\t\treturn array();\n\t\t}\n\t\tif ($attributes === null) {\n\t\t\t$attributes = $this->attributes;\n\t\t}\n\t\t$options = array();\n\t\tif (!self::isLocked($attributes) && isset($attributes['userpassword'][0]) && pwd_is_lockable($attributes['userpassword'][0])) {\n\t\t\t$options[] = AccountStatusDetails::newLocked(_('Personal'), self::STATUS_PASSWORD_LOCKED);\n\t\t}\n\t\treturn $options;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function accountStatusPerformLock(ConfiguredType $type, ?array &$attributes, array $lockIds): void {\n\t\tif ($this->isUnixActive($type->getModules())) {\n\t\t\treturn;\n\t\t}\n\t\tif ($attributes === null) {\n\t\t\t$attributes = &$this->attributes;\n\t\t}\n\t\tif (in_array(self::STATUS_PASSWORD_LOCKED, $lockIds)) {\n\t\t\t$attributes['userpassword'][0] = pwd_disable($attributes['userpassword'][0]);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function accountStatusPerformUnlock(ConfiguredType $type, ?array &$attributes, array $lockIds): void {\n\t\tif ($this->isUnixActive($type->getModules())) {\n\t\t\treturn;\n\t\t}\n\t\tif ($attributes === null) {\n\t\t\t$attributes = &$this->attributes;\n\t\t}\n\t\tif (in_array(self::STATUS_PASSWORD_LOCKED, $lockIds)) {\n\t\t\t$attributes['userpassword'][0] = pwd_enable($attributes['userpassword'][0]);\n\t\t}\n\t}\n\n}\n", "<?php\nnamespace LAM\\PDF;\n\nuse \\htmlStatusMessage;\nuse LAM\\PERSISTENCE\\ConfigurationDatabase;\nuse LAM\\TYPES\\TypeManager;\nuse LAMCfgMain;\nuse LAMConfig;\nuse \\LAMException;\nuse \\LAM\\ImageUtils\\ImageManipulationFactory;\nuse PDO;\nuse ServerProfilePersistenceManager;\nuse XMLReader;\nuse XMLWriter;\nuse function LAM\\PERSISTENCE\\dbTableExists;\n\n/*\n  This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)\n  Copyright (C) 2003 - 2006  Michael Duergner\n                2011 - 2022  Roland Gruber\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\n/**\n * Functions to manage the PDF structures.\n *\n * @author Michael Duergner\n * @package PDF\n */\n\n/** LAM configuration */\ninclude_once(__DIR__ . \"/config.inc\");\n\n/**\n * Use as server profile name to manage global templates.\n */\nconst GLOBAL_PROFILE = '__GLOBAL__';\n\n/** LDAP object */\ninclude_once(__DIR__ . \"/ldap.inc\");\n\n/**\n * Manages the persistence of PDF structures.\n *\n * @package LAM\\PDF\n */\nclass PdfStructurePersistenceManager {\n\n\t/**\n\t * @var PdfStructurePersistenceStrategy\n\t */\n\tprivate $strategy;\n\n\t/**\n\t * Constructor\n\t */\n\tpublic function __construct() {\n\t\t$configDb = new ConfigurationDatabase(new LAMCfgMain());\n\t\tif ($configDb->useRemoteDb()) {\n\t\t\t$this->strategy = new PdfStructurePersistenceStrategyPdo($configDb->getPdo());\n\t\t} else {\n\t\t\t$this->strategy = new PdfStructurePersistenceStrategyFiles();\n\t\t}\n\t}\n\n\t/**\n\t * Returns the names of existing PDF structure templates.\n\t *\n\t * @return array scope => names (e.g. array('user' => array('default')))\n\t * @throws LAMException error reading templates\n\t */\n\tpublic function getPdfStructureTemplateNames() : array {\n\t\treturn $this->strategy->getPdfStructureTemplateNames();\n\t}\n\n\t/**\n\t * Deletes an PDF structure template.\n\t *\n\t * @param string $scope user/group/host\n\t * @param string $name PDF structure name\n\t * @throws LAMException error deleting template\n\t */\n\tpublic function deletePdfStructureTemplate(string $scope, string $name) : void {\n\t\tif (!$this->isValidPdfStructureName($name) || !TypeManager::isValidTypeId($scope) || ($name == 'default')) {\n\t\t\tlogNewMessage(LOG_NOTICE, \"Invalid account profile name: $name:$scope\");\n\t\t\tthrow new LAMException(_(\"Unable to delete profile!\"));\n\t\t}\n\t\t$this->strategy->deletePdfStructureTemplate($scope, $name);\n\t}\n\n\t/**\n\t * Reads a PDF structure template.\n\t *\n\t * @param string $scope user/group/host\n\t * @param string $name structure name\n\t * @return PDFStructure PDF structure\n\t * @throws LAMException error deleting structure\n\t */\n\tpublic function readPdfStructureTemplate(string $scope, string $name) : PDFStructure {\n\t\tif (!TypeManager::isValidTypeId($scope) || !$this->isValidPDFStructureName($name)) {\n\t\t\tthrow new LAMException(_('Unable to read PDF structure.'));\n\t\t}\n\t\treturn $this->strategy->readPdfStructureTemplate($scope, $name);\n\t}\n\n\t/**\n\t * Saves the PDF structure.\n\t *\n\t * @param string $scope user/group/host\n\t * @param string $name structure name\n\t * @param PDFStructure $structure structure\n\t * @throws LAMException error saving structure\n\t */\n\tpublic function savePdfStructureTemplate(string $scope, string $name, PDFStructure $structure) : void {\n\t\tif (!TypeManager::isValidTypeId($scope) || !$this->isValidPDFStructureName($name)) {\n\t\t\tthrow new LAMException(_('PDF structure name not valid'));\n\t\t}\n\t\t$this->strategy->savePdfStructureTemplate($scope, $name, $structure);\n\t}\n\n\t/**\n\t * Returns a list of template logo file names.\n\t *\n\t * @return string[] logo file names\n\t */\n\tpublic function getPdfTemplateLogoNames() : array {\n\t\treturn $this->strategy->getPdfTemplateLogoNames();\n\t}\n\n\t/**\n\t * Returns the binary data for the given template logo.\n\t *\n\t * @param string $name file name\n\t * @return string binary\n\t * @throws LAMException error reading file\n\t */\n\tpublic function getPdfTemplateLogoBinary(string $name) : string {\n\t\tif (!$this->isValidLogoFileName($name)) {\n\t\t\tthrow new LAMException(_('Unable to read logo file.'));\n\t\t}\n\t\treturn $this->strategy->getPdfTemplateLogoBinary($name);\n\t}\n\n\t/**\n\t * Deletes a logo in global templates.\n\t *\n\t * @param string $name logo name\n\t * @throws LAMException error during deletion\n\t */\n\tpublic function deletePdfTemplateLogo(string $name) : void {\n\t\tif (!$this->isValidLogoFileName($name)) {\n\t\t\tthrow new LAMException(_('Unable to delete logo file.'));\n\t\t}\n\t\t$this->strategy->deletePdfTemplateLogo($name);\n\t}\n\n\t/**\n\t * Saves the template logo.\n\t *\n\t * @param string $name file name\n\t * @param string $data binary data\n\t * @throws LAMException error during save\n\t */\n\tpublic function savePdfTemplateLogo(string $name, string $data) : void {\n\t\tif (!$this->isValidLogoFileName($name)) {\n\t\t\tthrow new LAMException(_('Unable to upload logo file.'));\n\t\t}\n\t\t$this->strategy->savePdfTemplateLogo($name, $data);\n\t}\n\n\t/**\n\t * Returns the list of available PDF logos.\n\t *\n\t * @param string $confName server profile name\n\t * @param bool $readDimensions reads the image dimensions\n\t * @return PdfLogo[] logos\n\t * @throws LAMException error reading logos\n\t */\n\tpublic function getPdfLogos(string $confName, bool $readDimensions = false) : array {\n\t\tif (!LAMConfig::isValidName($confName)) {\n\t\t\tthrow new LAMException(_('Unable to read logos.'));\n\t\t}\n\t\t$logoNames = $this->strategy->getPdfLogoNames($confName);\n\t\tsort($logoNames);\n\t\t$result = array();\n\t\tif ($readDimensions) {\n\t\t\tinclude_once __DIR__ . '/imageutils.inc';\n\t\t}\n\t\tforeach ($logoNames as $logoName) {\n\t\t\tif ($readDimensions) {\n\t\t\t\t$binary = $this->getPdfLogoBinary($confName, $logoName);\n\t\t\t\t$imageManipulator = ImageManipulationFactory::getImageManipulator($binary);\n\t\t\t\t$result[] = new PdfLogo($logoName, $imageManipulator->getHeight(), $imageManipulator->getWidth());\n\t\t\t\t$imageManipulator = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$result[] = new PdfLogo($logoName);\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\t/**\n\t * Reads a PDF logo.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $name file name\n\t * @return string binary data\n\t * @throws LAMException error reading logo\n\t */\n\tpublic function getPdfLogoBinary(string $confName, string $name) : string {\n\t\tif (!LAMConfig::isValidName($confName) || !$this->isValidLogoFileName($name)) {\n\t\t\tthrow new LAMException(_('Unable to read logo file.'));\n\t\t}\n\t\treturn $this->strategy->getPdfLogoBinary($confName, $name);\n\t}\n\n\t/**\n\t * Deletes a PDF logo.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $name logo name\n\t * @throws LAMException error deleting logo\n\t */\n\tpublic function deletePdfLogo(string $confName, string $name) : void {\n\t\tif (!LAMConfig::isValidName($confName) || !$this->isValidLogoFileName($name)) {\n\t\t\tthrow new LAMException(_('Unable to delete logo file.'));\n\t\t}\n\t\t// check if existing\n\t\t$found = false;\n\t\t$logos = $this->getPdfLogos($confName);\n\t\tforeach ($logos as $logo) {\n\t\t\tif ($logo->getName() === $name) {\n\t\t\t\t$found = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!$found) {\n\t\t\tthrow new LAMException(_('File does not exist.'), htmlspecialchars($name));\n\t\t}\n\t\t// check if still in use\n\t\t$typeManager = new TypeManager();\n\t\t$activeTypes = $typeManager->getConfiguredTypes();\n\t\tforeach ($activeTypes as $type) {\n\t\t\t$structures = $this->getPDFStructures($confName, $type->getId());\n\t\t\tforeach ($structures as $structure) {\n\t\t\t\t$data = $this->readPdfStructure($confName, $type->getId(), $structure);\n\t\t\t\tif ($data->getLogo() == $name) {\n\t\t\t\t\tthrow new LAMException(_('Unable to delete logo file.'),\n\t\t\t\t\t\tsprintf(_('Logo is still in use by PDF structure \"%s\" in account type \"%s\".'), $structure, $type->getAlias()));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$this->strategy->deletePdfLogo($confName, $name);\n\t}\n\n\t/**\n\t * Saves a PDF logo.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $name logo name\n\t * @param string $data binary\n\t * @throws LAMException error saving logo\n\t */\n\tpublic function savePdfLogo(string $confName, string $name, string $data) : void {\n\t\tif (!LAMConfig::isValidName($confName)) {\n\t\t\tthrow new LAMException(_('Unable to upload logo file.'));\n\t\t}\n\t\tif (!$this->isValidLogoFileName($name)) {\n\t\t\tthrow new LAMException(_('Unable to upload logo file.'), _('The file name must end with \".png\" or \".jpg\".'));\n\t\t}\n\t\t$this->strategy->savePdfLogo($confName, $name, $data);\n\t}\n\n\t/**\n\t * Returns all available PDF structure definitions for the submitted account type.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $typeId the account type\n\t *\n\t * @return string[] structure names\n\t * @throws LAMException error reading structures\n\t */\n\tpublic function getPDFStructures(string $confName, string $typeId) : array {\n\t\tif (!TypeManager::isValidTypeId($typeId)) {\n\t\t\tthrow new LAMException(_('Unable to read PDF structures.'));\n\t\t}\n\t\t$return = $this->strategy->getPDFStructures($confName, $typeId);\n\t\tsort($return);\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Deletes a PDF structure.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $typeId user/group/host\n\t * @param string $name structure name\n\t * @throws LAMException error deleting structure\n\t */\n\tpublic function deletePdfStructure(string $confName, string $typeId, string $name) : void {\n\t\tif (!LAMConfig::isValidName($confName) || !TypeManager::isValidTypeId($typeId) || !$this->isValidPDFStructureName($name)) {\n\t\t\tlogNewMessage(LOG_ERR, 'Invalid data: ' . $confName . ' ' . $typeId . ' ' . $name);\n\t\t\tthrow new LAMException(_('Unable to delete PDF structure!'));\n\t\t}\n\t\t$this->strategy->deletePdfStructure($confName, $typeId, $name);\n\t}\n\n\t/**\n\t * Reads a PDF structure.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $typeId user/group/host\n\t * @param string $name structure name\n\t * @return PDFStructure PDF structure\n\t * @throws LAMException error deleting structure\n\t */\n\tpublic function readPdfStructure(string $confName, string $typeId, string $name) : PDFStructure {\n\t\tif (!LAMConfig::isValidName($confName) || !TypeManager::isValidTypeId($typeId) || !$this->isValidPDFStructureName($name)) {\n\t\t\tthrow new LAMException(_('Unable to read PDF structure.'));\n\t\t}\n\t\treturn $this->strategy->readPdfStructure($confName, $typeId, $name);\n\t}\n\n\t/**\n\t * Saves the PDF structure.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $typeId user/group/host\n\t * @param string $name structure name\n\t * @param PDFStructure $structure structure\n\t * @throws LAMException error saving structure\n\t */\n\tpublic function savePdfStructure(string $confName, string $typeId, string $name, PDFStructure $structure) : void {\n\t\tif (!LAMConfig::isValidName($confName) || !TypeManager::isValidTypeId($typeId) || !$this->isValidPDFStructureName($name)) {\n\t\t\tthrow new LAMException(_('PDF structure name not valid'));\n\t\t}\n\t\t$this->strategy->savePdfStructure($confName, $typeId, $name, $structure);\n\t}\n\n\t/**\n\t * Returns if the give structure name is valid.\n\t *\n\t * @param string $name structure name\n\t * @return boolean is valid\n\t */\n\tprivate function isValidPDFStructureName(string $name) : bool {\n\t\treturn preg_match('/^[a-z0-9_-]+$/i', $name) === 1;\n\t}\n\n\t/**\n\t * Returns if the given logo file name is valid.\n\t *\n\t * @param string $fileName file name\n\t * @return bool valid\n\t */\n\tprivate function isValidLogoFileName(string $fileName) : bool {\n\t\treturn preg_match('/^[a-z0-9_-]+\\\\.(png|jpg)$/im', $fileName) === 1;\n\t}\n\n\t/**\n\t * Installs template structures to the given server profile.\n\t *\n\t * @param string $confName server profile name\n\t * @throws LAMException error during installation\n\t */\n\tpublic function installPDFTemplates(string $confName) {\n\t\tif (!LAMConfig::isValidName($confName)) {\n\t\t\tthrow new LAMException(_(\"Profile name is invalid!\"));\n\t\t}\n\t\t$serverProfilesPersistenceManager = new ServerProfilePersistenceManager();\n\t\t$config = $serverProfilesPersistenceManager->loadProfile($confName);\n\t\t$typeManager = new TypeManager($config);\n\t\t$allTemplates = $this->getPdfStructureTemplateNames();\n\t\tforeach ($typeManager->getConfiguredTypes() as $type) {\n\t\t\tif (empty($allTemplates[$type->getScope()])) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$existingStructures = $this->getPDFStructures($confName, $type->getId());\n\t\t\tforeach ($allTemplates[$type->getScope()] as $templateName) {\n\t\t\t\tif (!in_array($templateName, $existingStructures)) {\n\t\t\t\t\t$structure = $this->readPdfStructureTemplate($type->getScope(), $templateName);\n\t\t\t\t\t$this->savePdfStructure($confName, $type->getId(), $templateName, $structure);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$logos = $this->getPdfTemplateLogoNames();\n\t\t$existingLogos = $this->getPdfLogos($confName);\n\t\tforeach ($logos as $logo) {\n\t\t\tif (!in_array($logo, $existingLogos)) {\n\t\t\t\t$binary = $this->getPdfTemplateLogoBinary($logo);\n\t\t\t\t$this->savePdfLogo($confName, $logo, $binary);\n\t\t\t}\n\t\t}\n\t}\n\n}\n\n/**\n * Logo for PDF structures.\n *\n * @package LAM\\PDF\n */\nclass PdfLogo {\n\n\tprivate $name;\n\n\tprivate $height;\n\n\tprivate $width;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param string $name file name\n\t * @param int $height height\n\t * @param int $width width\n\t */\n\tpublic function __construct(string $name, int $height = 0, int $width = 0) {\n\t\t$this->name = $name;\n\t\t$this->height = $height;\n\t\t$this->width = $width;\n\t}\n\n\t/**\n\t * Returns the file name.\n\t *\n\t * @return string file name\n\t */\n\tpublic function getName(): string {\n\t\treturn $this->name;\n\t}\n\n\t/**\n\t * Returns the height.\n\t *\n\t * @return int height\n\t */\n\tpublic function getHeight(): int {\n\t\treturn $this->height;\n\t}\n\n\t/**\n\t * Returns the width.\n\t *\n\t * @return int width\n\t */\n\tpublic function getWidth(): int {\n\t\treturn $this->width;\n\t}\n\n}\n\n/**\n * Interface for PDF structure persistence.\n *\n * @package LAM\\PDF\n */\ninterface PdfStructurePersistenceStrategy {\n\n\t/**\n\t * Returns the names of existing PDF structure templates.\n\t *\n\t * @return array scope => names (e.g. array('user' => array('default')))\n\t * @throws LAMException error reading templates\n\t */\n\tpublic function getPdfStructureTemplateNames() : array;\n\n\t/**\n\t * Deletes a PDF structure template,\n\t *\n\t * @param string $scope user/group/host\n\t * @param string $name template name\n\t * @throws LAMException error deleting template\n\t */\n\tpublic function deletePdfStructureTemplate(string $scope, string $name) : void;\n\n\t/**\n\t * Reads a PDF structure template.\n\t *\n\t * @param string $scope user/group/host\n\t * @param string $name structure name\n\t * @return PDFStructure PDF structure\n\t * @throws LAMException error deleting structure\n\t */\n\tpublic function readPdfStructureTemplate(string $scope, string $name) : PDFStructure;\n\n\t/**\n\t * Saves the PDF structure.\n\t *\n\t * @param string $scope user/group/host\n\t * @param string $name structure name\n\t * @param PDFStructure $structure structure\n\t * @throws LAMException error saving structure\n\t */\n\tpublic function savePdfStructureTemplate(string $scope, string $name, PDFStructure $structure) : void;\n\n\t/**\n\t * Returns a list of template logo file names.\n\t *\n\t * @return string[] logo file names\n\t */\n\tpublic function getPdfTemplateLogoNames() : array;\n\n\t/**\n\t * Returns the binary data for the given template logo.\n\t *\n\t * @param string $name file name\n\t * @return string binary\n\t * @throws LAMException error reading file\n\t */\n\tpublic function getPdfTemplateLogoBinary(string $name) : string;\n\n\t/**\n\t * Deletes a logo in global templates.\n\t *\n\t * @param string $name logo name\n\t * @throws LAMException error during deletion\n\t */\n\tpublic function deletePdfTemplateLogo(string $name) : void;\n\n\t/**\n\t * Saves the template logo.\n\t *\n\t * @param string $name file name\n\t * @param string $data binary data\n\t * @throws LAMException error during save\n\t */\n\tpublic function savePdfTemplateLogo(string $name, string $data) : void;\n\n\t/**\n\t * Returns the list of available PDF logos.\n\t *\n\t * @param string $confName server profile name\n\t * @return string[] logos\n\t * @throws LAMException error reading logos\n\t */\n\tpublic function getPdfLogoNames(string $confName) : array;\n\n\t/**\n\t * Reads a PDF logo.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $name file name\n\t * @return string binary data\n\t * @throws LAMException error reading logo\n\t */\n\tpublic function getPdfLogoBinary(string $confName, string $name) : string;\n\n\t/**\n\t * Deletes a PDF logo.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $name logo name\n\t * @throws LAMException error deleting logo\n\t */\n\tpublic function deletePdfLogo(string $confName, string $name) : void;\n\n\t/**\n\t * Saves a PDF logo.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $name logo name\n\t * @param string $data binary\n\t * @throws LAMException error saving logo\n\t */\n\tpublic function savePdfLogo(string $confName, string $name, string $data) : void;\n\n\t/**\n\t * Returns all available PDF structure definitions for the submitted account type.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $typeId the account type\n\t *\n\t * @return string[] structure names\n\t * @throws LAMException error reading structures\n\t */\n\tpublic function getPDFStructures(string $confName, string $typeId) : array;\n\n\t/**\n\t * Deletes a PDF structure.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $typeId user/group/host\n\t * @param string $name structure name\n\t * @throws LAMException error deleting structure\n\t */\n\tpublic function deletePdfStructure(string $confName, string $typeId, string $name) : void;\n\n\t/**\n\t * Reads a PDF structure.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $typeId user/group/host\n\t * @param string $name structure name\n\t * @return PDFStructure PDF structure\n\t * @throws LAMException error deleting structure\n\t */\n\tpublic function readPdfStructure(string $confName, string $typeId, string $name) : PDFStructure;\n\n\t/**\n\t * Saves the PDF structure.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $typeId user/group/host\n\t * @param string $name structure name\n\t * @param PDFStructure $structure structure\n\t * @throws LAMException error saving structure\n\t */\n\tpublic function savePdfStructure(string $confName, string $typeId, string $name, PDFStructure $structure) : void;\n\n}\n\n/**\n * Manages PDF structures on file system.\n *\n * @package LAM\\PDF\n */\nclass PdfStructurePersistenceStrategyFiles implements PdfStructurePersistenceStrategy {\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPdfStructureTemplateNames(): array {\n\t\t$templatePath = __DIR__ . '/../config/templates/pdf';\n\t\t$templateDir = @dir($templatePath);\n\t\t$allTemplates = array();\n\t\tif ($templateDir) {\n\t\t\t$entry = $templateDir->read();\n\t\t\twhile ($entry){\n\t\t\t\t$parts = explode('.', $entry);\n\t\t\t\tif ((strlen($entry) > 3) && (sizeof($parts) == 3)) {\n\t\t\t\t\t$name = $parts[0];\n\t\t\t\t\t$scope = $parts[1];\n\t\t\t\t\t$allTemplates[$scope][] = $name;\n\t\t\t\t}\n\t\t\t\t$entry = $templateDir->read();\n\t\t\t}\n\t\t}\n\t\treturn $allTemplates;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function deletePdfStructureTemplate(string $scope, string $name): void {\n\t\t$fileName = $this-> getPdfStructureTemplateFileName($scope, $name);\n\t\t$deleted = @unlink($fileName);\n\t\tif (!$deleted) {\n\t\t\tthrow new LAMException(_(\"Unable to delete PDF structure!\"));\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function readPdfStructureTemplate(string $scope, string $name): PDFStructure {\n\t\t$fileName = $this->getPdfStructureTemplateFileName($scope, $name);\n\t\tif (!is_file($fileName) || !is_readable($fileName)) {\n\t\t\tthrow new LAMException(_('Unable to read PDF structure.'));\n\t\t}\n\t\t$handle = fopen($fileName, 'r');\n\t\t$xmlData = fread($handle, 100000000);\n\t\tfclose($handle);\n\t\t$reader = new PDFStructureReader();\n\t\treturn $reader->read($xmlData);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function savePdfStructureTemplate(string $scope, string $name, PDFStructure $structure): void {\n\t\t$fileName = $this->getPdfStructureTemplateFileName($scope, $name);\n\t\t$writer = new PDFStructureWriter();\n\t\t$xml = $writer->getXML($structure);\n\t\t$file = @fopen($fileName, \"w\");\n\t\tif (!$file) {\n\t\t\tlogNewMessage(LOG_ERR, 'Unable to write ' . $fileName);\n\t\t\tthrow new LAMException(_('Unable to save PDF structure.'));\n\t\t}\n\t\tfputs($file, $xml);\n\t\tfclose($file);\n\t}\n\n\t/**\n\t * Returns the file name for a PDF structure.\n\t *\n\t * @param string $scope user/group/host\n\t * @param string $name structure name\n\t * @return string file name\n\t */\n\tprivate function getPdfStructureTemplateFileName(string $scope, string $name) : string {\n\t\treturn __DIR__ . '/../config/templates/pdf/' . $name . '.' . $scope . '.xml';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPdfTemplateLogoNames(): array {\n\t\t$templatePath = __DIR__ . '/../config/templates/pdf/logos';\n\t\t$templateDir = @dir($templatePath);\n\t\t$logos = array();\n\t\tif ($templateDir) {\n\t\t\t$entry = $templateDir->read();\n\t\t\twhile ($entry){\n\t\t\t\tif ((strpos($entry, '.') !== 0) && is_file($templatePath . '/' . $entry)) {\n\t\t\t\t\t$logos[] = $entry;\n\t\t\t\t}\n\t\t\t\t$entry = $templateDir->read();\n\t\t\t}\n\t\t}\n\t\treturn $logos;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPdfTemplateLogoBinary(string $name): string {\n\t\t$fileName = $this->getPdfTemplateLogoFileName($name);\n\t\t$handle = fopen($fileName, 'r');\n\t\t$logoBinary = fread($handle, 100000000);\n\t\tfclose($handle);\n\t\treturn $logoBinary;\n\t}\n\n\t/**\n\t * Returns the file name of a given logo.\n\t *\n\t * @param string $name logo name\n\t * @return string file name\n\t */\n\tprivate function getPdfTemplateLogoFileName(string $name) : string {\n\t\treturn __DIR__ . '/../config/templates/pdf/logos/' . $name;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function deletePdfTemplateLogo(string $name): void {\n\t\t$fileName = $this->getPdfTemplateLogoFileName($name);\n\t\t$deleted = @unlink($fileName);\n\t\tif (!$deleted) {\n\t\t\tthrow new LAMException(_('Unable to delete logo file.'));\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function savePdfTemplateLogo(string $name, string $data): void {\n\t\t$fileName = $this->getPdfTemplateLogoFileName($name);\n\t\t$file = @fopen($fileName, \"w\");\n\t\tif (!$file) {\n\t\t\tlogNewMessage(LOG_ERR, 'Unable to write ' . $fileName);\n\t\t\tthrow new LAMException(_('Unable to upload logo file.'));\n\t\t}\n\t\tfputs($file, $data);\n\t\tfclose($file);\n\t}\n\n\t/**\n\t * Returns the file name of a given logo.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $name logo name\n\t * @return string file name\n\t */\n\tprivate function getPdfLogoFileName(string $confName, string $name) : string {\n\t\treturn __DIR__ . '/../config/pdf/' . $confName . '/logos/' . $name;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPdfLogoNames(string $confName): array {\n\t\t$return = array();\n\t\t$dirPath = __DIR__ . '/../config/pdf/' . $confName . '/logos/';\n\t\tif (!is_dir($dirPath)) {\n\t\t\tmkdir($dirPath, 0700, true);\n\t\t}\n\t\t$dirHandle = opendir($dirPath);\n\t\tif ($dirHandle === false) {\n\t\t\tthrow new LAMException(_('Unable to read logos.'));\n\t\t}\n\t\twhile ($file = readdir($dirHandle)) {\n\t\t\tif (!is_dir($file) && $file != '.' && $file != '..' && preg_match('/\\\\.(jpg|png)$/i', $file)) {\n\t\t\t\t$return[] = $file;\n\t\t\t}\n\t\t}\n\t\treturn $return;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPdfLogoBinary(string $confName, string $name): string {\n\t\t$fileName = $this->getPdfLogoFileName($confName, $name);\n\t\t$handle = fopen($fileName, 'r');\n\t\t$logoBinary = fread($handle, 100000000);\n\t\tfclose($handle);\n\t\treturn $logoBinary;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function deletePdfLogo(string $confName, string $name): void {\n\t\t// delete file\n\t\t$success = @unlink($this->getPdfLogoFileName($confName, $name));\n\t\tif (!$success) {\n\t\t\tthrow new LAMException(_('Unable to delete logo file.'), $name);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function savePdfLogo(string $confName, string $name, string $data): void {\n\t\t$fileName = $this->getPdfLogoFileName($confName, $name);\n\t\t$basePath = dirname($fileName);\n\t\tif (!file_exists($basePath)) {\n\t\t\tmkdir($basePath, 0700, true);\n\t\t}\n\t\t$file = @fopen($fileName, \"w\");\n\t\tif (!$file) {\n\t\t\tlogNewMessage(LOG_ERR, 'Unable to write ' . $fileName);\n\t\t\tthrow new LAMException(_('Unable to upload logo file.'));\n\t\t}\n\t\tfputs($file, $data);\n\t\tfclose($file);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPDFStructures(string $confName, string $typeId): array {\n\t\t$return = array();\n\t\t$path = __DIR__ . '/../config/pdf/' . $confName;\n\t\tif (is_dir($path) && is_readable($path)) {\n\t\t\t$dirHandle = opendir($path);\n\t\t\twhile($file = readdir($dirHandle)) {\n\t\t\t\t$struct_file = explode('.', $file);\n\t\t\t\tif(!is_dir($path . $file)\n\t\t\t\t\t&& ($file != '.')\n\t\t\t\t\t&& ($file != '..')\n\t\t\t\t\t&& (sizeof($struct_file) === 3)\n\t\t\t\t\t&& ($struct_file[1] === $typeId)\n\t\t\t\t\t&& ($struct_file[2] === 'xml')) {\n\t\t\t\t\tarray_push($return, $struct_file[0]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $return;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function deletePdfStructure(string $confName, string $typeId, string $name): void {\n\t\t$fileName = $this->getPdfStructureFileName($confName, $typeId, $name);\n\t\tif (!is_file($fileName) || !is_writable($fileName)) {\n\t\t\tlogNewMessage(LOG_ERR, 'PDF structure does not exist or is not writable: ' . $fileName);\n\t\t\tthrow new LAMException(_('Unable to delete PDF structure!'));\n\t\t}\n\t\t$deleteOk = @unlink($fileName);\n\t\tif (!$deleteOk) {\n\t\t\tlogNewMessage(LOG_ERR, 'PDF structure delete failed: ' . $fileName);\n\t\t\tthrow new LAMException(_('Unable to delete PDF structure!'));\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function readPdfStructure(string $confName, string $typeId, string $name): PDFStructure {\n\t\t$fileName = $this->getPdfStructureFileName($confName, $typeId, $name);\n\t\tif (!is_file($fileName) || !is_readable($fileName)) {\n\t\t\tthrow new LAMException(_('Unable to read PDF structure.'));\n\t\t}\n\t\t$handle = fopen($fileName, 'r');\n\t\t$xmlData = fread($handle, 100000000);\n\t\tfclose($handle);\n\t\t$reader = new PDFStructureReader();\n\t\treturn $reader->read($xmlData);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function savePdfStructure(string $confName, string $typeId, string $name, PDFStructure $structure): void {\n\t\t$fileName = $this->getPdfStructureFileName($confName, $typeId, $name);\n\t\t$basePath = dirname($fileName);\n\t\tif (!file_exists($basePath)) {\n\t\t\tmkdir($basePath, 0700, true);\n\t\t}\n\t\t$writer = new PDFStructureWriter();\n\t\t$xml = $writer->getXML($structure);\n\t\t$file = @fopen($fileName, \"w\");\n\t\tif (!$file) {\n\t\t\tlogNewMessage(LOG_ERR, 'Unable to write ' . $fileName);\n\t\t\tthrow new LAMException(_('Unable to save PDF structure.'));\n\t\t}\n\t\tfputs($file, $xml);\n\t\tfclose($file);\n\t}\n\n\t/**\n\t * Returns the file name of the structure.\n\t *\n\t * @param string $confName server profile name\n\t * @param string $typeId user/group/host\n\t * @param string $name structure name\n\t * @return string file name\n\t */\n\tprivate function getPdfStructureFileName(string $confName, string $typeId, string $name) : string {\n\t\treturn dirname(__FILE__) . '/../config/pdf/' . $confName . '/' . $name . '.' . $typeId . '.xml';\n\t}\n\n}\n\n/**\n * Manages PDF structures on file system.\n *\n * @package LAM\\PDF\n */\nclass PdfStructurePersistenceStrategyPdo implements PdfStructurePersistenceStrategy {\n\n\tconst TABLE_NAME = 'pdf_structures';\n\tconst TABLE_NAME_LOGOS = 'pdf_logos';\n\tconst TABLE_NAME_TEMPLATES = 'pdf_structures_templates';\n\tconst TABLE_NAME_TEMPLATES_LOGOS = 'pdf_logos_templates';\n\n\t/**\n\t * @var PDO\n\t */\n\tprivate $pdo;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param PDO $pdo PDO\n\t */\n\tpublic function __construct(PDO $pdo) {\n\t\t$this->pdo = $pdo;\n\t\t$this->checkSchema();\n\t}\n\n\t/**\n\t * Checks if the schema has latest version.\n\t */\n\tprivate function checkSchema() : void {\n\t\tif (!dbTableExists($this->pdo, self::TABLE_NAME)) {\n\t\t\t$this->createInitialSchema();\n\t\t}\n\t}\n\n\t/**\n\t * Creates the initial schema.\n\t */\n\tpublic function createInitialSchema() : void {\n\t\tlogNewMessage(LOG_DEBUG, 'Creating database table ' . self::TABLE_NAME);\n\t\t$sql = 'create table ' . self::TABLE_NAME . '('\n\t\t\t. 'position int NOT NULL,'\n\t\t\t. 'confname VARCHAR(300) NOT NULL,'\n\t\t\t. 'typeid VARCHAR(300) NOT NULL,'\n\t\t\t. 'name VARCHAR(300) NOT NULL,'\n\t\t\t. 'data TEXT NOT NULL,'\n\t\t\t. 'PRIMARY KEY(position)'\n\t\t\t. ');';\n\t\t$this->pdo->exec($sql);\n\t\tlogNewMessage(LOG_DEBUG, 'Creating database table ' . self::TABLE_NAME_TEMPLATES);\n\t\t$sql = 'create table ' . self::TABLE_NAME_TEMPLATES . '('\n\t\t\t. 'scope VARCHAR(100) NOT NULL,'\n\t\t\t. 'name VARCHAR(300) NOT NULL,'\n\t\t\t. 'data TEXT NOT NULL,'\n\t\t\t. 'PRIMARY KEY(scope,name)'\n\t\t\t. ');';\n\t\t$this->pdo->exec($sql);\n\t\tlogNewMessage(LOG_DEBUG, 'Creating database table ' . self::TABLE_NAME_LOGOS);\n\t\t$sql = 'create table ' . self::TABLE_NAME_LOGOS . '('\n\t\t\t. 'confname VARCHAR(300) NOT NULL,'\n\t\t\t. 'name VARCHAR(300) NOT NULL,'\n\t\t\t. 'data LONGBLOB NOT NULL,'\n\t\t\t. 'PRIMARY KEY(confname,name)'\n\t\t\t. ');';\n\t\t$this->pdo->exec($sql);\n\t\tlogNewMessage(LOG_DEBUG, 'Creating database table ' . self::TABLE_NAME_TEMPLATES_LOGOS);\n\t\t$sql = 'create table ' . self::TABLE_NAME_TEMPLATES_LOGOS . '('\n\t\t\t. 'name VARCHAR(300) NOT NULL,'\n\t\t\t. 'data LONGBLOB NOT NULL,'\n\t\t\t. 'PRIMARY KEY(name)'\n\t\t\t. ');';\n\t\t$this->pdo->exec($sql);\n\t\t$sql = 'insert into ' . ConfigurationDatabase::TABLE_SCHEMA_VERSIONS . ' (name, version) VALUES (\"pdf_structures\", 1);';\n\t\t$this->pdo->exec($sql);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPdfStructureTemplateNames(): array {\n\t\t$statement = $this->pdo->prepare(\"SELECT scope, name FROM \" . self::TABLE_NAME_TEMPLATES);\n\t\t$statement->execute();\n\t\t$results = $statement->fetchAll();\n\t\t$profiles = array();\n\t\tforeach ($results as $result) {\n\t\t\t$profiles[$result['scope']][] = $result['name'];\n\t\t}\n\t\treturn $profiles;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function deletePdfStructureTemplate(string $scope, string $name): void {\n\t\t$statement = $this->pdo->prepare(\"DELETE FROM \" . self::TABLE_NAME_TEMPLATES . \" WHERE scope = ? AND name = ?\");\n\t\t$statement->execute(array($scope, $name));\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function readPdfStructureTemplate(string $scope, string $name): PDFStructure {\n\t\t$statement = $this->pdo->prepare(\"SELECT data FROM \" . self::TABLE_NAME_TEMPLATES . ' WHERE scope = ? AND name = ?');\n\t\t$statement->execute(array($scope, $name));\n\t\t$results = $statement->fetchAll();\n\t\tif (empty($results)) {\n\t\t\tthrow new LAMException(_('Unable to read PDF structure.'));\n\t\t}\n\t\t$structure = new PDFStructure();\n\t\t$structure->import(json_decode($results[0]['data'], true));\n\t\treturn $structure;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function savePdfStructureTemplate(string $scope, string $name, PDFStructure $structure): void {\n\t\t$json = json_encode($structure->export());\n\t\t$statement = $this->pdo->prepare(\"SELECT name FROM \" . self::TABLE_NAME_TEMPLATES . \" WHERE scope = ? AND name = ?\");\n\t\t$statement->execute(array($scope, $name));\n\t\t$results = $statement->fetchAll();\n\t\t$isExisting = !empty($results);\n\t\tif ($isExisting) {\n\t\t\t$statement = $this->pdo->prepare(\"UPDATE \" . self::TABLE_NAME_TEMPLATES . \" SET data = ? WHERE scope = ? AND name = ?\");\n\t\t\t$statement->execute(array($json, $scope, $name));\n\t\t}\n\t\telse {\n\t\t\t$statement = $this->pdo->prepare(\"INSERT INTO \" . self::TABLE_NAME_TEMPLATES . \" (scope, name, data) VALUES (?, ?, ?)\");\n\t\t\t$statement->execute(array($scope, $name, $json));\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPdfTemplateLogoNames(): array {\n\t\t$statement = $this->pdo->prepare(\"SELECT name FROM \" . self::TABLE_NAME_TEMPLATES_LOGOS);\n\t\t$statement->execute();\n\t\t$results = $statement->fetchAll();\n\t\t$logos = array();\n\t\tforeach ($results as $result) {\n\t\t\t$logos[] = $result['name'];\n\t\t}\n\t\treturn $logos;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPdfTemplateLogoBinary(string $name): string {\n\t\t$statement = $this->pdo->prepare(\"SELECT data FROM \" . self::TABLE_NAME_TEMPLATES_LOGOS . ' WHERE name = ?');\n\t\t$statement->execute(array($name));\n\t\t$results = $statement->fetchAll();\n\t\tif (empty($results)) {\n\t\t\tthrow new LAMException(_('Unable to read logo file.'));\n\t\t}\n\t\treturn $results[0]['data'];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function deletePdfTemplateLogo(string $name): void {\n\t\t$statement = $this->pdo->prepare(\"DELETE FROM \" . self::TABLE_NAME_TEMPLATES_LOGOS . \" WHERE name = ?\");\n\t\t$statement->execute(array($name));\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function savePdfTemplateLogo(string $name, string $data): void {\n\t\t$statement = $this->pdo->prepare(\"SELECT name FROM \" . self::TABLE_NAME_TEMPLATES_LOGOS . \" WHERE name = ?\");\n\t\t$statement->execute(array($name));\n\t\t$results = $statement->fetchAll();\n\t\t$isExisting = !empty($results);\n\t\tif ($isExisting) {\n\t\t\t$statement = $this->pdo->prepare(\"UPDATE \" . self::TABLE_NAME_TEMPLATES_LOGOS . \" SET data = ? WHERE name = ?\");\n\t\t\t$statement->execute(array($data, $name));\n\t\t}\n\t\telse {\n\t\t\t$statement = $this->pdo->prepare(\"INSERT INTO \" . self::TABLE_NAME_TEMPLATES_LOGOS . \" (name, data) VALUES (?, ?)\");\n\t\t\t$statement->execute(array($name, $data));\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPdfLogoNames(string $confName): array {\n\t\t$statement = $this->pdo->prepare(\"SELECT name FROM \" . self::TABLE_NAME_LOGOS . ' WHERE confname = ?');\n\t\t$statement->execute(array($confName));\n\t\t$results = $statement->fetchAll();\n\t\t$logos = array();\n\t\tforeach ($results as $result) {\n\t\t\t$logos[] = $result['name'];\n\t\t}\n\t\treturn $logos;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPdfLogoBinary(string $confName, string $name): string {\n\t\t$statement = $this->pdo->prepare(\"SELECT data FROM \" . self::TABLE_NAME_LOGOS . ' WHERE confname = ? AND name = ?');\n\t\t$statement->execute(array($confName, $name));\n\t\t$results = $statement->fetchAll();\n\t\tif (empty($results)) {\n\t\t\tthrow new LAMException(_('Unable to read logo file.'));\n\t\t}\n\t\treturn $results[0]['data'];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function deletePdfLogo(string $confName, string $name): void {\n\t\t$statement = $this->pdo->prepare(\"DELETE FROM \" . self::TABLE_NAME_LOGOS . \" WHERE confname = ? AND name = ?\");\n\t\t$statement->execute(array($confName, $name));\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function savePdfLogo(string $confName, string $name, string $data): void {\n\t\t$statement = $this->pdo->prepare(\"SELECT name FROM \" . self::TABLE_NAME_LOGOS . \" WHERE confname = ? AND name = ?\");\n\t\t$statement->execute(array($confName, $name));\n\t\t$results = $statement->fetchAll();\n\t\t$isExisting = !empty($results);\n\t\tif ($isExisting) {\n\t\t\t$statement = $this->pdo->prepare(\"UPDATE \" . self::TABLE_NAME_LOGOS . \" SET data = ? WHERE confname = ? AND name = ?\");\n\t\t\t$statement->execute(array($data, $confName, $name));\n\t\t}\n\t\telse {\n\t\t\t$statement = $this->pdo->prepare(\"INSERT INTO \" . self::TABLE_NAME_LOGOS . \" (confname, name, data) VALUES (?, ?, ?)\");\n\t\t\t$statement->execute(array($confName, $name, $data));\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function getPDFStructures(string $confName, string $typeId): array {\n\t\t$statement = $this->pdo->prepare(\"SELECT name FROM \" . self::TABLE_NAME . ' WHERE confname = ? AND typeid = ?');\n\t\t$statement->execute(array($confName, $typeId));\n\t\t$results = $statement->fetchAll();\n\t\t$names = array();\n\t\tforeach ($results as $result) {\n\t\t\t$names[] = $result['name'];\n\t\t}\n\t\treturn $names;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function deletePdfStructure(string $confName, string $typeId, string $name): void {\n\t\t$statement = $this->pdo->prepare(\"DELETE FROM \" . self::TABLE_NAME . \" WHERE confname = ? AND typeid = ? AND name = ?\");\n\t\t$statement->execute(array($confName, $typeId, $name));\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function readPdfStructure(string $confName, string $typeId, string $name): PDFStructure {\n\t\t$statement = $this->pdo->prepare(\"SELECT data FROM \" . self::TABLE_NAME . ' WHERE confname = ? AND typeid = ? AND name = ?');\n\t\t$statement->execute(array($confName, $typeId, $name));\n\t\t$results = $statement->fetchAll();\n\t\tif (empty($results)) {\n\t\t\tthrow new LAMException(_('Unable to read PDF structure.'));\n\t\t}\n\t\t$structure = new PDFStructure();\n\t\t$structure->import(json_decode($results[0]['data'], true));\n\t\treturn $structure;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic function savePdfStructure(string $confName, string $typeId, string $name, PDFStructure $structure): void {\n\t\t$json = json_encode($structure->export());\n\t\t$statement = $this->pdo->prepare(\"SELECT name FROM \" . self::TABLE_NAME . \" WHERE confname = ? AND typeid = ? AND name = ?\");\n\t\t$statement->execute(array($confName, $typeId, $name));\n\t\t$results = $statement->fetchAll();\n\t\t$isExisting = !empty($results);\n\t\tif ($isExisting) {\n\t\t\t$statement = $this->pdo->prepare(\"UPDATE \" . self::TABLE_NAME . \" SET data = ? WHERE confname = ? AND typeid = ? AND name = ?\");\n\t\t\t$statement->execute(array($json, $confName, $typeId, $name));\n\t\t}\n\t\telse {\n\t\t\t$positionStatement = $this->pdo->prepare(\"SELECT MAX(position) AS position FROM \" . self::TABLE_NAME);\n\t\t\t$positionStatement->execute();\n\t\t\t$positionResult = $positionStatement->fetchAll();\n\t\t\t$position = $positionResult[0]['position'] + 1;\n\t\t\t$statement = $this->pdo->prepare(\"INSERT INTO \" . self::TABLE_NAME . \" (position, confname, typeid, name, data) VALUES (?, ?, ?, ?, ?)\");\n\t\t\t$statement->execute(array($position, $confName, $typeId, $name, $json));\n\t\t}\n\t}\n\n}\n\n/**\n * Reads a PDF structure.\n *\n * @author Roland Gruber\n */\nclass PDFStructureReader {\n\n\t/**\n\t * Reads a PDF structure file.\n\t *\n\t * @param string $data XML data\n\t * @return PDFStructure structure\n\t * @throws LAMException error reading structure\n\t */\n\tpublic function read(string $data) : PDFStructure {\n\t\t$xml = new XMLReader();\n\t\t$xml->XML($data);\n\t\t$structure = new PDFStructure();\n\t\t// open <pdf>\n\t\t@$xml->read();\n\t\tif (!$xml->name == 'pdf') {\n\t\t\tlogNewMessage(LOG_ERR, 'Unknown tag name: ' . $xml->name);\n\t\t\tthrow new LAMException(_('Unable to read PDF structure.'));\n\t\t}\n\t\t$structure->setLogo($xml->getAttribute('filename'));\n\t\t$structure->setTitle($xml->getAttribute('headline'));\n\t\t$structure->setFoldingMarks($xml->getAttribute('foldingmarks'));\n\t\t$sections = array();\n\t\twhile ($xml->read()) {\n\t\t\tif (($xml->nodeType === XMLReader::SIGNIFICANT_WHITESPACE)\n\t\t\t\t\t|| (($xml->name === 'pdf') && ($xml->nodeType == XMLReader::END_ELEMENT))) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telseif ($xml->name === 'text') {\n\t\t\t\t$xml->read();\n\t\t\t\t$sections[] = new PDFTextSection($xml->value);\n\t\t\t\t$xml->read();\n\t\t\t\tif (!$xml->name === 'text') {\n\t\t\t\t\tlogNewMessage(LOG_ERR, 'Unexpected tag name: ' . $xml->name);\n\t\t\t\t\tthrow new LAMException(_('Unable to read PDF structure.'));\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif ($xml->name === 'section') {\n\t\t\t\t$sections[] = $this->readSection($xml);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlogNewMessage(LOG_ERR, 'Unexpected tag name: ' . $xml->name);\n\t\t\t\tthrow new LAMException(_('Unable to read PDF structure.'));\n\t\t\t}\n\t\t}\n\t\t$xml->close();\n\t\t$structure->setSections($sections);\n\t\treturn $structure;\n\t}\n\n\t/**\n\t * Reads a single section from XML.\n\t *\n\t * @param XMLReader $xml reader\n\t * @return PDFEntrySection section\n\t * @throws LAMException unable to parse section\n\t */\n\tprivate function readSection(XMLReader $xml) : PDFEntrySection {\n\t\t$section = new PDFEntrySection($xml->getAttribute('name'));\n\t\t$entries = array();\n\t\twhile ($xml->read()) {\n\t\t\tif (($xml->name === 'section') && ($xml->nodeType == \\XMLReader::END_ELEMENT)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telseif (($xml->nodeType === \\XMLReader::END_ELEMENT)\n\t\t\t\t\t|| ($xml->nodeType === \\XMLReader::SIGNIFICANT_WHITESPACE)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telseif ($xml->name === 'entry') {\n\t\t\t\t$entries[] = new PDFSectionEntry($xml->getAttribute('name'));\n\t\t\t}\n\t\t\telseif (!$xml->name === 'entry') {\n\t\t\t\tlogNewMessage(LOG_ERR, 'Unexpected tag name: ' . $xml->name);\n\t\t\t\tthrow new LAMException(_('Unable to read PDF structure.'));\n\t\t\t}\n\t\t}\n\t\t$section->setEntries($entries);\n\t\treturn $section;\n\t}\n\n}\n\n/**\n * Writes PDF structures to files.\n *\n * @author Roland Gruber\n */\nclass PDFStructureWriter {\n\n\t/**\n\t * Returns the generated XML.\n\t *\n\t * @param PDFStructure $structure structure\n\t * @return string XML\n\t */\n\tpublic function getXML(PDFStructure $structure) : string {\n\t\t$writer = new XMLWriter();\n\t\t$writer->openMemory();\n\t\t$writer->setIndent(true);\n\t\t$writer->setIndentString(\"\\t\");\n\t\t$writer->startElement('pdf');\n\t\t$writer->writeAttribute('filename', $structure->getLogo());\n\t\t$writer->writeAttribute('headline', $structure->getTitle());\n\t\t$writer->writeAttribute('foldingmarks', $structure->getFoldingMarks());\n\t\tforeach ($structure->getSections() as $section) {\n\t\t\tif ($section instanceof PDFTextSection) {\n\t\t\t\t$writer->startElement('text');\n\t\t\t\t$writer->text($section->getText());\n\t\t\t\t$writer->endElement();\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$writer->startElement('section');\n\t\t\t\tif ($section->isAttributeTitle()) {\n\t\t\t\t\t$writer->writeAttribute('name', '_' . $section->getPdfKey());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$writer->writeAttribute('name', $section->getTitle());\n\t\t\t\t}\n\t\t\t\tforeach ($section->getEntries() as $entry) {\n\t\t\t\t\t$writer->startElement('entry');\n\t\t\t\t\t$writer->writeAttribute('name', $entry->getKey());\n\t\t\t\t\t$writer->endElement();\n\t\t\t\t}\n\t\t\t\t$writer->endElement();\n\t\t\t}\n\t\t}\n\t\t$writer->endElement();\n\t\treturn $writer->outputMemory();\n\t}\n\n}\n\n/**\n * PDF structure\n *\n * @author Roland Gruber\n */\nclass PDFStructure {\n\n\t/** no folding marks */\n\tconst FOLDING_NONE = 'no';\n\t/** standard folding marks */\n\tconst FOLDING_STANDARD = 'standard';\n\n\tprivate $logo = null;\n\n\tprivate $title = 'LDAP Account Manager';\n\n\tprivate $foldingMarks = 'no';\n\n\tprivate $sections = array();\n\n\t/**\n\t * Returns an array representation of the structure.\n\t *\n\t * @return array export data\n\t */\n\tpublic function export() {\n\t\t$data = array();\n\t\t$data['title'] = $this->title;\n\t\t$data['foldingMarks'] = $this->foldingMarks;\n\t\t$data['logo'] = $this->logo;\n\t\t$data['sections'] = array();\n\t\tforeach($this->sections as $section) {\n\t\t\t$type = ($section instanceof PDFTextSection) ? 'text' : 'entry';\n\t\t\t$sectionData = $section->export();\n\t\t\t$data['sections'][] = array(\n\t\t\t\t'type' => $type,\n\t\t\t\t'data' => $sectionData\n\t\t\t);\n\t\t}\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Imports an array representation of the structure.\n\t *\n\t * @param array $data import data\n\t */\n\tpublic function import($data) {\n\t\tif (isset($data['title'])) {\n\t\t\t$this->title = $data['title'];\n\t\t}\n\t\tif (isset($data['foldingMarks'])) {\n\t\t\t$this->foldingMarks = $data['foldingMarks'];\n\t\t}\n\t\tif (isset($data['logo'])) {\n\t\t\t$this->logo = $data['logo'];\n\t\t}\n\t\tif (isset($data['sections'])) {\n\t\t\tforeach($data['sections'] as $section) {\n\t\t\t\tif ($section['type'] === 'text') {\n\t\t\t\t\t$this->sections[] = new PDFTextSection($section['data']);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$entrySection = new PDFEntrySection(null);\n\t\t\t\t\t$entrySection->import($section['data']);\n\t\t\t\t\t$this->sections[] = $entrySection;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the logo file path.\n\t *\n\t * @return string logo\n\t */\n\tpublic function getLogo() {\n\t\treturn $this->logo;\n\t}\n\n\t/**\n\t * Sets the logo file path.\n\t *\n\t * @param string $logo logo\n\t */\n\tpublic function setLogo($logo) {\n\t\t$this->logo = $logo;\n\t}\n\n\t/**\n\t * Returns the title.\n\t *\n\t * @return string title\n\t */\n\tpublic function getTitle() {\n\t\treturn $this->title;\n\t}\n\n\t/**\n\t * Sets the title.\n\t *\n\t * @param string $title title\n\t */\n\tpublic function setTitle($title) {\n\t\t$this->title = $title;\n\t}\n\n\t/**\n\t * Returns if to print folding marks.\n\t *\n\t * @return string print folding marks\n\t */\n\tpublic function getFoldingMarks() {\n\t\treturn $this->foldingMarks;\n\t}\n\n\t/**\n\t * Sets if to print folding marks.\n\t *\n\t * @param string $foldingMarks print folding marks\n\t */\n\tpublic function setFoldingMarks($foldingMarks) {\n\t\t$this->foldingMarks = $foldingMarks;\n\t}\n\n\t/**\n\t * Returns the sections.\n\t *\n\t * @return PDFTextSection[]|PDFEntrySection[] $sections\n\t */\n\tpublic function getSections() {\n\t\treturn $this->sections;\n\t}\n\n\t/**\n\t * Sets the sections.\n\t *\n\t * @param PDFTextSection[]|PDFEntrySection[] $sections sections\n\t */\n\tpublic function setSections($sections) {\n\t\t$this->sections = $sections;\n\t}\n\n}\n\n/**\n * Section for static text.\n *\n * @author Roland Gruber\n */\nclass PDFTextSection {\n\n\tprivate $text = '';\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param string $text text\n\t */\n\tpublic function __construct($text) {\n\t\t$this->text = $text;\n\t}\n\n\t/**\n\t * Exports the section.\n\t *\n\t * @return string text\n\t */\n\tpublic function export() {\n\t\treturn $this->getText();\n\t}\n\n\t/**\n\t * Returns the text.\n\t *\n\t * @return string text\n\t */\n\tpublic function getText() {\n\t\treturn $this->text;\n\t}\n\n}\n\n/**\n * PDF section that contains LDAP data entries.\n *\n * @author Roland Gruber\n */\nclass PDFEntrySection {\n\n\tprivate $title;\n\tprivate $entries = array();\n\n\t/**\n\t * Constructor\n\t *\n\t * @param string $title title\n\t */\n\tpublic function __construct($title) {\n\t\t$this->title = $title;\n\t}\n\n\t/**\n\t * Exports the section.\n\t *\n\t * @return array export data\n\t */\n\tpublic function export() {\n\t\t$data = array();\n\t\t$data['title'] = $this->title;\n\t\t$data['entries'] = array();\n\t\tforeach($this->getEntries() as $entry) {\n\t\t\t$data['entries'][] = $entry->getKey();\n\t\t}\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Imports the section.\n\t *\n\t * @param array $data import data\n\t */\n\tpublic function import($data) {\n\t\tif (isset($data['title'])) {\n\t\t\t$this->title = $data['title'];\n\t\t}\n\t\tif ($data['entries']) {\n\t\t\tforeach($data['entries'] as $entry) {\n\t\t\t\t$this->entries[] = new PDFSectionEntry($entry);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns if the title is an attribute value.\n\t *\n\t * @return boolean is attribute\n\t */\n\tpublic function isAttributeTitle() {\n\t\treturn (bool) preg_match('/^_([a-zA-Z0-9_-])+$/', $this->title);\n\t}\n\n\t/**\n\t * Returns the PDF key name.\n\t *\n\t * @return string PDF key name\n\t */\n\tpublic function getPdfKey() {\n\t\treturn substr($this->title, 1);\n\t}\n\n\t/**\n\t * Returns the text title.\n\t *\n\t * @return string title\n\t */\n\tpublic function getTitle() {\n\t\treturn $this->title;\n\t}\n\n\t/**\n\t * Sets the title text.\n\t *\n\t * @param string $title title\n\t */\n\tpublic function setTitle($title) {\n\t\t$this->title = $title;\n\t}\n\n\t/**\n\t * Returns the entries.\n\t *\n\t * @return PDFSectionEntry[] entries\n\t */\n\tpublic function getEntries() {\n\t\treturn $this->entries;\n\t}\n\n\t/**\n\t * Sets the entries.\n\t *\n\t * @param PDFSectionEntry[] $entries entries\n\t */\n\tpublic function setEntries($entries) {\n\t\t$this->entries = $entries;\n\t}\n\n}\n\n/**\n * Single PDF entry.\n *\n * @author Roland Gruber\n */\nclass PDFSectionEntry {\n\n\tprivate $key;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param string $key key\n\t */\n\tpublic function __construct($key) {\n\t\t$this->key = $key;\n\t}\n\n\t/**\n\t * Returns the PDF key.\n\t *\n\t * @return string $key key\n\t */\n\tpublic function getKey() {\n\t\treturn $this->key;\n\t}\n\n}\n\n/**\n * Returns a list of possible fonts.\n *\n * @return array list of fonts (description => font name)\n */\nfunction getPdfFonts() {\n\treturn array(\n\t\t'DejaVu' => 'DejaVuSerif',\n\t\t_('Chinese Traditional') => 'cid0ct',\n\t\t_('Chinese Simplified') => 'cid0cs',\n\t\t_('Japanese') => 'cid0jp',\n\t\t_('Korean') => 'cid0kr',\n\t);\n}\n", "<?php\n/*\n\n  This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)\n  Copyright (C) 2006 - 2022  Roland Gruber\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n*/\n\n/**\n* This file includes functions to perform several security checks on each page load.\n*\n* @package lib\n* @author Roland Gruber\n*/\n\n/** configuration options */\ninclude_once('config.inc');\n/** ldap connection */\ninclude_once('ldap.inc');\n/** common functions */\ninclude_once('account.inc');\n\n// check client IP address\ncheckClientIP();\n\nsetLAMHeaders();\n\n/**\n * Starts a session and sets the cookie options.\n */\nfunction lam_start_session() {\n\t$secureFlag = false;\n\tif (isset($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) === 'on') {\n\t\t$secureFlag = true;\n\t}\n\tsession_set_cookie_params(0, '/', null, $secureFlag, true);\n\tsession_start();\n}\n\n/**\n * Starts a session and checks the environment.\n * The script is stopped if one of the checks fail (timeout redirection may be overridden).\n *\n * @param boolean $redirectToLogin redirect user to login page (default: true)\n * @param boolean $initSecureData init verification data like session ID and client IP (default: false)\n * @return boolean true if all ok, false if session expired\n */\nfunction startSecureSession($redirectToLogin = true, $initSecureData = false) {\n\t// start session\n\tif (isset($_SESSION)) {\n\t\tunset($_SESSION);\n\t}\n\tif (strtolower(session_module_name()) == 'files') {\n\t\t$sessionDir = dirname(__FILE__) . \"/../sess\";\n\t\tsession_save_path($sessionDir);\n\t\t// enable garbage collection (fix for Debian based systems)\n\t\tif (@ini_get(\"session.gc_probability\") == 0) {\n\t\t\t@ini_set(\"session.gc_probability\", 1);\n\t\t}\n\t}\n\tlam_start_session();\n\t// init secure data if needed\n\tif ($initSecureData && !isset($_SESSION[\"sec_session_id\"])) {\n\t\t$_SESSION[\"sec_session_id\"] = session_id();\n\t\t$_SESSION[\"sec_client_ip\"] = $_SERVER['REMOTE_ADDR'];\n\t\t$_SESSION['sec_sessionTime'] = time();\n\t\t$_SESSION['cfgMain'] = new LAMCfgMain();\n\t}\n\t// set error reporting\n\tif (empty($_SESSION['cfgMain']) || ($_SESSION['cfgMain']->errorReporting == LAMCfgMain::ERROR_REPORTING_DEFAULT)) {\n\t\tini_set('error_reporting', 'E_ALL & ~E_NOTICE');\n\t}\n\telseif ($_SESSION['cfgMain']->errorReporting == LAMCfgMain::ERROR_REPORTING_ALL) {\n\t\tini_set('error_reporting', 'E_ALL');\n\t\tini_set('display_errors', 'On');\n\t}\n\t// check session id\n\tif (! isset($_SESSION[\"sec_session_id\"]) || ($_SESSION[\"sec_session_id\"] != session_id())) {\n\t\t// session id is invalid\n\t\tlogNewMessage(LOG_WARNING, \"Invalid session ID, access denied (\" . getClientIPForLogging() . \")\");\n\t\tif ($redirectToLogin) {\n\t\t\tlogoffAndBackToLoginPage();\n\t\t}\n\t\telse {\n\t\t\tdie();\n\t\t}\n\t}\n\t// check if client IP has not changed\n\tif (!isset($_SESSION[\"sec_client_ip\"]) || ($_SESSION[\"sec_client_ip\"] != $_SERVER['REMOTE_ADDR'])) {\n\t\t// IP is invalid\n\t\tlogNewMessage(LOG_WARNING, \"Client IP changed, access denied (\" . getClientIPForLogging() . \")\");\n\t\tdie();\n\t}\n\t// check if session time has not expired\n\tif (($_SESSION['sec_sessionTime'] + (60 * $_SESSION['cfgMain']->sessionTimeout)) > time()) {\n\t\t// ok, update time\n\t\t$_SESSION['sec_sessionTime'] = time();\n\t}\n\telseif ($redirectToLogin) {\n\t\t// session expired, logoff user\n\t\tlogoffAndBackToLoginPage();\n\t}\n\telse {\n\t\treturn false;\n\t}\n\tsetSSLCaCert();\n\treturn true;\n}\n\n/**\n * Checks if the client's IP address is on the list of allowed IPs.\n * The script is stopped if the host is not valid.\n */\nfunction checkClientIP() {\n\tif (isset($_SESSION['cfgMain'])) {\n\t\t$cfg = $_SESSION['cfgMain'];\n\t}\n\telse {\n\t\t\t$cfg = new LAMCfgMain();\n\t}\n\t$allowedHosts = $cfg->allowedHosts;\n\t$url = getCallingURL();\n\tif ((strpos($url, '/selfService/selfService') !== false) || ((strpos($url, '/misc/ajax.php?') !== false) && strpos($url, 'selfservice=1') !== false)) {\n\t\t// self service pages have separate IP list\n\t\t$allowedHosts = $cfg->allowedHostsSelfService;\n\t}\n\t// skip test if no hosts are defined\n\tif (empty($allowedHosts) || empty($_SERVER['REMOTE_ADDR'])) {\n\t\treturn;\n\t}\n\t$allowedHosts = explode(\",\", $allowedHosts);\n\t$grantAccess = false;\n\tfor ($i = 0; $i < sizeof($allowedHosts); $i++) {\n\t\t$host = $allowedHosts[$i];\n\t\t$ipRegex = '/^[0-9a-z\\\\.:\\\\*]+$/i';\n\t\tif (!preg_match($ipRegex, $host)) {\n\t\t\tcontinue;\n\t\t}\n\t\t$hostRegex = str_replace(\".\", \"\\\\.\", $host);\n\t\t$hostRegex = '/^' . str_replace(\"*\", \".*\", $hostRegex) . '$/';\n\t\t$clientIP = $_SERVER['REMOTE_ADDR'];\n\t\tif (preg_match($hostRegex, $clientIP)) {\n\t\t\t// client is allowed to access LAM\n\t\t\t$grantAccess = true;\n\t\t}\n\t}\n\t// stop script is client may not access LAM\n\tif (!$grantAccess) {\n\t\tlogNewMessage(LOG_WARNING, \"Invalid client IP, access denied (\" . getClientIPForLogging() . \")\");\n\t\tdie();\n\t}\n}\n\n/**\n * Logs off the user and displays the login page.\n *\n */\nfunction logoffAndBackToLoginPage() {\n\t// log message\n\tif (isset($_SESSION['ldap'])) {\n\t\t$ldapUser = $_SESSION['ldap']->getUserName();\n\t\tlogNewMessage(LOG_WARNING, 'Session of user ' . $ldapUser . ' expired.');\n\t\t// close LDAP connection\n\t\t@$_SESSION[\"ldap\"]->destroy();\n\t}\n\telseif (isset($_SESSION['selfService_clientDN']) || (strpos($_SERVER['REQUEST_URI'], '/selfService/') !== false)) {\n\t\tlogNewMessage(LOG_WARNING, 'Self service session of DN ' . lamDecrypt($_SESSION['selfService_clientDN'], 'SelfService') . ' expired.');\n\t}\n\t// delete key and iv in cookie\n\tsetcookie(\"Key\", \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", 0, \"/\", '', false, true);\n\tsetcookie(\"IV\", \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", 0, \"/\", '', false, true);\n\t// link back to login page\n\t$paths = array('./', '../', '../../', '../../../', '../../../../');\n\t$page = 'login.php';\n\t$pageSuffix = '?expired=yes';\n\tif (isset($_SESSION['selfService_clientDN']) || (strpos($_SERVER['REQUEST_URI'], '/selfService/') !== false)) {\n\t\t$scope = $_GET['scope'];\n\t\t$name = $_GET['name'];\n\t\tif (!preg_match('/^[0-9a-zA-Z _-]+$/', $scope) || !preg_match('/^[0-9a-zA-Z _-]+$/', $name)) {\n\t\t\tlogNewMessage(LOG_ERR, 'GET parameters invalid: ' . $name . ' ' . $scope);\n\t\t\tdie();\n\t\t}\n\t\t$page = 'selfServiceLogin.php';\n\t\t$pageSuffix = '?expired=yes&scope=' . $scope . '&name=' . $name;\n\t}\n\tfor ($i = 0; $i < sizeof($paths); $i++) {\n\t\tif (file_exists($paths[$i] . $page)) {\n\t\t\t$page = $paths[$i] . $page;\n\t\t\tbreak;\n\t\t}\n\t}\n\t$page .= $pageSuffix;\n\techo $_SESSION['header'];\n\techo \"<title></title>\\n\";\n\techo \"</head>\\n\";\n\techo \"<body>\\n\";\n\t// print JavaScript refresh\n\techo \"<script type=\\\"text/javascript\\\">\\n\";\n\techo \"top.location.href = \\\"\" . $page . \"\\\";\\n\";\n\techo \"</script>\\n\";\n\t// print link if refresh does not work\n\techo \"<p>\\n\";\n\techo \"<a target=\\\"_top\\\" href=\\\"\" . $page . \"\\\">\" . _(\"Your session expired, click here to go back to the login page.\") . \"</a>\\n\";\n\techo \"</p>\\n\";\n\techo \"</body>\\n\";\n\techo \"</html>\\n\";\n\t// destroy session\n\tsession_destroy();\n\tunset($_SESSION);\n\tdie();\n}\n\n/**\n * Returns if debug messages are to be logged.\n *\n * @return boolean debug enabled\n */\nfunction isDebugLoggingEnabled() {\n\tif (isset($_SESSION['cfgMain'])) {\n\t\t$cfg = $_SESSION['cfgMain'];\n\t}\n\telse {\n\t\t$cfg = new LAMCfgMain();\n\t}\n\treturn $cfg->logLevel >= LOG_DEBUG;\n}\n\n/**\n * Puts a new message in the log file.\n *\n * @param string $level log level (LOG_DEBUG, LOG_NOTICE, LOG_WARNING, LOG_ERR)\n * @param string $message log message\n */\nfunction logNewMessage($level, $message) : void {\n\t$possibleLevels = array(\n\t\tLOG_DEBUG => 'DEBUG',\n\t\tLOG_NOTICE => 'NOTICE',\n\t\tLOG_WARNING => 'WARNING',\n\t\tLOG_ERR => 'ERROR');\n\tif (!in_array($level, array_keys($possibleLevels))) {\n\t\tStatusMessage('ERROR', 'Invalid log level!', $level);\n\t\treturn;\n\t}\n\tif (isset($_SESSION['cfgMain'])) {\n\t\t$cfg = $_SESSION['cfgMain'];\n\t}\n\telse {\n\t\t\t$cfg = new LAMCfgMain();\n\t\t\t$_SESSION['cfgMain'] = $cfg;\n\t}\n\t// check if logging is disabled\n\tif (($cfg->logDestination == 'NONE')\n\t\t\t// check if log level is high enough\n\t\t\t|| ($cfg->logLevel < $level)) {\n\t\treturn;\n\t}\n\t// ok to log, build log message\n\t$prefix = \"LDAP Account Manager (\" . session_id() . ' - ' . getClientIPForLogging() . ' - ' . getLamLdapUser() . \") - \" . $possibleLevels[$level] . \": \";\n\t$message = $prefix . $message;\n\t// Syslog logging\n\tif ($cfg->logDestination == 'SYSLOG') {\n\t\tsyslog($level, $message);\n\t}\n\t// remote logging\n\telseif (strpos($cfg->logDestination, 'REMOTE') === 0) {\n\t\tlamLogRemoteMessage($level, $message, $cfg);\n\t}\n\t// log to file\n\telse {\n\t\t@touch($cfg->logDestination);\n\t\tif (is_writable($cfg->logDestination)) {\n\t\t\t$file = fopen($cfg->logDestination, 'a');\n\t\t\tif ($file) {\n\t\t\t\t$timeZone = 'UTC';\n\t\t\t\t$sysTimeZone = @date_default_timezone_get();\n\t\t\t\tif (!empty($sysTimeZone)) {\n\t\t\t\t\t$timeZone = $sysTimeZone;\n\t\t\t\t}\n\t\t\t\t$time = new DateTime('now', new DateTimeZone($timeZone));\n\t\t\t\tfwrite($file, $time->format('Y-m-d H:i:s') . ': ' . $message . \"\\n\");\n\t\t\t\tfclose($file);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tStatusMessage('ERROR', 'Unable to write to log file!', $cfg->logDestination);\n\t\t}\n\t}\n}\n\n/**\n * Checks if write access to LDAP is allowed.\n *\n * @param String $scope account type (e.g. user)\n * @return boolean true, if allowed\n */\nfunction checkIfWriteAccessIsAllowed($scope = null) {\n\tif (!isset($_SESSION['config'])) {\n\t\treturn false;\n\t}\n\tif ($_SESSION['config']->getAccessLevel() >= LAMConfig::ACCESS_ALL) {\n\t\t$typeSettings = $_SESSION['config']->get_typeSettings();\n\t\tif (($scope == null)\n\t\t\t\t// check if write for this type is allowed\n\t\t\t\t|| !isset($typeSettings['readOnly_' . $scope])\n\t\t\t\t|| !$typeSettings['readOnly_' . $scope]) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n/**\n * Checks if passwords may be changed.\n *\n * @return boolean true, if allowed\n */\nfunction checkIfPasswordChangeIsAllowed() {\n\tif (!isset($_SESSION['config'])) {\n\t\treturn false;\n\t}\n\tif ($_SESSION['config']->getAccessLevel() >= LAMConfig::ACCESS_PASSWORD_CHANGE) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n/**\n * Checks if it is allowed to create new LDAP entries of the given type.\n * This also checks if general write access is enabled.\n *\n * @param String $scope account type (e.g. 'user')\n * @return boolean true, if new entries are allowed\n */\nfunction checkIfNewEntriesAreAllowed($scope) {\n\tif (!isLAMProVersion()) {\n\t\treturn true;\n\t}\n\tif (!isset($_SESSION['config']) || empty($scope)) {\n\t\treturn false;\n\t}\n\t$typeSettings = $_SESSION['config']->get_typeSettings();\n\tif (isset($typeSettings['hideNewButton_' . $scope]) && $typeSettings['hideNewButton_' . $scope]) {\n\t\treturn false;\n\t}\n\treturn checkIfWriteAccessIsAllowed();\n}\n\n/**\n * Checks if it is allowed to delete LDAP entries of the given type.\n *\n * @param String $scope account type (e.g. 'user')\n * @return boolean true, if entries may be deleted\n */\nfunction checkIfDeleteEntriesIsAllowed($scope) {\n\tif (!isLAMProVersion()) {\n\t\treturn true;\n\t}\n\tif (!isset($_SESSION['config']) || empty($scope)) {\n\t\treturn false;\n\t}\n\t$typeSettings = $_SESSION['config']->get_typeSettings();\n\tif (isset($typeSettings['hideDeleteButton_' . $scope]) && $typeSettings['hideDeleteButton_' . $scope]) {\n\t\treturn false;\n\t}\n\treturn checkIfWriteAccessIsAllowed();\n}\n\n/**\n * Checks if the password fulfills the password policies.\n *\n * @param String $password password\n * @param String|array $userNames user name(s)\n * @param array $otherUserAttrs user's first/last name\n * @return mixed true if ok, string with error message if not valid\n */\nfunction checkPasswordStrength($password, $userNames, $otherUserAttrs) {\n\tif (($userNames !== null) && !is_array($userNames)) {\n\t\t$userNames = array($userNames);\n\t}\n\tif ($password == null) {\n\t\t$password = \"\";\n\t}\n\tif (isset($_SESSION['cfgMain'])) {\n\t\t$cfg = $_SESSION['cfgMain'];\n\t}\n\telse {\n\t\t$cfg = new LAMCfgMain();\n\t}\n\t// check length\n\t$minLength = $cfg->passwordMinLength;\n\tif (isset($_SESSION['config']) && is_numeric($_SESSION['config']->getPwdPolicyMinLength())) {\n\t\t$minLength = $_SESSION['config']->getPwdPolicyMinLength();\n\t}\n\tif (strlen($password) < $minLength) {\n\t\treturn sprintf(_('The password is too short. You have to enter at least %s characters.'), $minLength);\n\t}\n\t// get number of characters per character class\n\t$lower = 0;\n\t$upper = 0;\n\t$numeric = 0;\n\t$symbols = 0;\n\tfor ($i = 0; $i < strlen($password); $i++) {\n\t\tif (preg_match(\"/[a-z]/\", $password[$i])) {\n\t\t\t$lower++;\n\t\t}\n\t\tif (preg_match(\"/[A-Z]/\", $password[$i])) {\n\t\t\t$upper++;\n\t\t}\n\t\tif (preg_match(\"/[0-9]/\", $password[$i])) {\n\t\t\t$numeric++;\n\t\t}\n\t\tif (preg_match(\"/[^a-z0-9]/i\", $password[$i])) {\n\t\t\t$symbols++;\n\t\t}\n\t}\n\t$rulesMatched = 0;\n\t// check lower case\n\t$minLower = $cfg->passwordMinLower;\n\tif (isset($_SESSION['config']) && is_numeric($_SESSION['config']->getpwdPolicyMinLowercase())) {\n\t\t$minLower = $_SESSION['config']->getpwdPolicyMinLowercase();\n\t}\n\tif (($cfg->checkedRulesCount == -1) && ($lower < $minLower)) {\n\t\treturn sprintf(_('The password is too weak. You have to enter at least %s lower case characters.'), $minLower);\n\t}\n\tif ($lower >= $minLower) {\n\t\t$rulesMatched++;\n\t}\n\t// check upper case\n\t$minUpper = $cfg->passwordMinUpper;\n\tif (isset($_SESSION['config']) && is_numeric($_SESSION['config']->getPwdPolicyMinUppercase())) {\n\t\t$minUpper = $_SESSION['config']->getPwdPolicyMinUppercase();\n\t}\n\tif (($cfg->checkedRulesCount == -1) && ($upper < $minUpper)) {\n\t\treturn sprintf(_('The password is too weak. You have to enter at least %s upper case characters.'), $minUpper);\n\t}\n\tif ($upper >= $minUpper) {\n\t\t$rulesMatched++;\n\t}\n\t// check numeric\n\t$minNumeric = $cfg->passwordMinNumeric;\n\tif (isset($_SESSION['config']) && is_numeric($_SESSION['config']->getPwdPolicyMinNumeric())) {\n\t\t$minNumeric = $_SESSION['config']->getPwdPolicyMinNumeric();\n\t}\n\tif (($cfg->checkedRulesCount == -1) && ($numeric < $minNumeric)) {\n\t\treturn sprintf(_('The password is too weak. You have to enter at least %s numeric characters.'), $minNumeric);\n\t}\n\tif ($numeric >= $minNumeric) {\n\t\t$rulesMatched++;\n\t}\n\t// check symbols\n\t$minSymbols = $cfg->passwordMinSymbol;\n\tif (isset($_SESSION['config']) && is_numeric($_SESSION['config']->getPwdPolicyMinSymbolic())) {\n\t\t$minSymbols = $_SESSION['config']->getPwdPolicyMinSymbolic();\n\t}\n\tif (($cfg->checkedRulesCount == -1) && ($symbols < $minSymbols)) {\n\t\treturn sprintf(_('The password is too weak. You have to enter at least %s symbolic characters.'), $minSymbols);\n\t}\n\tif ($symbols >= $minSymbols) {\n\t\t$rulesMatched++;\n\t}\n\t// check classes\n\t$classes = getNumberOfCharacterClasses($password);\n\tif (($cfg->checkedRulesCount == -1) && ($classes < $cfg->passwordMinClasses)) {\n\t\treturn sprintf(_('The password is too weak. You have to enter at least %s different character classes (upper/lower case, numbers and symbols).'), $cfg->passwordMinClasses);\n\t}\n\tif ($classes >= $cfg->passwordMinClasses) {\n\t\t$rulesMatched++;\n\t}\n\t// check rules count\n\tif (($cfg->checkedRulesCount != -1) && ($rulesMatched < $cfg->checkedRulesCount)) {\n\t\treturn sprintf(_('The password is too weak. It needs to match at least %s password complexity rules.'), $cfg->checkedRulesCount);\n\t}\n\t$pwdLow = strtolower($password);\n\t// check user name\n\tif (($cfg->passwordMustNotContainUser == 'true') && !empty($userNames)) {\n\t\tforeach ($userNames as $userName) {\n\t\t\t$userLow = strtolower($userName);\n\t\t\tif (strpos($pwdLow, $userLow) !== false) {\n\t\t\t\treturn _('The password is too weak. You may not use the user name as part of the password.');\n\t\t\t}\n\t\t}\n\t}\n\t// check part of user name and additional attributes\n\tif (($cfg->passwordMustNotContain3Chars == 'true') && !empty($userNames)) {\n\t\t// check if contains part of user name\n\t\tforeach ($userNames as $userName) {\n\t\t\tif (strlen($userName) > 2) {\n\t\t\t\t$userLow = strtolower($userName);\n\t\t\t\tfor ($i = 0; $i < strlen($userLow) - 3; $i++) {\n\t\t\t\t\t$part = substr($userLow, 0, 3);\n\t\t\t\t\tif (strpos($pwdLow, $part) !== false) {\n\t\t\t\t\t\treturn _('The password is too weak. You may not use parts of the user name for the password.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (($cfg->passwordMustNotContain3Chars == 'true') && !empty($otherUserAttrs)) {\n\t\t// check other attributes\n\t\tforeach ($otherUserAttrs as $other) {\n\t\t\t$low = strtolower($other);\n\t\t\tfor ($i = 0; $i < strlen($low) - 3; $i++) {\n\t\t\t\t$part = substr($low, 0, 3);\n\t\t\t\tif (strpos($pwdLow, $part) !== false) {\n\t\t\t\t\treturn _('The password is too weak. You may not use parts of user attributes for the password.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// check external password service\n\tif (!checkPwdWithExternalPasswordService($cfg, $password)) {\n\t\treturn _('Your selected password is known to be insecure.');\n\t}\n\treturn true;\n}\n\n/**\n * Checks the password against the external password service.\n *\n * @param LAMCfgMain $cfg main configuration\n * @param string $password password\n * @return boolean password accepted as secure\n */\nfunction checkPwdWithExternalPasswordService($cfg, $password) {\n\tif (!function_exists('curl_init') || empty($cfg->externalPwdCheckUrl)) {\n\t\treturn true;\n\t}\n\t$sha1 = sha1($password);\n\t$sha1Prefix = substr($sha1, 0, 5);\n\t$sha1Suffix = substr($sha1, 5);\n\t$curl = curl_init();\n\tcurl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n\t$url = $cfg->externalPwdCheckUrl;\n\t$url = str_replace('{SHA1PREFIX}', $sha1Prefix, $url);\n\tcurl_setopt($curl, CURLOPT_URL, $url);\n\t$results = curl_exec($curl);\n\t$code = curl_errno($curl);\n\tif ($code) {\n\t\tlogNewMessage(LOG_ERR, 'Error calling the external password service at ' . $url\n\t\t\t. '. ' . curl_error($curl));\n\t\treturn true;\n\t}\n\tcurl_close($curl);\n\tif (empty($results)) {\n\t\treturn true;\n\t}\n\t$results = explode(\"\\n\", $results);\n\tforeach ($results as $result) {\n\t\tif (stripos($result, $sha1Suffix . ':') !== false) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n * Checks if the given tool is active.\n * Otherwise, an error message is logged and the execution is stopped (die()).\n *\n * @param String $tool tool class name (e.g. toolFileUpload)\n */\nfunction checkIfToolIsActive($tool) {\n\t\t// check if hidden by config\n\tif (!$_SESSION['config']->isToolActive($tool)) {\n\t\tlogNewMessage(LOG_ERR, 'Unauthorized access to tool ' . $tool . ' denied.');\n\t\tdie();\n\t}\n}\n\n/**\n * Returns if the user is logged in.\n *\n * @return boolean is logged in\n */\nfunction isLoggedIn() {\n\treturn (isset($_SESSION['loggedIn']) && ($_SESSION['loggedIn'] === true));\n}\n\n/**\n * Returns the client IP and comma separated proxy IPs if any (HTTP_X_FORWARDED_FOR, HTTP_X_REAL_IP).\n *\n * @return String client IP (e.g. 10.10.10.10,11.11.11.11)\n */\nfunction getClientIPForLogging() {\n\t$ip = empty($_SERVER['REMOTE_ADDR']) ? '' : $_SERVER['REMOTE_ADDR'];\n\tif (!empty($_SERVER['HTTP_X_FORWARDED_FOR']) && (strlen($_SERVER['HTTP_X_FORWARDED_FOR']) < 100)) {\n\t\t$ip .= ',' . $_SERVER['HTTP_X_FORWARDED_FOR'];\n\t}\n\tif (!empty($_SERVER['HTTP_X_REAL_IP']) && (strlen($_SERVER['HTTP_X_REAL_IP']) < 100)) {\n\t\t$ip .= ',' . $_SERVER['HTTP_X_REAL_IP'];\n\t}\n\treturn $ip;\n}\n\n/**\n * Returns the login dn of the current user.\n *\n * @return string user DN\n */\nfunction getLamLdapUser() {\n\tif (isset($_SESSION['ldap'])) {\n\t\treturn $_SESSION['ldap']->getUserName();\n\t}\n\telseif (isset($_SESSION['selfService_clientDN'])) {\n\t\treturn lamDecrypt($_SESSION['selfService_clientDN'], 'SelfService');\n\t}\n\treturn '';\n}\n\n/**\n * Adds a security token to the session to prevent CSRF attacks.\n *\n * @param boolean $overwrite overwrite existing token\n */\nfunction addSecurityTokenToSession($overwrite = true) {\n\tif (!empty($_SESSION[getSecurityTokenName()]) && !$overwrite) {\n\t\treturn;\n\t}\n\t$_SESSION[getSecurityTokenName()] = getRandomNumber();\n}\n\n/**\n * Checks if the security token from SESSION matches POST data.\n */\nfunction validateSecurityToken() {\n\tif (empty($_POST)) {\n\t\treturn;\n\t}\n\tif (empty($_POST[getSecurityTokenName()]) || ($_POST[getSecurityTokenName()] != $_SESSION[getSecurityTokenName()])) {\n\t\tlogNewMessage(LOG_ERR, 'Security token does not match POST data.');\n\t\tdie();\n\t}\n}\n\n/**\n * Adds a hidden input field to the given meta HTML table.\n * Should be used to add token at the end of table.\n *\n * @param htmlTable|htmlGroup|htmlResponsiveRow $container table\n */\nfunction addSecurityTokenToMetaHTML(&$container) {\n\t$token = new htmlHiddenInput(getSecurityTokenName(), $_SESSION[getSecurityTokenName()]);\n\tif ($container instanceof htmlResponsiveRow) {\n\t\t$container->add($token, 12);\n\t\treturn;\n\t}\n\t$container->addElement($token, true);\n}\n\n/**\n * Returns the name of the security token parameter.\n *\n * @return String name\n */\nfunction getSecurityTokenName() {\n\treturn 'sec_token';\n}\n\n/**\n * Returns the value of the security token parameter.\n *\n * @return String value\n */\nfunction getSecurityTokenValue() {\n\treturn $_SESSION[getSecurityTokenName()];\n}\n\n/**\n * Sets the X-Frame-Options and Content-Security-Policy header to prevent clickjacking.\n */\nfunction setLAMHeaders() {\n\tif (!headers_sent()) {\n\t\theader('X-Frame-Options: sameorigin');\n\t\theader('Content-Security-Policy: frame-ancestors \\'self\\'; form-action \\'self\\'; base-uri \\'none\\'; object-src \\'none\\'; frame-src \\'self\\' https://*.duosecurity.com https://www.google.com/recaptcha/ https://hcaptcha.com https://*.hcaptcha.com; worker-src \\'self\\' blob:; font-src https://global.oktacdn.com/');\n\t\theader('X-Content-Type-Options: nosniff');\n\t\theader('X-XSS-Protection: 1; mode=block');\n\t\theader(\"Feature-Policy: ambient-light-sensor 'none'; autoplay 'none'; accelerometer 'none'; camera 'none'; encrypted-media 'none'; fullscreen 'self'; geolocation 'none'; gyroscope 'none'; magnetometer 'none'; microphone 'none'; midi 'none'; payment 'none'; picture-in-picture 'none'; speaker 'none'; sync-xhr 'self'; usb 'none'; vr 'none'\");\n\t}\n}\n\n/**\n* Encrypts a string\n*\n* @param string $data string to encrypt\n* @param string $prefix prefix for cookie names\n* @return object encrypted string\n*/\nfunction lamEncrypt($data, $prefix = '') {\n\t// read key and iv from cookie\n\t$iv = base64_decode($_COOKIE[$prefix . \"IV\"]);\n\t$key = base64_decode($_COOKIE[$prefix . \"Key\"]);\n\t// encrypt string\n\treturn openssl_encrypt(base64_encode($data), lamEncryptionAlgo(), $key, 0, $iv);\n}\n\n/**\n* Decrypts a string\n*\n* @param object $data string to decrypt\n* @param string $prefix prefix for cookie names\n* @return string decrypted string\n*/\nfunction lamDecrypt($data, $prefix='') {\n\t// read key and iv from cookie\n\t$iv = base64_decode($_COOKIE[$prefix . \"IV\"]);\n\t$key = base64_decode($_COOKIE[$prefix . \"Key\"]);\n\t// decrypt string\n\t$ret = openssl_decrypt($data, lamEncryptionAlgo(), $key, 0, $iv);\n\treturn base64_decode(str_replace(chr(00), \"\", $ret));\n}\n\n/**\n * Returns the encryption algorithm to use.\n *\n * @return string algorithm name\n */\nfunction lamEncryptionAlgo() {\n\t$possibleAlgos = openssl_get_cipher_methods();\n\tif (in_array('AES-256-CTR', $possibleAlgos)) {\n\t\treturn 'AES-256-CTR';\n\t}\n\telseif (in_array('AES-256-CBC', $possibleAlgos)) {\n\t\treturn 'AES-256-CBC';\n\t}\n\treturn 'AES256';\n}\n\n/**\n * Logs a message to a remote logging service.\n *\n * @param int $level log level\n * @param string $message log message\n * @param LAMCfgMain $cfgMain main configuration\n */\nfunction lamLogRemoteMessage($level, $message, $cfgMain) {\n\tinclude_once __DIR__ . '/3rdParty/composer/autoload.php';\n\t$remoteParts = explode(':', $cfgMain->logDestination);\n\t$server = $remoteParts[1];\n\t$port = intval($remoteParts[2]);\n\t$output = \"%channel%.%level_name%: %message%\";\n\t$formatter = new Monolog\\Formatter\\LineFormatter($output);\n\t$logger = new Monolog\\Logger('lam');\n\t$syslogHandler = new Monolog\\Handler\\SyslogUdpHandler($server, $port);\n\t$syslogHandler->setFormatter($formatter);\n\t$logger->pushHandler($syslogHandler);\n\tswitch ($level) {\n\t\tcase LOG_DEBUG:\n\t\t\t$logger->debug($message);\n\t\t\tbreak;\n\t\tcase LOG_NOTICE:\n\t\t\t$logger->notice($message);\n\t\t\tbreak;\n\t\tcase LOG_WARNING:\n\t\t\t$logger->warning($message);\n\t\t\tbreak;\n\t\tcase LOG_ERR:\n\t\t\t$logger->error($message);\n\t\t\tbreak;\n\t}\n}\n", "<?php\nnamespace LAM\\CONFIG;\n\nuse htmlResponsiveTable;\nuse LAM\\LOGIN\\WEBAUTHN\\WebauthnManager;\nuse \\LAMCfgMain;\nuse \\htmlTable;\nuse \\htmlTitle;\nuse \\htmlStatusMessage;\nuse \\htmlSubTitle;\nuse \\htmlSpacer;\nuse \\htmlOutputText;\nuse \\htmlLink;\nuse \\htmlGroup;\nuse \\htmlButton;\nuse \\htmlHelpLink;\nuse \\htmlInputField;\nuse \\htmlInputFileUpload;\nuse \\DateTime;\nuse \\DateTimeZone;\nuse \\htmlResponsiveRow;\nuse \\htmlResponsiveInputTextarea;\nuse \\htmlResponsiveSelect;\nuse \\htmlResponsiveInputCheckbox;\nuse \\htmlResponsiveInputField;\nuse \\htmlDiv;\nuse \\htmlHiddenInput;\nuse LAMException;\nuse PDO;\n\n/*\n\n  This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)\n  Copyright (C) 2003 - 2022  Roland Gruber\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n*/\n\n\n/**\n * Manages the main configuration options.\n *\n * @package configuration\n * @author Roland Gruber\n */\n\n\n/** Access to config functions */\ninclude_once('../../lib/config.inc');\n/** Used to print status messages */\ninclude_once('../../lib/status.inc');\n/** LAM Pro */\ninclude_once('../../lib/selfService.inc');\n\n// start session\nif (strtolower(session_module_name()) == 'files') {\n\tsession_save_path(\"../../sess\");\n}\nlam_start_session();\n\nsetlanguage();\n\nif (!isset($_SESSION['cfgMain'])) {\n\t$cfg = new LAMCfgMain();\n\t$_SESSION['cfgMain'] = $cfg;\n}\n$cfg = &$_SESSION['cfgMain'];\n\n// check if user is logged in\nif (!isset($_SESSION[\"mainconf_password\"]) || (!$cfg->checkPassword($_SESSION[\"mainconf_password\"]))) {\n\trequire('mainlogin.php');\n\texit();\n}\n\nif (isset($_POST['cancel'])) {\n\t// back to login\n\tmetaRefresh('../login.php');\n\texit();\n}\n\n$errors = array();\n$messages = array();\n// check if submit button was pressed\nif (isset($_POST['submitFormData'])) {\n    if (extension_loaded('PDO')) {\n\t    // set database\n\t    $cfg->configDatabaseType = $_POST['configDatabaseType'];\n\t    $cfg->configDatabaseServer = $_POST['configDatabaseServer'];\n\t    $cfg->configDatabasePort = $_POST['configDatabasePort'];\n\t    $cfg->configDatabaseName = $_POST['configDatabaseName'];\n\t    $cfg->configDatabaseUser = $_POST['configDatabaseUser'];\n\t    $cfg->configDatabasePassword = $_POST['configDatabasePassword'];\n\t    if ($cfg->configDatabaseType === LAMCfgMain::DATABASE_MYSQL) {\n\t\t    if (empty($cfg->configDatabaseServer) || !get_preg($cfg->configDatabaseServer, 'hostname')) {\n\t\t\t    $errors[] = _('Please enter a valid database host name.');\n\t\t    }\n\t\t    if (empty($cfg->configDatabaseName)) {\n\t\t\t    $errors[] = _('Please enter a valid database name.');\n\t\t    }\n\t\t    if (empty($cfg->configDatabaseUser)) {\n\t\t\t    $errors[] = _('Please enter a valid database user.');\n\t\t    }\n\t\t    if (empty($cfg->configDatabasePassword)) {\n\t\t\t    $errors[] = _('Please enter a valid database password.');\n\t\t    }\n\t    }\n    }\n\t// set master password\n\tif (isset($_POST['masterpassword']) && ($_POST['masterpassword'] != \"\")) {\n\t\tif ($_POST['masterpassword'] && $_POST['masterpassword2'] && ($_POST['masterpassword'] == $_POST['masterpassword2'])) {\n\t\t\t$cfg->setPassword($_POST['masterpassword']);\n\t\t\t$msg = _(\"New master password set successfully.\");\n\t\t\tunset($_SESSION[\"mainconf_password\"]);\n\t\t} else {\n\t\t\t$errors[] = _(\"Master passwords are different or empty!\");\n\t\t}\n\t}\n\t// set license\n\tif (isLAMProVersion()) {\n\t\t$licenseLines = explode(\"\\n\", $_POST['license']);\n\t\t$licenseLines = array_map('trim', $licenseLines);\n\t\t$cfg->setLicenseLines($licenseLines);\n\t\t$cfg->licenseWarningType = $_POST['licenseWarningType'];\n\t\t$cfg->licenseEmailFrom = $_POST['licenseEmailFrom'];\n\t\t$cfg->licenseEmailTo = $_POST['licenseEmailTo'];\n\t\tif ((($cfg->licenseWarningType === LAMCfgMain::LICENSE_WARNING_EMAIL) || ($cfg->licenseWarningType === LAMCfgMain::LICENSE_WARNING_ALL))\n            && !get_preg($cfg->licenseEmailFrom, 'email')) {\n\t\t    $errors[] = _('Licence') . ': ' . _('From address') . ' - ' . _('Please enter a valid email address!');\n        }\n\t\tif (($cfg->licenseWarningType === LAMCfgMain::LICENSE_WARNING_EMAIL) || ($cfg->licenseWarningType === LAMCfgMain::LICENSE_WARNING_ALL)) {\n\t\t    $toEmails = preg_split('/;[ ]*/', $cfg->licenseEmailTo);\n\t\t    foreach ($toEmails as $toEmail) {\n\t\t        if (!get_preg($toEmail, 'email')) {\n\t\t\t        $errors[] = _('Licence') . ': ' . _('TO address') . ' - ' . _('Please enter a valid email address!');\n\t\t\t        break;\n                }\n\t\t    }\n\t\t}\n\t}\n\t// set session timeout\n\t$cfg->sessionTimeout = $_POST['sessionTimeout'];\n\t// set allowed hosts\n\tif (isset($_POST['allowedHosts'])) {\n\t\t$allowedHosts = $_POST['allowedHosts'];\n\t\t$allowedHostsList = explode(\"\\n\", $allowedHosts);\n\t\tfor ($i = 0; $i < sizeof($allowedHostsList); $i++) {\n\t\t\t$allowedHostsList[$i] = trim($allowedHostsList[$i]);\n\t\t\t// ignore empty lines\n\t\t\tif ($allowedHostsList[$i] == \"\") {\n\t\t\t\tunset($allowedHostsList[$i]);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// check each line\n\t\t\t$ipRegex = '/^[0-9a-f\\\\.:\\\\*]+$/i';\n\t\t\tif (!preg_match($ipRegex, $allowedHostsList[$i]) || (strlen($allowedHostsList[$i]) > 45)) {\n\t\t\t\t$errors[] = sprintf(_(\"The IP address %s is invalid!\"), htmlspecialchars(str_replace('%', '%%', $allowedHostsList[$i])));\n\t\t\t}\n\t\t}\n\t\t$allowedHosts = implode(\",\", $allowedHostsList);\n\t} else {\n\t\t$allowedHosts = \"\";\n\t}\n\t$cfg->allowedHosts = $allowedHosts;\n\t// set allowed hosts for self service\n\tif (isLAMProVersion()) {\n\t\tif (isset($_POST['allowedHostsSelfService'])) {\n\t\t\t$allowedHostsSelfService = $_POST['allowedHostsSelfService'];\n\t\t\t$allowedHostsSelfServiceList = explode(\"\\n\", $allowedHostsSelfService);\n\t\t\tfor ($i = 0; $i < sizeof($allowedHostsSelfServiceList); $i++) {\n\t\t\t\t$allowedHostsSelfServiceList[$i] = trim($allowedHostsSelfServiceList[$i]);\n\t\t\t\t// ignore empty lines\n\t\t\t\tif ($allowedHostsSelfServiceList[$i] == \"\") {\n\t\t\t\t\tunset($allowedHostsSelfServiceList[$i]);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// check each line\n\t\t\t\t$ipRegex = '/^[0-9a-f\\\\.:\\\\*]+$/i';\n\t\t\t\tif (!preg_match($ipRegex, $allowedHostsSelfServiceList[$i]) || (strlen($allowedHostsSelfServiceList[$i]) > 15)) {\n\t\t\t\t\t$errors[] = sprintf(_(\"The IP address %s is invalid!\"), htmlspecialchars(str_replace('%', '%%', $allowedHostsSelfServiceList[$i])));\n\t\t\t\t}\n\t\t\t}\n\t\t\t$allowedHostsSelfService = implode(\",\", $allowedHostsSelfServiceList);\n\t\t} else {\n\t\t\t$allowedHostsSelfService = \"\";\n\t\t}\n\t\t$cfg->allowedHostsSelfService = $allowedHostsSelfService;\n\t}\n\t// set log level\n\t$cfg->logLevel = $_POST['logLevel'];\n\t// set log destination\n\tif ($_POST['logDestination'] == \"none\") {\n\t\t$cfg->logDestination = \"NONE\";\n\t} elseif ($_POST['logDestination'] == \"syslog\") {\n\t\t$cfg->logDestination = \"SYSLOG\";\n\t} elseif ($_POST['logDestination'] == \"remote\") {\n\t\t$cfg->logDestination = \"REMOTE:\" . $_POST['logRemote'];\n\t\t$remoteParts = explode(':', $_POST['logRemote']);\n\t\tif ((sizeof($remoteParts) !== 2) || !get_preg($remoteParts[0], 'DNSname') || !get_preg($remoteParts[1], 'digit')) {\n\t\t\t$errors[] = _(\"Please enter a valid remote server in format \\\"server:port\\\".\");\n\t\t}\n\t} else {\n\t\tif (isset($_POST['logFile']) && ($_POST['logFile'] != \"\") && preg_match(\"/^[a-z0-9\\\\/\\\\\\\\:\\\\._-]+$/i\", $_POST['logFile'])) {\n\t\t\t$cfg->logDestination = $_POST['logFile'];\n\t\t} else {\n\t\t\t$errors[] = _(\"The log file is empty or contains invalid characters! Valid characters are: a-z, A-Z, 0-9, /, \\\\, ., :, _ and -.\");\n\t\t}\n\t}\n\t// password policies\n\t$cfg->passwordMinLength = $_POST['passwordMinLength'];\n\t$cfg->passwordMinLower = $_POST['passwordMinLower'];\n\t$cfg->passwordMinUpper = $_POST['passwordMinUpper'];\n\t$cfg->passwordMinNumeric = $_POST['passwordMinNumeric'];\n\t$cfg->passwordMinSymbol = $_POST['passwordMinSymbol'];\n\t$cfg->passwordMinClasses = $_POST['passwordMinClasses'];\n\t$cfg->checkedRulesCount = $_POST['passwordRulesCount'];\n\t$cfg->passwordMustNotContain3Chars = isset($_POST['passwordMustNotContain3Chars']) && ($_POST['passwordMustNotContain3Chars'] == 'on') ? 'true' : 'false';\n\t$cfg->passwordMustNotContainUser = isset($_POST['passwordMustNotContainUser']) && ($_POST['passwordMustNotContainUser'] == 'on') ? 'true' : 'false';\n\tif (function_exists('curl_init')) {\n\t\t$cfg->externalPwdCheckUrl = $_POST['externalPwdCheckUrl'];\n\t\tif (!empty($cfg->externalPwdCheckUrl) && (strpos($cfg->externalPwdCheckUrl, '{SHA1PREFIX}') === false)) {\n\t\t\t$errors[] = _('The URL for the external password check is invalid.');\n\t\t}\n\t}\n\tif (isset($_POST['sslCaCertUpload'])) {\n\t\tif (!isset($_FILES['sslCaCert']) || ($_FILES['sslCaCert']['size'] == 0)) {\n\t\t\t$errors[] = _('No file selected.');\n\t\t} else {\n\t\t\t$handle = fopen($_FILES['sslCaCert']['tmp_name'], \"r\");\n\t\t\t$data = fread($handle, 10000000);\n\t\t\tfclose($handle);\n\t\t\t$sslReturn = $cfg->uploadSSLCaCert($data);\n\t\t\tif ($sslReturn !== true) {\n\t\t\t\t$errors[] = $sslReturn;\n\t\t\t} else {\n\t\t\t\t$messages[] = _('You might need to restart your webserver for changes to take effect.');\n\t\t\t}\n\t\t}\n\t}\n\tif (isset($_POST['sslCaCertDelete'])) {\n\t\t$cfg->deleteSSLCaCert();\n\t\t$messages[] = _('You might need to restart your webserver for changes to take effect.');\n\t}\n\tif (isset($_POST['sslCaCertImport'])) {\n\t\t$matches = array();\n\t\tif (preg_match('/^ldaps:\\\\/\\\\/([a-zA-Z0-9_\\\\.-]+)(:([0-9]+))?$/', $_POST['serverurl'], $matches)) {\n\t\t\t$port = '636';\n\t\t\tif (isset($matches[3]) && !empty($matches[3])) {\n\t\t\t\t$port = $matches[3];\n\t\t\t}\n\t\t\t$pemResult = getLDAPSSLCertificate($matches[1], $port);\n\t\t\tif ($pemResult !== false) {\n\t\t\t\t$messages[] = _('Imported certificate from server.');\n\t\t\t\t$messages[] = _('You might need to restart your webserver for changes to take effect.');\n\t\t\t\t$cfg->uploadSSLCaCert($pemResult);\n\t\t\t} else {\n\t\t\t\t$errors[] = _('Unable to import server certificate. Please use the upload function.');\n\t\t\t}\n\t\t} else {\n\t\t\t$errors[] = _('Invalid server name. Please enter \"server\" or \"server:port\".');\n\t\t}\n\t}\n\tforeach ($_POST as $key => $value) {\n\t\tif (strpos($key, 'deleteCert_') === 0) {\n\t\t\t$index = substr($key, strlen('deleteCert_'));\n\t\t\t$cfg->deleteSSLCaCert($index);\n\t\t}\n\t}\n\t// mail EOL\n\tif (isLAMProVersion()) {\n\t\t$cfg->mailUser = $_POST['mailUser'];\n\t\t$cfg->mailPassword = $_POST['mailPassword'];\n\t\t$cfg->mailEncryption = $_POST['mailEncryption'];\n\t\t$cfg->mailServer = $_POST['mailServer'];\n\t\tif (!empty($cfg->mailServer) && !get_preg($cfg->mailServer, 'hostAndPort')) {\n            $errors[] = _('Please enter the mail server with host name and port.');\n        }\n\t}\n\t$cfg->errorReporting = $_POST['errorReporting'];\n\t// save settings\n\tif (isset($_POST['submit'])) {\n\t\t$cfg->save();\n\t\tif (sizeof($errors) == 0) {\n\t\t\tmetaRefresh('../login.php?confMainSavedOk=1');\n\t\t\texit();\n\t\t}\n\t}\n}\n\necho $_SESSION['header'];\nprintHeaderContents(_(\"Edit general settings\"), '../..');\n?>\n</head>\n<body>\n<div id=\"lam-topnav\" class=\"lam-header\">\n    <div class=\"lam-header-left lam-menu-stay\">\n        <a href=\"https://www.ldap-account-manager.org/\" target=\"new_window\">\n            <img class=\"align-middle\" width=\"24\" height=\"24\" alt=\"help\" src=\"../../graphics/logo24.png\">\n            <span class=\"hide-on-mobile\">\n                        <?php\n                        echo getLAMVersionText();\n                        ?>\n                    </span>\n        </a>\n    </div>\n\t<?php\n\tif (is_dir(dirname(__FILE__) . '/../../docs/manual')) {\n\t\t?>\n        <a class=\"lam-header-right lam-menu-icon hide-on-tablet\" href=\"javascript:void(0);\" class=\"icon\" onclick=\"window.lam.topmenu.toggle();\">\n            <img class=\"align-middle\" width=\"16\" height=\"16\" alt=\"menu\" src=\"../../graphics/menu.svg\">\n            <span class=\"padding0\">&nbsp;</span>\n        </a>\n        <a class=\"lam-header-right lam-menu-entry\" target=\"_blank\" href=\"../../docs/manual/index.html\">\n            <span class=\"padding0\"><?php echo _(\"Help\") ?></span>\n        </a>\n\t\t<?php\n\t}\n\t?>\n</div>\n<br>\n<!-- form for adding/renaming/deleting profiles -->\n<form enctype=\"multipart/form-data\" action=\"mainmanage.php\" method=\"post\">\n\n\t<?php\n\t// include all JavaScript files\n\tprintJsIncludes('../..');\n\n\t$tabindex = 1;\n\n\t$row = new htmlResponsiveRow();\n\t$row->add(new htmlTitle(_('General settings')), 12);\n\n\t// print messages\n\tforeach ($errors as $error) {\n\t\t$row->add(new htmlStatusMessage(\"ERROR\", $error), 12);\n\t}\n\tforeach ($messages as $message) {\n\t\t$row->add(new htmlStatusMessage(\"INFO\", $message), 12);\n\t}\n\n\t// check if config file is writable\n\tif (!$cfg->isWritable()) {\n\t\t$row->add(new htmlStatusMessage('WARN', _('The config file is not writable.'), _('Your changes cannot be saved until you make the file writable for the webserver user.')), 12);\n\t}\n\n\t// database\n\tif (extension_loaded('PDO')) {\n\t\t$row->add(new htmlSubTitle(_('Configuration storage')), 12);\n\t\t$storageProviders = array(\n\t\t\t_('Local file system') => LAMCfgMain::DATABASE_FILE_SYSTEM\n\t\t);\n\t\tif (in_array('mysql', PDO::getAvailableDrivers())) {\n\t\t\t$storageProviders['MySQL'] = LAMCfgMain::DATABASE_MYSQL;\n\t\t}\n\t\t$storageProviderSelect = new htmlResponsiveSelect('configDatabaseType', $storageProviders, array($cfg->configDatabaseType), _('Database type'), '293');\n\t\t$storageProviderSelect->setHasDescriptiveElements(true);\n\t\t$dbRowsToShow = array(\n\t\t    LAMCfgMain::DATABASE_FILE_SYSTEM => array(),\n            LAMCfgMain::DATABASE_MYSQL => array('configDatabaseServer', 'configDatabasePort', 'configDatabaseName', 'configDatabaseUser', 'configDatabasePassword')\n        );\n\t\t$storageProviderSelect->setTableRowsToShow($dbRowsToShow);\n\t\t$dbRowsToHide = array(\n\t\t\tLAMCfgMain::DATABASE_FILE_SYSTEM => array('configDatabaseServer', 'configDatabasePort', 'configDatabaseName', 'configDatabaseUser', 'configDatabasePassword'),\n\t\t\tLAMCfgMain::DATABASE_MYSQL => array()\n        );\n\t\t$storageProviderSelect->setTableRowsToHide($dbRowsToHide);\n\t\t$row->add($storageProviderSelect, 12);\n\t\t$dbHost = new htmlResponsiveInputField(_('Database host'), 'configDatabaseServer', $cfg->configDatabaseServer, '273');\n\t\t$dbHost->setRequired(true);\n\t\t$row->add($dbHost, 12);\n\t\t$dbPort = new htmlResponsiveInputField(_('Database port'), 'configDatabasePort', $cfg->configDatabasePort, '274');\n\t\t$row->add($dbPort, 12);\n\t\t$dbName = new htmlResponsiveInputField(_('Database name'), 'configDatabaseName', $cfg->configDatabaseName, '276');\n\t\t$dbName->setRequired(true);\n\t\t$row->add($dbName, 12);\n\t\t$dbUser = new htmlResponsiveInputField(_('Database user'), 'configDatabaseUser', $cfg->configDatabaseUser, '275');\n\t\t$dbUser->setRequired(true);\n\t\t$row->add($dbUser, 12);\n\t\t$dbPassword = new htmlResponsiveInputField(_('Database password'), 'configDatabasePassword', deobfuscateText($cfg->configDatabasePassword), '275');\n\t\t$dbPassword->setRequired(true);\n\t\t$dbPassword->setIsPassword(true);\n\t\t$row->add($dbPassword, 12);\n    }\n\n\t// license\n\tif (isLAMProVersion()) {\n\t\t$row->add(new htmlSubTitle(_('Licence')), 12);\n\t\t$row->add(new htmlResponsiveInputTextarea('license', implode(\"\\n\", $cfg->getLicenseLines()), null, 10, _('Licence'), '287'), 12);\n\t\t$warningOptions = array(\n\t        _('Screen') => LAMCfgMain::LICENSE_WARNING_SCREEN,\n\t\t\t_('Email') => LAMCfgMain::LICENSE_WARNING_EMAIL,\n\t\t\t_('Both') => LAMCfgMain::LICENSE_WARNING_ALL,\n\t\t\t_('None') => LAMCfgMain::LICENSE_WARNING_NONE,\n        );\n\t\t$warningTypeSelect = new htmlResponsiveSelect('licenseWarningType', $warningOptions, array($cfg->getLicenseWarningType()), _('Expiration warning'), '288');\n\t\t$warningTypeSelect->setHasDescriptiveElements(true);\n\t\t$warningTypeSelect->setSortElements(false);\n\t\t$warningTypeSelect->setTableRowsToHide(array(\n\t\t\tLAMCfgMain::LICENSE_WARNING_SCREEN => array('licenseEmailFrom', 'licenseEmailTo'),\n\t\t\tLAMCfgMain::LICENSE_WARNING_NONE => array('licenseEmailFrom', 'licenseEmailTo'),\n        ));\n\t\t$warningTypeSelect->setTableRowsToShow(array(\n\t\t\tLAMCfgMain::LICENSE_WARNING_EMAIL => array('licenseEmailFrom', 'licenseEmailTo'),\n\t\t\tLAMCfgMain::LICENSE_WARNING_ALL => array('licenseEmailFrom', 'licenseEmailTo'),\n\t\t));\n\t\t$row->add($warningTypeSelect, 12);\n\t\t$licenseFrom = new htmlResponsiveInputField(_('From address'), 'licenseEmailFrom', $cfg->licenseEmailFrom, '289');\n\t\t$licenseFrom->setRequired(true);\n\t\t$row->add($licenseFrom, 12);\n\t\t$licenseTo = new htmlResponsiveInputField(_('TO address'), 'licenseEmailTo', $cfg->licenseEmailTo, '290');\n\t\t$licenseTo->setRequired(true);\n\t\t$row->add($licenseTo, 12);\n\n\t\t$row->add(new htmlSpacer(null, '1rem'), true);\n\t}\n\n\t// security settings\n\t$row->add(new htmlSubTitle(_(\"Security settings\")), 12);\n\t$options = array(5, 10, 20, 30, 60, 90, 120, 240);\n\t$row->add(new htmlResponsiveSelect('sessionTimeout', $options, array($cfg->sessionTimeout), _(\"Session timeout\"), '238'), 12);\n\t$row->add(new htmlResponsiveInputTextarea('allowedHosts', implode(\"\\n\", explode(\",\", $cfg->allowedHosts)), null, '7', _(\"Allowed hosts\"), '241'), 12);\n\tif (isLAMProVersion()) {\n\t\t$row->add(new htmlResponsiveInputTextarea('allowedHostsSelfService', implode(\"\\n\", explode(\",\", $cfg->allowedHostsSelfService)), null, '7', _(\"Allowed hosts (self service)\"), '241'), 12);\n\t}\n\t// SSL certificate\n\t$row->addVerticalSpacer('1rem');\n\t$row->addLabel(new htmlOutputText(_('SSL certificates')));\n\t$sslMethod = _('use system certificates');\n\t$sslFileName = $cfg->getSSLCaCertTempFileName();\n\tif ($sslFileName != null) {\n\t\t$sslMethod = _('use custom CA certificates');\n\t}\n\t$sslDelSaveGroup = new htmlGroup();\n\t$sslDelSaveGroup->addElement(new htmlOutputText($sslMethod));\n\t$sslDelSaveGroup->addElement(new htmlSpacer('5px', null));\n\t// delete+download button\n\tif ($sslFileName != null) {\n\t\t$sslDownloadBtn = new htmlLink('', '../../tmp/' . $sslFileName, '../../graphics/save.svg');\n\t\t$sslDownloadBtn->setTargetWindow('_blank');\n\t\t$sslDownloadBtn->setTitle(_('Download CA certificates'));\n\t\t$sslDownloadBtn->setCSSClasses(array('icon'));\n\t\t$sslDelSaveGroup->addElement($sslDownloadBtn);\n\t\t$sslDeleteBtn = new htmlButton('sslCaCertDelete', 'del.svg', true);\n\t\t$sslDeleteBtn->setTitle(_('Delete all CA certificates'));\n\t\t$sslDelSaveGroup->addElement($sslDeleteBtn);\n\t}\n\t$sslDelSaveGroup->addElement(new htmlHelpLink('204'));\n\t$row->addField($sslDelSaveGroup);\n\t$row->addLabel(new htmlInputFileUpload('sslCaCert'));\n\t$sslUploadBtn = new htmlButton('sslCaCertUpload', _('Upload'));\n\t$sslUploadBtn->setTitle(_('Upload CA certificate in DER/PEM format.'));\n\t$row->addField($sslUploadBtn);\n\tif (function_exists('stream_socket_client') && function_exists('stream_context_get_params')) {\n\t\t$sslImportServerUrl = !empty($_POST['serverurl']) ? $_POST['serverurl'] : 'ldaps://';\n\t\t$serverUrlUpload = new htmlInputField('serverurl', $sslImportServerUrl);\n\t\t$row->addLabel($serverUrlUpload);\n\t\t$sslImportBtn = new htmlButton('sslCaCertImport', _('Import from server'));\n\t\t$sslImportBtn->setTitle(_('Imports the certificate directly from your LDAP server.'));\n\t\t$row->addField($sslImportBtn);\n\t}\n\n\t$sslCerts = $cfg->getSSLCaCertificates();\n\tif (sizeof($sslCerts) > 0) {\n\t\t$certsTitles = array(_('Common name'), _('Valid to'), _('Serial number'), _('Delete'));\n\t\t$certsData = array();\n\t\tfor ($i = 0; $i < sizeof($sslCerts); $i++) {\n\t\t\t$serial = isset($sslCerts[$i]['serialNumber']) ? $sslCerts[$i]['serialNumber'] : '';\n\t\t\t$validTo = isset($sslCerts[$i]['validTo_time_t']) ? $sslCerts[$i]['validTo_time_t'] : '';\n\t\t\tif (get_preg($validTo, 'digit')) {\n\t\t\t    $date = DateTime::createFromFormat('U', $validTo, new DateTimeZone('UTC'));\n\t\t\t    $validTo = $date->format('Y-m-d');\n            }\n\t\t\t$cn = isset($sslCerts[$i]['subject']['CN']) ? $sslCerts[$i]['subject']['CN'] : '';\n\t\t\t$delBtn = new htmlButton('deleteCert_' . $i, 'del.svg', true);\n\t\t\t$certsData[] = array(\n\t\t\t\tnew htmlOutputText($cn),\n\t\t\t\tnew htmlDiv(null, new htmlOutputText($validTo), array('nowrap')),\n\t\t\t\tnew htmlOutputText($serial),\n\t\t\t\t$delBtn\n\t\t\t);\n\t\t}\n\t\t$certsTable = new htmlResponsiveTable($certsTitles, $certsData);\n\t\t$row->add($certsTable, 12);\n\t}\n\n\t// password policy\n\t$row->add(new htmlSubTitle(_(\"Password policy\")), 12);\n\t$optionsPwdLength = array();\n\tfor ($i = 0; $i <= 50; $i++) {\n\t\t$optionsPwdLength[] = $i;\n\t}\n\t$options4 = array(0, 1, 2, 3, 4);\n\t$row->add(new htmlResponsiveSelect('passwordMinLength', $optionsPwdLength, array($cfg->passwordMinLength), _('Minimum password length'), '242'), 12);\n\t$row->addVerticalSpacer('1rem');\n\t$row->add(new htmlResponsiveSelect('passwordMinLower', $optionsPwdLength, array($cfg->passwordMinLower), _('Minimum lowercase characters'), '242'), 12);\n\t$row->add(new htmlResponsiveSelect('passwordMinUpper', $optionsPwdLength, array($cfg->passwordMinUpper), _('Minimum uppercase characters'), '242'), 12);\n\t$row->add(new htmlResponsiveSelect('passwordMinNumeric', $optionsPwdLength, array($cfg->passwordMinNumeric), _('Minimum numeric characters'), '242'), 12);\n\t$row->add(new htmlResponsiveSelect('passwordMinSymbol', $optionsPwdLength, array($cfg->passwordMinSymbol), _('Minimum symbolic characters'), '242'), 12);\n\t$row->add(new htmlResponsiveSelect('passwordMinClasses', $options4, array($cfg->passwordMinClasses), _('Minimum character classes'), '242'), 12);\n\t$row->addVerticalSpacer('1rem');\n\t$rulesCountOptions = array(_('all') => '-1', '3' => '3', '4' => '4');\n\t$rulesCountSelect = new htmlResponsiveSelect('passwordRulesCount', $rulesCountOptions, array($cfg->checkedRulesCount), _('Number of rules that must match'), '246');\n\t$rulesCountSelect->setHasDescriptiveElements(true);\n\t$row->add($rulesCountSelect, 12);\n\t$passwordMustNotContainUser = ($cfg->passwordMustNotContainUser === 'true');\n\t$row->add(new htmlResponsiveInputCheckbox('passwordMustNotContainUser', $passwordMustNotContainUser, _('Password must not contain user name'), '247'), 12);\n\t$passwordMustNotContain3Chars = ($cfg->passwordMustNotContain3Chars === 'true');\n\t$row->add(new htmlResponsiveInputCheckbox('passwordMustNotContain3Chars', $passwordMustNotContain3Chars, _('Password must not contain part of user/first/last name'), '248'), 12);\n\tif (function_exists('curl_init')) {\n\t\t$row->addVerticalSpacer('1rem');\n\t\t$row->add(new htmlResponsiveInputField(_('External password check'), 'externalPwdCheckUrl', $cfg->externalPwdCheckUrl, '249'), 12);\n\t}\n\n\t// logging\n\t$row->add(new htmlSubTitle(_(\"Logging\")), 12);\n\t$levelOptions = array(_(\"Debug\") => LOG_DEBUG, _(\"Notice\") => LOG_NOTICE, _(\"Warning\") => LOG_WARNING, _(\"Error\") => LOG_ERR);\n\t$levelSelect = new htmlResponsiveSelect('logLevel', $levelOptions, array($cfg->logLevel), _(\"Log level\"), '239');\n\t$levelSelect->setHasDescriptiveElements(true);\n\t$row->add($levelSelect, 12);\n\t$destinationOptions = array(\n\t\t_(\"No logging\") => \"none\",\n\t\t_(\"System logging\") => \"syslog\",\n\t\t_(\"File\") => 'file',\n\t\t_(\"Remote\") => 'remote',\n\t);\n\t$destinationSelected = 'file';\n\t$destinationPath = $cfg->logDestination;\n\t$destinationRemote = '';\n\tif ($cfg->logDestination == 'NONE') {\n\t\t$destinationSelected = 'none';\n\t\t$destinationPath = '';\n\t} elseif ($cfg->logDestination == 'SYSLOG') {\n\t\t$destinationSelected = 'syslog';\n\t\t$destinationPath = '';\n\t} elseif (strpos($cfg->logDestination, 'REMOTE') === 0) {\n\t\t$destinationSelected = 'remote';\n\t\t$remoteParts = explode(':', $cfg->logDestination, 2);\n\t\t$destinationRemote = empty($remoteParts[1]) ? '' : $remoteParts[1];\n\t\t$destinationPath = '';\n\t}\n\t$logDestinationSelect = new htmlResponsiveSelect('logDestination', $destinationOptions, array($destinationSelected), _(\"Log destination\"), '240');\n\t$logDestinationSelect->setTableRowsToHide(array(\n\t\t'none' => array('logFile', 'logRemote'),\n\t\t'syslog' => array('logFile', 'logRemote'),\n\t\t'remote' => array('logFile'),\n\t\t'file' => array('logRemote'),\n\t));\n\t$logDestinationSelect->setTableRowsToShow(array(\n\t\t'file' => array('logFile'),\n\t\t'remote' => array('logRemote'),\n\t));\n\t$logDestinationSelect->setHasDescriptiveElements(true);\n\t$row->add($logDestinationSelect, 12);\n\t$row->add(new htmlResponsiveInputField(_('File'), 'logFile', $destinationPath), 12);\n\t$row->add(new htmlResponsiveInputField(_('Remote server'), 'logRemote', $destinationRemote, '251'), 12);\n\t$errorLogOptions = array(\n\t\t_('PHP system setting') => LAMCfgMain::ERROR_REPORTING_SYSTEM,\n\t\t_('default') => LAMCfgMain::ERROR_REPORTING_DEFAULT,\n\t\t_('all') => LAMCfgMain::ERROR_REPORTING_ALL\n\t);\n\t$errorLogSelect = new htmlResponsiveSelect('errorReporting', $errorLogOptions, array($cfg->errorReporting), _('PHP error reporting'), '244');\n\t$errorLogSelect->setHasDescriptiveElements(true);\n\t$row->add($errorLogSelect, 12);\n\n\t// mail options\n\tif (isLAMProVersion()) {\n\t\t$row->add(new htmlSubTitle(_('Mail options')), 12);\n\t\t$mailServer = new htmlResponsiveInputField(_(\"Mail server\"), 'mailServer', $cfg->mailServer, '253');\n\t\t$row->add($mailServer, 12);\n\t\t$mailUser = new htmlResponsiveInputField(_(\"User name\"), 'mailUser', $cfg->mailUser, '254');\n\t\t$row->add($mailUser, 12);\n\t\t$mailPassword = new htmlResponsiveInputField(_(\"Password\"), 'mailPassword', $cfg->mailPassword, '255');\n\t\t$mailPassword->setIsPassword(true);\n\t\t$row->add($mailPassword, 12);\n\t\t$mailEncryptionOptions = array(\n\t        'TLS' => LAMCfgMain::SMTP_TLS,\n\t\t\t'SSL' => LAMCfgMain::SMTP_SSL,\n\t\t\t_('None') => LAMCfgMain::SMTP_NONE,\n        );\n\t\t$selectedMailEncryption = empty($cfg->mailEncryption) ? LAMCfgMain::SMTP_TLS : $cfg->mailEncryption;\n\t\t$mailEncryptionSelect = new htmlResponsiveSelect('mailEncryption', $mailEncryptionOptions, array($selectedMailEncryption), _('Encryption protocol'), '256');\n\t\t$mailEncryptionSelect->setHasDescriptiveElements(true);\n\t\t$row->add($mailEncryptionSelect, 12);\n\t}\n\t$row->addVerticalSpacer('3rem');\n\n\t// webauthn management\n\tif (extension_loaded('PDO')\n\t\t&& in_array('sqlite', \\PDO::getAvailableDrivers())) {\n\t\tinclude_once __DIR__ . '/../../lib/webauthn.inc';\n\t\t$webAuthnManager = new WebauthnManager();\n\t\ttry {\n\t\t\t$database = $webAuthnManager->getDatabase();\n\t\t\tif ($database->hasRegisteredCredentials()) {\n\t\t\t\t$row->add(new htmlSubTitle(_('WebAuthn devices')), 12);\n\t\t\t\t$webauthnSearchField = new htmlResponsiveInputField(_('User DN'), 'webauthn_searchTerm', null, '252');\n\t\t\t\t$row->add($webauthnSearchField, 12);\n\t\t\t\t$row->addVerticalSpacer('0.5rem');\n\t\t\t\t$row->add(new htmlButton('webauthn_search', _('Search')), 12, 12, 12, 'text-center');\n\t\t\t\t$resultDiv = new htmlDiv('webauthn_results', new htmlOutputText(''), array('lam-webauthn-results'));\n\t\t\t\taddSecurityTokenToSession(false);\n\t\t\t\t$resultDiv->addDataAttribute('sec_token_value', getSecurityTokenValue());\n\t\t\t\t$row->add($resultDiv, 12);\n\t\t\t\t$confirmationDiv = new htmlDiv('webauthnDeleteConfirm', new htmlOutputText(_('Do you really want to remove this device?')), array('hidden'));\n\t\t\t\t$row->add($confirmationDiv, 12);\n\t\t\t}\n\t\t}\n\t\tcatch (LAMException $e) {\n\t\t    logNewMessage(LOG_ERR, 'Webauthn error: ' . $e->getTitle() . ' ' . $e->getMessage());\n\t\t    $row->add(new htmlStatusMessage('ERROR', $e->getTitle()), 12);\n        }\n\t}\n\n\t// change master password\n\t$row->add(new htmlSubTitle(_(\"Change master password\")), 12);\n\t$pwd1 = new htmlResponsiveInputField(_(\"New master password\"), 'masterpassword', '', '235');\n\t$pwd1->setIsPassword(true, false, true);\n\t$row->add($pwd1, 12);\n\t$pwd2 = new htmlResponsiveInputField(_(\"Reenter password\"), 'masterpassword2', '');\n\t$pwd2->setIsPassword(true, false, true);\n\t$pwd2->setSameValueFieldID('masterpassword');\n\t$row->add($pwd2, 12);\n\t$row->addVerticalSpacer('3rem');\n\n\t// buttons\n\tif ($cfg->isWritable()) {\n\t\t$buttonTable = new htmlTable();\n\t\t$saveButton = new htmlButton('submit', _(\"Save\"));\n\t\t$saveButton->setCSSClasses(array('lam-primary'));\n\t\t$buttonTable->addElement($saveButton);\n\t\t$buttonTable->addElement(new htmlSpacer('0.5rem', null));\n\t\t$buttonTable->addElement(new htmlButton('cancel', _(\"Cancel\")));\n\t\t$row->add($buttonTable, 12);\n\t\t$row->add(new htmlHiddenInput('submitFormData', '1'), 12);\n\t}\n\n\t$box = new htmlDiv(null, $row);\n\t$box->setCSSClasses(array('ui-corner-all', 'roundedShadowBox'));\n\tparseHtml(null, $box, array(), false, $tabindex, 'user');\n\n\n\t/**\n\t * Formats an LDAP time string (e.g. from createTimestamp).\n\t *\n\t * @param String $time LDAP time value\n\t * @return String formatted time\n\t */\n\tfunction formatSSLTimestamp($time) {\n\t\tif (!empty($time)) {\n\t\t\t$timeZone = 'UTC';\n\t\t\t$sysTimeZone = @date_default_timezone_get();\n\t\t\tif (!empty($sysTimeZone)) {\n\t\t\t\t$timeZone = $sysTimeZone;\n\t\t\t}\n\t\t\t$date = new DateTime('@' . $time, new DateTimeZone($timeZone));\n\t\t\treturn $date->format('d.m.Y');\n\t\t}\n\t\treturn '';\n\t}\n\n\n\t?>\n\n</form>\n<p><br></p>\n\n</body>\n</html>\n\n", "<?php\nnamespace LAM\\HELP;\n/*\n\n  This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)\n  Copyright (C) 2003 - 2006  Michael Duergner\n                2008 - 2022  Roland Gruber\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n\n  LDAP Account Manager display help pages.\n*/\n\nuse ScopeAndModuleValidation;\n\n/**\n * LDAP Account Manager help page.\n *\n * @author Michael Duergner\n * @author Roland Gruber\n * @package Help\n */\n\n/** LDAP connection */\ninclude_once(__DIR__ . \"/../lib/ldap.inc\");\n\n/** configuration */\ninclude_once(__DIR__ . \"/../lib/config.inc\");\n\n/** self service functions */\ninclude_once(__DIR__ . \"/../lib/selfService.inc\");\nif (!empty($_GET['selfService']) && ($_GET['selfService'] === '1')) {\n\tsession_name('SELFSERVICE');\n}\n\nif (strtolower(session_module_name()) == 'files') {\n\tsession_save_path(\"../sess\");\n}\nlam_start_session();\n\n/** status messages */\ninclude_once(__DIR__ . \"/../lib/status.inc\");\n\nsetlanguage();\n\n/** help data */\ninclude_once(__DIR__ . \"/../help/help.inc\"); // Include help/help.inc which provides $helpArray where the help pages are stored\n\n\n/**\n * Print HTML header of the help page.\n */\nfunction echoHTMLHead(): void {\n\techo $_SESSION['header'];\n\t$title = \"LDAP Account Manager Help\";\n\tprintHeaderContents($title, '..');\n\t?>\n\t\t</head>\n\t\t<body>\n\t<?php\n\t// include all JavaScript files\n\tprintJsIncludes('..');\n}\n\n/**\n * Print HTML footer of the help page.\n */\nfunction echoHTMLFoot(): void {\n\t?>\n\t\t</body>\n\t</html>\n\t<?php\n}\n\n/**\n * Print help site for a specific help number.\n *\n * @param array<mixed> $helpEntry the help entry that is to be displayed.\n */\nfunction displayHelp(array $helpEntry): void {\n\techoHTMLHead();\n\techo \"<h1 class=\\\"help\\\">\" . $helpEntry['Headline'] . \"</h1>\\n\";\n\t$format = \"<p class=\\\"help\\\">\" . $helpEntry['Text'] . \"</p>\\n\";\n\tif (isset($helpEntry['attr'])) {\n\t\t$format .= '<br><hr>' . _('Technical name') . ': <i>' . $helpEntry['attr'] . '</i>';\n\t}\n\techo $format;\n\tif(isset($helpEntry['SeeAlso']) && is_array($helpEntry['SeeAlso'])) {\n\t\techo '<p class=\"help\">' . _('See also') . ': <a class=\"helpSeeAlso\" href=\"' . $helpEntry['SeeAlso']['link'] . '\">' . $helpEntry['SeeAlso']['text'] . '</a></p>';\n\t}\n\techoHTMLFoot();\n}\n\n/* If no help number was submitted print error message */\nif (!isset($_GET['HelpNumber'])) {\n\t$errorMessage = \"Sorry no help number submitted.\";\n\techoHTMLHead();\n\tstatusMessage(\"ERROR\", \"\", $errorMessage);\n\techoHTMLFoot();\n\texit;\n}\n\n$helpEntry = array();\n\n// module help\nif (isset($_GET['module']) && !($_GET['module'] == 'main') && !($_GET['module'] == '')) {\n\tinclude_once(__DIR__ . \"/../lib/modules.inc\");\n\t$moduleName = $_GET['module'];\n\tif (!ScopeAndModuleValidation::isValidModuleName($moduleName)) {\n\t    logNewMessage(LOG_ERR, 'Invalid module name: ' . $moduleName);\n\t    die();\n    }\n\tif (!empty($_GET['scope'])) {\n\t    $scope = $_GET['scope'];\n\t    if (!ScopeAndModuleValidation::isValidScopeName($scope)) {\n\t\t    logNewMessage(LOG_ERR, 'Invalid scope name: ' . $scope);\n\t\t    die();\n        }\n\t\t$helpEntry = getHelp($moduleName, $_GET['HelpNumber'], $scope);\n\t}\n\tif (!$helpEntry) {\n\t\t$variables = array(htmlspecialchars($_GET['HelpNumber']), htmlspecialchars($moduleName));\n\t\t$errorMessage = _(\"Sorry the help id '%s' is not available for the module '%s'.\");\n\t\techoHTMLHead();\n\t\tstatusMessage(\"ERROR\", \"\", $errorMessage, $variables);\n\t\techoHTMLFoot();\n\t\texit;\n\t}\n}\n// help entry in help.inc\nelse {\n\t/* If submitted help number is not in help/help.inc print error message */\n\tif (!array_key_exists($_GET['HelpNumber'], $helpArray)) {\n\t\t$variables = array(htmlspecialchars($_GET['HelpNumber']));\n\t\t$errorMessage = _(\"Sorry this help number ({bold}%s{endbold}) is not available.\");\n\t\techoHTMLHead();\n\t\tstatusMessage(\"ERROR\", \"\", $errorMessage, $variables);\n\t\techoHTMLFoot();\n\t\texit;\n\t}\n\telse {\n\t\t$helpEntry = $helpArray[$_GET['HelpNumber']];\n\t}\n}\n\ndisplayHelp($helpEntry);\n", "<?php\nnamespace LAM\\LOGIN;\nuse LAM\\LIB\\TWO_FACTOR\\TwoFactorProviderService;\nuse \\LAMConfig;\nuse \\LAMCfgMain;\nuse \\htmlSpacer;\nuse \\htmlOutputText;\nuse \\htmlSelect;\nuse \\htmlInputField;\nuse \\htmlGroup;\nuse \\htmlInputCheckbox;\nuse \\htmlButton;\nuse \\htmlStatusMessage;\nuse LAMException;\nuse \\Ldap;\nuse \\htmlResponsiveRow;\nuse \\htmlDiv;\nuse ServerProfilePersistenceManager;\n\n/*\n\n  This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)\n  Copyright (C) 2003 - 2006  Michael Duergner\n                2005 - 2022  Roland Gruber\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n*/\n\n/**\n* Login form of LDAP Account Manager.\n*\n* @author Michael Duergner\n* @author Roland Gruber\n* @package main\n*/\n\n/** status messages */\ninclude_once(__DIR__ . \"/../lib/status.inc\");\n\n/** check environment */\ninclude __DIR__ . '/../lib/checkEnvironment.inc';\n\n/** security functions */\ninclude_once(__DIR__ . \"/../lib/security.inc\");\n/** self service functions */\ninclude_once(__DIR__ . \"/../lib/selfService.inc\");\n/** access to configuration options */\ninclude_once(__DIR__ . \"/../lib/config.inc\");\n$licenseValidator = null;\nif (isLAMProVersion()) {\n\tinclude_once(__DIR__ . \"/../lib/env.inc\");\n\t$licenseValidator = new \\LAM\\ENV\\LAMLicenseValidator();\n\t$licenseValidator->validateAndRedirect('config/mainlogin.php?invalidLicense=1', 'config/mainlogin.php?invalidLicense=2');\n}\n\n// set session save path\nif (strtolower(session_module_name()) == 'files') {\n\tsession_save_path(dirname(__FILE__) . '/../sess');\n}\n\n// start empty session and change ID for security reasons\nlam_start_session();\nsession_destroy();\nlam_start_session();\nsession_regenerate_id(true);\n\n$serverProfilePersistenceManager = new ServerProfilePersistenceManager();\n$profiles = array();\ntry {\n\t$profiles = $serverProfilePersistenceManager->getProfiles();\n} catch (LAMException $e) {\n\tlogNewMessage(LOG_ERR, 'Unable to read server profiles: ' . $e->getTitle());\n}\n\n// save last selected login profile\nif (isset($_GET['useProfile'])) {\n\tif (in_array($_GET['useProfile'], $profiles)) {\n\t\tsetcookie(\"lam_default_profile\", $_GET['useProfile'], time() + 365*60*60*24, '/', '', false, true);\n\t}\n\telse {\n\t\tunset($_GET['useProfile']);\n\t}\n}\n\n// save last selected language\nif (isset($_POST['language'])) {\n\tsetcookie('lam_last_language', htmlspecialchars($_POST['language']), time() + 365*60*60*24, '/', '', false, true);\n}\n\n// init some session variables\n$default_Config = new LAMCfgMain();\n$_SESSION[\"cfgMain\"] = $default_Config;\nsetSSLCaCert();\n\n$default_Profile = $default_Config->default;\nif (isset($_COOKIE[\"lam_default_profile\"]) && in_array($_COOKIE[\"lam_default_profile\"], $profiles)) {\n\t$default_Profile = $_COOKIE[\"lam_default_profile\"];\n}\n\n$error_message = null;\n\ntry {\n    // Reload login page after a profile change\n\tif (isset($_GET['useProfile']) && in_array($_GET['useProfile'], $profiles)) {\n\t\tlogNewMessage(LOG_DEBUG, \"Change server profile to \" . $_GET['useProfile']);\n\t\t$_SESSION['config'] = $serverProfilePersistenceManager->loadProfile($_GET['useProfile']);\n\t} // Load login page\n    elseif (!empty($default_Profile) && in_array($default_Profile, $profiles)) {\n\t\t$_SESSION[\"config\"] = $serverProfilePersistenceManager->loadProfile($default_Profile);\n\t} // use first profile as fallback\n\telse if (sizeof($profiles) > 0) {\n\t\t$_SESSION[\"config\"] = $serverProfilePersistenceManager->loadProfile($profiles[0]);\n\t} else {\n\t\t$_SESSION[\"config\"] = null;\n\t}\n}\ncatch (LAMException $e) {\n    $error_message = $e->getTitle();\n}\n\nif (!isset($default_Config->default) || !in_array($default_Config->default, $profiles)) {\n\t$error_message = _('No default profile set. Please set it in the server profile configuration.');\n}\n\n$possibleLanguages = getLanguages();\n$encoding = 'UTF-8';\nif (isset($_COOKIE['lam_last_language'])) {\n\tforeach ($possibleLanguages as $lang) {\n\t\tif (strpos($_COOKIE['lam_last_language'], $lang->code) === 0) {\n\t\t\t$_SESSION['language'] = $lang->code;\n\t\t\t$encoding = $lang->encoding;\n\t\t\tbreak;\n\t\t}\n\t}\n}\nelseif (!empty($_SESSION[\"config\"])) {\n\t$defaultLang = $_SESSION[\"config\"]->get_defaultLanguage();\n\tforeach ($possibleLanguages as $lang) {\n\t\tif (strpos($defaultLang, $lang->code) === 0) {\n\t\t\t$_SESSION['language'] = $lang->code;\n\t\t\t$encoding = $lang->encoding;\n\t\t\tbreak;\n\t\t}\n\t}\n}\nelse {\n\t$_SESSION['language'] = 'en_GB.utf8';\n}\nif (isset($_POST['language'])) {\n\tforeach ($possibleLanguages as $lang) {\n\t\tif (strpos($_POST['language'], $lang->code) === 0) {\n\t\t\t$_SESSION['language'] = $lang->code;\n\t\t\t$encoding = $lang->encoding;\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\n$_SESSION['header'] = \"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01 Transitional//EN\\\" \\\"http://www.w3.org/TR/html4/loose.dtd\\\">\\n\\n\";\n$_SESSION['header'] .= \"<html>\\n<head>\\n\";\n$_SESSION['header'] .= \"<meta name=\\\"robots\\\" content=\\\"noindex, nofollow\\\">\\n\";\n$_SESSION['header'] .= \"<meta http-equiv=\\\"content-type\\\" content=\\\"text/html; charset=\" . $encoding . \"\\\">\\n\";\n$_SESSION['header'] .= \"<meta http-equiv=\\\"pragma\\\" content=\\\"no-cache\\\">\\n\t\t<meta http-equiv=\\\"cache-control\\\" content=\\\"no-cache\\\">\";\n$urlMatches = array();\nif (preg_match('/http(s)?:\\\\/\\\\/[^\\\\/]+(\\\\/.*)\\/templates\\/login.php.*/', getCallingURL(), $urlMatches)) {\n\t$_SESSION['header'] .= '<link rel=\"manifest\" href=\"' . $urlMatches[2] . '/templates/manifest.php\" crossorigin=\"use-credentials\">';\n}\n\nsetlanguage(); // setting correct language\n\n/**\n * Displays the login window.\n *\n * @param \\LAM\\ENV\\LAMLicenseValidator $licenseValidator license validator\n * @param string $error_message error message to display\n * @param string $errorDetails error details\n * @param string $extraMessage extra message that is shown as info\n * @throws LAMException error rendering login page\n */\nfunction display_LoginPage($licenseValidator, $error_message, $errorDetails = null, $extraMessage = null): void {\n\t$config_object = $_SESSION['config'];\n\t$cfgMain = $_SESSION[\"cfgMain\"];\n\tlogNewMessage(LOG_DEBUG, \"Display login page\");\n\t// generate 256 bit key and initialization vector for user/passwd-encryption\n    $key = openssl_random_pseudo_bytes(32);\n    $iv = openssl_random_pseudo_bytes(16);\n    // save both in cookie\n    setcookie(\"Key\", base64_encode($key), 0, \"/\", '', false, true);\n    setcookie(\"IV\", base64_encode($iv), 0, \"/\", '', false, true);\n\n\t$serverProfilePersistenceManager = new ServerProfilePersistenceManager();\n\t$profiles = $serverProfilePersistenceManager->getProfiles();\n\n\techo $_SESSION[\"header\"];\n\tprintHeaderContents('LDAP Account Manager', '..');\n\t?>\n\t</head>\n\t<body>\n\t<?php\n\t// include all JavaScript files\n\tprintJsIncludes('..');\n\n\tif (isLAMProVersion() && $licenseValidator->isEvaluationLicense()) {\n\t\tStatusMessage('INFO', _('Evaluation Licence'));\n\t}\n\tdisplayLoginHeader();\n\n\t\tif (!empty($config_object)) {\n\t\t\t// check extensions\n\t\t\t$extList = getRequiredExtensions();\n\t\t\tforeach ($extList as $extension) {\n\t\t\t\tif (!extension_loaded($extension)) {\n\t\t\t\t\tStatusMessage(\"ERROR\", \"A required PHP extension is missing!\", $extension);\n\t\t\t\t\techo \"<br>\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t// check TLS\n\t\t\t$useTLS = $config_object->getUseTLS();\n\t\t\tif (isset($useTLS) && ($useTLS == \"yes\")) {\n\t\t\t\tif (!function_exists('ldap_start_tls')) {\n\t\t\t\t\tStatusMessage(\"ERROR\", \"Your PHP installation does not support TLS encryption!\");\n\t\t\t\t\techo \"<br>\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tStatusMessage('WARN', _('Please enter the configuration and create a server profile.'));\n\t\t}\n\t\t// check if session expired\n\t\tif (isset($_GET['expired'])) {\n\t\t\tStatusMessage(\"ERROR\", _(\"Your session expired, please log in again.\"));\n\t\t\techo \"<br>\";\n\t\t}\n\t\t// check if main config was saved\n\t\tif (isset($_GET['confMainSavedOk'])) {\n\t\t\tStatusMessage(\"INFO\", _(\"Your settings were successfully saved.\"));\n\t\t\techo \"<br>\";\n\t\t}\n\t\t// check if a server profile was saved\n\t\tif (isset($_GET['configSaveOk'])) {\n\t\t\tStatusMessage(\"INFO\", _(\"Your settings were successfully saved.\"), htmlspecialchars($_GET['configSaveFile']));\n\t\t\techo \"<br>\";\n\t\t}\n\t\telseif (isset($_GET['configSaveFailed'])) {\n\t\t\tStatusMessage(\"ERROR\", _(\"Cannot open config file!\"), htmlspecialchars($_GET['configSaveFile']));\n\t\t\techo \"<br>\";\n\t\t}\n\t\t// check if self service was saved\n\t\tif (isset($_GET['selfserviceSaveOk'])) {\n\t\t\tStatusMessage(\"INFO\", _(\"Your settings were successfully saved.\"), htmlspecialchars($_GET['selfserviceSaveOk']));\n\t\t\techo \"<br>\";\n\t\t}\n\t\tif (isset($_GET['2factor']) && ($_GET['2factor'] == 'error')) {\n\t\t\tStatusMessage('ERROR', _(\"Unable to start 2-factor authentication.\"));\n\t\t\techo \"<br>\";\n\t\t}\n\t\telseif (isset($_GET['2factor']) && ($_GET['2factor'] == 'noToken')) {\n\t\t\tStatusMessage('ERROR', _(\"Unable to start 2-factor authentication because no tokens were found.\"));\n\t\t\techo \"<br>\";\n\t\t}\n\t\tif (!empty($config_object)) {\n\t\t?>\n\t\t<br><br><br>\n\t\t<div class=\"centeredTable\">\n\t\t<div class=\"roundedShadowBox limitWidth\" style=\"position:relative; z-index:5;\">\n\t\t<table border=\"0\" rules=\"none\" bgcolor=\"white\" class=\"ui-corner-all\">\n\t\t\t<tr>\n\t\t\t\t<td style=\"border-style:none\">\n\t\t\t\t\t<form action=\"login.php\" method=\"post\">\n\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t$tabindex = 1;\n\t\t\t\t\t\t\t$row = new htmlResponsiveRow();\n\t\t\t\t\t\t\t// user name\n\t\t\t\t\t\t\t$row->addLabel(new htmlOutputText(_(\"User name\")));\n\t\t\t\t\t\t\tif ($config_object->getLoginMethod() == LAMConfig::LOGIN_LIST) {\n\t\t\t\t\t\t\t\t$admins = $config_object->get_Admins();\n\t\t\t\t\t\t\t\t$adminList = array();\n\t\t\t\t\t\t\t\tforeach ($admins as $admin) {\n\t\t\t\t\t\t\t\t\t$text = explode(\",\", $admin);\n\t\t\t\t\t\t\t\t\t$text = explode(\"=\", $text[0]);\n\t\t\t\t\t\t\t\t\tif (isset($text[1])) {\n\t\t\t\t\t\t\t\t\t\t$adminList[$text[1]] = $admin;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\t$adminList[$text[0]] = $admin;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t$selectedAdmin = array();\n\t\t\t\t\t\t\t\tif (isset($_POST['username']) && in_array($_POST['username'], $adminList)) {\n\t\t\t\t\t\t\t\t\t$selectedAdmin = array($_POST['username']);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t$userSelect = new htmlSelect('username', $adminList, $selectedAdmin);\n\t\t\t\t\t\t\t\t$userSelect->setHasDescriptiveElements(true);\n\t\t\t\t\t\t\t\t$userSelect->setTransformSingleSelect(false);\n\t\t\t\t\t\t\t\tif (empty($_COOKIE['lam_login_name'])) {\n\t\t\t\t\t\t\t\t\t$userSelect->setCSSClasses(array('lam-initial-focus'));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t$row->addField(new htmlDiv(null, $userSelect));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tif ($config_object->getHttpAuthentication() == 'true') {\n\t\t\t\t\t\t\t\t\t$httpAuth = new htmlDiv(null, new htmlOutputText($_SERVER['PHP_AUTH_USER'] . '&nbsp;', false));\n\t\t\t\t\t\t\t\t\t$httpAuth->setCSSClasses(array('text-left', 'margin3'));\n\t\t\t\t\t\t\t\t\t$row->addField($httpAuth);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t$user = '';\n\t\t\t\t\t\t\t\t\tif (isset($_COOKIE[\"lam_login_name\"])) {\n\t\t\t\t\t\t\t\t\t\t$user = $_COOKIE[\"lam_login_name\"];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t$userNameInput = new htmlInputField('username', $user);\n\t\t\t\t\t\t\t\t\tif (empty($_COOKIE['lam_login_name'])) {\n\t\t\t\t\t\t\t\t\t\t$userNameInput->setCSSClasses(array('lam-initial-focus'));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t$userInput = new htmlDiv(null, $userNameInput);\n\t\t\t\t\t\t\t\t\t$row->addField($userInput);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// password\n\t\t\t\t\t\t\t$row->addLabel(new \\htmlOutputText(_(\"Password\")));\n\t\t\t\t\t\t\tif (($config_object->getLoginMethod() == LAMConfig::LOGIN_SEARCH) && ($config_object->getHttpAuthentication() == 'true')) {\n\t\t\t\t\t\t\t\t$passwordInputFake = new htmlDiv(null, new htmlOutputText('**********'));\n\t\t\t\t\t\t\t\t$passwordInputFake->setCSSClasses(array('text-left', 'margin3'));\n\t\t\t\t\t\t\t\t$row->addField($passwordInputFake);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t$passwordInput = new htmlInputField('passwd');\n\t\t\t\t\t\t\t\t$passwordInput->setIsPassword(true);\n\t\t\t\t\t\t\t\tif (($config_object->getLoginMethod() == LAMConfig::LOGIN_SEARCH) && !empty($_COOKIE['lam_login_name'])) {\n\t\t\t\t\t\t\t\t\t$passwordInput->setCSSClasses(array('lam-initial-focus'));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t$row->addField($passwordInput);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// language\n\t\t\t\t\t\t\t$row->addLabel(new htmlOutputText(_(\"Language\")));\n\t\t\t\t\t\t\t$possibleLanguages = getLanguages();\n\t\t\t\t\t\t\t$languageList = array();\n\t\t\t\t\t\t\t$defaultLanguage = array();\n\t\t\t\t\t\t\tforeach ($possibleLanguages as $lang) {\n\t\t\t\t\t\t\t\t$languageList[$lang->description] = $lang->code;\n\t\t\t\t\t\t\t\tif (strpos(trim($_SESSION[\"language\"]), $lang->code) === 0) {\n\t\t\t\t\t\t\t\t\t$defaultLanguage[] = $lang->code;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$languageSelect = new htmlSelect('language', $languageList, $defaultLanguage);\n\t\t\t\t\t\t\t$languageSelect->setHasDescriptiveElements(true);\n\t\t\t\t\t\t\t$row->addField($languageSelect, true);\n\t\t\t\t\t\t\t// remember login user\n\t\t\t\t\t\t\tif (($config_object->getLoginMethod() == LAMConfig::LOGIN_SEARCH) && !($config_object->getHttpAuthentication() == 'true')) {\n\t\t\t\t\t\t\t\t$row->add(new htmlOutputText('&nbsp;', false), 0, 6, 6);\n\t\t\t\t\t\t\t\t$rememberGroup = new htmlGroup();\n\t\t\t\t\t\t\t\t$doRemember = false;\n\t\t\t\t\t\t\t\tif (isset($_COOKIE[\"lam_login_name\"])) {\n\t\t\t\t\t\t\t\t\t$doRemember = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t$rememberGroup->addElement(new htmlInputCheckbox('rememberLogin', $doRemember));\n\t\t\t\t\t\t\t\t$rememberGroup->addElement(new htmlSpacer('1px', null));\n\t\t\t\t\t\t\t\t$rememberGroup->addElement(new htmlOutputText(_('Remember user name')));\n\t\t\t\t\t\t\t\t$rememberDiv = new htmlDiv(null, $rememberGroup);\n\t\t\t\t\t\t\t\t$rememberDiv->setCSSClasses(array('text-left', 'margin3'));\n\t\t\t\t\t\t\t\t$row->add($rememberDiv, 12, 6, 6);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// login button\n\t\t\t\t\t\t\t$row->add(new htmlSpacer(null, '20px'), 12);\n\t\t\t\t\t\t\t$loginButton = new htmlButton('checklogin', _(\"Login\"));\n\t\t\t\t\t\t\t$loginButton->setCSSClasses(array('lam-primary'));\n\t\t\t\t\t\t\t$row->add($loginButton);\n\n\t\t\t\t\t\t\tparseHtml(null, $row, array(), false, $tabindex, 'user');\n\t\t\t\t\t\t?>\n\t\t\t\t\t</form>\n\t\t\t\t</td>\n\t\t\t\t<td class=\"loginRightBox hide-for-small\" style=\"border-style:none\">\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td colspan=\"2\" style=\"border-style:none;\">\n                    <?php\n                    $row = new htmlResponsiveRow();\n                    // error message\n                    if (!empty($error_message)) {\n\t                    $row->add(new \\htmlSpacer(null, '5px'), 12);\n\t                    $message = new htmlStatusMessage('ERROR', $error_message, $errorDetails);\n\t                    $row->add($message, 12);\n                    }\n                    if (!empty($extraMessage)) {\n\t                    $extraMessage = new htmlStatusMessage('INFO', $extraMessage);\n\t                    $row->add($extraMessage, 12);\n                    }\n                    parseHtml(null, $row, array(), false, $tabindex, 'user');\n                    ?>\n\t\t\t\t\t<hr class=\"margin20\">\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td style=\"border-style:none;\">\n\t\t\t\t\t<form action=\"login.php\" method=\"post\">\n\t\t\t\t\t<?php\n\t\t\t\t\t\t$row = new htmlResponsiveRow();\n\t\t\t\t\t\t$row->addLabel(new htmlOutputText(_(\"LDAP server\")));\n\t\t\t\t\t\t$serverUrl = new htmlOutputText($config_object->getServerDisplayNameGUI());\n\t\t\t\t\t\t$serverUrlDiv = new htmlDiv(null, $serverUrl);\n\t\t\t\t\t\t$serverUrlDiv->setCSSClasses(array('text-left', 'margin3'));\n\t\t\t\t\t\t$row->addField($serverUrlDiv);\n\t\t\t\t\t\t$row->addLabel(new htmlOutputText(_(\"Server profile\")));\n\t\t\t\t\t\t$profileSelect = new htmlSelect('profile', $profiles, array($_SESSION['config']->getName()));\n\t\t\t\t\t\t$profileSelect->setOnchangeEvent('loginProfileChanged(this)');\n\t\t\t\t\t\t$row->addField($profileSelect);\n\n\t\t\t\t\t\tparseHtml(null, $row, array(), true, $tabindex, 'user');\n\t\t\t\t\t?>\n\t\t\t\t\t</form>\n\t\t\t\t</td>\n\t\t\t\t<td class=\"loginRightBox hide-for-small\" style=\"border-style:none\">\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</table>\n\t\t</div>\n\t\t</div>\n\t\t<?php\n\t\t}\n\t\t?>\n\t\t<br><br>\n\t\t<?PHP\n\t\t\tif (isLAMProVersion() && $licenseValidator->isExpiringSoon()) {\n\t\t\t\t$expirationDate = $licenseValidator->getLicense()->getExpirationDate()->format('Y-m-d');\n\t\t\t\t$expirationTimeStamp = $licenseValidator->getLicense()->getExpirationDate()->getTimestamp();\n\t\t\t\tif ($cfgMain->showLicenseWarningOnScreen()) {\n\t\t\t\t\t$licenseMessage = sprintf(_('Your licence expires on %s. You need to purchase a new licence to be able to use LAM Pro after this date.'), $expirationDate);\n\t\t\t\t\tStatusMessage('WARN', $licenseMessage);\n\t\t\t\t}\n\t\t\t\tif ($cfgMain->sendLicenseWarningByEmail() && !$cfgMain->wasLicenseWarningSent($expirationTimeStamp)) {\n\t\t\t\t    $cfgMain->licenseEmailDateSent = $expirationTimeStamp;\n\t\t\t\t    $cfgMain->save();\n\t\t\t\t\t$mailer = new \\LAM\\ENV\\LicenseWarningMailer($cfgMain);\n\t\t\t\t\t$mailer->sendMail($expirationDate);\n\t\t\t\t}\n\t\t\t}\n\t\t?>\n\t\t<br><br>\n\t</body>\n</html>\n<?php\n}\n\n/**\n * Displays the header on the login page.\n */\nfunction displayLoginHeader() : void {\n    ?>\n    <div id=\"lam-topnav\" class=\"lam-header\">\n        <div class=\"lam-header-left lam-menu-stay\">\n            <a href=\"https://www.ldap-account-manager.org/\" target=\"new_window\">\n                <img class=\"align-middle\" width=\"24\" height=\"24\" alt=\"help\" src=\"../graphics/logo24.png\">\n                <span class=\"hide-on-mobile\">\n                        <?php\n                        echo getLAMVersionText();\n                        ?>\n                </span>\n            </a>\n            <span class=\"hide-on-mobile lam-margin-small\">\n                        &nbsp;&nbsp;&nbsp;&nbsp;\n\t\t\t    <a href=\"http://www.ldap-account-manager.org/lamcms/lamPro\"> <?php if (!isLAMProVersion()) { echo _(\"Want more features? Get LAM Pro!\");} ?> </a>\n\t\t\t</span>\n        </div>\n        <a class=\"lam-header-right lam-menu-icon hide-on-tablet\" href=\"javascript:void(0);\" class=\"icon\" onclick=\"window.lam.topmenu.toggle();\">\n            <img class=\"align-middle\" width=\"16\" height=\"16\" alt=\"menu\" src=\"../graphics/menu.svg\">\n            <span class=\"padding0\"></span>\n        </a>\n        <div class=\"lam-header-right lam-header-menublock\">\n            <a class=\"lam-menu-entry\" href=\"config/index.php\" target=\"_top\">\n                <span class=\"padding0\"><?php echo _(\"LAM configuration\") ?></span>\n            </a>\n            <?php\n            if (is_dir(dirname(__FILE__) . '/../docs/manual')) {\n                ?>\n                <a class=\"lam-menu-entry\" target=\"_blank\" href=\"../docs/manual/index.html\">\n                    <span class=\"padding0\"><?php echo _(\"Help\") ?></span>\n                </a>\n                <?php\n            }\n            ?>\n        </div>\n\n    </div>\n\t<br>\n    <?php\n}\n\n// checking if the submitted username/password is correct.\nif (isset($_POST['checklogin'])) {\n\tinclude_once(__DIR__ . \"/../lib/ldap.inc\"); // Include ldap.php which provides Ldap class\n\n\t$_SESSION['ldap'] = new Ldap($_SESSION['config']); // Create new Ldap object\n\n\t$clientSource = $_SERVER['REMOTE_ADDR'];\n\tif (isset($_SERVER['REMOTE_HOST'])) {\n\t\t$clientSource .= '/' . $_SERVER['REMOTE_HOST'];\n\t}\n\tif (($_SESSION['config']->getLoginMethod() == LAMConfig::LOGIN_SEARCH) && ($_SESSION['config']->getHttpAuthentication() == 'true')) {\n\t\t$username = $_SERVER['PHP_AUTH_USER'];\n\t\t$password = $_SERVER['PHP_AUTH_PW'];\n\t}\n\telse {\n\t\tif (isset($_POST['rememberLogin']) && ($_POST['rememberLogin'] == 'on')) {\n\t\t\tsetcookie('lam_login_name', $_POST['username'], time() + 60*60*24*365, '/', '', false, true);\n\t\t}\n\t\telse if (isset($_COOKIE['lam_login_name']) && ($_SESSION['config']->getLoginMethod() == LAMConfig::LOGIN_SEARCH)) {\n\t\t\tsetcookie('lam_login_name', '', time() + 60*60*24*365, '/', '', false, true);\n\t\t}\n\t\tif($_POST['passwd'] == \"\") {\n\t\t\tlogNewMessage(LOG_DEBUG, \"Empty password for login\");\n\t\t\t$error_message = _(\"Empty password submitted. Please try again.\");\n\t\t\theader(\"HTTP/1.1 403 Forbidden\");\n\t\t\tdisplay_LoginPage($licenseValidator, $error_message); // Empty password submitted. Return to login page.\n\t\t\texit();\n\t\t}\n\t\t$username = $_POST['username'];\n\t\t$password = $_POST['passwd'];\n\t}\n\t// search user in LDAP if needed\n    $searchLDAP = null;\n\tif ($_SESSION['config']->getLoginMethod() == LAMConfig::LOGIN_SEARCH) {\n\t\t$searchFilter = $_SESSION['config']->getLoginSearchFilter();\n\t\t$searchFilter = str_replace('%USER%', ldap_escape($username, '', LDAP_ESCAPE_FILTER), $searchFilter);\n\t\t$searchDN = '';\n\t\t$searchPassword = '';\n\t\t$configLoginSearchDn = $_SESSION['config']->getLoginSearchDN();\n\t\tif (!empty($configLoginSearchDn)) {\n\t\t\t$searchDN = $configLoginSearchDn;\n\t\t\t$searchPassword = $_SESSION['config']->getLoginSearchPassword();\n\t\t}\n\t\t$searchSuccess = true;\n\t\t$searchError = '';\n\t\t$searchLDAP = new Ldap($_SESSION['config']);\n\t\ttry {\n\t\t\t$searchLDAP->connect($searchDN, $searchPassword, true);\n            $searchResult = ldap_search($searchLDAP->server(), $_SESSION['config']->getLoginSearchSuffix(), $searchFilter, array('dn'), 0, 0, 0, LDAP_DEREF_NEVER);\n            if ($searchResult) {\n                $searchInfo = ldap_get_entries($searchLDAP->server(), $searchResult);\n                if ($searchInfo !== false) {\n                    cleanLDAPResult($searchInfo);\n                    if (empty($searchInfo)) {\n                        $searchSuccess = false;\n                        $searchError = _('Wrong password/user name combination. Please try again.');\n\t                    header(\"HTTP/1.1 403 Forbidden\");\n                    }\n                    elseif (sizeof($searchInfo) > 1) {\n                        $searchSuccess = false;\n                        $searchError = _('The given user name matches multiple LDAP entries.');\n\t                    header(\"HTTP/1.1 403 Forbidden\");\n                    }\n                    else {\n                        $username = $searchInfo[0]['dn'];\n                    }\n                }\n                else {\n                    $searchSuccess = false;\n                    $searchError = _('Unable to find the user name in LDAP.');\n\t                header(\"HTTP/1.1 403 Forbidden\");\n                    if (ldap_errno($searchLDAP->server()) != 0) {\n                        $searchError .= ' ' . getDefaultLDAPErrorString($searchLDAP->server());\n                    }\n                }\n            }\n            else {\n                $searchSuccess = false;\n                $searchError = _('Unable to find the user name in LDAP.');\n\t            header(\"HTTP/1.1 403 Forbidden\");\n                if (ldap_errno($searchLDAP->server()) != 0) {\n                    $searchError .= ' ' . getDefaultLDAPErrorString($searchLDAP->server());\n                }\n            }\n\t\t\tif (!$searchSuccess) {\n\t\t\t\t$error_message = $searchError;\n\t\t\t\tlogNewMessage(LOG_ERR, 'User ' . $username . ' (' . $clientSource . ') failed to log in. ' . $searchError . '');\n\t\t\t\t$searchLDAP->close();\n\t\t\t\tdisplay_LoginPage($licenseValidator, $error_message);\n\t\t\t\texit();\n\t\t\t}\n\t\t\t$searchLDAP->close();\n\t\t}\n        catch (LAMException $e) {\n\t        $searchLDAP->close();\n\t        display_LoginPage($licenseValidator, $e->getTitle(), $e->getMessage());\n\t        exit();\n        }\n\t}\n\t// try to connect to LDAP\n    try {\n\t    $_SESSION['ldap']->connect($username, $password); // Connect to LDAP server for verifying username/password\n\t\t$_SESSION['loggedIn'] = true;\n\t\t// set security settings for session\n\t\t$_SESSION['sec_session_id'] = session_id();\n\t\t$_SESSION['sec_client_ip'] = $_SERVER['REMOTE_ADDR'];\n\t\t$_SESSION['sec_sessionTime'] = time();\n\t\taddSecurityTokenToSession();\n\t\t// logging\n\t\tlogNewMessage(LOG_NOTICE, 'User ' . $username . ' (' . $clientSource . ') successfully logged in.');\n\t\t// Load main frame or 2 factor page\n\t\tif ($_SESSION['config']->getTwoFactorAuthentication() == TwoFactorProviderService::TWO_FACTOR_NONE) {\n\t\t\tmetaRefresh(\"./main.php\");\n\t\t}\n\t\telse {\n\t\t\t$_SESSION['2factorRequired'] = true;\n\t\t\tmetaRefresh(\"./login2Factor.php\");\n\t\t}\n\t\tdie();\n\t}\n\tcatch (LAMException $e) {\n\t\theader(\"HTTP/1.1 403 Forbidden\");\n\t\t$extraMessage = null;\n\t\tif (($searchLDAP !== null) && ($e->getLdapErrorCode() == 49)) {\n\t\t\t$extraMessage = getExtraInvalidCredentialsMessage($searchLDAP->server(), $username);\n\t\t\t$searchLDAP->close();\n\t\t}\n\t\tdisplay_LoginPage($licenseValidator, $e->getTitle(), $e->getMessage(), $extraMessage);\n\t\texit();\n    }\n}\n\n//displays the login window\ntry {\n\tdisplay_LoginPage($licenseValidator, $error_message);\n} catch (LAMException $e) {\n    logNewMessage(LOG_ERR, 'Unable to render login page: ' . $e->getTitle());\n}\n", "<?php\n/*\n\n  This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)\n  Copyright (C) 2003 - 2019  Roland Gruber\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n*/\n\n/**\n* User is logged off from LDAP server, session is destroyed.\n*\n* @package main\n* @author Roland Gruber\n*/\n\n\n// delete key and iv in cookie\nsetcookie(\"Key\", \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", 0, \"/\", '', false, true);\nsetcookie(\"IV\", \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", 0, \"/\", '', false, true);\n\n/** security functions */\ninclude_once(__DIR__ . \"/../lib/security.inc\");\n/** Used to display status messages */\ninclude_once(__DIR__ . \"/../lib/status.inc\");\n/** LDAP settings are deleted at logout */\ninclude_once(__DIR__ . \"/../lib/ldap.inc\");\n\n// start session\nstartSecureSession();\n\n// log message\nif (isset($_SESSION['loggedIn']) || ($_SESSION['loggedIn'] === true)) {\n\tlogNewMessage(LOG_NOTICE, 'User logged off.');\n\n\t// close LDAP connection\n\tif (!empty($_SESSION[\"ldap\"])) {\n\t\t$_SESSION[\"ldap\"]->destroy();\n\t}\n}\n\nsetlanguage();\n\n// destroy session\nsession_destroy();\nunset($_SESSION);\n\n// redirect to login page\nmetaRefresh('login.php');\n?>\n", "<?php\nnamespace LAM\\PWA;\n/*\n\n  This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)\n  Copyright (C) 2019 - 2022  Roland Gruber\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n*/\n\n/**\n* Manifest for progressive web app.\n*\n* @author Roland Gruber\n* @package tools\n*/\n\n/** security functions */\ninclude_once(__DIR__ . \"/../lib/security.inc\");\n/** common functions */\ninclude_once(__DIR__ . \"/../lib/account.inc\");\n\nif (!headers_sent()) {\n\theader('Content-Type: application/json; charset=utf-8');\n}\n\n$urlMatches = array();\nif (preg_match('/http(s)?:\\\\/\\\\/[^\\\\/]+(\\\\/.*)\\/templates\\/manifest.php.*/', getCallingURL(), $urlMatches)) {\n\t$baseUrl = $urlMatches[2];\n}\nelse {\n\tlogNewMessage('Unable to get base URL from ' . getCallingURL());\n\texit();\n}\n\necho '{\n  \"short_name\": \"LAM\",\n  \"name\": \"LDAP Account Manager\",\n  \"icons\": [\n    {\n      \"src\": \"' . $baseUrl . '/graphics/logo_192x192.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"192x192\"\n    },\n    {\n      \"src\": \"' . $baseUrl . '/graphics/logo_512x512.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"512x512\"\n    }\n  ],\n  \"start_url\": \"' . $baseUrl . '/templates/login.php\",\n  \"display\": \"standalone\"\n}';\n", "<?php\nuse PHPUnit\\Framework\\TestCase;\n/*\n This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)\n Copyright (C) 2022  Roland Gruber\n\n This program is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2 of the License, or\n (at your option) any later version.\n\n This program is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this program; if not, write to the Free Software\n Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n */\n\ninclude_once __DIR__ . '/../../lib/modules.inc';\n\n/**\n * modules.inc test cases.\n *\n * @author Roland Gruber\n */\nclass ModulesTest extends TestCase {\n\n\t/**\n\t * Tests unformatShortFormatToSeconds() without characters.\n\t */\n\tfunction testScopeAndModuleValidation() {\n\t\t$this->assertTrue(ScopeAndModuleValidation::isValidModuleName('posixAccount'));\n\t\t$this->assertTrue(ScopeAndModuleValidation::isValidModuleName('inetOrgPerson'));\n\t\t$this->assertFalse(ScopeAndModuleValidation::isValidModuleName('notExistingModule'));\n\t\t$this->assertFalse(ScopeAndModuleValidation::isValidModuleName('.'));\n\t\t$this->assertFalse(ScopeAndModuleValidation::isValidModuleName('abc/def'));\n\t\t$this->assertFalse(ScopeAndModuleValidation::isValidModuleName(\"posixAccount\\n\"));\n\n\t\t$this->assertTrue(ScopeAndModuleValidation::isValidScopeName('user'));\n\t\t$this->assertTrue(ScopeAndModuleValidation::isValidScopeName('group'));\n\t\t$this->assertFalse(ScopeAndModuleValidation::isValidScopeName('notExistingScope'));\n\t\t$this->assertFalse(ScopeAndModuleValidation::isValidScopeName('.'));\n\t\t$this->assertFalse(ScopeAndModuleValidation::isValidScopeName('abc/def'));\n\t\t$this->assertFalse(ScopeAndModuleValidation::isValidScopeName(\"user\\n\"));\n\t}\n\n}\n", "Options -Indexes\n<Files ~ \".*\\.php.*\">\n    Require all denied\n</Files>\n<Files ~ \".*\\.inc\">\n    Require all denied\n</Files>\n"], "buggy_code_start_loc": [12, 4, 12, 6, 1, 121, 167, 179, 2966, 308, 1897, 20, 184, 201, 25, 177, 32, 6, 1, 1], "buggy_code_end_loc": [25, 19, 25, 16, 21, 129, 169, 1605, 3376, 2856, 3234, 372, 752, 449, 128, 541, 36, 44, 2, 1], "fixing_code_start_loc": [13, 5, 13, 6, 1, 120, 166, 179, 2965, 309, 1897, 20, 184, 200, 26, 177, 32, 6, 1, 2], "fixing_code_end_loc": [57, 23, 57, 22, 26, 120, 166, 1595, 3368, 2926, 3230, 372, 724, 436, 137, 539, 34, 48, 52, 8], "type": "CWE-79", "message": "LDAP Account Manager (LAM) is a webfrontend for managing entries (e.g. users, groups, DHCP settings) stored in an LDAP directory. In versions prior to 8.0 the session files include the LDAP user name and password in clear text if the PHP OpenSSL extension is not installed or encryption is disabled by configuration. This issue has been fixed in version 8.0. Users unable to upgrade should install the PHP OpenSSL extension and make sure session encryption is enabled in LAM main configuration.", "other": {"cve": {"id": "CVE-2022-31085", "sourceIdentifier": "security-advisories@github.com", "published": "2022-06-27T21:15:08.217", "lastModified": "2022-07-07T14:02:30.880", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "LDAP Account Manager (LAM) is a webfrontend for managing entries (e.g. users, groups, DHCP settings) stored in an LDAP directory. In versions prior to 8.0 the session files include the LDAP user name and password in clear text if the PHP OpenSSL extension is not installed or encryption is disabled by configuration. This issue has been fixed in version 8.0. Users unable to upgrade should install the PHP OpenSSL extension and make sure session encryption is enabled in LAM main configuration."}, {"lang": "es", "value": "LDAP Account Manager (LAM) es un frontend web para administrar las entradas (por ejemplo, usuarios, grupos, configuraciones DHCP) almacenadas en un directorio LDAP. En versiones anteriores a 8.0, los archivos de sesi\u00f3n incluyen el nombre de usuario y la contrase\u00f1a de LDAP en texto sin cifrar si la extensi\u00f3n OpenSSL de PHP no est\u00e1 instalada o el cifrado est\u00e1 deshabilitado por configuraci\u00f3n. Este problema ha sido corregido en versi\u00f3n 8.0. Los usuarios que no puedan actualizar deber\u00e1n instalar la extensi\u00f3n PHP OpenSSL y asegurarse de que el cifrado de la sesi\u00f3n est\u00e1 habilitado en la configuraci\u00f3n principal de LAM"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-311"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ldap-account-manager:ldap_account_manager:*:*:*:*:*:internet_explorer:*:*", "versionEndExcluding": "8.0", "matchCriteriaId": "FE63DDE0-D43E-4D54-8E32-12BDC64076D5"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:11.0:*:*:*:*:*:*:*", "matchCriteriaId": "FA6FEEC2-9F11-4643-8827-749718254FED"}]}]}], "references": [{"url": "https://github.com/LDAPAccountManager/lam/commit/f1d5d04952f39a1b4ea203d3964fa88e1429dfd4", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/LDAPAccountManager/lam/security/advisories/GHSA-6m3q-5c84-6h6j", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://www.debian.org/security/2022/dsa-5177", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/LDAPAccountManager/lam/commit/f1d5d04952f39a1b4ea203d3964fa88e1429dfd4"}}