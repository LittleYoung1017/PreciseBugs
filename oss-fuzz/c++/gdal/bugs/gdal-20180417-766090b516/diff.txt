diff --git a/autotest/ogr/ogr_dxf.py b/autotest/ogr/ogr_dxf.py
index 8181e28f17..d566361567 100755
--- a/autotest/ogr/ogr_dxf.py
+++ b/autotest/ogr/ogr_dxf.py
@@ -3014,6 +3014,15 @@ def ogr_dxf_43():
 
 def ogr_dxf_44():
 
+    with gdaltest.config_option('DXF_MAX_BSPLINE_CONTROL_POINTS', '1'):
+        ds = ogr.Open('data/leader-mleader.dxf')
+        lyr = ds.GetLayer(0)
+        with gdaltest.error_handler():
+            lyr.GetFeatureCount()
+        if gdal.GetLastErrorMsg().find('DXF_MAX_BSPLINE_CONTROL_POINTS') < 0:
+            gdaltest.post_reason('fail')
+            return 'fail'
+
     ds = ogr.Open('data/leader-mleader.dxf')
     lyr = ds.GetLayer(0)
 
diff --git a/gdal/ogr/ogrsf_frmts/dxf/ogrdxf_leader.cpp b/gdal/ogr/ogrsf_frmts/dxf/ogrdxf_leader.cpp
index 77767444cb..fdae922e2b 100644
--- a/gdal/ogr/ogrsf_frmts/dxf/ogrdxf_leader.cpp
+++ b/gdal/ogr/ogrsf_frmts/dxf/ogrdxf_leader.cpp
@@ -1258,6 +1258,18 @@ static std::vector<DXFTriple> GetBSplineControlPoints(
     CPLAssert( nPoints > 0 );
     CPLAssert( nPoints == static_cast<int>( adfParameters.size() ) );
 
+    // RAM consumption is quadratic in the number of control points.
+    if( nPoints > atoi(CPLGetConfigOption(
+                        "DXF_MAX_BSPLINE_CONTROL_POINTS", "2000")) )
+    {
+        CPLError(CE_Failure, CPLE_AppDefined,
+                 "Too many number of control points (%d) for B-Spline. "
+                 "Set DXF_MAX_BSPLINE_CONTROL_POINTS configuration "
+                 "option to a higher value to remove this limitation "
+                 "(at the cost of significant RAM consumption)", nPoints);
+        return std::vector<DXFTriple>();
+    }
+
     // We want to solve the linear system NP=D for P, where N is a coefficient
     // matrix made up of values of the basis functions at each parameter
     // value, with two additional rows for the endpoint tangent information.
