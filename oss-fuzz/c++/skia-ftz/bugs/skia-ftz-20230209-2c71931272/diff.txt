diff --git a/src/base/SkCubics.cpp b/src/base/SkCubics.cpp
index 63201edcf8..f250bf6963 100644
--- a/src/base/SkCubics.cpp
+++ b/src/base/SkCubics.cpp
@@ -59,7 +59,10 @@ int SkCubics::RootsReal(double A, double B, double C, double D, double solution[
     }
     double a, b, c;
     {
-        double invA = 1 / A;
+        // If A is zero (e.g. B was nan and thus close_to_a_quadratic was false), we will
+        // temporarily have infinities rolling about, but will catch that when checking
+        // R2MinusQ3.
+        double invA = sk_ieee_double_divide(1, A);
         a = B * invA;
         b = C * invA;
         c = D * invA;
diff --git a/tests/CubicRootsTest.cpp b/tests/CubicRootsTest.cpp
index 9a8c4bb610..c8323e9829 100644
--- a/tests/CubicRootsTest.cpp
+++ b/tests/CubicRootsTest.cpp
@@ -269,6 +269,16 @@ DEF_TEST(CubicRootsReal_NonFiniteNumbers, reporter) {
                                            roots);
         REPORTER_ASSERT(reporter, numRoots == 0, "No finite roots expected, got %d", numRoots);
     }
+    {
+        skiatest::ReporterContext subtest(reporter, "oss-fuzz:55829 A is zero and B is NAN");
+        int numRoots = SkCubics::RootsReal(
+                                           0,
+                                           sk_bit_cast<double>(0xffffffffffff2020), //-nan
+                                           sk_bit_cast<double>(0x20202020202020ff), // 6.013470e-154
+                                           sk_bit_cast<double>(0xff20202020202020), //-2.211661e+304
+                                           roots);
+        REPORTER_ASSERT(reporter, numRoots == 0, "No finite roots expected, got %d", numRoots);
+    }
 }
 
 static void testCubicValidT(skiatest::Reporter* reporter, std::string name,
