diff --git a/gn/sksl_tests.gni b/gn/sksl_tests.gni
index b3b6a8542d..8f309f1f3f 100644
--- a/gn/sksl_tests.gni
+++ b/gn/sksl_tests.gni
@@ -127,6 +127,7 @@ sksl_error_tests = [
   "/sksl/errors/Ossfuzz40479.sksl",
   "/sksl/errors/Ossfuzz40660.sksl",
   "/sksl/errors/Ossfuzz44045.sksl",
+  "/sksl/errors/Ossfuzz44551.sksl",
   "/sksl/errors/OverflowFloatLiteral.sksl",
   "/sksl/errors/OverflowInlinedLiteral.sksl",
   "/sksl/errors/OverflowIntLiteral.sksl",
diff --git a/resources/sksl/errors/OpenArray.sksl b/resources/sksl/errors/OpenArray.sksl
index 9a665305d0..63de3bb43d 100644
--- a/resources/sksl/errors/OpenArray.sksl
+++ b/resources/sksl/errors/OpenArray.sksl
@@ -6,5 +6,4 @@ void main(inout float4 color) {
 shader 'main' must be main() or main(float2)
 unknown identifier 'color'
 expected expression, but found '='
-unknown identifier 'color'
 *%%*/
diff --git a/resources/sksl/errors/Ossfuzz44551.sksl b/resources/sksl/errors/Ossfuzz44551.sksl
new file mode 100644
index 0000000000..b6c8017544
--- /dev/null
+++ b/resources/sksl/errors/Ossfuzz44551.sksl
@@ -0,0 +1,11 @@
+void m( ){;
+int x;x+x-x+x+x+++x-+x+x+
+ x+
+ x+
+x+x+x+x;x* x+7+x+x+x+++x-+x+x+x+x;x+x-x+x* x+8+x+
+x+x+x+x+x-+x+x+x+-x+x+++x-+ x+7+x +x-+x+x+x+++x-+x-+x+x* x+7;x+
+x+x+x+x+x+++x-+x+x+
+ void o(){{{{{{{{{{{{{{{{{{{{{{{{{ 3x+
+ x+
+ x+3+x+x+x+++x-+x+
+x+x+x+x+x+++x&+-+x,~0/1;}void n() {;;m()7.<<void o);;9;;}void l(){n();;;0;;;({}[ colod({h
\ No newline at end of file
diff --git a/resources/sksl/errors/PrototypeInFuncBody.sksl b/resources/sksl/errors/PrototypeInFuncBody.sksl
index cca9968504..b440ad2a2a 100644
--- a/resources/sksl/errors/PrototypeInFuncBody.sksl
+++ b/resources/sksl/errors/PrototypeInFuncBody.sksl
@@ -4,5 +4,4 @@ void main() {
 
 /*%%*
 expected ';', but found '('
-expected expression, but found ')'
 *%%*/
diff --git a/src/sksl/SkSLDSLParser.cpp b/src/sksl/SkSLDSLParser.cpp
index c05f7f18e8..1dbdb8b55c 100644
--- a/src/sksl/SkSLDSLParser.cpp
+++ b/src/sksl/SkSLDSLParser.cpp
@@ -56,6 +56,7 @@ public:
         ++fParser->fDepth;
         if (fParser->fDepth > kMaxParseDepth) {
             fParser->error(fParser->peek(), "exceeded max parse depth");
+            fParser->fEncounteredFatalError = true;
             return false;
         }
         return true;
@@ -601,10 +602,6 @@ DSLStatement DSLParser::varDeclarations() {
 
 /* STRUCT IDENTIFIER LBRACE varDeclaration* RBRACE */
 std::optional<DSLType> DSLParser::structDeclaration() {
-    AutoDSLDepth depth(this);
-    if (!depth.increase()) {
-        return std::nullopt;
-    }
     if (!this->expect(Token::Kind::TK_STRUCT, "'struct'")) {
         return std::nullopt;
     }
@@ -615,6 +612,10 @@ std::optional<DSLType> DSLParser::structDeclaration() {
     if (!this->expect(Token::Kind::TK_LBRACE, "'{'")) {
         return std::nullopt;
     }
+    AutoDSLDepth depth(this);
+    if (!depth.increase()) {
+        return std::nullopt;
+    }
     SkTArray<DSLField> fields;
     std::unordered_set<std::string> field_names;
     while (!this->checkNext(Token::Kind::TK_RBRACE)) {
@@ -1269,6 +1270,9 @@ std::optional<DSLBlock> DSLParser::block() {
                 return std::nullopt;
             default: {
                 DSLStatement statement = this->statement();
+                if (fEncounteredFatalError) {
+                    return std::nullopt;
+                }
                 if (statement.hasValue()) {
                     statements.push_back(statement.release());
                 }
@@ -1357,29 +1361,29 @@ DSLExpression DSLParser::assignmentExpression() {
 
 /* logicalOrExpression ('?' expression ':' assignmentExpression)? */
 DSLExpression DSLParser::ternaryExpression() {
-    AutoDSLDepth depth(this);
     DSLExpression base = this->logicalOrExpression();
     if (!base.hasValue()) {
         return {};
     }
-    if (this->checkNext(Token::Kind::TK_QUESTION)) {
-        if (!depth.increase()) {
-            return {};
-        }
-        DSLExpression trueExpr = this->expression();
-        if (!trueExpr.hasValue()) {
-            return {};
-        }
-        if (this->expect(Token::Kind::TK_COLON, "':'")) {
-            DSLExpression falseExpr = this->assignmentExpression();
-            if (!falseExpr.hasValue()) {
-                return {};
-            }
-            return Select(std::move(base), std::move(trueExpr), std::move(falseExpr));
-        }
+    if (!this->checkNext(Token::Kind::TK_QUESTION)) {
+        return base;
+    }
+    AutoDSLDepth depth(this);
+    if (!depth.increase()) {
+        return {};
+    }
+    DSLExpression trueExpr = this->expression();
+    if (!trueExpr.hasValue()) {
         return {};
     }
-    return base;
+    if (!this->expect(Token::Kind::TK_COLON, "':'")) {
+        return {};
+    }
+    DSLExpression falseExpr = this->assignmentExpression();
+    if (!falseExpr.hasValue()) {
+        return {};
+    }
+    return Select(std::move(base), std::move(trueExpr), std::move(falseExpr));
 }
 
 /* logicalXorExpression (LOGICALOR logicalXorExpression)* */
@@ -1562,10 +1566,10 @@ DSLExpression DSLParser::unaryExpression() {
         case Token::Kind::TK_BITWISENOT:
         case Token::Kind::TK_PLUSPLUS:
         case Token::Kind::TK_MINUSMINUS: {
+            this->nextToken();
             if (!depth.increase()) {
                 return {};
             }
-            this->nextToken();
             DSLExpression expr = this->unaryExpression();
             if (!expr.hasValue()) {
                 return {};
@@ -1621,8 +1625,7 @@ DSLExpression DSLParser::postfixExpression() {
     }
 }
 
-DSLExpression DSLParser::swizzle(int line, DSLExpression base,
-        std::string_view swizzleMask) {
+DSLExpression DSLParser::swizzle(int line, DSLExpression base, std::string_view swizzleMask) {
     SkASSERT(swizzleMask.length() > 0);
     if (!base.type().isVector() && !base.type().isScalar()) {
         return base.field(swizzleMask, this->position(line));
diff --git a/tests/sksl/errors/ForInitStmt.glsl b/tests/sksl/errors/ForInitStmt.glsl
index e5908bc6e0..b4b4bcc4b2 100644
--- a/tests/sksl/errors/ForInitStmt.glsl
+++ b/tests/sksl/errors/ForInitStmt.glsl
@@ -1,7 +1,4 @@
 ### Compilation failed:
 
 error: 1: expected expression, but found 'for'
-error: 1: expected expression, but found ';'
-error: 1: expected expression, but found ')'
-error: 1: expected expression, but found ')'
-4 errors
+1 error
diff --git a/tests/sksl/errors/OpenArray.glsl b/tests/sksl/errors/OpenArray.glsl
index 50ce45a161..5f76399fe3 100644
--- a/tests/sksl/errors/OpenArray.glsl
+++ b/tests/sksl/errors/OpenArray.glsl
@@ -3,5 +3,4 @@
 error: 1: shader 'main' must be main() or main(float2)
 error: 2: unknown identifier 'color'
 error: 2: expected expression, but found '='
-error: 2: unknown identifier 'color'
-4 errors
+3 errors
diff --git a/tests/sksl/errors/Ossfuzz40660.glsl b/tests/sksl/errors/Ossfuzz40660.glsl
index 60c6dbe72b..9fb063af2e 100644
--- a/tests/sksl/errors/Ossfuzz40660.glsl
+++ b/tests/sksl/errors/Ossfuzz40660.glsl
@@ -6,5 +6,4 @@ error: 1: expected ')' to complete expression, but found '`'
 error: 1: integer is out of range for type 'int': 3689348940
 error: 2: expected ']' to complete array access expression, but found ''
 error: 2: expected ';', but found ''
-error: 2: expected '}', but found end of file
-7 errors
+6 errors
diff --git a/tests/sksl/errors/Ossfuzz44551.glsl b/tests/sksl/errors/Ossfuzz44551.glsl
new file mode 100644
index 0000000000..1b5b1cb4e2
--- /dev/null
+++ b/tests/sksl/errors/Ossfuzz44551.glsl
@@ -0,0 +1,5 @@
+### Compilation failed:
+
+error: 6: type mismatch: '+' cannot operate on 'int', '<INVALID>'
+error: 8: expected ';', but found 'o'
+2 errors
diff --git a/tests/sksl/errors/PrototypeInFuncBody.glsl b/tests/sksl/errors/PrototypeInFuncBody.glsl
index 811fa12f60..f32373f625 100644
--- a/tests/sksl/errors/PrototypeInFuncBody.glsl
+++ b/tests/sksl/errors/PrototypeInFuncBody.glsl
@@ -1,5 +1,4 @@
 ### Compilation failed:
 
 error: 2: expected ';', but found '('
-error: 2: expected expression, but found ')'
-2 errors
+1 error
diff --git a/tests/sksl/errors/SwitchDuplicateDefault.glsl b/tests/sksl/errors/SwitchDuplicateDefault.glsl
index e0df55f1bd..e9f5363ed9 100644
--- a/tests/sksl/errors/SwitchDuplicateDefault.glsl
+++ b/tests/sksl/errors/SwitchDuplicateDefault.glsl
@@ -1,6 +1,4 @@
 ### Compilation failed:
 
 error: 4: expected expression, but found 'default'
-error: 4: expected expression, but found ':'
-error: 5: break statement must be inside a loop or switch
-3 errors
+1 error
