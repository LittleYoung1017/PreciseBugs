24a0e5bdfd	e283c99358	Sat Nov 5 16:19:53 2022 +0000	subparse: Fix non-closed tag handling.	commit 24a0e5bdfdb42217ee93ff858abcc35bad821bf7Author: Edward Hervey <edward@centricular.com>Date:   Sat Nov 5 07:34:27 2022 +0100    subparse: Fix non-closed tag handling.        Unclear what the goal was, but we could end up reading way past the next_tag.        Instead just move everything from after the end tag ('>') to the next_tag.        Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=53040        Part-of: <https://gitlab.freedesktop.org/gstreamer/gstreamer/-/merge_requests/3340>
1e269a3c6d	1c69fe3fc8	Wed Sep 7 07:20:53 2022 +0000	subparse: fix crash when parsing invalid timestamps in mpl2	commit 1e269a3c6d2be1dcb48ff049319c200ba822cc4fAuthor: Matthew Waters <matthew@centricular.com>Date:   Wed Sep 7 16:35:38 2022 +1000    subparse: fix crash when parsing invalid timestamps in mpl2        Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=49245        Part-of: <https://gitlab.freedesktop.org/gstreamer/gstreamer/-/merge_requests/2989>
84a3b0ef87	79d8b435d7	Fri Jul 1 17:24:52 2022 +0000	samiparse: fix handling of self-closing tags	commit 84a3b0ef87e1b4eebe3ebef2c0de620a40afe4c1Author: Tim-Philipp Müller <tim@centricular.com>Date:   Thu Jun 30 00:13:19 2022 +0100    samiparse: fix handling of self-closing tags        We would check the wrong string (rest of line rather than element)    for the / suffix of self-closing tags, which is not only wrong but    also has atrocious performance with certain strings like the garbled    nonsense clusterfuzz feeds us, which might cause discoverer to time    out when processing garbled SAMI files.        Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=47461        Part-of: <https://gitlab.freedesktop.org/gstreamer/gstreamer/-/merge_requests/2685>
62d09f73b7	4c98e2d289	Fri Apr 8 08:52:45 2022 +0000	ogg: fix possible buffer overrun	commit 62d09f73b72d574d075b68b227710e47c10311d2Author: Matthew Waters <matthew@centricular.com>Date:   Fri Apr 8 11:10:49 2022 +1000    ogg: fix possible buffer overrun        If an ogg stream does not match our expectations of how the end of a    buffer may be structured, it was possible to read memory past the end of    the buffer parsed by libogg.  Include a bounds check for this case and    stop parsing.        Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=3930        Part-of: <https://gitlab.freedesktop.org/gstreamer/gstreamer/-/merge_requests/2134>
03ff52ee69	1a5d2ce98c	Fri Mar 18 13:16:42 2022 +1100	ci/fuzzling: fix oss-fuzz build	commit 03ff52ee6927cc2238fba3aa95cd44e6910a5f37Author: Matthew Waters <matthew@centricular.com>Date:   Fri Mar 18 13:16:42 2022 +1100    ci/fuzzling: fix oss-fuzz build        gst-plugins-base doesn't have a cairo option anymore.        Part-of: <https://gitlab.freedesktop.org/gstreamer/gstreamer/-/merge_requests/1975>
1654faad38	e367d3e812	Sun May 6 11:10:21 2018 +0200	typefindfunctions: fix tap typefinder	commit 1654faad38b055ec43f9e569bbd59451615f63fcAuthor: Tim-Philipp Müller <tim@centricular.com>Date:   Sun May 6 11:09:45 2018 +0200    typefindfunctions: fix tap typefinder        If we memcmp() 12 bytes we should make sure to get    at least 12 bytes as well, and not just 8 bytes.        Thanks oss-fuzz!
