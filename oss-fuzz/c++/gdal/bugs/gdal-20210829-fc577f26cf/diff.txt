diff --git a/gdal/apps/ogr2ogr_lib.cpp b/gdal/apps/ogr2ogr_lib.cpp
index cecebd8825..3335c1fd72 100644
--- a/gdal/apps/ogr2ogr_lib.cpp
+++ b/gdal/apps/ogr2ogr_lib.cpp
@@ -4094,7 +4094,7 @@ std::unique_ptr<TargetLayerInfo> SetupTargetLayer::Setup(OGRLayer* poSrcLayer,
 
         const bool caseInsensitive =
             !EQUAL(m_poDstDS->GetDriver()->GetDescription(), "GeoJSON");
-        auto formatName = [caseInsensitive](const char* name) {
+        const auto formatName = [caseInsensitive](const char* name) {
             if( caseInsensitive ) {
                 return CPLString(name).toupper();
             } else {
@@ -4151,6 +4151,17 @@ std::unique_ptr<TargetLayerInfo> SetupTargetLayer::Setup(OGRLayer* poSrcLayer,
                 formatName(poSrcFDefn->GetFieldDefn(i)->GetNameRef()));
         }
 
+        // For each source field name, memorize the last number suffix to have unique
+        // field names in the target.
+        // Let's imagine we have a source layer with the field name foo repeated twice
+        // After dealing the first field, oMapFieldNameToLastSuffix["foo"] will be
+        // 1, so when starting a unique name for the second field, we'll be able to
+        // start at 2.
+        // This avoids quadratic complexity if a big number of source field names
+        // are identical.
+        // Like in https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=37768
+        std::map<std::string, int> oMapFieldNameToLastSuffix;
+
         for( size_t i = 0; i < anSrcFieldIndices.size(); i++ )
         {
             const int iField = anSrcFieldIndices[i];
@@ -4174,12 +4185,14 @@ std::unique_ptr<TargetLayerInfo> SetupTargetLayer::Setup(OGRLayer* poSrcLayer,
                                   m_bUnsetDefault);
 
             /* The field may have been already created at layer creation */
-            std::map<CPLString, int>::iterator oIter =
-                oMapPreExistingFields.find(formatName(oFieldDefn.GetNameRef()));
-            if( oIter != oMapPreExistingFields.end() )
             {
-                anMap[iField] = oIter->second;
-                continue;
+                const auto oIter =
+                    oMapPreExistingFields.find(formatName(oFieldDefn.GetNameRef()));
+                if( oIter != oMapPreExistingFields.end() )
+                {
+                    anMap[iField] = oIter->second;
+                    continue;
+                }
             }
 
             bool bHasRenamed = false;
@@ -4189,9 +4202,11 @@ std::unique_ptr<TargetLayerInfo> SetupTargetLayer::Setup(OGRLayer* poSrcLayer,
                     formatName(oFieldDefn.GetNameRef())) !=
                                                     oSetDstFieldNames.end() )
             {
+                const CPLString osTmpNameRaddixUC(formatName(oFieldDefn.GetNameRef()));
                 int nTry = 1;
-                CPLString osTmpNameRaddixUC(oFieldDefn.GetNameRef());
-                osTmpNameRaddixUC = formatName(osTmpNameRaddixUC);
+                const auto oIter = oMapFieldNameToLastSuffix.find(osTmpNameRaddixUC);
+                if( oIter != oMapFieldNameToLastSuffix.end() )
+                    nTry = oIter->second;
                 CPLString osTmpNameUC = osTmpNameRaddixUC;
                 osTmpNameUC.reserve(osTmpNameUC.size() + 10);
                 while( true )
@@ -4210,6 +4225,7 @@ std::unique_ptr<TargetLayerInfo> SetupTargetLayer::Setup(OGRLayer* poSrcLayer,
                     {
                         bHasRenamed = true;
                         oFieldDefn.SetName((CPLString(oFieldDefn.GetNameRef()) + szTry).c_str());
+                        oMapFieldNameToLastSuffix[osTmpNameRaddixUC] = nTry;
                         break;
                     }
                 }
