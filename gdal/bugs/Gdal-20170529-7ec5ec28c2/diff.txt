diff --git a/gdal/frmts/nitf/nitfimage.c b/gdal/frmts/nitf/nitfimage.c
index 6d92aae5a7..b805b6d90b 100644
--- a/gdal/frmts/nitf/nitfimage.c
+++ b/gdal/frmts/nitf/nitfimage.c
@@ -707,7 +707,14 @@ NITFImage *NITFImageAccess( NITFFile *psFile, int iSegment )
 /*      Setup some image access values.  Some of these may not apply    */
 /*      for compressed images, or band interleaved by block images.     */
 /* -------------------------------------------------------------------- */
-    psImage->nWordSize = psImage->nBitsPerSample / 8;
+    if( psImage->nBitsPerSample <= 8 )
+        psImage->nWordSize = 1;
+    else if( psImage->nBitsPerSample <= 16 )
+        psImage->nWordSize = 2;
+    else if( psImage->nBitsPerSample <= 32 )
+        psImage->nWordSize = 4;
+    else
+        psImage->nWordSize = psImage->nBitsPerSample / 8;
     if( psImage->chIMODE == 'S' )
     {
         psImage->nPixelOffset = psImage->nWordSize;
@@ -1282,11 +1289,8 @@ int NITFReadImageBlock( NITFImage *psImage, int nBlockX, int nBlockY,
         else
         {
 #ifdef CPL_LSB
-            if( psImage->nWordSize * 8 == psImage->nBitsPerSample )
-            {
-                NITFSwapWords( psImage, pData,
-                            psImage->nBlockWidth * psImage->nBlockHeight);
-            }
+            NITFSwapWords( psImage, pData,
+                        psImage->nBlockWidth * psImage->nBlockHeight);
 #endif
 
             return BLKREAD_OK;
@@ -2207,6 +2211,12 @@ static void NITFSwapWordsInternal( void *pData, int nWordSize, int nWordCount,
 static void NITFSwapWords( NITFImage *psImage, void *pData, int nWordCount )
 
 {
+    if( psImage->nWordSize * 8 != psImage->nBitsPerSample )
+    {
+        // FIXME ?
+        return;
+    }
+
     if( EQUAL(psImage->szPVType,"C") )
     {
         /* According to http://jitc.fhu.disa.mil/nitf/tag_reg/imagesubheader/pvtype.html */
diff --git a/gdal/frmts/nitf/nitfrasterband.cpp b/gdal/frmts/nitf/nitfrasterband.cpp
index 211de2424c..4f92c4fe84 100644
--- a/gdal/frmts/nitf/nitfrasterband.cpp
+++ b/gdal/frmts/nitf/nitfrasterband.cpp
@@ -812,7 +812,9 @@ void NITFRasterBand::Unpack( GByte* pData )
     case 3:
     {
       // unpacks 8 pixels (3 bytes) at time
-      for( int i = 0, k = 0; i < n; i += 8, k += 3 )
+      int i = 0;
+      int k = 0;
+      for( ; i + 7 < n; i += 8, k += 3 )
       {
         pUnpackData[i+0] = ((pDataSrc[k+0] >> 5));
         pUnpackData[i+1] = ((pDataSrc[k+0] >> 2) & 0x07);
@@ -823,6 +825,22 @@ void NITFRasterBand::Unpack( GByte* pData )
         pUnpackData[i+6] = ((pDataSrc[k+2] >> 3) & 0x07);
         pUnpackData[i+7] = ((pDataSrc[k+2]) & 0x7);
       }
+      if( i < n )
+      {
+        pUnpackData[i+0] = ((pDataSrc[k+0] >> 5));
+        if( i + 1 < n )
+            pUnpackData[i+1] = ((pDataSrc[k+0] >> 2) & 0x07);
+        if( i + 2 < n )
+            pUnpackData[i+2] = ((pDataSrc[k+0] << 1) & 0x07) | (pDataSrc[k+1] >> 7);
+        if( i + 3 < n )
+            pUnpackData[i+3] = ((pDataSrc[k+1] >> 4) & 0x07);
+        if( i + 4 < n )
+            pUnpackData[i+4] = ((pDataSrc[k+1] >> 1) & 0x07);
+        if( i + 5 < n )
+            pUnpackData[i+5] = ((pDataSrc[k+1] << 2) & 0x07) | (pDataSrc[k+2] >> 6);
+        if( i + 6 < n )
+            pUnpackData[i+6] = ((pDataSrc[k+2] >> 3) & 0x07);
+      }
 
       memcpy(pData, pUnpackData, n);
       break;
@@ -830,7 +848,9 @@ void NITFRasterBand::Unpack( GByte* pData )
     case 5:
     {
       // unpacks 8 pixels (5 bytes) at time
-      for( int i = 0, k = 0; i < n; i += 8, k += 5 )
+      int i = 0;
+      int k = 0;
+      for( ; i + 7 < n; i += 8, k += 5 )
       {
         pUnpackData[i+0] = ((pDataSrc[k+0] >> 3));
         pUnpackData[i+1] = ((pDataSrc[k+0] << 2) & 0x1f) | (pDataSrc[k+1] >> 6);
@@ -841,6 +861,22 @@ void NITFRasterBand::Unpack( GByte* pData )
         pUnpackData[i+6] = ((pDataSrc[k+3] << 3) & 0x1f) | (pDataSrc[k+4] >> 5);
         pUnpackData[i+7] = ((pDataSrc[k+4]) & 0x1f);
       }
+      if( i < n )
+      {
+        pUnpackData[i+0] = ((pDataSrc[k+0] >> 3));
+        if( i + 1 < n )
+            pUnpackData[i+1] = ((pDataSrc[k+0] << 2) & 0x1f) | (pDataSrc[k+1] >> 6);
+        if( i + 2 < n )
+            pUnpackData[i+2] = ((pDataSrc[k+1] >> 1) & 0x1f);
+        if( i + 3 < n )
+            pUnpackData[i+3] = ((pDataSrc[k+1] << 4) & 0x1f) | (pDataSrc[k+2] >> 4);
+        if( i + 4 < n )
+            pUnpackData[i+4] = ((pDataSrc[k+2] << 1) & 0x1f) | (pDataSrc[k+3] >> 7);
+        if( i + 5 < n )
+            pUnpackData[i+5] = ((pDataSrc[k+3] >> 2) & 0x1f);
+        if( i + 6 < n )
+            pUnpackData[i+6] = ((pDataSrc[k+3] << 3) & 0x1f) | (pDataSrc[k+4] >> 5);
+      }
 
       memcpy(pData, pUnpackData, n);
       break;
@@ -848,13 +884,23 @@ void NITFRasterBand::Unpack( GByte* pData )
     case 6:
     {
       // unpacks 4 pixels (3 bytes) at time
-      for( int i = 0, k = 0; i < n; i += 4, k += 3 )
+      int i = 0;
+      int k = 0;
+      for( ; i + 3 < n; i += 4, k += 3 )
       {
         pUnpackData[i+0] = ((pDataSrc[k+0] >> 2));
         pUnpackData[i+1] = ((pDataSrc[k+0] << 4) & 0x3f) | (pDataSrc[k+1] >> 4);
         pUnpackData[i+2] = ((pDataSrc[k+1] << 2) & 0x3f) | (pDataSrc[k+2] >> 6);
         pUnpackData[i+3] = ((pDataSrc[k+2]) & 0x3f);
       }
+      if( i < n )
+      {
+        pUnpackData[i+0] = ((pDataSrc[k+0] >> 2));
+        if( i + 1 < n )
+            pUnpackData[i+1] = ((pDataSrc[k+0] << 4) & 0x3f) | (pDataSrc[k+1] >> 4);
+        if( i + 2 < n )
+            pUnpackData[i+2] = ((pDataSrc[k+1] << 2) & 0x3f) | (pDataSrc[k+2] >> 6);
+      }
 
       memcpy(pData, pUnpackData, n);
       break;
@@ -862,7 +908,9 @@ void NITFRasterBand::Unpack( GByte* pData )
     case 7:
     {
       // unpacks 8 pixels (7 bytes) at time
-      for( int i = 0, k = 0; i < n; i += 8, k += 7 )
+      int i = 0;
+      int k = 0;
+      for( ; i + 7 < n; i += 8, k += 7 )
       {
         pUnpackData[i+0] = ((pDataSrc[k+0] >> 1));
         pUnpackData[i+1] = ((pDataSrc[k+0] << 6) & 0x7f) | (pDataSrc[k+1] >> 2);
@@ -873,6 +921,22 @@ void NITFRasterBand::Unpack( GByte* pData )
         pUnpackData[i+6] = ((pDataSrc[k+5] << 1) & 0x7f) | (pDataSrc[k+6] >> 7);
         pUnpackData[i+7] = ((pDataSrc[k+6]) & 0x7f);
       }
+      if( i < n )
+      {
+        pUnpackData[i+0] = ((pDataSrc[k+0] >> 1));
+        if( i + 1 < n )
+            pUnpackData[i+1] = ((pDataSrc[k+0] << 6) & 0x7f) | (pDataSrc[k+1] >> 2);
+        if( i + 2 < n )
+            pUnpackData[i+2] = ((pDataSrc[k+1] << 5) & 0x7f) | (pDataSrc[k+2] >> 3) ;
+        if( i + 3 < n )
+            pUnpackData[i+3] = ((pDataSrc[k+2] << 4) & 0x7f) | (pDataSrc[k+3] >> 4);
+        if( i + 4 < n )
+            pUnpackData[i+4] = ((pDataSrc[k+3] << 3) & 0x7f) | (pDataSrc[k+4] >> 5);
+        if( i + 5 < n )
+            pUnpackData[i+5] = ((pDataSrc[k+4] << 2) & 0x7f) | (pDataSrc[k+5] >> 6);
+        if( i + 6 < n )
+            pUnpackData[i+6] = ((pDataSrc[k+5] << 1) & 0x7f) | (pDataSrc[k+6] >> 7);
+      }
 
       memcpy(pData, pUnpackData, n);
       break;
