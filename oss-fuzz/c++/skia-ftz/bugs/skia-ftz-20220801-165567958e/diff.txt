diff --git a/resources/sksl/folding/MatrixVectorNoOpFolding.sksl b/resources/sksl/folding/MatrixVectorNoOpFolding.sksl
index 8e9c151c19..3af1fdba34 100644
--- a/resources/sksl/folding/MatrixVectorNoOpFolding.sksl
+++ b/resources/sksl/folding/MatrixVectorNoOpFolding.sksl
@@ -4,62 +4,159 @@ uniform float4 testInputs;
 uniform half4 colorRed, colorGreen;
 uniform half unknownInput;
 
-bool test_mat2_vec2() {
+bool test_no_op_mat2_X_vec2() {
     const float2x2 i = float2x2(1.0);
     const float2x2 z = float2x2(0.0);
+    const float2x2 n = float2x2(-1.0);
 
     float2 v, vv;
     v = testInputs.xy * i;
     v = i * testInputs.xy;
+    if (v != testInputs.xy) return false;
 
     v = v * i;
     v = i * v;
     v *= i;
+    if (v != testInputs.xy) return false;
+
+    v = testInputs.xy * n;
+    v = n * testInputs.xy;
+    if (v != -testInputs.xy) return false;
 
     vv = v * z;
     vv = z * v;
-
-    return v == testInputs.xy && vv == z[0];
+    return vv == z[0];
 }
 
-bool test_mat3_vec3() {
+bool test_no_op_mat3_X_vec3() {
     const float3x3 i = float3x3(1.0);
     const float3x3 z = float3x3(0.0);
+    const float3x3 n = float3x3(-1.0);
 
     float3 v, vv;
     v = testInputs.xyz * i;
     v = i * testInputs.xyz;
+    if (v != testInputs.xyz) return false;
 
     v = v * i;
     v = i * v;
     v *= i;
+    if (v != testInputs.xyz) return false;
+
+    v = testInputs.xyz * n;
+    v = n * testInputs.xyz;
+    if (v != -testInputs.xyz) return false;
 
     vv = v * z;
     vv = z * v;
-
-    return v == testInputs.xyz && vv == z[0];
+    return vv == z[0];
 }
 
-bool test_mat4_vec4() {
+bool test_no_op_mat4_X_vec4() {
     const float4x4 i = float4x4(1.0);
     const float4x4 z = float4x4(0.0);
+    const float4x4 n = float4x4(-1.0);
 
     float4 v, vv;
     v = testInputs * i;
     v = i * testInputs;
+    if (v != testInputs) return false;
 
     v = v * i;
     v = i * v;
     v *= i;
+    if (v != testInputs) return false;
+
+    v = testInputs * n;
+    v = n * testInputs;
+    if (v != -testInputs) return false;
 
     vv = v * z;
     vv = z * v;
+    return vv == z[0];
+}
 
-    return v == testInputs && vv == z[0];
+bool test_no_op_vec2_X_mat2() {
+    const float2 n = float2(-1.0);
+    const float2 i = float2(1.0);
+    const float2 z = float2(0.0);
+
+    // These operations can be optimized; multiplying a zero vector across any matrix always results
+    // in a zero vector.
+    float2 v, vv;
+    vv = z * testMatrix2x2;
+    vv = testMatrix2x2 * z;
+    if (vv != z) return false;
+
+    // These operations can't be simplified; they do real work.
+    v = i * testMatrix2x2;
+    if (v != float2(3, 7)) return false;
+    v = testMatrix2x2 * i;
+    if (v != float2(4, 6)) return false;
+
+    v = n * testMatrix2x2;
+    if (v != -float2(3, 7)) return false;
+    v = testMatrix2x2 * n;
+    return v == -float2(4, 6);
+}
+
+bool test_no_op_vec3_X_mat3() {
+    const float3 n = float3(-1.0);
+    const float3 i = float3(1.0);
+    const float3 z = float3(0.0);
+
+    // These operations can be optimized; multiplying a zero vector across any matrix always results
+    // in a zero vector.
+    float3 v, vv;
+    vv = z * testMatrix3x3;
+    vv = testMatrix3x3 * z;
+    if (vv != z) return false;
+
+    // These operations can't be simplified; they do real work.
+    v = i * testMatrix3x3;
+    if (v != float3(6, 15, 24)) return false;
+    v = testMatrix3x3 * i;
+    if (v != float3(12, 15, 18)) return false;
+
+    v = n * testMatrix3x3;
+    if (v != -float3(6, 15, 24)) return false;
+    v = testMatrix3x3 * n;
+    return v == -float3(12, 15, 18);
+}
+
+bool test_no_op_vec4_X_mat4() {
+    const float4 n = float4(-1.0);
+    const float4 i = float4(1.0);
+    const float4 z = float4(0.0);
+    float4x4 testMatrix4x4 = float4x4(testMatrix2x2[0], testMatrix2x2[1],
+                                      testMatrix2x2[0], testMatrix2x2[1],
+                                      testMatrix2x2[0], testMatrix2x2[1],
+                                      testMatrix2x2[0], testMatrix2x2[1]);
+
+    // These operations can be optimized; multiplying a zero vector across any matrix always results
+    // in a zero vector.
+    float4 v, vv;
+    vv = z * testMatrix4x4;
+    vv = testMatrix4x4 * z;
+    if (vv != z) return false;
+
+    // These operations can't be simplified; they do real work.
+    v = i * testMatrix4x4;
+    if (v != float4(10, 10, 10, 10)) return false;
+    v = testMatrix4x4 * i;
+    if (v != float4(4, 8, 12, 16)) return false;
+
+    v = n * testMatrix4x4;
+    if (v != -float4(10, 10, 10, 10)) return false;
+    v = testMatrix4x4 * n;
+    return v == -float4(4, 8, 12, 16);
 }
 
 half4 main(float2 coords) {
-    return test_mat2_vec2() &&
-           test_mat3_vec3() &&
-           test_mat4_vec4() ? colorGreen : colorRed;
+    return test_no_op_mat2_X_vec2() &&
+           test_no_op_mat3_X_vec3() &&
+           test_no_op_mat4_X_vec4() &&
+           test_no_op_vec2_X_mat2() &&
+           test_no_op_vec3_X_mat3() &&
+           test_no_op_vec4_X_mat4() ? colorGreen : colorRed;
 }
diff --git a/src/sksl/SkSLConstantFolder.cpp b/src/sksl/SkSLConstantFolder.cpp
index b172267a23..9c11c74938 100644
--- a/src/sksl/SkSLConstantFolder.cpp
+++ b/src/sksl/SkSLConstantFolder.cpp
@@ -285,8 +285,11 @@ static std::unique_ptr<Expression> cast_expression(const Context& context,
             return ConstructorSplat::Make(context, pos, type, expr.clone());
         }
     }
-    SkASSERT(type.matches(expr.type()));
-    return expr.clone(pos);
+    if (type.matches(expr.type())) {
+        return expr.clone(pos);
+    }
+    // We can't cast matrices into vectors or vice-versa.
+    return nullptr;
 }
 
 static std::unique_ptr<Expression> zero_expression(const Context& context,
@@ -452,19 +455,31 @@ static std::unique_ptr<Expression> simplify_no_op_arithmetic(const Context& cont
     switch (op.kind()) {
         case Operator::Kind::PLUS:
             if (!is_scalar_op_matrix(left, right) && is_constant_splat(right, 0.0)) {  // x + 0
-                return cast_expression(context, pos, left, resultType);
+                if (std::unique_ptr<Expression> expr = cast_expression(context, pos, left,
+                                                                       resultType)) {
+                    return expr;
+                }
             }
             if (!is_matrix_op_scalar(left, right) && is_constant_splat(left, 0.0)) {   // 0 + x
-                return cast_expression(context, pos, right, resultType);
+                if (std::unique_ptr<Expression> expr = cast_expression(context, pos, right,
+                                                                       resultType)) {
+                    return expr;
+                }
             }
             break;
 
         case Operator::Kind::STAR:
             if (is_constant_value(right, 1.0)) {  // x * 1
-                return cast_expression(context, pos, left, resultType);
+                if (std::unique_ptr<Expression> expr = cast_expression(context, pos, left,
+                                                                       resultType)) {
+                    return expr;
+                }
             }
             if (is_constant_value(left, 1.0)) {   // 1 * x
-                return cast_expression(context, pos, right, resultType);
+                if (std::unique_ptr<Expression> expr = cast_expression(context, pos, right,
+                                                                       resultType)) {
+                    return expr;
+                }
             }
             if (is_constant_value(right, 0.0) && !left.hasSideEffects()) {  // x * 0
                 return zero_expression(context, pos, resultType);
@@ -473,25 +488,40 @@ static std::unique_ptr<Expression> simplify_no_op_arithmetic(const Context& cont
                 return zero_expression(context, pos, resultType);
             }
             if (is_constant_value(right, -1.0)) {  // x * -1 (to `-x`)
-                return negate_expression(context, pos, left, resultType);
+                if (std::unique_ptr<Expression> expr = negate_expression(context, pos, left,
+                                                                         resultType)) {
+                    return expr;
+                }
             }
             if (is_constant_value(left, -1.0)) {   // -1 * x (to `-x`)
-                return negate_expression(context, pos, right, resultType);
+                if (std::unique_ptr<Expression> expr = negate_expression(context, pos, right,
+                                                                         resultType)) {
+                    return expr;
+                }
             }
             break;
 
         case Operator::Kind::MINUS:
             if (!is_scalar_op_matrix(left, right) && is_constant_splat(right, 0.0)) {  // x - 0
-                return cast_expression(context, pos, left, resultType);
+                if (std::unique_ptr<Expression> expr = cast_expression(context, pos, left,
+                                                                       resultType)) {
+                    return expr;
+                }
             }
             if (!is_matrix_op_scalar(left, right) && is_constant_splat(left, 0.0)) {   // 0 - x
-                return negate_expression(context, pos, right, resultType);             // (to `-x`)
+                if (std::unique_ptr<Expression> expr = negate_expression(context, pos, right,
+                                                                         resultType)) {
+                    return expr;
+                }
             }
             break;
 
         case Operator::Kind::SLASH:
             if (!is_scalar_op_matrix(left, right) && is_constant_splat(right, 1.0)) {  // x / 1
-                return cast_expression(context, pos, left, resultType);
+                if (std::unique_ptr<Expression> expr = cast_expression(context, pos, left,
+                                                                       resultType)) {
+                    return expr;
+                }
             }
             break;
 
diff --git a/tests/sksl/folding/MatrixVectorNoOpFolding.glsl b/tests/sksl/folding/MatrixVectorNoOpFolding.glsl
index 29edb8e93b..b728d860c2 100644
--- a/tests/sksl/folding/MatrixVectorNoOpFolding.glsl
+++ b/tests/sksl/folding/MatrixVectorNoOpFolding.glsl
@@ -6,30 +6,103 @@ uniform vec4 testInputs;
 uniform vec4 colorRed;
 uniform vec4 colorGreen;
 uniform float unknownInput;
-bool test_mat3_vec3_b() {
+bool test_no_op_mat2_X_vec2_b() {
+    vec2 v;
+    vec2 vv;
+    v = testInputs.xy;
+    v = testInputs.xy;
+    if (v != testInputs.xy) return false;
+    if (v != testInputs.xy) return false;
+    v = -testInputs.xy;
+    v = -testInputs.xy;
+    if (v != -testInputs.xy) return false;
+    vv = vec2(0.0);
+    vv = vec2(0.0);
+    return vv == vec2(0.0, 0.0);
+}
+bool test_no_op_mat3_X_vec3_b() {
     vec3 v;
     vec3 vv;
     v = testInputs.xyz;
     v = testInputs.xyz;
+    if (v != testInputs.xyz) return false;
+    if (v != testInputs.xyz) return false;
+    v = -testInputs.xyz;
+    v = -testInputs.xyz;
+    if (v != -testInputs.xyz) return false;
     vv = vec3(0.0);
     vv = vec3(0.0);
-    return v == testInputs.xyz && vv == vec3(0.0, 0.0, 0.0);
+    return vv == vec3(0.0, 0.0, 0.0);
 }
-bool test_mat4_vec4_b() {
+bool test_no_op_mat4_X_vec4_b() {
     vec4 v;
     vec4 vv;
     v = testInputs;
     v = testInputs;
+    if (v != testInputs) return false;
+    if (v != testInputs) return false;
+    v = -testInputs;
+    v = -testInputs;
+    if (v != -testInputs) return false;
+    vv = vec4(0.0);
+    vv = vec4(0.0);
+    return vv == vec4(0.0, 0.0, 0.0, 0.0);
+}
+bool test_no_op_vec2_X_mat2_b() {
+    const vec2 n = vec2(-1.0);
+    const vec2 i = vec2(1.0);
+    const vec2 z = vec2(0.0);
+    vec2 v;
+    vec2 vv;
+    vv = vec2(0.0);
+    vv = vec2(0.0);
+    if (vv != z) return false;
+    v = i * testMatrix2x2;
+    if (v != vec2(3.0, 7.0)) return false;
+    v = testMatrix2x2 * i;
+    if (v != vec2(4.0, 6.0)) return false;
+    v = n * testMatrix2x2;
+    if (v != vec2(-3.0, -7.0)) return false;
+    v = testMatrix2x2 * n;
+    return v == vec2(-4.0, -6.0);
+}
+bool test_no_op_vec3_X_mat3_b() {
+    const vec3 n = vec3(-1.0);
+    const vec3 i = vec3(1.0);
+    const vec3 z = vec3(0.0);
+    vec3 v;
+    vec3 vv;
+    vv = vec3(0.0);
+    vv = vec3(0.0);
+    if (vv != z) return false;
+    v = i * testMatrix3x3;
+    if (v != vec3(6.0, 15.0, 24.0)) return false;
+    v = testMatrix3x3 * i;
+    if (v != vec3(12.0, 15.0, 18.0)) return false;
+    v = n * testMatrix3x3;
+    if (v != vec3(-6.0, -15.0, -24.0)) return false;
+    v = testMatrix3x3 * n;
+    return v == vec3(-12.0, -15.0, -18.0);
+}
+bool test_no_op_vec4_X_mat4_b() {
+    const vec4 n = vec4(-1.0);
+    const vec4 i = vec4(1.0);
+    const vec4 z = vec4(0.0);
+    mat4 testMatrix4x4 = mat4(testMatrix2x2[0], testMatrix2x2[1], testMatrix2x2[0], testMatrix2x2[1], testMatrix2x2[0], testMatrix2x2[1], testMatrix2x2[0], testMatrix2x2[1]);
+    vec4 v;
+    vec4 vv;
     vv = vec4(0.0);
     vv = vec4(0.0);
-    return v == testInputs && vv == vec4(0.0, 0.0, 0.0, 0.0);
+    if (vv != z) return false;
+    v = i * testMatrix4x4;
+    if (v != vec4(10.0, 10.0, 10.0, 10.0)) return false;
+    v = testMatrix4x4 * i;
+    if (v != vec4(4.0, 8.0, 12.0, 16.0)) return false;
+    v = n * testMatrix4x4;
+    if (v != vec4(-10.0, -10.0, -10.0, -10.0)) return false;
+    v = testMatrix4x4 * n;
+    return v == vec4(-4.0, -8.0, -12.0, -16.0);
 }
 vec4 main() {
-    vec2 _2_v;
-    vec2 _3_vv;
-    _2_v = testInputs.xy;
-    _2_v = testInputs.xy;
-    _3_vv = vec2(0.0);
-    _3_vv = vec2(0.0);
-    return ((_2_v == testInputs.xy && _3_vv == vec2(0.0, 0.0)) && test_mat3_vec3_b()) && test_mat4_vec4_b() ? colorGreen : colorRed;
+    return ((((test_no_op_mat2_X_vec2_b() && test_no_op_mat3_X_vec3_b()) && test_no_op_mat4_X_vec4_b()) && test_no_op_vec2_X_mat2_b()) && test_no_op_vec3_X_mat3_b()) && test_no_op_vec4_X_mat4_b() ? colorGreen : colorRed;
 }
