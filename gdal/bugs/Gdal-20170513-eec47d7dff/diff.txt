diff --git a/gdal/frmts/jpeg/libjpeg/jdhuff.c b/gdal/frmts/jpeg/libjpeg/jdhuff.c
index a9ea31b5e7..e4cdfde063 100644
--- a/gdal/frmts/jpeg/libjpeg/jdhuff.c
+++ b/gdal/frmts/jpeg/libjpeg/jdhuff.c
@@ -448,9 +448,11 @@ jpeg_huff_decode (bitread_working_state * state,
  * On some machines, a shift and add will be faster than a table lookup.
  */
 
+#define NEG_1 ((unsigned int)-1)
+#define AVOID_TABLES
 #ifdef AVOID_TABLES
 
-#define HUFF_EXTEND(x,s)  ((x) < (1<<((s)-1)) ? (x) + (((-1)<<(s)) + 1) : (x))
+#define HUFF_EXTEND(x,s)  ((x) + ((((x) - (1<<((s)-1))) >> 31) & (((NEG_1)<<(s)) + 1)))
 
 #else
 
diff --git a/gdal/frmts/jpeg/libjpeg/jdphuff.c b/gdal/frmts/jpeg/libjpeg/jdphuff.c
index 80a816781b..b9826b0df0 100644
--- a/gdal/frmts/jpeg/libjpeg/jdphuff.c
+++ b/gdal/frmts/jpeg/libjpeg/jdphuff.c
@@ -204,9 +204,10 @@ start_pass_phuff_decoder (j_decompress_ptr cinfo)
 
 #define NEG_1 ((unsigned)-1)
 
+#define AVOID_TABLES
 #ifdef AVOID_TABLES
 
-#define HUFF_EXTEND(x,s)  ((x) < (1<<((s)-1)) ? (x) + (((NEG_1)<<(s)) + 1) : (x))
+#define HUFF_EXTEND(x,s)  ((x) < (1<<((s)-1)) ? (int)((x) + (((NEG_1)<<(s)) + 1)) : (x))
 
 #else
 
diff --git a/gdal/frmts/jpeg/libjpeg/jfdctint.c b/gdal/frmts/jpeg/libjpeg/jfdctint.c
index 0a78b64aee..696d4ba811 100644
--- a/gdal/frmts/jpeg/libjpeg/jfdctint.c
+++ b/gdal/frmts/jpeg/libjpeg/jfdctint.c
@@ -1,8 +1,10 @@
 /*
  * jfdctint.c
  *
+ * This file was part of the Independent JPEG Group's software.
  * Copyright (C) 1991-1996, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
+ * libjpeg-turbo Modifications:
+ * Copyright (C) 2015, D. R. Commander
  * For conditions of distribution and use, see the accompanying README file.
  *
  * This file contains a slow-but-accurate integer implementation of the
@@ -170,8 +172,8 @@ jpeg_fdct_islow (DCTELEM * data)
     tmp11 = tmp1 + tmp2;
     tmp12 = tmp1 - tmp2;
     
-    dataptr[0] = (DCTELEM) ((tmp10 + tmp11) << PASS1_BITS);
-    dataptr[4] = (DCTELEM) ((tmp10 - tmp11) << PASS1_BITS);
+    dataptr[0] = (DCTELEM) LEFT_SHIFT(tmp10 + tmp11, PASS1_BITS);
+    dataptr[4] = (DCTELEM) LEFT_SHIFT(tmp10 - tmp11, PASS1_BITS);
     
     z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
     dataptr[2] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp13, FIX_0_765366865),
diff --git a/gdal/frmts/jpeg/libjpeg/jidctint.c b/gdal/frmts/jpeg/libjpeg/jidctint.c
index a72b3207ca..5d23be75e3 100644
--- a/gdal/frmts/jpeg/libjpeg/jidctint.c
+++ b/gdal/frmts/jpeg/libjpeg/jidctint.c
@@ -183,8 +183,9 @@ jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
 	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 	inptr[DCTSIZE*7] == 0) {
       /* AC terms all zero */
-      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
-      
+      int dcval = LEFT_SHIFT(DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]),
+                             PASS1_BITS);
+
       wsptr[DCTSIZE*0] = dcval;
       wsptr[DCTSIZE*1] = dcval;
       wsptr[DCTSIZE*2] = dcval;
@@ -213,9 +214,9 @@ jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
     z2 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
     z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 
-    tmp0 = (z2 + z3) << CONST_BITS;
-    tmp1 = (z2 - z3) << CONST_BITS;
-    
+    tmp0 = LEFT_SHIFT(z2 + z3, CONST_BITS);
+    tmp1 = LEFT_SHIFT(z2 - z3, CONST_BITS);
+
     tmp10 = tmp0 + tmp3;
     tmp13 = tmp0 - tmp3;
     tmp11 = tmp1 + tmp2;
@@ -314,10 +315,10 @@ jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
     z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
     tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
     tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
-    
-    tmp0 = ((INT32) wsptr[0] + (INT32) wsptr[4]) << CONST_BITS;
-    tmp1 = ((INT32) wsptr[0] - (INT32) wsptr[4]) << CONST_BITS;
-    
+
+    tmp0 = LEFT_SHIFT((INT32) wsptr[0] + (INT32) wsptr[4], CONST_BITS);
+    tmp1 = LEFT_SHIFT((INT32) wsptr[0] - (INT32) wsptr[4], CONST_BITS);
+
     tmp10 = tmp0 + tmp3;
     tmp13 = tmp0 - tmp3;
     tmp11 = tmp1 + tmp2;
diff --git a/gdal/frmts/jpeg/libjpeg/jidctred.c b/gdal/frmts/jpeg/libjpeg/jidctred.c
index 421f3c7ca1..8df892dc39 100644
--- a/gdal/frmts/jpeg/libjpeg/jidctred.c
+++ b/gdal/frmts/jpeg/libjpeg/jidctred.c
@@ -1,8 +1,10 @@
 /*
  * jidctred.c
  *
+ * This file was part of the Independent JPEG Group's software.
  * Copyright (C) 1994-1998, Thomas G. Lane.
- * This file is part of the Independent JPEG Group's software.
+ * libjpeg-turbo Modifications:
+ * Copyright (C) 2015, D. R. Commander
  * For conditions of distribution and use, see the accompanying README file.
  *
  * This file contains inverse-DCT routines that produce reduced-size output:
@@ -143,8 +145,9 @@ jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
 	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*5] == 0 &&
 	inptr[DCTSIZE*6] == 0 && inptr[DCTSIZE*7] == 0) {
       /* AC terms all zero; we need not examine term 4 for 4x4 output */
-      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
-      
+      int dcval = LEFT_SHIFT(DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]),
+                             PASS1_BITS);
+
       wsptr[DCTSIZE*0] = dcval;
       wsptr[DCTSIZE*1] = dcval;
       wsptr[DCTSIZE*2] = dcval;
@@ -156,8 +159,8 @@ jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
     /* Even part */
     
     tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
-    tmp0 <<= (CONST_BITS+1);
-    
+    tmp0 = LEFT_SHIFT(tmp0, CONST_BITS+1);
+
     z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
     z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 
@@ -217,7 +220,7 @@ jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
     
     /* Even part */
     
-    tmp0 = ((INT32) wsptr[0]) << (CONST_BITS+1);
+    tmp0 = LEFT_SHIFT((INT32) wsptr[0], CONST_BITS+1);
     
     tmp2 = MULTIPLY((INT32) wsptr[2], FIX_1_847759065)
 	 + MULTIPLY((INT32) wsptr[6], - FIX_0_765366865);
@@ -294,8 +297,9 @@ jpeg_idct_2x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
     if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*3] == 0 &&
 	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*7] == 0) {
       /* AC terms all zero; we need not examine terms 2,4,6 for 2x2 output */
-      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
-      
+      int dcval = LEFT_SHIFT(DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]),
+                             PASS1_BITS);
+
       wsptr[DCTSIZE*0] = dcval;
       wsptr[DCTSIZE*1] = dcval;
       
@@ -305,8 +309,8 @@ jpeg_idct_2x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
     /* Even part */
     
     z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
-    tmp10 = z1 << (CONST_BITS+2);
-    
+    tmp10 = LEFT_SHIFT(z1, CONST_BITS+2);
+
     /* Odd part */
 
     z1 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
@@ -347,7 +351,7 @@ jpeg_idct_2x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
     
     /* Even part */
     
-    tmp10 = ((INT32) wsptr[0]) << (CONST_BITS+2);
+    tmp10 = LEFT_SHIFT((INT32) wsptr[0], CONST_BITS+2);
     
     /* Odd part */
 
diff --git a/gdal/frmts/jpeg/libjpeg/jmorecfg.h b/gdal/frmts/jpeg/libjpeg/jmorecfg.h
index c800279650..a8cb131ff4 100644
--- a/gdal/frmts/jpeg/libjpeg/jmorecfg.h
+++ b/gdal/frmts/jpeg/libjpeg/jmorecfg.h
@@ -159,6 +159,7 @@ typedef short INT16;
 
 #ifndef XMD_H			/* X11/xmd.h correctly defines INT32 */
 #ifndef _BASETSD_H
+#define INT32_IS_ACTUALLY_LONG
 typedef long INT32;
 #endif
 #endif
diff --git a/gdal/frmts/jpeg/libjpeg/jpegint.h b/gdal/frmts/jpeg/libjpeg/jpegint.h
index 8b5b771fd3..112e3d560f 100644
--- a/gdal/frmts/jpeg/libjpeg/jpegint.h
+++ b/gdal/frmts/jpeg/libjpeg/jpegint.h
@@ -39,6 +39,18 @@ typedef enum {			/* Operating modes for buffer controllers */
 #define DSTATE_STOPPING	210	/* looking for EOI in jpeg_finish_decompress */
 
 
+/*
+ * Left shift macro that handles a negative operand without causing any
+ * sanitizer warnings
+ */
+
+#ifdef INT32_IS_ACTUALLY_LONG
+#define LEFT_SHIFT(a, b) ((INT32)((unsigned long)(a) << (b)))
+#else
+#define LEFT_SHIFT(a, b) ((INT32)((unsigned int)(a) << (b)))
+#endif
+
+
 /* Declarations for compression modules */
 
 /* Master control module */
diff --git a/gdal/frmts/jpeg/libjpeg12/jmorecfg.h.12 b/gdal/frmts/jpeg/libjpeg12/jmorecfg.h.12
index d6c7cb044c..75edd7b87f 100644
--- a/gdal/frmts/jpeg/libjpeg12/jmorecfg.h.12
+++ b/gdal/frmts/jpeg/libjpeg12/jmorecfg.h.12
@@ -178,6 +178,7 @@ typedef short INT16;
 
 #ifndef XMD_H			/* X11/xmd.h correctly defines INT32 */
 #ifndef _BASETSD_H
+#define INT32_IS_ACTUALLY_LONG
 typedef long INT32;
 #endif
 #endif
