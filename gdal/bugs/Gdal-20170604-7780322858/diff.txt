diff --git a/gdal/frmts/grib/degrib18/degrib/degrib2.cpp b/gdal/frmts/grib/degrib18/degrib/degrib2.cpp
index ca081f51f7..49613ac1f4 100644
--- a/gdal/frmts/grib/degrib18/degrib/degrib2.cpp
+++ b/gdal/frmts/grib/degrib18/degrib/degrib2.cpp
@@ -1153,6 +1153,8 @@ int ReadGrib2Record (DataSource &fp, sChar f_unit, double **Grib_Data,
       ParseGrid (&(meta->gridAttrib), Grib_Data, grib_DataLen, Nx, Ny,
                  meta->gds.scan, IS->nd2x3, IS->iain, ibitmap, IS->ib, unitM, unitB, 0,
                  NULL, f_subGrid, x1, y1, x2, y2);
+      if( *Grib_Data == NULL )
+          return -1;
    } else {
       /* Handle weather grid.  ParseGrid looks up the values... If they are
        * "<Invalid>" it sets it to missing (or creates one).  If the table
@@ -1161,6 +1163,8 @@ int ReadGrib2Record (DataSource &fp, sChar f_unit, double **Grib_Data,
                  meta->gds.scan, IS->nd2x3, IS->iain, ibitmap, IS->ib, unitM, unitB, 1,
                  (sect2_WxType *) &(meta->pds2.sect2.wx), f_subGrid, x1, y1,
                  x2, y2);
+      if( *Grib_Data == NULL )
+          return -1;
 
       /* compact the table to only those which are actually used. */
       cnt = 0;
diff --git a/gdal/frmts/grib/degrib18/degrib/metaparse.cpp b/gdal/frmts/grib/degrib18/degrib/metaparse.cpp
index b397ec4199..be9e1cd199 100644
--- a/gdal/frmts/grib/degrib18/degrib/metaparse.cpp
+++ b/gdal/frmts/grib/degrib18/degrib/metaparse.cpp
@@ -2393,10 +2393,24 @@ void ParseGrid (gridAttribType *attrib, double **Grib_Data,
    myAssert (((!f_subGrid) && (subNx == Nx)) || (f_subGrid));
    myAssert (((!f_subGrid) && (subNy == Ny)) || (f_subGrid));
 
+   if( subNy == 0 || subNx > 0xFFFFFFFFU / subNy )
+   {
+       errSprintf ("Too large raster");
+       *grib_DataLen = 0;
+       *Grib_Data = NULL;
+       return;
+   }
+   
    if (subNx * subNy > *grib_DataLen) {
       *grib_DataLen = subNx * subNy;
       *Grib_Data = (double *) realloc ((void *) (*Grib_Data),
                                        (*grib_DataLen) * sizeof (double));
+      if( *Grib_Data == NULL )
+      {
+          errSprintf ("Memory allocation failed");
+          *grib_DataLen = 0;
+          return;
+      }
    }
    grib_Data = *Grib_Data;
 
diff --git a/gdal/frmts/grib/gribdataset.cpp b/gdal/frmts/grib/gribdataset.cpp
index 884b00c760..46aa0ff92c 100644
--- a/gdal/frmts/grib/gribdataset.cpp
+++ b/gdal/frmts/grib/gribdataset.cpp
@@ -256,12 +256,31 @@ CPLErr GRIBRasterBand::LoadData()
         if( !m_Grib_Data )
         {
             CPLError(CE_Failure, CPLE_AppDefined, "Out of memory.");
+            if (m_Grib_MetaData != NULL)
+            {
+                MetaFree(m_Grib_MetaData);
+                delete m_Grib_MetaData;
+                m_Grib_MetaData = NULL;
+            }
             return CE_Failure;
         }
 
         // Check the band matches the dataset as a whole, size wise. (#3246)
         nGribDataXSize = m_Grib_MetaData->gds.Nx;
         nGribDataYSize = m_Grib_MetaData->gds.Ny;
+        if( nGribDataXSize <= 0 || nGribDataYSize <= 0 ||
+            nGribDataXSize > INT_MAX / nGribDataYSize ||
+            nGribDataXSize > INT_MAX / (nGribDataYSize * static_cast<int>(sizeof(double))) )
+        {
+            CPLError(CE_Failure, CPLE_AppDefined,
+                     "Band %d of GRIB dataset is %dx%d, which is too large.",
+                     nBand,
+                     nGribDataXSize, nGribDataYSize);
+            MetaFree(m_Grib_MetaData);
+            delete m_Grib_MetaData;
+            m_Grib_MetaData = NULL;
+            return CE_Failure;
+        }
 
         poGDS->nCachedBytes += nGribDataXSize * nGribDataYSize * sizeof(double);
         poGDS->poLastUsedBand = this;
