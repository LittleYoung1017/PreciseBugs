diff --git a/gdal/ogr/ogrsf_frmts/openfilegdb/filegdbtable.cpp b/gdal/ogr/ogrsf_frmts/openfilegdb/filegdbtable.cpp
index f46cde805d..f2d4fd0e94 100644
--- a/gdal/ogr/ogrsf_frmts/openfilegdb/filegdbtable.cpp
+++ b/gdal/ogr/ogrsf_frmts/openfilegdb/filegdbtable.cpp
@@ -1223,11 +1223,11 @@ vsi_l_offset FileGDBTable::GetOffsetInTableForRow(int iRow)
         nCountBlocksBeforeIBlockIdx = iBlock;
         nCountBlocksBeforeIBlockValue = nCountBlocksBefore;
         int iCorrectedRow = nCountBlocksBefore * 1024 + (iRow % 1024);
-        VSIFSeekL(fpTableX, 16 + nTablxOffsetSize * iCorrectedRow, SEEK_SET);
+        VSIFSeekL(fpTableX, 16 + static_cast<vsi_l_offset>(nTablxOffsetSize) * iCorrectedRow, SEEK_SET);
     }
     else
     {
-        VSIFSeekL(fpTableX, 16 + nTablxOffsetSize * iRow, SEEK_SET);
+        VSIFSeekL(fpTableX, 16 + static_cast<vsi_l_offset>(nTablxOffsetSize) * iRow, SEEK_SET);
     }
 
     GByte abyBuffer[6];
diff --git a/gdal/third_party/LercLib/BitStuffer2.cpp b/gdal/third_party/LercLib/BitStuffer2.cpp
index 9fb1630201..4148f3a331 100644
--- a/gdal/third_party/LercLib/BitStuffer2.cpp
+++ b/gdal/third_party/LercLib/BitStuffer2.cpp
@@ -23,7 +23,6 @@ Contributors:  Thomas Maurer
 
 #include <algorithm>
 #include <cassert>
-#include <limits>
 #include "Defines.h"
 #include "BitStuffer2.h"
 
@@ -359,14 +358,15 @@ void BitStuffer2::BitStuff_Before_Lerc2v3(Byte** ppByte, const vector<unsigned i
 bool BitStuffer2::BitUnStuff_Before_Lerc2v3(const Byte** ppByte, size_t& nBytesRemaining, 
     vector<unsigned int>& dataVec, unsigned int numElements, int numBits)
 {
-  if (numBits >= 32)
+  if (numElements == 0 || numBits >= 32)
     return false;
-  const unsigned int numUInts = (unsigned int)(((unsigned long long)numElements * numBits + 31) / 32);
-  const unsigned long long numBytesLL = (unsigned long long)numUInts * sizeof(unsigned int);
-  /* Can trigger only on 32-bit */
-  if( numBytesLL / sizeof(unsigned int) != numUInts )
-      return false;
-  const size_t numBytes = (size_t)numBytesLL;
+  unsigned long long numUIntsLL = ((unsigned long long)numElements * numBits + 31) / 32;
+  unsigned long long numBytesLL = numUIntsLL * sizeof(unsigned int);
+  size_t numBytes = (size_t)numBytesLL; // could theoretically overflow on 32 bit system
+  if (numBytes != numBytesLL)
+    return false;
+  size_t numUInts = (size_t)numUIntsLL;
+
   unsigned int* arr = (unsigned int*)(*ppByte);
 
   if (nBytesRemaining < numBytes)
@@ -491,16 +491,14 @@ void BitStuffer2::BitStuff(Byte** ppByte, const vector<unsigned int>& dataVec, i
 bool BitStuffer2::BitUnStuff(const Byte** ppByte, size_t& nBytesRemaining, vector<unsigned int>& dataVec,
   unsigned int numElements, int numBits) const
 {
-  if (numElements == 0)
+  if (numElements == 0 || numBits >= 32)
     return false;
-  if (numBits >= 32)
+  unsigned long long numUIntsLL = ((unsigned long long)numElements * numBits + 31) / 32;
+  unsigned long long numBytesLL = numUIntsLL * sizeof(unsigned int);
+  size_t numBytes = (size_t)numBytesLL; // could theoretically overflow on 32 bit system
+  if (numBytes != numBytesLL)
     return false;
-  const unsigned int numUInts = (unsigned int)(((unsigned long long)numElements * numBits + 31) / 32);
-  const unsigned long long numBytesLL = (unsigned long long)numUInts * sizeof(unsigned int);
-  /* Can trigger only on 32-bit */
-  if( numBytesLL / sizeof(unsigned int) != numUInts )
-      return false;
-  const size_t numBytes = (size_t)numBytesLL;
+  size_t numUInts = (size_t)numUIntsLL;
 
   // copy the bytes from the incoming byte stream
   const size_t numBytesUsed = numBytes - NumTailBytesNotNeeded(numElements, numBits);
