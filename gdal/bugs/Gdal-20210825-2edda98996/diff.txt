diff --git a/gdal/ogr/ogrsf_frmts/csv/ogrcsvlayer.cpp b/gdal/ogr/ogrsf_frmts/csv/ogrcsvlayer.cpp
index 7eea7dfa6e..af0fe4dd17 100644
--- a/gdal/ogr/ogrsf_frmts/csv/ogrcsvlayer.cpp
+++ b/gdal/ogr/ogrsf_frmts/csv/ogrcsvlayer.cpp
@@ -178,51 +178,45 @@ char **OGRCSVReadParseLineL( VSILFILE *fp, char chDelimiter,
         return CSVSplitLine(pszLine, chDelimiter, bKeepLeadingAndClosingQuotes,
                             bMergeDelimiter);
 
-    // We must now count the quotes in our working string, and as
-    // long as it is odd, keep adding new lines.
-    char *pszWorkLine = CPLStrdup(pszLine);
+    try
+    {
+        // We must now count the quotes in our working string, and as
+        // long as it is odd, keep adding new lines.
+        std::string osWorkLine(pszLine);
 
-    int i = 0;
-    int nCount = 0;
-    size_t nWorkLineLength = strlen(pszWorkLine);
+        size_t i = 0;
+        int nCount = 0;
 
-    while( true )
-    {
-        for( ; pszWorkLine[i] != '\0'; i++ )
+        while( true )
         {
-            if( pszWorkLine[i] == '\"' )
-                nCount++;
-        }
-
-        if( nCount % 2 == 0 )
-            break;
+            for( ; i < osWorkLine.size(); i++ )
+            {
+                if( osWorkLine[i] == '\"' )
+                    nCount++;
+            }
 
-        pszLine = CPLReadLineL(fp);
-        if( pszLine == nullptr )
-            break;
+            if( nCount % 2 == 0 )
+                break;
 
-        const size_t nLineLen = strlen(pszLine);
+            pszLine = CPLReadLineL(fp);
+            if( pszLine == nullptr )
+                break;
 
-        char *pszWorkLineTmp = static_cast<char *>(
-            VSI_REALLOC_VERBOSE(pszWorkLine, nWorkLineLength + nLineLen + 2));
-        if( pszWorkLineTmp == nullptr )
-            break;
-        pszWorkLine = pszWorkLineTmp;
+            osWorkLine.append("\n");
+            osWorkLine.append(pszLine);
+        }
 
-        // The '\n' gets lost in CPLReadLine().
-        strcat(pszWorkLine + nWorkLineLength, "\n");
-        strcat(pszWorkLine + nWorkLineLength, pszLine);
+        char **papszReturn =
+            CSVSplitLine(osWorkLine.c_str(), chDelimiter, bKeepLeadingAndClosingQuotes,
+                         bMergeDelimiter);
 
-        nWorkLineLength += nLineLen + 1;
+        return papszReturn;
+    }
+    catch( const std::exception& e )
+    {
+        CPLError(CE_Failure, CPLE_OutOfMemory, "%s", e.what());
+        return nullptr;
     }
-
-    char **papszReturn =
-        CSVSplitLine(pszWorkLine, chDelimiter, bKeepLeadingAndClosingQuotes,
-                     bMergeDelimiter);
-
-    CPLFree(pszWorkLine);
-
-    return papszReturn;
 }
 
 /************************************************************************/
