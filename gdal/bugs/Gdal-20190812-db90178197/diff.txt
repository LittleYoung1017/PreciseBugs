diff --git a/gdal/ogr/ogrsf_frmts/nas/nashandler.cpp b/gdal/ogr/ogrsf_frmts/nas/nashandler.cpp
index f65787b356..64da1d9730 100644
--- a/gdal/ogr/ogrsf_frmts/nas/nashandler.cpp
+++ b/gdal/ogr/ogrsf_frmts/nas/nashandler.cpp
@@ -469,6 +469,13 @@ void NASHandler::startElement( const XMLCh* const /* uri */,
     poState->PushPath( m_osElementName );
 
     m_nDepth ++;
+
+    if( poState->osPath.size() > 512 )
+    {
+        CPLError(CE_Failure, CPLE_AppDefined,
+                 "Too long path. Stop parsing");
+        m_poReader->StopParsing();
+    }
 }
 
 /************************************************************************/
diff --git a/gdal/ogr/ogrsf_frmts/nas/nasreader.cpp b/gdal/ogr/ogrsf_frmts/nas/nasreader.cpp
index 818d9eaf68..ae2ff5ddc8 100644
--- a/gdal/ogr/ogrsf_frmts/nas/nasreader.cpp
+++ b/gdal/ogr/ogrsf_frmts/nas/nasreader.cpp
@@ -259,6 +259,7 @@ GMLFeature *NASReader::NextFeature()
         }
 
         while( m_poCompleteFeature == nullptr
+               && !m_bStopParsing
                && m_poSAXReader->parseNext( m_oToFill ) ) {}
 
         poReturn = m_poCompleteFeature;
@@ -266,6 +267,7 @@ GMLFeature *NASReader::NextFeature()
     }
     catch (const XMLException &toCatch)
     {
+        m_bStopParsing = true;
         CPLDebug( "NAS",
                   "Error during NextFeature()! Message:\n%s",
                   transcode( toCatch.getMessage() ).c_str() );
diff --git a/gdal/ogr/ogrsf_frmts/nas/nasreaderp.h b/gdal/ogr/ogrsf_frmts/nas/nasreaderp.h
index fb39f680b3..b080341986 100644
--- a/gdal/ogr/ogrsf_frmts/nas/nasreaderp.h
+++ b/gdal/ogr/ogrsf_frmts/nas/nasreaderp.h
@@ -180,6 +180,7 @@ private:
     void          CleanupParser();
 
     char         *m_pszFilteredClassName;
+    bool          m_bStopParsing = false;
 
 public:
                 NASReader();
@@ -236,7 +237,8 @@ public:
     void        SetFeaturePropertyDirectly( const char *pszElement,
                                     char *pszValue );
 
-    bool        HasStoppedParsing() override { return false; }
+    void        StopParsing() { m_bStopParsing = true; }
+    bool        HasStoppedParsing() override { return m_bStopParsing; }
 
     void        CheckForFID( const Attributes &attrs, char **ppszCurField );
     void        CheckForRelations( const char *pszElement,
